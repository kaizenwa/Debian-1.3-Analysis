.\" Copyright (c) 1995 Paul Gortmaker
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" This man page written 950814 by aeb, based on Paul Gortmaker's HOWTO
.\" (dated v1.0.1, 15/08/95).
.\"
.\"
.\" Traduction 20/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.TH BOOTPARAM 7 "20 Octobre 1996" "Linux 1.3.19" "Manuel de l'administrateur Linux"
.SH NOM
bootparam \- Introduction aux parametres de demarrage du noyau Linux.
.SH DESCRIPTION
Le noyau Linux accepte un certain nombre d'options en ligne de commande, aussi
appelees parametres de demarrage au moment ou il est charge. En general ceci est
utilise principalement pour fournir au noyau des informations sur les parametres
materiels, qu'il serait incapable de determiner seul, ou pour eviter/remplacer
les valeurs qu'il detecterait normalement.

Quand le noyau est demarre directement par le BIOS (par exemple depuis une
disquette sur laquelle le noyau a ete copie en utilisant `cp zImage /dev/fd0'),
il n'y a pas de possibilites de preciser des parametres.
Aussi, afin de tirer parti de ces possibilites, vous devez utiliser un chargeur
capable de transmettre les options, comme Lilo ou loadlin.
Pour un petit nombre de parametres, on peut egalement modifier l'image du noyau
elle\-meme, en utilisant 
.BR rdev (8).

Le programme LILO (LInux LOader) ecrit par Werner Almesberger est le plus largement
utilise. Il permet de demarrer des noyaux divers, et de memoriser la configuration
dans un fichier de texte.(Voir
.BR lilo (8)
et
.BR lilo.conf (5).)
LILO peut demarrer DOS, OS/2 Linux, FreeBSD, etc..., et est assez souple d'emploi.

L'autre chargeur classique de Linux est `LoadLin', un programme DOS, qui peut
demarrer un noyau Linux depuis une session DOS (avec des arguments de demarrage)
a condition que certaines ressources soient disponibles.
Ceci est tres utile pour les personnes desireuses de lancer Linux depuis le DOS.

LoadLin est egalement particulierement utile s'il y a des peripheriques qui
necessitent un driver DOS pour placer le materiel dans un etat donne.
Un exemple classique est celui des cartes sonores `Compatibles SoundBlaster'
qui ont besoin d'un driver DOS pouur manipuler des registres exotiques afin
de placer la carte dans un mode compatible SB. Demarrer le DOS pour initialiser
la carte avec le driver en question, puis charger Linux depuis le prompt du
DOS avec LoadLin evitera la reinitialisation de la carte au redemarrage.

.SH  "LISTE D'ARGUMENTS"

La plupart des argument de demarrages ont la forme suivante :
.IP
nom[=valeur_1][,valeur_2]...[,valeur_11]
.LP
ou `nom' est un mot\-cle unique utilise pour identifier la partie du noyau a laquelle
les valeurs (eventuelles) sont associees.

Les arguments multiples sont presentes les uns apres les autres, separes par des
espaces, avec le format ci\-dessus.
Notez que la limite des 11 arguments est reelle, le code actuel ne traite
que 11 valeurs separees par des virgules, pour chaque mot\-cle.
(Neanmoins, vous pouvez re\-utiliser le meme mot\-cle avec les parametres
additionnels dans certaines situations inhabituelles, en esperant que la
fonction d'initialisation les supportera).

La plupart du traitement a lieu dans 
.IR linux/init/main.c .  
Tout d'abord le noyau verifie si l'argument est l'un des mots\-cles
\fBroot=\fP, \fBro\fP, \fBrw\fP, ou \fBdebug\fP.  
La signification de ces options est donnee plus bas.

Ensuite il parcourt une liste de fonctions d'initialisation (contenue dans la
table bootsetups) pour verifier si la chaine de l'argument specifiee (par exemple `foo')
est associee avec une fonction d'initialisation (`foo_setup()') pour un peripherique
ou une partie du noyau. Si l'on transmet la ligne foo=3,4,5,6 alors le noyau cherchera
dans la table bootsetups si `foo' est enregistre. S'il l'est, le noyau appellera
la fonction associee a `foo' (foo_setup()) en lui passant les arguments 3, 4, 5 et 6
donnes sur la ligne de commande.

Tout ce qui est de la forme `foo=bar' et qui ne concerne pas une fonction 
d'initialisation est interprete comme une variable d'environnement a fixer. Un
exemple (utile ?) serait l'utilisation de `TERM=vt100' comme argument de demarrage.

Les arguments restants, qui n'ont pas ete interceptes par le noyau, et qui ne sont
pas interpretes comme des variables d'environnement, seront passes au processus
numero un, habituellement \fBinit\fP. L'argument le plus courant dans ce cas
est `single' qui indique a \fBinit\fP de demarrer en mode mono\-utilisateur,
sans lancer les demons.
Regardez la page de manuel de la version d'init installe sur votre systeme pour
connaitre les arguments qu'il accepte.

.SH "ARGUMENTS GENERAUX NON SPECIFIQUES A UN PERIPHERIQUE"

.SS  "`no387'"

Certains coprocesseurs i387 ont des bugs qui apparaisssent en mode protege 32 bits.
par exemple, les premiers ULSI-387 bloquaient le systeme durant l'execution des
operations en virgule flottante.
Si l'argument `no387' est indique, Linux ignore le coprocesseur mathematique meme
s'il en detecte un. Bien sur, le noyau doit etre compile avec l'option d'emulation
mathematique.

.SS "`no-hlt'"

Certaines puces i486DX-100 anciennes ont un probleme avec l'instruction `hlt', en
ceci qu'elle ne pouvaient pas reprendre fiablement le cours des operations apres
l'utilisation de `hlt'. L'option `no-hlt' indique a Linux d'utiliser une boucle
infinie quand il n'a rien a faire et de ne pas arreter le CPU. 

.SS "`root=...'"

Cet argument indique au noyau quel peripherique doit etre utilise comme systeme
de fichiers racine pendant le demarrage. La configuration par defaut est determinee
lors de la compilation du noyau, et est generalement egale a la racine du systeme
de fichiers utilise lors de la compilation.
Pour surcharger cette valeur, et selectionner par exemple le second lecteur de
disquette, on utilisera `root=/dev/fd1'. (le peripherique racine peut egalement
etre configure en utilisant
.BR rdev (8).)

Le peripherique racine peut etre specifie de maniere symbolique ou numerique.
Une specification symbolique a la forme /dev/XXYN, ou XX designe un type de
peripherique (`hd' pour un disque dur compatible ST-506, avec Y dans l'intervalle
`a'-`h'; `sd' pour un disque compatible SCSI, avec Y dans `a'-`e'; `xd'
pour un disque compatible XT, Y etant `a' ou `b'; `fd' pour un lecteur de disquette,
Y etant le numero - fd0 serait DOS `A:', et fd1 `B:'), Y la lettre ou le numero du
lecteur, et N le numero de la partition (absent pour les disquettes).

Notez bien que cela n'a rien a voir avec la designation des peripheriques dans
le systeme de fichiers, le prefixe `/dev/' est purement conventionnel.

La specification numerique, plus compliquee et moins portable, du peripherique 
racine en utilisant les numeros majeur/mineur est egalement acceptee.
(par exemple /dev/sda3 a pour nombres majeur 8, mineur 3, et peut donc etre 
mentionne ainsi : `root=0x803'.)

.SS "`ro' et `rw'"

L'option `ro' indique au noyau de monter le systeme de fichiers racine en lecture
seule (read\-only), ainsi les programmes de verification de la coherence du
systeme de fichiers pourront travailler su un systeme au repos.
Aucun processus ne peut ecrire sur le systeme de fichiers en question jusqu'a
ce qu'il soit remonte en lecture/ecriture (Read/Write), avec un
`mount -w -n -o remount /'.
(Voir
.BR mount (8).)

L'option `rw' indique au noyau de monter le systeme de fichiers racine en
lecture/ecriture. C'est l'option par defaut.

Le choix entre lecture\-seule et lecture/ecriture peut aussi etre fixe avec
.BR rdev (8).

.SS "`debug'"

Les messages du noyau sont manipules par le demon de journalisation klogd,
ainsi ils peuvent etre stockes sur disque. Les messages disposant d'une
priorite superieure a la valeur
.I console_loglevel
sont aussi affiches sur la console (Voir <linux/kernel.h>.). Par defaut,
cette variable est positionnee pour journaliser tout ce qui est plus 
important que les messages de debugging. Cet argument de demarrage indiquera
au noyau d'afficher egalement les messages de la priorite DEBUG.
Le niveau de la console peut aussi est modifiee pendant l'execution, avec une
option de klogd. Voir
.BR klogd (8).

.SS "`reserve=...'"

Cet argument permet de proteger une zone de ports d'entrees/sorties de l'auto\-detection.
La forme de l'option est :
.IP
.BI reserve= base_IO,longueur[,base_IO,longueur]...
.LP
Dans certaines machines il peut etre necessaire d'empecher les drivers de rechercher
des peripheriques dans des regions specifiques. En effet, certains materiels peuvent
mal reagir a l'auto\-detection, ou seraient mal reconnus.

L'option reserve indique une zone de ports d'entrees/sorties qu'il ne faut pas
examiner. Un driver de peripherique n'utilisera pas une region reservee, a moins
qu'une autre option le lui indique explicitement. 

Par exemple, la ligne de commande
.IP
reserve=0x300,32  blah=0x300
.LP
empeche tous les drivers, sauf `blah' d'examiner 0x300-0x31F.

.SS "`ramdisk=...'

Cette option est obsolete depuis Linux 1.3.48 environ.
Elle indique la taille, en Ko, d'un disque virtuel optionnel. Par exemple, si l'on
desire charger sur un disque virtuel un systeme de fichiers racine situe sur une
disquette 1.44 Mo, on utiliserait :
.IP
ramdisk=1440
.LP
Cette option est positionnee a la compilation du noyau (par defaut : aucun RAM DISK), 
et peut etre modifiee en utilisant
.BR rdev (8).

.SS "`mem=...'"

L'appel BIOS, defini dans les specifications du PC, qui indique la quantite de 
memoire installee n'est prevu que pour la detection de 64 Mo au plus.
Linux utilise cet appel BIOS pendant le demarrage pour obtenir la quantite de
memoire installee. SI vous avez plus de 64 Mo, vous devez utiliser cet argument
de demarrage pour indiquer au noyau la valeur exacte.
Cette valeur est fournie en decimal ou en hexadecimal (prefixe 0x), et
les suffixes `k' (kilo\-octets) ou `M' (mega\-octets) peuvent etre
utilises.
Voici un extrait d'une note de Linus sur l'utilisation du parametre `mem=' :

\&``Le noyau acceptera n'importe quelle valeur fournie pour le parametre `mem=xx' 
et s'il s'avere que vous lui avez menti, il va se planter horriblement tot ou tard.
Ce parametre indique la plus haute adresse memoire accessible, ainsi
\&`mem=0x1000000' signifie que vous avez 16 Mo de RAM par exemple. Pour une machine
avec 96 Mo cela deviendrait `mem=0x6000000'.

NOTE NOTE NOTE: certaines machines peuvent utiliser le sommet de la memoire pour
cacher le BIOS ou n'importe quoi d'autre, aussi vous ne pourrez pas adresser les
96 Mo en entier. L'inverse est aussi vrai, certaines cartes meres vont projeter
la memoire physique recouverte par le BIOS juste au\-dessus de la memoire
accessible, auquel cas vous auriez acces a 96Mo + 384ko par exemple.  
Si vous faites croire a Linux qu'il dispose de plus de memoire que ce qu'il
a en realite, des sales trucs vont se produire : peut\-etre pas tout de suite,
mais plus tard a coup sur.''

.SH "ARGUMENTS DE DEMARRAGE POUR PERIPHERIQUES SCSI"

Notations generales pour cette section

.I iobase
-- Le premier port d'entree/sortie utilisee par l'hote SCSI. Il est
indique en notation hexadecimale, habituellement dans l'intervalle
0x200 a 0x3ff.

.I irq
-- L'interruption materielle pour laquelle la carte est configuree.
Les valeurs possibles dependent de la carte en question, mais sont generalement
5, 7, 9, 10, 11, 12, et 15. Les autres valeurs sont plutot utilisees par des
peripheriques comme les disques IDE, les lecteurs de disquettes, les ports
serie, etc...

.I scsi-id
-- L'identifiant utilise par l'adaptateur pour se distinguer sur le bus SCSI.
Peu d'adaptateurs permettent de modifier cette valeur, qui est plutot figee en
interne. La valeur classique est 7 mais les cartes Seagate et Future Domain 
TMC-950 utilisent 6.

.I parity
-- Le fait que l'hote SCSI attendent que le peripherique lui fournisse ou non
une valeur de parite pour toutes les informations. Un 1 valide le controle de
parite, un 0 le desactive. Encore une fois, tous les adaptateurs ne supportent
pas la modification de ce comportement comme argument de demarrage.

.SS "`max_scsi_luns=...'"

Un peripherique SCSI peut contenir plusieurs `sous\-peripheriques' en lui\-meme.
L'exemple courant est celui des nouveaux lecteurs de CD-ROM qui gerent
plusieurs disques en meme temps. Chaque CD est adresse par un numero d'unite
logique, `Logical Unit Number' (LUN).
Mais la plupart des peripheriques SCSI, comme les disques durs, ou les lecteurs
de bande, n'ont qu'un seul sous\-peripherique avec un LUN nul.

Certains peripheriques SCSI mal concus ne peuvent pas etre testes sur plusieurs
LUN, aussi,  si la constante CONFIG_SCSI_MULTI_LUN n'est pas definie, les noyaux
recents n'examineront que le LUN zero.

Pour indiquer le nombre de LUN a examiner au demarrage, on indiquera
`max_scsi_luns=n' comme argument, n etant un nombre entre 1 et 8.
Pour eviter les ennuis decrits ci\-dessus, on utilisera n=1 avec des
peripheriques a problemes.

.SS "Configuration des lecteurs de bande SCSI"

Certaines configurations au demarrage des lecteurs de bandes SCSI peuvent etre
effectuees ainsi :
.IP
.BI st= buf_size[,write_threshold[,max_bufs]]
.LP
Les deux premiers nombres sont indiques en Ko. La valeur par defaut de
.I buf_size
est 32 Ko, et la taille maximum exageree est 16 384 Ko.
Le nombre
.I write_threshold
represente la valeur a partir de laquelle le buffer est effectivement ecrit sur la
bande, par defaut 30 Ko.  
Le nombre maximum de buffers varie avec le nombre de lecteur detectes, et
vaut 2 par defaut.
Un exemple d'utilisation serait :
.IP
st=32,30,2
.LP
Des details complets se trouvent dans le fichier README.st, du repertoire
scsi des sources du noyau.

.SS "Configuration Adaptec aha151x, aha152x, aic6260, aic6360, SB16-SCSI"

Les numeros aha se referent aux cartes, et les numeros aic a la veritable
puce SCSI placee sur ces cartes, y compris la Soundblaster-16 SCSI.

Le code de detection pour ces hotes SCSI recherche un BIOS installe, et si
aucun n'est present, la carte ne sera pas trouvee. Alors il vous faudra utiliser
un argument de la forme :
.IP
.BI aha152x= iobase[,irq[,scsi-id[,reconnect[,parity]]]]
.LP
Si le driver a ete compile avec les options de debugging, une sixieme valeur
peut specifier le niveau de debugging.

Tous les parametres sont identiques a ceux decrits au debut de cette section
et la valeur 
.I reconnect
permettra au peripherique de se deconnecter/reconnecter si elle est non nulle.
Un exemple d'utilisation serait :
.IP
aha152x=0x340,11,7,1
.LP
Notez que tous les parametres doivent etre indiques dans l'ordre, ce qui signifie
que pour specifier une parite, il faut egalement specifier les valeurs de
iobase, irq, scsi-id et reconnect.

.SS "Configuration Adaptec aha154x"

Les cartes aha1542 disposent d'un controleur de disquettes i82077, mais pas les
cartes aha1540. Ce sont des cartes maitresses sur le bus, et ont un parametre
indiquant leur ``gentillesse'' dans le partage du bus avec d'autres peripheriques.
Les arguments de demarrage ressemblent a
.IP
.BI aha1542= iobase[,buson,busoff[,dmaspeed]]
.LP
Les valeurs acceptables de iobase sont habituellement 0x130, 0x134, 0x230, 0x234,
0x330, ou 0x334.  Des cartes clones peuvent proposer d'autres valeurs.

Les valeurs
.IR buson ", et " busoff
se referent au nombre de micro\-secondes pendant lesquelles la carte maitrise le bus
ISA. Les valeurs par defaut sont 11 micro\-secondes on, et 4 micro\-secondes off, 
ainsi d'autres cartes (comme les cartes ethernet ISA LANCE) ont la possibilite 
d'acceder au bus ISA.

La valeur
.I dmaspeed
se raporte au debit (en Mo/sec) utilise pour les transferts DMA (Direct Memory
Access). La valeur par defaut est 5 Mo/sec. Des cartes recentes vous permettent
de choisir cette valeur dans une configuration logicielle, les anciennes en
positionnant des cavaliers. On peut utiliser des valeurs jusqu'a 10 Mo/sec, a
condition que la carte mere soit capable de les gerer. Il faut experimenter
prudemment pour les valeurs depassant 5 Mo/sec.

.SS "Configuration Adaptec aha274x, aha284x, aic7xxx"

Ces cartes peuvent accepter un argument de la forme :
.IP
.BI aic7xxx= extended,no_reset
.LP
La valeur
.IR extended ,
si elle est non nulle, indique que la translation etendue ([NDT] ??) est validee
pour les gros disques. La valeur
.IR no_reset ,
si elle est non nulle, indique que le driver ne doit pas reinitialiser le bus
SCSI lors du demarrage de l'hote.

.SS "Configuration des hotes SCSI BusLogic (`buslogic=')"

Actuellement, le driver BusLogic n'accepte qu'un seul parametre, le port de base
d'entree/sortie, attendu parmi les valeurs 0x130, 0x134, 0x230, 0x234, 0x330 et 
0x334.

.SS "Configuration Future Domain TMC-8xx, TMC-950"

Si votre carte n'est pas detectee au demmarrage du systeme, vous devrez utiliser
un argument de boot de la forme :
.IP
.BI tmc8xx= mem_base,irq
.LP
La valeur
.I mem_base
etant l'adresse utilisee par la carte pour projeter ses ports d'entree/sortie en
memoire. C'est generalement l'une des valeurs suivantes :
0xC8000, 0xCA000, 0xCC000, 0xCE000, 0xDC000, ou 0xDE000.

.SS "Configuraton Pro Audio Spectrum"

La PAS16 utilise une puce SCSI NC5380, et les modeles recents permettent une
configuration de la carte sans avoir recours aux cavaliers. L'argument de
demarrage est de la forme :
.IP
.BI pas16= iobase,irq
.LP
La seule nouveaute est que l'on peut indiquer la valeur 255 pour l'IRQ, ce qui
configure le driver pour un fonctionnement sans interruptions, au prix d'une
degradation des performances. La valeur usuelle pour iobase est 0x388.

.SS "Configuration Seagate ST-0x"

Si votre carte n'est pas detectee au boot, vous devrez utiliser un argument de
demarrage de la forme :
.IP
.BI st0x= mem_base,irq
.LP
La valeur
.I mem_base
etant l'adresse utilisee par la carte pour projeter ses ports d'entree/sortie en
memoire. C'est generalement l'une des valeurs suivantes : 0xC8000, 0xCA000, 
0xCC000, 0xCE000, 0xDC000, ou 0xDE000.

.SS "Configuration Trantor T128"

Ces cartes, basees egalement sur une puce NCR5380, acceptent les options suivantes :
.IP
.BI t128= mem_base,irq
.LP
Les valeurs acceptables de
.I mem_base
sont : 0xCC000, 0xC8000, 0xDC000, 0xD8000.

.SS "Cartes n'acceptant pas d'arguments de demarrage"

Actuellement, les cartes SCSI suivantes n'utilisent aucun arguments de demarrage.
Dans certains cas, on peut coder en dur une modification en editant le driver si
besoin est.

Always IN2000, Adaptec aha1740, EATA-DMA, EATA-PIO, Future Domain
16xx, NCR5380 (generique), NCR53c7xx to NCR53c8xx, Qlogic, Ultrastor
(y compris. u?4f), Western Digital wd7000.

.SH "DISQUES DURS"

.SS "Parametres des disques IDE et des lecteurs CD-ROM"

Le driver IDE accepte plusieurs parametres, principalement pour indiquer la 
geometrie du disque avec des controleurs obsoletes.
Les specifications du disque sont indiquees en utilisant `hdX=' 
avec X dans l'intervalle `a'-`h'.

Les options communes a plusieurs disques sont indiquees avec le prefixe `hd='.
Notez que l'utilisation d'un prefixe specifique a un disque avec une option
non specifique marchera egalement comme prevu.

Notez encore que `hd=' peut etre utilise pour faire reference au disque suivant,
non specifie, dans la sequence (a, ..., h).  
Les options `hd=' sont presentees brievement ci\-dessous, regardez le fichier
README.ide dans linux/drivers/block pour plus de details.

.SS "Les options `hd=cyls,heads,sects[,wpcom[,irq]]'"

Ces options sont utilisees pour indiquer la geometrie physique du disque.
Seules les trois premieres valeurs sont necessaires. Les nombres de 
cylindres/tetes/secteurs seront ceux utilises par fdisk.
La valeur de compensation en ecriture (write precompensation wpcom) est ignoree
pour les disques IDE. L'IRQ indiquee sera utilisee avec le controleur du disque
dur, et n'est donc pas reellement specifique au disque.

.SS "L'option `hd=serialize'"

L'interface double IDE CMD-640 est mal concue, en ceci que lorsqu'un disque sur
la seconde interface est utilise simultanement au disque sur la premiere interface,
les donnees seront corrompues. Utiliser cette option indique au driver de s'assurer
que les deux disques ne sont jamais utilises en meme temps.

.SS "L'option `hd=dtc2278'"

Cette option indique au driver que vous avez une interface IDE DTC-2278D.
Le driver essaiera alors d'utiliser des operations specifiques DTC, afin de valider
la seconde interface, et d'obtenir des transferts rapides.

.SS "L'option `hd=noprobe'"

Ne pas examiner ce disque. Par exemple
.IP
hdb=noprobe hdb=1166,7,17
.LP
va desactiver la recherche, mais indique quand meme les parametres geometriques du
disque, ainsi il sera reconnu comme peripherique bloc valide, et pourra donc etre
utilise.

.SS "L'option `hd=nowerr'"

Certains disques ont appparament le bit WRERR_STAT positionne en permanence. Ceci
autorise le driver a ignorer ce bit.

.SS "L'option `hd=cdrom'"

Ceci indique au driver IDE qu'il y a un lecteur de CD-ROM compatible ATAPI
attache a la place d'un disque dur normal. Dans la plupart des cas, le CD-ROM
est identifie automatiquement, mais a defaut cette option peut vous aider.

.SS "Options du driver Standard ST-506 (`hd=')"

Le driver Standard peut accepter des arguments concernant la geometrie des
disques similaires a ceux du driver IDE. Notez cependant qu'il n'attendra
que 3 valeurs (cylindres/tetes/secteurs) et tout ce qui suivra sera ignore
silencieusement.
De plus il n'accepte que l'option `hd=' en argument, `hda=' et autres ne seront
pas valides. Le format est le suivant :
.IP
hd=cylindres,tetes,secteurs
.LP
Si deux disques sont installes, on repete une seconde fois l'argument, avec les
parametres du deuxieme disque.

.SS "Options du driver XT(`xd=')"

Si vous avez la malchance d'utiliser encore ces vieilles cartes 8 bits qui 
transferent les donnees avec une vitesse phenomenale de 125 Ko/s voici des
informations qui vous concernent.
Si la carte n'est pas reconnue, il faut utiliser un argument de boot de la forme :
.IP
xd=type,irq,iobase,dma_chan
.LP
La valeur type indique le fabricant de la carte ainsi  : 
0=generique, 1=DTC, 2,3,4=Western Digital, 5,6,7=Seagate, 8=OMTI. 
La seule difference parmi les differents types du meme fabricant est la chaine de
caracteres utilisee pour la detection du BIOS, mais qui n'est donc pas utilisee si
le type est indique explicitement.

La fonction xd_setup() ne verifie pas les valeurs, et suppose que vous avez bien
saisi les quatre. Ne la decevez pas ! Voici un exemple d'utilisation pour un 
controleur WD1002 avec un BIOS desactive en utilisant le parametre de controleur
XT `default' :
.IP
xd=2,5,0x320,3
.LP

.SH "CD-ROMs (Non-SCSI/ATAPI/IDE)"

.SS "L'Interface Aztech"

la syntaxe pour ce type de carte est :
.IP
aztcd=iobase[,magic_number]
.LP
Si l'on fournit un numero magique valant 0x79 alors le driver demarrera quelque
soit la version du materiel, meme inconnue. Toutes les autres valeurs sont
ignorees.

.SS "l'Interface Sony CDU-31A and CDU-33A"

Cette interface CD-ROM est presente sur certaines cartes sonores Pro Audio 
Spectrum et sur d'autres cartes fournies par Sony.  La syntaxe est la suivante :
.IP
cdu31a=iobase,[irq[,is_pas_card]]
.LP
Fournir une valeur d'IRQ nulle indique au driver que les interruptions materielles
ne sont pas supportees (comme sur certaines cartes PAS). Si votre carte supporte
les interruptions, vous devez les utiliser car cela reduit grandement l'utilisation
du CPU par le driver.

La valeur de
.I is_pas_card
doit etre `PAS' si l'on utilise une carte Pro Audio Spectrum, et rien sinon.

.SS "L'interface Sony CDU-535"

La syntaxe de cette interface CD-ROM est la suivante :
.IP
sonycd535=iobase[,irq]
.LP
Un zero peut etre utilise comme iobase en tant que valeur fictive si l'on veut
seulement indiquer la valeur d'IRQ.

.SS "L'Interface GoldStar"

La syntaxe pour cette interface est :
.IP
gscd=iobase
.LP

.SS "L'Interface Mitsumi Standard"

La syntaxe pour cette interface CD-ROM est :
.IP
mcd=iobase,[irq[,wait_value]]
.LP
La valeur
.I wait_value
est utilise comme delai interne pour les personnes qui ont des problemes avec
leur lecteur, et est implemente ou non en fonction d'une directive #define a la
compilation.
Le Mitsumi FX400 est un lecteur CD-ROM IDE/ATAPI et n'utilise pas le driver mcd.

.SS "L'Interface Mitsumi XA/MultiSession (`mcdx=')"

Actuellement ce driver `experimental' dispose d'une fonction d'initialisation
mais aucun parametre n'est encore implemente (Linux 1.3.15). Il est destine aux
memes materiels que l'interface precedente, mais dispose de fonctionnalites
etendues :

.SS "L'Interface Optics Storage"

la syntaxe pour ce type de carte est :
.IP
optcd=iobase
.LP

.SS "L'Interface Phillips CM206"

La syntaxe pour ce type de carte est :
.IP
cm206=[iobase][,irq]
.LP

Le driver suppose que les nombres entre 3 et 11 sont des valeurs d'IRQ, et
ceux entre 0x300 et 0x370 des ports d'entrees/sorties. Ainsi on peut
specifier une seule valeur ou les deux, dans un ordre quelconque. Il accepte
egalement  `cm206=auto' pour valider l'autodetection.

.SS "L'Interface Sanyo"

La syntaxe pour ce type de carte est :
.IP
sjcd=iobase[,irq[,dma_channel]]
.LP

.SS "L'Interace SoundBlaster Pro"

La syntaxe pour ce type de carte est :
.IP
sbpcd=iobase,type
.LP
ou type est l'une des chaines suivantes (respecter majuscules/minuscules) :
`SoundBlaster', `LaserMate', ou `SPEA'.  La valeur pour iobase est celle de
l'interface CD-ROM, et non pas celle de la partie son de la carte.

.SH "Peripheriques Ethernet"

Chaque peripherique utilise des parametres specifiques, mais ils partagent tous
au moins une valeur d'IRQ, une base d'Entree/Sortie et un nom. Dans sa forme la
plus generique la ligne d'argument est la suivante :
.IP
ether=irq,iobase[,parm_1[,parm_2,...parm_8]],nom
.LP
le premier argument non\-numerique est considere comme le nom. La valeur de 
parm_n (si elle existe) a une signification differente pour chacun des drivers.
Habituellemement les valeurs parm_n sont utilisees pour indiquer des options comme
l'adresse d'une memoire partagee, la selection d'interface, le canal DMA, etc...

L'utilisation la plus courante de ce parametre est de forcer la detection d'une
seconde carte ethernet, car l'attitude par defaut consiste a n'en detecter qu'une
seule. Ceci peut etre effectue simplement avec :
.IP
ether=0,0,eth1
.LP
Notez que les valeurs nulles pour irq et iobase dans l'exemple precedent indiquent
au driver d'effectuer l'auto\-detection.

Le Ethernet\-HowTo contient une documentation tres complete sur l'utilisation de
plusieurs cartes, et sur les valeurs des param_n specifiques aux cartes ou drivers.
Les lecteurs interesses se refereront a la section traitant de leur carte dans ce
document.

.SH "Les lecteurs de disquettes."

Il existe de nombreuses options pour le driver de lecteurs de disquettes, et elles
sont listees dans le fichier README.fd du repertoire linux/drivers/block. 
Les informations suivantes sont extraites de ce fichier.

.SS "floppy=mask,allowed_drive_mask"

Utiliser la valeur mask comme masque binaire des lecteurs valides. Par defaut,
seules les unites 0 et 1 de chaque controleurs de disquettes sont valides, car
certains peripheriques non\-standard (cartes meres ASUS PCI motherboards) bloquent
le clavier quand on accede aux unites 2 ou 3. Cette option est quelque peu obsolete
avec la configuration cmos.

.SS "floppy=all_drives"

Valide tous les lecteurs. Utilisez ceci si vous disposez de plus de deux lecteurs
connectes sur un meme controleur.

.SS "floppy=asus_pci"

Ne valide que les unites 0 et 1 (option par defaut).

.SS "floppy=daring"

indique au driver que le controleur a un comportement correct. Ceci permet
des operations plus efficaces et plus rapides, mais peut echouer avec certains 
controleurs.

.SS "floppy=0,daring"

indique au driver que le controleur doit etre utilise avec mefiance.

.SS "floppy=one_fdc"

indique au driver que vous n'avez qu'un seul controleur (attitude par defaut).

.SS "floppy=two_fdc or floppy=adresse,two_fdc"

indique au driver que vous disposez de deux controleurs. Le second est suppose se
trouver a l'adresse indiquee. Si l'adresse est absente, on suppose qu'elle vaut
0x370.

.SS "floppy=thinkpad"

indique au driver que vous avez un Thinkpad. Les Thinkpads utilisent une convention
inversee pour le changement de disques.

.SS "floppy=0,thinkpad"

indique au driver que vous n'avez pas de Thinkpad. 

.SS "floppy=drive,type,cmos"

fixe le type cmos du lecteur, et valide le lecteur. Ceci est utile si
vous avez plus de deux lecteurs de disquettes (seulement deux sont indiques dans
la configuration cmos), ou si votre BIOS utilise un type de memoire cmos 
non\-standard. Indiquer CMOS a 0 pour les deux premiers disques (defaut), fera
lire la memoire cmos par le driver pour ces deux disques.

.SS "floppy=unexpected_interrupts"

Afficher un message d'avertissement si une interruption inattendue est recue
(comportement par defaut).

.SS "floppy=no_unexpected_interrupts or floppy=L40SX"

Ne pas afficher de message d'avertissement si une interruption inattendue est 
recue. Ceci est necessaire sur les laptops IBM L40SX dans certains modes videos.
(Il semble y avoir une interaction entre la video et les disquettes. Les 
interruptions inattendues n'affectent que les performances et peuvent etre
ignorees en toute securite).

.SH "le Driver Sonore"

Le driver sonore ne peut accepter que des arguments pour surcharger les valeurs
definies a la compilation. Ceci n'est pas recommande car il est assez complexe.
Les options sont decrites dans le fichier Readme.Linux du repertoire 
linux/drivers/sound. Il accepte des arguments de boot de la forme :
.IP
sound=device1[,device2[,device3...[,device11]]]
.LP
ou chaque valeur de deviceN utilise le format 0xTaaaId, avec :

T - Type de peripherique : 1=FM, 2=SB, 3=PAS, 4=GUS, 5=MPU401, 6=SB16,
7=SB16-MPU401

aaa - Adresse d'entree/sortie en hexadecimal

I - Interruption en hexadecimal (10=A, 11=B, ...)

d - Canal DMA

Comme vous le voyez c'est assez complique, et il vaut mieux compiler un noyau avec
ses propres valeurs. L'utilisation de l'argument de demarrage `sound=0' desactivera
totalement le driver sonore.

.SH "Le driver Bus Mouse(`bmouse=')"

Le driver busmouse n'accepte qu'un seul parametre, la valeur d'IRQ materielle
a utiliser.

.SH AUTHEURS
Linus Torvalds (et de nombreux autres)

.SH "VOIR AUSSI"
klogd(8), lilo.conf(5), lilo(8), mount(8), rdev(8)

Cette page de manuel a ete concue a partir du Boot-Parameter-HOWTO version 1.0.1
ecrit par Paul Gortmaker. Des complements d'information seront donc trouves dans
ce document (ou une version plus recente).
