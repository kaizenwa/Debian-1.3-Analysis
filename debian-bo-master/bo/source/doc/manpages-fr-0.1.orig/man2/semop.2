.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Traduction 15/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.TH SEMOP 2 "15 Octobre 1996" Linux "Manuel du programmeur Linux"
.SH NOM
semop \- Operations sur les semaphores
.SH SYNOPSIS
.nf
.B
# include <sys/types.h>
.B
# include <sys/ipc.h>
.B
# include <sys/sem.h>
.fi
.sp
.BI "int semop ( int " semid ,
.BI "struct sembuf *" sops ,
.BI "unsigned " nsops " )"
.SH DESCRIPTION
Cette fonction effectue des operations sur les membres selectionnes
de l'ensemble de semaphores identifie par
.IR semid .
Chacun des
.I nsops
elements dans le tableau pointe par
.I sops
indique une operation a effectuer sur un semaphore 
en utilisant une structure
.B "struct sembuf"
definie comme suit:

.nf
  short sem_num;  /* Numero du semaphore (0=premier) */ 
  short sem_op;   /* Operation sur le semaphore      */
  short sem_flg;  /* Options pour l'operation        */
.fi

Les options possibles pour
.B sem_flg
sont
.B IPC_NOWAIT
et
.BR SEM_UNDO .
Si une operation indique l'option
.BR SEM_UNDO ,
elle sera annulee lorsque le processus se terminera.
.PP
La semantique de cet appel systeme assure qu'un appel systeme
ne sera effectue que si toutes ses operations reussissent.
Chaque operation est effectuee sur le
.BR sem_num \-ieme
semaphore de l'ensemble. Le premier semaphore est le numero
.B 0 .
Pour chaque semaphore l'operation est l'une des trois decrites ci-dessous.
.PP
Si l'argument
.B sem_op
est un entier positif, la fonction ajoute cette valeur a
.BR  semval .
De plus si
.B SEM_UNDO
est demande, le systeme met a jour le compteur "undo" du semaphore.
Cette operation n'est jamais bloquante.
Le processus appelant doit avoir l'autorisation de modification
sur le jeu de semaphores.
.PP
Si 
.B sem_op
vaut zero le processus attend que 
.B semval
soit nul. Plusieurs cas sont possibles :

Si
.B semval
vaut zero, l'appel systeme continue immediatement

Sinon, si l'on a reclame
.B IPC_NOWAIT
dans
.BR sem_flg ,
l'appel systeme echoue (en annulant les actions precedentes)
et
.B errno
contient le code d'erreur
.BR EAGAIN .

Autrement
.B semzcnt
est incremente de 1 et le processus s'endort jusqu'a ce que l'un
des evenements suivants se produise :
.IP
.RS
.IP \(bu
.B semval
devient egal a 0, alors
.B semzcnt
est decremente. L'appel systeme continue
.IP \(bu
Le jeu de semaphores est suprime. L'appel systeme
echoue et
.B errno
contient le code d'erreur
.BR EIDRM .
.IP \(bu
Le processus recoit un signal a intercepter, la
valeur de 
.B semzcnt
est decrementee et l'appel systeme echoue avec
.B errno
contenant le code d'erreur
.BR EINTR .

.RE
Le processus appelant doit avoir l'autorisation de lecture
sur le jeu de semaphores.
.PP
Si
.B sem_op
est inferieur a zero, le processus appelant doit avoir 
l'autorisation de modification sur le jeu de semaphores.

Si
.B semval
est superieur ou egal a la valeur absolue de
.BR sem_op ,
la valeur absolue de 
.B sem_op
est soustraite de
.BR semval .
Si 
.B SEM_UNDO
est indique, le systeme met a jour le compteur "undo" du
semaphore. Puis l'appel systeme continue.
Autrement si l'on a reclame
.B IPC_NOWAIT
dans
.BR sem_flg ,
l'appel systeme echoue (annulant les actions precedentes
et
.B errno
contient le code d'erreur
.BR EAGAIN .
Sinon
.B semncnt
est decremente de un et le processus s'endort jusqu'a ce
que l'un des evenements suivants se produise :
.IP
.RS
.IP \(bu
.B semval
devient superieur ou egal a la valeur absolue de 
.BR sem_op ,
alors la valeur
.B semncnt
est decrementee, la valeur absolue de
.B sem_op
est soustraite de
.B semval
et si
.B SEM_UNDO
est demande le systeme met a jour le compteur "undo" du
semaphore. Puis l'appel systeme continue.
.IP \(bu
Le jeu de semaphores est suprime. L'appel systeme
echoue et
.B errno
contient le code d'erreur
.BR EIDRM .
.IP \(bu
Le processus recoit un signal a intercepter, la
valeur de 
.B semncnt
est decrementee et l'appel systeme echoue avec
.B errno
contenant le code d'erreur
.BR EINTR .
.RE
.PP
en cas de succes, le membre 
.B sempid
de la structure
.B sem
de chacun des semaphores indiques dans le tableau pointee par
.I sops
est rempli avec le PID du processus appelant.
Enfin
.B sem_otime
et
.B sem_ctime
sont fixes a l'heure actuelle.
.SH "VALEUR RENVOYEE"
. semop
renvoie la valeur
.BR 0 ,
s'il reussit et
.B \-1
s'il echoue auquel cas 
.B errno
contient le code d'erreur.
.SH ERREURS
.TP 11
.B E2BIG
l'argument
.I nsops
est superieur a
.BR SEMOPM ,
le nombre maximal d'operations par appel systeme.
.TP
.B EACCES
Le processus appelant n'a pas les permissions d'acces necessaires.
.TP
.B EAGAIN
Une operation a echoue et
.BR IPC_NOWAIT
a ete indique dans l'argument
.IB sem_flg .
.TP
.B EFAULT
.I sops
pointe en dehors de l'espace d'adressage accessible.
.TP
.B EFBIG
La valeur de
.B sem_num
est inferieure a 0 ou superieure ou egale a nombre de
semaphores dans l'ensemble.
.TP
.B EIDRM
Le jeu de semaphores a ete supprime.
.TP
.B EINTR
Un signal a ete recu pendant l'attente.
.TP
.B EINVAL
L'ensemble de semaphores n'existe pas ou
.I semid
est inferieur a zero, ou
.I nsops
n'a pas une valeur positive.
.TP
.B ENOMEM
Pas assez de memoire pour allouer les structures necessaires.
.TP
.B ERANGE
.B semop + semval
est superieur a
.BR SEMVMX.
.SH NOTES
Les structures
.B sem_undo
d'un processus ne sont pas heritees par ses enfants lors d'un
.BR fork (2).
par contre elles sont transmises lors d'un
.BR exec (2).
.PP
Les limites systemes suivantes concernent
.B semop :
.TP 11
.B SEMOPM
Nombre maximal d'operations pour un appel systeme
.B semop .
.TP
.B SEMVMX
Valeur maximale pour
.BR semval .
.PP
.SH BUGS
le systeme maintient une structure 
.B sem_undo
par processus pour chaque semaphore modifie par le processus avec 
une requete "undo". Ces structures sont liberees a la sortie
du processus. Le probleme principal avec le mecanisme undo est
qu'il viole le principe d'un jeu d'operations elementaires
sur les semaphores.
La requete "undo" necessite une table et chaque semaphore peut
avoir participe a de nombreux appels
.B semopt.
Le processus doit-il s'endormir en se terminant ou doit-il
appliquer les operations undo avec un comportement
.B IPC_NOWAIT ?
Actuellement les operations "undo" qui reussissent immediatement
sont appliquees, et les autres sont ignorees silencieusement.
Il vaut donc mieux n'utiliser les requetes undo que dans le
cas d'ensembles de semaphores prives.
.SH "VOIR AUSSI"
.BR ipc (5),
.BR semctl (2),
.BR semget (2).
