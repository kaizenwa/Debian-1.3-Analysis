.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is copyright (C) 1992 Drew Eckhardt,
.\"                 copyright (C) 1995 Michael Shields.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-05-18 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" Traduction 13/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.TH SELECT 2 "13 Octobre 1996" Linux "Manuel du programmeur Linux"
.SH NOM
select, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- Multiplexage d'entrees/sorties synchrones.
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
\fBint select(int \fIn\fB, fd_set *\fIreadfds\fB,
fd_set *\fIwritefds\fB, fd_set *\fIexceptfds\fB,
struct timeval *\fItimeout\fB);
.sp
.BI "FD_CLR(int " fd ", fd_set *" set );
.br
.BI "FD_ISSET(int " fd ", fd_set *" set );
.br
.BI "FD_SET(int " fd ", fd_set *" set );
.br
.BI "FD_ZERO(fd_set *" set );
.fi
.SH DESCRIPTION
.B select
attend des changements d'etat sur plusieurs descripteurs de fichiers.
.PP
Il y a trois ensembles independants de descripteurs qui sont surveilles
simultanement.

Ceux de l'ensemble
.I readfds
seront surveilles pour verifier si des caracteres deviennent disponibles
en lecture.

Les descripteurs de l'ensemble
.I writefds
seront surveilles pour verifier si l'on peut ecrire immediatement
sur eux.

Ceux de l'ensemble
.I exceptfds
seront surveilles pour l'occurence de conditions exceptionnelles. 
Il en existe deux types : l'arrivee de donnees hors-bande sur une
socket, et la disponibilite d'informations d'etat concernant un
pseudo-terminal en mode paquet.

On peut indiquer un pointeur NULL a la place d'un ensemble si l'on ne
veut pas en tenir compte.

En sortie, les ensembles sont modifies pour indiquer les descripteurs
qui ont change de statut.
.PP
Quatre macros sont disponibles pour la manipulation des ensembles
.B FD_ZERO
efface un ensemble.
.B FD_SET
et
.B FD_CLR
ajoutent et suppriment un descripteur dans un ensemble.
.B FD_ISSET
verifie si un descripteur est contenu dans un ensemble, principalement
utile apres le retour de
.B select.
.PP
.I n
est le numero du plus grand descripteur des 3 ensembles, plus 1.
.PP
.I timeout
est une limite superieure au temps passe dans
.B select
avant son retour.
Elle peut etre nulle, ce qui conduit 
.B select 
a retourner immediatement.
Si le timeout est NULL (aucun),
.B select
peut bloquer indefiniment.
.SH "VALEUR RENVOYEE"
En cas de reussite
.BR select
renvoie le nombre de descripteurs dans les ensembles, qui peut etre nul
si le delai de timeout a expire avant que quoi que ce soit d'interessant
ne se produise.
.BR select
retourne \-1 s'il echoue, auquel cas
.I errno
contient le code d'erreur.
.SH ERREURS
.TP 0.8i
.B EBADF
Un descripteur de fichier (dans l'un des ensembles) est invalide.
.TP
.B EINTR 
Un signal a ete intercepte.
.TP
.B EINVAL 
.I n
est negatif
.TP
.B ENOMEM
Pas assez de memoire pour le noyau.
.SH NOTES
Certaines applications appellent
.B select
avec les trois ensembles vides, 
.B n
nul, et un delai de timeout non nul, afin d'endormir, de maniere portable,
le processus avec une precision plus fine que la seconde.
.PP
Sous Linux
.I timeout
est modifie pour indiquer le temps restant mais la plupart des autres
implementations ne le font pas.
Ceci pose des problemes a la fois pour porter sur d'autres systemes du 
code developpe sous Linux qui utilise cette valeur de 
.I timeout
modifiee, et pour porter sous Linux du code qui reutilise plusieurs
fois la structure timeval sans le reinitialiser.

La meilleure attitude a adopter est de considerer
.I timeout
comme indefini apres le retour de
.B select.
.SH EXEMPLE
.nf
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int
main(void)
{
    fd_set rfds;
    struct timeval tv;
    int retval;

    /* Surveiller stdin (fd 0) en attente d'entrees */
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
    /* Pendant 5 secondes maxi */
    tv.tv_sec = 5;
    tv.tv_usec = 0;

    retval = select(1, &rfds, NULL, NULL, &tv);
    /* Considerer tv comme indefini maintenant ! */

    if (retval)
        printf("Donnees disponibles maintenant\\n");
        /* FD_ISSET(0, &rfds) est vrai */
    else
        printf("Pas de donnees depuis 5 secondes\\n");

    exit(0);
}
.fi
.SH "VOIR AUSSI"
.BR accept (2),
.BR connect (2),
.BR read (2),
.BR recv (2),
.BR send (2),
.BR write (2)

