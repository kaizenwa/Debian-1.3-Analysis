.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt (u31b3hs@pool.informatik.rwth-aachen.de)
.\" Modified Sat Jul 24 13:22:07 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 21 Aug 1994 by Michael Chastain (mec@shell.portal.com):
.\"   Referenced 'clone(2)'.
.\" Modified 10 June 1995 by Andries Brouwer (aeb@cwi.nl)
.\"
.\" 
.\" Traduction  9/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" 
.TH FORK 2 "9 Octobre 1996" "Linux 1.2.9" "Manuel du programmeur Linux"
.SH NOM
fork, vfork \- Creer un processus fils (child)
.SH SYNOPSIS
.B #include <unistd.h>
.sp
.B pid_t fork(void);
.br
.B pid_t vfork(void);
.SH DESCRIPTION
.B fork
cree un processus fils qui differe du processus parent uniquement par ses
valeurs PID et PPID. Les verrouillages de fichiers, et les signaux en
attente ne sont pas herites.
.PP
Sous Linux,
.B fork
est implemente en utilisant une methode de copie a l'ecriture. 
Ceci consiste a ne faire la veritable duplication d'une page
memoire que lorsqu'un processus en modifie une instance. Tant
qu'aucun des deux processus n'ecrit dans une page donnee, celle-ci
n'est pas vraiment dupliquee.
Ainsi les
seules penalisations induites par fork sont le temps et la memoire 
necessaires a la copie
la table des pages du parent ainsi que la creation d'une structure de
taches pour le fils.
.PP
.B vfork
est une primitive BSD differente de fork dans laquelle le
fils partage physiquement l'espace d'adressage du pere, ce dernier restant
bloque jusqu'a la terminaison du fils pour eviter les conflits d'adressage.
Le fils doit dans ce cas se terminer obligatoirement par 
.BR _exit (2)
et non pas par
.BR exit (3).

Pour utiliser
.B vfork
il faut avoir defini la constante symbolique
.B __USE_BSD


.SH "VALEUR RENVOYEE"
En cas de succes, le PID du fils est renvoye au processus parent, et 
0 est renvoye au processus fils. En cas d'echec \-1 est renvoye dans le
contexte du parent, aucun processus fils n'est cree, et
.I errno
contient le code d'erreur.
.SH ERREURS
.TP
.B EAGAIN
Impossible d'allouer assez de memoire pour copier la table des pages du
pere et d'allouer une structure de tache pour le fils.
.TP
.B ENOMEM
Pas assez de memoire pour le noyau.

.SH "EXEMPLE"
.BR fork() " :"
.nf
    pid_t   pid;

    pid = fork ();

    if (pid > 0) {
         /* Processus pere      */
    } else if (pid == 0) {
         /* Processus fils      */
    } else {
         /* Traitement d'erreur */
    }
.fi
.PP
.BR vfork() " :"
.nf
    pid_t   pid;

    pid = vfork ();

    if (pid > 0) {
         /* Processus pere      */
    } else if (pid == 0) {
         /* Processus fils      */
         _exit (0);
    } else {
         /* Traitement d'erreur */
    }
.fi
.PP

.\" .SH BUGS
.\" Sous Linux
.\" .B vfork
.\" est tout simplement un alias pour
.\" .BR fork .
.SH "CONFORME A"
SVID, AT&T, POSIX, X/OPEN, BSD 4.3
.SH "VOIR AUSSI"
.BR clone "(2), " execve "(2), " wait (2)
