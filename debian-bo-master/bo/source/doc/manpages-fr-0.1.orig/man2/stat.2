.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\" Parts Copyright (c) 1995 Nicolai Langfeldt (janl@ifi.uio.no), 1/1/95
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt (u31b3hs@pool.informatik.rwth-aachen.de)
.\" Modified Sat Jul 24 10:54:27 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Thu May 18 11:00:31 1995 by Rik Faith (faith@cs.unc.edu)
.\"          to add comments suggested by Todd Larason (jtl@molehill.org)
.\" 
.\" Traduction 13/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.TH STAT 2 "13 Octobre 1996" Linux "Manuel du programmeur Linux"
.SH NOM
stat, fstat, lstat \- Obtenir le statut d'un fichier (file status).
.SH SYNOPSIS
.B #include <sys/stat.h>
.br
.B #include <unistd.h>
.sp
.BI "int stat(const char *" file_name ", struct stat *" buf );
.br
.BI "int fstat(int " filedes ", struct stat *" buf );
.br
.BI "int lstat(const char *" file_name ", struct stat *" buf );
.SH DESCRIPTION
.PP
Ces fonctions renvoient des informations a propos du fichier
indique. Vous n'avez besoin d'aucun droit d'acces au fichier
pour obtenir les informations, mais vous devez avoir le droit
de parcours de tous les repertoires mentionnes dans le
chemin menant au fichier.
.PP
.B stat
recupere le statut du fichier pointe par
.I file_name
et remplit le buffer
.IR buf .

.B lstat
est identique A
.BR stat ,
sauf qu'il donne le statut d'un lien lui-meme et non pas du
fichier pointe par ce lien.

.B fstat
est identique a stat, sauf que le fichier ouvert est pointe
par le descripteur
.IR filedes ,
obtenu avec
.IR open(3) .

.PP
Les trois fonctions retournent une structure
.I stat
declaree ainsi
.PP
.RS
.nf
struct stat
{
    dev_t         st_dev;      /* Peripherique                */
    ino_t         st_ino;      /* Numero i-noeud              */
    umode_t       st_mode;     /* Protection                  */
    nlink_t       st_nlink;    /* Nb liens materiels          */
    uid_t         st_uid;      /* UID proprietaire            */
    gid_t         st_gid;      /* GID proprietaire            */
    dev_t         st_rdev;     /* Type periperique            */
    off_t         st_size;     /* Taille totale en octets     */
    unsigned long st_blksize;  /* Taille de bloc pour E/S     */
    unsigned long st_blocks;   /* Nombre de blocs alloues     */
    time_t        st_atime;    /* Heure dernier acces         */
    time_t        st_mtime;    /* Heure derniere modification */
    time_t        st_ctime;    /* Heure dernier changement    */
};
.fi
.RE
.PP
Remarquez que
.I st_blocks
n'est pas toujours compte en blocs de la taille
.IR st_blksize ,
et que 
.I st_blksize
peut a la place induire une notion de taille de bloc optimale pour
des entrees/sorties efficaces.
.PP
Tous les systemes de fichiers de Linux n'implementent pas tous les
champs "time".
Traditionnellement
.I st_atime
est modifie par
.BR mknod "(2), " utime "(2), " read "(2), " write "(2), et " truncate (2).

Generalement
.I st_mtime
est modifie par
.BR mknod "(2), " utime "(2), et " write (2).
mais
.I pas
en cas de modification de proprietaire, de groupe, de compte de liens physiques ou
de mode.

Traditionnellement
.I st_ctime
est modifie par une ecriture, une lecture, ou une modification de donnees
concernant l'i-noeud (proprietaire, groupe, mode, etc...)
.PP
Les macros suivantes sont fournies pour manipuler les statuts d'un fichier
.RS
.TP 1.2i
S_ISLNK(m)
est-ce un lien symbolique ?
.TP
S_ISREG(m)
un fichier regulier ?
.TP
S_ISDIR(m)
un repertoire ?
.TP
S_ISCHR(m)
un peripherique en mode caractere ?
.TP
S_ISBLK(m)
un peripherique en mode blocs ?
.TP
S_ISFIFO(m)
une FIFO ?
.TP
S_ISSOCK(m)
une socket ?
.RE
.PP
Les attributs suivants correspondent au champ
.I st_mode.
.RS
.TP 0.9i
S_IFMT
00170000 masque de l'ensemble des bits du type de fichier
.TP
S_IFSOCK 
0140000 socket
.TP
S_IFLNK
0120000 lien symbolique
.TP
S_IFREG
0100000 fichier regulier
.TP
S_IFBLK
0060000 peripherique blocs
.TP
S_IFDIR
0040000 repertoire
.TP
S_IFCHR
0020000 peripherique caracteres
.TP
S_IFIFO
0010000 fifo
.TP
S_ISUID
0004000 bit Set-UID
.TP
S_ISGID
0002000 bit Set-Gid
.TP
S_ISVTX
0001000 bit "sticky"
.TP
S_IRWXU
00700 droits de lecture/ecriture/execution du proprietaire
.TP
S_IRUSR (S_IREAD)
00400 le proprietaire a le droit de lecture
.TP
S_IWUSR (S_IWRITE)
00200 le proprietaire a le droit d'ecriture
.TP
S_IXUSR (S_IEXEC)
00100 le proprietaire a le droit d'execution
.TP
S_IRWXG
00070 droits de lecture/ecriture/execution du groupe
.TP
S_IRGRP
00040 le groupe a le droit de lecture
.TP
S_IWGRP
00020 le groupe a le droit d'ecriture
.TP
S_IXGRP
00010 le groupe a le droit d'execution
.TP
S_IRWXO
00007 droits de lecture/ecriture/execution des autres
.TP
S_IROTH
00004 les autres ont le droit de lecture
.TP
S_IWOTH
00002 les autres ont le droit d'ecriture
.TP
S_IXOTH
00001 les autres ont le droit d'execution
.RE
.SH "VALEUR RENVOYEE"
Ces fonctions
retournent zero si elles reussissent.
En cas d'echec \-1 est renvoye, et
.I errno
contient le code d'erreur.
.SH ERREURS
.TP 0.8i
.B EBADF
.I filedes
est un mauvais descripteur.
.TP
.B ENOENT
Le fichier n'existe pas.
.SH EXEMPLE
.nf
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

int
main (int nb_args, char * args [])
{
	struct stat	sts;

	if (nb_args != 2) {
		fprintf (stderr, "syntaxe : %s <fichier>\\n", args [0]);
		exit (1);
	}
	
	if ( stat (args [1], & sts) != 0) {
		fprintf (stderr, "%s : erreur %X\\n", args [0], errno);
		exit (1);
	}
	
	fprintf (stdout, 
		"Peripherique : %d\\n",
		sts . st_dev);
	fprintf (stdout, 
		"Noeud : %ld\\n", 
		sts . st_ino);
	fprintf (stdout,
		"Protection : %o\\n",
		sts . st_mode);
	fprintf (stdout,
		"nb liens materiels: %d\\n",
		sts . st_nlink);
	fprintf (stdout,
		"ID proprietaire : %d\\n",
		sts . st_uid);
	fprintf (stdout,
		"ID groupe: %d\\n",
		sts . st_gid);
	fprintf (stdout,
		"Taille : %lu octets\\n",
		sts . st_size);
	fprintf (stdout,
		"Taille de bloc : %lu\\n",
		sts . st_blksize);
	fprintf (stdout,
		"Nombre de blocs : %lu\\n",
		sts . st_blocks);
}
.fi
.SH "CONFORME A"
SVID (not \fBlstat()\fP), AT&T (not \fBlstat()\fP), POSIX (not
\fBlstat()\fP), X/OPEN (not \fBlstat()\fP), BSD 4.3
.SH "VOIR AUSSI"
.BR chmod "(2), " chown "(2), " readlink "(2), " utime (2)
