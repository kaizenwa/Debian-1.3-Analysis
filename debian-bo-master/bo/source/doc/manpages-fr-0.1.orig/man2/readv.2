.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1996 Tom Bjorkholm <tomb@mydata.se>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" 1996-04-12 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\"
.\" Traduction 14/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.TH READV 2 "14 Octobre 1996" "Linux 1.3.86" "Manuel du programmeur Linux"
.SH NOM
readv, writev \- Lire ou ecrire un vecteur (vector).
.SH SYNOPSIS
.B #include <sys/uio.h>
.sp
.BI "int readv(int " fd ", const struct iovec * " vector ", size_t " count );
.sp
.BI "int writev(int " fd ", const struct iovec * " vector ", size_t " count );
.sp
.B
\fBstruct iovec {\fR
.br
  \fB__ptr_t \fIiov_base\fB;\fR /* Starting address.  */
.br  
  \fBsize_t \fIiov_len\fB;\fR /* Length in bytes.  */
.br
\fB};\fR
.fi
.SH DESCRIPTION
\fBreadv\fR lit les donnees depuis le descripteur de fichier
\fIfd\fR, et place le resultats dans les buffers decrits par
\fIvector\fR. 
Le nombre de buffers est indique par \fIcount\fR. 
Les buffers sont remplis dans l'ordre specifie.
Le fonctionnement est identique a
\fBread\fR a la seule difference que les donnees sont ecrites
dans \fIvector\fR plutot que dans un buffer contigu.

\fBwritev\fR ecrit les donnees se trouvant dans les buffers decrits par
\fIvector\fR dans le descripteur de fichier
\fIfd\fR.
Le nombre de buffers est indique par \fIcount\fR. 
Les buffers sont lus dans l'ordre specifie.
Le fonctionnement est identique a
\fBwrite\fR a la seule difference que les donnees sont lues
depuis \fIvector\fR plutot que depuis un buffer contigu.

.SH "VALEUR RENVOYEE"
.BR readv
renvoie le nombre d'octets lus s'il reussit.

.BR writev
renvoie le nombre d'octets lus s'il reussit.

En cas d'echec \-1 est renvoye, et
.I errno
contient le code d'erreur.

.SH ERREURS
.TP 0.8i
.B EINVAL
Un argument est invalide. Par exemple \fIcount\fR est superieur a \fBMAX_IOVEC\fR, 
ou est nul, ou encore  \fIfd\fR correspond a un objet non accessible.
.TP
.B EFAULT
\fIvector\fR ou l'un des \fIiov_base\fR 
pointent en dehors de l'espace d'adressage accessible
.TP
.B EBADF
\fIfd\fR n'est pas un descripteur de fichier valide.
.TP
.B EINTR
L'appel systeme a ete interrompu par un signal avant d'avoir
pu lire/ecrire quoi que ce soit.
.TP
.B EAGAIN
Les entrees/sorties sont non-bloquantes (\fBO_NONBLOCK\fR).
Soit aucune donnee n'est disponible en lecture, soit
l'objet associe a \fIfd\fR est verrouille.
.TP
.B EISDIR
\fIfd\fR correspond a un repertoire.
.TP
.B EOPNOTSUP
\fIfd\fR correspond a une socket ou a un peripherique ne
supportant pas la lecture ou l'ecriture.
.PP
D'autres erreurs peuvent survenir, en fonction du type d'objet
associe a \fIfd\fR.
.SH "VOIR AUSSI"
.BR read (2),
.BR write (2),
.BR fprintf (3),
.BR fscanf (2).
