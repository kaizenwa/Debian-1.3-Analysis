<CENTER>
<TABLE BORDER=0 WIDTH=90%><TR><TD>
<CENTER>
<H1>Comandi Unix buffi: <TT>tar</TT></H1>
<B>di Maurizio Codogno</B>
</CENTER>
<br>
<center><i><font size=-1>Ristampato con il permesso della rivista
<br>
<a href=http://www.beta.it>
<img align=middle src=images/beta1.gif alt="BETA" border=0></a></font></i></center>
<P>Caro lettore, <BR>
ti eri accorto che avevo dimenticato una delle opzioni di <TT>sort</TT>,
nell'articolo del numero scorso? No? Male. O magari bene: non he hai mai
avuto bisogno, e ciò è bello, perché significa che non è che poi hai
tantissimo da ordinare, o che hai tanto spazio.
<br> L'opzione saltata per un
refuso<SUP>[1]</SUP> è infatti
<br>
<br>
 <TT>-T <EM>tmpdir</EM></TT>
<br><br>
 e serve a
specificare un'altra directory dove fare a scrivere i file temporanei di
cui <TT>sort</TT> ha bisogno. In genere, infatti, viene usata /tmp, ma a
volte può essere necessario spostarsi in caccia di posto libero. Tra
l'altro, il GNU sort deve essere stato scritto da qualcuno abituato a
lavorare sotto DOS: se infatti esso trova settata la variabile di ambiente 
TMPDIR, usa quel valore come directory di lavoro.  </P>

<P>Questa volta tocca a <TT>tar</TT>. Il nome sta per "tape archiver", cioè
archiviatore su nastro: ma oramai sei abbastanza smaliziato per sapere che
le probabilità di usare il comando su un vero nastro sono ben poche. 
Intendiamoci: se il tuo sysadm ha configurato le cose per bene e tu hai
un'unità nastro, puoi archiviarci i tuoi file scrivendo semplicemente
<TT>tar c .</TT> (il punto è parte del comando, non finisce la frase!). 
Ma visto che tanto la risposta sarà più o meno 
<br>
<br>
<EM>tar: can't open /dev/rmt0 : Permission denied</EM>
<br>
<br>
 o qualcosa di simile, ti conviene
lasciare perdere e metterti a leggere i <EM>veri</EM> usi del comando.
Una nota: se non hanno migliorato la man page nelle ultime versioni, il GNU
tar è proprio incomprensibile. Peccato.</P>

<H2 ALIGN=CENTER>Funzioni fondamentali</H2>

<P>Il comando mostrato sopra fa comunque già notare la prima peculiarità: non
si usa il - davanti alle opzioni. Questo non è totalmente vero: in un
impeto di bontà, nelle versioni attuali di tar è comunque possibile far
precedere le opzioni dal carattere '-' senza che il sistema si preoccupi.
In genere, comunque, la sintassi del comando è questa:

<PRE>
   tar {un gruppone di lettere} {un po' di parametri relativi
       alle lettere stesse} [ -I file_include ] file(s) 
       [ -C directory file]
</PRE>

il che dice poco o nulla. Specificando qualcosa in più, scopriamo che
alcune lettere del "gruppone" rappresentano le funzioni fondamentali del
comando, e ce ne può essere una e una sola, che si mette in genere come
primo carattere tanto per ricordarsi cosa si sta facendo. Le altre
lettere possono essere presenti o no; se lo sono, e inoltre hanno dei
parametri, questi sono indicati nello stesso ordine in cui la lettera
corrispondente si trova nel gruppone. Non ci sono quindi problemi di
parsificazione per il sistema; magari ne rimane qualcuno per il povero
utente, che deve spostarsi avanti e indietro tra il gruppone e i parametri
per capire chi si riferisce a cosa.</P>

<P> Il <EM>file</EM> non è un semplice nome, o per meglio dire una semplice
espressione regolare come ad esempio "*": se infatti corrisponde a una
directory, viene lanciata la ricorsione e quindi <TT>tar</TT> comincia a
infilarsi nei meandri del file system riportando alla luce reperti
imprevisti. La ricorsione è fatta per bene, e comprende anche i file i cui
nomi iniziano con un punto e pertanto sono nascosti; insomma, se si
vuole salvare tutto un sottoalbero basta partire da ".".</P>

<P>Le funzioni principali sono cinque: c, r, t, u, x. </P>

<UL>
<LI><B>c</B> sta per <EM>crea</EM>: viene costruito un archivio con i file
che si indicheranno nel resto del comando.

<LI><B>r</B> sta per <EM>rimpiazza</EM>: i file che si indicheranno
verranno aggiunti al fondo dell'archivio, che ovviamente deve esistere
già. E se ce n'erano già con quel nome, ti chiederai? Nic problema! Per
come funziona il comando, quando sono presenti più file con lo stesso
nome ognuno viene scritto sul precedente, e quindi rimarrà solo
l'ultimo.

<LI><B>t</B> sta per <EM>testa</EM><SUP>[2]</SUP>: serve per vedere quali
file sono presenti in un archivio.

<LI><B>u</B> sta per <EM>update (aggiorna)</EM>: è simile alla funzione r,
ma se i file erano già presenti e non sono stati modificati si evita di
sprecare spazio.

<LI><B>x</B> sta per <EM>estrai</EM>: è la funzione che si usa per tirare
fuori questi benedetti file dall'archivio! In realtà spesso non si dice
nemmeno quali sono i file (anche per i problemi con path relativi e
assoluti), e in questo caso si suppone che si vuole estrarre tutto.

</UL>

<P> il GNU tar, per non smentirsi, ne ha aggiunte altre due, che non sono
comunque così necessarie almeno a mio parere:</P>

<UL>
<LI><B>A</B>, che appende un altro file tar (e non un singolo file)
all'archivio;

<LI><B>d</B>, che verifica se ci sono differenze tra i file di un archivio
e quelli che si trovano nella directory, in modo da sapere cosa è cambiato.

</UL>

<P>Ah, dimenticavo: il GNU tar permette sempre di scrivere per esteso i
nomi delle funzioni, facendoli precedere da -- (due segni meno). Serve? non
serve? per me è solo una perdita di tempo.</P>

<H2 ALIGN=CENTER>Funzioni modificanti</H2>

<P>Nel cosiddetto gruppone, ci sono davvero tante lettere. Parlerò qui
solo delle principali, vista la mia solita pigrizia. Tanto non capita
praticamente mai di usarle tutte! Come ho detto sopra, se la funzione ha
un parametro, questo lo si trova bello ordinato dopo il gruppone
stesso.</P>

<UL>
<LI><B>b</B> <EM> nn</EM> indica quanti gruppi da 512 byte bisogna
scrivere in un colpo solo (un blocco). Si usa solo quando si scrive su
nastro, e in genere si lascia a 20 perché ottimizza la velocità di
scrittura.

<LI><B>B</B> costringe <TT>tar</TT> ad aspettare che sia completamente
terminato il blocco di cui sopra, prima di scrivere. Se si usa <TT>tar</TT>
come filtro, e lo si manda attraverso la rete, è facile che ci siano dei
timeout e il sistema creda che i dati siano finiti: e ciò non è bello.l

<LI><B>f</B> <EM> filename</EM> serve per dare il nome del file (vero o
device che sia) da usare come archivio. Se non lo si scrive,
<TT>tar</TT> comincia a controllare se la variabile di ambiente
<TT>TAPE</TT> è settata a qualcosa. Sennò. si prende il valore di
default, tipicamente <TT>/dev/rmt0</TT><SUP>[3]</SUP>. Se lo si scrive,
si usa quello: caso speciale è il nome <TT>-</TT>, che sta per standard
input o standard output a seconda di cosa sia più logico. In questo
modo, il comando si trasforma automagicamente in un filtro, e i veri
amanti di Unix si sentono immediatamente a casa.

<LI><B>h</B> serve per dire a <TT>tar</TT> di leggere i file, o le
directory, puntate dai link simbolici. In genere, infatti, viene
semplicemente salvato il nome del link. 

<LI><B>p</B> permette di salvare, oppure di estrarre, informazioni
supplementari sui permessi del file, come ad esempio il bit setuid. Tutto
questo ovviamente se si è root: pensa altrimenti come sarebbe divertente
creare programmi troiani!

<LI><B>v</B> è la funzione "verbose", che dice tutto quello che vogliamo
sapere quando creiamo un archivio o ne estraiamo dei file. Dopo un po',
rimane una cosa talmente automatica che bisogna farsi forza per non
aggiungerla quando non solo non è necessaria, ma anzi dà fastidio. Pensa
che bello usare due tar uno accodato all'altro, come farò negli esempi, e
vedere a video l'output di uno e dell'altro belli mischiati...

<LI><B>w</B> serve per darci la possibilità di essere decisionisti. In
pratica, tutte le volte che dovrebbe fare qualcosa, <TT>tar</TT> ci chiede
conferma: se rispondiamo con una parola che inizia con y (minuscola),
esegue l'azione, altrimenti lascia perdere.

<LI><B>X</B> <EM> exclude-file</EM> indica il nome di un file dove si
possono scrivere, uno per riga, tutti i file che non si vuole considerare
con le funzioni c,t e x. Si possono avere più funzioni X, ciascuna
corrispondente a un file. Due noticine: ricordati che quando salvi i file
in un archivio, spesso i loro nomi cominciano con <TT>./</TT> ; e ricordati
di inserire il nome stesso del file di esclusione al suo interno!

</UL>

<P>Tanto per darti un'idea, ho lasciato da parte le seguenti funzioni per
il tar Solaris: e,F,FF,i,l,m,o.  Il GNU tar ha invece le seguenti funzioni
denominate con una lettera: F,G,g,i,k,K,L,m,o,O,R,s,S,T,V,W, oltre che
un'altra dozzina per cui non si erano trovate lettere dell'alfabeto
disponibili<SUP>[4]</SUP>. Non è detto che le opzioni corrispondano: F,i,
ed o sono infatti cose diverse. Esistono anche funzioni definite da una
cifra tra 0 e 7, che serve a specificare un device file differente.</P>

<P>Alcune funzioni GNU sono però simpatiche, e vale la pena di darci
un'occhiata.</P>

<UL>

<LI><B>l</B> serve a dire di non cambiare file system, anche se la foga
della ricorsione nella creazione di un archivio lo richiederebbe. La
cosa non è peregrina come sembra: lo si vedrà negli esempi. Non è
inutile fare notare che il tar Solaris ha una concezione completamente
diversa di <B>l</B>; serve infatti ad arrabbiarsi se non esiste il file
a cui un link simbolico punta.

<LI><B>M</B> permette di creare un archivio in più parti, da usare se si
vuole spezzare un file in più floppini.

<LI><B>P</B> lascia la barra iniziale <TT>/</TT> nei nomi dei file che
vengono salvati. Non è una bella cosa (infatti il GNU tar tipicamente la
toglie), ma qualcuno può trovarla comoda.

<LI><B>z</B> (e la sorellina <B>Z</B>) è però l'unica funzione per cui vale
davvero la pena di installare il GNU tar se non lo si ha. Con questa
infatti si può usare <TT>gzip</TT> (o rispettivamente <TT>compress</TT>) 
per comprimere e decomprimere gli archivi. Chi arriva dal mondo dos si è
sempre chiesto perché sotto Unix ci sono due comandi distinti per
archiviare e comprimere, e non un unico zip. Bene, a parte il fatto che
così ce n'è uno solo<SUP>[5]</SUP>, la vera ragione è che si comprime
meglio un unico file che tanti pezzetti, anche se al prezzo di perdere
tutto se il primo file risulta corrotto.

</UL>

<H2 ALIGN=CENTER>Funzioni separate</H2>

<P>Le due funzioni che se ne stanno da sole sono, come visto sopra,
<B>-I </B> <EM> include_file</EM> e <B>-C </B> <EM>directory file</EM>.
La prima funziona più o meno come <B>X</B>: si apre il file e si legge la
lista di file su cui occorre operare. Attento a non usare spazi, che
verrebbero considerati parte del file, e ricordati che se un file è
contemporaneamente incluso ed escluso, quest'ultima condizione prevale.</P>

<P>La funzione <B>-C</B> è un po' più delicata. Viene usata solo con 
le funzioni <B>c</B> ed <B>r</B>, e richiede esattamente due parametri: 
il programma usa il primo come argomento di una <TT>chdir</TT>, e quindi si
posiziona altrove, e il secondo indica quale file (ricorsivamente) salvare.
In pratica, si ha la possibilità di salvare file sotto directory scorrelate
senza dovere partire dalla radice e selezionare solo le parti che
interessano. Meglio che niente anche in questo caso.</P>

<H2 ALIGN=CENTER>Esempi</H2>

<P> Un paio di esempi non fanno certo male. Cominciamo con la cosa più
usuale: estrarre un pacchetto in formato .tar.gz. Il comando da darsi sotto
GNU tar (magari dopo avere controllato con
<br>
<br>
 <TT>tar tvzf pippo.tar.gz | head
<br>
<br>
</TT> se occorre lasciare il file in una directory propria oppure se la
crea lui) è

<PRE>
   % tar xvzf pippo.tar.gz
</PRE>

con la <B>v</B> facoltativa. Non si ha il GNU tar? nessun problema: la
soluzione è allora

<PRE>
   % zcat pippo.tar.gz | tar xvf -
</PRE>

in cui si vede anche con piacere il fatto che lo pseudofile <TT>-</TT> 
in questo caso indica lo standard input.</P>

<P> Se si vuole creare un file tar con la directory <TT>pippo</TT> e
tutti i file sottostanti, la risposta è data da

<PRE>
   % tar cvf pippo.tar pippo
</PRE>

(meglio che posizionarsi in pippo e scrivere <TT>tar cvf ../pippo.tar
.</TT> - almeno a mio parere.</P>

<P> Se si vuole copiare un sottoalbero da un'altra parte in un solo colpo,
non si può usare <TT>cp</TT>, come ormai sanno anche i bambini; 
<TT>tar</TT> è proprio quello che ci vuole, usato due volte in una pipe.

<PRE>
   % cd fromdir; tar cf - | (cd todir; tar xf -)
</PRE>

Avendo una pipe, dobbiamo chiaramente usare lo pseudofile <TT>-</TT>
in entrambi i casi; ci serve inoltre racchiudere il secondo comando in una
sottoshell, perché dobbiamo essere certi che il file sia salvato nella
directory corretta. Altrimenti, la pipe terminerebbe con il <TT>cd</TT>, si
perderebbe tutto l'input e il secondo tar non saprebbe da dove prendere i
dati.</P>

<P> Infine, un comando d'alta scuola: un tar in rete. Supponiamo di avere
un nastro su un'unità remota e di volerlo utilizzare. Purtroppo non abbiamo
la possibilità di copiare tutti i nostri file sul calcolatore remoto, e
comunque siamo talmente innamorati delle pipe che vogliamo sfruttarle ad
ogni pié sospinto. Bene: se sei stato attento, saprai che <B>b</B> e
<B>B</B> dovranno servirci perché abbiamo un nastro e lavoriamo in rete, e
<TT>rsh</TT> non è certo dimenticato. Tutto qui? No. Ovviamente non si può
usare <TT>tar</TT> da ambo le parti. Ci si incasinerebbe con le
dimensioni dei blocchi. Ma niente paura, c'è il nostro vecchio amicone
<TT>dd</TT>! Ecco in primo luogo come si salva il sottoalbero che
parte da <EM>pippo</EM> su un nastro remoto sulla macchina <EM>server1</EM>:

<PRE>
   % tar cvfb - 20 pippo | rsh server1 dd of=/dev/rmt/0 obs=20b
</PRE>

Occorre che la dimesione del blocco per i due comandi sia la stessa. Oltre
20 non si può andare: accontentiamoci. L'operazione inversa è leggermente
diversa:

<PRE>
   % rsh -n server1 dd if=/dev/rmt0 bs=20b | tar xvbBf 20 - 
</PRE>

In questo caso occorre da un lato dare entrambe le dimensioni dei blocchi a
<TT>dd</TT>, dall'altra ricordarsi che il tar in ingresso riceverà dati a
spizzichi e bocconi, e che occorrerà pertanto tranquillizzarlo un po' con
la funzione <B>B</B>. Ma non preoccuparti più di tanto se te la dimentichi:
un tar decente si accorge di essere in una pipe e te la potrebbe aggiungere
di tuo!</P>


<H2 ALIGN=CENTER>Una parolina finale</H2>

<P> La miniserie dedicata ai "comandi buffi Unix" è così terminata: ti
sei cuccato <TT>find</TT>, <TT>dd</TT>, <TT>sort</TT> e <TT>tar</TT>,
che in realtà sono i comandi più usati che hanno un'interfaccia
relativamente strana. Non sono gli unici, a dire il vero: a me viene ad
esempio in mente <TT>cpio</TT> che è abbastanza simile a <TT>tar</TT>
per non valer la pena di studiarlo, e <TT>dump</TT> che oggi è relativamente
poco usato, perché nascosto all'interno dei programmi di backup. In
pratica si può comunque affermare che la sintassi di tutti gli altri
comandi è sempre la stessa.  Pensaci un attimo: non ti rincuora sapere
di potere contare su un po' di sana monotonia?</P>

<P> Il problema è adesso mio. Infatti, devo decidere cosa scrivere nei
prossimi numeri. Non ci crederai, ma alle volte è più difficile stabilire
cosa scrivere che mettermi poi davvero a scriverlo. Idee? Beh, potrei
continuare a trattare i comandi Unix (<TT>ls</TT>, o <TT>grep</TT>, o
persino <TT>bc</TT>, ad esempio); oppure sviscerare qualche segreto sui
programmi di utilità che si trovano spesso inseriti proditoriamente
negli shell script e che si danno per scontate, come <TT>awk</TT> e
<TT>sed</TT>; o ancora scrivere di <TT>vi</TT>, l'editor del Vero
Programmatore quando non è di fretta<SUP>[6]</SUP>. Siccome so che tu sei
intelligente, immagino che hai già sentito puzza di feedback. Perché non
mi <A HREF="mailto:mau@beatles.cselt.stet.it" TITLE="Beta -
suggerimenti">mandi una letterina</A> con le tue preferenze?
Possibilmente prima di Natale, anche se non ti regalerò nulla...</P>

<H2 ALIGN=CENTER> Note &amp; Chiose</H2>

<DL>
<DT>[1]<DD>Dicono sempre così...

<DT>[2]<DD>In realtà sarebbe il TOC, o Table of Contents: ma in pratica lo
si usa per vedere se va tutto bene!

<DT>[3]<DD>Che è un'unità a nastro formato pizza. Reperto da museo,
insomma. Ma questo è nulla rispetto a <TT>cat</TT>, anzi C/A/T ...

<DT>[4]<DD>Che siano stati gli amici GNU a fare lobbying per Unicode, in
modo da avere decine di migliaia di caratteri disponibili?

<DT>[5]<DD>Barando, però: infatti occorre che il comando di
(de)compressione sia presente nel path.

<DT>[6]<DD>Il Vero Programmatore quando ha fretta usa <TT>ed</TT>, che non
lo infastidisce con prolissi messaggi di errore, e quando ha
<EM>veramente</EM> fretta scrive direttamente con 
<TT>cat&gt;<EM>nomefile</EM></TT> quello che gli serve.
</DL>
<P>
<I>Maurizio Codogno è reperibile su Internet tramite la redazione di
BETA</I>
</TD></TR></TABLE>
<P>
