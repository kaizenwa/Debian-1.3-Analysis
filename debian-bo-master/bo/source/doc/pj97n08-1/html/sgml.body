<center>
<font size=+2 color=blue>
        SGML - HTML - DTD : Il solito triangolo
</font>
	<br>
<font size=+0 color=navy>
	Ma, che c'entra Elvis, buonanima?
</font>
</center>

<address>
<p align=right>
	<font size=-1 color=green>
	di
	<a href="mailto:fpolacco@icenet.fi?Subject=sgml-html-dtd">
	Fabrizio Polacco</a>
	</font>
</address>

<hr>

<font color=black -- ripristina il colore -->
<font size=+2 color=navy>G</font>ià, che c'entra il compianto?
<br>
<em>
	Triangoli, strane sigle, fantasmi del passato ... sta a vedere
	che 'sto qua mò ci tira fuori pure Renato Zero!
</em>
<br>
	Buoni, buoni, è una lunga storia, ma vedrò se riesco a farla
	corta.
<br>
	Vedete, tutto ebbe inizio negli anni sessanta, quando un certo
	Donald Knuth ...
<br>
	Come dite? Non così da lontano? Va beh, come volete:

<p>
	Qualche giorno fa, leggendo un <i>niusgrup</i>, ho incontrato
	una affermazione che prima mi ha fatto sorridere, poi mi ha
	fatto indignare, e quindi, smaltito il sacro furore, mi ha fatto
	riflettere sulla necessità di scrivere questo articolo.
<br>
<font size=-1>
	Non lo avrei fatto altrimenti, più che altro per la delusione
	dovuta ai miei precedenti interventi su queste pagine cui,
	senza mia richiesta, erano stati promessi prima tre, poi due,
	infine un CD premio, che non si è mai degnato di farsi vedere.
	Segno che i miei precedenti interventi non erano all'altezza, e
	su questo sono certamente d'accordo. Vediamo se mi riesce di
	fare meglio stavolta.
</font>

<p>
	Ma torniamo alla nostra affermazione; qualcuno ha scritto:
<br>
<font size=-1>
	Come sarebbe a dire <font color=red>Chi?</font>
	Come direbbe il celebre parroco di Dalla, <em>si dice il
	peccato, non il peccatore!</em>
</font>

<p>
<code>
	L'SGML e' un sistema generalizzato per scrivere documenti,
	tipo HTML ma con i tag leggermente diversi.
</code>

<p>
	Lo <font color=blue>Structured Generalized Markup
	Language</font>, detto comunemente <strong>SGML</strong>, è un
	metalinguaggio, definito in svariati e corposi standard ISO,
	che consente di descrivere formalmente un linguaggio a markup.
	Il beneficio della descrizione formale risiede nella
	possibilità di usare strumenti automatici per la verifica di
	documenti (non voglio chiamarli testi), la loro
	stampa/visualizzazione e/o la loro conversione ad altri
	formati. Con questo voglio mettere in chiaro che la
	<strong>cosa</strong> non è limitata ai soli <em>testi</em>, ma
	spazia in un campo vastissimo di applicazioni (un esempio per
	tutti: l'industria aeronautica utilizza un'applicazione SGML
	per archiviare disegni e descrizioni delle parti che compongono
	un aereoplano).
<p>
	L'<strong>HTML</strong> è invece una applicazione
	dell'<strong>SGML</strong> in quanto la sua grammatica può essere
	descritta formalmente in SGML.
<br>
	Questa descrizione formale è composta dal <strong>DTD</strong>,
	il Document Type Definition e dallo Style Sheet (a sua volta
	definito in base al linguaggio DSSSL) che descrive grosso modo
	<em>come</em> gli oggetti referenziati dagli elementi 
	del DTD vadano elaborati.

<p>
	Si può illustrare questa relazione con una bella analogia:
<br>
	L'SGML corrisponde ad un linguaggio di programmazione di alto
	livello, con la sua sintassi formalmente definita.
<br>
	L'HTML è una applicazione, un programma scritto in questo
	linguaggio di programmazione, e il suo DTD ne è il sorgente.
<br>
	Il documento, la vostra pagina HTML sono i dati oggetto
	dell'elaborazione del programma.

<p>
	Fatte queste premesse (doverose, per soddisfare il mio smodato
	<em>ego</em>), voglio subito entrare nel vivo di questo
	monologo e parlarvi dell'argomento di questo articolo:

<p align=center>
<br><br>
<font size=+2 color=blue>
	un modo
</font>
<font size=+2 color=navy>
	diverso
</font>
<font size=+2 color=blue>
	di scrivere in HTML
</font>

<p>
	<strong>Diverso</strong> da che?
<br>
	Ma dalla moda imperante degli editor HTML, vere e proprie
	contraddizioni nei termini; dall'abuso di tomi e libroni tutti
	tesi nello sforzo di spiegarvi <em>quanto belle</em> sembreranno
	le vostre pagine sugli schermi di Netscape o, peggio, di
	Explorer.

<p>
	Intendiamoci: se siete tra quelli che ritengono che l'HTML serva
	solo per creare pagine fugaci da far apparire sul Web come
	comete, allora potete tranquillamente smettere di leggere e
	andare a pascolare nel cortile del Netscape Gold e degli altri
	editor Wysiwyg per HTML! Qui non troverete nulla per voi, e vi
	annoierete a morte.

<p>
	Scopo di questo articolo è di liberarvi da questo <font
	color=red> ciarpame </font> e portarvi ad abbeverarvi
	direttamente alla fonte, cioè a scrivere HTML consultandone il
	DTD.

<p>
	Suona terribilmente difficile, vero?
<br>
	Beh, non lo è.
<br>
	Anche il compilare il kernel di Linux suona come un'operazione
	terribilmente difficile, molto più che installare il DOS.
	Eppure io e voi sappiamo benissimo che è, in realtà, assai più
	facile.
<br>
	Così è anche per il DTD dell'HTML.

<p>
	Seguitemi, vi porterò per mano a scoprirne i temibili segreti!

<p align=center>
<br><br>
<font size=+2 color=blue>
	Dentro i segreti dell'SGML
</font>

<p>
	Della sua sintassi, per il momento, ci occuperemo solo di
<font color=blue>
	Entità</font>,
<font color=blue>
	Elementi</font> ed
<font color=blue>
	Attributi</font>.

<p>
<br>
	Le
<font size=+0 color=blue>
	ENTITÀ
</font>
<p>
	Per gli scopi di questo articolo, ci basti dire che una
	<font color=blue> Entità </font> SGML è simile ad una macro che
	verrà espansa nel DTD o nel documento stesso.
<br>

	Troviamo perciò definiti come entità dei <strong>nomi</strong>
	riferiti a liste di <em>elementi</em> sintattici o terminali, o
	a singoli caratteri o addirittura ad interi documenti
	<em>pubblici</em>, cioè implicitamente noti, o reperibili in ben
	determinati cataloghi. Il termine <font color=red> #PCDATA
	</font> indica del testo che non deve essere considerato ai fini
	del riconoscimento degli elementi propri dell'SGML, come ad
	esempio un testo da considerare letteralmente.

<p>
	La sintassi di una entità è la seguente:
<ul>
<li>	Dichiarazione di entità.
	<br>
	<font color=red>
	<code>
		&lt;!ENTITY
	</code>
	</font>

<li>	Il nome dell'entità.
	<br>
	Speciali entità, dette entità parametro, vengono marcate
	precedendole dal carattere
	<font color=red> <code>%</code> </font>
	e potranno essere usate solo all'interno delle dichiarazioni
	degli elementi SGML.
	<br>
	Nel DTD HTML sono utilizzate solo queste ultime.

<li>	Il testo letterale da sostituire ad ogni occorrenza del nome
	dell'entità,
	<br>
	<i>ovvero</i>
	<br>
	la parola <code>SYSTEM</code> seguita da un identificatore
	di un oggetto del sistema operativo (tipicamente un file)
	il cui contenuto verrà usato in sostituzione del nome
	dell'entità.
</ul>

	Un tipico utilizzo di entità è dato dalla definizione
	dell'intero set di caratteri, o per dare un nome ad una lista
	di elementi.

<p>
<br>
	Gli
<font size=+0 color=blue>
	ELEMENTI
</font>

<p>
	Gli elementi sono le componenti strutturali principali
	dell'SGML, e sono utilizzati per marcare, all'interno del
	documento, le sue componenti logiche.
<br>
	I <font color=blue>tag</font>, insomma.
<br>
	Gli elementi sono nomi normali e quindi virtualmente
	indistinguibili dal testo che li circonda. Perciò vanno
	racchiusi tra entità speciali, chiamati <code>STAGO</code>
	(start of tag open = "<font color=red>&lt;</font>"),
	<code>ETAGO</code>
	(end of tag open = "<font color=red>&lt;/</font>") e
	<code>TAGC</code>
	(tag close = "<font color=red>&gt;</font>").
<br>
	Queste entità sono riservate ed il loro uso all'interno dei
	documenti è inibito. Speciali entità sono definite per
	consentirne la rappresentazione all'interno di un
	documento.

<p>
	La sintassi di un elemento è la seguente:
<ul>
<li>	Dichiarazione di elemento.
	<br>
	<font color=red>
	<code>
		&lt;!ELEMENT
	</code>
	</font>

<li>	Il nome dell'elemento (o un gruppo di nomi).

<li>	Due caratteri specificanti le regole di minimizzazione.
	<br>
	Queste regole indicano l'obbligo
	(<font color=red> <code>-</code> </font>)
	<em>ovvero</em> l'opzionalità
	(<font color=red> <code>o</code> </font>)
	rispettivamente dell'<code>Apertura di Tag</code> e
	della <code>Chiusura di Tag</code> 

<li>	Il modello del contenuto.
	<br>
	I contenuti possono essere specificati sia in termini di altri
	elementi che di entità, o gruppi di esse.
	<br>
	Un tag vuoto, privo di contenuto, indicherà qui la parola
	chiave <font color=red> <code>EMPTY</code> </font>.
	<br>
	Gli elementi sintattici che descrivono il modello del contenuto
	di un elemento sono:
<p>
	<font color=blue> Raggruppamenti. </font>
	<dl compact>
	<dt>	<font color=red>()</font>
	<dd>	le parentesi, liberamente annidate, raggruppano gli
		elementi contenuti.
	</dl>
<p>
	<font color=blue> Indicatori di ripetizione. </font>
	<br>
	Seguono sempre, senza spazi interposti, gli elementi o il
	raggruppamento cui si applicano.
	<dl compact>
	<dt>	<font color=red>*</font>
	<dd>	l'asterisco indica una ripetizione di zero o più volte.
	<dt>	<font color=red>+</font>
	<dd>	il più indica uno o più ripetizioni.
	<dt>	<font color=red>?</font>
	<dd>	il punto di domanda indica zero o esattamente una sola
		ripetizione.
	</dl>
<p>
	<font color=blue> Connettori di gruppo. </font>
	<br>
	Si interpongono tra due o più elementi o raggruppamenti.
	<dl compact>
	<dt>	<font color=red>,</font>
	<dd>	la virgola indica una sequenza ordinata in cui gli
		elementi separati da virgole devono comparire tutti e
		nell'ordine indicato.
	<dt>	<font color=red>&</font>
	<dd>	l'ampersand indica una sequenza non-ordinata in cui gli
		elementi separati da ampersand devono comparire tutti,
		ma senza vincolo di ordine.
	<dt>	<font color=red>|</font>
	<dd>	la barra o pipe indica una alternativa in cui deve
		comparire uno ed uno solo degli elementi elencati.
	</dl>
<p>
	<font color=blue> Inclusori ed Esclusori. </font>
	<br>
	Precedono sempre, senza spazi interposti, gli elementi o il
	raggruppamento cui si applicano.
	<dl compact>
	<dt>	<font color=red>+</font>
	<dd>	include gli elementi nella entità dichiarata, senza
		limiti.
	<dt>	<font color=red>-</font>
	<dd>	esclude gli elementi nella entità dichiarata, senza
		eccezioni.
	</dl>

</ul>

<p>
<br>
	Gli
<font size=+0 color=blue>
	ATTRIBUTI
</font>
<p>
	Gli <font color=blue> attributi </font> descrivono
	caratteristiche di un elemento che non fanno parte 
	del suo contenuto.

<p>
	La sintassi di un attributo è la seguente:
<ul>
<li>	Dichiarazione di attributo.
	<br>
	<font color=red>
	<code>
		&lt;!ATTLIST
	</code>
	</font>

<li>	nome dell'elemento a cui si riferisce la lista di attributi:
	<ul>
	<li>	nome dell'attributo
	<li>	una parola chiave (
		<font color=red> <code>CDATA</code> </font>,
		<font color=red> <code>IDREF</code> </font>,
		<font color=red> <code>NMTOKEN</code> </font> o
		<font color=red> <code>NUMBER</code> </font>)
		<br>
		<em>ovvero</em>
		<br>
		una lista dei possibili valori dell'attributo.
	<li>	un valore di default
		<br>
		<em>ovvero</em>
		<br>
		una parola chiave (
		<font color=red> <code>#REQUIRED</code> </font>,
		<font color=red> <code>#IMPLIED</code> </font> o
		<font color=red> <code>#CURRENT</code> </font>)
		indicanti nell'ordine,
		l'obbligatorietà, l'opzionalità o la persistenza del
		valore dell'attributo).
	</ul>
</ul>

<p align=center>
<br> <br>
<font size=+2 color=blue>
	Diamo un'occhiata al DTD.
</font>

<p>

	Per poter consultare un DTD, la prima cosa da fare, la più
	ovvia, è <b>procurarsi il documento</b>. Nel nostro caso, quello
	dell'HTML 3.2, dobbiamo frugare il sito Web di <tt>W3.org</tt>,
	dove troviamo il
	<a href="http://www.w3.org/pub/WWW/MarkUp/Wilbur/HTML32.dtd">nostro DTD</a>.

<p>
	
	Stampiamolo, per prima cosa, perché il contatto fisico stimola
	la libido.
	<br>
<font size=-1>
	Lo so, non c'entra niente, ma ... suonava tanto bene!
</font>
	
<p>
<ul>
<li>

	Proprio all'inizio, come primissima cosa, incontriamo una
	dichiarazione piuttosto complessa:
	<br>

	</font><pre>
&lt;!ENTITY % HTML.Version
	"-//W3C//DTD HTML 3.2 Draft//EN"

-- Typical usage:
	&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Draft//EN">
	&lt;html>
	...
	&lt;/html>
--
>	</pre> <font color=black -- ripristina il colore -->

	Questa dichiara una entità parametro di nome
	<font color=red> % HTML.Version </font>
	il cui utilizzo tipico è mostrato nel commento inglobato nella
	dichiarazione (e che io ho evidenziato in rosso, per chi ha un
	browser a colori).
	<br>
	Per chi non se ne fosse accorto, diremo che, in SGML, è
	considerato commento tutto quanto racchiuso tra due coppie di
	<code><font color=red>--</font></code> (<em>doppi
	trattini</em>)

	<br>
<font size=-1>
	Questa scelta appare particolarmente infelice, in quanto non
	distingue l'apertura di un commento dalla sua chiusura: in
	parole povere l'inserimento accidentale di un doppio trattino ha
	il perfido effetto di rovesciare il significato di tutti i
	doppi trattini successivi!
	Vi consiglio di rinunciare fin d'ora all'idea di usare i
	trattini per evidenziare parti di testo, soprattutto se
	racchiusi in un commento.
</font>

	<br>
	Orbene, quella strana riga che <b>dovremo</b> mettere in testa
	ad ogni documento html altro non è che la dichiarazione di quale
	applicazione SGML (cioè di quale DTD) dovrà essere usata per
	verificare, consultare, visualizzare o stampare il documento che
	segue.

	<br>
	Senza quella riga nessun sistema SGML (come un browser sgml o un
	sistema di stampa o conversione) potrà comprendere i tag
	inseriti nel nostro testo, nè elaborarli conseguentemente.

	<br>
	Una pagina HTML priva di questa dichiarazione iniziale rimarrà
	confinata nell'ambito dei soli <em>browser html</em>, con la
	spada di Damocle della possibilità di future incompatibilità tra
	diverse versioni dello standard HTML. Finora non è ancora
	successo, ma certamente prima o poi salterà fuori la necessità
	di introdurre nello standard una modifica che rende
	incompatibili i documenti di due diverse versioni. Un browser (o
	un sistema di stampa) limitato a HTML dovra tentare di
	indovinare la corretta interpretazione, mentre un sistema SGML
	se la troverà indicata proprio qui, nella prima riga. Non per
	nulla l'SGML viene considerato come <em>lo stato dell'arte nella
	manutenzione della documentazione</em>.

<p>
<li>

	Seguono una serie di dichiarazioni di entità che possiamo
	tranquillamente saltare, riservandoci di tornarci solo quando
	avremo bisogno di dereferenziarle; saltiamo quindi le sezioni
	<tt>Imported Names</tt>, <tt>Character mnemonic entities</tt>,
	<tt>special symbols</tt> e soffermiamoci invece sulla sezione
	del
	
	</font><pre>
&lt;!--============ Text Markup ==============================-->

&lt;!ENTITY % font "TT | I | B  | U | STRIKE | BIG | SMALL | SUB | SUP">
&lt;!ENTITY % phrase "EM | STRONG | DFN | CODE | SAMP | KBD | VAR | CITE">
&lt;!ENTITY % special "A | IMG | APPLET | FONT | BR | SCRIPT | MAP">
&lt;!ENTITY % form "INPUT | SELECT | TEXTAREA">

&lt;!ENTITY % text "#PCDATA | %font | %phrase | %special | %form">

&lt;!ELEMENT (%font|%phrase) - - (%text)*>

&lt;!ELEMENT FONT - - (%text)*     -- local change to font -->
&lt;!ATTLIST FONT
	size    CDATA   #IMPLIED    -- [+]nn e.g. size="+1", size=4 --
	color   CDATA   #IMPLIED    -- #RRGGBB in hex, e.g.  red: color="#FF0000" --
	>

&lt;!ELEMENT BR    - O EMPTY   -- forced line break -->
&lt;!ATTLIST BR
	clear (left|all|right|none) none -- control of text flow --
	>
	</pre> <font color=black -- ripristina il colore -->

	In testa vediamo subito la dichiarazione di quattro entità
	parametro che fungono da nome per altrettante liste di elementi
	correlati tra loro. Una quinta entità dichiara una lista delle
	precedenti quattro più, ovviamente, normale testo, e la pone
	sotto il significativo nome di <font color=red>%text</font>.
	
	Vedremo ora come, grazie ad un sapiente gioco di entità, si
	ottengano dichiarazioni recursive di elementi che ammettono sè
	stessi nel loro contenuto.

	Infatti, la riga
	</font><pre>
&lt;!ELEMENT (%font|%phrase) - - (%text)*>
	</pre> <font color=black -- ripristina il colore -->

	dichiara che uno qualunque degli elementi delle due liste <font
	color=red>%font</font> oppure <font color=red>%phrase</font>
	può essere composto da zero o più occorrenze dell'entità <font
	color=red>%text</font>, che contiene recursivamente anche
	l'elemento in questione, che potrà perciò essere annidato a
	volontà in sè stesso da solo o intervallato da altri elementi
	presenti nella lista.

	Capirete subito come una tale informazione non possa essere
	elencata in alcuna tavola o manuale di riferimento HTML (pena la
	noiosità e l'inutilità di tale elenco) mentre sia chiarissima a
	chi sa leggere queste dichiarazioni.

<p>
<li>

	Esaminiamo ora la lista degli attributi dell'elemento FONT:

	</font><pre>
&lt;!ATTLIST FONT
	size    CDATA   #IMPLIED    -- [+]nn e.g. size="+1", size=4 --
	color   CDATA   #IMPLIED    -- #RRGGBB in hex, e.g.  red: color="#FF0000" --
	>
	</pre> <font color=black -- ripristina il colore -->

	Questa dichiarazione ci informa che l'elemento
	<font color=red>FONT</font> dispone di due attributi,
	<font color=red>SIZE</font> e/o <font color=red>COLOR</font>,
	ciascuno dei quali ammette del testo come valore dell'attributo,
	mentre la costante <font color=red>#IMPLIED</font> indica
	l'opzionalità di questi attributi, che possono
	cioe essere entrambi presenti, o uno dei due, o essere
	totalmente assenti. I commenti ricordano con esempi i valori
	ammessi per gli attributi. In particolare occorre ricordare che
	se il testo contiene spazi o caratteri non alfanumerici (come il
	+/- o il # degli esempi) allora il testo <b>dovrà</b> essere
	racchiuso tra virgolette. Un altro commento ci dà l'elenco dei
	nomi dei colori ammessi nel relativo attributo:

	</font><pre>
aqua, black, blue, fuchsia, gray, green, lime, maroon,
navy, olive, purple, red, silver, teal, white, and yellow
	</pre> <font color=black -- ripristina il colore -->

	Io, di norma, preferisco usare questi nomi per la chiarezza del
	testo, benchè si debba notare come i colori effettivamente usati
	siano dipendenti dall'applicativo.

<p>
<li>

	Un elemento semplice semplice è il noto &lt;BR>:

	</font><pre>
&lt;!ELEMENT BR    - O EMPTY   -- forced line break -->
&lt;!ATTLIST BR
	clear (left|all|right|none) none -- control of text flow --
	>
	</pre> <font color=black -- ripristina il colore -->

	Notate l'opzionalità del tag di chiusura (la
	<code><font color=red>O</font></code>)
	e l'assenza del contenuto del tag (la parola chiave
	<code><font color=red>EMPTY</font></code>);
	indicano che il tag viene utilizzato da solo, senza contenuto nè
	chiusura.

<br>

	Come spesso nel caso di tag vuoti, sono presenti uno o più
	attributi, di solito (ma non in questo caso) la vera ragione
	d'essere del tag. L'attributo <b>clear</b>, per chi non lo
	sapesse, serve per ripristinare l'allineamento del testo ai
	margini del browser, solitamente in presenza di immagini.
	Osservate la lista dei valori possibili dell'attributo, e
	l'indicazione del valore di default.

<p>
<li>

	Passiamo ora ad un esempio un più complicato:

	</font><pre>
&lt;!--================= Preformatted Text ======================-->

&lt;!-- excludes images and changes in font size -->

&lt;!ENTITY % pre.exclusion "IMG|BIG|SMALL|SUB|SUP|FONT">

&lt;!ELEMENT PRE - - (%text)* -(%pre.exclusion)>
&lt;!ATTLIST PRE
        width NUMBER #implied -- is this widely supported? --
	>
	</pre> <font color=black -- ripristina il colore -->

	Ripetiamo anche la dichiarazione dell'entità text, che abbiamo
	visto prima:

	</font><pre>
&lt;!--============ Text Markup ==============================-->

&lt;!ENTITY % font "TT | I | B  | U | STRIKE | BIG | SMALL | SUB | SUP">
&lt;!ENTITY % phrase "EM | STRONG | DFN | CODE | SAMP | KBD | VAR | CITE">
&lt;!ENTITY % special "A | IMG | APPLET | FONT | BR | SCRIPT | MAP">
&lt;!ENTITY % form "INPUT | SELECT | TEXTAREA">

&lt;!ENTITY % text "#PCDATA | %font | %phrase | %special | %form">

&lt;!ELEMENT (%font|%phrase) - - (%text)*>
	</pre> <font color=black -- ripristina il colore -->

	Osservate la dichiarazione dell'elemento:

	</font><pre>
&lt;!ELEMENT PRE - - (%text)* -(%pre.exclusion)>
	</pre> <font color=black -- ripristina il colore -->

	dove si nota l'obbligatorietà dei tag di apertura e di chiusura,
	il contenuto del tag (zero o più elementi definiti dall'entità
	<font color=red>%text</font>)
	con l'esclusione (il meno immediatamente precedente la
	parentesi) di qualunque elemento definito dall'entità
	<font color=red>%pre.exclusion</font>.
<br>
	Osservate come in sole due righe vengano definiti i tag che
	potete utilizzare nel contenuto del tag PRE; molti credono che
	questo tag corrisponda più o meno ad un <i>verbatim</i> e che al
	suo interno nulla sia ammesso! Invece molti tag sono
	utilizzabili e bisogna inoltre convertire tutti i caratteri 
	<font color=red> &lt; </font> e <font color=red> &amp; </font>
	nelle corrispondenti entità 
	<font color=red> &amp;lt; </font> e <font color=red> &amp;amp; </font>.

</ul>

<p>

	Il resto ve lo lascio come esercizio: leggetevi il DTD, seguite
	le varie definizioni incrociate; le liste e le tabelle sembrano
	incredibilmente intricate, ma, se vi dedicate qualche minuto a
	seguire la rincorsa di elementi, attributi ed entità, scoprirete
	che tutto appare semplice e familiare.

<p>
<font size=+2 color=blue>
	Infine ...
</font>
<p>

	A questo punto spreo di avere stimolato sufficientemente la
	vostra curiosità. Se vi siete domandati come abbia fatto a
	modificare il colore dei marcatori degli elementi di una lista o
	a cambiare il colore entro un testo taggato con &lt;pre> senza
	usare il tag &lt;font> (che Netscape visualizza, ma che è
	vietato dal DTD), vi consiglio di rileggervi questo articolo
	usando un ... normale editor (sempre nella speranza che gli
	impaginatori del PLUTO JOURNAL non l'abbiano stravolto, sigh).
<br>
	Potrete osservare come, con pochi accorgimenti stilistici, un
	testo html possa essere reso leggibilissimo fin dal suo
	sorgente. Se vi venisse il sospetto che tutto quello spazio
	poteva essere risparmiato per diminuire la lunghezza del file,
	allora ho una sorpresa per voi: nonostante sul vostro schermo il
	testo appaia molto spaziato (e di conseguenza leggibile) questo
	è ottenuto inserendo solo un paio di newline per paragrafo ed un
	tab per riga. Poche centinaia di byte, ma in compenso ho usato
	molti meno tag di quanti ne inserisca un editor HTML, ad esempio
	ho sempre omesso i tag di chiusura che sono indicati come
	opzionali nel DTD. Solo di &lt;/p> e di &lt;/li> sono circa 300
	byte in meno!

<p>
<hr>
<p>

	E il compianto?
	Non so, non saprei in verità dirvi quanto e cosa c'entri il
	compianto Elvis in tutto questo, eccetto che <tt>elvis</tt> è il
	nome di un editor della classe <i>vi</i> che ha una interessante
	capacità di visualizzare ed editare un testo HTML sia dandogli
	una leggera formattazione per rendere l'idea di come apparirebbe
	il vostro testo su un browser, sia di evidenziare con l'uso dei
	colori, i commenti e gli elementi sintattici dell'HTML, rendendo
	più piacevole (e facile) il lavoro.

<p>

	A risentirci!
