<H1 ALIGN=CENTER>Il Postscript</H1>

Che cosa è il Postscript? Perché viene menzionato così spesso
nel mondo Unix/Linux?<BR>
La maggior parte degli utenti Linux pensa che il Postscript sia
solo un passaggio obbligato per poter stampare (assieme o senza Ghostscript)
e che se ci fosse un driver di stampa a livello di sistema operativo
come in MacOS o Windows sarebbe lo stesso (o meglio).<BR>
Cerchiamo allora di spiegare perché viene usato il Postscript
e che benefici comporta.<BR>
Il Postscript è un linguaggio di programmazione sviluppato per
descrivere pagine di testo e grafica in modo indipendente dalla
risoluzione e dal dispositivo di visualizzazione. Questo significa che
una pagina di testo e grafica può essere distribuita e quindi
visualizzata o stampata alla massima risoluzione consentita senza
perdita di qualità.<BR>

<H2> Uno sguardo più approfondito</H2>
Questo paragrafo tratta alcuni aspetti tecnici di Postscript: se non
siete curiosi o interessati potete tranquillamente saltarlo.<BR>
Il Postscript è un linguaggio di programmazione che viene interpretato (dalla stampante,
oppure da Ghostscript): potete quindi dare una occhiata ad un 
qualsiasi file (programma) Postscript con il vostro editor preferito
oppure potete dare i comandi di esempio direttamente a <I>ghostscript</I>
lanciandolo in modo interattivo da un xterm
(usare in questo modo ghostscript facilita la programmazione perché
nel prompt dell'interprete viene visualizzato il numero di elementi sullo stack).
Il meccanismo di interpretazione, infatti, è basato sul concetto di stack: a
mano a mano che un token viene letto l'interprete decide se farne un
push sullo stack (nel caso di una variabile il <I>valore</I> di questa viene
messo sullo stack) oppure se interpretarlo come un operatore ed eseguire
perciò la funzione associata.<BR>
Un concetto importante in Postscript è il dizionario, cioè una struttura
dati che associa un nome ad un determinato valore (sequenza di
comandi, numero oppure testo).<BR>
In pratica, dato il simbolo <B>tok</B>, se è interpretabile come un numero,
il numero viene messo sullo stack, se è il nome di una variabile il
valore di questa viene messo sullo stack, se è lo mnemonico di un
operatore, questo viene eseguito. Il nome di una variabile preceduto
da slash (<B>/tok</B>) viene messo sullo stack tale e quale, cosl come
i comandi racchiusi tra parentesi graffe. Esempio:
<PRE>
/square {dup mul} def
</PRE>
In questo esempio il simbolo square viene messo sullo stack seguito
dalla sequenza di comandi <B>{dup mul}</B>. A questo punto il token
<I>def</I> viene riconosciuto come un operatore che inserisce nel dizionario
la procedura <B>square</B> con la definizione <B>{dup mul}</B>.<BR>
La nuova procedura <B>square</B> può essere usata in questo modo:
<PRE>
5 square
</PRE>
La sequenza di operazioni eseguite è questa:<BR>
<UL>
	<LI> 5 viene messo sullo stack
	<LI> square viene cercato nel dizionario e sostituito dalla sua
		definizione
	<LI> dup viene riconosciuto come un operatore che duplica il primo
		elemento dello stack
	<LI> mul viene riconosciuto come l'operatore di moltiplicazione che
		prende due valori dallo stack, li moltiplica e mette il risultato
		di nuovo sullo stack
</UL>
Per definire una variabile invece che una nuova funzione si immette sullo
stack un numero:
<PRE>
/PI 3.1415 def
</PRE>
oppure del testo (che in postscript viene racchiuso tra parentesi tonde):
<PRE>
/mystring (Articolo per il PlutoJ!) def
</PRE>
Il linguaggio fornisce anche operatori per ruotare e scalare l'immagine.
Grazie a questa flessibilità
sono stati creati dei postprocessori, ovvero dei filtri che ricevono in input
un programma postscript e lo modificano in modo da cambiare orientamento,
posizione e dimensione delle pagine.<BR>
Esistono due sistemi di coordinate in postscript: lo spazio dell'utente e lo spazio
del dispositivo. L'interprete usa una matrice di conversione tra i due sistemi di
coordinate che può essere modificata utilizzando gli operatori <B>scale</B>,
<B>rotate</B> e <B>translate</B>.<BR>
Le operazioni di disegno si eseguono definendo un percorso (<B>path</B>) e
chiamando l'operatore <B>stroke</B> (che disegna una linea lungo il percorso) oppure
l'operatore <B>fill</B> che riempie la zona racchiusa dal percorso con il
colore selezionato. C'è anche una altro operatore che può essere applicato
ad un path: l'operatore <B>clip</B> che limita l'output all'area descritta dal path.
Un aspetto interessante è che può essere usato come path anche
l'outline di un stringa di testo (con l'operatore <B>charpath</B>).<BR>
Ultima nota: l'interprete postscript mantiene anche uno stack di dizionari,
e cerca di risolvere i simboli a partire dall'ultimo dizionario messo sullo
stack: in questo modo è facile ridefinire il significato degli
operatori standard (ad esempio l'operatore <B>showpage</B> che emette la
pagina sul dispositivo grafico).<BR>
Ecco infine un esempio di codice che potete inserire direttamente
al prompt di ghostscript o salvare in un file (in quest'ultimo caso
la prima linea del file deve iniziare con <B> %! </B>).
<PRE>
% ---cut cut---
/Times-Roman findfont 64 scalefont setfont
/mystring (Pluto Journal) def
newpath
100 100 moveto
mystring show
200 200 moveto
2 2 scale
90 rotate
mystring show
showpage
% ---cut cut---
</PRE>


<H2> E ora passiamo al sodo ...</H2>
Alcuni esempi di quanto sia utile postscript: quelli che hanno letto
anche la precedente sezione sapranno perché tutto questo è
possibile.<BR>
<UL>
	<LI> <B>Descrizione indipendente dalla risoluzione</B><BR>
		Provate a vedere con ghostview il file <I>tiger.ps</I> che viene incluso
		con tutte le distribuzioni di ghostscript e ingrandite le ciglia dell'occhio
		della tigre: vedrete che, aumentando lo zoom (che è praticamente la
		stessa cosa che aumentare la risoluzione), i dettagli migliorano, sono più
		nitidi.<BR>
		Provate ora a fare la stessa cosa con una immagine bitmap, (un qualunque .gif
		oppure la stessa immagine della tigre trasformata in bitmap con il comando
		<B>gs -sDEVICE=ppmraw -dNOPAUSE -SOutputFile=/tmp/t.ppm tiger.ps</B>) e scoprite la
		differenza.
	<LI> <B>Ridimensionare ruotare e traslare</B><BR>
		Vi è mai venuta la voglia di stampare la documentazione di Linux
		ma vi siete scoraggiati pensando che richiede centinaia di
		pagine? Se avete le versioni postscript potete postprocessarle e
		riarrangiare le pagine in modo che ne vengano stampate due per pagine
		(o anche di più se avete una buona stampante e buona vista:-)).<BR>
		Naturalmente i programmi che fanno questo sporco lavoro sono gi` stati scritti
		(per esempio il pacchetto psutils della distribuzione Debian).
	<LI><B>Distribuzione e qualità</B><BR>
		Un file postscript può essere distribuito (nessun problema di little o big-endian,
		dimensione di int e long etc:-)) e visualizzato al meglio delle
		possibilità del dispositivo finale: sia che si abbia una stampante a 9 aghi
		che una laser a 600 dpi la qualità della stampa dipende dalla stampante,
		non dal formato del file.
</UL>


<H2>L'avvocato del diavolo</H2>
Naturalmente non è tutto oro quello che luccica: un file postscript non è
facilmente editabile in modo <I>visuale</I> (tuttavia esistono dei programmi che
trasformano postscript in un altro formato vettoriale o che consentono di editare
direttamente il postscript con qualche limitazione come Tailor e Adobe Illustrator); le stampanti postscript
costano di più (ma Ghostscript consente di stampare anche su stampanti non-PS);
al postscript standard mancano istruzioni per la fusione di più immagini con
vari livelli di opacità e ci sono altri limiti ancora legati alla natura di linguaggio
di programmazione (ci sono anche gli operatori per cancellare e scrivere file, per cui
è bene usare l'opzione <B>-dSAFER</B> di Ghostscript, per esempio).

<H2>Riferimenti</H2>
Ci sono diversi siti sul WWW che trattano aspetti introduttivi della programmazione
in postscript, è sufficiente fare una ricerca con parole chiave come <B> postscript,
guide, document, first</B> etc.<BR>
Il newsgroup dedicato a postscript è: <B> comp.lang.postscript</B>.<BR>

<P>
<A HREF="mailto:lupus@dei.unipd.it">Paolo Molaro</A>
