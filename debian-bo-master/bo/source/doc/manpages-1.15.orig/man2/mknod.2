.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt
.\"                               1993,1994 Ian Jackson.
.\" You may distribute it under the terms of the GNU General
.\" Public Licence. It comes with NO WARRANTY.
.\"
.\" Tiny fix by urs - 960818
.\"
.TH MKNOD 2 "29 March 1994" "Linux 1.0" "Linux Programmer's Manual"
.SH NAME
mknod \- create a directory
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.B #include <unistd.h>
.sp
.BI "int mknod(const char *" pathname ", mode_t " mode ", dev_t " dev );
.fi
.SH DESCRIPTION
.B mknod
attempts to create a filesystem node (file, device special file or
named pipe) named
.IR pathname ", specified by " mode " and " dev .

.I mode
specifies both the permissions to use and the type of node to be created.

It should be a combination (using bitwise OR) of one of the file types
listed below and the permissions for the new node.

The permissions are modified by the process's
.BR umask
in the usual way: the permissions of the created node are
.BR "(mode & ~umask)" .

The file type should be one of
.BR S_IFREG ", " S_IFCHR ", " S_IFBLK " and " S_IFIFO
to specify a normal file (which will be created empty), character
special file, block special file or FIFO (named pipe), respectively,
or zero, which will create a normal file.

If the file type is
.BR S_IFCHR " or " S_IFBLK
then
.I dev
specifies the major and minor numbers of the newly created device
special file; otherwise it is ignored.

The newly created node will be owned by the effective uid of the
process.  If the directory containing the node has the set group id
bit set, or if the filesystem is mounted with BSD group semantics, the
new node will inherit the group ownership from its parent directory;
otherwise it will be owned by the effective gid of the process.
.SH RETURN VALUE
.BR mknod
returns zero on success, or -1 if an error occurred (in which case,
.I errno
is set appropriately).
.SH ERRORS
.TP
.B EPERM
.I mode
requested creation of something other than a FIFO (named pipe), and
the caller is not the superuser; also returned if the filesystem
containing
.I pathname
does not support the type of node requested.
.B EINVAL
.I mode
requested creation of something other than a normal file, device
special file or FIFO.
.B EEXIST
.I pathname
already exists.
.TP
.B EFAULT
.IR pathname " points outside your accessible address space."
.TP
.B EACCES
The parent directory does not allow write permission to the process,
or one of the directories in
.IR pathname
did not allow search (execute) permission.
.TP
.B ENAMETOOLONG
.IR pathname " was too long."
.TP
.B ENOENT
A directory component in
.I pathname
does not exist or is a dangling symbolic link.
.TP
.B ENOTDIR
A component used as a directory in
.I pathname
is not, in fact, a directory.
.TP
.B ENOMEM
Insufficient kernel memory was available.
.TP
.B EROFS
.I pathname
refers to a file on a read-only filesystem and write access was
requested.
.TP
.B ELOOP
.I pathname
contains a reference to a circular symbolic link, ie a symbolic link
whose expansion contains a reference to itself.
.TP
.B ENOSPC
The device containing
.I pathname
has no room for the new node.
.SH CONFORMING TO
SVr4 (but the call requires privilege and is thus not in POSIX),
4.4BSD.  The Linux version differs from the SVr4 version in that it
does not require root permission to create pipes, also in that no
EMULTIHOP, ENOLINK, or EINTR error is documented.
.SH BUGS
The
.B mknod
call cannot be used to create directories or socket files, and cannot be
used to create normal files by users other than the superuser.

There are many infelicities in the protocol underlying NFS.  Some
of these affect
.BR mknod .
.SH SEE ALSO
.BR read "(2), " write "(2), " fcntl "(2), " close (2),
.BR unlink "(2), " open "(2), " mkdir "(2), " stat "(2), " umask (2),
.BR mount "(2), " socket "(2), " fopen (3).
