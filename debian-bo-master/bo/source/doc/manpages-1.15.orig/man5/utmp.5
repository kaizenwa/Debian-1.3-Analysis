.\" Copyright (c) 1993 Michael Haardt (michael@cantor.informatik.rwth-aachen.de), Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\" 
.\" Modified Sun Jul 25 10:44:50 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Thu Feb 26 16:08:49 MET 1995 by Michael Haardt
.\" Modified Sat Jul 20 14:39:03 MET DST 1996 by Michael Haardt
.TH UTMP 5 "July 20, 1996" "" "File formats"
.SH NAME
utmp, wtmp \- login records
.SH SYNOPSIS
#include <utmp.h>
.SH DESCRIPTION
The
.B utmp
file allows one to discover information about who is currently using the
system.  There may be more users currently using the system, because not
all programs use utmp logging.
.PP
\fBWarning:\fP \fButmp\fP must not be writable, because many system
programs depend on its integrity.  You risk faked system logfiles and
modifications of system files if you leave \fButmp\fP writable to any
user.
.PP
The file is a sequence of entries with the following structure declared
in the include file:
.RS
.nf
.sp
.ta 3i
#define UT_UNKNOWN	0
#define RUN_LVL		1
#define BOOT_TIME	2
#define NEW_TIME	3
#define OLD_TIME	4
#define INIT_PROCESS	5
#define LOGIN_PROCESS	6
#define USER_PROCESS	7
#define DEAD_PROCESS	8

#define UT_LINESIZE	12
#define UT_NAMESIZE	8
#define UT_HOSTSIZE	16

struct utmp {
  short ut_type;	/* type of login */
  pid_t ut_pid;		/* pid of process */
  char ut_line[UT_LINESIZE];	/* device name of tty \- "/dev/" */
  char ut_id[2];	/* init id or abbrev. ttyname */
  time_t ut_time;	/* login time */
  char ut_user[UT_NAMESIZE];	/* user name */
  char ut_host[UT_HOSTSIZE];	/* host name for remote login */
  long ut_addr;	/* IP addr of remote host */
};
.sp
.fi
.RE
This structure gives the name of the special file associated with the
user's terminal, the user's login name, and the time of login in the form
of
.IR time (2).
String fields are terminated by \fB'\e0'\fP if they are shorter than the size
of the field.
.PP
The first entries ever created result from \fIinit\fP(8) processing
\fIinittab\fP(5).  Before an entry is processed, though, \fIinit\fP(8)
cleans up utmp by setting \fBut_type\fP to \fBDEAD_PROCESS\fP, clearing
\fBut_user\fP, \fBut_host\fP and \fBut_time\fP with null bytes for each
record which \fBut_type\fP is not \fBDEAD_PROCESS\fP or \fBRUN_LVL\fP
and where no process with PID \fBut_pid\fP exists.  If no empty record
with the needed \fBut_id\fP can be found, init creates a new one.  It
sets \fBut_id\fP from the inittab, \fBut_pid\fP and \fBut_time\fP to the
current values and \fBut_type\fP to \fBINIT_PROCESS\fP.
.PP
\fIgetty\fP(8) locates the entry by the pid, changes \fBut_type\fP to
\fBLOGIN_PROCESS\fP, changes \fBut_time\fP, sets \fBut_line\fP and waits
for connection to be established.  \fIlogin\fP(8), after a user has been
authenticated, changes \fBut_type\fP to \fBUSER_PROCESS\fP, changes
\fBut_time\fP and sets \fBut_host\fP and \fBut_addr\fP.  Depending on
\fIgetty\fP(8) and \fIlogin\fP(8), records may be located by
\fBut_line\fP instead of the preferable \fBut_pid\fP.
.PP
When \fIinit\fP(8) finds that a process has exited, it locates its utmp
entry by \fBut_pid\fP, sets \fBut_type\fP to \fBDEAD_PROCESS\fP and
clears \fBut_user\fP, \fBut_host\fP and \fBut_time\fP with null bytes.
.PP
\fIxterm\fP(1) and other terminal emulators directly create a
\fBUSER_PROCESS\fP record and generate the \fBut_id\fP by using the last
two letters of \fB/dev/ttyp\fP\fI%c\fP or by using \fBp\fP\fI%d\fP for
\fB/dev/pts/\fP\fI%d\fP.  If they find a \fBDEAD_PROCESS\fP for this id,
they recycle it, otherwise they create a new entry.  If they can, they
will mark it as \fBDEAD_PROCESS\fP on exiting and it is advised that
they null \fBut_line\fP, \fBut_time\fP, \fBut_user\fP and \fBut_host\fP
as well.
.PP
\fIxdm\fP(8) should not create an utmp record, because there is no
assigned terminal.  Letting it create one will result in trouble like:
finger: can not stat /dev/machine.dom.  It should create wtmp entries,
though, just like \fIftpd\fP(8) does.
.PP
\fItelnetd\fP(8) sets up a \fBLOGIN_PROCESS\fP entry and leaves the rest
to \fIlogin\fP(8) as usual.  After the telnet session ends,
\fItelnetd\fP(8) cleans up utmp in the described way.
.PP
The \fBwtmp\fP file records all logins and logouts.  Its format is
exactly like \fButmp\fP except that a null user name indicates a logout
on the associated terminal.  Furthermore, the terminal name \fB"~"\fP
with user name \fB"shutdown"\fP or \fB"reboot"\fP indicates a system
shutdown or reboot and the pair of terminal names \fB"|"\fP/\fB"}"\fP
logs the old/new system time when \fIdate\fP(1) changes it.  \fBwtmp\fP
is maintained by \fIlogin\fP(1), and \fIinit\fP(1) and some very of
\fIgetty\fP(1).  Neither of these programs creates the file, so if it is
removed record-keeping is turned off.
.SH FILES
/var/run/utmp
.br
/var/log/wtmp
.SH "CONFORMING TO"
Linux utmp entries conform neither to v7/BSD nor to SYSV: They are a
mix of the two.  v7/BSD has fewer fields; most importantly it lacks
\fBut_type\fP, which causes native v7/BSD-like programs to display (for
example) dead or login entries.  Further there is no configuration file
which allocates slots to sessions.  BSD does so, because it lacks
\fBut_id\fP fields.  In Linux (as in SYSV), the \fBut_id\fP field of a
record will never change once it has been set, which reserves that slot
without needing a configuration file.  Clearing \fBut_id\fP may result
in race conditions leading to corrupted utmp entries and and potential
security holes.  Clearing the above mentioned fields by filling them
with null bytes is not required by SYSV semantics, but it allows to run
many programs which assume BSD semantics and which do not modify utmp.
Linux uses the BSD conventions for line contents, as documented above.
SYSV only uses the type field to mark them and logs informative messages
such as e.g.\& \fB"new time"\fP in the line field.  SYSV has one more
field to log the exit status of dead processes.  \fBUT_UNKNOWN\fP seems
to be a Linux invention.  There is no type \fBACCOUNTING\fP in Linux.
SYSV has no \fBut_host\fP or \fBut_addr\fP fields.  Unlike various other
systems, where utmp logging can be disabled by removing the file, utmp
must always exist on Linux.  If you want to disable \fIwho\fP(1) then
do not make utmp world readable.
.SH RESTRICTIONS
The file format is machine dependent, so it is recommended that it be
processed only on the machine architecture where it got created.
.SH "SEE ALSO"
.BR ac (1),
.BR date (1),
.BR last (1),
.BR login (1),
.BR who (1),
.BR getutent (3),
.BR init (8)
