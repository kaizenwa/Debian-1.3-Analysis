/* @configure_input@ */

/*--------------------------------------------------------------------------*/
/* This file contains the paths/binary locations of the programs used by    */
/* these utilities and various C pre-processor definitions that modify the  */
/* behaviour of the man_db suite. You may like to check that all of the     */
/* formatters are from the same package. Ie, that we are not using a native */
/* UNIX nroff with GNU tbl.                                                 */
/*--------------------------------------------------------------------------*/

/* STD_SECTIONS must contain all of your man hierarchy subdirectories. The
   order is important. Manual pages will be displayed in this order. Ie
   if "1" comes before "2", then a kill(1) will be displayed in preference to
   kill(2), or if `man --all kill', it will be displayed first. Section names 
   may be multi-character, but this is non-standard and probably best 
   avoided. */
   
#define STD_SECTIONS { \
	"1", "n", "l", "8", "1m", "3", "2", \
	"5", "4", "9", "6", "7", NULL \
}

/* Some system's man pages require default pre-processing with perhaps tbl
   or other formatters, DEFAULT_MANROFFSEQ can compensate by adding a list of
   default pre-processors using the standard syntax of first letter.
   ie "t"  = tbl (the table pre-processor)
      "te" = tbl, eqn (both the table and equation pre-processors)
   DEFAULT_MANROFFSEQ can be overridden by command line arguments to man, the
   environment variable $MANROFFSEQ, and by the manual page being formatted. */

#if defined (__hpux) || defined (__alpha)
#  define DEFAULT_MANROFFSEQ	"te"
#elif defined (__ultrix)
#  define DEFAULT_MANROFFSEQ	"t"
#endif

/* uncomment the following line if manual pages require tbl by default */
/* #define DEFAULT_MANROFFSEQ   "t" */

/* #define:
	MAN_DB_CREATES	- to allow man to create user databases on the fly
	MAN_DB_UPDATES	- to allow man to update databases
	MAN_CATS	- to allow man to create/update cat files */

/* #define MAN_DB_CREATES */
#define MAN_DB_UPDATES
#define MAN_CATS

/* By default, man_db will store a whatis referenced manual page in favour
   of a stray cat page when they both share identical namespace. If you
   would like to see a stray cat eg. kill(1) in favour of a kill(1) whatis
   referenced to bash_builtins(1), uncomment the following line. */

/* #define FAVOUR_STRAYCATS */

/* The maximum number of manual page hierarchies expected in the manpath.  
   Also the maximum amount of non-comment lines in the config file. */
#define MAXDIRS 128

/* CATMODE is the mode of the formatted cat pages that we create. The man_db
   package can be run in 4 main modes, 3 of which are relatively secure and
   allow the cats to be non world writable. The `wide open' mode requires
   CATMODE to be 0666. Edit if necessary, after reading the man_db manual */ 

#define CATMODE		0644 /* u=rw,go=r */

/* DBMODE is the mode of the created databases. As with CATMODE, secure 
   operation requires that the db's don't have world write access. In the 
   unlikely event that this is required, change to 0666. 
     For increased speed, at the cost of buffer cache, set the sticky bit
   on databases so that they remain memory resident. To do this, OR the 
   required mode with 1000 and prepend a 0, eg 01644 */
   
#define DBMODE		0644 /* u=rw,go=r */

/* The name of the databases. DB_EXT depends on the database type in use */
#define MAN_DB		"/index" DB_EXT

/* The locations of the following files were determined by ../configure so
   some of them may be incorrect. Edit as necessary */

#ifndef PAGER
#  define PAGER		"@pager@"
#endif

#ifndef CAT
#  define CAT		"@cat@"
#endif

#ifndef TR
#  define TR		"@tr@"
#endif

#ifdef HAS_TROFF
#  ifndef TROFF
#    define TROFF 	"@troff@"
#  endif
#endif

#ifndef NROFF_MISSING
#  ifndef NROFF
#    define NROFF 	"@nroff@"
#  endif
#endif

#ifndef EQN
#  define EQN 		"@eqn@"
#endif

#ifndef NEQN
#  define NEQN		"@neqn@"
#endif

#ifndef TBL
#  define TBL 		"@tbl@"
#endif

#ifndef COL
#  define COL 		"@col@"
#endif

#ifndef VGRIND
#  define VGRIND 	"@vgrind@"
#endif

#ifndef REFER
#  define REFER 	"@refer@"
#endif

#ifndef GRAP
#  define GRAP 		"@grap@"
#endif

#ifndef PIC
#  define PIC 		"@pic@"
#endif

/*------------------------------------------------------------------*/
/* The following definitions are best left alone by the uninitiated */
/*------------------------------------------------------------------*/

/* less options (i)gnore case on search 
		(x8) set tab stops to 8 spaces
		(m)ore display style */

#ifndef LESS_OPTS
#  define LESS_OPTS	"$LESS\\$-Pm\\:\\$ix8mPm"
#endif

/* This is a minimal latin1 special characters to ascii translation table */
#if !defined(TR_SET1) || !defined(TR_SET2)
#  define TR_SET1	" \'\\255\\267\\264\\327\'"
#  define TR_SET2	" \'\\055\\157\\047\\170\'"
#endif

#ifdef COMP_CAT
/* This is the default compressor, decompressor and compressed extension.
   These are used for compressing cat pages. The compressor is likely to
   be gzip or compress and the extension: .gz or .Z . Please make sure that
   all of your cat pages have the same extension (whatever that may be) */

#  define COMPRESSOR "@compressor@"
#  define DECOMPRESSOR "@decompressor@"
#  define COMPRESS_EXT "@compress_ext@"
#endif /* COMP_CAT */

#ifdef COMP_SRC
/* These are the currently supported decompressors. They are used for 
   decompressing cat pages and source nroff. To add further decompressors,
   you will need to edit comp_src.h[.in] . Help is provided in the file */

#  define GUNZIP "@gunzip@"
#  define UNCOMPRESS "@uncompress@"
#endif /* COMP_SRC */

/*-----------------------------------------------------------------------*/
/* The things below here shouldn't really be changed unless you really	 */
/* know what you are doing.						 */
/*-----------------------------------------------------------------------*/

#define VERSION	"@version@"
#define DATE	"@date@"

#ifdef inline
/* autoconf treats inline differently between 2.1 and 2.2+ */
#  define AC_VERSION @man_ac_version@

#  if (AC_VERSION >= 1116000) && (AC_VERSION < 2002000)
     /* autoconf #defines inline to be __inline if the compiler doesn't 
        like it. */
#    undef inline
#    define __inline__
#    define __inline

#  elif (AC_VERSION >= 2002000)
     /* autoconf #defines inline to be either "__inline", "__inline__" 
        or "" if the compiler doesn't like inline */
#    define __inline__	inline
#    define __inline	inline

#  else
warning unknown autoconf version, __inline__ may cause problems.
#  endif /* AC_VERSION */
#endif /* inline */

/* my gcc specs file is hacked to define __profile__ if I compile with
   the -p or -pg flag, to do this manually (needed if you want to know where
   gmon.out ended up), uncomment the following line */
/* #define __profile__ */
 
/* if testing BTREE db allowing inserts of identical keys, uncomment below */
/* #define FAST_BTREE */

/* If running checker, support the garbage detector, else don't */
#ifdef __CHECKER__
extern void __chkr_garbage_detector(void);
#  define chkr_garbage_detector() __chkr_garbage_detector()
#else
#  define chkr_garbage_detector()
#endif

/* Don't define debug at all, else you'll either engage all debug messages (1)
   or you'll stop the utilities from being runtime debuggable (0) */
/* #define debug	0 */

/* This structure definition is only really needed if COMP_SRC==1, but it is
   used in external declarations quite freely, so it's included
   unconditionally */

struct compression {
	char *prog;
	char *ext;
	char *file;
};

/* depending on the compiler ... */
#if __STDC__
#  define VOID void
#else
#  define VOID char
#endif

/*-------------------------------------*/
/* Now for some function prototypes... */
/*-------------------------------------*/

/* some library function declarations */
#include <stddef.h>	/* for size_t */
extern VOID *xmalloc(size_t n);
extern VOID *xrealloc(void *p, size_t n);
extern __inline__ char *xstrdup(const char *string);

/* ver.c */
#ifndef STATIC_VER
extern __inline__ void ver(void);
#endif /* !STATIC_VER */

/* compression.c */
extern struct compression *comp_info(char *filename);
extern struct compression *comp_file(char *filename);
extern char *decompress(char *filename, struct compression *comp);
extern __inline__ void remove_ztemp(void);
extern __inline__ char *get_ztemp(void);

/* security.c */
extern __inline__ void drop_effective_privs(void);
extern __inline__ void regain_effective_privs(void);
extern int do_system_drop_privs(const char *command);
extern int remove_with_dropped_privs(const char *filename);

/* check_mandirs.c */
extern void test_manfile(char *file, const char *path);
extern void update_db_time(void);
extern void reset_db_time(void);
extern short create_db(const char *manpath);
extern short update_db(const char *manpath);

/* straycats.c */
extern int straycats(char *mandir);

/* lexgrog.l */
extern char *find_name(char *file, char *filename, short catfile);

/* util.c */
extern char *strappend(char *, ...);
extern int is_newer(char *fa, char *fb);
extern int is_directory(char *path);
extern __inline__ int do_system(const char *command);
extern char *mkdbname(const char *path);

#if !defined(HAVE_BASENAME)
extern char *basename();
#else /* HAVE_BASENAME */
extern char *basename(char *path);
#endif /* !HAVE_BASENAME */

#ifndef HAVE_STRSEP
extern char *strsep(char **stringp, const char *delim);
#endif /* !HAVE_STRSEP */

#ifndef debug
extern int debug; 		/* shows whether -d issued */
#endif /* !debug */

extern int quiet;		/* be quiet(er) if 1 */
extern char *program_name;	/* the basename of the program (as called) */

/*--------------------------*/
/* Some general definitions */
/*--------------------------*/

#define MANPAGE		0
#define CATPAGE		1

/* exit codes */
#define OK		0	/* success */
#define FAIL		1	/* usage or syntax error */
#define FATAL		2	/* operational error */
#define CHILD_FAIL	3	/* child failed */
#define NOT_FOUND	16	/* No action was taken */

/* string macros */
#define STREQ(a,b)	(strcmp(a,b) == 0)
#define STRNEQ(a,b,d)	(strncmp(a,b,d) == 0)

/* FSSTND directories */
#define CAT_ROOT	"/var/catman"		/* required by fsstnd() */
#define MAN_ROOT	"/usr" 			/* required by fsstnd() */

/* some special database keys used for storing important info */
#define VER_KEY         "$version$"	/* version key */
#define VER_ID          "2.3.1"		/* version content */
#define KEY     	"$mtime$"	/* `time of last update' key */

/* The owner of man (if setuid) is the definition of SECURE_MAN_UID */
#define MAN_OWNER SECURE_MAN_UID
