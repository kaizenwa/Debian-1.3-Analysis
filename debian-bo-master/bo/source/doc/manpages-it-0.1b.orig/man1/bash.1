.\"
.\" MAN PAGE COMMENTS to
.\"
.\"	Chet Ramey
.\"	Information Network Services
.\"	Case Western Reserve University
.\"	chet@ins.CWRU.Edu
.\"
.\"	Last Change: Thu Mar  9 18:40:22 EST 1995
.\"
.\" Traduzione Augusto Lenardi <augusto@comune.modena.it>
.\" Settembre 1996
.\"
.\" bash_builtins, strip all but Built-Ins section
.if \n(zZ=1 .ig zZ
.TH BASH 1 "1995 Mar 9" GNU
.\"
.\" There is some problem with having a `@'
.\" in a tagged paragraph with the BSD man macros.
.\" It has to do with `@' appearing in the }1 macro.
.\" This is a problem on 4.3 BSD and Ultrix, but Sun
.\" appears to have fixed it.
.\" If you are seeing the characters
.\" `@u-3p' appearing before the lines reading
.\" "possible-hostname-completions"
.\" and "complete-hostname" down in READLINE,
.\" then uncomment this redefinition.
.\"
.de }1
.ds ]X \&\\*(]B\\
.nr )E 0
.if !"\\$1"" .nr )I \\$1n
.}f
.ll \\n(LLu
.in \\n()Ru+\\n(INu+\\n()Iu
.ti \\n(INu
.ie !\\n()Iu+\\n()Ru-\w\\*(]Xu-3p \{\\*(]X
.br\}
.el \\*(]X\h|\\n()Iu+\\n()Ru\c
.}f
..
.\"
.\" File Name macro.  This used to be `.PN', for Path Name,
.\" but Sun doesn't seem to like that very much.
.\"
.de FN
\fI\|\\$1\|\fP
..
.SH NOME
bash \- GNU Bourne\-Again SHell
.SH SINTASSI
.B bash
[opzioni]
[file]
.SH COPYRIGHT
.if n Bash is Copyright (C) 1989, 1991 by the Free Software Foundation, Inc.
.if t Bash is Copyright \(co 1989, 1991 by the Free Software Foundation, Inc.
.SH DESCRIZIONE
.B Bash
è un interprete di linguaggio di comandi \fBsh\fR\-compatibile che
esegue i comandi letti dallo standard input o da un file.
.B Bash
inoltre incorpora utili caratteristiche delle \fIKorn\fP e \fIC\fP
shell (\fBksh\fP e \fBcsh\fP).
.PP
.B Bash
è, in definitiva, progettata per essere una implementazione conforme alle
IEEE Posix Shell and Tools specification (IEEE Working Group 1003\.2).
.SH OPZIONI
In aggiunta alle opzioni della shell a "singolo carattere" documentate nella
descrizione del comando incorporato \fBset\fR, quando è lanciata,
\fBbash\fR interpreta i seguenti flag:
.PP
.PD 0
.TP 10
.BI \-c "\| stringa\^"
Se è presente il flag
.BR \-c ,
allora i comandi sono letti da
.IR stringa .
Se vi sono argomenti dopo la
.IR stringa ,
essi sono assegnati ai parametri posizionali, partendo da
.BR $0 .
.TP
.B \-i
Se è presente il flag
.BR \-i ,
la shell è
.IR interattiva .
.TP
.B \-s
Se è presente il flag
.BR \-s ,
o se non rimane alcun argomento dopo che sono state esaminate le opzioni,
allora i comandi sono letti dallo standard input.
Questa opzione permette di predisporre i parametri posizionali
quando si chiama una shell interattiva.
.TP
.B \-
Un singolo
.B \-
segna la fine delle opzioni e disabilita l'ulteriore processo
di opzioni.  Qualsiasi argomento dopo il
.B \-
è trattato come nome di file e argomento.  Un argomento
.B \-\-
è equivalente a un argomento \fB\-\fP.
.PD
.PP
.B Bash
interpreta anche un certo numero di opzioni "multi carattere".
Queste opzioni devono apparire nella linea di comando prima che siano
rilevate delle opzioni a "singolo carattere".
.PP
.PD 0
.TP 10
.B \-norc
Non legge né esegue il file personale di inizializzazione
.I ~/.bashrc
se la shell è interattiva.
Questa opzione è attiva per default se la shell è chiamata come
.BR sh .
.TP
.B \-noprofile
Non legge né il file di inizializzazione generico di sistema
.FN /etc/profile
né alcuno dei file personali di inizializzazione
.IR ~/.bash_profile ,
.IR ~/.bash_login ,
o
.IR ~/.profile .
Per default,
.B bash
normalmente legge questi file quando è chiamata come shell di login
(si veda
.SM
.B ESECUZIONE
più avanti).
.TP
\fB\-rcfile\fP \fIfile\fP
Esegue comandi letti da
.I file
invece che dal file personale di inizializzazione standard
.IR ~/.bashrc ,
se la shell è interattiva (si veda
.SM
.B ESECUZIONE
più avanti).
.TP
.B \-version
Mostra il numero di versione della istanza di
.B bash
quando parte.
.TP
.B \-quiet
Non è "loquace" quando parte (non mostra la versione della shell né
qualunque altra informazione).  Questo è il default.
.TP
.B \-login
Fa agire
.B bash
come se fosse stata chiamata come shell di login.
.TP
.B \-nobraceexpansion
Non esegue l'espansione delle parentesi graffe (si veda
.B Espansione delle parentesi graffe
più avanti).
.TP
.B \-nolineediting
Non usa la libreria GNU
.I readline
per leggere le linee di comando, se interattiva.
.TP
.B \-posix
Cambia il comportamento di bash, dove le operazioni di default
differiscono dallo standard Posix 1003.2, per combaciare con lo standard.
.PD
.SH ARGOMENTI
Se rimangono argomenti dopo che sono state processate le opzioni,
e né l'opzione
.B \-c
né l'opzione
.B \-s
sono state fornite, il primo argomento è assunto essere
il nome del file che contiene i comandi di shell.  Se
.B bash
è chiamata in questo modo,
.B $0
è posto uguale al nome del file, e i parametri posizionali
sono posti uguali agli argomenti rimasti.
.B Bash
legge ed esegue comandi da questo file, poi esce.
Lo stato di uscita di
.B Bash
è lo stato di uscita dell'ultimo comando eseguito nello script.
.SH DEFINIZIONI
.PD 0
.TP
.B blank 
Uno spazio o carattere di tabulazione (tab).
.TP
.B parola
Una sequenza di caratteri considerata come una singola unità dalla shell.
Anche noto come
.BR token .
.TP
.B nome
Una 
.I parola
che consiste solo di caratteri alfanumerici e underscore (_), e
comincia con un carattere alfabetico o un underscore.  Anche
indicata come
.BR identificatore .
.TP
.B metacarattere
Un carattere che, quando non quotato, separa le parole.
Uno dei seguenti:
.br
.RS
.PP
.if t \fB|  &  ;  (  )  <  >  spazio  tab\fP
.if n \fB|  & ; ( ) < > spazio tab\fP
.RE
.PP
.TP
.B operatore di controllo
Un \fItoken\fP che realizza una funzione di controllo.
Esso è uno dei seguenti simboli:
.RS
.PP
.if t \fB\(bv\|\(bv  &  &&  ;  ;;  (  )  |  <newline>\fP
.if n \fB|| & && ; ;; ( ) | <newline>\fP
.RE
.PD
.SH "PAROLE RISERVATE"
Le \fIparole riservate\fP sono parole che hanno un significato speciale
per la shell.  Le seguenti parole sono riconosciute come riservate quando
non quotate e sono o la prima parola di un comando semplice (si veda
.SM
.B GRAMMATICA DELLA SHELL
più avanti) o la terza parola di un comando
.B case 
o di un comando
.B for
:
.if t .RS
.PP
.B
.if n ! case  do done elif else esac fi for function if in select then until while { }
.if t !    case    do    done    elif    else    esac    fi    for    function    if    in    select    then    until    while    {    }
.if t .RE
.RE
.SH "GRAMMATICA DELLA SHELL"
.SS Comandi semplici
.PP
Un \fIcomando semplice\fP è una sequenza opzionale di assegnamenti di
variabile seguita da parole, separate da \fIblank\fP, e ridirezioni, e
terminati da un \fIoperatore di controllo\fP.  La prima parola
specifica il comando che deve essere eseguito.  Le rimanenti parole sono
passate come argomenti per il comando chiamato.
.PP
Il valore di ritorno di un \fIcomando semplice\fP è il suo stato di
uscita, o 128+\fIn\^\fP se il comando è terminato da un segnale
.IR n .
.SS Pipeline
.PP
Una \fIpipeline\fP è una sequenza di uno o più comandi separati dal
carattere
.BR | .
Il formato per una pipeline è:
.RS
.PP
[ ! ] \fIcomando\fP [ \fB|\fP \fIcomando2\fP ... ]
.RE
.PP
Lo standard output di
.I comando
è connesso allo standard input di
.IR comando2 .
Questa connessione è effettuata prima di qualsiasi ridirezione
specificata dal comando (si veda
.SM
.B RIDIREZIONE
più avanti).
.PP
Se la parola riservata
.B !
precede una pipeline, lo stato di uscita di quella pipeline è il NOT
logico dello stato di uscita dell'ultimo comando.
Altrimenti, lo stato della pipeline è lo stato di uscita dell'ultimo
comando.  La shell aspetta che tutti i comandi nella pipeline 
terminino, prima di ritornare un valore.
.PP
Ogni comando in una pipeline è eseguito come un processo separato
(cioè, in una subshell).
.SS Liste
.PP
Una \fIlista\fP è una sequenza di una o più pipeline separate da uno
degli operatori
.BR ; ,
.BR & ,
.BR && ,
o
.BR \(bv\|\(bv ,
e terminata da uno di
.BR ; ,
.BR & ,
o
.BR <newline> .
.PP
Di questi operatori di lista,
.B &&
e
.B \(bv\|\(bv
hanno uguali precedenze, seguiti da
.B ;
e
.BR &,
che hanno uguali precedenze.
.PP
Se un comando è terminato dall'operatore di controllo
.BR & ,
la shell esegue il comando in \fIbackground\fP in una subshell.  La
shell non aspetta che il comando finisca, e lo stato di ritorno è 0.
I comandi separati da un
.B ;
sono eseguiti sequenzialmente; la shell aspetta che ogni comando, a
turno, termini.  Lo stato di ritorno è lo stato di uscita dell'ultimo
comando eseguito.
.PP
L'operatore di controllo
.B &&
e
.B \(bv\|\(bv
denotano liste AND e liste OR, rispettivamente.
Una lista AND ha la forma
.RS
.PP
\fIcomando\fP \fB&&\fP \fIcomando2\fP
.RE
.PP
.I comando2
è eseguito se, e solo se,
.I comando
ritorna uno stato di uscita di zero.
.PP
Una lista OR ha la forma
.RS
.PP
\fIcomando\fP \fB\(bv\|\(bv\fP \fIcomando2\fP
.PP
.RE
.PP
.I comando2
è eseguito se e solo se
.I comando
ritorna uno stato di uscita diverso da zero.  Lo stato di ritorno
di liste AND e OR è lo stato di uscita dell'ultimo comando
eseguito nella lista.
.SS Comandi composti
.PP
Un \fIcomando composto\fP è uno dei seguenti:
.TP
(\fIlista\fP)
\fIlista\fP è eseguita in una subshell.  Assegnamenti di variabile e
comandi incorporati che influenzano l'ambiente della shell non lasciano
effetti dopo che il comando è completato.  Lo stato di ritorno è lo
stato di uscita di
\fIlista\fP.
.TP
{ \fIlista\fP; }
\fIlista\fP è semplicemente eseguita nell'ambiente di shell corrente.
Questo è conosciuto come \fIgroup command\fP.  Lo stato di ritorno è
lo stato di uscita di \fIlista\fP.
.TP
\fBfor\fP \fInome\fP [ \fBin\fP \fIparola\fP; ] \fBdo\fP \fIlista\fP ; \fBdone\fP
La lista di parole seguenti \fBin\fP è espansa, generando una lista
di elementi.  La variabile \fInome\fP è posta, di volta in volta, a 
ciascun elemento di questa lista e \fIlista\fP è eseguita ogni volta.
Se la \fBin\fP \fIparola\fP è omessa, il comando \fBfor\fP esegue
\fIlista\fP una volta per ogni parametro posizionale che è posto (si veda
.SM
.B PARAMETRI
più avanti).
.TP
\fBselect\fP \fInome\fP [ \fBin\fP \fIparola\fP; ] \fBdo\fP \fIlista\fP ; \fBdone\fP
La lista di parole seguenti \fBin\fP è espansa, generando una lista
di elementi.  L'insieme delle parole espanse è stampato sullo standard
error, ognuna preceduta da un numero.  Se la \fBin\fP \fIparola\fP è
omessa, sono stampati i parametri posizionali (si veda
.SM
.B PARAMETRI
più avanti).  È poi mostrato il prompt
.B PS3
ed è letta una linea dallo standard input.
Se la linea consiste del numero corrispondente a una delle
parole mostrate, allora il valore di
.I nome
è posto a quella parola.  Se la linea è vuota, le parole e il prompt
sono mostrati di nuovo.  Se è letto EOF, il comando termina.
Qualsiasi altro valore letto fa sì che
.I nome
sia posto al valore nullo.  La linea letta è salvata nella variabile
.BR REPLY .
La
.I lista
è eseguita dopo ciascuna selezione fino a che non sia eseguito un comando
.B break
o
.BR return .
Lo stato di uscita di
.B select
è lo stato di uscita dell'ultimo comando eseguito in
.IR lista ,
o zero se nessun comando è stato eseguito.
.TP
\fBcase\fP \fIparola\fP \fBin\fP [ \fIpattern\fP [ \fB|\fP \fIpattern\fP ] \
... ) \fIlista\fP ;; ] ... \fBesac\fP
Un comando \fBcase\fP prima espande \fIparola\fP, e prova a confrontarla,
a turno, con ognuno dei \fIpattern\fP, usando le stesse regole di confronto
della espansione di percorso (si veda
.B Espansione di percorso
più avanti).  Quando viene trovata una coincidenza, è eseguita
la \fIlista\fP corrispondente.  Dopo il primo confronto riuscito, non ne
viene controllato nessuno dei successivi.  Lo stato di uscita è zero se
nessun pattern combacia.  Altrimenti, esso è lo stato di uscita dell'ultimo
comando eseguito in \fIlista\fP.
.TP
\fBif\fP \fIlista\fP \fBthen\fP \fIlista\fP \
[ \fBelif\fP \fIlista\fP \fBthen\fP \fIlista\fP ] ... \
[ \fBelse\fP \fIlista\fP ] \fBfi\fP
La
.I lista
dopo
.B if 
è eseguita.  Se il suo stato di uscita è zero, è eseguita la \fIlista\fP
dopo \fBthen\fP .  Altrimenti, è eseguita a turno ciascuna \fIlista\fP
dopo \fBelif\fP , e se il suo stato di uscita è zero, è eseguita
la corrisponddente \fIlista\fP dopo \fBthen\fP e il comando termina.
Altrimenti, se presente, è eseguita, la \fIlista\fP dopo \fBelse\fP .
Lo stato di uscita è lo stato di uscita dell'ultimo comando eseguito, o
zero se nessuna delle conditioni provate era vera.
.TP
.PD 0
\fBwhile\fP \fIlista\fP \fBdo\fP \fIlista\fP \fBdone\fP
.TP
\fBuntil\fP \fIlista\fP \fBdo\fP \fIlista\fP \fBdone\fP
.PD
Il comando \fBwhile\fP esegue continuamente la \fIlista\fP dopo \fBdo\fP
fin tanto che l'ultimo comando in \fIlista\fP ritorna uno stato di uscita
di zero.  Il comando \fBuntil\fP è identico al comando \fBwhile\fP,
con la sola differenza che il risultato del test è negato; la
.I lista
dopo
.B do
è eseguita fin tanto che l'ultimo comando in
.I lista
ritorna uno stato di uscita diverso da zero.
Lo stato di uscita dei comandi \fBwhile\fP e \fBuntil\fP 
è lo stato di uscita
dell'ultimo comando eseguito nella \fIlista\fP dopo \fBdo\fP o zero se
non ne è stato eseguito alcuno.
.TP
[ \fBfunction\fP ] \fInome\fP () { \fIlista\fP; }
Questo definisce una funzione chiamata \fInome\fP.  Il \fIcorpo\fP della
funzione è la
.I lista
di comandi tra { e }.  Questa lista
è eseguita ogni volta che \fInome\fP è specificato come
nome di un comando semplice.  Lo stato di uscita di una funzione è
lo stato di uscita dell'ultimo comando eseguito nel corpo.  (Si veda
.SM
.B FUNZIONI
più avanti.)
.SH COMMENTI
In una shell non interattiva, o una shell interattiva in cui
è abilitata l'opzione
.B -o interactive\-comments
del comando incorporato \fBset\fP, una parola che inizia con
.B #
fa sì che la parola e tutti i rimanenti caratteri su quella linea siano
ignorati.  Una shell interattiva senza l'opzione
.B -o interactive\-comments
abilitata non permette i commenti.
.SH QUOTATURA
La \fIQuotatura\fP è usata per togliere il significato speciale, per
la shell, di certi caratteri o parole.  La quotatura può essere usata per 
disabilitare speciali trattamenti per i caratteri speciali, per prevenire
che le parole riservate siano riconosciute come tali, e per prevenire
l'espansione di parametro.
.PP
Ciascuno dei \fImetacaratteri\fP elencati prima sotto
.SM
.B DEFINIZIONI
ha un significato speciale per la shell e deve essere quotato se esso deve
rappresentare se stesso.  Vi sono tre meccanismi di quotatura:
.IR "caratteri di escape" ,
apostrofi, e virgolette.
.PP
Un backslash (\fB\e\fP) non quotato è il
.IR "carattere di escape" .
Esso conserva il valore letterale del successivo carattere,
con l'eccezione di <newline>.  Se vi è una coppia \fB\e\fP<newline> ,
e il backslash non è quotato, il \fB\e\fP<newline>
è trattato come una continuazione di linea (cioè, viene realmente ignorato).
.PP
Racchiudere caratteri in apostrofi conserva il valore letterale
di ogni carattere all'interno.  Un apostrofo non può trovarsi
tra apostrofi, nemmeno quando preceduto da un backslash.
.PP
Racchiudere caratteri in virgolette conserva il valore letterale
di tutti i caratteri all'interno, con le eccezioni di
.BR $ ,
.BR ` ,
e
.BR \e .
I caratteri
.B $
e
.B `
conservano il loro significato speciale anche tra virgolette.  Il backslash
mantiene il suo significato speciale solo quando seguito da uno dei seguenti
caratteri:
.BR $ ,
.BR ` ,
\^\fB"\fP\^,
.BR \e ,
o
.BR <newline> .
Le virgolette possono essere racchiuse fra virgolette facendole precedere da
un backslash.
.PP
I parametri speciali
.B *
e
.B @
hanno un significato speciale quando sono tra virgolette (si veda
.SM
.B PARAMETRI
più avanti).
.SH PARAMETRI
Un
.I parametro
è una entità che immagazzina valori, qualcosa come una variabile in
un linguaggio di programmazione convenzionale.  Esso può essere un
.IR nome ,
un numero, o uno degli speciali caratteri elencati più avanti sotto
.BR "Parametri speciali" .
Per gli scopi della shell, una
.I variabile
è un parametro indicato da un
.IR nome .
.PP
Un parametro è impostato se ad esso è stato assegnato un valore.
La stringa nulla è un valore valido.  Una volta che una variabile è
impostata, essa può essere eliminata solo usando il comando incorporato
.B unset
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.PP
Una
.I variabile
può essere assegnata da una istruzione della forma
.RS
.PP
\fInome\fP=[\fIvalore\fP]
.RE
.PP
Se
.I valore
non è dato, alla variabile è assegnata la stringa nulla.  Tutti i
.I valori
sono sottoposti alla espansione della tilde, espansione di parametro e
variabile, sostituzione di comando, espansione aritmetica, e rimozione dei
caratteri di quotatura.  Se la variabile ha il suo
attributo
.B \-i
posto (si veda
.B declare
più avanti in
.SM
.BR "COMANDI INCORPORATI DELLA SHELL" )
allora
.I valore
è sottoposto alla espansione aritmetica perfino se la sintasi $[...]
non appare.  La suddivisione in parole non è effettuata, con l'eccezione
di \fB"$@"\fP come spiegato più avanti sotto
.BR "Parametri speciali" .
L'espansione di percorso non è effettuata.
.SS Parametri posizionali
.PP
Un
.I parametro posizionale
è un parametro indicato da una o più cifre, diverse dalla singola
cifra 0.  I parametri posizionali sono assegnati dagli argomenti della
shell quando questa è chiamata, e possono essere riassegnati usando il
comando incorporato
.B set .
I parametri posizionali non possono essere assegnati con istruzioni di
assegnamento.  I parametri posizionali sono temporaneamente sostituiti
quando è eseguita una funzione di shell (si veda
.SM
.B FUNZIONI
più avanti).
.PP
Quando si espande un parametro posizionale consistente di più di una
sola cifra, esso deve essere racchiuso tra parentesi graffe (si veda
.SM
.B ESPANSIONE
più avanti).
.SS Parametri speciali
.PP
La shell tratta molti parametri in modo speciale.  Questi parametri possono
solo essere referenziati; il loro assegnamento non è permesso.
.PD 0
.TP
.B *
Si espande nei parametri posizionali, a partire da uno.  Quando l'espansione
avviene tra virgolette, esso si espande in una singola parola con il valore
di ogni parametro separato dal primo carattere della variabile speciale
.SM
.BR IFS .
Cioè, ``\fB$*\fP'' è equivalente
a ``\fB$1\fP\fIc\fP\fB$2\fP\fIc\fP\fB...\fP'', dove
.I c
è il primo carattere del valore della variabile
.SM
.BR IFS .
Se
.SM
.B IFS
è nulla o non posta, i parametri sono separati da spazi.
.TP
.B @
Si espande nei parametri posizionali, a partire da uno.  Quando l'espansione
avviene tra virgolette, ogni parametro si espande in una parola separata.
Cioè, ``
.BR $@ ''
è equivalente a ``\fB$1\fP'' ``\fB$2\fP'' ...
Quando non vi è alcun parametro posizionale, ``\fB$@\fP'' e 
.B $@
si espandono in nulla (cioè, sono rimossi).
.TP
.B #
Si espande nel numero di parametri posizionali in decimale.
.TP
.B ?
Si espande nello stato della pipeline in foreground più recentemente
eseguita.
.TP
.B \-
Si espande nei flag di opzione correnti come specificato in base alla
chiamata, dal comando incorporato
.BR set ,
o quelli posti dalla shell stessa (come il flag
.B \-i
).
.TP
.B $
Si espande nel ID di processo della shell.  In una subshell (), esso si
espande nel ID di processo della shell corrente, non la subshell.
.TP
.B !
Si espande nel ID di processo del comando in background (asincrono)
più recentemente eseguito.
.TP
.B 0
Si espande nel nome della shell o script di shell.  Questo è posto alla
inizializzazione della shell.  Se
.B bash
è chiamata con un file di comandi,
.B $0
è posto al nome di quel file.  Se
.B bash
è avviata con l'opzione
.BR \-c ,
allora
.B $0
è posto al primo argomento dopo la stringa che deve essere
eseguita, se ve ne è una presente.  Altrimenti, esso è posto
al percorso usato per chiamare
.BR bash ,
come dato dall'argomento zero.
.TP
.B _
Si espande nell'ultimo argomento del precedente comando, dopo l'espansione.
È anche posto al nome completo di ogni comando eseguito e messo
nell'ambiente ed esportato per quel comando.
.PD
.SS Variabili di shell
.PP
Le seguenti variabili sono poste dalla shell:
.PP
.PD 0
.TP
.B PPID
L'ID di processo del genitore della shell.
.TP
.B PWD
La directory di lavoro corrente come posta dal comando
.BR cd .
.TP
.B OLDPWD
La precedente directory di lavoro come posta dal comando
.BR cd .
.TP
.B REPLY
Posta alla linea di input letta dal comando incorporato
.B read
quando nessun argomento è dato.
.TP
.B UID
Si espande all'ID di utente dell'utente corrente, inizializzata all'avvio
della shell.
.TP
.B EUID
Si espande all'effettivo ID di utente dell'utente corrente, inizializzata
all'avvio della shell.
.TP
.B BASH
Si espande al nome completo usato per chiamare questa istanza di
.BR bash .
.TP
.B BASH_VERSION
Si espande al numero di versione della istanza di
.BR bash .
.TP
.B SHLVL
Incrementato di uno ogni volta che una istanza di
.B bash
è avviata.
.TP
.B RANDOM
Ogni volta che questo parametro è referenziato, viene generato un numero
intero casuale.  La sequenza di numeri casuali può essere inizializzata
assegnando un valore a
.SM
.BR RANDOM .
Se
.SM
.B RANDOM
viene eliminato, perde le sue speciali proprietà, perfino se esso viene
successivamente rimesso.
.TP
.B SECONDS
Ogni volta che questo parametro è referenziato, viene ritornato il numero
di secondi dalla chiamata della shell.  Se un valore è assegnato a 
.SM
.BR SECONDS ,
il valore ritornato in base ai riferimenti successivi è il numero di
secondi trascorsi dall'assegnamento più il valore assegnato.  Se
.SM
.B SECONDS
viene eliminato, perde le sue speciali proprietà, perfino se esso viene
successivamente rimesso.
.TP
.B LINENO
Ogni volta che questo parametro è referenziato, la shell sostituisce un
numero decimale che rappresenta il numero di sequenza della linea corrente
(partendo da 1) dentro uno script o funzione.  Quando non in uno script
o funzione, non è garantito che il valore sostituito sia significativo.
Quando in una funzione, il valore non è il numero della linea sorgente
su cui appare il comando (quella informazione è andata persa dal momento
che la funzione viene eseguita), ma è una approssimazione del numero di
.I comandi semplici
eseguiti nella funzione corrente.  Se
.SM
.B LINENO
viene eliminato, perde le sue speciali proprietà, perfino se esso viene
successivamente rimesso.
.TP
.B HISTCMD
Il numero di storia, o indice nella lista della storia, del comando
corrente.  Se
.SM
.B HISTCMD
viene eliminato, perde le sue speciali proprietà, perfino se esso viene
successivamente rimesso.
.TP
.B OPTARG
Il valore dell'ultimo argomento opzione processato dal comando incorporato
.B getopts
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.TP
.B OPTIND
L'indice del prossimo argomento che deve essere processato dal comando
incorporato
.B getopts
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.TP
.B HOSTTYPE
Automaticamente posto a una stringa che univocamente descrive il tipo
di macchina su cui
.B bash
sta girando.  Il default è dipendente dal sistema.
.TP
.B OSTYPE
Automaticamente posto a una stringa che descrive il sistema operativo
su cui
.B bash
sta girando.  Il default è dipendente dal sistema.
.PD
.PP
Le seguenti variabili sono usate dalla shell.  In alcuni casi,
.B bash
assegna un valore di default a una variabile; questi casi sono elencati
più avanti.
.PP
.PD 0
.TP
.B IFS
L'
.I Internal Field Separator
(separatore di campo interno) che è usato per la suddivisione
in parole dopo l'espansione e per dividere le linee in parole
con il comando incorporato
.BR read .
Il valore di default è
``<space><tab><newline>''.
.TP
.B PATH
Il percorso di ricerca dei comandi.  Esso è un elenco di directory,
separate da ":", nelle quali la shell cerca i comandi (si veda
.SM
.B ESECUZIONE DEI COMANDI
più avanti).  Il percorso di default è dipendente dal sistema
ed è posto dall'amministratore che installa
.BR bash .
Un valore comune è ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.''.
.TP
.B HOME
La home directory dell'utente corrente; l'argomento di default per il
comando incorporato \fBcd\fP .
.TP
.B CDPATH
Il percorso di ricerca per il comando
.BR cd .
Questo è un elenco di directory, separate da ":", nelle quali la shell
cerca la directory di destinazione specificata dal comando
.BR cd .
Un valore di esempio è ``.:~:/usr''.
.TP
.B ENV
Se questo parametro è posto quando \fBbash\fP sta eseguendo uno script
di shell, il suo valore è interpretato come un nome di file che contiene
comandi per inizializzare la shell, come in
.IR .bashrc .
Il valore di
.SM
.B ENV
è sottoposto ad espansione di parametro, sostituzione di comando, ed
espansione aritmetica prima di essere interpretato come un percorso.
.SM
.B PATH
non è usato per cercare il nome risultante.
.TP
.B MAIL
Se questo parametro è posto a un nome di file e la variabile
.SM
.B MAILPATH
non è impostata,
.B bash
informa l'utente dell'arrivo di posta nel file specificato.
.TP
.B MAILCHECK
Specifica quanto spesso (in secondi)
.B bash
controlla la posta.  Il default è 60 secondi.  Quando è il momento di
controllare la posta, la shell lo fa prima di dare il prompt.  Se questa
variabile non è impostata, la shell disabilita il controllo della posta.
.TP
.B MAILPATH
Una lista di percorsi di nomi, separati da ":" da usare per il
controllo della posta. Il messaggio che deve essere stampato può essere
specificato separando il percorso dal messaggio con un `?'.  $_ sta per
il nome del file di posta corrente. 
Per esempio:
.RS
.PP
\fBMAILPATH\fP='/usr/spool/mail/bfox?"You have mail":~/shell-mail?"$_ has mail!"'
.PP
.B Bash
fornisce un valore di default per questa variabile, ma la locazione dei
file di posta degli utenti che è usata è dipendente dal sistema
(per esempio, /usr/spool/mail/\fB$USER\fP).
.RE
.TP
.B MAIL_WARNING
Se è impostata, e viene fatto accesso al file che \fBbash\fP controlla per
la posta, dopo l'ultima volta che è stato controllato, viene stampato il
messaggio ``The mail in \fImailfile\fP has been read''.
.TP
.B PS1
Il valore di questo parametro è espanso (si veda
.SM
.B PROMPTING
più avanti) e usato come stringa del prompt primario.
Il valore di default è ``\fBbash\e$ \fP''.
.TP
.B PS2
Il valore di questo parametro è espanso e usato come stringa del
prompt secondario.  Il default è ``\fB> \fP''.
.TP
.B PS3
Il valore di questo parametro è usato come prompt per il comando
.I select
(si veda
.SM
.B GRAMMATICA DELLA SHELL
sopra).
.TP
.B PS4
Il valore di questo parametro è espanso ed il valore è stampato
prima di ogni comando che
.B bash
mostra durante un trace di esecuzione.  Il primo carattere di
.SM
.B PS4
è replicato tante volte, quanto necessario, per indicare livelli
multipli di indirezione.  Il default è ``\fB+ \fP''.
.TP
.B HISTSIZE
Il numero di comandi da ricordare nella storia dei comandi (si veda
.SM
.B STORIA
più avanti).  Il valore di default è 500.
.TP
.B HISTFILE
Il nome del file nel quale è salvata la storia dei comandi.  (Si veda
.SM
.B STORIA
più avanti.)  Il valore di default è \fI~/.bash_history\fP.  Se non posto,
la storia dei comandi non è salvata quando una shell interattiva termina.
.TP
.B HISTFILESIZE
Il numero massimo di linee contenute nel file di storia.  Quando a questa
variabile è assegnato un valore, il file di storia è accorciato, se
necessario, per contenere non più di quel numero di linee.  Il valore di
default è 500.
.TP
.B OPTERR
Se posto al valore 1,
.B bash
mostra i messaggi di errore generati dal comando incorporato
.B getopts
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.SM
.B OPTERR
è inizializzato ad 1 ogni volta che è chiamata la shell o
è eseguito uno script di shell.
.TP
.B PROMPT_COMMAND
Se posto, il valore è eseguito come un comando prima di emettere
ogni prompt primario.
.TP
.B IGNOREEOF
Controlla l'azione della shell al ricevimento di un carattere
.SM
.B EOF
come unico input.  Se posto, il valore è il numero di caratteri
.SM
.B EOF
consecutivi digitati come primi caratteri su una linea di input prima che
.B bash
esca.  Se la variabile esiste ma non ha un valore numerico, o non ha alcun
valore, il valore di default è 10.  Se essa non esiste,
.SM
.B EOF
significa la fine dell'input per la shell.  Questo è valido solo per
le shell interattive.
.TP
.B TMOUT
Se posto a un valore più grande di zero, il valore è interpretato come
il numero di secondi da aspettare per l'input dopo l'emissione del prompt
primario.  Se non arriva l'input
.B Bash
termina dopo aver aspettato per quel numero di secondi.
.TP
.B FCEDIT
L'editor di default per il comando incorporato
.BR fc .
.TP
.B FIGNORE
Una lista di suffissi, separati da ":", da ignorare quando si effettua
il completamento del nome di file (si veda
.SM
.B READLINE
più avanti).  Un nome di file il cui suffisso combacia con uno di quelli
presenti in 
.SM
.B FIGNORE
è escluso dalla lista dei nomi di file che combaciano.  Un valore
di esempio è ``.o:~''.
.TP
.B INPUTRC
Il nome di file, per il file di avvio di readline che scavalca il default
.FN ~/.inputrc
(si veda
.SM
.B READLINE
più avanti).
.TP
.B notify
Se posto,
.B bash
informa immediatamente dei job in background terminati, piuttosto che
aspettare fino a prima di stampare il successivo prompt primario (si
veda anche l'opzione
.B \-b
del comando incorporato
.B set
).
.PD 0
.TP
.B history_control
.TP
.B HISTCONTROL
.PD
Se posto al valore
.IR ignorespace ,
le linee che iniziano con un carattere
.B space
non sono inserite nella lista della storia.  Se posto al valore
.IR ignoredups ,
le linee che coincidono con l'ultima linea della storia non sono inserite.
Il valore
.I ignoreboth
combina le due opzioni.
Se non posto, o se posto a qualsiasi altro valore che quelli sopra, tutte
le linee lette dall'analizzatore sono salvate nella lista della storia.
.TP
.B command_oriented_history
Se posta,
.B bash
tenta di salvare tutte le linee di un comando su più linee
nella stessa posizione della storia.  Questo permette un facile
re\-editing dei comandi su più linee.
.TP
.B glob_dot_filenames
Se posto,
.B bash
include i nomi di file che iniziano con un `.' nel risultato della
espansione di percorso.
.TP
.B allow_null_glob_expansion
Se posto,
.B bash
permette ai pattern di percorso che non combaciano con alcun file (si veda
.B Espansione dei percorsi
più avanti)
di espandersi in una stringa nulla, piuttosto che in loro stessi.
.TP
.B histchars
I due o tre caratteri che controllano l'espansione della storia
e la tokenizzazione (si veda
.SM
.B ESPANSIONE DELLA STORIA
più avanti).  Il primo carattere è il
.IR "carattere di espansione storia" ,
cioè, il carattere che segnala l'inizio di una espansione della storia,
normalmente `\fB!\fP'.
Il secondo carattere è il carattere di
.IR "sostituzione rapida" ,
che è usato come scorciatoia per rieseguire il comando precedentemente
inserito, sostituendo una stringa con un'altra nel comando.  Il default
è `\fB^\fP'.  Il terzo carattere opzionale è il carattere che indica
che il resto della linea è un commento, quando trovato come primo
carattere di una parola, normalmente `\fB#\fP'.  Il carattere di commento
della storia fa sì che la sostituzione della storia venga saltata per le
rimanenti parole sulla linea.  Esso non provoca necessariamente che
l'analizzatore della shell tratti il resto della linea come un commento.
.TP
.B nolinks
Se posto, la shell non segue i link simbolici quando esegue dei comandi
che cambiano la directory di lavoro corrente.  Essa usa invece la
struttura fisica della directory.  Per default,
.B bash
segue la catena logica delle directory quando effettua comandi che
cambiano la directory corrente, come
.BR cd .
Si veda anche la descrizione della opzione \fB\-P\fP del comando
incorporato \fBset\fP (
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.PD 0
.TP
.B hostname_completion_file
.TP
.B HOSTFILE
.PD
Contiene il nome di un file nello stesso formato di
.FN /etc/hosts
che dovrà essere letto quando la shell ha bisogno di completare un
nome di host.  Il file può essere cambiato interattivamente; la prossima
volta che è tentato il completamento del nome di host,
.B bash
aggiunge il contenuto del nuovo file al database già esistente.
.TP
.B noclobber
Se posto,
.B bash
non sovrascrive un file esistente con gli operatori di ridirezione
.BR > ,
.BR >& ,
e
.BR <> .
Questa variabile può essere ignorata quando 
si creano file di output usando l'operatore di ridirezione
.B >|
invece di
.B >
(si veda anche l'opzione \fB\-C\fP del comando incorporato
.B set
).
.TP
.B auto_resume
Questa variabile controlla il modo con cui la shell interagisce con
l'utente ed il job control.  Se questa variabile è posta, i comandi
semplici di una singola parola senza ridirezioni sono trattati come
candidati per la ripresa di un esistente job fermato.  Non è permessa
alcuna ambiguità; se vi è più di un job che comincia con la stringa
digitata, è selezionato il job acceduto più recentemente.  Il
.I nome
di un job fermo, in questo contesto, è la linea di comando usata per
avviarlo.  Se posto al valore
.IR exact ,
la stringa fornita deve combaciare esattamente con il nome di un job fermo;
se posto a
.IR substring ,
la stringa fornita deve combaciare con una sottostringa del nome di un
job fermo.  il valore
.I substring
fornisce funzionalità analoghe all'id di job
.B %?
(si veda
.SM
.B JOB CONTROL
più avanti).  Se posto a qulsiasi altro valore, la stringa fornita deve
essere un prefiso del nome di un job fermo; questo da funzionalità
analoghe all'id di job
.BR % .
.TP
.B no_exit_on_failed_exec
Se questa variabile esiste, una shell non interattiva non terminerà se
non può eseguire il file specificato nel comando incorporato
.BR exec .
Una shell interattiva non termina se
.B exec
fallisce.
.TP
.B cdable_vars
Se questa è posta, un argomento per il comando incorporato
.B cd
che non è una directory è assunto essere il nome di una variabile
il cui valore è la directory su cui andare.
.PD
.SH ESPANSIONE
L'espansione è effettuata sulla linea di comando dopo che essa è stata
divisa in parole.  Vi sono sette tipi di espansione effettuati:
.IR "espansione delle parentesi graffe" ,
.IR "espansione della tilde" ,
.IR "espansione di parametro e variabile" ,
.IR "sostituzione di comando" ,
.IR "espansione aritmetica" ,
.IR "suddivisione in parole" ,
ed
.IR "espansione di percorsi" .
.PP
L'ordine di espansione è: espansione delle parentesi graffe, espansione
della tilde, sostituzione di parametro, variabile, comando e aritmetica
(fatta da sinistra a destra), suddivisione in parole ed espansione di
percorso.
.PP
Sui sistemi che possono supportarla, è disponibile una espansione
aggiuntiva: la \fIsostituzione di processo\fP.
.PP
Solo l'espansione delle parentesi graffe, la suddivisione in parole, e
l'espansione di percorso possono cambiare il numero di parole della
espansione; le altre espansioni espandono una singola parola in una singola
parola.  La sola eccezione a questo è l'espansione di ``\fB$@\fP'' come
spiegato sopra (si veda
.SM
.BR PARAMETRI ).
.SS Espansione delle parentesi graffe
.PP
L'
.I "espansione delle parentesi graffe"
è un meccanismo con il quale possono essere generate stringhe arbitrarie.
Questo meccanismo è simile alla \fIespansione di percorso\fP, ma non è
necessario che i nomi di file generati esistano.  I pattern che devono
subire l'espansione delle parentesi graffe hanno la forma di un
.I preambolo
opzionale, seguito da una serie di stringhe, separate da virgola, tra una
coppia di parentesi graffe, seguite da un
.I postambolo
opzionale.  Il preambolo è preposto a ogni stringa contenuta dentro le
parentesi graffe, e il postambolo è poi appeso ad ogni stringa risultante,
espandendo da sinistra a destra.
.PP
Le espansioni delle parentesi graffe possono essere nidificate.
Il risultato di ogni stringa espansa non viene ordinato; è conservato
l'ordine da sinistra a destra.  Per esempio, a\fB{\fPd,c,b\fB}\fPe si
espande in `ade ace abè.
.PP
L'espansione delle parentesi graffe è effettuata prima di qualsiasi altra
espansione, e qualunque carattere speciale per le altre espansioni viene
conservato nel risultato.  Essa è strettamente testuale.
.B Bash
non applica alcuna interpretazione sintattica al contesto della
espansione o al testo tra le parentesi graffe.
.PP
Una espansione delle parentesi graffe correttamente formata deve
contenere parentesi graffe aperte e chiuse, non quotate, e almeno una
virgola non quotata.  Qualunque espansione delle parentesi graffe
erroneamente formata è lasciata inalterata.
.PP
Questo costrutto è tipicamente usato come abbreviazione quando il
prefisso comune delle stringhe da generare è più lungo che negli
esempi sopra:
.RS
.PP
mkdir /usr/local/src/bash/{old,new,dist,bugs}
.RE
o
.RS
chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}
.RE
.PP
L'espansione delle parentesi graffe introduce una leggera incompatibilità
con le versioni tradizionali della Bourne shell
.BR sh .
.B sh
non tratta le parentesi graffe aperte e chiuse, specialmente quando esse
appaiono come parte di una parola, e le conserva in uscita.
.B Bash
rimuove le parentesi graffe dalle parole come consequenza della espansione.
Per esempio, una parola data a
.B sh
come \fIfile{1,2}\fP
appare identica nell'output.  La stessa parola è data in output come
.I file1 file2
dopo l'espansione operata da
.BR bash .
Se si desidera, una stretta compatibilità con
.B sh
si avvia
.B bash
con il flag
.B \-nobraceexpansion
(si veda
.SM
.B OPZIONI
sopra)
o si disabilita l'espansione delle parentesi graffe con l'opzione
.B +o braceexpand
del comando
.B set
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.SS Espansione della tilde
.PP
Se una parola comincia con un carattere tilde (`\fB~\fP'), tutti i caratteri
che precedono il primo slash (o tutti caratteri, se non vi è alcuno slash)
sono trattati come un possible \fInome di login\fP.
Se questo \fInome di login\fP è la stringa nulla, la tilde è sostituita
con il valore del parametro
.SM
.BR HOME .
Se
.SM
.B HOME
non è posto, è invece sostituita la home directory dell'utente che sta
eseguendo la shell.
.PP
Se un `+' segue la tilde, il valore di
.SM
.B PWD
sostituisce la tilde e `+'.  Se
segue un `\-', è sostituito il valore di
.SM
.BR OLDPWD .
Se il valore che segue la tilde è un \fInome di login\fP valido,
la tilde e il \fInome di login\fP sono rimpiazzati con la home directory
associata con quel nome.  Se il nome non è valido, o la espansione della
tilde fallisce, la parola non viene cambiata.
.PP
Ogni assegnamento di variabile è controllato per istanze non quotate
di tilde seguenti un
.B :
o
.BR = .
Anche in questi casi viene effettuata la sostituzione della tilde.
Di conseguenza, si possono usare dei percorsi con delle tilde negli
assegnamenti a
.SM
.BR PATH ,
.SM
.BR MAILPATH ,
e
.SM
.BR CDPATH ,
e la shell assegna il valore espanso.
.SS Espansione di parametro
.PP
Il carattere `\fB$\fP' introduce l'espansione di parametro, la
sostituzione di comando, o l'espansione aritmetica.  Il nome o simbolo
del parametro che deve essere espanso può essere racchiuso tra parentesi
graffe, che sono opzionali ma servono a proteggere la variabile che deve
essere espansa, dai caratteri immediatamente seguenti, che potrebbero
essere interpretati come parte del nome.
.PP
.PD 0
.TP
${\fIparametro\fP}
È sostituito con il valore di \fIparametro\fP.  Le parentesi graffe sono
richieste quando
.I parametro
è un parametro posizionale con più di una cifra, o quando
.I parametro
è seguito da un carattere che non deve essere
interpretato come parte del suo nome.
.PD
.PP
In ognuno dei casi più avanti, \fIparola\fP è soggetta alla espansione
della tilde, espansione di parametro, sostituzione di comando ed espansione
aritmetica.  \fBBash\fP controlla se un parametro non è posto o è nullo;
l'omissione dei "due punti" provoca il solo controllo di parametro non posto.
.PP
.PD 0
.TP
${\fIparametro\fP\fB:\-\fP\fIparola\fP}
\fBUsa i valori di default\fP.  Se
.I parametro
non è posto o è nullo, è sostituito con l'espansione di
.IR parola .
Altrimenti, è sostituito con il valore di
.IR parametro .
.TP
${\fIparametro\fP\fB:=\fP\fIparola\fP}
\fBAssegna i valori di default\fP.
Se
.I parametro
non è posto o è nullo, l'espansione di
.I parola
è assegnata a
.IR parametro .
Il valore di
.I parametro
è quindi sostituito.  I parametri posizionali e parametri speciali non
possono essere assegnati in questo modo.
.TP
${\fIparametro\fP\fB:?\fP\fIparola\fP}
\fBMostra un errore se nullo o non posto\fP.
Se
.I parametro
è nullo o non posto, l'espansione di \fIparola\fP (o un messaggio dello
stesso effetto, se
.I parola
non è presente) viene scritta sullo standard error e la shell, se non è
interattiva, termina.  Altrimenti, è sostituito il valore di \fIparametro\fP.
.TP
${\fIparametro\fP\fB:+\fP\fIparola\fP}
\fBUsa un valore alternativo\fP.
Se
.I parametro
è nullo o non posto, non è sostituito niente, altrimenti
è sostituita l'espansione di
.IR parola .
.TP
${\fB#\fP\fIparametro\fP}
È sostituita la lunghezza in caratteri del valore di \fIparametro\fP.
Se \fIparametro\fP è
.B *
o 
.BR @ ,
la lunghezza sostituita è la lunghezza di
.B *
espanso tra virgolette.
.TP
.PD 0
${\fIparametro\fP\fB#\fP\fIparola\fP}
.TP
${\fIparametro\fP\fB##\fP\fIparola\fP}
.PD
La 
.I parola
è espansa per produrre un pattern proprio come nella espansione di
percorso.  Se il pattern combacia con l'inizio del valore di
.IR parametro ,
allora l'espansione è il valore di
.I parametro
con il più corto dei pattern combacianti cancellato (nel caso
di ``\fB#\fP'' ) o il più lungo dei pattern combacianti cancellato (nel
caso di ``\fB##\fP'' ).
.TP
.PD 0
${\fIparametro\fP\fB%\fP\fIparola\fP}
.TP
${\fIparametro\fP\fB%%\fP\fIparola\fP}
.PD
La \fIparola\fP è espansa per produrre un pattern proprio come nella
espansione di percorso.  Se il pattern combacia con una parte finale
del valore di
.IR parametro ,
allora l'espansione è il valore di
.I parametro
con il più corto dei pattern combacianti cancellato (nel caso
di ``\fB%\fP'' ) o il più lungo dei pattern combacianti cancellato (nel
caso di ``\fB%%\fP'' ).
.SS Sostituzione di comando
.PP
La \fIsostituzione comando\fP permette che l'output di un comando rimpiazzi 
il nome del comando.  Vi sono due forme:
.PP
.RS
.PP
\fB$(\fP\fIcomando\fP\|\fB)\fP
.RE
o
.RS
\fB`\fP\fIcomando\fP\fB`\fP
.RE
.PP
.B Bash
effettua l'espansione eseguendo il \fIcomando\fP e rimpiazzando la
sostituzione di comando con lo standard output del comando, con ogni
newline finale cancellato.
.PP
Quando è usata la forma di sostituzione in vecchio stile, con le backquote,
il backslash conserva il suo significato letterale tranne quando seguito da
.BR $ ,
.BR ` ,
o
.BR \e .
Quando si usa la forma $(\^\fIcomando\fP\|), tutti i caratteri tra le
parentesi formano il comando; nessuno è trattato in modo speciale.
.PP
La sostituzione di comando può essere nidificata.  Per nidificare quando
si usa la vecchia forma, bisogna far precedere le backquote più interne
con un carattere backslash di escape.
.PP
Se la sostituzione appare tra virgolette, la suddivisione in parole e
l'espansione di percorso non sono effettuate sui risultati.
.SS Espansione aritmetica
.PP
L'espansione artimetica permette la valutazione di una espressione aritmetica
e la sostituzione del risultato.
Vi sono due formati per l' espansione aritmetica:
.RS
.PP
\fB$[\fP\fIespressione\fP\fB]\fP
.PP
\fB$((\fP\fIespressione\fP\fB))\fP
.RE
.PP
L'
.I espressione
è trattata come se fosse tra virgolette, ma le virgolette dentro le
parentesi graffe o tonde non sono trattate in modo speciale.  Tutti i
token nella espressione subiscono l'espansione di parametro,
la sostituzione comando e la rimozione dei caratteri di quotatura.
Le sostituzioni aritmetiche possono essere nidificate.
.PP
Il calcolo è effettuato in accordo con le regole elencate più avanti sotto
.SM
.BR "CALCOLO ARITMETICO" .
Se
.I espressione
non è valida,
.B bash
stampa un messaggio che indica il fallimento e non avviene alcuna
sostituzione.
.SS Sostituzione di processo
.PP
La \fIsostituzione di processo\fP è supportata sui sistemi che supportano
le pipe con nome (\fIFIFO\fP) o il metodo \fB/dev/fd\fP per nominare i
file aperti.
Essa prende la forma di
\fB<(\fP\fIlista\^\fP\fB)\fP
o
\fB>(\fP\fIlista\^\fP\fB)\fP.
La \fIlista\fP di processi è eseguita con il suo input o output connesso
ad un \fIFIFO\fP o un file in \fB/dev/fd\fP.  Il nome di questo file è
passato come un argomento al comando corrente come risultato della
espansione.  Se è usata la forma \fB>(\fP\fIlista\^\fP\fB)\fP, la scrittura
sul file fornirà input per la \fIlista\fP.  Se è usata la forma
\fB<(\fP\fIlista\^\fP\fB)\fP, il file passato come argomento dovrà essere
letto per ottenere l'output di \fIlista\fP.
.PP
Su sistemi che la supportano, la \fIsostituzione di processo\fP è
effettuata simultaneamente alla
.IR "espansione di parametro e variabile " ,
.IR "sostituzione di comando" ,
ed
.IR "espansione aritmetica" .
.SS Suddivisione in parole
.PP
La shell scandisce il risultato dell'espansione di parametro,
sostituzione di comando ed espansione aritmetica,
che non si trovano tra virgolette, per effettuare la
.IR "suddivisione in parole" .
.PP
La shell tratta ogni carattere di
.SM
.B IFS
come un delimitatore, e spezza in parole, in coincidenza di questi caratteri,
i risultati delle altre espansioni.  Se il valore di
.SM
.B IFS
è esattamente
.BR <space><tab><newline> ,
il default, allora qualsiasi sequenza di caratteri
.SM
.B IFS
serve per delimitare le parole.  Se
.SM
.B IFS
ha un valure diverso dal default, allora sequenze di caratteri di spaziatura
.B space
e
.B tab
sono ignorati all'inizio e fine di parola, fin tanto che il carattere di
spaziatura è nel valore di
.SM
.BR IFS
(un carattere di spaziatura
.SM
.B IFS
).
Qualunque carattere in
.SM
.B IFS
che non è un carattere di spaziatura
.SM
.BR IFS ,
insieme con qualsiasi carattere di spaziatura
.SM
.B IFS
adiacente, delimita un campo.
Una sequenza di caratteri di spaziatura
.SM
.B IFS
è anche trattata come un delimitatore.
Se il valore di
.SM
.B IFS
è nullo, non avviene alcuna suddivisione in parole.
.SM
.B IFS
non può essere non posto.
.PP
Argomenti esplicitamente nulli (\^\f3"\^"\fP o \^\f3'\^'\fP\^) sono
conservati.  Argomenti implicitamente nulli, risultanti dalla espansione di
.I parametri
che non hanno alcun valore, sono rimossi.
.PP
È da notare che se non avviene alcuna espansione, nessuna suddivisione
è effettuata.
.SS Espansione di percorso
.PP
Dopo la suddivisione in parole,
a meno che sia stata posta l'opzione
.BR \-f ,
.B bash
scandisce ogni
.I parola
alla ricerca dei caratteri
.BR * ,
.BR ? ,
e
.BR [ .
Se uno di questi caratteri compare, allora la parola è
considerata come un
.IR pattern ,
e sostituita con una lista, ordinata alfabeticamente, di percorsi
che combaciano con il pattern.
Se nessun percorso che combacia viene trovato,
e la variabile di shell
.B allow_null_glob_expansion
non è posta, la parola è lasciata inalterata.
Se la variabile è posta, e nessuna coincidenza è trovata,
la parola è rimossa.
Quando un pattern è usato per la generazione di percorsi,
il carattere
.B ``.''
all'inizio di un nome o immediatamente seguente uno slash
deve combaciare esplicitamente, a meno che la variabile di shell
.B glob_dot_filenames
sia posta.  Il carattere slash deve sempre combaciare
esplicitamente.  Negli altri casi, il carattere
.B ``.''
non è trattato in modo speciale.
.PP
I caratteri speciali dei pattern hanno i seguenti significati:
.PP
.PD 0
.TP
.B *
Combacia con qualsiasi stringa, inclusa la stringa nulla.
.TP
.B ?
Combacia con qualsiasi carattere singolo.
.TP
.B [...]
Combacia con uno qualsiasi dei caratteri racchiusi.  Una coppia di
caratteri separati da un segno meno denota un
.IR range
(intervallo); è combaciante qualunque carattere lessicalmente tra
questi due caratteri, inclusi.  Se il primo carattere che segue il
.B [
è un
.B !
o un
.B ^
allora qualunque carattere non racchiuso è combaciante.  Un 
.B \-
o
.B ]
può essere confrontato includendolo come primo o ultimo carattere
dell'insieme.
.PD
.SS Rimozione dei caratteri di quotatura
.PP
Dopo le precedenti espansioni, tutte le occorrenze non quotate dei caratteri
.BR \e ,
.BR ` ,
e \^\f3"\fP\^ sono rimosse. 
.SH RIDIREZIONE
Prima che un comando sia eseguito, i suoi input e output
possono essere
.I ridiretti
usando una speciale notazione interpretata dalla shell.
La ridirezione può anche essere usata per aprire e chiudere file per
l'ambiente di esecuzione della shell corrente.
I seguenti operatori di ridirezione possono precedere o apparire ovunque
dentro un
.I comando semplice
o possono seguire un
.IR comando .
Le ridirezioni sono processate nell'ordine in cui compaiono,
da sinistra a destra.
.PP
Nelle seguenti descrizioni, se il numero di descrittore di file è
omesso, e il primo carattere dell'operatore di ridirezione è
.BR < ,
la ridirezione si riferisce allo standard input (descrittore di file
0).  Se il primo carattere dell'operatore di ridirezione è
.BR > ,
la ridirezione si riferisce allo standard output (descrittore di file
1).
.PP
La parola che segue l'operatore di ridirezione nelle seguenti
descrizioni è sottoposta alla espansione delle parentesi graffe,
espansione della tilde, espansione di parametro, sostituzione di comando,
espansione aritmetica, rimozione dei caratteri di quotatura ed
espansione dei percorsi.  Se si espande a più di una parola,
.B bash
riporta un errore.
.PP
È da notare che l'ordine delle ridirezioni è significativo.
Per esempio, il comando
.RS
.PP
ls \fB>\fP dirlist 2\fB>&\fP1
.RE
.PP
dirige sia lo standard output che lo standard error sul file 
.IR dirlist ,
mentre il comando
.RS
.PP
ls 2\fB>&\fP1 \fB>\fP dirlist
.RE
.PP
dirige solo lo standard output sul file
.IR dirlist ,
poiché lo standard error è stato duplicato come standard output
prima che lo standard output fosse ridiretto su
.IR dirlist .
.SS Ridirezione dell'input
.PP
La ridirezione dell'input fa sì che il file il cui nome risulta
dalla espansione di
.I parola
venga aperto in lettura sul descrittore di file
.IR n ,
o lo standard input (descrittore di file 0) se
.I n
non è specificato.
.PP
Il formato generico per ridirigere l'input è:
.RS
.PP
[\fIn\fP]\fB<\fP\fIparola\fP
.RE
.SS Ridirezione dell'output
.PP
La ridirezione dell'output fa sì che il file il cui nome risulta
dalla espansione di
.I parola
venga aperto in scrittura sul descrittore di file
.IR n ,
o lo standard output (descrittore di file 1) se
.I n
non è specificato.  Se il file non esiste è creato;
se esiste è troncato alla grandezza zero.
.PP
Il formato generico per ridirigere l'output è:
.RS
.PP
[\fIn\fP]\fB>\fP\fIparola\fP
.RE
.PP
Se l'operatore di ridirezione è
.BR >| ,
allora il valore dell'opzione
.B -C
del comando incorporato
.B set
non è controllata, ed è tentata la creazione del file.
(Vedi anche la descrizione di
.B noclobber
sotto
.B "Variabili di shell"
sopra.)
.SS Aggiungere in coda l'output ridiretto
.PP
La ridirezione dell'output in questo modo
fa sì che il file il cui nome risulta dalla espansione di
.I parola
venga aperto per aggiungere in coda (append) sul descrittore di file
.IR n ,
o lo standard output (descrittore di file 1) se
.I n
non è specificato.  Se il file non esiste viene creato.
.PP
Il formato generico per aggiungere in coda l'output è:
.RS
.PP
[\fIn\fP]\fB>>\fP\fIparola\fP
.RE
.PP
.SS Ridirezione di standard output e standard error
.PP
.B Bash
permette, con questo costrutto, che sia lo standard output (descrittore
di file 1) che lo standard error (descrittore di file 2) siano ridiretti
sul file il cui nome risulta dall'espansione di
.IR parola .
.PP
Vi sono due formati per ridirigere lo standard output e lo standard error:
.RS
.PP
\fB&>\fP\fIparola\fP
.RE
e
.RS
\fB>&\fP\fIparola\fP
.RE
.PP
Delle due forme, la prima è preferita.
Questo è semanticamente equivalente a
.RS
.PP
\fB>\fP\fIparola\fP 2\fB>&\fP1
.RE
.SS Testo in linea
.PP
Questo tipo di ridirezione istruisce la shell a leggere l'input dal
file sorgente corrente, finché non venga vista una linea contenente solo
.I parola
(con nessun carattere bianco di seguito).
Tutte le linee lette fino a quel punto sono quindi usate come standard input
per un comando.
.PP
Il formato del testo in linea è come segue:
.RS
.PP
.nf
\fB<<\fP[\fB\-\fP]\fIparola\fP
        \fItesto-in-linea\fP
\fIdelimitatore\fP
.fi
.RE
.PP
Nessuna espansione di parametro, sostituzione di comando,
espansione di percorso o espansione aritmetica è effettuata su
.IR parola .
Se qualche carattere in
.I parola
è quotato, il
.I delimitatore
è il risultato della rimozione dei caratteri di quotatura su
.IR parola ,
e le linee nel testo-in-linea non sono espanse.  Altrimenti,
tutte le linee del testo-in-linea sono soggette a espansione di parametro,
sostituzione di comando ed espansione aritmetica.  Nell'ultimo caso,
la coppia
.B \e<newline>
è ignorata, e
.B \e
deve essere usata per quotare i caratteri
.BR \e ,
.BR $ ,
e
.BR ` .
.PP
Se l'operatore di ridirezione è
.BR <<\- ,
allora tutti i caratteri tab iniziali sono eliminati dalle linee in input
e dalla linea che contiene
.IR delimitatore .
Questo permette che un testo-in-linea dentro uno script di shell possa
essere indentato in un modo naturale.
.SS "Duplicazione dei descrittori di file"
.PP
L'operatore di ridirezione 
.RS
.PP
[\fIn\fP]\fB<&\fP\fIparola\fP
.RE
.PP
è usata per duplicare descrittori di file di input.
Se
.I parola
si espande in una o più cifre, il descrittore di file indicato da
.I n
è fatto diventare una copia di quel descrittore di file.  Se
.I parola
vale
.BR \- ,
il descrittore di file
.I n
viene chiuso.  Se
.I n
non è specificato, è usato lo standard input (descrittore di file 0).
.PP
L'operatore
.RS
.PP
[\fIn\fP]\fB>&\fP\fIparola\fP
.RE
.PP
è usato similarmente per duplicare i descrittori di file di output.  Se
.I n
non è specificato, è usato lo standard output (descrittore di file 1).
Come caso speciale, se \fIn\fP è omesso, e \fIparola\fP non si espande a
una o più cifre, lo standard output e lo standard error sono ridiretti
come descritto in precedenza.
.SS "Apertura di descrittori di file per lettura e scrittura"
.PP
L'operatore di ridirezione 
.RS
.PP
[\fIn\fP]\fB<>\fP\fIparola\fP
.RE
.PP
fa sì che il file il cui nome è l'espansione di
.I parola
venga aperto sia per lettura che scrittura sul descrittore di file
.IR n ,
o come standard input e standard output se 
.I n
non è specificato.  Se il file non esiste, è creato.
.SH FUNZIONI
Una funzione di shell, definita come descritto prima sotto
.SM
.BR "GRAMMATICA DELLA SHELL" ,
immagazzina una serie di comandi per una futura esecuzione.
Le funzioni sono eseguite nel contesto della shell corrente; nessun nuovo
processo è creato per interpretarle (in contrasto, questo, con l'esecuzione
di uno script di shell).  Quando una funzione è eseguita, gli argomenti
della funzione diventano i parametri posizionali durante la sua esecuzione.
Il parametro speciale
.B #
viene aggiornato per riflettere il cambiamento. Il parametro posizionale 0
rimane inalterato.
.PP
Variabili locali alla funzione possono essere dichiarate con il
comando incorporato
.BR local .
Usualmente, le variabili e i loro valori sono condivisi tra la funzione e
il suo chiamante.
.PP
Se il comando incorporato
.B return
è eseguito in una funzione, la funzione termina e l'esecuzione riprende
con il successivo comando dopo la chiamata di funzione.  Quando una
funzione termina, i valori dei parametri posizionali e il parametro speciale
.B #
sono ripristinati ai valori che essi avevano prima della esecuzione della
funzione.
.PP
I nomi delle funzioni possono essere elencati con l'opzione
.B \-f
dei comandi incorporati 
.B declare
o
.BR typeset .
Le funzioni possono essere esportate, in modo che le subshells
automaticamente le abbiano definite, con l'opzione
.B \-f
del comado incorporato
.BR export .
.PP
Le funzioni possono essere ricorsive.  Nessun limite è posto sul numero
di chiamate ricorsive.
.SH ALIAS
La shell mantiene una lista di
.I alias
che possono essere posti e rimossi con i comandi incorporati
.B alias
e
.B unalias
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
La prima parola di ogni comando, se non quotata, viene controllata per
vedere se essa ha un alias.  Se così, quella parola è sostituita dal
testo dell'alias.
Il nome dell'alias e il testo da sostituire possono contenere qualunque
dato valido per la shell, inclusi i
.I metacaratteri
elencati sopra, con l'eccezione che il nome dell'alias non può
contenere \fI=\fP.  La prima parola del testo da sostituire è controllata
per vedere se contiene alias, ma una parola che è identica ad un alias
che si sta espandendo non viene espansa una seconda volta.  Questo significa
che si può soprannominare
.B ls
con
.BR "ls \-F" ,
per esempio, e
.B bash
non prova ad espandere ricorsivamente il testo da sostituire.
Se l'ultimo carattere del valore di un alias è un
.IR blank ,
allora la successiva parola di comando che segue l'alias è anche controllata
per l'espansione di alias.
.PP
Gli alias sono creati ed elencati con il comando
.B alias
e rimossi con il comando
.BR unalias .
.PP
Non vi è alcun meccanismo per usare argomenti nel testo da sostituire,
come in
.BR csh .
Se sono necessari degli argomenti, si dovrà usare una funzione di shell.
.PP
Gli alias non sono espansi quando la shell non è interattiva.
.PP
Le regole che riguardano la definizione e l'uso degli alias lasciano
abbastanza perplessi.  La
.B bash
legge sempre almeno una linea completa di input prima di eseguire uno dei
comandi su quella linea.  Gli alias sono espansi quando un comando è letto,
non quando è eseguito.  Perciò, una definizione di alias che appare sulla
stessa linea di un altro comando non ha effetto fino a che non è letta la
successiva linea di input.  Questo questo significa che i comandi che
seguono la definizione di un alias sulla stessa linea non sono influenzati
dal nuovo alias.  Questo comportamento è un problema anche quando sono
eseguite funzioni.  Gli alias sono espansi quando viene letta la definizione
di funzione, non quando la funzione è eseguita, poiché una definizione di
funzione è essa stessa un comando composto.  Come conseguenza, gli alias
definiti in una funzione sono disponibili solo dopo che la funzione è
eseguita.  Per essere sicuri, conviene sempre porre le definizioni di alias
su una linea separata, e non usare
.B alias
in comandi composti.
.PP
È da notare che per quasi ogni scopo, gli alias sono soppiantati dalle
funzioni di shell.
.SH "JOB CONTROL"
.Il Job control
indica la capacità di fermare (\fIsospendere\fP) selettivamente 
l'esecuzione di processi e continuare (\fIriprendere\fP)
la loro esecuzione più tardi. Tipicamente, un utente impiega
questo servizio attraverso una interfaccia interattiva fornita unitamente
dal driver del terminale del sistema e dalla
.BR bash .
.PP
La shell associa un
.I job
a ogni pipeline.  Essa mantiene una tabella dei job correntemente in
esecuzione, che può essere mostrata con il comando
.BR jobs .
Quando
.B bash
avvia un job in modo asincrono (in
.IR background ),
essa stampa una linea di questo tipo:
.RS
.PP
[1] 25647
.RE
.PP
che indica che questo job è il job numero 1 e che l'ID di processo
dell'ultimo processo nella pipeline associata a questo job è 25647.
Tutti i processi in una singola pipeline sono membri dello stesso job.
.B Bash
usa l'astrazione
.I job
come la base per il job control.
.PP
Per facilitare l'implementazione dell'interfaccia utente per il job
control, il sistema mantiene la nozione di \fIID del gruppo di processi del
terminale corrente\fP.  I membri di questo gruppo di processi (processi il cui
ID di gruppo di processi è uguale all'ID di gruppo di processi del terminale
corrente) ricevono i segnali generati da tastiera, come
.SM
.BR SIGINT .
Si dice che questi processi sono in
.IR foreground
(primo piano).
I processi in
.I background
(sullo sfondo) sono quelli il cui ID di gruppo di processi differisce da
quello del terminale; tali processi sono immuni ai segnali generati da
tastiera.  Solo ai processi in foreground è permesso di leggere o scrivere sul
terminale.  Ai processi in background che tentano di leggere (scrivere) sul
terminale è inviato un segnale
.SM
.B SIGTTIN (SIGTTOU)
dal driver del terminale, 
che, se non intercettato, sospende il processo.
.PP
.B Bash
permette di usare il job control, se questo è supportato dal sistema
operativo su cui
.B bash
sta girando.
Digitare il carattere di
.I sospensione
(tipicamente
.BR ^Z ,
Control-Z) mentre un processo sta girando, provoca lo stop di quel
processo e il ritorno del controllo di
.B bash
all'utente.  Digitare il carattere di
.I "sospensione ritardata"
(tipicamente
.BR ^Y ,
Control-Y) provoca lo stop del processo quando questo tenta di leggere
input dal terminale, e il ritorno del controllo di
.BR bash .
Si può poi maneggiare lo stato di questo job, usando il comando
.B bg
per continuarlo in background, il comando
.B fg
per continuarlo in foreground, o il comando
.B kill
per ucciderlo.  Un \fB^Z\fP ha effetto immediatamente, ed ha l'effetto
collaterale di causare la perdita dell'output in sospeso.
.PP
Vi sono numerosi modi per riferirsi a un job nella shell.
Il carattere
.B %
introduce un nome di job. Un job con numero
.I n
può essere indicato come
.BR %n .
Un job può anche essere indicato usando un prefisso del nome usato per
avviarlo, o usando una sottostringa che appare nella sua linea di comando.
Per esempio,
.B %ce
si riferisce a un job
.B ce
fermato.  Se un prefisso combacia con più di un job,
.B bash
riporta un errore.  Usare
.BR %?ce ,
d'altra parte, indica qualsiasi job che contiene la stringa
.B ce
nella sua linea di comando.  Se la sottostringa combacia con più di un job,
.B bash
rirorta un errore.  I simboli
.B %%
e
.B %+
si riferiscono alla nozione della shell del
.IR "job corrente" ,
che è l'ultimo job fermato mentre era in foreground.
Il 
.I "job precedente"
può essere indicato usando
.BR %\- .
Nell'output che riguarda i job (per esempio, l'output del comando
.BR jobs ),
il job corrente è sempre segnalato con un
.BR + ,
ed il job precedente con un
.BR \- .
.PP
Il semplice nominare un job può essere usato per riportarlo in
foreground:
.B %1
è un sinonimo per
\fB``fg %1''\fP,
che porta il job 1 da background in foreground.
Nello stesso modo,
.B ``%1 &''
riprende il job 1 in background, equivalente a
\fB``bg %1''\fP.
.PP
La shell apprende immediatamente ogni volta che un job cambia stato.
Normalmente,
.B bash
aspetta finché non sta per stampare un prompt prima di informare dei
cambiamenti nello stato di un job in modo tale da non interrompere
qualunque altro output.  Se l'opzione
.B -b
del comando incorporato
.B set
è posta,
.B bash
riporta tali cambiamenti immediatamente.  (Si veda anche la descrizione
della variabile
.B notify
sotto
.B "Variabili di shell"
sopra.)
.PP
Se si tenta di uscire da
.B bash
mentre vi sono dei job fermi, la shell stampa un messaggio di avvertimento.
Si può quindi usare il comando
.B jobs
per ispezionare il loro stato.  Se si fa così, o si prova ad uscire di
nuovo immediatamente, non si è più avvisati e i job fermi vengono terminati.
.SH SEGNALI
Quando \fBbash\fP è interattiva, ignora
.SM
.B SIGTERM
(così che \fBkill 0\fP non uccide una shell interattiva),
e
.SM
.B SIGINT
viene intercettato e gestito (così che il comando incorporato \fBwait\fP
è interrompibile).
In tutti i casi, \fBbash\fP ignora
.SM
.BR SIGQUIT .
Se è in uso il job control,
.B bash
ignora
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU ,
e
.SM
.BR SIGTSTP .
.PP
I job sincroni avviati da \fBbash\fP hanno i segnali impostati sui
valori che la shell ha ereditato dal suo genitore.  Quando il job control
non è in uso, i job in background (i job avviati con
.BR & )
ignorano
.SM
.B SIGINT
e
.SM
.BR SIGQUIT .
I comandi eseguiti come risultato di una sostituzione di comando ignorano
i segnali di controllo dei job generati da tastiera
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU ,
e
.SM
.BR SIGTSTP .
.SH "ESECUZIONE DI UN COMANDO"
Dopo che un comando è stato suddiviso in parole, se esso ha la forma di un
comando semplice e con una lista opzionale di argomenti, sono eseguite le
seguenti azioni.
.PP
Se il nome del comando non contiene alcuno slash (barra), la shell tenta di
localizzarlo.  Se esiste una funzione di shell con quel nome, viene chiamata
quella funzione, come descritto prima in
.SM
.BR FUNZIONI .
Se il nome non combacia con una funzione, la shell lo cerca nella lista dei
comandi incorporati della shell.  Se ne viene trovato uno combaciante, quel
comando incorporato viene eseguito.
.PP
Se il nome non è ne una funzione di shell ne un comando incorporato,
e non contiene alcuno slash,
.B bash
cerca tra gli elementi della variabile
.SM
.B PATH
una directory che contenga un file eseguibile con quel nome.
Se la ricerca non ha successo, la shell stampa un messaggio di errore e
ritorna uno stato di uscita diverso da zero.
.PP
Se la ricerca ha successo, o se il nome del comando contiene uno o più
slash, la shell esegue il programma indicato.
L'argomento 0 è posto al nome dato, e i rimanenti argomenti del comando
sono posti agli argomenti dati, se ve ne sono.
.PP
Se questa operazione fallisce perché il file non è in formato eseguibile e
il file non è una directory, esso è assunto essere uno \fIscript di shell\fP,
cioè, un file che contiene comandi di shell.  Una subshell viene attivata per
eseguirlo.  Questa subshell reinizializza se stessa, così che l'effetto è
lo stesso come se fosse stata lanciata una nuova shell per gestire lo script,
con la differenza che le locazioni dei comandi ricordati dal genitore (si veda
.B hash
più avanti sotto
.SM
\fBCOMANDI INCORPORATI DELLA SHELL\fP)
sono conservate dal figlio.
.PP
Se il programma è un file che inizia con
.BR #! ,
il resto della prima linea specifica un interprete per il programma.
La shell esegue l'interprete specificato sui sistemi operativi che non
gestiscono questo formato eseguibile da loro stessi.  Gli argomenti per
l'interprete consistono di un singolo argomento opzionale che segue il
nome dell'interprete sulla prima linea del programma, seguito dal nome
del programma, seguito dagli argomenti del comando, se ve ne sono.
.SH AMBIENTE
Quando viene lanciato un programma gli viene dato un vettore di stringhe
chiamato
.IR ambiente .
Questa è una lista di coppie 
\fInome\fP\-\fIvalore\fP, della forma
.IR "nome\fR=\fPvalore" .
.PP
La shell permette di manipolare l'ambiente in molti modi. Alla chiamata,
la shell esamina il suo ambiente e crea un parametro per ogni nome trovato,
marcandolo automaticamente per essere
.I esportato
ai processi figli.  I comandi eseguiti ereditano l'ambiente.
I comandi
.B export
e
.B declare \-x
permettono di aggiungere o togliere dall'ambiente parametri e funzioni.
Se il valore di un parametro nell'ambiente viene modificato, il nuovo
valore diventa parte dell'ambiente, sostituendo il valore vecchio.
L'ambiente ereditato da qualsiasi comando eseguito consiste dell'ambiente
iniziale della shell, i cui valori possono essere modificati nella shell,
meno ogni coppia rimossa dal comando
.BR unset ,
più ognuna aggiunta attraverso i comandi
.B export
e
.B declare \-x .
.PP
L'ambiente per qualsiasi
.I comando semplice
o funzione può essere aumentato temporaneamente prefissandolo con degli
assegnamenti di parametro, come descritto prima in
.SM
.BR PARAMETRI .
Queste istruzioni di assegnamento influenzano solo l'ambiente visto da
quel comando.
.PP
Se è posto il flag
.B \-k
(si veda il comando incorporato
.B set
più avanti), allora
.I tutti
gli assegnamenti di parametro sono posti nell'ambiente per un comando,
non solo quelli che precedono il nome del comando.
.PP
Quando
.B bash
chiama un comando esterno, la variabile
.B _
viene posta al nome del comando, completo di percorso, e passato
nell'ambiente di quel comando.
.SH "STATO DI USCITA"
Per gli scopi della shell, un comando che esce con uno stato di uscita
zero ha avuto successo.  Uno stato di uscita pari a zero indica successo.
Uno stato di uscita diverso da zero indica fallimento.
Quando un comando termina su un segnale fatale, \fBbash\fP usa il valore
di 128+\fBsegnale\fP come stato di uscita.
.PP
Se un comando non è trovato, il processo figlio creato per eseguirlo
ritorna uno stato pari a 127.  Se un comando è trovato ma non è eseguibile
lo stato di ritorno è 126.
.PP
\fBBash\fP stessa ritorna lo stato di uscita dell'ultimo comando
eseguito, a meno che non avvenga un errore di sintasi, nel qual caso essa
esce con un valore diverso da zero.  Si veda anche il
comando incorporato
\fBexit\fP
più avanti.
.SH MESSAGGI DI PROMPT
Quando eseguita interattivamente, 
.B bash
mostra il prompt primario
.SM
.B PS1
quando è pronta per leggere un comando, e il prompt secondario 
.SM
.B PS2
quando necessita di altro input per completare un comando.
.B Bash
permette di personalizzare queste stringhe di prompt inserendo un certo
numero di caratteri speciali preceduti da backslash che sono decodificati
come segue:
.RS
.PD 0
.TP
.B \et
l'ora corrente nel formato HH:MM:SS
.TP
.B \ed
la data nel formato "Nome-giorno Mese Numero-giorno"
(per esempio, "Tue May 26")
.TP
.B \en
nuova linea
.TP
.B \es
il nome della shell, il "basename" di
.B $0
(la parte che segue l'ultimo slash)
.TP
.B \ew
la directory di lavoro corrente
.TP
.B \eW
il basename della directory di lavoro corrente
.TP
.B \eu
lo username dell'utente corrente
.TP
.B \eh
il nome dell host
.TP
.B \e#
il numero di comando del comando
.TP
.B \e!
il numero di storia del comando
.TP
.B \e$
se l'UID effettivo è 0, un
.BR # ,
altrimenti un
.B $
.TP
.B \ennn
il carattere corrispondente al numero ottale \fBnnn\fP
.TP
.B \e\e
un backslash
.TP
.B \e[
inizia una sequenza di caratteri non stampabili, che può essere usata per
inglobare una sequenza di controllo di terminale nel prompt
.TP
.B \e]
termina una sequenza di caratteri non stampabili
.PD
.RE
.PP
Il numero del comando e numero della storia sono generalmente differenti:
il numero della storia di un comando è la sua posizione nella lista della
storia, che può includere comandi recuperati dal file di storia (si veda
.SM
.B STORIA
più avanti), mentre il numero del comando è la posizione nella sequenza
di comandi eseguiti durante la corrente sessione di shell.
Dopo che la stringa è decodificata, essa è espansa attraverso
l'espansione di parametro, la sostituzione di comando,
l'espansione aritmetica e la suddivisione in parole.
.SH READLINE
Questa è la libreria che gestisce la lettura dell'input quando si usa una
shell interattiva, a meno che non sia data l'opzione
.BR \-nolineediting .
Per default, i comandi per l'editor di linea sono simili a quelli di emacs.
È anche disponibile interfaccia per editor di linea in stile vi.
.PP
In questa sezione, è usata la notazione in stile emacs per indicare i
tasti digitati.  I tasti di controllo sono indicati da C\-\fItasto\fR,
per esempio, C\-n significa Control\-N.  In modo simile, i
.I meta
tasti sono indicati da M\-\fItasto\fR, cosi M\-x significa Meta\-X.
(Sulle tastiere senza un tasto
.IR meta ,
M\-\fIx\fP significa ESC \fIx\fP, cioè, si preme il tasto Escape e poi
il tasto
.IR x .
Questo rende ESC il \fImeta prefisso\fP.
La combinazione M\-C\-\fIx\fP significa ESC\-Control\-\fIx\fP, o si preme il
tasto Escape poi si tiene il tasto Control mentre si preme il tasto
.IR x .)
.PP
Le associazioni di default dei tasti possono essere cambiate con un file
.FN ~/.inputrc .
Il valore della variabile di shell
.SM
.BR INPUTRC ,
se posta, è usato invece di
.IR ~/.inputrc .
Altri programmi che usano questa libreria possono aggiungere il loro propri
comandi e associazioni.
.PP
Per esempio, porre
.RS
.PP
M\-Control\-u: universal\-argument
.RE
o
.RS
C\-Meta\-u: universal\-argument
.RE
nel file
.FN ~/.inputrc
farebbe eseguire a M\-C\-u il comando
.I universal\-argument
della readline.
.PP
Sono riconosciuti i seguenti nomi simbolici di carattere:
.IR RUBOUT ,
.IR DEL ,
.IR ESC ,
.IR LFD ,
.IR NEWLINE ,
.IR RET ,
.IR RETURN ,
.IR SPC ,
.IR SPACE ,
e
.IR TAB .
In aggiunta al nome del comando, readline permette che i tasti siano combinati
in una stringa che è inserita quando il tasto è premuto (una \fImacro\fP).
.PP
Readline viene personalizzata ponendo i comandi in un file di inizializzazione.
Il nome di questo file è preso dal valore della variabile
.SM
.BR INPUTRC .
Se questa variabile non è posta, il default è
.IR ~/.inputrc .
Quando si avvia un programma che usa la libreria readline, viene letto il
file di inizializzazione, e sono impostate le associazioni dei tasti e
le variabili.  Vi sono solo pochi costrutti base permessi nel file di
inizializzazione di readline.  Le linee bianche sono ignorate.
Le linee che iniziano con un \fB#\fP sono commenti.
Le linee che iniziano con un \fB$\fP indicano costrutti condizionali.  Le
altre linee denotano le associazioni dei tasti e l'assegnamento di variabili.
.PP
La sintassi per il controllo delle associazioni dei tasti nel file
.I ~/.inputrc
è semplice.  Tutto quello che è richiesto è il nome del comando o il testo
di una macro e una sequenza di tasti alla quale dovrà essere collegata.
Il nome può essere specificato in uno dei modi:
come nome simbolico di un tasto, eventualmente con i prefissi \fIMeta-\fP o
\fIControl-\fP, o come una sequenza di tasti.
Quando si usa la forma \fBnome-tasto\fP:\fInome-funzione\fP o \fImacro\fP,
.I nome-tasto
è il nome di un tasto nella lingua inglese.  Per esempio:
.sp
.RS
Control-u: universal\-argument
.br
Meta-Rubout: backward-kill-word
.br
Control-o: ">&output"
.RE
.LP
Negli esempi sopra,
.I C-u
viene collegato alla funzione
.BR universal\-argument ,
.I M-DEL
viene collegato alla funzione
.BR backward\-kill\-word ,
e
.I C-o
viene collegato all'esecuzione della macro indicata sul lato destro
(cioè, inserire il testo
.I >&output
nella linea).
.PP
Nella seconda forma, \fB"sequenza-tasti"\fP:\fInome-funzione\fP o \fImacro\fP,
.B sequenza-tasti
differisce da
.B nome-tasto
sopra, per il fatto che la stringa che denota una intera sequenza di tasti
può essere specificata ponendo la sequenza all'interno delle virgolette.
Alcuni tasti di escape nello stile di GNU Emacs possono essere usati, come
nei seguenti esempi.
.sp
.RS
"\eC-u": universal\-argument
.br
"\eC-x\eC-r": re\-read\-init\-file
.br
"\ee[11~": "Function Key 1"
.RE
.PP
In questo esempio,
.I C-u
viene ancora collegato alla funzione
.BR universal\-argument .
.I "C-x C-r"
viene collegato alla funzione
.BR re\-read\-init\-file ,
e 
.I "ESC [ 1 1 ~"
viene collegato all'inserimento del testo
.BR "Function Key 1" .
L'insieme completo delle sequenze di escape è
.RS
.TP
.B \eC\-
prefisso control
.TP
.B \eM-
prefisso meta
.TP
.B \ee
un carattere di escape
.TP
.B \e\e
backslash
.TP
.B \e"
il carattere "
.TP
.B \e\'
il carattere '
.RE
.PP
Quando si inserisce il testo di una macro, apostrofi o virgolette dovrebbero
essere usati per indicare una definizione di macro.  Il testo non quotato
si assume che sia un nome di funzione.
Il backslash quota qualsiasi carattere nel testo della macro, inclusi " e '.
.PP
.B Bash
permette di mostrare o modificare le associazioni correnti dei tasti di
readline con il comando incorporato
.BR bind .
Il modo di editing può essere cambiato durante l'uso interattivo
usando l'opzione
.B \-o
del comando incorporato
.B set
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).
.PP
Readline ha delle variabili che possono essere usate per personalizzare
ulteriormente il suo comportamento.  Una variabile può essere impostata
nel file
.I inputrc
con un'istruzione della forma
.RS
.PP
\fBset\fP \fInome\-di\-variabile\fP \fIvalore\fP
.RE
.PP
Tranne dove indicato diversamente, le variabili di readline possono avere
solo i valori
.B On
o
.BR Off .
Le variabili e i loro valori di default sono:
.PP
.PD 0
.TP
.B horizontal\-scroll\-mode (Off)
Quando posto a \fBOn\fP, indica a readline di usare una sola linea per la
visualizzazione, effettuando lo scroll dell'input in orizzontale su una
sola linea dello schermo quando essa diventa più lunga della larghezza dello
schermo, piuttosto che tornare a capo su una nuova linea.
.TP
.B editing\-mode (emacs)
Controlla se readline parte con un insieme di associazioni di tasti simile
a \fIemacs\fP o \fIvi\fP . 
.B editing\-mode
può essere posto a
.B emacs
o
.BR vi .
.TP
.B mark\-modified\-lines (Off)
Se posto a \fBOn\fP, le linee della storia che sono state modificate sono
mostrate precedute da un asterisco (\fB*\fP).
.TP
.B bell\-style (audible)
Controlla cosa accade quando readline vuole suonare il campanello del
terminale.  Se posto a \fBnone\fP, readline non suona mai il campanello.
Se posto a \fBvisible\fP, readline usa un campanello visible se ve ne è
uno disponibile.  Se posto a \fBaudible\fP, readline tenta di suonare il
campanello del terminale.
.TP
.B comment\-begin (``#'')
La stringa che è inserita in modo \fBvi\fP quando è eseguito il comando
.BR vi\-comment .
.TP
.B meta\-flag (Off)
Se posto a \fBOn\fP, readline abilita l'input a otto-bit (cioè, non
eliminerà il bit alto dai caratteri che legge), indipendentemente da ciò
che il terminale dichiara di poter supportare.
.TP
.B convert\-meta (On)
Se posto a \fBOn\fP, readline converte i caratteri con l'ottavo bit a 1,
a una sequenza di caratteri ASCII eliminando l'ottavo bit e preponendo un
carattere di escape (in effetti, usando l'escape come \fIprefisso meta\fP).
.TP
.B output\-meta (Off)
Se posto a \fBOn\fP, readline mostra direttamente i caratteri con l'ottavo
bit a 1, piuttosto che come sequence di escape con prefisso meta.
.TP
.B completion\-query\-items (100)
Questo determina quando l'utente è interpellato per la visione del totale
dei possibili completamenti generati dal comando \fBpossible\-completions\fP.
Esso può essere posto a qualsiasi valore intero maggiore o uguale a zero.
Se il numero di possibili completamenti è maggiore o uguale al valore di
questa variabile, all'utente viene chiesto se desidera o no vederli;
altrimenti essi sono semplicemente mostrati sul terminale.
.TP
.B keymap (emacs)
Imposta la mappa corrente dei tasti di readline.
Il set dei nomi legali per le mappe dei tasti è
\fIemacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command\fP, e
.IR vi-insert .
\fIvi\fP è equivalente a \fIvi-command\fP;
\fIemacs\fP è equivalente a \fIemacs-standard\fP.
Il valore di default è
.IR emacs ;
il valore di
.B editing\-mode
influenza anche la mappa dei tasti di default.
.TP
.B show\-all\-if\-ambiguous (Off)
Questo altera il comportamento di default delle funzioni di completamento.
Se posto a
.BR on ,
le parole che hanno più di un possibile completamento provocano
l'elencazione immediata delle coincidenze invece del suono del campanello.
.TP
.B expand\-tilde (Off)
Se posto a \fBon\fP, l'espansione della tilde è effettuata quando readline
tenta il completamento della parola.
.PD
.PP
Readline implementa un servizio simile, nello spirito, alla caretteristica
di compilazione condizionale del preprocessore C che permette di effettuare
associazioni di tasti e impostazioni di variabili in base al risultato di test.
Vi sono tre direttive di controllo usate.
.IP \fB$if\fP
Il costrutto
.B $if
permette che le associazioni siano fatte in base al modo di editing,
al terminale che viene usato, o della applicazione che fa uso di readline.
Il testo di condizione si estende fino alla fine della linea;
nessun carattere è richiesto per separarlo.
.RS
.IP \fBmode\fP
La forma \fBmode=\fP della direttiva \fB$if\fP è usata per verificare
se readline è in modo emacs o vi.
Questo può essere usato in congiunzione con il comando \fBset keymap\fP,
per esempio, per impostare le associazioni delle mappe dei tasti di
\fIemacs-standard\fP e \fIemacs-ctlx\fP solo se readline è avviata
nel modo emacs.
.IP \fBterm\fP
La forma \fBterm=\fP può essere usata per includere associazioni di tasti
specifiche per un terminale, probabilmente per associare le sequenze di
tasti emesse dai tasti funzione dei terminali.
La parola a destra dell'
.B =
viene confrontata con il nome completo del terminale e la parte del nome
del terminale che precede il primo \fB\-\fP.  Questo permette a
.I sun
di combaciare sia con
.I sun
che con
.IR sun\-cmd ,
per esempio.
.IP \fBapplication\fP
Il costrutto \fBapplication\fP è usato per includere le impostazioni
specifiche della applicazione.  Ogni programma che usa la libreria readline
imposta il suo nome con \fIapplication nome\fP, e un file di inizializzazione
può poi controllare un particolare valore.
Questo può essere usato per associare sequenze di tasti a funzioni utili
per uno specifico programma.  Per esempio, il comando seguente aggiunge una
sequenza di tasti che quota la parola corrente o la parola precedente in Bash:
.RS
.nf
\fB$if\fP Bash
# Quota la parola corrente o precedente
"\eC-xq": "\eeb\e"\eef\e""
\fB$endif\fP
.fi
.RE
.RE
.IP \fB$endif\fP
Questo comando, come si è visto nell'esempio precedente, termina un
comando \fB$if\fP .
.IP \fB$else\fP
I comandi in questa parte della direttiva \fB$if\fP sono eseguiti se
il test fallisce.
.PP
Ai comandi di readline possono essere dati
.I argomenti
numerici, che normalmente agiscono come contatori di ripetizione.
Qualche volta, tuttavia, è il segno dell'argomento che è significativo.
Passare un argomento negativo a un comando che agisce nella direzione avanti
(per esempio, \fBkill\-line\fP) fa sì che il comando agisca nella direzione
indietro.  I comandi con argomenti che hanno un comportamento che differisce
da questo saranno indicati.
.PP
Quando un comando è descritto come \fIeliminatore\fP di testo, il testo
cancellato è salvato per eventuali recuperi futuri (\fIyanking\fP).
Il testo eliminato è salvato in un \fIkill\-ring\fP.
Eliminazioni consecutive provocano l'accumulo del testo in una unità, che
può essere recuperata tutta in una volta. 
I comandi che non eliminano testo separano i pezzi di testo sul kill\-ring.
.PP
La seguente è una lista dei nomi dei comandi e le sequenze di tasti
di default a cui essi sono collegati.
.SS Comandi per spostarsi
.PP
.PD 0
.TP
.B beginning\-of\-line (C\-a)
Si sposta all'inizio della linea corrente.
.TP
.B end\-of\-line (C\-e)
Si sposta alla fine della linea.
.TP
.B forward\-char (C\-f)
Si sposta avanti di un carattere.
.TP
.B backward\-char (C\-b)
Si sposta indietro di un carattere.
.TP
.B forward\-word (M\-f)
Si sposta in avanti alla fine della parola successiva.
Le parole sono composte di caratteri alfanumerici (lettere e cifre).
.TP
.B backward\-word (M\-b)
Si sposta indietro all'inizio di questa, o della precedente, parola.
Le parole sono composte di caratteri alfanumerici (lettere e cifre).
.TP
.B clear\-screen (C\-l)
Pulisce lo schermo lasciando la linea corrente in cima allo schermo.
Con un argomento, rinfresca la linea corrente senza cancellare lo schermo.
.TP
.B redraw\-current\-line
Rinfresca la linea corrente.  Per default, questo non è associato.
.PD
.SS Comandi per manipolare la storia
.PP
.PD 0
.TP
.B accept\-line (Newline, Return)
Accetta la linea senza curarsi di dove sia il cursore.  Se questa linea non
è vuota, la aggiunge alla lista della storia in accordo con lo stato della
variabile
.SM
.BR HISTCONTROL .
Se la linea è una linea della storia modificata, allora ripristina
la linea della storia al suo stato originale.
.TP
.B previous\-history (C\-p)
Prende il precedente comando dalla lista della storia, spostandosi indietro
nella lista.
.TP
.B next\-history (C\-n)
Prende il successivo comando dalla lista della storia, spostandosi avanti
nella lista.
.TP
.B beginning\-of\-history (M\-<)
Si sposta alla prima linea nella storia.
.TP
.B end\-of\-history (M\->)
Si sposta alla fine della storia dell'input, cioè, la linea che deve
correntemente essere inserita.
.TP
.B reverse\-search\-history (C\-r)
Cerca all'indietro partendo dalla linea corrente spostandosi attraverso
la storia come necessario.  Questa è una ricerca incrementale.
.TP
.B forward\-search\-history (C\-s)
Cerca in avanti partendo dalla linea corrente e spostandosi attraverso
la storia come necessario.  Questa è una ricerca incrementale.
.TP
.B non\-incremental\-reverse\-search\-history (M\-p)
Cerca all'indietro attraverso la storia partendo dalla linea corrente,
una stringa fornita dall'utente, usando una ricerca non incrementale.
.TP
.B non\-incremental\-forward\-search\-history (M\-n)
Cerca in avanti attraverso la storia una stringa fornita dall'utente,
usando una ricerca non incrementale.
.TP
.B history\-search\-forward
Cerca in avanti attraverso la storia una stringa di caratteri tra l'inizio
della linea corrente e il punto corrente.  Questa è una ricerca non
incrementale.  Per default, questo comando non è associato.
.TP
.B history\-search\-backward
Cerca all'indietro attraverso la storia una stringa di caratteri tra l'inizio
della linea corrente e il punto corrente.  Questa è una ricerca non
incrementale.  Per default, questo comando non è associato.
.TP
.B yank\-nth\-arg (M\-C\-y)
Inserisce il primo argomento del comando precedente (generalmente la seconda
parola sulla linea precedente) nel punto (la posizione corrente del cursore).
Con un argomento
.IR n ,
inserisce la \fIn\fP\-sima parola del comando precedente (le parole nel
comando precedente iniziano con la parola 0).  Un argomento negativo
inserisce la \fIn\fP\-sima parola dalla fine del comando precedente.
.TP
.B
yank\-last\-arg (M\-.\^, M\-_\^)
Inserisce l'ultimo argomento del comando precedente (l'ultima parola sulla
linea precedente).
Con un argomento, si comporta esattamente come @code{yank-nth-arg}.
.TP
.B shell\-expand\-line (M\-C\-e)
Espande la linea nello stesso modo in cui fa la shell quando la legge.
Questo effettua espansione degli alias e della storia così come tutte
le espansioni di parola della shell.  Si veda
.SM
.B ESPANSIONE DELLA STORIA
più avanti per una descrizione della espansione della storia.
.TP
.B history\-expand\-line (M\-^)
Effettua l'espansione della storia sulla linea corrente.  Si veda
.SM
.B ESPANSIONE DELLA STORIA
più avanti per una descrizione della espansione della storia.
.TP
.B insert\-last\-argument (M\-.\^, M\-_\^)
Un sinonimo per \fByank\-last\-arg\fP.
.TP
.B operate-and-get-next (C\-o)
Accetta la linea corrente per l'esecuzione e prende dalla storia la linea
successiva relativa alla linea corrente, per l'editing.  Qualsiasi
argomento è ignorato.
.PD
.SS Comandi per cambiare il testo
.PP
.PD 0
.TP
.B delete\-char (C\-d)
Cancella il carattere sotto il cursore.  Se il punto è all'inizio della
linea, non vi è alcun carattere nella linea, e l'ultimo carattere battuto
non era
.BR C\-d ,
allora ritorna
.SM
.BR EOF .
.TP
.B backward\-delete\-char (Rubout)
Cancella il carattere dietro il cursore.  Quando è dato un argomento
numerico, salva il testo cancellato sul kill\-ring.
.TP
.B quoted\-insert (C\-q, C\-v)
Aggiunge "alla lettera" il successivo carattere che si digita sulla linea.
Questo è il modo per inserire caratteri come \fBC\-q\fP, per esempio.
.TP
.B tab\-insert (C-v TAB)
Inserisce un carattere tab.
.TP
.B self\-insert (a,\ b,\ A,\ 1,\ !,\ ...)
Inserisce il carattere digitato.
.TP
.B transpose\-chars (C\-t)
Trascina il carattere prima del cursore in avanti sopra il carattere sotto
il cursore.  Anche il cursore si sposta in avanti.  Se il cursore è alla
fine della linea, allora transpone i due caratteri prima del cursore.
Argomenti negativi non funzionano.
.TP
.B transpose\-words (M\-t)
Trascina la parola prima del cursore dopo la parola oltre il cursore
spostando inoltre il cursore dopo quella parola.
.TP
.B upcase\-word (M\-u)
Rende maiuscola la corrente (o seguente) parola.  Con un argomento negativo,
opera sulla parola precedente, ma non sposta il cursore.
.TP
.B downcase\-word (M\-l)
Rende minuscola la corrente (o seguente) parola.  Con un argomento negativo,
opera sulla parola precedente, ma non sposta il cursore.
.TP
.B capitalize\-word (M\-c)
Rende maiuscola la prima lettera della corrente (o seguente) parola.
Con un argomento negativo, opera sulla parola precedente, ma non sposta
il cursore.
.PD
.SS Eliminazione e recupero
.PP
.PD 0
.TP
.B kill\-line (C\-k)
Elimina il testo dalla posizione corrente del cursore fino alla fine della
linea.
.TP
.B backward\-kill\-line (C\-x C\-Rubout)
Elimina all'indietro fino all'inizio della linea.
.TP
.B unix\-line\-discard (C\-u)
Elimina all'indietro dal cursore fino all'inizio della linea.
.\" Non vi è alcuna reale differenza tra questa e backward-kill-line
.TP
.B kill\-whole\-line
Elimina tutti i caratteri sulla linea corrente, non importa dove sia il
cursore.  Per default, questo non è associato.
.TP
.B kill\-word  (M\-d)
Elimina dal cursore fino alla fine della parola corrente, o se tra parole,
fino alla fine della successiva parola.  I confini delle parole sono gli
stessi che sono usati da \fBforward\-word\fP.
.TP
.B backward\-kill\-word (M\-Rubout)
Elimina la parola dietro il cursore.  I confini delle parole sono gli
stessi che sono usati da \fBforward\-word\fP.
.TP
.B unix\-word\-rubout (C\-w)
Elimina la parola dietro il cursore, usando gli spazi bianchi come un
confine di parola.
I confini di parola sono diversi rispetto a backward\-kill\-word.
.TP
.B delete\-horizontal\-space
Cancella tutti gli spazi e tab attorno al cursore.
Per default, questo non è associato.
.TP
.B yank (C\-y)
Recupera il contenuto in cima al kill\-ring e lo pone prima del cursore.
.TP
.B yank\-pop (M\-y)
Ruota il kill\-ring, e recupera la nuova cima.  Funziona solo dopo
.B yank
o
.BR yank\-pop .
.PD
.SS Argomenti numerici
.PP
.PD 0
.TP
.B digit\-argument (M\-0, M\-1, ..., M\-\-)
Aggiunge questa cifra (digit) all'argomento che sta già accumulando,
o inizia un nuovo argomento.  M\-\- avvia un argomento negativo.
.TP
.B universal\-argument
Ogni volta che è eseguito questo, l'argument count è moltiplicato per 4.
L'argument count è inizialmente uno, così eseguendo questa funzione la
prima volta mette argument count a quattro.  Per default, questo non è
associato a un tasto.
.PD
.SS Completamento
.PP
.PD 0
.TP
.B complete (TAB)
Tenta di effettuare il completamento del testo che precede il cursore.
.B Bash
tenta il completamento trattando il testo, rispettivamente, come una
variabile (se il testo inizia con \fB$\fP), nome di utente (se il testo
comincia con \fB~\fP), nome di host (se il testo comincia con \fB@\fP),
o comando (includsi alias e funzioni).  Se nessuna di queste produce
una coincidenza, viene tentato il completamento di nome di file.
.TP
.B possible\-completions (M-?)
Elenca i possibili completamenti del testo che precede il cursore.
.TP
.B insert\-completions
Inserisce tutti i completamenti del testo che precede il cursore che
sarebbero stati generati da \fBpossible\-completions\fP.
Per default, questo non è associato a un tasto.
.TP
.B complete\-filename (M\-/)
Tenta il completamento del nome del file sul testo che precede il cursore.
.TP
.B possible\-filename\-completions (C\-x /)
Elenca i possibili completamenti del testo che precede il cursore,
trattandolo come un nome di file.
.TP
.B complete\-username (M\-~)
Tenta il completamento del testo che precede il cursore, trattandolo
come un nome di utente.
.TP
.B possible\-username\-completions (C\-x ~)
Elenca i possibili completamenti del testo che precede il cursore,
trattandolo come un nome di utente.
.TP
.B complete\-variable (M\-$)
Tenta il completamento del testo che precede il cursore, trattandolo
come una variabile di shell.
.TP
.B possible\-variable\-completions (C\-x $)
Elenca i possibili completamenti del testo che precede il cursore,
trattandolo come una variabile di shell.
.TP
.B complete\-hostname (M\-@)
Tenta il completamento del testo che precede il cursore, trattandolo
come un nome di host.
.TP
.B possible\-hostname\-completions (C\-x @)
Elenca i possibili completamenti del testo che precede il cursore,
trattandolo come un nome di host.
.TP
.B complete\-command (M\-!)
Tenta il completamento del testo che precede il cursore, trattandolo come
nome di comando.  Il completamento di comando tenta di far combaciare
il testo confrontandolo con alias, parole riservate, funzioni di shell,
comandi incorporati e, in fine, nomi di file eseguibili, in questo ordine.
.TP
.B possible\-command\-completions (C\-x !)
Elenca i possibili completamenti del testo che precede il cursore,
trattandolo come un nome di comando.
.TP
.B dynamic\-complete\-history (M-TAB)
Tenta il completamento del testo che precede il cursore, confrontando
il testo con le linee della lista della storia cercando i possibili
completamenti combacianti.
.TP
.B complete\-into\-braces (M\-{)
Effettua il completamento del nome di file e ritorna la lista dei possibili
completamenti racchiusi tra parentesi graffe, così la lista è disponibile
per la shell (si veda
.B Espansione delle parentesi graffe
sopra).
.PD
.SS Macro di tastiera
.PP
.PD 0
.TP
.B start\-kbd\-macro (C-x (\^)
Inizia a salvare i caratteri digitati nella corrente macro di tastiera.
.TP
.B end\-kbd\-macro (C-x )\^)
Smette di salvare i caratteri digitati nella corrente macro di tastiera
e salva la definizione.
.TP
.B call\-last\-kbd\-macro (C-x e)
Riesegue l'ultima macro di tastiera definita, facendo si che i caratteri
nella macro appaiano come se fossero digitati alla tastiera.
.PD
.SS Varie
.PP
.PD 0
.TP
.B re\-read\-init\-file (C\-x C\-r)
Legge il contenuto del file personale di inizializzazione, e incorpora
ogni associazione o assegnamento di variabile trovata.
.TP
.B abort (C\-g)
Annulla il corrente comando di editing e suona il campanello del terminale
(dipendente dall'impostazione di
.BR bell\-style ).
.TP
.B do\-uppercase\-version (M\-a, M\-b, ...)
Esegue il comando che è collegato al corrispondente carattere maiuscolo.
.TP
.B prefix\-meta (ESC)
Mette il tasto Meta per il successivo carattere digitato.
.SM
.B ESC
.B f
è equivalente a
.BR Meta\-f .
.TP
.B undo (C\-_, C\-x C\-u)
Undo incrementale, ricordato separatamente per ogni linea.
.TP
.B revert\-line (M\-r)
Toglie tutti i cambiamenti fatti su questa linea.  Questo è come digitare
il comando
.B undo
un numero sufficiente di volte da riportare la linea al suo stato iniziale.
.TP
.B tilde\-expand (M\-~)
Effettua l'espansione della tilde sulla parola corrente.
.TP
.B dump\-functions
Stampa tutte le funzioni e le loro associazioni di tasti sul flusso di
uscita di readline.  Se è fornito un argomento numerico, l'uscita è
formattata in modo tale che può essere fatta parte di un file \fIinputrc\fP.
.TP
.B display\-shell\-version (C\-x C\-v)
Mostra l'informazione sulla versione della corrente instanza di
.BR bash .
.TP
.B emacs\-editing\-mode (C\-e)
Quando in modo di editing
.BR vi ,
questo causa la commatazione al modo di editing
.BR emacs .
.PD
.SH STORIA
Quando interattiva, la shell fornisce l'accesso alla \fIstoria dei comandi\fP,
la lista dei comandi precedentemente digitati.  Il testo degli ultimi
.SM
.B HISTSIZE
comandi (default 500) è salvato in una lista della storia.  La shell
immagazzina ogni comando nella lista della storia prima della espansione di
parametro e variabile (si veda
.SM
.B ESPANSIONE
sopra) ma dopo che è effettuata l'espansione della storia, ed è dipendente
dai valori delle variabili di shell
.B command_oriented_history
e
.SM
.BR HISTCONTROL .
All'avviamento, la storia è inizializzata dal file indicata dalla variabile
.SM
.B HISTFILE
(default \fI~/.bash_history\fP).
.SM
.B HISTFILE
viene accorciato, se necessario, per contenere non più di
.SM
.B HISTFILESIZE
linee.
Il comando incorporato
.B fc
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti) può essere usato per elencare o editare e rieseguire una
parte della lista della storia.
Il comando incorporato
.B history
può essere usato per mostrare la lista della storia e manipolare il file
di storia.  Quando si usa l'editing della linea di comando, sono disponibili
comandi di ricerca in ciascun modo di editing che fornisce accesso
alla lista della storia.  Quando una shell interattiva esce, le ultime
.SM
.B HISTSIZE
linee sono copiate dalla lista della storia su
.SM
.BR HISTFILE .
Se
.SM
.B HISTFILE
non è posto, o se il file di storia non è scrivibile, la storia non viene
salvata.
.SH "ESPANSIONE DELLA STORIA"
.PP
La shell supporta una caratteristica di espansione della storia che è simile
alla espansione della storia in
.BR csh.
Questa sezione descrive quali caratteristiche di sintassi sono disponibili.
Questa caratteristica è abilitata per default per le shell interattive,
e può essere disabilitata usando l'opzione
.B \+H
del comando incorporato
.B set
(si veda
.SM
.B COMANDI INCORPORATI DELLA SHELL
più avanti).  Le shell non interattive non effettuano l'espansione della
storia.
.PP
L'espansione della storia è effettuata immediatamente dopo che una linea
completa è letta, prima che la shell la spezzi in parole.
Essa ha luogo in due parti.  La prima è determinare quale linea dalla
storia precedente usare durante la sostituzione.  La seconda è per
selezionare parti di quella linea da includere in quella corrente.
La linea selezionata dalla storia precedente è l'\fIevento\fP, e la
parte di quella linea su cui si agisce sono le \fIparole\fP.
La linea è spezzata in parole nello stesso modo di quando è letta in
input, così che più parole separate da \fImetacaratteri\fP\, circondate
da virgolette o apostrofi, sono considerate come una parola.
Solo il backslash (\^\fB\e\fP\^) e gli apostrofi possono quotare
il carattere di escape della storia, che è \^\fB!\fP\^ per default.
.PP
La shell permette il controllo dei vari caratteri usati dal meccanismo 
di espansione della storia (si veda la precedente descrizione di
.B histchars
sotto
.BR "Variabili di shell" ).
.SS Designatore di evento
.PP
Un designatore di evento è un riferimento a un elemento di linea di comando
nella lista della storia.
.PP
.PD 0
.TP
.B !
Inizia una sostituzione di storia, tranne quando seguita da un
.BR blank ,
newline, = o (.
.TP
.B !!
Si riferisce al comando precedente.  Questo è un sinonimo per `!\-1'.
.TP
.B !\fIn\fR
Si riferisce alla linea di comando
.IR n .
.TP
.B !\-\fIn\fR
Si riferisce alla linea di comando corrente meno
.IR n .
.TP
.B !\fIstringa\fR
Si riferisce al più recente comando che inizia con
.IR stringa .
.TP
.B !?\fIstringa\fR\fB[?]\fR
Si riferisce al più recente comando che contiene
.IR stringa .
.TP
.B \d\s+2^\s-2\u\fIstringa1\fP\d\s+2^\s-2\u\fIstringa2\fP\d\s+2^\s-2\u
Sostituzione rapida.  Ripete l'ultimo comando, rimpiazzando
.I stringa1
con
.IR stringa2 .
Equivalente a
``!!:s/\fIstringa1\fP/\fIstringa2\fP/''
(si veda \fBModificatori\fP più avanti).
.TP
.B !#
L'intera linea di comando digitata fino a questo punto.
.PD
.SS Designatori di parola
.PP
Un 
.B :
separa la specificazione di evento dal designatore di parola.
Esso può essere omesso se il designatore di parola inizia con un
.BR ^ ,
.BR $ ,
.BR * ,
o
.BR % .
Le parole sono numerate dall'inizio della linea,
con la prima parola indicata da uno 0 (zero).
.PP
.PD 0
.TP
.B 0 (zero)
La zeresima parola.  Per la shell, questa è la parola di comando.
.TP
.I n
La \fIn\fR\-esima parola.
.TP
.B ^
Il primo argomento.  Cioè, la parola 1.
.TP
.B $
L'ultimo argomento.
.TP
.B %
La parola che combacia con `?\fIstringa\fR?' nella più recente ricerca.
.TP
.I x\fB\-\fPy
Un intervallo di parole; `\-\fIy\fR' abbrevia `0\-\fIy\fR'.
.TP
.B *
Tutte le parole tranne la zeresima.  Questo è un sinonimo per `\fI1\-$\fP'.
Non è un errore usare
.B *
se vi è solo una parola nell'evento; in quel caso è ritornata la stringa
vuota.
.TP
.B x*
Abbrevia \fIx\-$\fP.
.TP
.B x\-
Abbrevia \fIx\-$\fP come \fBx*\fP, ma omette l'ultima parola.
.PD
.SS Modificatori
.PP
Dopo l'opzionale designatore di parola, si può aggiungere una sequenza
di uno o più dei seguenti modificatori, ognuno preceduto da un `:'.
.PP
.PD 0
.PP
.TP
.B h
Rimuove un componente di coda in un percorso, lasciando solo la testa.
.TP
.B r
Rimuove un suffiso di coda della forma \fI.xxx\fP, lasciando il basename
(nome base).
.TP
.B e
Rimuove tutto tranne il suffisso di coda.
.TP
.B t
Rimuove tutti i componenti di testa in un percorso, lasciando la coda.
.TP
.B p
Stampa il nuovo comando ma non lo esegue.
.TP
.B q
Quota le parole sostituite, prevenendo ulteriori sostituzioni.
.TP
.B x
Quota le parole sostituite, come con
.BR q ,
ma spezza in parole sui
.B blank
e newline.
.TP
.B s/\fIvecchio\fP/\fInuovo\fP/
Sostituisce
.I nuovo
per la prima occorrenza di
.I vecchio
nella linea di evento.
Qualsiasi delimitatore può essere usato in luogo di /.
Il delimitatore finale è opzionale se esso è l'ultimo carattere della
linea di evento.  Il delimitatore può essere quotato in
.I vecchio
e
.I nuovo
con un singolo backslash.  Se compare & in
.IR nuovo ,
esso è rimpiazzato da
.IR vecchio .
Un singolo backslash quoterà il carattere &.
.TP
.B &
Ripete la precedente sostituzione.
.TP
.B g
Fa sì che i cambiamenti siano applicati su l'intera linea di evento.
Questo è usato in congiunzione con `\fB:s\fP'
(per esempio, `\fB:gs/\fIvecchio\fP/\fInuovo\fP/\fR') o `\fB:&\fP'.
Se usato con `\fB:s\fP', qualsiasi delimitatore può essere usato in luogo
di /, e il delimitatore finale è opzionale se esso è l'ultimo carattere
della linea di evento.
.PD
.SH "CALCOLO ARITMETICO"
La shell permette di calcolare espressioni aritmetiche, sotto certe
circostanze (si veda il comando incorporato \fBlet\fP e
l'\fBespansione artimetica\fP).
La valutazione viene fatta in interi long senza controllo per l'overflow,
benché la divisione per 0 sia intercettata e segnalata come errore.
La seguente lista di operatori è raggruppata per operatori di uguale
livello di precedenza.
I livelli sono elencati in ordine decrescente di precedenza.
.PP
.PD 0
.TP
.B \- +
meno e più unari
.TP
.B ! ~
negazione logica e "bit a bit" 
.TP
.B * / %
moltiplicazione, divisione, modulo
.TP
.B + \-
addizione, sottrazione
.TP
.B << >>
shift "bit a bit" a sinistra e a destra
.TP
.B <= >= < >
confronti
.TP
.B == !=
uguaglianza e disuaglianza
.TP
.B &
AND "bit a bit"
.TP
.B ^
OR esclusivo "bit a bit" 
.TP
.B |
OR "bit a bit" 
.TP
.B &&
AND logico
.TP
.B ||
OR logico
.TP
.B = *= /= %= += \-= <<= >>= &= ^= |=
assegnamento
.PD
.PP
Le variabili di shell sono permesse come operandi; l'espansione di parametro
è effettuata prima che l'espressione sia valutata.
Il valore di un parametro dentro una espressione è forzato a un intero long.
Una variabile di shell non ha bisogno di avere il suo attributo intero 
posto a on per essere usata in una espressione.
.PP
Le constanti con uno 0 iniziale sono interpretate come numeri ottali.
Uno \fI0x\fP o \fI0X\fP iniziale indica numeri esadecimali.  Altrimenti,
i numeri prendono la forma [\fIbase#\fP]n, dove \fIbase\fP è un numero
decimale tra 2 e 36 che rappresenta la base aritmetica, e \fIn\fP è un
numero in quella base.  Se \fIbase\fP è omessa, allora è usata la base 10.
.PP
Gli operatori sono valutati in ordine di precedenza.  Le sottoespressioni
tra parentesi sono valutate prima e possono superare le regole di precedenza
di cui sopra.
.SH "COMANDI INCORPORATI DELLA SHELL"
.\" inizio dei comandi incorporati di bash
.zZ
.PD 0
.TP
\fB:\fP [\fIargomenti\fP]
.PD
Nessun effetto; il comando non fa nient'altro oltre l'espansione degli
.I argomenti
e l'effettuazione di ogni ridirezione specificata.
È ritornato un codice di uscita zero.
.TP
.PD 0
\fB .\| \fP \fInomefile\fP [\fIargomenti\fP]
.TP
\fBsource\fP \fInomefile\fP [\fIargomenti\fP]
.PD
Legge ed esegue comandi dal
.I nomefile
nell'ambiente di shell corrente e ritorna lo stato di uscita
dell'ultimo comando eseguito da
.IR nomefile .
Se
.I nomefile
non contiene uno slash, i percorsi in
.SM
.B PATH
sono usati per trovare la directory contenente
.IR nomefile .
Il file cercato in
.SM
.B PATH
non ha bisogno di essere eseguibile.  La ricerca è fatta nella
directory corrente se nessun file viene trovato in
.SM
.BR PATH .
Se sono forniti degli \fIargomenti\fP, essi diventano i
parametri posizionali quando \fInomefile\fP è eseguito.
Altrimenti i parametri posizionali sono inalterati.
Lo stato di ritorno è lo stato dell'ultimo comando terminato
dentro lo script (0 se nessun comando è eseguito), e falso se
.I namefile
non è trovato.
.TP
\fBalias\fP [\fInome\fP[=\fIvalore\fP] ...]
\fBAlias\fP senza argomenti stampa la lista degli alias nella forma
\fInome\fP=\fIvalore\fP sullo standard output.  Quando sono forniti
gli argomenti, è definito un alias per ogni \fInome\fP per cui è dato
il \fIvalore\fP.  Uno spazio finale in \fIvalore\fP provoca
il controllo della successiva parola per la sostituzione di alias quando
l'alias è espanso.  Per ogni \fInome\fP nella lista di argomenti per cui
nessun \fIvalore\fP è fornito, è stampato il nome e valore dell'alias.
\fBAlias\fP ritorna vero a meno che sia dato un \fInome\fP
per il quale nessun alias è stato definito.
.TP
\fBbg\fP [\fIjobspec\fP]
Pone \fIjobspec\fP in background, come se esso fosse stato avviato con
.BR & .
Se \fIjobspec\fP non è presente, è usata la nozione della shell di
\fIjob corrente\fP.
.B bg
.I jobspec
ritorna 0 a meno che sia eseguito quando il job control è disabilitato o,
con il job control abilitato, se \fIjobspec\fP non è stato trovato o è
stato avviato senza job control.
.TP
.PD 0
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] [\fB\-lvd\fP] [\fB-q\fP \fInome\fP]
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] \fB-f\fP \fInomefile\fP
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] \fIkeyseq\fP:\fInome-funzione\fP
.PD
Mostra le correnti associazioni di tasti e funzioni di
.BR readline ,
o associa una sequenza di tasti a una funzione o macro di
.BR readline .
La sintassi di associazione accettata è identica a quella di
.IR .inputrc ,
ma ciascuna associazione deve essere passata come argomento separato;
per esempio, '"\eC-x\eC-r": re\-read\-init\-file\'.
Le opzioni, se fornite, hanno i seguenti significati:
.RS
.PD 0
.TP
.B \-m \fIkeymap\fP
Use
.I keymap
come la mappa di tasti che deve essere influenzata dalle successive
associazioni. I nomi accettabili per
.I keymap
sono
\fIemacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move, vi-command\fP,
e
.IR vi-insert .
\fIvi\fP è equivalente a \fIvi-command\fP;
\fIemacs\fP è equivalente a \fIemacs-standard\fP.
.TP
.B \-l
Elenca i nomi di tutte le funzioni di \fBreadline\fP
.TP
.B \-v
Elenca i nomi delle funzioni correnti e le loro associazioni
.TP
.B \-d
Emette i nomi delle funzioni e loro associazioni in modo tale che possano
essere riletti
.TP
.B \-f \fInomefile\fP
Legge le associazioni dei tasti dal \fInomefile\fP
.TP
.B \-q \fIfunzione\fP
Chiede quali tasti chimano la \fIfunzione\fP indicata
.PD
.PP
Il valore di ritorno è 0 a meno che non sia data una opzione non
riconosciuta o sia avvenuto un errore.
.RE
.TP
\fBbreak\fP [\fIn\fP]
Esce dall'interno di un ciclo
.BR for ,
.BR while ,
o
.BR until .
Se \fIn\fP è specificato, interrompe \fIn\fP livelli.
.I n
deve essere \(>= 1.  Se
.I n
è più grande del numero di cicli racchiusi, tutti i cicli racchiusi
sono terminati.  Il valore di ritorno è 0 a meno che la shell non stia
eseguendo un ciclo quando
.B break
è eseguito.
.TP
\fBbuiltin\fP \fIcomando\-incorporato\fP [\fIargomenti\fP]
Esegue il comando incorporato specificato, passandogli gli
.IR argomenti ,
e ritorna il suo stato di uscita.
Questo è utile quando si desidera definire una funzione il cui nome è
lo stesso di un comando incorporato della shell, ma le funzionalità
del comando incorporato sono necessarie dentro la funzione stessa.
Il comando incorporato \fBcd\fP è comunemente ridefinito in questo modo.
Lo stato di ritorno è falso se
.I comando\-incorporato
non è un comando incorporato della shell.
.TP
\fBcd\fP [\fIdir\fP]
Cambia la directory corrente con \fIdir\fP.  La variabile
.SM
.B HOME
è il
.I dir
di default.
La variabile
.SM
.B CDPATH
definisce i percorsi di ricerca per le directory che contengano
.IR dir .
Nomi di directory alternative sono separate da un "due punti" (:).
Un nome di directory nullo in
.SM
.B CDPATH
è lo stesso della directory corrente, cioè, ``\fB.\fP''.
Se
.I dir
inizia con uno slash (/), allora
.SM
.B CDPATH
non è usato.  Un argomento
.B \-
è equivalente a
.SM
.BR $OLDPWD .
Il valore di ritorno è vero se la directory è stata cambiata con successo;
falso altrimenti.
.TP
\fBcommand\fP [\fB-pVv\fP] \fIcomando\fP [\fIarg\fP ...]
Esegue
.I comando
con gli
.I arg
sopprimendo la normale ricerca tra le funzione di shell.  Sono eseguiti
solo i comandi incorporati o comandi trovati in
.SM
.BR PATH .
Se è data l'opzione
.BR \-p ,
la ricerca di
.I comando
viene effettuata usando un valore di default per
.BR PATH ,
per il quale è garantito che siano trovate tutte le utility standard.
Se è fornita l'opzione
.B \-V
o
.BR \-v ,
viene stampata una descrizione di
.IR comando .
L'opzione
.B \-v
provoca la stampa di una singola parola che indica il comando o
il percorso completo usato per chiamare
.IR comando ;
l'opzione
.B \-V
produce una descrizione più completa.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
Se è fornita l'opzione
.B \-V
o
.BR \-v ,
lo stato di uscita è 0 se
.I comando
è stato trovato, e 1 se no.  Se nessuna delle due opzioni è fornita e
avviene un errore o
.I comando
non può essere trovato, lo stato di uscita è 127.  Altrimenti, lo stato
di uscita del comando incorporato
.B command
è lo stato di uscita di
.IR comando .
.TP
\fBcontinue\fP [\fIn\fP]
Riprende la successiva iterazione che contiene il ciclo
.BR for ,
.BR while ,
o
.BR until .
Se
.I n
è specificato, riprende all'\fIn\fP\-esima nidificazione del ciclo.
.I n
deve essere \(>= 1.  Se
.I n
è più grande del numero di cicli nidificati, riprende dall'ultimo ciclo
che racchiude (il ciclo a più alto livello).  Il valore di ritorno è 0
a meno che la shell non stia eseguendo un ciclo quando
.B continue
è eseguito.
.TP
.PD 0
\fBdeclare\fP [\fB\-frxi\fP] [\fInome\fP[=\fIvalore\fP]]
.TP
\fBtypeset\fP [\fB\-frxi\fP] [\fInome\fP[=\fIvalore\fP]]
.PD
Dichiara variabili e/o da loro degli attributi.  Se non è dato alcun
\fInome\fP, allora mostra i valori delle variabili.  Le opzioni possono
essere usate per restringere l'uscita alle sole variabili con gli attributi
specificati.
.RS
.PD 0
.TP
.B \-f
Usa solo nomi di funzioni
.TP
.B \-r
Rende \fInomi\fP accessibili in sola lettura.  A questi nomi non possono
quindi essere assegnati valori da successive istruzioni di assegnamento.
.TP
.B \-x
Marca \fInomi\fP per l'esportazione ai successivi comandi attraverso
l'ambiente.
.TP
.B \-i
La variabile è trattata come un intero; la valutazione aritmetica (si veda
.SM
.B "CALCOLO ARITMETICO" ") "
è effettuata quando alla variabile è assegnato un valore.
.PD
.PP
Usare `+' invece di `\-' mette a off gli attributi.
Quando usato in una funzione, rende \fInomi\fP locali, come con il comando
.BR local .
Il valore di ritorno è 0 a meno che non sia incontrata una opzione illegale,
sia fatto un tentativo di definire una funzione usando "-f foo=bar", uno dei
\fInomi\fP non è un nome legale di variabile di shell, e fatto un tentativo
di mettere a off lo stato di sola lettura per una variabile a sola lettura,
o è fatto un tentativo di mostrare una funzione non esistente con -f.
.RE
.TP
.B dirs [\fB-l\fP] [\fB+/\-n\fP]
Mostra la lista delle directory correntemente ricordate.
Le directory sono aggiunte alla lista con il comando
.BR pushd ;
il comando
.B popd
risale attraverso la lista.
.RS
.PD 0
.TP
.B +n
evidenzia l'\fIn\fP\-esima directory contando dalla sinistra della
lista mostrata da
.B dirs
quando è chiamato senza opzioni, partendo da zero.
.TP
.B \-n
evidenzia l'\fIn\fP\-esima directory contando dalla destra della
lista mostrata da
.B dirs
quando è chiamato senza opzioni, partendo da zero.
.TP
.B \-l
produce un elenco più lungo; il formato di default dell'elenco usa un 
carattere tilde per indicare la home directory.
.PD
.PP
Il valore di ritorno è 0 a meno che sia fornita una opzione illegale
o \fIn\fP indirizza oltre la fine dello stack delle directory.
.RE
.TP
\fBecho\fP [\fB\-neE\fP] [\fIarg\fP ...]
Emette gli \fIarg\fPs, separati da spazii.  Lo stato di ritorno è sempre 0.
Se è specificato \fB\-n\fP, il newline in coda è soppresso.
Se è data l'opzione \fB\-e\fP, viene abilitata l'interpretazione dei
successivi caratteri preceduti dal carattere di escape backslash.
L'opzione
.B \-E
disabilita l'interpretazione di questi caratteri di escape, perfino su
sistemi dove essi sono interpretati per default.
.RS
.PD 0
.TP
.B \ea
alert (campanello)
.TP
.B \eb
spazio indietro
.TP
.B \ec
sopprime il newline in coda 
.TP
.B \ef
avanzamento pagina
.TP
.B \en
nuova linea
.TP
.B \er
ritorno carrello
.TP
.B \et
tab orizzontale
.TP
.B \ev
tab verticale
.TP
.B \e\e
backslash
.TP
.B \ennn
il carattere il cui codice ASCII è \fInnn\fP (ottale)
.PD
.RE
.TP
\fBenable\fP [\fB\-n\fP] [\fB\-all\fP] [\fInome\fP ...]
Abilita e disabilita i comandi incorporati della shell.  Questo permette
l'esecuzione di un comando su disco che ha lo stesso nome di un comado
incorporato della shell senza dover specificare un percorso completo.
Se è usato \fB\-n\fP, ogni \fInome\fP è disabilitato; altrimenti,
\fInomi\fP sono abilitati.  Per esempio, per usare il programma
.B test
trovato attraverso il
.SM
.BR PATH ,
invece della versione incorporata nella shell, si digita ``enable -n test''.
Se nessun argomento è dato, viene stampata una lista di tutti i comandi
incorporati della shell abilitati.
Se è fornita solo \fB\-n\fP, viene stampata una lista di tutti i comandi
incorporati disabilitati.
Se è fornita solo \fB\-all\fP, la lista stampata include tutti i comandi
incorporati, con l'indicazione per ciascuno se è abilitato o no.
.B enable
accetta
.B \-a
come sinonimo per
.BR \-all .
Il valore di ritorno è 0 a meno che
.I nome
non è un comando incorporato della shell.
.TP
\fBeval\fP [\fIarg\fP ...]
Gli \fIarg\fP sono letti e concatenati insieme in un singolo comando.
Questo comando è quindi letto ed eseguito dalla shell, e il suo stato di
uscita è ritornato come valore del comando
.BR eval .
Se non vi è alcun
.IR arg ,
o vi sono solo argomenti nulli,
.B eval
ritorna vero.
.TP
\fBexec\fP [[\fB\-\fP] \fIcomando\fP [\fIargomenti\fP]]
Se
.I comando
è specificato, esso sostituisce la shell.  Nessun nuovo processo è creato.
Gli
.I argomenti
diventano gli argomenti per \fIcomando\fP.
Se il primo argomento è 
.BR \- ,
la shell pone un segno meno nello zeresimo arg passato al 
.IR comando .
Questo è ciò che fa login.  Se il file non può essere eseguito, per alcune
ragioni, una shell non interattiva termina, a meno che esista la variabile
di shell \fBno_exit_on_failed_exec\fP, nel qual caso essa ritorna fallimento.
Una shell interattiva ritorna fallimento se il file non può essere eseguito.
Se
.I comando
non è specificato, qualsiasi ridirezione ha effetto nella corrente shell,
e lo stato di ritorno è 0.
.TP
\fBexit\fP [\fIn\fP]
Causa l'uscita della shell con uno stato di uscita \fIn\fP.
Se
.I n
è omesso, lo stato di uscita è quello dell'ultimo comando eseguito.
Una trappola su
.SM
.B EXIT
è eseguita prima che la shell termini.
.TP
.PD 0
\fBexport\fP [\fB\-nf\fP\^] [\fInome\fP[=\fIparola\fP]] ...
.TP
.B export \-p
.PD
I
.I nomi
forniti sono marcati per esportazione automatica nell'ambiente dei
comandi successivamente eseguiti.  Se è data l' opzione
.BR \-f ,
i 
.I nomi
si riferiscono a funzioni.
Se non è dato alcun
.I nome
o se se è fornita l'opzione
.BR \-p ,
viene stampata una lista di tutti i nomi che sono esportati in questa shell.
L'opzione
.B \-n
provoca la rimozione della proprietà di esportazione dalle variabili indicate.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
.B export
ritorna una stato di uscita di 0 a meno che sia incontrata una opzione
illegale, uno dei \fInomi\fP non è un nome legale di variabile di shell,
o è fornita l'opzione
.B \-f
con un
.I nome
che non è una funzione.
.TP
.PD 0
\fBfc\fP [\fB\-e\fP \fInome\-editor\fP] [\fB\-nlr\fP] [\fIprimo\fP] [\fIultimo\fP]
.TP
\fBfc\fP \fB\-s\fP [\fIpat\fP=\fIrep\fP] [\fIcmd\fP]
.PD
Corregge un comando.  Nella prima forma, un intervallo di comandi da
.I primo
a
.I ultimo
è selezionata dalla lista della storia.
.I primo
e
.I ultimo
possono essere specificati come una stringa (per localizzare l'ultimo comando
che inizia con quella stringa) o come numero (un indice nella lista della
storia, dove un numero negativo è usato come offset dal numero del
comando corrente).  Se 
.I ultimo
non è specificato esso è posto al comando corrente, se per l'elencazione
(così che
.B fc \-l \-10
stampa gli ultimi 10 comandi), e a
.I primo
altrimenti.
Se
.I primo
non è specificato esso è posto al precedente comando, se per l'editing
e a \-16 per l'elencazione.
.sp 1
Il flag
.B \-n
sopprime i numeri dei comandi quando li elenca.
Il flag
.B \-r
inverte l'ordine dei comandi.
Se è dato il flag
.BR \-l ,
i comandi sono elencati sullo standard output.
Altrimenti, è chiamato l'editor indicato da
.I nome\-editor
su un file che contiene questi comandi.  Se
.I nome\-editor
non è dato, è usato il valore della variabile
.SM
.BR FCEDIT ,
o il valore di
.SM
.B EDITOR
se
.SM
.B FCEDIT
non è posta.  Se ne l'una ne l'altra variabile è posta, è usato
.FN vi .
Quando l'editing è completato, i comandi editati sono ribaditi ed eseguiti.
.sp 1
Nella seconda forma, \fIcomando\fP è rieseguito dopo che ogni instanza
di \fIpat\fP è sostituita da \fIrep\fP.
Un utile alias da usare con questo è ``r=fc \-s'',
così che digitare ``r cc'' esegue l'ultimo comando che inizia con ``cc''
e digitando ``r'' riesegue l'ultimo comando.
.sp 1
Se è usata la prima forma, il valore di ritorno è 0 a meno che sia
incontrata una opzione illegale o
.I primo
o
.I ultimo
specificano linee della storia fuori dall'intervallo.
Se è fornita l'opzione
.BR \-e ,
il valore di ritorno è il valore dell'ultimo
comando eseguito, o fallimento se avviene un errore con il file di
comandi temporanei.  Se è usata la seconda forma, lo stato di ritorno
è quello del comando rieseguito, a meno che
.I cmd
specifichi una linea di storia non valida, nel qual caso
.B fc
ritorna fallimento.
.TP
\fBfg\fP [\fIjobspec\fP]
Pone
.I jobspec
in foreground, e lo rende il job corrente.  Se
.I jobspec
non è presente, è usata la nozione della shell di \fIjob corrente\fP.
Il valore di ritorno è quello del comando posto in foreground,
o fallimento se eseguito quando il job control è disabilitato o, quando
eseguito con job control abilitato, se
.I jobspec
non specifica un job valido o
.I jobspec
specifica un job che era stato avviato senza job control.
.TP
\fBgetopts\fP \fIoptstring\fP \fInome\fP [\fIargs\fP]
.B getopts
è usato dalle procedure di shell per analizzare i parametri posizionali.
.I optstring
contiene le lettere delle opzioni che devono essere riconosciute; se una
lettera è seguita da un ":", l'opzione si aspetta di avere un
argomento, che dovrà essere separato da essa da spazi bianchi.
Ogni volta che è chiamata,
.B getopts
pone la successiva opzione nella variabile di shell
.IR nome ,
inizializzando
.I nome
se non esiste,
e l'indice del prossimo argomento che deve essere processato nella
variabile
.SM
.BR OPTIND .
.SM
.B OPTIND
è initializzato a 1 ogni volta che la shell o uno shell script
viene chiamato.  Quando una opzione richiede un argomento,
.B getopts
pone quell'argomento nella variabile
.SM
.BR OPTARG .
La shell non azzera
.SM
.B OPTIND
automaticamente; essa deve essere manualmente azzerata tra più
chiamate a
.B getopts
dentro la stessa esecuzione della shell, se deve essere usato un nuovo
insieme di parametri.
.sp 1
.B getopts
puo informare degli errori in due modi.  Se il primo carattere di
.I optstring
è un "due punti", è usata una informazione di errore
.IR silenzioza .
Nelle normali operationi i messaggi diagnostici sono stampati quando sono
incontrate opzioni illegali o mancano gli argomenti delle opzioni.
Se la variabile
.SM
.B OPTERR
è posta a 0, nessun messaggio di errore sarà mostrato, perfino se il
primo carattere di 
.I optstring
non è un "due punti".
.sp 1
Se è incontrata una opzione illegale,
.B getopts
pone ? nel
.I nome
e, se non silenziosa, stampa an messaggio di errore ed elimina
.SM
.BR OPTARG .
Se
.B getopts
è silenziosa, il carattere di opzione trovato è posto in
.SM
.B OPTARG
e nessun messaggio diagnostico è stampato.
.sp 1
Se un argomento richiesto non è trovato, e
.B getopts
non è silenziosa,
un punto interrogativo (\^\fB?\fP\^) è posto in
.IR nome ,
.B OPTARG
non è posto, ed è stampato un messaggio diagnostico.
Se
.B getopts
è silenzioza, allora un "due punti" (\^\fB:\fP\^) è posto in
.I nome
e
.SM
.B OPTARG
è posto al carattere di opzione trovato.
.sp 1
.B getopts
normamente analizza i parametri posizionali, ma se sono dati più argomenti in
.IR args ,
.BR getopts ,
invece, analizza questi.
.B getopts
ritorna vero se è trovata una opzione, specificata o non specificata.
Ritorna falso se è incontrata la fine delle opzioni o avviene un errore.
.TP
\fBhash\fP [\fB\-r\fP] [\fInome\fP]
Per ciascun
.IR nome ,
è determinato e ricordato il percorso completo del comando.
L'opzione
.B \-r
fa sì che la shell dimentichi tutte le locazioni ricordate.
Se nessun argomento è dato, è stampata l'informazione
circa i comandi ricordati.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
Lo stato di ritorno è vero a meno che un
.I nome
sia irreperibile o sia fornita una opzione illegale.
.TP
\fBhelp\fP [\fIpattern\fP]
Mostra utili informazioni sui i comandi incorporati.  Se
.I pattern
è specificato,
.B help
da un aiuto dettagliato su tutti i comandi che combaciano con
.IR pattern ;
altrimenti è stampata una lista dei comandi incorporati.
Lo stato di ritorno è 0 a meno che nessun comando combaci con
.IR pattern .
.TP
.PD 0
\fBhistory\fP [\fIn\fP]
.TP
\fBhistory\fP \fB\-rwan\fP [\fInomefile\fP]
.\".TP
.\"\fBhistory\fP \fB\-s\fP \fIargs\fP
.PD
Senza opzioni, mostra la lista della storia dei comandi
con i numeri di linea.  Le linee elencate con un 
.B *
sono state modificate.  Con argomento
.I n
elenca solo le ultime
.I n
linee.  Se è fornito un argomento non-opzione, esso è usato come
nome del file di storia; se no, è usato il valore di
.SM
.BR HISTFILE .
Le opzioni, se fornite, hanno i seguenti significati:
.RS
.PD 0
.TP
.B \-a
Aggiunge le ``nuove'' linee della storia (linee della storia inserite
dall'inizio della corrente sessione di \fBbash\fP) al file di storia
.TP
.B \-n
Inserisce le linee della storia non ancora lette dal file di storia, nella
corrente lista della storia.  Queste sono le linee aggiunte al file di
storia dall'inizio della corrente sessione di \fBbash\fP.
.TP
.B \-r
Legge il contenuto del file di storia e lo usa come storia corrente.
.TP
.B \-w
scrive la storia corrente sul file di storia, sovrascrivendo il contenuto
del file di storia.
.\".TP
.\".B \-s
.\"effettua la sostitusione della storia
.\"sui seguenti \fIargs\fP e mostra
.\"il risultato sullo standard output.
.PD
.PP
Il valore di ritorno è 0 a meno che sia incontrata una opzione illegale o
avvenga un errore mentre si legge o si scrive il file di storia.
.RE
.TP
.PD 0
\fBjobs\fP [\fB\-lnp\fP] [ \fIjobspec\fP ... ]
.TP
\fBjobs\fP \fB\-x\fP \fIcomando\fP [ \fIargs\fP ... ]
.PD
La prima forma elenca i job attivi.
L'opzione
.B \-l
elenca gli ID dei processi in aggiunta alle normali informazioni;
l'opzione
.B \-p
elenca solo l'ID del primo processo del gruppo di processi del job.
L'opzione
.B \-n
mostra solo i job che hanno cambiato stato dall'ultima notifica.  Se
.I jobspec
è dato, l'uscita è ristretta alle informazioni su quel job.
Lo stato di ritorno è 0 a meno che sia incontrata una opzione illegale
o sia fornito un
.I jobspec
illegale.
.sp 1
Se è fornita l'opzione
.BR \-x ,
.B jobs
sostituisce qualsiasi
.I jobspec
trovato in
.I comando
o
.I args
con il corrispondente ID del gruppo di processi, ed esegue
.I comando
passandogli
.IR args ,
e ritornando il suo stato di uscita.
.TP
.PD 0
\fBkill\fP [\fB-s sigspec\fP | \fB\-sigspec\fP] [\fIpid\fP | \fIjobspec\fP] ...
.TP
\fBkill\fP \fB\-l\fP [\fIsignum\fP]
.PD
Manda il segnale indicato da
.I sigspec
al processo indicato da
.I pid
o
.IR jobspec .
.I sigspec
è o un nome di segnale, come
.SM
.BR SIGKILL ,
o un numero di segnale.  Se
.I sigspec
è un nome di segnale, il nome è insensibile alle minuscole e maiuscole,
e può essere dato con o senza il prefisso
.SM
.BR SIG .
Se
.I sigspec
non è presente, si assume
.SM
.BR SIGTERM .
Un argomento
.B \-l
elenca i nomi dei segnali.  Se sono forniti degli argomenti quando è data
l'opzione
.BR \-l ,
sono elencati i nomi dei segnali specificati, e lo stato di ritorno è 0.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
.B kill
ritorna vero se almeno un segnale è stato mandato con successo, o falso
se avviene un errore o è incontrata una opzione illegale.
.TP
\fBlet\fP \fIarg\fP [\fIarg\fP ...]
Ogni
.I arg
è una espressione aritmetica che deve essere valuatata (si veda
.SM
.BR "CALCOLO ARITMETICO" ).
Se l'ultimo
.I arg
viene valutato 0,
.B let
ritorna 1; altrimenti è ritornato 0.
.TP
\fBlocal\fP [\fInome\fP[=\fIvalore\fP] ...]
Per ogni argomento, crea una variabile locale chiamata
.IR nome ,
e gli assegna
.IR valore .
Quando
.B local
è usato dentro una funzione, fa sì che la variabile
.I nome
abbia una visibilità ristretta a quella funzione e ai suoi figli.
Senza alcun operando,
.B local
scrive una lista di variabili locali sullo standard output.
È un errore usare
.B local
quando non si è dentro una funzione.  Lo stato di ritorno è 0 a meno che
.B local
sia usata fuori da una funzione, o è fornito un
.I nome
illegale.
.TP
.B logout
Termina una shell di login.
.TP
\fBpopd\fP [\fB+/\-n\fP]
Rimuove degli elementi dallo stack delle directory.  Senza argomenti,
rimuove la directory in cima allo stack, ed effettua un
.B cd
verso la nuova directory in cima allo stack.
.RS
.PD 0
.TP
.B +n
rimuove l'\fIn\fP\-esimo elemento contando dalla sinistra della lista
mostrata da
.BR dirs ,
partendo da zero.
Per esempio: ``popd +0'' rimuove la prima directory, ``popd +1'' la seconda.
.TP
.B \-n
rimuove l'\fIn\fP\-esimo elemento contando dalla destra della lista
mostrata da
.BR dirs ,
partendo da zero.
Per esempio: ``popd -0'' rimuove l'ultima directory, ``popd -1'' la penultima.
.PD
.PP
Se il comando
.B popd
ha successo, viene anche effettuato un
.BR dirs ,
e lo stato di ritorno è 0.
.B popd
ritorna falso se è incontrata una opzione illegale, lo stack delle
directory è vuoto, è specificato un elemento non esistente nello stack
delle directory, o il cambio di directory fallisce.
.RE
.TP
.PD 0
\fBpushd\fP [\fIdir\fP]
.TP
\fBpushd\fP \fB+/\-n\fP
.PD
Aggiunge una directory in cima allo stack delle directory, o ruota lo stack,
rendendo la corrente directory di lavoro la nuova cima dello stack.
Senza argomenti, scambia le due directory in cima e ritorna 0, a meno che
lo stack delle directory sia vuoto.
.RS
.PD 0
.TP
.B +n
Ruota lo stack così che la \fIn\fP\-esima directory
(contando dalla sinistra della lista mostrata da
.BR dirs )
vada in cima.
.TP
.B \-n
Ruota lo stack così che la \fIn\fP\-esima directory
(contando da destra) vada in cima.
.TP
.B dir
aggiunge
.I dir
in cima allo stack delle directory, rendendola la nuova
directory di lavoro corrente.
.PD
.PP
Se il comando
.B pushd
ha successo, viene anche effettuato un 
.BR dirs .
Se è usata la prima forma,
.B pushd
ritorna 0 a meno che il cd verso
.I dir
fallisca.  Con la seconda forma,
.B pushd
ritorna 0 a meno che lo stack delle directory sia vuoto, sia specificato
un elemento non esistente nello stack delle directory, o il cambiamento di
directory verso la nuova directory corrente specificata fallisca.
.RE
.TP
\fBpwd\fP
Stampa il percorso assoluto della corrente directory di lavoro.
Il percorso stampato non contiene alcun link simbolico, se è posta l'opzione
.B \-P
al comando incorporato
.B set
(si veda anche la descrizione di 
.B nolinks
sotto
.B Variabili di shell
sopra).  Lo stato di ritorno è 0 a meno che avvenga un errore mentre
si legge il percorso della directory corrente.
.TP
\fBread\fP [\fB\-r\fP] [\fInome\fP ...]
Una linea è letta dallo standard input, e la prima parola
è assegnata al primo
.IR nome ,
la seconda parola al secondo
.IR nome ,
e così via, con le parole rimaste assegnate all'ultimo
.IR nome .
Solo i caratteri in 
.SM
.B IFS
sono riconosciuti come delimitatori di parola.  Se non è fornito alcun
.IR nome ,
la linea letta è assegnata alla variabile
.SM
.BR REPLY .
Il codice di ritorno è zero, a meno che sia incontrata la fine del file.
Se è data l'opzione
.BR \-r ,
una coppia backslash-newline non è ignorata, e il backslash è considerato
essere parte della linea.
.TP
.PD 0
\fBreadonly\fP [\fB\-f\fP] [\fInome\fP ...]
.TP
\fBreadonly -p\fP
.PD
I
\fInomi\fP
dati sono marcati per sola lettura e i valori di questi
\fInomi\fP
non possono essere cambiati dagli assegnamenti successivi.
Se è fornita l'opzione
.BR \-f ,
sono così marcate le funzioni corrispondenti ai \fInomi\fP.
Se nessun argomento è dato, o se è fornita l'opzione
.BR \-p ,
viene stampata una lista di tutti i nomi a sola lettura.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
Lo stato di ritorno è 0 a meno che sia incontrata una opzione illegale,
uno dei \fInomi\fP non è un nome legale di variabile di shell, o sia
fornita l'opzione
.B \-f
con un
.I nome
che non è una funzione.
.TP
\fBreturn\fP [\fIn\fP]
Fa sì che una funzione esca con il valore di ritorno specificato da
.IR n .
Se 
.I n
è omesso, lo stato di ritorno è quello dell'ultimo comando
eseguito nel corpo della funzione.  Se usato fuori da una funzione,
ma durante l'esecuzione di un script tramite il comando
.B .
(\fBsorgente\fP), fa sì che la shell smetta di eseguire
quello script e ritorni o
.I n
o lo stato di uscita dell'ultimo comando eseguito dentro lo
script, come stato di uscita dello script.  Se usato fuori da una
funzione e non durante l'esecuzione di uno script per mezzo di \fB.\fP\^,
lo stato di ritorno è falso.
.TP
\fBset\fP [\fB\-\-abefhkmnptuvxldCHP\fP] [\fB-o\fP \fIopzione\fP] [\fIarg\fP ...]
.RS
.PD 0
.TP 8
.B \-a
Automaticamente marca le variabili, che sono modificate o create, per
l'esportazione verso l'ambiente dei comandi successivi.
.TP 8
.B \-b
Fa sì che lo stato di un job in background terminato venga riportato
immediatamente, piuttosto che prima del successivo prompt primario.
(Si veda anche
.B notify
sotto
.B Variabili di shell
precedentemente).
.TP 8
.B \-e
Esce immediatamente se un \fIcomando semplice\fP (si veda
.SM
.B GRAMMATICA DELLA SHELL
sopra) termina con uno stato diverso da zero.  La shell non esce se il
comando che fallisce è parte di un ciclo
.I until
o
.IR while ,
parte di una istruzione
.IR if ,
parte di una lista
.B &&
o
.BR \(bv\|\(bv ,
o se il valore di ritorno del comando è stato invertito per mezzo di
.BR ! .
.TP 8
.B \-f
Disabilita l'espansione di percorso.
.TP 8 
.B \-h
Localizza e ricorda i comandi funzione appena le funzioni sono definite.
Normalmente i comandi funzione sono cercati quando la funzione è eseguita.
.TP 8
.B \-k
Tutti gli argomenti delle parole chiave sono posti nell'ambiente per un
comando, non solo quelli che precedono il nome del comando.
.TP 8
.B \-m
Modo monitor.  Il job control è abilitato.  Questo flag è on
per default per le shell interattive, su sistemi che lo supportano (si veda
.SM
.B JOB CONTROL
sopra).  I processi in background girano in un gruppo di processi separato
e una linea che contiene il loro stato di uscita viene stampata
al loro completamento.
.TP 8
.B \-n
Legge i comandi ma non li esegue.  Questo può essere usato per controllare
uno shell script per errori di sintassi.  Questo è ignorato per le shell
interattive.
.TP 8
.B \-o \fInome-opzione\fP
Il \fInome-opzione\fP può essere uno dei seguenti:
.RS
.TP 8
.B allexport
Lo stesso di
.BR \-a .
.TP 8
.B braceexpand
La shell effettua l'espansione delle parentesi graffe (si veda
.B Espansione delle parentesi graffe
sopra).  Questo è on per default.
.TP 8
.B emacs
Usa una interfaccia di editing della linea di comando in stile emacs.
Questo è abilitato per default quando la shell è interattiva, a meno che
la shell sia avviata con l'opzione
.BR \-nolineediting .
.TP 8
.B errexit
Lo stesso di
.BR \-e .
.TP 8
.B histexpand
Lo stesso di
.BR \-H .
.TP 8
.B ignoreeof
L'effetto è lo stesso che se fosse stato eseguito il comando di shell
`IGNOREEOF=10' (si veda
.B Variabili di shell
sopra).
.TP 8
.B interactive\-comments
Permette che una parola che inizia con
.B #
causi che la parola e tutti i rimanenti caratteri su quella
linea siano ignorati in una shell interattiva (si veda
.SM
.B COMMENTI
sopra).
.TP 8
.B monitor
Lo stesso di
.BR \-m .
.TP 8
.B noclobber
Lo stesso di
.BR \-C .
.TP 8
.B noexec
Lo stesso di
.BR \-n .
.TP 8
.B noglob
Lo stesso di
.BR \-f .
.TP 8
.B nohash
Lo stesso di
.BR \-d .
.TP 8
.B notify
Lo stesso di
.BR \-b .
.TP 8
.B nounset
Lo stesso di
.BR \-u .
.TP 8
.B physical
Lo stesso di
.BR \-P .
.TP 8
.B posix
Cambia il comportamento di bash dove le operazioni di default differiscono
dallo standard Posix 1003.2 per farlo combaciare con lo standard.
.TP 8
.B privileged
Lo stesso di
.BR \-p .
.TP 8
.B verbose
Lo stesso di
.BR \-v .
.TP 8
.B vi
Usa una interfaccia di editing della linea di comando in stile vi.
.TP 8
.B xtrace
Lo stesso di
.BR \-x .
.PP
Se non è fornito alcun \fInome-opzione\fP, sono stampati i valori delle
opzioni correnti.
.RE
.TP 8
.B \-p
Attiva il modo
.IR privilegiato .
In questo modo, il file
.B $ENV
non è processato, e le funzioni di shell non sono ereditate dall'ambiente.
Questo è abilitato automaticamente all'avvio se l'id effettivo dell'utente
(gruppo) non è uguale all'id reale dell'utente (gruppo).
Disattivare questa opzione fa sì che l'id effettivo dell'utente e del gruppo
sia posto all'id reale dell'utente e del gruppo.
.TP 8
.B \-t
Esce dopo aver letto ed eseguito un comando.
.TP 8
.B \-u
Considera errore le variabili non impostate quando effettua
l'espansione di parametro.  Se l'espansione è tentata su una
variabile non impostata, la shell stampa un messaggio di errore e,
se non interattiva, esce con uno stato diverso da zero.
.TP 8
.B \-v
Stampa le linee in input alla shell appena sono lette.
.TP 8
.B \-x
Dopo l'espansione di ogni
.I comando semplice ,
.B bash
mostra il valore espanso di
.SM
.BR PS4 ,
seguito dal comando e dai suoi argomenti espansi.
.TP 8
.B \-l
Salva e ripristina l'associazione di \fInome\fP in un comando
\fBfor\fP \fInome\fP [\fBin\fP parola] (si veda
.SM
.B GRAMMATICA DELLA SHELL
sopra).
.TP 8
.B \-d
Disabilita l'hashing dei comandi che sono cercati per essere eseguiti.
Normalmente, i comandi sono ricordati in una tavola hash, e una volta
trovati, non devono essere più cercati.
.TP 8
.B \-C
L'effetto è lo stesso che se fosse stato eseguito il comando di shell
`noclobber=' (si veda
.B Variabili di shell
sopra).
.TP 8
.B \-H
Abilita la sostituzione della storia in stile
.BR ``!'' .
Questo flag è on per default quando la shell è interattiva.
.TP 8
.B \-P
Se posto, non segue i link simbolici quando esegue comandi che, come
.BR cd ,
cambiano la directory corrente.  È, invece, usata la directory fisica.
.TP 8
.B \-\-
Se nessun argomento segue questo flag, allora i parametri posizionali non
sono impostati.  Altrimenti, i parametri posizionali sono posti agli
\fIarg\fP, persino se alcuni di loro iniziano con un
.BR \- .
.TP 8
.B \-
Segnala la fine delle opzioni, e fa sì che tutti i rimanenti \fIarg\fPs
siano assegnati ai parametri posizionali.  Le opzioni
.B \-x
e
.B \-v
sono messe a off.
Se non vi è alcun \fIarg\fP, i parametri posizionali rimangono inalterati.
.PD
.PP
I flag sono messi a off per default salvo specificato diversamente.
Usare + piuttosto che \- causa che questi flag siano posti a off.
I flag possono anche essere specificati come opzioni in una chiamata
della shell.  Il corrente insieme di flag può essere trovato in
.BR $\- .
Dopo che gli argomenti opzione sono processati,
i rimanenti \fIn\fP \fIarg\fP sono trattati come valori per
i parametri posizionali e sono assegnati, in ordine, a 
.BR $1 ,
.BR $2 ,
.B ...
.BR $\fIn\fP .
Se non è fornita nessuna opzione o \fIarg\fP, sono stampate tutte
le variabili di shell.  Lo stato di ritorno è sempre vero a meno che
sia incontrata una opzione illegale.
.RE
.TP
\fBshift\fP [\fIn\fP]
I parametri posizionali da \fIn\fP+1 ... sono rinominati
.B $1
.B ....
I parametri rappresentati dai numeri \fB$#\fP
fino a \fB$#\fP\-\fIn\fP+1 non sono impostati.
Se
.I n
è 0, nessun parametro viene cambiato.
Se
.I n 
non è dato, è assunto essere 1.
.I n
deve essere un numero non negativo minore o uguale a \fB$#\fP.
Se
.I n
è più grande di \fB$#\fP, i parametri posizionali non sono cambiati.
Lo stato di ritorno è più grande di 0 se
.I n
è più grande di
.B $#
o minore di 0; altrimenti 0.
.TP
\fBsuspend\fP [\fB\-f\fP]
Sospende l'esecuzione di questa shell fino a che non riceve un segnale
.SM
.BR SIGCONT .
L'opzione
.B \-f
dice di non lamentarsi se questa è una shell di login; ma la sospende
comunque.  Lo stato di ritorno è 0 a meno che la shell sia una
shell di login e non è fornito
.BR \-f ,
o se il job control non è abilitato.
.TP
.PD 0
\fBtest\fP \fIexpr\fP
.TP
\fB[\fP \fIexpr\fP \fB]\fP
Ritorna uno stato di 0 (vero) o 1 (falso) dipendente dalla
valutazione della espressione condizionale
.IR expr .
Le espressioni possono essere unarie o binarie.
Le espressioni unarie sono spesso usate per esaminare lo stato di un file.
Vi sono operatori su stringa e anche operatori di comparazione numerica.
Ogni operatore e operando deve essere un argomento separato.
Se \fIfile\fP è della forma /dev/fd/\fIn\fP, allora è controllato il
descrittore di file \fIn\fP.
.RS
.PD 0
.TP
.B \-b \fIfile\fP
Vero se \fIfile\fP esiste ed è speciale a blocchi.
.TP
.B \-c \fIfile\fP
Vero se \fIfile\fP esiste ed è speciale a caratteri.
.TP
.B \-d \fIfile\fP
Vero se \fIfile\fP esiste ed è una directory.
.TP
.B \-e \fIfile\fP
Vero se \fIfile\fP esiste.
.TP
.B \-f \fIfile\fP
Vero se \fIfile\fP esiste ed è un file normale.
.TP
.B \-g \fIfile\fP
Vero se \fIfile\fP esiste ed è impostato il suo bit set-group-id.
.TP
.B \-k \fIfile\fP
Vero se \fIfile\fP ha il suo ``sticky'' bit impostato.
.TP
.B \-L \fIfile\fP
Vero se \fIfile\fP esiste ed è un link simbolico.
.TP
.B \-p \fIfile\fP
Vero se \fIfile\fP esiste ed è una pipe con nome.
.TP
.B \-r \fIfile\fP
Vero se \fIfile\fP esiste ed è leggibile.
.TP
.B \-s \fIfile\fP
Vero se \fIfile\fP esiste ed ha una grandezza maggiore di zero.
.TP
.B \-S \fIfile\fP
Vero se \fIfile\fP esiste ed è un socket.
.TP
.B \-t \fIfd\fP
Vero se
.I fd
è aperto su un terminale.
.TP
.B \-u \fIfile\fP
Vero se \fIfile\fP esiste ed è impostato il suo bit set-user-id.
.TP
.B \-w \fIfile\fP
Vero se \fIfile\fP esiste ed è scrivibile.
.TP
.B \-x \fIfile\fP
Vero se \fIfile\fP esiste ed è eseguibile.
.TP
.B \-O \fIfile\fP
Vero se \fIfile\fP esiste ed è posseduto dall'utente con l'id effettivo.
.TP
.B \-G \fIfile\fP
Vero se \fIfile\fP esiste ed è posseduto dal gruppo con l'id effettivo.
.TP
\fIfile1\fP \-\fBnt\fP \fIfile2\fP
Vero se \fIfile1\fP è più recente (rispetto alla data di modifica)
di \fIfile2\fP.
.TP
\fIfile1\fP \-\fBot\fP \fIfile2\fP
Vero se \fIfile1\fP è più vecchio di file2.
.TP
\fIfile1\fP \fB\-ef\fP \fIfile\fP
Vero se \fIfile1\fP e \fIfile2\fP sono sullo stesso dispositivo e hanno
lo stesso numero di inode.
.TP
.B \-z \fIstringa\fP
Vero se la lunghezza di \fIstringa\fP è zero.
.TP
.B \-n \fIstringa\fP
.TP
\fIstringa\fP
Vero se la lunghezza di
.I stringa
è diversa da zero.
.TP
\fIstringa1\fP \fB=\fP \fIstringa2\fP
Vero se le stringhe sono uguali.
.TP
\fIstringa1\fP \fB!=\fP \fIstringa2\fP
Vero se le stringhe non sono uguali.
.TP
.B ! \fIexpr\fP
Vero se
.I expr
è falso.
.TP
\fIexpr1\fP \-\fBa\fP \fIexpr2\fP
Vero se entrambe
.I expr1
E
.I expr2
sono vere.
.TP
\fIexpr1\fP \-\fBo\fP \fIexpr2\fP
Vero se o
.I expr1
O
.I expr2
è vera.
.TP
.I arg1 \fBOP\fP arg2
.SM
.B OP
è uno tra
.BR \-eq ,
.BR \-ne ,
.BR \-lt ,
.BR \-le ,
.BR \-gt ,
o
.BR \-ge .
Questi operatori aritmetici binari ritornano vero se \fIarg1\fP è,
rispettivamente, uguale, non uguale, minore, minore o uguale, maggiore,
o maggiore o uguale ad \fIarg2\fP.
.I Arg1
e
.I arg2
possono essere interi positivi, interi negativi, o la speciale
espressione \fB\-l\fP \fIstringa\fP, che calcola la lunghezza di
.IR stringa .
.PD
.RE
.TP
.B times
Stampa i tempi accumulati in user e system per la shell e per i processi
eseguiti dalla shell.  Lo stato di ritorno è 0.
.TP
\fBtrap\fP [\fB\-l\fP] [\fIarg\fP] [\fIsigspec\fP]
Il comando
.I arg
dovrà essere letto e eseguito quando la shell riceve il segnale(i)
.IR sigspec .
Se
.I arg
è assente o
.BR \- ,
tutti i segnali specificati sono riportati al loro valore originale
(i valori che essi avevano al momento dell'ingresso nella shell).
Se 
.I arg
è la stringa nulla questo segnale è ignorato dalla shell e dai
comandi che essa lancia.
.I sigspec
è o un nome di segnale definito in <\fIsignal.h\fP>, o un numero di segnale. 
Se
.I sigspec
è
.SM
.B EXIT
(0) il comando
.I arg
è eseguito all'uscita della shell.
Senza argomenti,
.B trap
stampa la lista di comandi associati con ciascun numero di segnali.
L'opzione
.B \-l
fa sì che la shell stampi una lista di nomi di segnali e i loro numeri
corrispondenti.  Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
I segnali ignorati al momento dell'ingresso della shell non possono
essere intercettati o resettati.
I segnali intercettati sono riportati al loro valore originale in un
processo figlio quando esso è creato.
Lo stato di ritorno è falso se o il nome o il numero della trappola non è
valido; altrimenti
.B trap
ritorna vero.
.TP
\fBtype\fP [\fB\-all\fP] [\fB\-type\fP | \fB\-path\fP] \fInome\fP [\fInome\fP ...]
Senza opzioni, indica come dovrà essere interpretato ciascun
.I nome
se usato come un nome di comando.
Se è usato il flag
.BR \-type ,
.B type
stampa una frase che è una fra
.IR alias ,
.IR keyword ,
.IR function ,
.IR builtin ,
o
.I file 
se
.I nome
è, rispettivamente un alias, una parola riservata della shell,
una funzione, un comando incorporato, o un file su disco.
Se il nome non è trovato, allora non è stampato nulla,
ed è ritornato uno stato di uscita di falso.
Se è usato il flag
.BR \-path ,
.B type
ritorna o il nome del file su disco che dovrebbe essere eseguito se
.I nome
fosse specificato come un nome di comando, o nulla se
.B \-type
non avrebbe ritornato
.IR file .
Se un comando è nella tavola hash,
.B \-path
stampa il valore hash, non necessariamente il file che appare per primo in 
.SM
.BR PATH .
Se è usato il flag
.BR \-all , 
.B type
stampa tutti i posti che contengono un eseguibile chiamato 
.IR nome .
Questo include alias e funzioni, se e solo se non è usato anche il flag
.BR \-path .
La tavola hash dei comandi non è consultata quando si usa
.BR \-all .
.B type
accetta
.BR \-a ,
.BR \-t ,
e
.B \-p
in luogo di
.BR \-all ,
.BR \-type ,
e
.BR \-path ,
rispettivamente.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
.B type
ritorna vero se uno qualsiasi degli argomenti viene trovato, falso se
non ne è trovato nessuno.
.TP
\fBulimit\fP [\fB\-SHacdfmstpnuv\fP [\fIlimite\fP]]
.B Ulimit
fornisce il controlo sulle risorse disponibili per la shell e per i
processi avviati da essa, sui sistemi che permettono un tale controllo.
Il valore di
.I limite
può essere un numero nell'unità specificata per la risorsa, o il valore
.BR unlimited .
Le opzioni \fBH\fP e \fBS\fP specificano che viene impostato
il limite hard o limite soft per la data risorsa.
Un limite hard non può essere aumentato una volta che è impostato;
un limite soft può essere aumentato fino al valore del limite hard.
Se non è specificato ne \fBH\fP ne \fBS\fP, il comando applica
il limite soft.  Se
.I limite
è omesso, viene stampato il valore corrente del limite soft della risorsa,
a meno che sia data l'opzione \fBH\fP.  Quando è specificata più di una
risorsa, il nome del limite e l'unità vengono stampati prima del valore.
Le altre opzioni sono interpretate come segue:
.RS
.PD 0
.TP
.B \-a
sono riportati tutti i limiti correnti
.TP
.B \-c
la grandezza massima dei file core creati
.TP
.B \-d
la grandezza massima del segmento dati di un processo
.TP
.B \-f
la grandezza massima dei file creati dalla shell
.TP
.B \-m
la grandezza massima della memoria occupata.
.TP
.B \-s
la grandezza massima dello stack
.TP
.B \-t
il massimo quantitativo di tempo di cpu in secondi
.TP
.B \-p
la grandezza della pipe in blocchi da 512 byte (questo non può essere cambiato)
.TP
.B \-n
il numero massimo di descrittori di file aperti (la maggior parte dei sistemi
non permette che questo valore sia impostato, ma solo mostrato)
.TP
.B \-u
il numero massimo di processi disponibili per un singolo utente
.TP
.B \-v
Il massimo ammontare di memoria virtuale disponibile per la shell
.PD
.PP
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.  Se
.I limite
è dato, esso è il nuovo valore della risorsa specificata (l'opzione 
.B \-a
è solo per visualizzazione).
Se nessuna opzione è data, allora è assunta
.BR \-f .
I valori sono in multipli di 1024 byte, tranne che per
.BR \-t ,
che è in secondi,
.BR \-p ,
che è in unità di blocchi da 512 byte,
e
.B \-n
e
.BR \-u ,
che sono numeri senza unità.  Lo stato di ritorno è 0
a meno che sia incontrata una opzione illegale, è fornito come \fIlimite\fP
un argomento non numerico diverso da \fBunlimited\fP, o avvenga un errore
mentre si imposta un nuovo limite.
.RE
.TP
\fBumask\fP [\fB\-S\fP] [\fImodo\fP]
La maschera di creazione dei file dell'utente è posta a 
.IR modo .
Se
.I modo
inizia con una cifra, esso è interpretato come numero ottale;
altrimenti è interpretato come un modo di maschera simbolico
simile a quello accettato da
.IR chmod (1).
Se
.I modo
è omesso, o se è fornita l'opzione
.BR \-S ,
viene stampato il valore corrente della maschera.
L'opzione
.B \-S
fa sì che la maschera venga stampata in formato simbolico;
l'uscita di default è un numero ottale.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
Lo stato di ritorno è 0 se il modo è stato cambiato con successo o se
nessun argomento \fImodo\fP era stato fornito, e falso altrimenti.
.TP
\fBunalias\fP [\-\fBa\fP] [\fInome\fP ...]
Rimuove \fInome\fP dalla lista degli alias definiti.  Se è fornita
.BR \-a ,
sono rimosse tutte le definizioni di alias.
Il valore di ritorno è vero a meno che un
.I nome
fornito non è un alias già definito.
.TP
\fBunset\fP [\-\fBfv\fP] [\fInome\fP ...]
Per ciascun
.IR nome ,
rimuove la corrispondente variabile o, se è data l'opzione
.BR \-f ,
funzione.
Un argomento
.B \-\-
disabilita il controllo delle opzioni per il resto degli argomenti.
È da notare che
.SM
.BR PATH ,
.SM
.BR IFS ,
.SM
.BR PPID ,
.SM
.BR PS1 ,
.SM
.BR PS2 ,
.SM
.BR UID ,
e
.SM
.B EUID
non possono essere rimosse.  Se una qualsiasi fra
.SM
.BR RANDOM ,
.SM
.BR SECONDS ,
.SM
.BR LINENO ,
o
.SM
.B HISTCMD
è rimossa, perde la sua speciale proprietà, persino se essa viene
successivamente ripristinata.  Lo stato di uscita è vero a meno che un
.I nome
è inesistente o è "non impostabile".
.TP
\fBwait\fP [\fIn\fP]
Aspetta la terminazione del processo specificato e ritorna il suo
stato di uscita.
.I n
può essere un ID di processo o una specificazione di job;
se è data una specificazione di job, si aspetta la terminazione
di tutti i processi nella pipeline di quel job.  Se
.I n
non è dato, si aspetta la terminazione di tutti i processi figli
correntemente attivi, e lo stato di ritorno è zero.  Se
.I n
specifica un processo o job non esistente, lo stato di ritorno è 127.
Altrimenti, lo stato di ritorno è lo stato di uscita dell'ultimo
processo o job per cui si era in attesa del termine.
.\" bash_builtins
.if \n(zZ=1 .ig zZ
.SH INVOCAZIONE
Una \fIshell di login\fP è una il cui primo carattere dell'argomento zero
è un
.BR \- ,
o una avviata con il flag
.BR \-login .
.PP
Una shell \fIinterattiva\fP è una i cui standard input e output sono
entrambi connessi ai terminali (come determinato da
.IR isatty (3)),
o una avviata con l'opzione
.BR \-i .
.SM
.B PS1
è impostato e
.B $\-
include
.B i
se
.B bash
è interattiva, permettendo a uno script di shell o un file di
inizializzazione di controllare questo stato.
.PP
.nf
Shell di login:
  Alla login (dipendentemente dalla opzione \fB\-noprofile\fP):
        se \fI/etc/profile\fP esiste, lo legge.

        se \fI~/.bash_profile\fP esiste, lo legge,
          altrimenti se \fI~/.bash_login\fP esiste, lo legge,
            altrimenti se \fI~/.profile\fP esiste, lo legge.

  All'uscita:
        se \fI~/.bash_logout\fP esiste, lo legge.

Shell interattiva non di login:
  Alla partenza (dipendentemente dalle opzioni \fB\-norc\fP e \fB\-rcfile\fP):
        se \fI~/.bashrc\fP esiste, lo legge.

Shell non interattiva:
  Alla partenza:
        se la variabile di ambiente \fBENV\fP non è nulla, la espande
        e legge il file che indica, come se fosse stato eseguito,
        il comando
                if [ "$ENV" ]; then . $ENV; fi
        ma non usa \fBPATH\fP per cercare il percorso del nome.
        Quando non è avviata in modo Posix, bash
        guarda \fBBASH_ENV\fP prima di \fBENV\fP.
.PP
.fi
.PP
Se Bash è chiamata come
.BR sh ,
prova a imitare il comportamento di
.B sh
nel modo più vicino possibile.
Per una shell di login, essa tenta di leggere solo
.I /etc/profile
e
.IR ~/.profile ,
in questo ordine.  L'opzione 
.B \-noprofile
può anche essere usata per disabilitare questo comportamento.
Una shell invocata come 
.B sh
non tenta di leggere nessun altro file di inizializzazione.
.PP
Quando
.B bash 
è avviata in modo
.IR posix ,
come con l'opzione
.B \-posix
sulla linea di comando, essa segue lo standard Posix per i
file di inizializzazione.  In questo modo, la variabile 
.B ENV
è espansa e quel file letto;
nessun altro file di inizializzazione viene letto.
.SH "SI VEDA ANCHE"
.PD 0
.TP
\fIBash Features\fP, Brian Fox e Chet Ramey
.TP
\fIThe Gnu Readline Library\fP, Brian Fox e Chet Ramey
.TP
\fIThe Gnu History Library\fP, Brian Fox e Chet Ramey
.TP
\fIA System V Compatible Implementation of 4.2\s-1BSD\s+1 Job Control\fP, David Lennert
.TP
\fIPortable Operating System Interface (POSIX) Part 2: Shell e Utilities\fP, IEEE
.TP
\fIsh\fP(1), \fIksh\fP(1), \fIcsh\fP(1)
.TP
\fIemacs\fP(1), \fIvi\fP(1)
.TP
\fIreadline\fP(3)
.PD
.SH FILE USATI
.PD 0
.TP
.FN /bin/bash
The \fBbash\fP eseguibile
.TP
.FN /etc/profile
Il file di inizializzazione generale per il sistema,
eseguito per le shell di login
.TP
.FN ~/.bash_profile
Il file di inizializzazione personale, eseguito per le shell di login
.TP
.FN ~/.bashrc
Il file di inizializzazione individuale per shell interattiva
.TP
.FN ~/.inputrc
Il file di inizializzazione individuale per \fIreadline\fP
.PD
.SH AUTORI
.RS
Brian Fox, Free Software Foundation (primo autore)
.br
bfox@ai.MIT.Edu
.PP
Chet Ramey, Case Western Reserve University
.br
chet@ins.CWRU.Edu
.SH NOTIFICA DEI BUG
Se trovate un bug in
.B bash,
dovreste renderlo noto, ma prima, dovreste assicurarvi che esso è
veramente un bug, e che appare nella versione più recente di
.B bash
che voi avete.
.PP
Una volta che avete determinato che vi è realmente un bug, inviate per
posta un rapporto sul bug a \fIbash\-maintainers\fP@\fIprep.ai.MIT.Edu\fP.
Se avete una correzione, siete invitati a inviare anche quella!
Suggerimenti e rapporti su bug "filosofici" possono essere inviati
a \fPbug-bash\fP@\fIprep.ai.MIT.Edu\fP o inviati al newsgroup su Usenet
.BR gnu.bash.bug .
.PP
TUTTI i rapporti su bug dovranno includere:
.PP
.PD 0
.TP 20
Il numero di versione di \fBbash\fR
.TP
L'hardware e il sistema operativo
.TP
Il compilatore usato per compilare
.TP
Una descrizione del comportamento del bug
.TP
Uno corto script o "ricetta" che manifesti il bug
.PD
.PP
Commenti e rapporti su bug riguardo a questa
pagina di manuale dovranno essere indirizzati a
.I chet@ins.CWRU.Edu
(per la traduzione italiana, a
.IR augusto@comune.modena.it ).
.SH BUG NOTI
.PP
È troppo grande e troppo lenta.
.PP
Vi sono alcune sottili differenze tra 
.B bash
e le versioni tradizionali di
.BR sh ,
soprattutto per via delle specifiche
.SM
.B POSIX
.
.PP
Gli alias lasciano perplessi in alcuni usi.
.zZ
