diff -r -u linux/drivers/isdn/isdn_common.c linux-2.0.4p/drivers/isdn/isdn_common.c
--- linux/drivers/isdn/isdn_common.c	Wed Jul 10 10:46:06 1996
+++ linux-2.0.4p/drivers/isdn/isdn_common.c	Mon Jul  1 17:16:25 1996
@@ -1177,8 +1177,9 @@
 		cfg.p_encap = p->local.p_encap;
 		cfg.secure = (p->local.flags & ISDN_NET_SECURE) ? 1 : 0;
 		cfg.callback = (p->local.flags & ISDN_NET_CALLBACK) ? 1 : 0;
-		cfg.chargehup = (p->local.hupflags & 4) ? 1 : 0;
-		cfg.ihup = (p->local.hupflags & 8) ? 1 : 0;
+		cfg.chargehup = (p->local.hupflags & ISDN_CHARGEHUP) ? 1 : 0;
+		cfg.ihup = (p->local.hupflags & ISDN_INHUP) ? 1 : 0;
+		cfg.chargeint = p->local.chargeint;
 		memcpy_tofs(dest, p->local.name, 10);
 		dest += 10;
 		memcpy_tofs(dest, (char *) &cfg, sizeof(cfg));
diff -r -u linux/drivers/isdn/isdn_net.c linux-2.0.4p/drivers/isdn/isdn_net.c
--- linux/drivers/isdn/isdn_net.c	Wed Jul 10 10:46:06 1996
+++ linux-2.0.4p/drivers/isdn/isdn_net.c	Mon Jul  1 17:25:25 1996
@@ -247,15 +247,27 @@
                         anymore = 1;
 			l->huptimer++;
 			if ((l->onhtime) && (l->huptimer > l->onhtime))
-				if (l->outgoing) {
-					if (l->hupflags & 4) {
-						if (l->hupflags & 1)
+				if (l->hupflags & ISDN_MANCHARGE &&
+					l->hupflags & ISDN_CHARGEHUP) {
+					while (jiffies - l->chargetime > l->chargeint)
+						l->chargetime += l->chargeint;
+					if (jiffies - l->chargetime >= l->chargeint - 2*HZ)
+						if (l->outgoing || l->hupflags & ISDN_INHUP)
+							isdn_net_hangup (&p->dev);
+				}
+				else if (l->outgoing) {
+					if (l->hupflags & ISDN_CHARGEHUP) {
+						if (l->hupflags & ISDN_WAITCHARGE) {
+							printk ("isdn: Hupflags are %X\n", l->hupflags);
 							isdn_net_hangup(&p->dev);
-						else if (jiffies - l->chargetime > l->chargeint)
+						}
+						else if (jiffies - l->chargetime > l->chargeint) {
+							printk ("isdn: chargetime = %d, chargeint = %d\n", l->chargetime, l->chargeint);
 							isdn_net_hangup(&p->dev);
+						}
 					} else
 						isdn_net_hangup(&p->dev);
-				} else if (l->hupflags & 8)
+				} else if (l->hupflags & ISDN_INHUP)
 					isdn_net_hangup(&p->dev);
 		}
 		p = (isdn_net_dev *) p->next;
@@ -364,6 +376,7 @@
                                                  * we correct the timestamp here.
                                                  */
                                                 lp->chargetime = jiffies;
+						printk("isdn: set chargetime to %d\n", lp->chargetime);
                                                 /* Immediately send first skb to speed up arp */
                                                 if (lp->first_skb) {
                                                         if (!(isdn_net_xmit(&p->dev,lp,lp->first_skb)))
@@ -385,13 +398,14 @@
 				 * usage by isdn_net_autohup()
 				 */
 				lp->charge++;
-				if (lp->hupflags & 2) {
-					lp->hupflags &= ~1;
+				if (lp->hupflags & ISDN_HAVECHARGE) {
+					lp->hupflags &= ~ISDN_WAITCHARGE;
 					lp->chargeint = jiffies - lp->chargetime - (2 * HZ);
 				}
-				if (lp->hupflags & 1)
-					lp->hupflags |= 2;
+				if (lp->hupflags & ISDN_WAITCHARGE)
+					lp->hupflags |= ISDN_HAVECHARGE;
 				lp->chargetime = jiffies;
+				printk ("Got Chargeinf: set chargetime to %d\n", lp->chargetime);
 				return 1;
                 }
 	}
@@ -477,8 +491,13 @@
 			cmd.arg = p->local.isdn_channel;
 			p->local.huptimer = 0;
 			p->local.outgoing = 1;
-			p->local.hupflags |= 1;
-                        p->local.hupflags &= ~2;
+			if (p->local.chargeint) {
+                            p->local.hupflags |= ISDN_HAVECHARGE;
+                            p->local.hupflags &= ~ISDN_WAITCHARGE;
+                        } else {
+			    p->local.hupflags |= ISDN_WAITCHARGE;
+                            p->local.hupflags &= ~ISDN_HAVECHARGE;
+			}
 			if (!strcmp(p->local.dial->num, "LEASED")) {
 				p->local.dialstate = 4;
 				printk(KERN_INFO "%s: Open leased line ...\n", p->local.name);
@@ -1759,8 +1778,8 @@
 					p->local.dtimer = 0;
 					p->local.outgoing = 0;
 					p->local.huptimer = 0;
-					p->local.hupflags |= 1;
-                                        p->local.hupflags &= ~2;
+					p->local.hupflags |= ISDN_WAITCHARGE;
+                                        p->local.hupflags &= ~ISDN_HAVECHARGE;
 #ifdef CONFIG_ISDN_PPP
 					if (lp->p_encap == ISDN_NET_ENCAP_SYNCPPP)
 						if (isdn_ppp_bind(lp) < 0) {
@@ -1929,7 +1948,7 @@
 	netdev->local.l3_proto = ISDN_PROTO_L3_TRANS;
 	netdev->local.slavedelay = 10 * HZ;
 	netdev->local.srobin = &netdev->dev;
-	netdev->local.hupflags = 8;	/* Do hangup even on incoming calls */
+	netdev->local.hupflags = ISDN_INHUP; /* Do hangup even on incoming calls */
 	netdev->local.onhtime = 10;	/* Default hangup-time for saving costs
 					   of those who forget configuring this */
 	netdev->local.dialmax = 1;
@@ -2095,13 +2114,17 @@
                                 break;
                 }
 		if (cfg->chargehup)
-			p->local.hupflags |= 4;
+			p->local.hupflags |= ISDN_CHARGEHUP;
 		else
-			p->local.hupflags &= ~4;
+			p->local.hupflags &= ~ISDN_CHARGEHUP;
 		if (cfg->ihup)
-			p->local.hupflags |= 8;
+			p->local.hupflags |= ISDN_INHUP;
 		else
-			p->local.hupflags &= ~8;
+			p->local.hupflags &= ~ISDN_INHUP;
+		if (cfg->chargeint > 10) {
+			p->local.hupflags |= ISDN_CHARGEHUP | ISDN_HAVECHARGE | ISDN_MANCHARGE;
+			p->local.chargeint = cfg->chargeint * HZ;
+		}
 		if (cfg->p_encap != p->local.p_encap) {
                         if (cfg->p_encap == ISDN_NET_ENCAP_RAWIP) {
                                 p->dev.hard_header         = NULL;
@@ -2159,6 +2182,8 @@
                 cfg->cbdelay = p->local.cbdelay;
                 cfg->dialmax = p->local.dialmax;
 		cfg->slavedelay = p->local.slavedelay / HZ;
+		cfg->chargeint = (p->local.hupflags & ISDN_CHARGEHUP) ?
+				(p->local.chargeint / HZ) : 0;
 		cfg->pppbind = p->local.pppbind;
 		if (p->local.slave)
 			strcpy(cfg->slave, ((isdn_net_local *) p->local.slave->priv)->name);
diff -r -u linux/drivers/isdn/isdn_net.h linux-2.0.0/drivers/isdn/isdn_net.h
--- linux/drivers/isdn/isdn_net.h	Sun Apr 21 10:56:14 1996
+++ linux-2.0.0/drivers/isdn/isdn_net.h	Mon Jul  1 17:16:26 1996
@@ -29,6 +29,13 @@
  *
  */
 
+                      /* Definitions for hupflags: */
+#define ISDN_WAITCHARGE  1    /* did not get a charge info yet */
+#define ISDN_HAVECHARGE  2    /* We know a charge info */
+#define ISDN_CHARGEHUP   4    /* We want to use the charge mechanism */
+#define ISDN_INHUP       8    /* Even if incoming, close after huptimeout */
+#define ISDN_MANCHARGE  16    /* Charge Interval manually set */
+
 extern char*         isdn_net_new(char *, struct device *);
 extern char*         isdn_net_newslave(char *);
 extern int           isdn_net_rm(char *);
diff -r -u linux/include/linux/isdn.h linux-2.0.4p/include/linux/isdn.h
--- linux/include/linux/isdn.h	Wed Jul 10 10:46:32 1996
+++ linux-2.0.4p/include/linux/isdn.h	Mon Jul  8 00:46:27 1996
@@ -194,6 +194,7 @@
   int  callback;     /* Flag: Callback                        */
   int  cbhup;        /* Flag: Reject Call before Callback     */
   int  pppbind;      /* ippp device for bindings              */
+  int  chargeint;    /* Use fixed charge interval length      */
 } isdn_net_ioctl_cfg;
 
 #ifdef __KERNEL__
@@ -353,6 +354,7 @@
 				       /* bit0: chargeint is invalid       */
 				       /* bit1: Getting charge-interval    */
                                        /* bit2: Do charge-unit-hangup      */
+                                       /* bit3: Do hangup even on incoming */
   int                    outgoing;     /* Flag: outgoing call              */
   int                    onhtime;      /* Time to keep link up             */
   int                    chargeint;    /* Interval between charge-infos    */
