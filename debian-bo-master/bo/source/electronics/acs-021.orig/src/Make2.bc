#$Id: Make2.bc,v 11.33 96/03/21 19:49:29 al Exp $
# Part 2 of makefile for Borland C++ 3.1
# also believed to work with 4.0 in real mode
#------------------------------------------------------------------------
# Large model (1 meg, 64k pointer arithmetic)
STARTFILE = c0l
CCFLAGS = -ml -w -w-use -w-lvc -w-sig -w-inl -P -O2 \
-DMSDOS -DNDEBUG -DBAD_BOOL -DNoAbsConsT -DComTemP -DPedTemP
# if you have trouble, try checking for stack overflow (-N)
# cost is about 2 transistors, negligible speed penalty
# and try compiling some modules without -DNDEBUG, to enable the asserts
# Don't try them all because you will get more than 64k data
# If stack overflow is a problem, increase it in md_msdos.cc
# it seems to be ok with 11k, not with 10k for "runsmall" tests.
# as supplied it is set to 15k to allow 4k margin

# Some warnings are turned off due to compiler problems:
# -w-use -- Identifier is declared but never used
#	would report constants in header files
# -w-lvc -- Temporary used for parameter ...
#	Borland's complex class does not comform to standards
#	arguments are not const where they should be
# -w-sig -- Conversion may lose significant digits
#	would warn on assigning pointer difference to int
#	non-issue because ptr arithmetic is only valid within same object
#	which always has size that can be stored in an int.
# -w-inl -- Functions containing identifier are not expanded inline.
#	would warn when there is a loop in an inline function
#	some inlines are necessary because of template problems elsewhere
# -w-eas -- Assigning type to enum
#	common case is assigning int to bool, but logic ops return int
# -w-bei -- Initializing enum with type
#	common case is initializing bool with int, but logic ops return int

# use fp87 if you know you have the coprocessor.
#LIBS = fp87.lib mathl.lib cl.lib
# use emu if you are not sure.  
# minimal speed penalty if you have it. 8x slower if you don't.
LIBS = emu.lib mathl.lib cl.lib

# Huge model appears to offer no advantages (1 meg, full pointer arith.)
#------------------------------------------------------------------------
# Note that object file extension is .o not .obj for compatiblility
# with unix versions.  "make makefiles" fixes it.
#------------------------------------------------------------------------
CCC = bcc
.cc.o:
	$(CCC) $(CCFLAGS) -c $&.cc
.SUFFIXES: .o .cc 
#------------------------------------------------------------------------
acs.exe: $(OBJS) plotibm.o
	tlink @&&!
$(STARTFILE) $**
$*
$*
$(LIBS)
!
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
