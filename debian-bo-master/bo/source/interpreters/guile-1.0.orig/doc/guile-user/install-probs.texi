@c \input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile_user.info
@settitle Guile User Manual
@c %**end of header


@node Bug reports and hackarounds for various Guile releases, Concept Index, Where to find more Guile/scheme resources, Top
@appendix Bug reports and hackarounds for various Guile releases
@cindex installation problems

Note: this is the r0 release I picked up on April 12 1996; I am not
clued in to the release nomenclature, but I thought it was important to
call it r0.3 because version r0 has changed around a few times already.

Other note: the guile-1.0b0 is a version I got from Tom Lord on
1996/04/22.  It has diverged significantly from guile-r0.3, and I am now
experimenting with it.


@menu
* Installation problems with guile-r1.0::  
* Installation problems with guile-1.0b0::  
* Installation problems with guile-r0.3::  
* Execution problems with guile-r0.3::  
@end menu

@node Installation problems with guile-r1.0, Installation problems with guile-1.0b0, Bug reports and hackarounds for various Guile releases, Bug reports and hackarounds for various Guile releases
@section Installation problems with guile-r1.0
@cindex release r1.0

Anthony Green (green@@cygnus.com) made me this snapshot on June 20th.

I first installed with no special options: ./configure --prefix=/packages

@itemize @bullet
@item
Why do we still have a top-level html directory?  And 2 bizarre top-level
files?

@item
There is an overall problem due to *my* manuals: I removed the @@top
directive and all is fine.  I have fixed this in the the master source
too.

@item
Linux compilation went fine.

@item
SunOS 4.1.4 went fine, but threads/libthreads.a gives a warning that it
has not been "ranlib"ed.  @emph{Hackaround:} either do nothing, or do
@code{cd threads; ranlib libthreads.a; cd ..}.

@item
Problems come up with both platforms when you link to
@file{libguile.a}.  These have been reported before, and I thought they
were fixed.  In gnudl, for example:

@smallexample
gmake[2]: Entering directory `/nh/toaster/u/rosalia/gnudl/proto4/gnudl/c_sources'
gcc -c -DHAVE_CONFIG_H -I. -I. -I. -I/packages/include -I/packages/include/guile -I../../marklib  -DHAVE_GNUPLOT  c_builtins.c
In file included from /packages/include/guile/libguile.h:37,
                 from /packages/include/guile/gscm.h:25,
                 from c_builtins.c:3:
../../libguile/__scm.hd:122: ../threads/threads.h: No such file or directory
gmake[2]: *** [c_builtins.o] Error 1
gmake[2]: Leaving directory `/nh/toaster/u/rosalia/gnudl/proto4/gnudl/c_sources'
gmake[1]: *** [all-recursive] Error 1
gmake[1]: Leaving directory `/nh/toaster/u/rosalia/gnudl/proto4/gnudl'
gmake: *** [all-recursive] Error 1
@end smallexample

@strong{Ugly hackaround:} edit @file{/packages/include/guile/__scm.h}
(what a gross filename) and replace @code{../threads/threads.h} with
@code{threads/threads.h}.

This whole problem arises from the non-libguile mentality in testing
the distribution.  It's important to test libguile use, and not just the
@code{guile} program.

@item
The "no table of contents" in libthreads.a persists, no matter how many
times I run ranlib on it.  What's going on?  Could it be again a problem
with the fact that there is only one .o file in libthreads.a?

@item
@code{make install} still does not install libgtcltk.a.  @strong{Ugly
hackaround:} just copy libgtcltk.a to /packages/lib.

@item
The slib installation still doesn't include or install scanf.scm.
@strong{Ugly hackaround:} get the slib distribution from Aubrey Jaffer
and take scanf.scm from that.

@end itemize




@node Installation problems with guile-1.0b0, Installation problems with guile-r0.3, Installation problems with guile-r1.0, Bug reports and hackarounds for various Guile releases
@section Installation problems with guile-1.0b1
@cindex release 1.0b1

This is Tom Lord's latest private release.  It seems to install well on
SunOS4.  Unfortunately it has not yet been documented, and I have not
yet figured it out enough to merge it in this documentation.


@node Installation problems with guile-r0.3, Execution problems with guile-r0.3, Installation problems with guile-1.0b0, Bug reports and hackarounds for various Guile releases
@section Installation problems with guile-r0.3
@cindex release r0.3

The guile-r0.3 snapshot is one Tom Tromey made for me.  It contains
fixes to the @code{tcl-lambda()} problem I reported.

I configure it with
@smallexample
./configure --prefix=/packages --enable-i18n --with-threads
@end smallexample


@itemize @bullet

@item
The --with-threads causes compilition in @code{libguile} to fail.  Fix:
add to @code{XCFLAGS} the option @code{-I../qt}.

@item
The @file{libqt.a} build on solaris2.5 puts in the wrong symbols
(i.e. libguile.a uses differently named calls).  @strong{Ugly
hackaround}: if I go to qt/Makefile and change the lines that say
_sparc.s to say sparc.s it magically works!

@item
Linux making and installing was flawless (september slackware from
MIT).  But it seems to not install the @file{libgtcltk.a} file.

@item
Solaris does not install @file{libgtcltk.a} either.

@item
What's with this @file{$(prefix)/html} directory?  I don't know if I
like it.

@item
Solaris 2.5 -- Ggl seems to not compile because libthreads.a has no
symbol table:
@smallexample
gcc -g -I. -I. -I./../mesa/include -I./../glut -I./../libguile -I../libguile   -I/packages/include  -L../glut -L../mesa/src -L../mesa/src-glu  -L../libguile -o ggl glconsts.o glfns.o glutconsts.o glutfns.o glinvoke.o gglmain.o   ../libguile/libguile.a ../threads/libthreads.a  -lm -lglut -lMesaGLU -lMesaGL   -L/packages/lib -R /packages/lib -lXmu -lX11  -lnsl -lsocket
ld: elf error: file ../threads/libthreads.a: unable to locate archive symbol table: Request error: offset out of range 
ld: fatal: File processing errors.  No output written to ggl
gmake[1]: *** [ggl] Error 1
gmake[1]: Leaving directory `/nh/toaster/packages-root/.packages/guile/guile-r0.3/src/ggl'
gmake: *** [all] Error 1
@end smallexample

@strong{Ugly hackaround}: edit ggl/Makefile, replace the
@file{../threads/libthreads.a} with @file{../threads/threads.o} and that
seems to work.

@item
Exactly the same thing happened for the guile program.  @strong{Ugly
hackaround}: I edited @file{guile/Makefile} manually and replaced
@code{-lthreads} with @file{../threads/threads.o}.

@item
The guile program does not link; it seems to not have -lX11 and -lsocket
and -lnsl in the command line.  Tha Makefile configuration seems like it
should be done better for the @file{guile} subdirectory.

@item
On Solaris 2.5, threads/libthreads.a (and another library that has only
one .o file in it) do not link properly.  The solaris 2.5 loader gets
very confused when it finds a single .o file in the .a file.

@strong{Ugly hackaround}: I create a dummy function in a dummy_file.c,
compile it to a dummyile.o (@samp{gcc -c dummy_file.c}), and add that to
the archive (@code{ar qs libthreads.a dummy_file.o}).  Things then work
fine!!


@end itemize




@node Execution problems with guile-r0.3,  , Installation problems with guile-r0.3, Bug reports and hackarounds for various Guile releases
@section Execution problems with guile-r0.3
@cindex release r0.3

@itemize @bullet
@item
I think this problem also existed before.  Certain @file{slib} files
don't appear in @file{$(prefix)/lib/slib}, even though they are listed
in @file{$(prefix)/lib/slib/require.scm}.  For example, if I try to use
@code{scanf}, I get
@smallexample
guile> (require 'scanf)
;;; loading scanf...
;;; ...COULD NOT LOAD scanf from ("" "/packages/lib/gls/bootstrapping/" "/packages/lib/gls/" "/packages/lib/slib/")
 
ERROR: missing CATCH throw: (could-not-load scanf ("" "/packages/lib/gls/bootstrapping/" "/packages/lib/gls/" "/packages/lib/slib/"))
;;; ABORT executed.
;Evaluation took 140 mSec (40 in scm_gc) 7220 cells work, 831 bytes other
@end smallexample

@item
The @code{tcl-lambda} problem was fixed, but another introduced.  That's
fixed in r0.4.

@end itemize
