@c \input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile_user.info
@settitle Guile User Manual
@c %**end of header



@node Goonix - the Guile interface to Posix, Internationalization Features in Guile, More on the Guile interface to Tk, Top
@chapter Goonix - the Guile interface to Posix
@cindex posix

Guile has a module called @dfn{goonix} which implement the @dfn{posix}
system calls (a standardized set of UNIX system calls) in scheme.  This
makes it easy to do things like list directories, create processes and
so forth.

Here is an example of using the goonix @code{opendir}, @code{readdir}
and @code{closedir} calls.

@cartouche

@smallexample
;; list-dir takes a path and returns a list of files in that directory
(define (list-dir path)
  (letrec ((dport (%opendir path))
	   (form-dlist			; a procedure that forms the list
	    (lambda (dl)
	      (let ((fname (%readdir dport)))
		(if (eof-object? fname)
		    dl
		    (form-dlist (cons fname dl))))))
	   )
    (define output-list (form-dlist '()))
    (%closedir dport)
    output-list
    )
  )
@end smallexample


@end cartouche
