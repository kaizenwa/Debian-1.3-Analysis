@node Guile Posix reference
@chapter Guile Posix reference

@c @strong{[NOTE: this chapter was written for Cygnus Guile and has not yet
@c been updated for the Guile 1.0 release.  I only learned later that Gary
@c Houston had written a rather complete goonix.texi manual.  I will
@c probably just put that in here.]}


@menu
* Posix preliminaries::         
* I/O extensions to standard Scheme::  
* Posix system and library calls::  
* UNIX system and library calls::  
@end menu

@node Posix preliminaries
@section Posix preliminaries
@cindex goonix
@cindex Posix
@cindex Posix compliance


Guile offers a @emph{posix-compliant} (@cite{John S. Quarterman and
Susanne Willhelm: "UNIX, POSIX, and Open Systems", Addison-Wesley
Publishing Co, Inc. 1993}) library for systems programming in Scheme.
It allows the Scheme programmer to use the same calls available to C
programmers in a posix environment.

This chapter is written assuming that you are running the @emph{Guile}
program directly.  If you are writing a C program instead, and linking
with @emph{libguile}, you can follow the instructions in @ref{Libguile
-- high level interface reference} to initialize Posix correctly, and
then follow this section when you write Scheme code.

@cindex Posix initialization
Unlike the Tk package, no special Scheme code is required to initialize
Posix: all Posix procedures are primitive, and available as long as
Posix has been initialized with the correct libguile calls.

@cindex arguments
When documenting the procedures in this chapter, I use the convention
@var{[arg]} to indicate that the argument is optional, and @var{[args
@dots{}]} to indicate that the optional argument can be repeated.

You will notice that most of these procedures closely mirror the
equivalent UNIX system or library calls.  If you want to know more
detail about how these procedures behave, you can read the relevant UNIX
man page.


@node I/O extensions to standard Scheme
@section I/O extensions to standard Scheme
@cindex I/O extensions
@cindex ports

These @emph{I/O Extensions} to Scheme provide many of the UNIX file
system calls, thus allowing sophisticated file manipulation and
directory traversal.  This is mostly done using UNIX's @code{stdio}
layer, rather than the raw @code{open}, @code{read}, @code{write} layer.

Standard I/O @emph{file pointers} are directly translated to Scheme
@emph{ports}.  Ports are described in great detail in all the Scheme
references (@pxref{Where to find more Guile/Scheme resources, Guile User
Manual, , guile-user, Guile User Manual}), so I will simply remind you
that an input port is a Scheme object which can deliver characters, and
an output port is a Scheme object which can accept characters.  It is OK
to think of ports as file pointers, even though there are some
subtelties in ports related to Scheme's unique control structure.

In the following read/write routines, if @var{port} is omitted, standard
input (or standard output) is assumed.

@deffn {I/O Extensions} read-line [port]
Reads a line of text from the given input port, and returns the string.
If @var{port} is not specified, standard input is assumed.
@end deffn

@deffn {I/O Extensions} read-line! str [port]
A destructive version of the above: puts the string in @var{str}; return
value is unspecified.
@end deffn

@deffn {I/O Extensions} write-line obj [port]
Writes a representation of @var{obj} to @var{port}.  If port is not
specified, it is assumed to be standard output.
@end deffn

@deffn {I/O Extensions} ftell port
Returns the current seek pointer of the given port.
@end deffn

@deffn {I/O Extensions} fseek port offset whence
Sets the seek pointer for @var{port} to the position @var{offset}.  If
@var{whence} is 0, that offset is with respect to the beginning of the
file.  If @var{whence} is 1, the offset is with respect to the current
position.  If @var{whence} is 2, the offset is with respect to the end
of the file.
@end deffn

@deffn {I/O Extensions} freopen filename modes port
Opens @var{filename} with the specified @var{modes}, and associates
@var{port} with that file.
@end deffn

@deffn {I/O Extensions} duplicate-port old-port modes
Returns a new port having the same open file as @var{old-port}.
@end deffn

@deffn {I/O Extensions} redirect-port into-port from-port
Redirects I/O from @var{from-port} to @var{into-port}: from here on,
@var{into-port} will refer to the same file as @var{from-port}.  If
@var{into-port} already refers to an open file, it will be closed.
@end deffn

@deffn {I/O Extensions} opendir dirname
Opens the directory @var{dirname}, returning a directory port which can
be used with @code{readdir} and @code{closedir}.
@end deffn

@deffn {I/O Extensions} readdir dirp
Gets the next file name from the directory port @var{dirp}.
@end deffn

@deffn {I/O Extensions} rewinddir dirp
Repositions the directory port @var{dirp} to the beginning of the
stream.
@end deffn

@deffn {I/O Extensions} closedir dirp
Closes the directory port @var{dirp}.
@end deffn

@deffn {I/O Extensions} mkdir dirname [mode]
Makes a new directory with name @var{dirname}.  The directory
permissions are given by the optional argument @var{mode}, or by the
current @var{umask} if @var{mode} is not specified.
@end deffn

@deffn {I/O Extensions} rmdir dirname
Removes the directory with path @var{dirname}.
@end deffn

@deffn {I/O Extensions} chdir path
Changes the current working directory to @var{path}.
@end deffn

@deffn {I/O Extensions} getcwd
Returns a string with the current working directory.
@end deffn

@deffn {I/O Extensions} chmod filename mode
Sets the permission mode on @var{filename} to @var{mode}.
@end deffn

@deffn {I/O Extensions} utime path [actime [modtime]]
Sets the access and modification times of the file at @var{path}.  The
time values @var{actime} and @var{modtime} are given in standard UNIX
time: the number of seconds since 00:00:00 GMT, Jan. 1 1970.  If
@var{actime} and @var{modtime} are not given, the current time is used.
@end deffn

@deffn {I/O Extensions} umask [mask-value]
Sets the user's @code{umask} to be the specified value @var{mask-value}.
The new setting is returned.  If no @var{mask-value} is given,
@code{umask} will return the current setting.

Notice that the UNIX @code{umask} command interprets the
@var{mask-value} to be an octal integer, whereas the Guile @code{umask}
call does not make any such conversion, so you have to explicitly tell
Scheme to use an octal radix, or think about permissions in decimal!
@end deffn

@deffn {I/O Extensions} rename old-fname new-fname
Renames the file from @var{old-fname} to @var{new-fname}.  This is
analogous to the UNIX @code{mv} command and the @code{rename} system
call.
@end deffn

@deffn {I/O Extensions} fileno port
Returns the integer file descriptor associated with @var{port}.  In case
of error, @code{#f} is returned.
@end deffn

@deffn {I/O Extensions} isatty port
Returns @code{#t} if the port is associated with a terminal device, and
@code{#f} otherwise.
@end deffn

@deffn {I/O Extensions} fdopen fd type
Returns an I/O port associated with the numeric file descriptor @var{fd}
(which is assumed to be already open).  The @var{type} argument is a
standard I/O character string specifying whether the file should be
opened for reading, writing, or appending:
@smallexample
          r         open for reading

          w         truncate or create for writing

          a         append: open for writing at end of  file,  or
                    create for writing

          r+        open for update (reading and writing)

          w+        truncate or create for update

          a+        append; open or create for update at EOF
@end smallexample
@end deffn

@deffn {I/O Extensions} primitive-move->fdes port fd
Moves the file descriptor that underlies @var{port} to the given value
@var{fd}.

Returns @code{#f} for error, 0 if the file descriptor is already equal
to @var{fd}, and 1 if the file descriptor is successfully moved.
@end deffn

@deffn {I/O Extensions} access path how
Determines the accessibility of the file in @var{path}.  The @var{how}
variable can take on any of the following values:
@smallexample
          R_OK           test for read permission

          W_OK           test for write permission

          X_OK           test for execute or search permission

     The following value may also be supplied for mode:

          F_OK           test whether the directories leading  to
                         the  file  can  be searched and the file
                         exists.
@end smallexample
@end deffn

@deffn {I/O Extensions} stat filename
Gets typical UNIX @emph{stat} information on @var{filename}, and returns
that information in a Scheme vector, where the UNIX @code{stat}
structure values are stored in the following order: @code{#(st_dev
st_ino st_mode st_nlink st_uid st_gid st_rdev st_size st_atime st_mtime
st_ctime st_blksize st_blocks)}
@end deffn

@deffn {I/O Extensions} getpid
Returns the current process ID.
@end deffn

@deffn {I/O Extensions} putenv str
Takes a string @var{str} of the form @code{"VARIABLE=value"} and adds
that to the user's environment.
@end deffn

@node Posix system and library calls
@section Posix system and library calls
@cindex posix calls

@deffn {POSIX Calls} chown path owner group
Changes the ownership of @var{path} to the specified @var{owner} and
@var{group}.
@end deffn

@deffn {POSIX Calls} link oldpath newpath
Adds @var{newpath} as a hard link to @var{oldpath}.
@end deffn

@deffn {POSIX Calls} pipe
Creates a pipe, and returns a Scheme pair with the @emph{read} port in
its @code{car} and the @emph{write} port in its @emph{cdr}.  If the pipe
creation fails, @code{pipe} returns @code{#f}.
@end deffn

@deffn {POSIX Calls} open-pipe pipe-str mode
Opens a pipe to a new process by running @var{pipe-str}, and returns a
port which can be used to write to the process (if @var{mode} is
@code{"w"}) or read from it (if @var{mode} is @code{"r"}).
@end deffn


@deffn {POSIX Calls} open-input-pipe pipe-str
A shortcut for running @code{(open-pipe pipe-str "r")}.
@end deffn

@deffn {POSIX Calls} open-output-pipe pipe-str
A shortcut for running @code{(open-pipe pipe-str "w")}.
@end deffn

@deffn {POSIX Calls} getgroups
Returns a vector with all the supplementary group IDs of the current
user process.
@end deffn


@deffn {POSIX Calls} getpwuid [name]
Given the login-name or uid in @var{name}, @code{getpwuid} returns a
vector with the following data: @code{#(login-name password uid gid
GEGOS home-dir shell)}.

If @var{name} is not specified, the first entry in the password file is
returned (or the @emph{next} entry, upon successive invocations).
@end deffn


@deffn {POSIX Calls} setpwent [arg]
If called with an argument, @code{setpwent} rewinds the password file so
the next call to @code{getpwuid} will start from the beginning.

Without arguments, @code{setpwent} will close the password file; it can
be used when processing is complete.
@end deffn


@deffn {POSIX Calls} getgrgid [which-group]
If the argument @var{which-group} (either the group name or the gid) is
given, @code{getgrgid} returns the group file entry for that group.  If
@var{which-group} is not given, the first entry in the group file is
returned (or the @emph{next} entry, upon successive invocations).
@end deffn


@deffn {POSIX Calls} setgrent [arg]
This is analogous to @code{setpwent}, but for the group file.

If called with an argument, @code{setgrent} rewinds the group file so
the next call to @code{getgrgid} will start from the beginning.

Without arguments, @code{setgrent} will close the group file; it can be
used when processing is complete.
@end deffn


@deffn {POSIX Calls} kill pid sig
Sends a signal @var{sig} to the process @var{pid}.  The possible values
for @var{sig} are the usual UNIX signal types.  Notice the order of
arguments: this is the order of the UNIX @code{kill} system call, not
the order of the @code{kill} command usually typed at the shell.
@end deffn


@deffn {POSIX Calls} waitpid pid [options]
Waits for some or all child processes to exit or return a status.

If @var{pid} is -1, @code{waitpid} will wait on any of its children.
This is equivalent to the traditional UNIX @code{wait} system call.

If @var{pid} is greater than 0, @code{waitpid} will wait on that
particular child process.

If @var{pid} is equal to 0, @code{waitpid} will wait on any children in
its own process group.

If @var{pid} is less than -1, @code{waitpid} will wait on any children
in the process group of the particular child @code{abs(pid)}.

The @var{options} argument is a bitwise OR of any of the flags:
@table @var
@item
WNOHANG
Tells @code{waitpid} to not suspend if status is not immediately
available for one of the relevant child processes.

@item
WUNTRACED
Also reports status of children that are stopped and have not yet been
reported.

@c [FIXME: cross-check this explanation with Advanced Programming in the
@c UNIX Environment when I get home, and maybe cite that book here]

@end table

The value returned by @code{waitpid} is a Scheme pair of the child pid
and the status returned for that child.
@end deffn


@deffn {POSIX Calls} getppid
Returns the process id of the current process's parent.
@end deffn

@deffn {POSIX Calls} getuid
@deffnx {POSIX Calls} geteuid
@deffnx {POSIX Calls} getgid
@deffnx {POSIX Calls} getegid
Returns the real or effective user or group id of the current process.
@end deffn

@deffn {POSIX Calls} setuid id
@deffnx {POSIX Calls} seteuid id
@deffnx {POSIX Calls} setgid id
@deffnx {POSIX Calls} setegid id
Sets the real or effective user or group id of the current process.
@end deffn

@deffn {POSIX Calls} ttyname port
Returns a string with the path of the terminal device associated with
the @var{port}, or @code{#f} if the device is not a terminal.  Notice
how this also serves the function of the UNIX @code{isatty()} call.
@end deffn

@deffn {POSIX Calls} execl command-str [exec-args @dots{}]
@deffnx {POSIX Calls} execlp command-str [exec-args @dots{}]
@c [FIXME: Need to flesh this out some more, and look into the differences
@c and why they are called execl* when they really invoke execv*.]
Similar to @code{execl}, except that if @var{filename} does not contain
a slash it searches for the file in the directories listed in the
@code{PATH} environment variable.

execlp is similar, but returns @code{#f} if an error occurs.
@end deffn

@deffn {POSIX Calls} fork
This is a raw interface to the UNIX @code{fork()} system call.  It
creates a new process with the same core image as the current process.
@code{fork} returns @code{#f} upon failure; otherwise the child gets a
return value of 0, and the parent gets the child's pid.

See the UNIX @code{fork} man page for some of the subtelties of
@code{fork} (open file descriptors, directory streams, semaphores,
@var{tms_} values, file locks, @dots{}).
@end deffn

@deffn {POSIX Calls} select reads writes excepts secs msecs
The @code{select} call is used to examine a set of file descriptors
(passed as Scheme lists of non-negative integers in @var{readfds},
@var{writefds} and @var{exceptfds}).

The purpose of this examination is to determine if the descriptors are
ready for the requested operation (reading or writing or treatment of
exception).  The return value is a list of 3 lists; the three lists are
the original lists stripped down to only the @emph{ready} file
descriptors.
@c [FIXME write this better]

A timeout can be specified (in seconds plus miliseconds) with the
@var{secs} and @var{msecs} are used.

@end deffn

@deffn {POSIX Calls} uname
This is an interface to the UNIX @code{uname()} system call.  Upon
successful completion it returns a list of 5 strings describing the
system name and OS version: @code{(list OSname nodename OSrelease
OSversion MachineType)}.  Upon failure it returns @code{#f}.
@c [FIXME for some reason i can't run it on solaris2.5]
@end deffn

@deffn {POSIX Calls} environ [env-list]
With no argument, returns the current environment as a Scheme list of
@code{"VAR=val"} strings.  It can be called with a list of
@code{"VAR=val"} strings, and then the environment will be set to those
values.
@c [FIXME NOTE: it is not clear to me that *setting* the environment does
@c anything outside of the Guile session; I need to clarify that with
@c Gary.]
@end deffn


@node UNIX system and library calls
@section UNIX system and library calls
@cindex UNIX system calls
@cindex system calls
@cindex UNIX library calls

@deffn {UNIX Calls} mknod path mode dev
Creates a new file named by the string @var{path}.  The file permissions
are specified in @var{mode}, and some special @emph{file type} bits can
also be OR-ed in (see the @code{mknod()} man page for details on the
file type bits).

The @var{dev} argument is ignored unless @var{mode} is a block or
character special file, in which case @var{dev} is a
@emph{configuration-dependent specification of a character or block I/O
device}.
@c [FIXME must ask Gary more about this]
@end deffn

@deffn {UNIX Calls} acct path
Turns on or off process accounting.  The accounting information will be
reported in the file named by the string @var{path}.  If @var{path} is
@code{#f}, accounting will be turned off.

Must be super user to use this call.
@end deffn

@deffn {UNIX Calls} nice increment
Changes the @emph{nice} value of a UNIX process by @var{increment}
(remember: a large nice value means @emph{less} priority).  Only the
super user can set a negative increment.

The value of @var{increment} should be between -20 and 20; if it is
outside these bounds it will be silently adjusted to the extreme value.
@end deffn

@deffn {UNIX Calls} sync
Schedules a write to disk of all information in core memory that should
be on disk, such as super blocks, inodes and buffered disk I/O.
@end deffn

@deffn {UNIX Calls} symlink oldpath newpath
Makes @var{newpath} be a symbolic link to @var{oldpath}.
@end deffn

@deffn {UNIX Calls} readlink path
Returns a string with the @emph{contents of the symlink} at @var{path}.
The @emph{contents} is the path to the real file.  Returs @code{#f} on
any error condition.
@end deffn

@deffn {UNIX Calls} lstat path
Like @code{stat} except that if @var{path} is a symlink, @code{lstat}
will return information about the symlink, whereas @code{stat} will
look at the referenced file.  The rationale behind this is that symlinks
should be transparent to the traditional UNIX file system calls, but
extra calls (like @code{lstat} and @code{readlink}) are provided to
get more information.
@end deffn
