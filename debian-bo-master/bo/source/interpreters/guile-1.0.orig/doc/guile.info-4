This is Info file guile.info, produced by Makeinfo version 1.67 from
the input file guile.texi.


File: guile.info,  Node: Procedure and Macro Index,  Next: Variable Index,  Prev: Libc procedures,  Up: Top

Procedure and Macro Index
*************************

  This is an alphabetical list of all the procedures and macros in SCM.

* Menu:

* $abs:                                  libc.a Math.
* $acos:                                 libc.a Math.
* $acosh:                                libc.a Math.
* $asin:                                 libc.a Math.
* $asinh:                                libc.a Math.
* $atan:                                 libc.a Math.
* $atanh:                                libc.a Math.
* $cos:                                  libc.a Math.
* $cosh:                                 libc.a Math.
* $exp:                                  libc.a Math.
* $log:                                  libc.a Math.
* $sin:                                  libc.a Math.
* $sinh:                                 libc.a Math.
* $sqrt:                                 libc.a Math.
* $tan:                                  libc.a Math.
* $tanh:                                 libc.a Math.
* %atan2:                                libc.a Math.
* %delete-file:                          Libc procedures.
* %expt:                                 libc.a Math.
* *:                                     Basic Math.
* +:                                     Basic Math.
* -:                                     Basic Math.
* /:                                     Basic Math.
* <=?:                                   Ordering Numbers.
* <?:                                    Ordering Numbers.
* <dictionary-type>-ref:                 Dictionaries in General.
* <dictionary-type>-remove!:             Dictionaries in General.
* <dictionary-type>-set!:                Dictionaries in General.
* =?:                                    Ordering Numbers.
* >=?:                                   Ordering Numbers.
* >?:                                    Ordering Numbers.
* abort:                                 Dynamic Roots.
* abs:                                   Basic Math.
* acons:                                 Lists as Association Mappings.
* acos:                                  Transcendental Functions.
* acosh:                                 Transcendental Functions.
* and:                                   Flow of Control.
* angle:                                 Kinds of Numbers and Conversions.
* append:                                Lists.
* append!:                               Lists.
* apply:                                 Evaluation and Function Application.
* array->list:                           Conventional Arrays.
* array-contents:                        Conventional Arrays.
* array-copy!:                           Conventional Arrays.
* array-dimensions:                      Conventional Arrays.
* array-equal?:                          Conventional Arrays.
* array-fill!:                           Conventional Arrays.
* array-for-each:                        Array Mapping.
* array-in-bounds?:                      Conventional Arrays.
* array-index-map!:                      Array Mapping.
* array-map!:                            Array Mapping.
* array-prototype:                       Uniform Array.
* array-rank:                            Conventional Arrays.
* array-ref:                             Conventional Arrays.
* array-set!:                            Conventional Arrays.
* array-shape:                           Conventional Arrays.
* array? <1>:                            Uniform Array.
* array?:                                Conventional Arrays.
* ash:                                   Binary Math.
* asin:                                  Transcendental Functions.
* asinh:                                 Transcendental Functions.
* assoc:                                 Lists as Association Mappings.
* assoc-ref:                             Dictionaries in General.
* assoc-remove!:                         Dictionaries in General.
* assoc-set!:                            Dictionaries in General.
* assq:                                  Lists as Association Mappings.
* assq-ref:                              Dictionaries in General.
* assq-remove!:                          Dictionaries in General.
* assq-set!:                             Dictionaries in General.
* assv:                                  Lists as Association Mappings.
* assv-ref:                              Dictionaries in General.
* assv-remove!:                          Dictionaries in General.
* assv-set!:                             Dictionaries in General.
* atan:                                  Transcendental Functions.
* atanh:                                 Transcendental Functions.
* begin:                                 Flow of Control.
* bit-count:                             Bit Vectors.
* bit-count*:                            Bit Vectors.
* bit-extract:                           Binary Math.
* bit-invert!:                           Bit Vectors.
* bit-position:                          Bit Vectors.
* bit-set*!:                             Bit Vectors.
* boolean?:                              Booleans.
* builtin-variable:                      First-class Variables.
* caaaar:                                Basic Accessors and Mutators.
* caaadr:                                Basic Accessors and Mutators.
* caaar:                                 Basic Accessors and Mutators.
* caadar:                                Basic Accessors and Mutators.
* caaddr:                                Basic Accessors and Mutators.
* caadr:                                 Basic Accessors and Mutators.
* caar:                                  Basic Accessors and Mutators.
* cadaar:                                Basic Accessors and Mutators.
* cadadr:                                Basic Accessors and Mutators.
* cadar:                                 Basic Accessors and Mutators.
* caddar:                                Basic Accessors and Mutators.
* cadddr:                                Basic Accessors and Mutators.
* caddr:                                 Basic Accessors and Mutators.
* cadr:                                  Basic Accessors and Mutators.
* call-with-current-continuation:        Flow of Control.
* call-with-dynamic-root:                Dynamic Roots.
* call-with-input-file:                  File Ports.
* call-with-input-string:                String Ports.
* call-with-output-file:                 File Ports.
* call-with-output-string:               String Ports.
* car:                                   Basic Accessors and Mutators.
* case:                                  Flow of Control.
* catch:                                 Exception Handling with Catch and Throw.
* cdaaar:                                Basic Accessors and Mutators.
* cdaadr:                                Basic Accessors and Mutators.
* cdaar:                                 Basic Accessors and Mutators.
* cdadar:                                Basic Accessors and Mutators.
* cdaddr:                                Basic Accessors and Mutators.
* cdadr:                                 Basic Accessors and Mutators.
* cdar:                                  Basic Accessors and Mutators.
* cddaar:                                Basic Accessors and Mutators.
* cddadr:                                Basic Accessors and Mutators.
* cddar:                                 Basic Accessors and Mutators.
* cdddar:                                Basic Accessors and Mutators.
* cddddr:                                Basic Accessors and Mutators.
* cdddr:                                 Basic Accessors and Mutators.
* cddr:                                  Basic Accessors and Mutators.
* cdr:                                   Basic Accessors and Mutators.
* ceiling:                               Kinds of Numbers and Conversions.
* char->integer:                         Characters.
* char-alphabetic?:                      Characters.
* char-ci<=?:                            Characters.
* char-ci<?:                             Characters.
* char-ci=?:                             Characters.
* char-ci>=?:                            Characters.
* char-ci>?:                             Characters.
* char-downcase:                         Characters.
* char-lower-case?:                      Characters.
* char-numeric?:                         Characters.
* char-ready?:                           Character I/O.
* char-upcase:                           Characters.
* char-upper-case?:                      Characters.
* char-whitespace?:                      Characters.
* char<=?:                               Characters.
* char<?:                                Characters.
* char=?:                                Characters.
* char>=?:                               Characters.
* char>?:                                Characters.
* char?:                                 Characters.
* close-input-port:                      Ports.
* close-io-port:                         Ports.
* close-output-port:                     Ports.
* close-port:                            Ports.
* complex?:                              Kinds of Numbers and Conversions.
* cond:                                  Flow of Control.
* cons:                                  Cons Pairs and Lists.
* copy-tree:                             Cons Pairs and Lists.
* cos:                                   Transcendental Functions.
* cosh:                                  Transcendental Functions.
* current-error-port:                    I/O Redirection.
* current-input-port:                    I/O Redirection.
* current-module:                        Modules and Evaluation.
* current-output-port:                   I/O Redirection.
* current-time:                          Time.
* define:                                Managing Top Level Variables.
* define-module:                         Declaring Modules.
* define-public:                         Declaring Modules.
* defined?:                              Managing Top Level Variables.
* delay:                                 Promises.
* delete:                                Lists As Collections.
* delete!:                               Lists As Collections.
* delq:                                  Lists As Collections.
* delq!:                                 Lists As Collections.
* delv:                                  Lists As Collections.
* delv!:                                 Lists As Collections.
* dimensions->uniform-array:             Uniform Array.
* display:                               Structured I/O.
* do:                                    Anonymous Procedures and Local Environments.
* doubly-weak-hash-table?:               Weak References.
* doubly-weak-table:                     Weak References.
* dynamic-root:                          Dynamic Roots.
* dynamic-wind:                          Dynamic Wind.
* enclose-array:                         Conventional Arrays.
* eof-object?:                           Character I/O.
* eq?:                                   Equality.
* equal?:                                Equality.
* eqv?:                                  Equality.
* eval:                                  Evaluation and Function Application.
* eval2 <1>:                             eval2; User Defined Top Levels.
* eval2:                                 Evaluation and Function Application.
* even?:                                 Kinds of Numbers and Conversions.
* exact->inexact:                        Kinds of Numbers and Conversions.
* exact?:                                Kinds of Numbers and Conversions.
* exp:                                   Basic Math.
* floor:                                 Kinds of Numbers and Conversions.
* for-each:                              Lists As Collections.
* force:                                 Promises.
* force-output:                          Ports.
* gc:                                    GC.
* gc-stats:                              GC.
* gcd:                                   Basic Math.
* get-internal-real-time:                Time.
* get-internal-run-time:                 Time.
* getenv,:                               Libc procedures.
* hash:                                  Hash Values.
* hash-ref:                              Dictionaries in General.
* hash-remove!:                          Dictionaries in General.
* hash-set!:                             Dictionaries in General.
* hashq:                                 Hash Values.
* hashq-ref:                             Dictionaries in General.
* hashq-remove!:                         Dictionaries in General.
* hashq-set!:                            Dictionaries in General.
* hashv:                                 Hash Values.
* hashv-ref:                             Dictionaries in General.
* hashv-remove!:                         Dictionaries in General.
* hashv-set!:                            Dictionaries in General.
* hashx-ref:                             Dictionaries in General.
* hashx-remove!:                         Dictionaries in General.
* hashx-set!:                            Dictionaries in General.
* if:                                    Flow of Control.
* imag-part:                             Kinds of Numbers and Conversions.
* inexact->exact:                        Kinds of Numbers and Conversions.
* inexact?:                              Kinds of Numbers and Conversions.
* input-port?:                           Ports.
* int?:                                  Kinds of Numbers and Conversions.
* integer->char:                         Characters.
* integer-expt:                          Binary Math.
* integer-length:                        Binary Math.
* integer?:                              Kinds of Numbers and Conversions.
* intern-symbol:                         Obarrays.
* keyword->symbol:                       Keywords.
* keyword-dash-symbol:                   Keywords.
* keyword?:                              Keywords.
* lambda:                                Anonymous Procedures and Local Environments.
* last-pair:                             Lists.
* lcm:                                   Basic Math.
* length <1>:                            Vectors.
* length <2>:                            Lists.
* length:                                Examining Strings.
* let:                                   Anonymous Procedures and Local Environments.
* let*:                                  Anonymous Procedures and Local Environments.
* letrec:                                Anonymous Procedures and Local Environments.
* list:                                  Lists.
* list->string:                          Making Strings.
* list->uniform-array:                   Uniform Array.
* list->uniform-vector:                  Uniform Array.
* list->vector:                          Vectors.
* list-cdr-ref:                          Lists.
* list-cdr-set!:                         Lists.
* list-copy:                             Lists.
* list-length:                           Lists.
* list-ref:                              Lists.
* list-set!:                             Lists.
* list-tail:                             Lists.
* list?:                                 Lists.
* local-define!:                         Recursive Namespaces.
* local-ref:                             Recursive Namespaces.
* local-remove!:                         Recursive Namespaces.
* local-set!:                            Recursive Namespaces.
* log:                                   Basic Math.
* logand:                                Binary Math.
* logbit?:                               Binary Math.
* logcount:                              Binary Math.
* logior:                                Binary Math.
* lognot:                                Binary Math.
* logtest:                               Binary Math.
* logxor:                                Binary Math.
* magnitude:                             Kinds of Numbers and Conversions.
* make-arbiter:                          Arbiters.
* make-array:                            Conventional Arrays.
* make-doubly-weak-hash-table:           Weak References.
* make-keyword-from-dashed-symbol:       Keywords.
* make-module:                           Module Data Structures.
* make-polar:                            Kinds of Numbers and Conversions.
* make-record-type:                      Records.
* make-rectangular:                      Kinds of Numbers and Conversions.
* make-root-module:                      Module Data Structures.
* make-scm-module:                       Module Data Structures.
* make-shared-array:                     Conventional Arrays.
* make-shared-substring:                 Shared Substrings.
* make-soft-port:                        Soft Ports.
* make-string:                           Making Strings.
* make-struct:                           Structure Basics.
* make-struct-layout:                    Structure Layout.
* make-undefined-variable:               First-class Variables.
* make-uniform-array:                    Uniform Array.
* make-uniform-vector:                   Uniform Array.
* make-variable:                         First-class Variables.
* make-vector:                           Vectors.
* make-vtable-vtable:                    Vtables.
* make-weak-key-hash-table:              Weak References.
* make-weak-value-hash-table:            Weak References.
* make-weak-vector:                      Weak References.
* map:                                   Lists As Collections.
* max:                                   Ordering Numbers.
* member:                                Lists As Collections.
* memq:                                  Lists As Collections.
* memv:                                  Lists As Collections.
* min:                                   Ordering Numbers.
* module-add!:                           Module Data Structures.
* module-binder:                         Module Data Structures.
* module-binder-set!:                    Module Data Structures.
* module-bound?:                         Module Data Structures.
* module-eval-closure:                   Modules and Evaluation.
* module-eval-closure-set!:              Modules and Evaluation.
* module-for-each:                       Module Data Structures.
* module-local-variable:                 Module Data Structures.
* module-locally-bound?:                 Module Data Structures.
* module-make-local-var!:                Module Data Structures.
* module-name:                           Module Data Structures.
* module-name-set!:                      Module Data Structures.
* module-obarray:                        Module Data Structures.
* module-obarray-set!:                   Module Data Structures.
* module-ref:                            Module Data Structures.
* module-remove!:                        Module Data Structures.
* module-symbol-binding:                 Module Data Structures.
* module-symbol-interned?:               Module Data Structures.
* module-symbol-locally-interned?:       Module Data Structures.
* module-uses:                           Module Data Structures.
* module-uses-set!:                      Module Data Structures.
* module-variable:                       Module Data Structures.
* module?:                               Module Data Structures.
* modulo:                                Basic Math.
* negative?:                             Ordering Numbers.
* nested-define!:                        Recursive Namespaces.
* nested-ref:                            Recursive Namespaces.
* nested-remove!:                        Recursive Namespaces.
* nested-set!:                           Recursive Namespaces.
* newline:                               Character I/O.
* not:                                   Booleans.
* null? <1>:                             Cons Pairs and Lists.
* null?:                                 Booleans.
* number->string:                        Numbers.
* number?:                               Numbers.
* object-address:                        GC.
* object-properties:                     Object Properties.
* object-property:                       Object Properties.
* odd?:                                  Kinds of Numbers and Conversions.
* open-file:                             File Ports.
* open-input-file:                       File Ports.
* open-io-file:                          File Ports.
* open-output-file:                      File Ports.
* or:                                    Flow of Control.
* output-port?:                          Ports.
* pair?:                                 Cons Pairs and Lists.
* peek-char:                             Character I/O.
* port-mode:                             Ports.
* port-revealed:                         Low-level File Port Operations.
* port?:                                 Ports.
* positive?:                             Ordering Numbers.
* procedure->macro:                      Low-Level Syntax Extensions.
* procedure->memoizing-macro:            Low-Level Syntax Extensions.
* procedure->syntax:                     Low-Level Syntax Extensions.
* procedure-assoc:                       Procedures.
* procedure-documentation:               Anonymous Procedures and Local Environments.
* procedure-properties:                  Procedures.
* procedure-property:                    Procedures.
* procedure-putprop!:                    Procedures.
* procedure?:                            Procedures.
* process-define-module:                 Declaring Modules.
* quasiquote:                            Quotation.
* quit:                                  Dynamic Roots.
* quote:                                 Quotation.
* quotient:                              Basic Math.
* rational?:                             Kinds of Numbers and Conversions.
* read:                                  Structured I/O.
* read-char:                             Character I/O.
* read-only-string?:                     Read Only Strings.
* real-part:                             Kinds of Numbers and Conversions.
* real?:                                 Kinds of Numbers and Conversions.
* record-accessor:                       Records.
* record-constructor:                    Records.
* record-modifier:                       Records.
* record-predicate:                      Records.
* record-type-descriptor:                Records.
* record-type-field-names:               Records.
* record-type-name:                      Records.
* record?:                               Records.
* release-arbiter:                       Arbiters.
* remainder:                             Basic Math.
* repl:                                  eval2; User Defined Top Levels.
* restart:                               Dynamic Roots.
* reverse:                               Lists.
* reverse!:                              Lists.
* round:                                 Kinds of Numbers and Conversions.
* serial-array-copy!:                    Conventional Arrays.
* serial-array-map!:                     Array Mapping.
* set! <1>:                              Anonymous Procedures and Local Environments.
* set!:                                  Managing Top Level Variables.
* set-car!:                              Basic Accessors and Mutators.
* set-cdr!:                              Basic Accessors and Mutators.
* set-current-error-port:                I/O Redirection.
* set-current-input-port:                I/O Redirection.
* set-current-module:                    Modules and Evaluation.
* set-current-output-port:               I/O Redirection.
* set-object-properties:                 Object Properties.
* set-object-property:                   Object Properties.
* set-port-revealed!:                    Low-level File Port Operations.
* set-procedure-properties!:             Procedures.
* sin:                                   Transcendental Functions.
* sinh:                                  Transcendental Functions.
* sloppy-assoc-ref:                      Dictionaries in General.
* sloppy-assoc-remove!:                  Dictionaries in General.
* sloppy-assoc-set!:                     Dictionaries in General.
* sloppy-assq-ref:                       Dictionaries in General.
* sloppy-assq-remove!:                   Dictionaries in General.
* sloppy-assq-set!:                      Dictionaries in General.
* sloppy-assv-ref:                       Dictionaries in General.
* sloppy-assv-remove!:                   Dictionaries in General.
* sloppy-assv-set!:                      Dictionaries in General.
* sloppy-member:                         Lists As Collections.
* sloppy-memq:                           Lists As Collections.
* sloppy-memv:                           Lists As Collections.
* software-type,:                        Libc procedures.
* sqrt:                                  Basic Math.
* string:                                Making Strings.
* string->list:                          Making Strings.
* string->number:                        Numbers.
* string->obarray-symbol:                Obarrays.
* string->symbol:                        Symbols.
* string-append:                         Making Strings.
* string-ci<=?,:                         Ordering Strings.
* string-ci<?,:                          Ordering Strings.
* string-ci=?,:                          Ordering Strings.
* string-ci>=?,:                         Ordering Strings.
* string-ci>?,:                          Ordering Strings.
* string-copy:                           Making Strings.
* string-fill!:                          Examining Strings.
* string-index:                          Examining Strings.
* string-length:                         Examining Strings.
* string-null?:                          Examining Strings.
* string-ref:                            Examining Strings.
* string-rindex:                         Examining Strings.
* string-set!:                           Examining Strings.
* string<=?,:                            Ordering Strings.
* string<?,:                             Ordering Strings.
* string=?,:                             Ordering Strings.
* string>=?,:                            Ordering Strings.
* string>?,:                             Ordering Strings.
* string?:                               Strings.
* struct-ref:                            Structure Basics.
* struct-set!:                           Structure Basics.
* struct-vtable:                         Vtables.
* struct-vtable?:                        Vtables.
* struct?:                               Structure Basics.
* substring:                             Making Strings.
* substring-fill!:                       Examining Strings.
* substring-move-left!:                  Examining Strings.
* substring-move-right!:                 Examining Strings.
* symbol->keyword:                       Keywords.
* symbol->string:                        Symbols.
* symbol-binding:                        Obarrays.
* symbol-bound?:                         Obarrays.
* symbol-fref:                           F-slots and P-slots.
* symbol-fset!:                          F-slots and P-slots.
* symbol-hash:                           Symbols.
* symbol-interned?:                      Obarrays.
* symbol-pref:                           F-slots and P-slots.
* symbol-pset!:                          F-slots and P-slots.
* symbol-set!:                           Obarrays.
* symbol?:                               Symbols.
* system,:                               Libc procedures.
* tag:                                   Tag Values.
* tan:                                   Transcendental Functions.
* tanh:                                  Transcendental Functions.
* throw:                                 Exception Handling with Catch and Throw.
* tmpnam:                                Libc procedures.
* transpose-array:                       Conventional Arrays.
* try-arbiter:                           Arbiters.
* uniform-array-read!:                   Uniform Array.
* uniform-array-write:                   Uniform Array.
* uniform-vector-fill!:                  Uniform Array.
* uniform-vector-length:                 Uniform Array.
* uniform-vector-read!:                  Uniform Array.
* uniform-vector-write:                  Uniform Array.
* unintern-symbol:                       Obarrays.
* variable-bound?:                       First-class Variables.
* variable-ref:                          First-class Variables.
* variable-set!:                         First-class Variables.
* variable?:                             First-class Variables.
* vector:                                Vectors.
* vector->list:                          Vectors.
* vector-fill!:                          Vectors.
* vector-length:                         Vectors.
* vector-move-left!:                     Vectors.
* vector-move-right!:                    Vectors.
* vector-ref:                            Vectors.
* vector-set!:                           Vectors.
* vector?:                               Vectors.
* weak-key-hash-table:                   Weak References.
* weak-key-hash-table?:                  Weak References.
* weak-value-hash-table:                 Weak References.
* weak-value-hash-table?:                Weak References.
* weak-vector:                           Weak References.
* weak-vector?:                          Weak References.
* with-error-to-file:                    File Ports.
* with-error-to-port:                    I/O Redirection.
* with-error-to-string:                  String Ports.
* with-input-from-file:                  File Ports.
* with-input-from-port:                  I/O Redirection.
* with-input-from-string:                String Ports.
* with-output-to-file:                   File Ports.
* with-output-to-port:                   I/O Redirection.
* with-output-to-string:                 String Ports.
* write:                                 Structured I/O.
* write-char:                            Character I/O.
* zero?:                                 Ordering Numbers.


File: guile.info,  Node: Variable Index,  Prev: Procedure and Macro Index,  Up: Top

Variable Index
**************

  This is an alphabetical list of all the global variables in SCM.

* Menu:

* internal-time-units-per-second:        Time.
* most-negative-fixnum:                  Binary Math.
* most-positive-fixnum:                  Binary Math.
* OPEN_BOTH:                             File Ports.
* OPEN_READ:                             File Ports.
* OPEN_WRITE:                            File Ports.
* repl-abort:                            Dynamic Roots.
* repl-quit:                             Dynamic Roots.
* repl-restart:                          Dynamic Roots.


