;;; Definitions from /home/wfs/dpANS2-tex/setup-terms.tex

(setq tex-macros-alist  (append 
 '(
;% -*- Mode: TeX -*-

;%%%% ===== References =====

;%%% Books

;; (def CLtL in file: setup-terms.tex: Line 11
 ("CLtL" "{\\it Common Lisp: The Language}"0)
;; (def CLtLTwo in file: setup-terms.tex: Line 13
 ("CLtLTwo" "{\\it Common Lisp: The Language, Second Edition}"0)
;; (def RandomHouseDictionary in file: setup-terms.tex: Line 15
 ("RandomHouseDictionary" 
   "{\\it The Random House Dictionary of 
 the English Language, Second Edition, Unabridged}"0)
;; (def WebstersDictionary in file: setup-terms.tex: Line 19
 ("WebstersDictionary" 
   "{\\it Webster's Third New International Dictionary
 the English Language, Unabridged}"0)
;; (def CondSysPaper in file: setup-terms.tex: Line 23
 ("CondSysPaper" "{\\it Exceptional Situations in Lisp}"0)
;; (def GabrielBenchmarks in file: setup-terms.tex: Line 25
 ("GabrielBenchmarks" "{\\it Performance and Evaluation of Lisp Programs}"0)
;; (def KnuthVolThree in file: setup-terms.tex: Line 27
 ("KnuthVolThree" "{\\it The Art of Computer Programming, Volume 3}"0)
;; (def MetaObjectProtocol in file: setup-terms.tex: Line 29
 ("MetaObjectProtocol" "{\\it The Art of the Metaobject Protocol}"0)
;; (def AnatomyOfLisp in file: setup-terms.tex: Line 31
 ("AnatomyOfLisp" "{\\it The Anatomy of Lisp}"0)
;; (def FlavorsPaper in file: setup-terms.tex: Line 33
 ("FlavorsPaper" 
   "{\\it Flavors: A Non-Hierarchical Approach to Object-Oriented Programming}"0)
;; (def LispOnePointFive in file: setup-terms.tex: Line 36
 ("LispOnePointFive" "{\\it Lisp 1.5 Programmer's Manual}"0)
;; (def Moonual in file: setup-terms.tex: Line 38
 ("Moonual" "{\\it Maclisp Reference Manual, Revision~0}"0)
;; (def Pitmanual in file: setup-terms.tex: Line 40
 ("Pitmanual" "{\\it The Revised Maclisp Manual}"0)
;; (def InterlispManual in file: setup-terms.tex: Line 42
 ("InterlispManual" "{\\it Interlisp Reference Manual}"0)
;; (def Chinual in file: setup-terms.tex: Line 44
 ("Chinual" "{\\it Lisp Machine Manual}"0)
;; (def SmalltalkBook in file: setup-terms.tex: Line 46
 ("SmalltalkBook" "{\\it Smalltalk-80: The Language and its Implementation}"0)
;; (def XPPaper in file: setup-terms.tex: Line 48
 ("XPPaper" "{\\it XP: A Common Lisp Pretty Printing System}"0)

;%%% Standards

;; (def IEEEFloatingPoint in file: setup-terms.tex: Line 53
 ("IEEEFloatingPoint" 
   "{\\it IEEE Standard for Binary Floating-Point Arithmetic}"0)
;; (def IEEEScheme in file: setup-terms.tex: Line 56
 ("IEEEScheme" "{\\it IEEE Standard for the Scheme Programming Language}"0)
;; (def ISOChars in file: setup-terms.tex: Line 58
 ("ISOChars" "{\\rm ISO 6937/2}"0)

;%%% Papers

;%This one should be used like
;%    ``{\PrincipalValues}''
;% or ``{\PrincipalValues},''
;% or ``{\PrincipalValues}.'' 
;; (def PrincipalValues in file: setup-terms.tex: Line 67
 ("PrincipalValues" "Principal Values and Branch Cuts in Complex APL"0)
;; (def RevisedCubedScheme in file: setup-terms.tex: Line 69
 ("RevisedCubedScheme" 
   "Revised$^3$ Report on the Algorithmic Language Scheme"0)
;; (def StandardLispReport in file: setup-terms.tex: Line 72
 ("StandardLispReport" "Standard LISP Report"0)
;; (def NILReport in file: setup-terms.tex: Line 74
 ("NILReport" "NIL---A Perspective"0)
;; (def SOneCLPaper in file: setup-terms.tex: Line 76
 ("SOneCLPaper" "S-1 Common Lisp Implementation"0)
;; (def CLOSPaper in file: setup-terms.tex: Line 78
 ("CLOSPaper" "Common Lisp Object System Specification"0)

;%%%% ===== Languages, Operating Systems, etc. =====

;; (def clisp in file: setup-terms.tex: Line 83
 ("clisp" "{\\rm Common Lisp}"0)
;%Use in middle of sentence.
;; (def Lisp in file: setup-terms.tex: Line 86
 ("Lisp" "{\\rm Lisp}"0)
;; (def maclisp in file: setup-terms.tex: Line 88
 ("maclisp" "{\\rm MacLisp}"0)
;; (def apl in file: setup-terms.tex: Line 90
 ("apl" "{\\rm APL}"0)
;; (def lmlisp in file: setup-terms.tex: Line 92
 ("lmlisp" "{\\rm ZetaLisp}"0)
;; (def scheme in file: setup-terms.tex: Line 94
 ("scheme" "{\\rm Scheme}"0)
;; (def interlisp in file: setup-terms.tex: Line 96
 ("interlisp" "{\\rm InterLisp}"0)
;; (def slisp in file: setup-terms.tex: Line 98
 ("slisp" "{\\rm Spice Lisp}"0)
;; (def newlisp in file: setup-terms.tex: Line 100
 ("newlisp" "{\\rm Nil}"0)
;; (def sOnelisp in file: setup-terms.tex: Line 102
 ("sOnelisp" "{\\rm S-1 Common Lisp}"0)
;; (def fortran in file: setup-terms.tex: Line 104
 ("fortran" "{\\rm Fortran}"0)
;; (def stdlisp in file: setup-terms.tex: Line 106
 ("stdlisp" "{\\rm Standard Lisp}"0)
;; (def psl in file: setup-terms.tex: Line 108
 ("psl" "{\\rm Portable Standard Lisp}"0)
;; (def Unix in file: setup-terms.tex: Line 110
 ("Unix" "{\\rm Unix}"0)
;; (def algol in file: setup-terms.tex: Line 112
 ("algol" "{\\tt Algol}"0)
;; (def TopsTwenty in file: setup-terms.tex: Line 114
 ("TopsTwenty" "{\\tt TOPS-20}"0)

;%%%% ===== Important names =====

;%\def\form{\term{form}}   % No longer used. -kmp 7-Feb-92

;; (def t in file: setup-terms.tex: Line 121
 ("t" "\\misc{t}"0)
;; (def nil in file: setup-terms.tex: Line 123
 ("nil" "\\misc{nil}"0)
;; (def empty in file: setup-terms.tex: Line 125
 ("empty" "{\\tt ()}"0)
;; (def allowotherkeys in file: setup-terms.tex: Line 127
 ("allowotherkeys" "{\\keyword \\&allow-other-keys}"0)
;; (def aux in file: setup-terms.tex: Line 129
 ("aux" "{\\keyword \\&aux}"0)
;%\def\body {\tt\&body}
;; (def body in file: setup-terms.tex: Line 132
 ("body" "{\\keyword \\&body}"0)
;; (def environment in file: setup-terms.tex: Line 134
 ("environment" "{\\keyword \\&environment}"0)
;%\def\key #1{\tt\&key #1}
;; (def key in file: setup-terms.tex: Line 137
 ("key" "{\\keyword \\&key}"0)
;%\def\opt  {\tt\&optional}
;; (def opt in file: setup-terms.tex: Line 140
 ("opt" "{\\keyword \\&optional}"0)
;; (def optional in file: setup-terms.tex: Line 142
 ("optional" "{\\keyword \\&optional}"0)
;%\def\rest {\tt\&rest}
;; (def rest in file: setup-terms.tex: Line 145
 ("rest" "{\\keyword \\&rest}"0)
;; (def whole in file: setup-terms.tex: Line 147
 ("whole" "{\\keyword \\&whole}"0)

;%%%% ===== General Phrases =====

;; (def etc in file: setup-terms.tex: Line 152
 ("etc" "\\i{etc.}"("." . 0))
;; (def ie in file: setup-terms.tex: Line 154
 ("ie" "\\i{i.e.}, "(" " . 0))
;; (def eg in file: setup-terms.tex: Line 156
 ("eg" "\\i{e.g.}, "(" " . 0))

;%%%% ===== Domain-specific Phrases =====

;; (def defmethod in file: setup-terms.tex: Line 161
 ("defmethod" "defmethod"0)
;%\def\MOP:{Meta-Object Protocol:}  % No longer used. -kmp 6-Aug-91
;; (def CLOS in file: setup-terms.tex: Line 164
 ("CLOS" "object system"0)
;; (def OS in file: setup-terms.tex: Line 166
 ("OS" "object system"0)
;; (def SETFof in file: setup-terms.tex: Line 168
 ("SETFof" (lambda (a1)(insert  "\\macref{setf} of \\misc{"a1"}")) 1)
;; (def objectoftype in file: setup-terms.tex: Line 170
 ("objectoftype" (lambda (a1)(insert  "\\term{object} of \\term{type} \\f{"a1"}")) (" #1" . 1))
;; (def objectsoftype in file: setup-terms.tex: Line 172
 ("objectsoftype" (lambda (a1)(insert  "\\term{objects} of \\term{type} \\f{"a1"}")) (" #1" . 1))
;; (def Objectsoftype in file: setup-terms.tex: Line 174
 ("Objectsoftype" (lambda (a1)(insert  "\\term{Objects} of \\term{type} \\f{"a1"}")) (" #1" . 1))
;; (def oftype in file: setup-terms.tex: Line 176
 ("oftype" (lambda (a1)(insert  "of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def ofclass in file: setup-terms.tex: Line 178
 ("ofclass" (lambda (a1)(insert  "of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def oftypes in file: setup-terms.tex: Line 180
 ("oftypes" (lambda (a1)
   (insert  "of \\term{type} \\typeref{"a1"} or a \\term{subtype} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def ofmetaclass in file: setup-terms.tex: Line 183
 ("ofmetaclass" (lambda (a1)(insert  "of \\term{metaclass} \\typeref{"a1"}")) (" #1" . 1))
;; (def thetype in file: setup-terms.tex: Line 185
 ("thetype" (lambda (a1)(insert  "the \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def Thetype in file: setup-terms.tex: Line 187
 ("Thetype" (lambda (a1)(insert  "The \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def thetypes in file: setup-terms.tex: Line 189
 ("thetypes" (lambda (a1)(insert  "the \\term{types} \\typeref{"a1"}")) (" #1" . 1))
;; (def Thetypes in file: setup-terms.tex: Line 191
 ("Thetypes" (lambda (a1)(insert  "The \\term{types} \\typeref{"a1"}")) (" #1" . 1))
;; (def theclass in file: setup-terms.tex: Line 193
 ("theclass" (lambda (a1)(insert  "the \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def Theclass in file: setup-terms.tex: Line 195
 ("Theclass" (lambda (a1)(insert  "The \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def thevariable in file: setup-terms.tex: Line 197
 ("thevariable" (lambda (a1)(insert  "the \\term{variable} \\varref{"a1"}")) (" #1" . 1))
;; (def Thevariable in file: setup-terms.tex: Line 199
 ("Thevariable" (lambda (a1)(insert  "The \\term{variable} \\varref{"a1"}")) (" #1" . 1))
;; (def thevariables in file: setup-terms.tex: Line 201
 ("thevariables" (lambda (a1)(insert  "the \\term{variables} \\varref{"a1"}")) (" #1" . 1))
;; (def Thevariables in file: setup-terms.tex: Line 203
 ("Thevariables" (lambda (a1)(insert  "The \\term{variables} \\varref{"a1"}")) (" #1" . 1))
;; (def themacro in file: setup-terms.tex: Line 205
 ("themacro" (lambda (a1)(insert  "the \\funref{"a1"} \\term{macro}")) (" #1" . 1))
;; (def Themacro in file: setup-terms.tex: Line 207
 ("Themacro" (lambda (a1)(insert  "The \\funref{"a1"} \\term{macro}")) (" #1" . 1))
;; (def theinitkeyarg in file: setup-terms.tex: Line 209
 ("theinitkeyarg" (lambda (a1)(insert  "the \\kwd{"a1"} initialization argument")) 1)
;; (def Theinitkeyarg in file: setup-terms.tex: Line 211
 ("Theinitkeyarg" (lambda (a1)(insert  "The \\kwd{"a1"} initialization argument")) 1)
;; (def theinitkeyargs in file: setup-terms.tex: Line 213
 ("theinitkeyargs" (lambda (a1)(insert  "the initialization arguments named \\kwd{"a1"}")) 1)
;; (def Theinitkeyargs in file: setup-terms.tex: Line 215
 ("Theinitkeyargs" (lambda (a1)(insert  "The initialization argument named \\kwd{"a1"}")) 1)
;; (def thekeyarg in file: setup-terms.tex: Line 217
 ("thekeyarg" (lambda (a1)(insert  "the \\kwd{"a1"} \\term{argument}")) 1)
;; (def Thekeyarg in file: setup-terms.tex: Line 219
 ("Thekeyarg" (lambda (a1)(insert  "The \\kwd{"a1"} \\term{argument}")) 1)
;; (def thefunction in file: setup-terms.tex: Line 221
 ("thefunction" (lambda (a1)(insert  "the \\term{function} \\funref{"a1"}")) (" #1" . 1))
;; (def Thefunction in file: setup-terms.tex: Line 223
 ("Thefunction" (lambda (a1)(insert  "The \\term{function} \\funref{"a1"}")) (" #1" . 1))
;; (def thefunctions in file: setup-terms.tex: Line 225
 ("thefunctions" (lambda (a1)(insert  "the \\term{functions} \\funref{"a1"}")) (" #1" . 1))
;; (def Thefunctions in file: setup-terms.tex: Line 227
 ("Thefunctions" (lambda (a1)(insert  "The \\term{functions} \\funref{"a1"}")) (" #1" . 1))
;; (def thespecform in file: setup-terms.tex: Line 229
 ("thespecform" (lambda (a1)(insert  "the \\specref{"a1"} \\term{special form}")) (" #1" . 1))
;; (def Thespecform in file: setup-terms.tex: Line 231
 ("Thespecform" (lambda (a1)(insert  "The \\specref{"a1"} \\term{special form}")) (" #1" . 1))
;; (def thespecforms in file: setup-terms.tex: Line 233
 ("thespecforms" (lambda (a1)(insert  "the \\specref{"a1"} \\term{special forms}")) (" #1" . 1))
;; (def Thespecforms in file: setup-terms.tex: Line 235
 ("Thespecforms" (lambda (a1)(insert  "The \\specref{"a1"} \\term{special forms}")) (" #1" . 1))
;; (def thespecop in file: setup-terms.tex: Line 237
 ("thespecop" (lambda (a1)(insert  "the \\specref{"a1"} \\term{special operator}")) (" #1" . 1))
;; (def Thespecop in file: setup-terms.tex: Line 239
 ("Thespecop" (lambda (a1)(insert  "The \\specref{"a1"} \\term{special operator}")) (" #1" . 1))
;; (def Thespecforms in file: setup-terms.tex: Line 241
 ("Thespecforms" (lambda (a1)(insert  "The \\specref{"a1"} \\term{special forms}")) (" #1" . 1))
;; (def theGF in file: setup-terms.tex: Line 243
 ("theGF" (lambda (a1)(insert  "the \\term{generic function} \\funref{"a1"}")) (" #1" . 1))
;; (def TheGF in file: setup-terms.tex: Line 245
 ("TheGF" (lambda (a1)(insert  "The \\term{generic function} \\funref{"a1"}")) (" #1" . 1))
;; (def subtypeof in file: setup-terms.tex: Line 247
 ("subtypeof" (lambda (a1)(insert  "\\term{subtype} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def subtypesof in file: setup-terms.tex: Line 249
 ("subtypesof" (lambda (a1)(insert  "\\term{subtypes} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def Subtypesof in file: setup-terms.tex: Line 251
 ("Subtypesof" (lambda (a1)(insert  "\\term{Subtypes} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def supertypeof in file: setup-terms.tex: Line 253
 ("supertypeof" (lambda (a1)(insert  "\\term{supertype} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def supertypesof in file: setup-terms.tex: Line 255
 ("supertypesof" (lambda (a1)(insert  "\\term{supertypes} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def Supertypesof in file: setup-terms.tex: Line 257
 ("Supertypesof" (lambda (a1)(insert  "\\term{Supertypes} of \\term{type} \\typeref{"a1"}")) (" #1" . 1))
;; (def subclassof in file: setup-terms.tex: Line 259
 ("subclassof" (lambda (a1)(insert  "\\term{subclass} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def subclassesof in file: setup-terms.tex: Line 261
 ("subclassesof" (lambda (a1)(insert  "\\term{subclasses} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def Subclassesof in file: setup-terms.tex: Line 263
 ("Subclassesof" (lambda (a1)(insert  "\\term{Subclasses} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def superclassof in file: setup-terms.tex: Line 265
 ("superclassof" (lambda (a1)(insert  "\\term{superclass} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def superclassesof in file: setup-terms.tex: Line 267
 ("superclassesof" (lambda (a1)
   (insert  "\\term{superclasses} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def Superclassesof in file: setup-terms.tex: Line 270
 ("Superclassesof" (lambda (a1)
   (insert  "\\term{Superclasses} of \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def therestart in file: setup-terms.tex: Line 273
 ("therestart" (lambda (a1)(insert  "the \\misc{"a1"} \\term{restart}")) (" #1" . 1))
;; (def Therestart in file: setup-terms.tex: Line 275
 ("Therestart" (lambda (a1)(insert  "The \\misc{"a1"} \\term{restart}")) (" #1" . 1))
;; (def thepackage in file: setup-terms.tex: Line 277
 ("thepackage" (lambda (a1)(insert  "the \\packref{"a1"} \\term{package}")) (" #1" . 1))
;; (def Thepackage in file: setup-terms.tex: Line 279
 ("Thepackage" (lambda (a1)(insert  "The \\packref{"a1"} \\term{package}")) (" #1" . 1))
;; (def instofclass in file: setup-terms.tex: Line 281
 ("instofclass" (lambda (a1)
   (insert  "\\term{instance} of the \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def instsofclass in file: setup-terms.tex: Line 284
 ("instsofclass" (lambda (a1)
   (insert  "\\term{instances} of the \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;; (def Instsofclass in file: setup-terms.tex: Line 287
 ("Instsofclass" (lambda (a1)
   (insert  "\\term{Instances} of the \\term{class} \\typeref{"a1"}")) (" #1" . 1))
;% \def\instanceofclasses #1{\term{instance} of the \term{class} \typeref{#1} 
;% 		           or its \term{subclasses}}
;% \def\instancesofclasses #1{\term{instances} of the \term{class} \typeref{#1} 
;% 		           or its \term{subclasses}}
;% \def\Instancesofclasses #1{\term{Instances} of the \term{class} \typeref{#1} 
;% 		           or its \term{subclasses}}
;; (def instanceofclasses in file: setup-terms.tex: Line 296
 ("instanceofclasses" (lambda (a1)
   (insert  "\\term{generalized instance} of \\theclass{"a1"}")) (" #1" . 1))
;; (def instancesofclasses in file: setup-terms.tex: Line 299
 ("instancesofclasses" (lambda (a1)
   (insert  "\\term{generalized instances} of \\theclass{"a1"}")) (" #1" . 1))
;; (def Instancesofclasses in file: setup-terms.tex: Line 302
 ("Instancesofclasses" (lambda (a1)
   (insert  "\\term{Generalized instances} of \\theclass{"a1"}")) (" #1" . 1))
;; (def Theloopconstruct in file: setup-terms.tex: Line 305
 ("Theloopconstruct" (lambda (a1)(insert  "The \\macref{loop} \\loopref{"a1"} construct")) (" #1" . 1))
;; (def theloopconstruct in file: setup-terms.tex: Line 307
 ("theloopconstruct" (lambda (a1)(insert  "the \\macref{loop} \\loopref{"a1"} construct")) (" #1" . 1))
;; (def Theloopkeyword in file: setup-terms.tex: Line 309
 ("Theloopkeyword" (lambda (a1)(insert  "The \\macref{loop} \\loopref{"a1"} keyword")) (" #1" . 1))
;; (def theloopkeyword in file: setup-terms.tex: Line 311
 ("theloopkeyword" (lambda (a1)(insert  "the \\macref{loop} \\loopref{"a1"} keyword")) (" #1" . 1))
;; (def thevalueof in file: setup-terms.tex: Line 313
 ("thevalueof" (lambda (a1)(insert  "the \\term{value} of \\misc{"a1"}")) (" #1" . 1))
;; (def Thevalueof in file: setup-terms.tex: Line 315
 ("Thevalueof" (lambda (a1)(insert  "The \\term{value} of \\misc{"a1"}")) (" #1" . 1))
;; (def thevaluesof in file: setup-terms.tex: Line 317
 ("thevaluesof" (lambda (a1)(insert  "the \\term{values} of \\misc{"a1"}")) (" #1" . 1))
;; (def Thevaluesof in file: setup-terms.tex: Line 319
 ("Thevaluesof" (lambda (a1)(insert  "The \\term{values} of \\misc{"a1"}")) (" #1" . 1))
;; (def formatOp in file: setup-terms.tex: Line 321
 ("formatOp" (lambda (a1)(insert  "\\hbox{{\\tt ~"a1"}}")) 1)
;; (def formatdirective in file: setup-terms.tex: Line 323
 ("formatdirective" (lambda (a1)(insert  "\\hbox{{\\tt ~"a1"}} format directive")) 1)
;; (def NamedTypePredicate in file: setup-terms.tex: Line 325
 ("NamedTypePredicate" (lambda (a1 a2 a3)
   (insert  "\\funref{"a1"} returns \\term{true} if \\param{"a2"} is \\oftype{"a3"};
otherwise, it returns \\term{false}.")) 3)
;; (def TypePredicate in file: setup-terms.tex: Line 329
 ("TypePredicate" (lambda (a1 a2)
   (insert  "Returns \\term{true} if \\param{"a1"} is \\oftype{"a2"};
otherwise, returns \\term{false}.")) 2)
;; (def NamedPredicate in file: setup-terms.tex: Line 333
 ("NamedPredicate" (lambda (a1 a2 a3)
   (insert  "\\funref{"a1"} returns \\term{true} if \\param{"a2"} is "a3";
otherwise, returns \\term{false}.")) 3)
;; (def Predicate in file: setup-terms.tex: Line 337
 ("Predicate" (lambda (a1 a2)
   (insert  "Returns \\term{true} if \\param{"a1"} is "a2";
otherwise, returns \\term{false}.")) 2)
;; (def StrictPredicate in file: setup-terms.tex: Line 341
 ("StrictPredicate" (lambda (a1 a2)
   (insert  "Returns \\misc{t} if \\param{"a1"} is "a2";
otherwise, returns \\misc{nil}.")) 2)
;; (def Shouldcheckplus in file: setup-terms.tex: Line 345
 ("Shouldcheckplus" (lambda (a1)
   (insert  "Should signal an error \\oftype{program-error} 
		       if at least one \\param{"a1"} is not supplied.")) 1)
;; (def Checktype in file: setup-terms.tex: Line 349
 ("Checktype" (lambda (a1 a2)
   (insert  "Signals an error \\oftype{type-error} if \\param{"a1"} is not "a2".")) 2)
;; (def Checktypes in file: setup-terms.tex: Line 352
 ("Checktypes" (lambda (a1 a2)
   (insert  "Signals an error \\oftype{type-error} if "a1" are not "a2".")) 2)
;; (def Checknottype in file: setup-terms.tex: Line 355
 ("Checknottype" (lambda (a1 a2)
   (insert  "Signals an error \\oftype{type-error} if \\param{"a1"} is "a2".")) 2)
;; (def Checknottypes in file: setup-terms.tex: Line 358
 ("Checknottypes" (lambda (a1 a2)
   (insert  "Signals an error \\oftype{type-error} if "a1" are "a2".")) 2)
;; (def Checkanytype in file: setup-terms.tex: Line 361
 ("Checkanytype" (lambda (a1 a2)
   (insert  "Signals an error \\oftype{type-error} if any \\param{"a1"} is not "a2".")) 2)
;; (def Shouldchecktype in file: setup-terms.tex: Line 364
 ("Shouldchecktype" (lambda (a1 a2)
   (insert  "Should signal an error \\oftype{type-error}
			      if \\param{"a1"} is not "a2".")) 2)
;; (def Shouldcheckanytype in file: setup-terms.tex: Line 368
 ("Shouldcheckanytype" (lambda (a1 a2)
   (insert  "Should signal an error \\oftype{type-error}
			      if any \\param{"a1"} is not "a2".")) 2)
;; (def Lazychecktype in file: setup-terms.tex: Line 372
 ("Lazychecktype" (lambda (a1 a2)
   (insert  "Should be prepared to signal an error \\oftype{type-error}
			 if \\param{"a1"} is not "a2".")) 2)
;; (def Lazychecktypes in file: setup-terms.tex: Line 376
 ("Lazychecktypes" (lambda (a1 a2)
   (insert  "Should be prepared to signal an error \\oftype{type-error}
			 if "a1" are not "a2".")) 2)
;; (def Lazychecknottype in file: setup-terms.tex: Line 380
 ("Lazychecknottype" (lambda (a1 a2)
   (insert  "Should be prepared to signal an error \\oftype{type-error}
			 if \\param{"a1"} is "a2".")) 2)
;; (def Lazycheckanytype in file: setup-terms.tex: Line 384
 ("Lazycheckanytype" (lambda (a1 a2)
   (insert  "Should be prepared to signal an error \\oftype{type-error}
			    if any \\param{"a1"} is not "a2".")) 2)
;; (def Lazycheckanynottype in file: setup-terms.tex: Line 388
 ("Lazycheckanynottype" (lambda (a1 a2)
   (insert  "Should be prepared to signal an error \\oftype{type-error}
			    if any \\param{"a1"} is "a2".")) 2)
;; (def checktype in file: setup-terms.tex: Line 392
 ("checktype" (lambda (a1 a2)
   (insert  "signals an error \\oftype{type-error} if \\param{"a1"} is not "a2".")) 2)
;; (def checkanytype in file: setup-terms.tex: Line 395
 ("checkanytype" (lambda (a1 a2)
   (insert  "signals an error \\oftype{type-error} if any \\param{"a1"} is not "a2".")) 2)
;; (def shouldchecktype in file: setup-terms.tex: Line 398
 ("shouldchecktype" (lambda (a1 a2)
   (insert  "should signal an error \\oftype{type-error}
			   if \\param{"a1"} is not "a2".")) 2)
;; (def shouldcheckanytype in file: setup-terms.tex: Line 402
 ("shouldcheckanytype" (lambda (a1 a2)
   (insert  "should signal an error \\oftype{type-error}
			      if any \\param{"a1"} is not "a2".")) 2)
;; (def lazychecktype in file: setup-terms.tex: Line 406
 ("lazychecktype" (lambda (a1 a2)
   (insert  "should be prepared to signal an error \\oftype{type-error}
			 if \\param{"a1"} is not "a2".")) 2)
;; (def lazycheckanytype in file: setup-terms.tex: Line 410
 ("lazycheckanytype" (lambda (a1 a2)
   (insert  "should be prepared to signal an error \\oftype{type-error}
			    if any \\param{"a1"} is not "a2".")) 2)
;; (def Default in file: setup-terms.tex: Line 414
 ("Default" (lambda (a1)(insert  "The default is "a1".")) 1)
;; (def DefaultFor in file: setup-terms.tex: Line 416
 ("DefaultFor" (lambda (a1 a2)(insert  "The default for "a1" is "a2".")) 2)
;; (def DefaultIn in file: setup-terms.tex: Line 418
 ("DefaultIn" (lambda (a1 a2)(insert  "The default in "a1" is "a2".")) 2)
;; (def Defaults in file: setup-terms.tex: Line 420
 ("Defaults" (lambda (a1 a2)(insert  "The defaults for "a1" are "a2", respectively.")) 2)
;; (def DefaultEach in file: setup-terms.tex: Line 422
 ("DefaultEach" (lambda (a1 a2)(insert  "The defaults for each of "a1" is "a2".")) 2)
;; (def DefaultsIn in file: setup-terms.tex: Line 424
 ("DefaultsIn" (lambda (a1 a2 a3)
   (insert  "The defaults for "a2" in "a1" are "a3", respectively.")) 3)
;; (def HairyDefault in file: setup-terms.tex: Line 427
 ("HairyDefault" "Complicated defaulting behavior; see below"0)
;; (def MentionMetaObjects in file: setup-terms.tex: Line 429
 ("MentionMetaObjects" (lambda (a1 a2)
   (insert  "\\issue{SLOT-VALUE-METACLASSES:LESS-MINIMAL}
  Although no \\term{implementation} is required to do so,
  implementors are strongly encouraged to implement \\thefunction{"a1"} using 
  the \\term{function} \\f{"a2"} described in the \\term{Metaobject Protocol}.
\\endissue{SLOT-VALUE-METACLASSES:LESS-MINIMAL}")) 2)
;; (def symbolnamedesignator in file: setup-terms.tex: Line 436
 ("symbolnamedesignator" "string designator"0)
;; (def symbolnamedesignators in file: setup-terms.tex: Line 438
 ("symbolnamedesignators" "string designators"0)
;; (def packagenamedesignator in file: setup-terms.tex: Line 440
 ("packagenamedesignator" "string designator"0)
;; (def packagenamedesignators in file: setup-terms.tex: Line 442
 ("packagenamedesignators" "string designators"0)

 )
 tex-macros-alist))
;;; End Definitions from /home/wfs/dpANS2-tex/setup-terms.tex

