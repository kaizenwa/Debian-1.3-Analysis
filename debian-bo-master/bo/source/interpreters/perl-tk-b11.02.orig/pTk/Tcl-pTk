#!/usr/local/bin/perl -w

$src = shift;
$dst = shift;

die "Usage: $0 <src> <dst> \n" unless (defined $src and defined $dst);

unlink($dst);
open(DST,">$dst") || die "Cannot open $dst;$!";
select(DST);


@ARGV = ($src);

undef $undone;

sub getline
{
 local $_;
 if (defined $undone)
  {
   $_ = $undone;
   undef $undone;
  }
 else
  {
   $_ = <>;
  }
 return $_;
}

sub int_results
{my $fmt = shift;
 my $type = shift;
 my @fmt = split(/\s+/,$fmt);
 my $cnt = @fmt;
 # print STDERR "'$fmt' => $cnt\n";
 return "Tcl_${type}Results(interp,$cnt,0";
}

sub result
{my ($interp,$value,$tail) = @_;
 my $line = &getline;
 my $kind = "TCL_STATIC"; 
 if (defined $line)
  {
   if ($line =~ /^\s*$interp\s*->\s*freeProc\s*=\s*(.*)\s*;\s*$/)
    {
     $kind = $1;
    }
   else
    {
     $undone = $line if (defined $line);
    }
  }
 return "Tcl_SetResult($interp,$value,$kind)$tail";
}

sub complete
{
 my $tail = "";
 until (/;/)
  {
   my $line = &getline;
   last unless defined($line);
   s/\s*$//;
   $line =~ s/^\s*//;
   $_ .= " " . $line;
   $tail .= "\n";
  }
 $_ .= $tail;
}


PROCESS:
while ($_ = &getline)
 {
  s/^\s*#\s*include\s*[<"]tcl\.h[">]\s*$/#include "Lang.h"\n/;

  s/^\s*#\s*include\s*<((tk|tkInt|tkPort|tix|tixInt)\.h)>\s*$/#include "$1"\n/;

  next if (/^\s*extern.*\bpanic\s*\(/);

  s/\(char\s*\*\)\s*NULL\b/         NULL/g;

  if (/if\s*\(\(c == '.'\)\s*$/)
   {
    my $line = &getline;
    if (defined($line))
     {
      s/\s*$//;
      $line =~ s/^\s*//;
      $_ .= " " . $line . "\n";
     }
   }

  if (/Tcl_(Create|Delete)Command/)
   {
    if (/Tcl_(Create|Delete)Command[^;{]*$/)
     {
      &complete;
      redo PROCESS;   
     }
    s/Tcl_CreateCommand\s*\(\s*((\w+->)*interp)\s*,\s*Tk_PathName\s*\(([^\)]+)\)/Lang_CreateWidget($1,$3/;
    s/Tcl_DeleteCommand\s*\(\s*((\w+->)*(\w+\.)?interp)\s*,\s*Tcl_GetCommandName\s*\([^,]+,\s*([^\)]+->(\w+\.style|image)Cmd)\)/Lang_DeleteObject($1,$4/;
    s/Tcl_DeleteCommand\s*\(\s*((\w+->)*(\w+\.)?interp)\s*,\s*Tcl_GetCommandName\s*\([^,]+,\s*([^\)]+->widgetCmd)\)/Lang_DeleteWidget($1,$4/;
   }

  if (/\bargv\w*\b/)
   {
    if (/\bargv\w*\s*\[([^[]*)\]\s*=[^=][^;{]*$/)
     {
      &complete;
      redo PROCESS;   
     }
    if (/\bchar\b.*\bargv\w*\b/)
     {
      # convert char *argv[] to char **argv
      s/char\s*\*\s*\bargv\s*\[\s*\]/char **argv/;
      # convert char **argv to Arg *args
      s/char\s*\*\*\s*\bargv\b/Arg *args/;
      # convert char *argv[n] to Arg *args = LangAllocVec(n)
      s/char\s*\*\s*\bargv\s*\[\s*([^[]+)\]/Arg *args = LangAllocVec($1)/;
     }
    else
     {
      s/([^*])\*(argv\w*(\[[^[]*\])?)/${1}${2}[0]/g;
     }
    s/\bargv\s*\[([^[]*)\]\s*=([^=].*);\s*$/LangSetString(args+$1,$2);\n/;
    s/\bargv\s*\[([^[]*)\]\+\+/args[$1] = LangStringArg(LangString(args[$1])+1)/;
#   unless (/\b(str\w+|Tk[A-Za-z0-9_]+)\s*\(/)
#    {
#     # skip things that look like parm list 
#     s/([(,])\s*argv(\w*|\[[^[]*\])\s*([,)])/$1args$2$3/;
#    }
    if (/Tcl_Get(Boolean|Int|Double)/ || /Tk_Get(Cursor)/)
     {
      s/\bargv(\w*)\b/args$1/g;
     }
    s/\bargv\s*(\[[^[]*\])/LangString(args$1)/g;
#   s/((\w+->)+)\bargv(\w+)\b/LangString(${1}args$3)/g;
#   s/\bargv(\w+)\b/LangString(args$1)/g;
    if (/\bargv\b/)
     {
      warn "Leak: $_" unless (/\bargv\s*\)/);
      s/\bargv\b/args/;
     }
   }
  if (/->\s*result\b/)
   {
    s/\s*->\s*result\b/->result/g;

    s/\bsprintf\s*\(\s*interp->result\s*,\s*"((\s*%d)+)"/&int_results($1,"Int")/e;

    s/\bsprintf\s*\(\s*interp->result\s*,\s*"((\s*%g)+)"/&int_results($1,"Double")/e;

    s/\bsprintf\s*\(\s*interp->result\b/Tcl_SprintfResult(interp/;
    if (/\binterp->result\s*=[^;]*$/)
     {
      &complete;
      redo PROCESS;   
     }
    s/\b((\w+\s*->\s*)*interp)->result\s*=([^;]*);/&result($1,$3,";")/e;
    s/\b((\w+\s*->\s*)*interp)->result\s*=(.*);\s*$/&result($1,$3,";\n")/e;
    s/\b((\w+\s*->\s*)*interp)->result/Tcl_GetResult($1)/;
   }

  if (/\bTcl_SetResult\s*\(/)
   {
    if (/Tcl_SetResult\s*\([^;{]*$/)
     {
      &complete;
      redo PROCESS;   
     }
    s/Tcl_SetResult\s*\(\s*((\w+->)*interp),\s*Tk_PathName\(([^)]+)\),\s*TCL_STATIC\s*\)/Tcl_ArgResult($1,LangWidgetArg($1,$3))/; 
    s/Tcl_SetResult\s*\(\s*((\w+->)*interp),\s*((\w+->)*\w+)->pathName\s*,\s*TCL_STATIC\s*\)/Tcl_ArgResult($1,LangWidgetArg($1,(Tk_Window)($3)))/; 
    die $_ if /(Tk_PathName|->pathName)/;
   }
#            1             2                 3           4                  5                           6
  s/\(c == '(.)'\)\s*&&\s*(\()?\(strncmp\(([^,]+),\s*("-\1[^"]*"),\s*(\w+|strlen\(\3\))\s*\)\s*==\s*0\)(\))?/(c == '$1') && $2 LangCmpOpt($4,$3,$5) == 0 $6/g;
  s/\(c == '(.)'\)\s*&&\s*\(strcmp\(([^,]+),\s*("-\1[^"]*")\s*\)\s*==\s*0\)/(c == '$1') && LangCmpOpt($3,$2,0) == 0/g;
  
  print;

  if (0)
   {
    if (/^\s\*\s*Copyright/)
     {
      print " *\n * Modifications Copyright (c) 1994 Nick Ing-Simmons\n";
     }
      
    if (/^\s\*\s*all copies of this software./)
     {
      print 
" * References to THE UNIVERSITY OF CALIFORNIA in the following paragraphs
 * should be read as THE UNIVERSITY OF CALIFORNIA OR ANY OF THE AUTHORS.\n";
     }
   }
 }

select(STDOUT);
close(DST);

chmod(0444,$dst);

exit 0;
