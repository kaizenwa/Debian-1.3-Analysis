This is Info file gforth.info, produced by Makeinfo-1.55 from the input
file gforth.texi.

   This file documents Gforth 0.2

   Copyright (C) 1995,1996 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
 are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this      manual under the conditions for verbatim copying, provided
also that the      sections entitled "Distribution" and "General Public
License" are      included exactly as in the original, and provided
that the entire      resulting derived work is distributed under the
terms of a permission      notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual      into another language, under the above conditions for
modified versions,      except that the sections entitled
"Distribution" and "General Public      License" may be included in a
translation approved by the author instead      of in the original
English.


File: gforth.info,  Node: Top,  Next: License,  Prev: (dir),  Up: (dir)

   Gforth is a free implementation of ANS Forth available on many
personal machines. This manual corresponds to version 0.2.

* Menu:

* License::
* Goals::                       About the Gforth Project
* Other Books::                 Things you might want to read
* Invocation::                  Starting Gforth
* Words::                       Forth words available in Gforth
* Tools::                       Programming tools
* ANS conformance::             Implementation-defined options etc.
* Model::                       The abstract machine of Gforth
* Integrating Gforth::          Forth as scripting language for applications.
* Emacs and Gforth::            The Gforth Mode
* Internals::                   Implementation details
* Bugs::                        How to report them
* Origin::                      Authors and ancestors of Gforth
* Word Index::                  An item for each Forth word
* Node Index::                  An item for each node


File: gforth.info,  Node: License,  Next: Goals,  Prev: Top,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: gforth.info,  Node: Goals,  Next: Other Books,  Prev: License,  Up: Top

Goals of Gforth
***************

   The goal of the Gforth Project is to develop a standard model for
ANSI Forth. This can be split into several subgoals:

   * Gforth should conform to the ANSI Forth standard.

   * It should be a model, i.e. it should define all the
     implementation-dependent things.

   * It should become standard, i.e. widely accepted and used. This goal
     is the most difficult one.

   To achieve these goals Gforth should be
   * Similar to previous models (fig-Forth, F83)

   * Powerful. It should provide for all the things that are considered
     necessary today and even some that are not yet considered
     necessary.

   * Efficient. It should not get the reputation of being exceptionally
     slow.

   * Free.

   * Available on many machines/easy to port.

   Have we achieved these goals? Gforth conforms to the ANS Forth
standard. It may be considered a model, but we have not yet documented
which parts of the model are stable and which parts we are likely to
change. It certainly has not yet become a de facto standard. It has some
similarities and some differences to previous models. It has some
powerful features, but not yet everything that we envisioned. We
certainly have achieved our execution speed goals (*note
Performance::.).  It is free and available on many machines.


File: gforth.info,  Node: Other Books,  Next: Invocation,  Prev: Goals,  Up: Top

Other books on ANS Forth
************************

   As the standard is relatively new, there are not many books out yet.
It is not recommended to learn Forth by using Gforth and a book that is
not written for ANS Forth, as you will not know your mistakes from the
deviations of the book.

   There is, of course, the standard, the definite reference if you
want to write ANS Forth programs. It is available in printed form from
the National Standards Institute Sales Department (Tel.: USA (212)
642-4900; Fax.: USA (212) 302-1286) as document `X3.215-1994' for about
$200. You can also get it from Global Engineering Documents (Tel.: USA
(800) 854-7179; Fax.: (303) 843-9880) for about $300.

   `dpANS6', the last draft of the standard, which was then submitted
to ANSI for publication is available electronically and for free in
some MS Word format, and it has been converted to HTML. Some pointers
to these versions can be found through
`http://www.complang.tuwien.ac.at/projects/forth.html'.

   `Forth: The new model' by Jack Woehr (Prentice-Hall, 1993) is an
introductory book based on a draft version of the standard. It does not
cover the whole standard. It also contains interesting background
information (Jack Woehr was in the ANS Forth Technical Committe). It is
not appropriate for complete newbies, but programmers experienced in
other languages should find it ok.


File: gforth.info,  Node: Invocation,  Next: Words,  Prev: Other Books,  Up: Top

Invocation
**********

   You will usually just say `gforth'. In many other cases the default
Gforth image will be invoked like this:

     gforth [files] [-e forth-code]

   executing the contents of the files and the Forth code in the order
they are given.

   In general, the command line looks like this:

     gforth [initialization options] [image-specific options]

   The initialization options must come before the rest of the command
line. They are:

`--image-file FILE'
`-i FILE'
     Loads the Forth image FILE instead of the default `gforth.fi'.

`--path PATH'
`-p PATH'
     Uses PATH for searching the image file and Forth source code files
     instead of the default in the environment variable `GFORTHPATH' or
     the path specified at installation time (e.g.,
     `/usr/local/share/gforth/0.2.0:.'). A path is given as a list of
     directories, separated by `:' (on Unix) or `;' (on other OSs).

`--dictionary-size SIZE'
`-m SIZE'
     Allocate SIZE space for the Forth dictionary space instead of
     using the default specified in the image (typically 256K). The
     SIZE specification consists of an integer and a unit (e.g., `4M').
     The unit can be one of `b' (bytes), `e' (element size, in this
     case Cells), `k' (kilobytes), and `M' (Megabytes). If no unit is
     specified, `e' is used.

`--data-stack-size SIZE'
`-d SIZE'
     Allocate SIZE space for the data stack instead of using the
     default specified in the image (typically 16K).

`--return-stack-size SIZE'
`-r SIZE'
     Allocate SIZE space for the return stack instead of using the
     default specified in the image (typically 16K).

`--fp-stack-size SIZE'
`-f SIZE'
     Allocate SIZE space for the floating point stack instead of using
     the default specified in the image (typically 16K). In this case
     the unit specifier `e' refers to floating point numbers.

`--locals-stack-size SIZE'
`-l SIZE'
     Allocate SIZE space for the locals stack instead of using the
     default specified in the image (typically 16K).

   As explained above, the image-specific command-line arguments for the
default image `gforth.fi' consist of a sequence of filenames and `-e
FORTH-CODE' options that are interpreted in the seqence in which they
are given. The `-e FORTH-CODE' or `--evaluate FORTH-CODE' option
evaluates the forth code. This option takes only one argument; if you
want to evaluate more Forth words, you have to quote them or use
several `-e's. To exit after processing the command line (instead of
entering interactive mode) append `-e bye' to the command line.

   If you have several versions of Gforth installed, `gforth' will
invoke the version that was installed last. `gforth-VERSION' invokes a
specific version. You may want to use the option `--path', if your
environment contains the variable `GFORTHPATH'.

   Not yet implemented: On startup the system first executes the system
initialization file (unless the option `--no-init-file' is given; note
that the system resulting from using this option may not be ANS Forth
conformant). Then the user initialization file `.gforth.fs' is
executed, unless the option `--no-rc' is given; this file is first
searched in `.', then in `~', then in the normal path (see above).


File: gforth.info,  Node: Words,  Next: Tools,  Prev: Invocation,  Up: Top

Forth Words
***********

* Menu:

* Notation::
* Arithmetic::
* Stack Manipulation::
* Memory access::
* Control Structures::
* Locals::
* Defining Words::
* Tokens for Words::
* Wordlists::
* Files::
* Blocks::
* Other I/O::
* Programming Tools::
* Assembler and Code words::
* Threading Words::


File: gforth.info,  Node: Notation,  Next: Arithmetic,  Prev: Words,  Up: Words

Notation
========

   The Forth words are described in this section in the glossary
notation that has become a de-facto standard for Forth texts, i.e.

WORD     STACK EFFECT   WORDSET   PRONUNCIATION
   DESCRIPTION

WORD
     The name of the word. BTW, Gforth is case insensitive, so you can
     type the words in in lower case (However, *note core-idef::.).

STACK EFFECT
     The stack effect is written in the notation `BEFORE -- AFTER',
     where BEFORE and AFTER describe the top of stack entries before
     and after the execution of the word. The rest of the stack is not
     touched by the word. The top of stack is rightmost, i.e., a stack
     sequence is written as it is typed in. Note that Gforth uses a
     separate floating point stack, but a unified stack notation. Also,
     return stack effects are not shown in STACK EFFECT, but in
     DESCRIPTION. The name of a stack item describes the type and/or
     the function of the item. See below for a discussion of the types.

     All words have two stack effects: A compile-time stack effect and a
     run-time stack effect. The compile-time stack-effect of most words
     is  - . If the compile-time stack-effect of a word deviates from
     this standard behaviour, or the word does other unusual things at
     compile time, both stack effects are shown; otherwise only the
     run-time stack effect is shown.

PRONUNCIATION
     How the word is pronounced

WORDSET
     The ANS Forth standard is divided into several wordsets. A standard
     system need not support all of them. So, the fewer wordsets your
     program uses the more portable it will be in theory. However, we
     suspect that most ANS Forth systems on personal machines will
     feature all wordsets. Words that are not defined in the ANS
     standard have `gforth' or `gforth-internal' as wordset. `gforth'
     describes words that will work in future releases of Gforth;
     `gforth-internal' words are more volatile. Environmental query
     strings are also displayed like words; you can recognize them by
     the `environment' in the wordset field.

DESCRIPTION
     A description of the behaviour of the word.

   The type of a stack item is specified by the character(s) the name
starts with:

`f'
     Bool, i.e. `false' or `true'.

`c'
     Char

`w'
     Cell, can contain an integer or an address

`n'
     signed integer

`u'
     unsigned integer

`d'
     double sized signed integer

`ud'
     double sized unsigned integer

`r'
     Float (on the FP stack)

`a_'
     Cell-aligned address

`c_'
     Char-aligned address (note that a Char may have two bytes in
     Windows NT)

`f_'
     Float-aligned address

`df_'
     Address aligned for IEEE double precision float

`sf_'
     Address aligned for IEEE single precision float

`xt'
     Execution token, same size as Cell

`wid'
     Wordlist ID, same size as Cell

`f83name'
     Pointer to a name structure

`"'
     string in the input stream (not the stack). The terminating
     character is a blank by default. If it is not a blank, it is shown
     in `<>' quotes.


File: gforth.info,  Node: Arithmetic,  Next: Stack Manipulation,  Prev: Notation,  Up: Words

Arithmetic
==========

   Forth arithmetic is not checked, i.e., you will not hear about
integer overflow on addition or multiplication, you may hear about
division by zero if you are lucky. The operator is written after the
operands, but the operands are still in the original order. I.e., the
infix `2-1' corresponds to `2 1 -'. Forth offers a variety of division
operators. If you perform division with potentially negative operands,
you do not want to use `/' or `/mod' with its undefined behaviour, but
rather `fm/mod' or `sm/mod' (probably the former, *note Mixed
precision::.).

* Menu:

* Single precision::
* Bitwise operations::
* Mixed precision::             operations with single and double-cell integers
* Double precision::            Double-cell integer arithmetic
* Floating Point::


File: gforth.info,  Node: Single precision,  Next: Bitwise operations,  Prev: Arithmetic,  Up: Arithmetic

Single precision
----------------

`+'       n1 n2 -- n       core       ``plus''

`-'       n1 n2 -- n       core       ``minus''

`*'       n1 n2 -- n       core       ``star''

`/'       n1 n2 -- n       core       ``slash''

`mod'       n1 n2 -- n       core       ``mod''

`/mod'       n1 n2 -- n3 n4       core       ``slash-mod''

`negate'       n1 -- n2       core       ``negate''

`abs'       n1 -- n2       core       ``abs''

`min'       n1 n2 -- n       core       ``min''

`max'       n1 n2 -- n       core       ``max''


File: gforth.info,  Node: Bitwise operations,  Next: Mixed precision,  Prev: Single precision,  Up: Arithmetic

Bitwise operations
------------------

`and'       w1 w2 -- w       core       ``and''

`or'       w1 w2 -- w       core       ``or''

`xor'       w1 w2 -- w       core       ``xor''

`invert'       w1 -- w2       core       ``invert''

`2*'       n1 -- n2       core       ``two-star''

`2/'       n1 -- n2       core       ``two-slash''


File: gforth.info,  Node: Mixed precision,  Next: Double precision,  Prev: Bitwise operations,  Up: Arithmetic

Mixed precision
---------------

`m+'       d1 n -- d2       double       ``m-plus''

`*/'       n1 n2 n3 -- n4         core       ``star-slash''

`*/mod'       n1 n2 n3 -- n4 n5         core       ``star-slash-mod''

`m*'       n1 n2 -- d       core       ``m-star''

`um*'       u1 u2 -- ud       core       ``u-m-star''

`m*/'       d1 n2 u3 -- dqout         double       ``m-star-slash''

`um/mod'       ud u1 -- u2 u3       core       ``u-m-slash-mod''

`fm/mod'       d1 n1 -- n2 n3       core       ``f-m-slash-mod''
   floored division: d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1

`sm/rem'       d1 n1 -- n2 n3       core       ``s-m-slash-rem''
   symmetric division: d1 = n3*n1+n2, sign(n2)=sign(d1) or 0


File: gforth.info,  Node: Double precision,  Next: Floating Point,  Prev: Mixed precision,  Up: Arithmetic

Double precision
----------------

   The outer (aka text) interpreter converts numbers containing a dot
into a double precision number. Note that only numbers with the dot as
last character are standard-conforming.

`d+'       d1 d2 -- d       double       ``d-plus''

`d-'       d1 d2 -- d       double       ``d-minus''

`dnegate'       d1 -- d2       double       ``dnegate''

`dabs'       d1 -- d2         double       ``dabs''

`dmin'       d1 d2 -- d         double       ``dmin''

`dmax'       d1 d2 -- d         double       ``dmax''


File: gforth.info,  Node: Floating Point,  Prev: Double precision,  Up: Arithmetic

Floating Point
--------------

   The format of floating point numbers recognized by the outer (aka
text) interpreter is: a signed decimal number, possibly containing a
decimal point (`.'), followed by `E' or `e', optionally followed by a
signed integer (the exponent). E.g., `1e' ist the same as `+1.0e+0'.
Note that a number without `e' is not interpreted as floating-point
number, but as double (if the number contains a `.') or single
precision integer. Also, conversions between string and floating point
numbers always use base 10, irrespective of the value of `BASE'. If
`BASE' contains a value greater then 14, the `E' may be interpreted as
digit and the number will be interpreted as integer, unless it has a
signed exponent (both `+' and `-' are allowed as signs).

   Angles in floating point operations are given in radians (a full
circle has 2 pi radians). Note, that Gforth has a separate floating
point stack, but we use the unified notation.

   Floating point numbers have a number of unpleasant surprises for the
unwary (e.g., floating point addition is not associative) and even a few
for the wary. You should not use them unless you know what you are doing
or you don't care that the results you get are totally bogus. If you
want to learn about the problems of floating point numbers (and how to
avoid them), you might start with `David Goldberg, What Every Computer
Scientist Should Know About Floating-Point Arithmetic, ACM Computing
Surveys 23(1):5-48, March 1991'.

`f+'       r1 r2 -- r3       float       ``f-plus''

`f-'       r1 r2 -- r3       float       ``f-minus''

`f*'       r1 r2 -- r3       float       ``f-star''

`f/'       r1 r2 -- r3       float       ``f-slash''

`fnegate'       r1 -- r2       float       ``fnegate''

`fabs'       r1 -- r2       float-ext       ``fabs''

`fmax'       r1 r2 -- r3       float       ``fmax''

`fmin'       r1 r2 -- r3       float       ``fmin''

`floor'       r1 -- r2       float       ``floor''
   round towards the next smaller integral value, i.e., round toward
negative infinity

`fround'       r1 -- r2       float       ``fround''
   round to the nearest integral value

`f**'       r1 r2 -- r3       float-ext       ``f-star-star''
   r3 is r1 raised to the r2th power

`fsqrt'       r1 -- r2       float-ext       ``fsqrt''

`fexp'       r1 -- r2       float-ext       ``fexp''

`fexpm1'       r1 -- r2       float-ext       ``fexpm1''
   r2=e**r1-1

`fln'       r1 -- r2       float-ext       ``fln''

`flnp1'       r1 -- r2       float-ext       ``flnp1''
   r2=ln(r1+1)

`flog'       r1 -- r2       float-ext       ``flog''
   the decimal logarithm

`falog'       r1 -- r2       float-ext       ``falog''
   r2=10**r1

`fsin'       r1 -- r2       float-ext       ``fsin''

`fcos'       r1 -- r2       float-ext       ``fcos''

`fsincos'       r1 -- r2 r3       float-ext       ``fsincos''
   r2=sin(r1), r3=cos(r1)

`ftan'       r1 -- r2       float-ext       ``ftan''

`fasin'       r1 -- r2       float-ext       ``fasin''

`facos'       r1 -- r2       float-ext       ``facos''

`fatan'       r1 -- r2       float-ext       ``fatan''

`fatan2'       r1 r2 -- r3       float-ext       ``fatan2''
   r1/r2=tanr3. The standard does not require, but probably intends
this to be the inverse of `fsincos'. In gforth it is.

`fsinh'       r1 -- r2       float-ext       ``fsinh''

`fcosh'       r1 -- r2       float-ext       ``fcosh''

`ftanh'       r1 -- r2       float-ext       ``ftanh''

`fasinh'       r1 -- r2       float-ext       ``fasinh''

`facosh'       r1 -- r2       float-ext       ``facosh''

`fatanh'       r1 -- r2       float-ext       ``fatanh''


File: gforth.info,  Node: Stack Manipulation,  Next: Memory access,  Prev: Arithmetic,  Up: Words

Stack Manipulation
==================

   Gforth has a data stack (aka parameter stack) for characters, cells,
addresses, and double cells, a floating point stack for floating point
numbers, a return stack for storing the return addresses of colon
definitions and other data, and a locals stack for storing local
variables. Note that while every sane Forth has a separate floating
point stack, this is not strictly required; an ANS Forth system could
theoretically keep floating point numbers on the data stack. As an
additional difficulty, you don't know how many cells a floating point
number takes. It is reportedly possible to write words in a way that
they work also for a unified stack model, but we do not recommend trying
it. Instead, just say that your program has an environmental dependency
on a separate FP stack.

   Also, a Forth system is allowed to keep the local variables on the
return stack. This is reasonable, as local variables usually eliminate
the need to use the return stack explicitly. So, if you want to produce
a standard complying program and if you are using local variables in a
word, forget about return stack manipulations in that word (see the
standard document for the exact rules).

* Menu:

* Data stack::
* Floating point stack::
* Return stack::
* Locals stack::
* Stack pointer manipulation::


File: gforth.info,  Node: Data stack,  Next: Floating point stack,  Prev: Stack Manipulation,  Up: Stack Manipulation

Data stack
----------

`drop'       w --       core       ``drop''

`nip'       w1 w2 -- w2       core-ext       ``nip''

`dup'       w -- w w       core       ``dup''

`over'       w1 w2 -- w1 w2 w1       core       ``over''

`tuck'       w1 w2 -- w2 w1 w2       core-ext       ``tuck''

`swap'       w1 w2 -- w2 w1       core       ``swap''

`rot'       w1 w2 w3 -- w2 w3 w1       core       ``rote''

`-rot'       w1 w2 w3 -- w3 w1 w2       gforth       ``not-rote''

`?dup'       w -- w       core       ``question-dupe''

`pick'       u -- w       core-ext       ``pick''

`roll'       x0 x1 .. xn n -- x1 .. xn x0         core-ext       ``roll''

`2drop'       w1 w2 --       core       ``two-drop''

`2nip'       w1 w2 w3 w4 -- w3 w4       gforth       ``two-nip''

`2dup'       w1 w2 -- w1 w2 w1 w2       core       ``two-dupe''

`2over'       w1 w2 w3 w4 -- w1 w2 w3 w4 w1 w2       core       ``two-over''

`2tuck'       w1 w2 w3 w4 -- w3 w4 w1 w2 w3 w4       gforth       ``two-tuck''

`2swap'       w1 w2 w3 w4 -- w3 w4 w1 w2       core       ``two-swap''

`2rot'       w1 w2 w3 w4 w5 w6 -- w3 w4 w5 w6 w1 w2       double-ext       ``two-rote''


File: gforth.info,  Node: Floating point stack,  Next: Return stack,  Prev: Data stack,  Up: Stack Manipulation

Floating point stack
--------------------

`fdrop'       r --       float       ``fdrop''

`fnip'       r1 r2 -- r2       gforth       ``fnip''

`fdup'       r -- r r       float       ``fdup''

`fover'       r1 r2 -- r1 r2 r1       float       ``fover''

`ftuck'       r1 r2 -- r2 r1 r2       gforth       ``ftuck''

`fswap'       r1 r2 -- r2 r1       float       ``fswap''

`frot'       r1 r2 r3 -- r2 r3 r1       float       ``frot''


File: gforth.info,  Node: Return stack,  Next: Locals stack,  Prev: Floating point stack,  Up: Stack Manipulation

Return stack
------------

`>r'       w --       core       ``to-r''

`r>'       -- w       core       ``r-from''

`r@'       -- w       core       ``r-fetch''

`rdrop'       --       gforth       ``rdrop''

`2>r'       w1 w2 --       core-ext       ``two-to-r''

`2r>'       -- w1 w2       core-ext       ``two-r-from''

`2r@'       -- w1 w2       core-ext       ``two-r-fetch''

`2rdrop'       --       gforth       ``two-r-drop''


File: gforth.info,  Node: Locals stack,  Next: Stack pointer manipulation,  Prev: Return stack,  Up: Stack Manipulation

Locals stack
------------


File: gforth.info,  Node: Stack pointer manipulation,  Prev: Locals stack,  Up: Stack Manipulation

Stack pointer manipulation
--------------------------

`sp@'       -- a-addr       gforth       ``spat''

`sp!'       a-addr --       gforth       ``spstore''

`fp@'       -- f-addr       gforth       ``fp-fetch''

`fp!'       f-addr --       gforth       ``fp-store''

`rp@'       -- a-addr       gforth       ``rpat''

`rp!'       a-addr --       gforth       ``rpstore''

`lp@'       -- addr         gforth       ``l-p-fetch''

`lp!'       c-addr --       gforth       ``lp-store''


File: gforth.info,  Node: Memory access,  Next: Control Structures,  Prev: Stack Manipulation,  Up: Words

Memory access
=============

* Menu:

* Stack-Memory transfers::
* Address arithmetic::
* Memory block access::


File: gforth.info,  Node: Stack-Memory transfers,  Next: Address arithmetic,  Prev: Memory access,  Up: Memory access

Stack-Memory transfers
----------------------

`@'       a-addr -- w       core       ``fetch''

`!'       w a-addr --       core       ``store''

`+!'       n a-addr --       core       ``plus-store''

`c@'       c-addr -- c       core       ``cfetch''

`c!'       c c-addr --       core       ``cstore''

`2@'       a-addr -- w1 w2       core       ``two-fetch''

`2!'       w1 w2 a-addr --       core       ``two-store''

`f@'       f-addr -- r       float       ``f-fetch''

`f!'       r f-addr --       float       ``f-store''

`sf@'       sf-addr -- r       float-ext       ``s-f-fetch''

`sf!'       r sf-addr --       float-ext       ``s-f-store''

`df@'       df-addr -- r       float-ext       ``d-f-fetch''

`df!'       r df-addr --       float-ext       ``d-f-store''


File: gforth.info,  Node: Address arithmetic,  Next: Memory block access,  Prev: Stack-Memory transfers,  Up: Memory access

Address arithmetic
------------------

   ANS Forth does not specify the sizes of the data types. Instead, it
offers a number of words for computing sizes and doing address
arithmetic. Basically, address arithmetic is performed in terms of
address units (aus); on most systems the address unit is one byte. Note
that a character may have more than one au, so `chars' is no noop (on
systems where it is a noop, it compiles to nothing).

   ANS Forth also defines words for aligning addresses for specific
addresses. Many computers require that accesses to specific data types
must only occur at specific addresses; e.g., that cells may only be
accessed at addresses divisible by 4. Even if a machine allows unaligned
accesses, it can usually perform aligned accesses faster.

   For the performance-conscious: alignment operations are usually only
necessary during the definition of a data structure, not during the
(more frequent) accesses to it.

   ANS Forth defines no words for character-aligning addresses. This is
not an oversight, but reflects the fact that addresses that are not
char-aligned have no use in the standard and therefore will not be
created.

   The standard guarantees that addresses returned by `CREATE'd words
are cell-aligned; in addition, Gforth guarantees that these addresses
are aligned for all purposes.

   Note that the standard defines a word `char', which has nothing to
do with address arithmetic.

`chars'       n1 -- n2         core       ``chars''

`char+'       c-addr1 -- c-addr2       core       ``care-plus''

`cells'       n1 -- n2       core       ``cells''

`cell+'       a-addr1 -- a-addr2       core       ``cell-plus''

`align'       --         core       ``align''

`aligned'       c-addr -- a-addr       core       ``aligned''

`floats'       n1 -- n2       float       ``floats''

`float+'       f-addr1 -- f-addr2       float       ``float-plus''

`falign'       --         float       ``falign''

`faligned'       c-addr -- f-addr       float       ``f-aligned''

`sfloats'       n1 -- n2       float-ext       ``s-floats''

`sfloat+'       sf-addr1 -- sf-addr2         float-ext       ``s-float-plus''

`sfalign'       --         float-ext       ``s-f-align''

`sfaligned'       c-addr -- sf-addr       float-ext       ``s-f-aligned''

`dfloats'       n1 -- n2       float-ext       ``d-floats''

`dfloat+'       df-addr1 -- df-addr2         float-ext       ``d-float-plus''

`dfalign'       --         float-ext       ``d-f-align''

`dfaligned'       c-addr -- df-addr       float-ext       ``d-f-aligned''

`maxalign'       --         gforth       ``maxalign''

`maxaligned'       addr1 -- addr2         gforth       ``maxaligned''

`cfalign'       --         gforth       ``cfalign''

`cfaligned'       addr1 -- addr2         gforth       ``cfaligned''

`ADDRESS-UNIT-BITS'       -- n         environment       ``ADDRESS-UNIT-BITS''


File: gforth.info,  Node: Memory block access,  Prev: Address arithmetic,  Up: Memory access

Memory block access
-------------------

`move'       c-from c-to ucount --       core       ``move''

`erase'       addr len --         core-ext       ``erase''

   While the previous words work on address units, the rest works on
characters.

`cmove'       c-from c-to u --       string       ``cmove''

`cmove>'       c-from c-to u --       string       ``c-move-up''

`fill'       c-addr u c --       core       ``fill''

`blank'       addr len --         string       ``blank''


File: gforth.info,  Node: Control Structures,  Next: Locals,  Prev: Memory access,  Up: Words

Control Structures
==================

   Control structures in Forth cannot be used in interpret state, only
in compile state, i.e., in a colon definition. We do not like this
limitation, but have not seen a satisfying way around it yet, although
many schemes have been proposed.

* Menu:

* Selection::
* Simple Loops::
* Counted Loops::
* Arbitrary control structures::
* Calls and returns::
* Exception Handling::


File: gforth.info,  Node: Selection,  Next: Simple Loops,  Prev: Control Structures,  Up: Control Structures

Selection
---------

     FLAG
     IF
       CODE
     ENDIF
   or
     FLAG
     IF
       CODE1
     ELSE
       CODE2
     ENDIF

   You can use `THEN' instead of `ENDIF'. Indeed, `THEN' is standard,
and `ENDIF' is not, although it is quite popular. We recommend using
`ENDIF', because it is less confusing for people who also know other
languages (and is not prone to reinforcing negative prejudices against
Forth in these people). Adding `ENDIF' to a system that only supplies
`THEN' is simple:
     : endif   POSTPONE then ; immediate

   [According to `Webster's New Encyclopedic Dictionary', "then (adv.)"
has the following meanings:
     ... 2b: following next after in order ... 3d: as a necessary
     consequence (if you were there, then you saw them).
   Forth's `THEN' has the meaning 2b, whereas `THEN' in Pascal and many
other programming languages has the meaning 3d.]

   Gforth also provides the words `?dup-if' and `?dup-0=-if', so you
can avoid using `?dup'. Using these alternatives is also more efficient
than using `?dup'. Definitions in plain standard Forth for `ENDIF',
`?DUP-IF' and `?DUP-0=-IF' are provided in `compat/control.fs'.

     N
     CASE
       N1 OF CODE1 ENDOF
       N2 OF CODE2 ENDOF
       ...
     ENDCASE

   Executes the first CODEI, where the NI is equal to N. A default case
can be added by simply writing the code after the last `ENDOF'. It may
use N, which is on top of the stack, but must not consume it.


File: gforth.info,  Node: Simple Loops,  Next: Counted Loops,  Prev: Selection,  Up: Control Structures

Simple Loops
------------

     BEGIN
       CODE1
       FLAG
     WHILE
       CODE2
     REPEAT

   CODE1 is executed and FLAG is computed. If it is true, CODE2 is
executed and the loop is restarted; If FLAG is false, execution
continues after the `REPEAT'.

     BEGIN
       CODE
       FLAG
     UNTIL

   CODE is executed. The loop is restarted if `flag' is false.

     BEGIN
       CODE
     AGAIN

   This is an endless loop.

