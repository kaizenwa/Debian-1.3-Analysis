.TH "ObjDic" 3 "Oct 30, 1996"
.SH CLASS
.B
ObjDic
.SH SUPERCLASS
ObjPak
.SH DESCRIPTION
.PP

Dictionaries (instances of the 
.B
ObjDic 
class) are key-value tables : to each key object, a value object is associated.  The key can then be used to access the corresponding value.  There are a few special provisions for tables with 
.B
ObjStr 
instances as keys.
.SH METHOD TYPES
.PP
.B
Creation
.RS 3
new
.br
copy
.br
deepCopy
.br
emptyYourself
.br
freeContents
.br
free
.br
.RE
.PP
.B
Interrogation
.RS 3
size
.br
isEmpty
.br
includesKey:
.br
.RE
.PP
.B
Comparing
.RS 3
hash
.br
isEqual:
.br
.RE
.PP
.B
Indexed Access
.RS 3
atKey:
.br
atKeySTR:
.br
atKey:put:
.br
atKeySTR:put:
.br
eachKey
.br
eachValue
.br
.RE
.PP
.B
Printing
.RS 3
printToFile:
.br
.RE
.PP
.B
NextStep Archiving
.RS 3
write:
.br
read:
.br
.RE
.SH METHODS
.PP
.B
new
.RS 1
+
.B
new
.RE
.PP

Returns a new empty dictionary.
.PP
.B
copy
.RS 1
-
.B
copy
.RE
.PP

Returns a new copy of the dictionary.
.PP
.B
deepCopy
.RS 1
-
.B
deepCopy
.RE
.PP

Returns a new copy of the dictionary.  The members in the new dictionary are deep copies of the members in the original dictionary.
.PP
.B
emptyYourself
.RS 1
-
.B
emptyYourself
.RE
.PP

Removes all the keys and values of the dictionary (without freeing them).  Returns the receiver.
.PP
.B
freeContents
.RS 1
-
.B
freeContents
.RE
.PP

Removes and frees all the members of the receiver, but doesn\&'t free the receiver itself.  Returns the receiver.
.PP
.B
free
.RS 1
-
.B
free
.RE
.PP

Frees the dictionary, but not its contents.  Returns 
.B
nil.  
Do :
.RS 3

aDic = [[aDic freeObjects] free];
.br
.RE
.PP

if you want to free the dictionary and its contents.
.PP
.B
size
.RS 1
- (unsigned)
.B
size
.RE
.PP

Returns the number of key-value associations in the dictionary.
.PP
.B
isEmpty
.RS 1
- (BOOL)
.B
isEmpty
.RE
.PP

Whether the number of associations in the dictionary is equal to zero.
.PP
.B
includesKey:
.RS 1
- (BOOL)
.B
includesKey:
.I
aKey
.RE
.PP

Returns YES if there is an association with key matching 
.I
aKey.
.PP
.B
hash
.RS 1
- (unsigned)
.B
hash
.RE
.PP

Returns a hash value based on the receiver\&'s address and the results of sending the 
.B
hash 
message to the contents.
.PP
.B
isEqual:
.RS 1
- (BOOL)
.B
isEqual:
.I
aDic
.RE
.PP

Returns YES if 
.I
aDic 
is a dictionary, and if its keys and values respond affirmatively to the message 
.B
isEqual: 
when compared to the corresponding objects of the receiver\&'s contents.
.PP
.B
atKey:
.RS 1
-
.B
atKey:
.I
aKey
.RE
.PP

Returns the value of the association matching 
.I
aKey.  
Returns 
.B
nil 
if the association is not found.
.PP
.B
atKeySTR:
.RS 1
-
.B
atKeySTR:
(STR)
.I
strKey
.RE
.PP

Returns the value of the association matching 
.I
strKey.  
Returns 
.B
nil 
if the association is not found.
.PP
.B
atKey:put:
.RS 1
-
.B
atKey:
.I
aKey
.B
put:
.I
anObject
.RE
.PP

Associates 
.I
aKey 
to 
.I
anObject.  
Adds the objects to the dictionary.  If 
.I
aKey 
was already in the dictionary, makes 
.I
anObject 
the value for this key and returns the old value.  Otherwise returns 
.B
nil.
.PP
.B
atKeySTR:put:
.RS 1
-
.B
atKeySTR:
(STR)
.I
strKey
.B
put:
.I
anObject
.RE
.PP

Associates 
.I
strKey 
to 
.I
anObject.  
Adds the objects to the dictionary.  If 
.I
strKey 
was already in the dictionary, makes 
.I
anObject 
the value for this key and returns the old value.  Otherwise returns 
.B
nil.
.PP
.B
eachKey
.RS 1
-
.B
eachKey
.RE
.PP

Returns a sequence of the key objects in the dictionary.
.RS 3

keys = [aDic eachKey];
.br
while ((aKey = [aSeq next])) {
.br
    /* do something */
.br
}
.br
keys = [keys free];
.br
.RE
.PP
.B
See also: 
eachValue
.PP
.B
eachValue
.RS 1
-
.B
eachValue
.RE
.PP

Returns a sequence of the value objects in the dictionary.
.RS 3

keys   = [aDic eachKey];
.br
values = [aDic eachValue];
.br
while ((aKey = [aSeq next])) {
.br
    aValue = [values next];
.br
    /* do something */
.br
}
.br
keys   = [keys free];
.br
values = [values free];
.br
.RE
.PP
.B
See also: 
eachKey
.PP
.B
printToFile:
.RS 1
-
.B
printToFile:
(FILE *)
.I
aFile
.RE
.PP

Prints a comma separated list of the key-value pairs by sending each individual object a 
.B
printToFile: 
message.  Returns the receiver.
.PP
.B
write:
.RS 1
-
.B
write:
(NXTypedStream *)
.I
stream
.RE
.PP

Archives the dictionary and its set of key-values associations to 
.I
stream.
.PP
.B
read:
.RS 1
-
.B
read:
(NXTypedStream *)
.I
stream
.RE
.PP

Unarchives the dictionary and its set of key-values associations from 
.I
stream.
