.TH "ObjStr" 3 "Oct 30, 1996"
.SH CLASS
.B
ObjStr
.SH SUPERCLASS
ObjPak
.SH DESCRIPTION
.PP

Strings are used to hold conventional, NULL-terminated C strings of characters.  String objects can, unlike ordinary C strings, easily be added to collections or sets.  They are also very useful as keys in a dictionary object.
.PP

New instances are usually created via 
.B
str:
, which initializes the object to a copy of the argument (a C string).  Another factory method is the 
.B
sprintf: 
method which supports the options of the C library function, 
.I
sprintf().
.PP

It\&'s possible to compare 
.B
ObjStr 
instances using the methods 
.B
compare: 
and 
.B
dictCompare:.  
These methods return an integer which is less than, equal to, or greater than zero, if the receiver is less than, equal to, or greater than the argument object.
.PP

You can randomly access the characters in a string object using the 
.B
charAt: 
and 
.B
charAt:put: 
methods.  The latter method replaces the character at the indicated offset by a new character, and returns the old value.
.PP

Finally, using such methods as 
.B
toLower
, 
.B
toUpper 
etc., instances can do various conversions on their contents.
.SH METHOD TYPES
.PP
.B
Creation
.RS 3
new
.br
str:
.br
sprintf:
.br
copy
.br
deepCopy
.br
free
.br
.RE
.PP
.B
Comparison
.RS 3
compare:
.br
compareSTR:
.br
hash
.br
dictCompare:
.br
isEqual:
.br
isEqualSTR:
.br
.RE
.PP
.B
Interrogation
.RS 3
size
.br
charAt:
.br
charAt:put:
.br
.RE
.PP
.B
Concatenation
.RS 3
strcat:
.br
concatSTR:
.br
assignSTR:
.br
assignSTR:length:
.br
.RE
.PP
.B
Format Conversions
.RS 3
asDouble
.br
asInt
.br
asLong
.br
asSTR:maxSize:
.br
str
.br
strCopy
.br
.RE
.PP
.B
Conversions
.RS 3
toLower
.br
toUpper
.br
.RE
.PP
.B
Printing
.RS 3
printToFile:
.br
.RE
.PP
.B
NextStep Archiving
.RS 3
write:
.br
read:
.br
.RE
.SH METHODS
.PP
.B
new
.RS 1
+
.B
new
.RE
.PP

Creates an instance whose value is set to the empty string.
.PP
.B
str:
.RS 1
+
.B
str:
(STR)
.I
strValue
.RE
.PP

Creates an instance whose value is set to a copy of 
.I
strValue.  
If 
.I
strValue 
is NULL, creates an instance whose value is set to the empty string. 
.PP
.B
sprintf:
.RS 1
+
.B
sprintf:
(STR)
.I
format,...
.RE
.PP

Returns a new instace initialized just as the standard C library 
.I
sprintf().  
See the documentation on 
.I
sprintf() 
for the formats and variable declarations.
.PP
.B
copy
.RS 1
-
.B
copy
.RE
.PP

Returns a copy of the receiver with its internal C string copied as well.
.PP
.B
See also: 
- strCopy
.PP
.B
deepCopy
.RS 1
-
.B
deepCopy
.RE
.PP

For this class, this method acts as 
.B
copy.
.PP
.B
free
.RS 1
-
.B
free
.RE
.PP

Frees the receiver and its internal C string as well.
.PP
.B
compare:
.RS 1
- (int)
.B
compare:
.I
aStr
.RE
.PP

Compares the receiver\&'s string to another instance of this class (or its subclasses).  Returns the comparison value.
.PP
.B
compareSTR:
.RS 1
- (int)
.B
compareSTR:
(STR)
.I
strValue
.RE
.PP

Compares the receiver\&'s string to 
.I
strValue.  
Returns the comparison value.
.PP
.B
hash
.RS 1
- (unsigned)
.B
hash
.RE
.PP

Returns a hash value based upon the contents of the string held in the receiver.
.PP
.B
dictCompare:
.RS 1
- (int)
.B
dictCompare:
.I
aStr
.RE
.PP

Compares the receiver\&'s string to another instance of this class, or its subclasses, according to 
.I
dictionary ordering
, i.e., all characters other than letters and numbers are ignored and case is ignored.  Returns the comparison value.
.PP
.B
isEqual:
.RS 1
- (BOOL)
.B
isEqual:
.I
aStr
.RE
.PP

Returns YES if the value contained by 
.I
aStr 
is equal to the contents of the receiver.
.PP
.B
isEqualSTR:
.RS 1
- (BOOL)
.B
isEqualSTR:
(STR)
.I
strValue
.RE
.PP

Returns YES if the ordinary C string 
.I
strValue 
is equal to the contents of the receiver.
.PP
.B
size
.RS 1
- (unsigned)
.B
size
.RE
.PP

Returns the number of actual characters in the string, excluding the NULL terminator.
.PP
.B
charAt:
.RS 1
- (char)
.B
charAt:
(unsigned)
.I
anOffset
.RE
.PP

Returns the character at 
.I
anOffset 
or 
.B
zero 
if 
.I
anOffset 
is greater than the length of the C string.
.PP
.B
charAt:put:
.RS 1
- (char)
.B
charAt:
(unsigned)
.I
anOffset
.B
put:
(char)
.I
aChar
.RE
.PP

Replaces the character at 
.I
anOffset 
with 
.I
aChar 
and returns the old character which was in that location.  Returns 
.B
zero 
if 
.I
anOffset 
is greater than the length of the C string.
.PP
.B
strcat:
.RS 1
- (STR)
.B
strcat:
(STR)
.I
aBuffer
.RE
.PP

Concatenates the receiver\&'s C string to 
.I
aBuffer.  
No length checking is possible to ensure that 
.I
aBuffer 
is large enough.  Returns 
.I
aBuffer.
.PP
.B
concatSTR:
.RS 1
-
.B
concatSTR:
(STR)
.I
strValue
.RE
.PP

Concatenates 
.I
strValue
, an ordinary C string, to the end of the receiver.  Returns 
.B
self.
.PP
.B
assignSTR:
.RS 1
-
.B
assignSTR:
(STR)
.I
strValue
.RE
.PP

Copies the C string 
.I
strValue 
into the receiver\&'s string.  Returns the receiver.
.PP
.B
assignSTR:length:
.RS 1
-
.B
assignSTR:
(STR)
.I
strValue
.B
length:
(unsigned)
.I
nChars
.RE
.PP

Copies the C string 
.I
strValue 
into the receiver\&'s string, truncating at 
.I
nChars.  
Returns the receiver.
.PP
.B
asDouble
.RS 1
- (double)
.B
asDouble
.RE
.PP

Returns the double value of the C string, using the standard C function 
.B
atof().
.PP
.B
asInt
.RS 1
- (int)
.B
asInt
.RE
.PP

Returns the integer value of the C string, using the standard C function 
.B
atoi().
.PP
.B
asLong
.RS 1
- (long)
.B
asLong
.RE
.PP

Returns the long value of the C string, using the standard C function 
.B
atol().
.PP
.B
asSTR:maxSize:
.RS 1
-
.B
asSTR:
(STR)
.I
aBuffer
.B
maxSize:
(int)
.I
aSize
.RE
.PP

Copies the value of the object into 
.I
aBuffer
, truncating at 
.I
aSize
, and returns the receiver.
.PP
.B
str
.RS 1
- (STR)
.B
str
.RE
.PP

Returns a pointer to the NULL-terminated C string stored in the receiver.
.PP
.B
strCopy
.RS 1
- (STR)
.B
strCopy
.RE
.PP

Returns a 
.B
malloc()
\&'ed copy of the NULL-terminated C string stored in the receiver.  You are responsible for 
.B
free()
\&'ing the pointer.
.PP
.B
toLower
.RS 1
-
.B
toLower
.RE
.PP

Converts the receiver string to lower case.
.PP
.B
toUpper
.RS 1
-
.B
toUpper
.RE
.PP

Converts the receiver string to upper case.
.PP
.B
printToFile:
.RS 1
-
.B
printToFile:
(FILE *)
.I
aFile
.RE
.PP

Prints the string to 
.I
aFile 
without appending a newline.  Returns the receiver.
.PP
.B
write:
.RS 1
-
.B
write:
(NXTypedStream *)
.I
stream
.RE
.PP

Writes the string to 
.I
stream.  
Returns the receiver.
.PP
.B
read:
.RS 1
-
.B
read:
(NXTypedStream *)
.I
stream
.RE
.PP

Reads a string object from 
.I
stream.  
Returns the receiver.
