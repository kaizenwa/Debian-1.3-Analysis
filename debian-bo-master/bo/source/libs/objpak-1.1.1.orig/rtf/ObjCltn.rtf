{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}
\paperw16220
\paperh18640
\margl40
\margr40
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\f0\b0\i0\ulnone\fs24\fc0\cf0 ObjectPak Objective C Class Library
\fs16 \
\
\
\
\
\
\

\f1\b\fs56\li2200 ObjCltn\

\f0\b0\fs16 \
\
\
\
\
\

\f1\b\fs28 Inherits From: 
\f0\b0 ObjPak
\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Class Description\

\f0\b0\fs16 \

\b\fs28\li2200 ObjCltn
\b0  instances are ordered collections of objects : you can access, add or remove elements at a specified offset in the array of elements.  
\b ObjCltn
\b0  takes care of the memory allocation issues to hold the objects.\

\fs16 \

\fs28 There can be no 
\b nil
\b0  entries between the first (at offset 0) and last  elements (at 
\b size
\b0  minus one).  For this reason, all methods that add objects refuse to add 
\b nil
\b0 's.  When entries are added or removed, the offsets of the remaining entries change.\

\fs16 \

\fs28 Offsets into collections are traditionally unsigned integers.  Methods that return an offset, e.g., 
\b offsetOf:
\b0  and 
\b lastOffset
\b0  return a value of (unsigned)-1 to indicate that an object has not been found.\

\fs16 \

\fs28 There are many methods for adding or inserting members into a collection.  Although members may be added at any point in the collection, they are generally added at the end using 
\b add:
\b0 .\

\fs16 \

\fs28 A member may be searched for using either the 
\b find:
\b0  or 
\b findMatching:
\b0  method.  In the first case, the member in the collection must be an exact match.  In the second case, the member must match in the sense of the 
\b isEqual:
\b0  method.\

\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Method Types\

\f0\b0\fs16 \
\

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Creation	+ new\
	- copy\
	- deepCopy\
	- emptyYourself\
	- freeContents\
	- free\

\fs16 \

\fs28 Interrogation	- size\
	- isEmpty\
	- lastOffset\
	- eachElement\
	- firstElement\
	- lastElement\

\fs16 \

\fs28 Comparing	- hash\
	- isEqual:\

\fs16 \

\fs28 Adding	- add:\
	- addFirst:\
	- addLast:\
	- addIfAbsent:\
	- addIfAbsentMatching:\

\fs16 \

\fs28 Insertion	- at:insert:\
	- insert:after:\
	- insert:before:\

\fs16 \

\fs28 Relative Accessing	- after:\
	- before:\
	- at:\
	- at:put:\

\fs16 \

\fs28 Removing	- removeFirst\
	- removeLast\
	- removeAt:\
	- remove:\

\fs16 \

\fs28 Adding and Removing Contents	- addContentsTo:\
	- addContentsOf:\
	- removeContentsOf:\
	- removeContentsFrom:\

\fs16 \

\fs28 Locating	- find:\
	- findMatching:\
	- findSTR:\
	- contains:\
	- offsetOf:\

\fs16 \

\fs28 Printing	- printToFile:\

\fs16 \

\fs28 NextStep Archiving	- write:\
	- read:\

\fs16 \
\
\
\
\

\f1\b\fs36\fi0\li1400 Methods\

\f0\b0\fs16 \
\
\
\

\f1\b\fs28\li2200 new\

\f0\b0\li2500 +
\b  new\

\b0\fs16 \

\fs28\li2200 Returns a new empty collection.\

\fs16 \
\
\
\

\f1\b\fs28 copy\

\f0\b0\li2500 -
\b  copy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the collection.\

\fs16 \
\
\
\

\f1\b\fs28 deepCopy\

\f0\b0\li2500 -
\b  deepCopy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the collection.  The members in the new collection are deep copies of the members in the original collection.\

\fs16 \
\
\
\

\f1\b\fs28 emptyYourself\

\f0\b0\li2500 -
\b  emptyYourself\

\b0\fs16 \

\fs28\li2200 Removes all the members of the collection (without freeing them).  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 freeContents\

\f0\b0\li2500 -
\b  freeContents\

\b0\fs16 \

\fs28\li2200 Removes and frees all the members of the receiver, but doesn't free the receiver itself.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 free\

\f0\b0\li2500 -
\b  free\

\b0\fs16 \

\fs28\li2200 Frees the collection, but not its contents.  Returns 
\b nil
\b0 .  Do :\

\fs16 \

\f2\fs24\li2800 aCltn = [[aCltn freeObjects] free];\

\f0\fs16 \

\fs28\li2200 if you want to free the collection and its contents.\

\fs16 \
\
\
\

\f1\b\fs28 size\

\f0\b0\li2500 - (unsigned)
\b  size\

\b0\fs16 \

\fs28\li2200 Returns the number of objects in the collection.\

\fs16 \
\
\
\

\f1\b\fs28 isEmpty\

\f0\b0\li2500 - (BOOL)
\b  isEmpty\

\b0\fs16 \

\fs28\li2200 Whether the number of objects in the collection is equal to zero.\

\fs16 \
\
\
\

\f1\b\fs28 lastOffset\

\f0\b0\li2500 - (unsigned)
\b  lastOffset\

\b0\fs16 \

\fs28\li2200 Returns the offset of the last element.  If there are no elements it returns (unsigned)-1.\

\fs16 \
\
\
\

\f1\b\fs28 eachElement\

\f0\b0\li2500 -
\b  eachElement\

\b0\fs16 \

\fs28\li2200 Returns a sequence of the elements in the collection.\

\fs16 \

\f2\fs24\li2800 aSeq = [aCltn eachElement];\
while ((anElement = [aSeq next])) \{\
    /* do something */\
\}\
aSeq = [aSeq free];\

\f0\fs16 \
\
\
\

\f1\b\fs28\li2200 firstElement\

\f0\b0\li2500 -
\b  firstElement\

\b0\fs16 \

\fs28\li2200 Returns the first element in the collection.  If there are no elements, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 lastElement\

\f0\b0\li2500 -
\b  lastElement\

\b0\fs16 \

\fs28\li2200 Returns the last element in the collection.  If there are no elements, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 hash\

\f0\b0\li2500 - (unsigned)
\b  hash\

\b0\fs16 \

\fs28\li2200 Returns a hash value based on the receiver's address and the results of sending the 
\b hash
\b0  message to the contents.\

\fs16 \
\
\
\

\f1\b\fs28 isEqual:\

\f0\b0\li2500 - (BOOL)
\b  isEqual:
\b0\i aCltn\

\i0\fs16 \

\fs28\li2200 Returns YES if 
\i aCltn
\i0  is a collection, and if each member of its contents responds affirmatively to the message 
\b isEqual:
\b0  when compared to the corresponding member of the receiver's contents.\

\fs16 \
\
\
\

\f1\b\fs28 add:\

\f0\b0\li2500 -
\b  add:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  to the collection as the last element and returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 addFirst:\

\f0\b0\li2500 -
\b  addFirst:
\b0\i newObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i newObject
\i0  as the first (zero-th) element of the collection.  Returns the receiver.  Any elements at this offset or higher are relocated to the next higher offset to make room.\

\fs16 \
\
\
\

\f1\b\fs28 addLast:\

\f0\b0\li2500 -
\b  addLast:
\b0\i newObject\

\i0\fs16 \

\fs28\li2200 Identical to the 
\b add:
\b0  method.\

\fs16 \
\
\
\

\f1\b\fs28 addIfAbsent:\

\f0\b0\li2500 -
\b  addIfAbsent:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  to the collection only if the collection does not have that same object, i.e., one that is pointer equal.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 addIfAbsentMatching:\

\f0\b0\li2500 -
\b  addIfAbsentMatching:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  to the collection only if the collection does not have a matching object, i.e., one that is 
\b isEqual:
\b0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 at:insert:\

\f0\b0\li2500 -
\b  at:
\b0 (unsigned )
\i anOffset
\b\i0  insert:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Inserts 
\i anObject
\i0  at offset 
\i anOffset
\i0  and returns the receiver.  Any elements at this offset or higher are relocated to the next higher offet to make room.  If 
\i anOffset
\i0  is greater than the size of the collection, an error is generated.\

\fs16 \
\
\
\

\f1\b\fs28 insert:after:\

\f0\b0\li2500 -
\b  insert:
\b0\i newObject
\b\i0  after:
\b0\i oldObject\

\i0\fs16 \

\fs28\li2200 Searches for 
\i oldObject
\i0  in the collection, and inserts 
\i newObject
\i0  after 
\i oldObject
\i0 , moving later elements if necessary to make room.  If 
\i oldObject
\i0  is not found, an error is generated.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 insert:before:\

\f0\b0\li2500 -
\b  insert:
\b0\i newObject
\b\i0  before:
\b0\i oldObject\

\i0\fs16 \

\fs28\li2200 First searches for 
\i oldObject
\i0  in the collection, and inserts the 
\i newObject
\i0  before 
\i oldObject
\i0 .  If 
\i oldObject
\i0  is not found, an error is generated.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 after:\

\f0\b0\li2500 -
\b  after:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Searches for 
\i anObject
\i0  in the collection and, if found, returns the next object.  If 
\i anObject
\i0  is the last element in the array, returns 
\b nil
\b0 .  Generates an error if 
\i anObject
\i0  cannot be found.\

\fs16 \
\
\
\

\f1\b\fs28 before:\

\f0\b0\li2500 -
\b  before:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Searches for 
\i anObject
\i0  in the collection and, if found, returns the object before it.  If 
\i anObject
\i0  is the first element in the array, returns 
\b nil
\b0 .  Generates an error if 
\i anObject
\i0  cannot be found.\

\fs16 \
\
\
\

\f1\b\fs28 at:\

\f0\b0\li2500 -
\b  at:
\b0 (unsigned )
\i anOffset\

\i0\fs16 \

\fs28\li2200 Returns the object at 
\i anOffset
\i0  with 
\i anObject
\i0  and returns the old member at 
\i anOffset
\i0 .  Generates an error if 
\i anOffset
\i0  is greater than the size of the collection.\

\fs16 \
\
\
\

\f1\b\fs28 at:put:\

\f0\b0\li2500 -
\b  at:
\b0 (unsigned )
\i anOffset
\b\i0  put:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Replaces the object at 
\i anOffset
\i0  with 
\i anObject
\i0  and returns the old member at 
\i anOffset
\i0 .  Generates an error if 
\i anOffset
\i0  is greater than the size of the collection.  Returns 
\b nil
\b0  if 
\i anObject
\i0  is 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 removeFirst\

\f0\b0\li2500 -
\b  removeFirst\

\b0\fs16 \

\fs28\li2200 Removes the first element.  Returns that element or 
\b nil
\b0  if there are no elements.\

\fs16 \
\
\
\

\f1\b\fs28 removeLast\

\f0\b0\li2500 -
\b  removeLast\

\b0\fs16 \

\fs28\li2200 Removes the last element.  Returns that element or 
\b nil
\b0  if there are no elements.\

\fs16 \
\
\
\

\f1\b\fs28 removeAt:\

\f0\b0\li2500 -
\b  removeAt:
\b0 (unsigned )
\i anOffset\

\i0\fs16 \

\fs28\li2200 Removes the object at 
\i anOffset
\i0 .  When an object is removed, the remaining elements are adjusted so that there are no 
\b nil
\b0  entries between the first and last element.  This adjustment shrinks the collection and changes the offset of the entries.  Returns the object removed.\

\fs16 \
\
\
\

\f1\b\fs28 remove:\

\f0\b0\li2500 -
\b  remove:
\b0\i oldObject\

\i0\fs16 \

\fs28\li2200 Removes 
\i oldObject
\i0  from the collection if 
\i oldObject
\i0  is found, and returns 
\i oldObject
\i0 .  Otherwise returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 addContentsTo:\

\f0\b0\li2500 -
\b  addContentsTo:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds every element of the receiver to 
\i aCol
\i0  and returns 
\i aCol
\i0 .  If 
\i aCol
\i0  is 
\b nil
\b0 , returns 
\b nil
\b0 .  The argument 
\i aCol
\i0  need not actually be a collection, as long as it responds to 
\b add:
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 addContentsOf:\

\f0\b0\li2500 -
\b  addContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds each member of 
\i aCol
\i0  to the receiver.  Returns the receiver.  If 
\i aCol
\i0  is 
\b nil
\b0 , no action is taken.  The argument 
\i aCol
\i0  need not be a collection, so long as it responds to 
\b eachElement
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsOf:\

\f0\b0\li2500 -
\b  removeContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of 
\i aCol
\i0  from the receiver.  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b eachElement
\b0  as collections do.\

\fs16 \

\fs28 If 
\i aCol
\i0  is the same object as the receiver, it empties itself using 
\b emptyYourself
\b0  and returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsFrom:\

\f0\b0\li2500 -
\b  removeContentsFrom:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of the receiver from 
\i aCol
\i0 .  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b remove:
\b0  in the same way as collections.\

\fs16 \
\
\
\

\f1\b\fs28 find:\

\f0\b0\li2500 -
\b  find:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns the first member which is the same as 
\i anObject
\i0 , i.e., which is pointer equal.  If none is found, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 findMatching:\

\f0\b0\li2500 -
\b  findMatching:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns the first member which matches 
\i anObject
\i0 , i.e., using 
\b isEqual:
\b0  for comparison.  If none is found, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 findSTR:\

\f0\b0\li2500 -
\b  findSTR:
\b0 (STR )
\i strValue\

\i0\fs16 \

\fs28\li2200 Returns the first member whose string contents matches 
\i strValue
\i0 , using the 
\b isEqualSTR:
\b0  method for comparison.  If none is found, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 contains:\

\f0\b0\li2500 - (BOOL)
\b  contains:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns YES if the receiver contains 
\i anObject
\i0 .  Otherwise, returns NO.  Implementation is in terms of the receiver's 
\b find:
\b0  method.\

\fs16 \
\
\
\

\f1\b\fs28 offsetOf:\

\f0\b0\li2500 - (unsigned)
\b  offsetOf:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Searches for 
\i anObject
\i0  in the contents and returns the offset of the 
\b first
\b0  pointer equal object it finds.  Otherwise, returns (unsigned)-1.  If 
\i anObject
\i0  is 
\b nil
\b0 , also returns (unsigned)-1.\

\fs16 \
\
\
\

\f1\b\fs28 printToFile:\

\f0\b0\li2500 -
\b  printToFile:
\b0 (FILE *)
\i aFile\

\i0\fs16 \

\fs28\li2200 Prints a list of the objects in the objects by sending each individual object a 
\b printToFile:
\b0  message.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 write:\

\f0\b0\li2500 -
\b  write:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Writes the collection and all its elements to the typed stream 
\i stream
\i0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 read:\

\f0\b0\li2500 -
\b  read:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Reads the collection and all its members from the typed stream 
\i stream
\i0 .  Returns the receiver.\

}
