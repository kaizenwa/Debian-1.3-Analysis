{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}
\paperw16220
\paperh18640
\margl40
\margr40
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\f0\b0\i0\ulnone\fs24\fc0\cf0 ObjectPak Objective C Class Library
\fs16 \
\
\
\
\
\
\

\f1\b\fs56\li2200 ObjSet\

\f0\b0\fs16 \
\
\
\
\
\

\f1\b\fs28 Inherits From: 
\f0\b0 ObjPak
\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Class Description\

\f0\b0\fs16 \

\b\fs28\li2200 ObjSet
\b0  instances are sets of objects with no duplicate (in the sense of 
\b isEqual:
\b0 ) entries.  The 
\b ObjDic
\b0  class provides a key-value based interface to sets, and may sometimes be more convenient to use.\

\fs16 \

\fs28 To make Sets correctly work, the objects have to implement a pair of comparison methods which must act in a coordinated way :\

\fs16 \

\fs28 The message\

\fs16 \

\f2\fs24\li2800 [newElement isEqual:oldElement]\

\f0\fs16 \

\fs28\li2200 is expected to report whether 
\i newElement
\i0  is equal to 
\i oldElement
\i0 .\

\fs16 \

\fs28 The message\

\fs16 \

\f2\fs24\li2800 [newElement hash]\

\f0\fs16 \

\fs28\li2200 should return an integer which is equal for all objects for which 
\b isEqual:
\b0  is true. \

\fs16 \

\fs28 Sets place all objects added to them into a hash table based on the results of sending the objects the 
\b hash
\b0  message.  
\b ObjSet
\b0  assumes that, after being added to a set, objects, and their hash value, will not be changed.  If any object does change, it will not be located properly in the set.  The result of this is that the object will not be found or that it will be added to the set more than once.\

\fs16 \
\

\f1\b\fs28 Adding Objects\

\f0\b0\fs16 \

\fs28 The methods 
\b add:
\b0 , 
\b addNTest:
\b0 , 
\b filter:
\b0  and 
\b replace:
\b0  are used to add objects to a set.  The difference between these methods is the procedure used in adding, how duplicates are handled and what value is returned.\

\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Method Types\

\f0\b0\fs16 \
\

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Creation	+ new\
	- copy\
	- deepCopy\
	- emptyYourself\
	- freeContents\
	- free\

\fs16 \

\fs28 Interrogation	- size\
	- isEmpty\
	- eachElement\

\fs16 \

\fs28 Comparing	- hash\
	- isEqual:\

\fs16 \

\fs28 Adding	- add:\
	- addNTest:\
	- filter:\
	- replace:\

\fs16 \

\fs28 Removing	- remove:\

\fs16 \

\fs28 Adding and Removing Contents	- addContentsTo:\
	- addContentsOf:\
	- removeContentsOf:\
	- removeContentsFrom:\

\fs16 \

\fs28 Locating	- find:\
	- contains:\
	- occurrencesOf:\

\fs16 \

\fs28 Combining	- intersection:\
	- union:\
	- difference:\

\fs16 \

\fs28 Printing	- printToFile:\

\fs16 \

\fs28 NextStep Archiving	- write:\
	- read:\

\fs16 \
\
\
\
\

\f1\b\fs36\fi0\li1400 Methods\

\f0\b0\fs16 \
\
\
\

\f1\b\fs28\li2200 new\

\f0\b0\li2500 +
\b  new\

\b0\fs16 \

\fs28\li2200 Returns a new empty set.\

\fs16 \
\
\
\

\f1\b\fs28 copy\

\f0\b0\li2500 -
\b  copy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the set.\

\fs16 \
\
\
\

\f1\b\fs28 deepCopy\

\f0\b0\li2500 -
\b  deepCopy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the set.  The elements in the new set are deep copies of the elements in the original set.\

\fs16 \
\
\
\

\f1\b\fs28 emptyYourself\

\f0\b0\li2500 -
\b  emptyYourself\

\b0\fs16 \

\fs28\li2200 Empties all the members of the set (without freeing them).  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 freeContents\

\f0\b0\li2500 -
\b  freeContents\

\b0\fs16 \

\fs28\li2200 Removes and frees all the members of the set, but doesn't free the set itself.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 free\

\f0\b0\li2500 -
\b  free\

\b0\fs16 \

\fs28\li2200 Frees the set, but not its elements.  Returns 
\b nil
\b0 .  Do :\

\fs16 \

\f2\fs24\li2800 aSet = [[aSet freeObjects] free];\

\f0\fs16 \

\fs28\li2200 if you want to free the set and its contents.\

\fs16 \
\
\
\

\f1\b\fs28 size\

\f0\b0\li2500 - (unsigned)
\b  size\

\b0\fs16 \

\fs28\li2200 Returns the number of elements in the set.\

\fs16 \
\
\
\

\f1\b\fs28 isEmpty\

\f0\b0\li2500 - (BOOL)
\b  isEmpty\

\b0\fs16 \

\fs28\li2200 Whether the number of objects in the set is equal to zero.\

\fs16 \
\
\
\

\f1\b\fs28 eachElement\

\f0\b0\li2500 -
\b  eachElement\

\b0\fs16 \

\fs28\li2200 Returns a sequence of elements in the set.\

\fs16 \

\f2\fs24\li2800 aSeq = [aSet eachElement];\
while ((anElement = [aSeq next])) \{\
    /* do something */\
\}\
aSeq = [aSeq free];\

\f0\fs16 \
\
\
\

\f1\b\fs28\li2200 hash\

\f0\b0\li2500 - (unsigned)
\b  hash\

\b0\fs16 \

\fs28\li2200 Returns a hash value based on the receiver's address and the results of sending the 
\b hash
\b0  message to the contents.\

\fs16 \
\
\
\

\f1\b\fs28 isEqual:\

\f0\b0\li2500 - (BOOL)
\b  isEqual:
\b0\i aSet\

\i0\fs16 \

\fs28\li2200 Returns YES if 
\i aSet
\i0  is a set, and if each member of its contents responds affirmatively to the message 
\b isEqual:
\b0  when compared to the corresponding member of the receiver's contents.\

\fs16 \
\
\
\

\f1\b\fs28 add:\

\f0\b0\li2500 -
\b  add:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  if it was not previously in the set, but doesn't inform the caller about the addition because the receiver is always returned.\

\fs16 \
\
\
\

\f1\b\fs28 addNTest:\

\f0\b0\li2500 -
\b  addNTest:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  if it was not previously in the set.  Returns 
\i anObject
\i0  if the addition takes place, otherwise returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 filter:\

\f0\b0\li2500 -
\b  filter:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 The 
\b filter:
\b0  method has a special purpose.  If there is a matching object in the set, then 
\i anObject
\i0  is freed, and the matching object is returned.  Otherwise, 
\i anObject
\i0  is added and returned.\

\fs16 \
\
\
\

\f1\b\fs28 replace:\

\f0\b0\li2500 -
\b  replace:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 If a matching object is found, then 
\i anObject
\i0  replaces that object, and the matching object is returned.  If there is no matching object, 
\i anObject
\i0  is added to the receiver, and 
\b nil
\b0  is returned.\

\fs16 \
\
\
\

\f1\b\fs28 remove:\

\f0\b0\li2500 -
\b  remove:
\b0\i oldObject\

\i0\fs16 \

\fs28\li2200 Removes 
\i oldObject
\i0  or the element which matches it using 
\b isEqual:
\b0 .  Returns the removed entry, or 
\b nil
\b0  if there is no matching entry.\

\fs16 \
\
\
\

\f1\b\fs28 addContentsTo:\

\f0\b0\li2500 -
\b  addContentsTo:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds every element of the receiver to 
\i aCol
\i0  and returns 
\i aCol
\i0 .  If 
\i aCol
\i0  is 
\b nil
\b0 , returns 
\b nil
\b0 .  The argument 
\i aCol
\i0  need not actually be a collection, as long as it responds to 
\b add:
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 addContentsOf:\

\f0\b0\li2500 -
\b  addContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds each member of 
\i aCol
\i0  to the receiver.  Returns the receiver.  If 
\i aCol
\i0  is 
\b nil
\b0 , no action is taken.  The argument 
\i aCol
\i0  need not be a collection, so long as it responds to 
\b eachElement
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsOf:\

\f0\b0\li2500 -
\b  removeContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of 
\i aCol
\i0  from the receiver.  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b eachElement
\b0  as collections do.\

\fs16 \

\fs28 If 
\i aCol
\i0  is the same object as the receiver, it empties itself using 
\b emptyYourself
\b0  and returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsFrom:\

\f0\b0\li2500 -
\b  removeContentsFrom:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of the receiver from 
\i aCol
\i0 .  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b remove:
\b0  in the same way as collections.\

\fs16 \
\
\
\

\f1\b\fs28 find:\

\f0\b0\li2500 -
\b  find:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns any element in the receiver which 
\b isEqual:
\b0  to 
\i anObject
\i0 .  Otherwise, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 contains:\

\f0\b0\li2500 - (BOOL)
\b  contains:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns YES if the receiver contains 
\i anObject
\i0 .  Otherwise, returns NO.  Implementation is in terms of the receiver's 
\b find:
\b0  method.\

\fs16 \
\
\
\

\f1\b\fs28 occurrencesOf:\

\f0\b0\li2500 - (unsigned)
\b  occurrencesOf:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns 1 if 
\i anObject
\i0  is in the receiver, otherwise returns 0.  Implementation is in terms of the receiver's 
\b find:
\b0  method.\

\fs16 \
\
\
\

\f1\b\fs28 intersection:\

\f0\b0\li2500 -
\b  intersection:
\b0\i aSet\

\i0\fs16 \

\fs28\li2200 Returns a new set which is the intersection of the receiver and 
\i aSet
\i0 .  The new set contains only those elements that were in both the receiver and 
\i aSet
\i0 .  The argument 
\i aSet
\i0  need not be an actual 
\b ObjSet
\b0  instance, as long as it implements 
\b find:
\b0  as sets do.\

\fs16 \
\
\
\

\f1\b\fs28 union:\

\f0\b0\li2500 -
\b  union:
\b0\i aSet\

\i0\fs16 \

\fs28\li2200 Returns a new set which is the union of the receiver and 
\i aSet
\i0 .  The new set returned has all the elements from both the receiver and 
\i aSet
\i0 .  The argument 
\i aSet
\i0  need not be an actual 
\b ObjSet
\b0  instance, as long as it implements 
\b eachElement:
\b0  as sets do.\

\fs16 \
\
\
\

\f1\b\fs28 difference:\

\f0\b0\li2500 -
\b  difference:
\b0\i aSet\

\i0\fs16 \

\fs28\li2200 Returns a new set which is the difference of the receiver and 
\i aSet
\i0 .  The new set returned has only those elements in the receiver that are not in 
\i aSet
\i0 .\

\fs16 \
\
\
\

\f1\b\fs28 printToFile:\

\f0\b0\li2500 -
\b  printToFile:
\b0 (FILE *)
\i aFile\

\i0\fs16 \

\fs28\li2200 Prints a list of the objects in the set by sending each individual object a 
\b printToFile:
\b0  message.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 write:\

\f0\b0\li2500 -
\b  write:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Writes the set and all its elements to the typed stream 
\i stream
\i0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 read:\

\f0\b0\li2500 -
\b  read:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Reads the set and all its elements from the typed stream 
\i stream
\i0 .  The implementation of 
\b hash
\b0  of an element may not change during unarchiving. Returns the receiver.\

}
