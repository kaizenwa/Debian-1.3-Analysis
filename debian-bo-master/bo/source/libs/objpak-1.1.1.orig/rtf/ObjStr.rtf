{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;}
\paperw16220
\paperh18640
\margl40
\margr40
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\f0\b0\i0\ulnone\fs24\fc0\cf0 ObjectPak Objective C Class Library
\fs16 \
\
\
\
\
\
\

\f1\b\fs56\li2200 ObjStr\

\f0\b0\fs16 \
\
\
\
\
\

\f1\b\fs28 Inherits From: 
\f0\b0 ObjPak
\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Class Description\

\f0\b0\fs16 \

\fs28\li2200 Strings are used to hold conventional, NULL-terminated C strings of characters.  String objects can, unlike ordinary C strings, easily be added to collections or sets.  They are also very useful as keys in a dictionary object.\

\fs16 \

\fs28 New instances are usually created via 
\b str:
\b0 , which initializes the object to a copy of the argument (a C string).  Another factory method is the 
\b sprintf:
\b0  method which supports the options of the C library function, 
\i sprintf()
\i0 .\

\fs16 \

\fs28 It's possible to compare 
\b ObjStr
\b0  instances using the methods 
\b compare:
\b0  and 
\b dictCompare:
\b0 .  These methods return an integer which is less than, equal to, or greater than zero, if the receiver is less than, equal to, or greater than the argument object.\

\fs16 \

\fs28 You can randomly access the characters in a string object using the 
\b charAt:
\b0  and 
\b charAt:put:
\b0  methods.  The latter method replaces the character at the indicated offset by a new character, and returns the old value.\

\fs16 \

\fs28 Finally, using such methods as 
\b toLower
\b0 , 
\b toUpper
\b0  etc., instances can do various conversions on their contents.\

\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Method Types\

\f0\b0\fs16 \
\

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Creation	+ new\
	+ str:\
	+ sprintf:\
	- copy\
	- deepCopy\
	- free\

\fs16 \

\fs28 Comparison	- compare:\
	- compareSTR:\
	- hash\
	- dictCompare:\
	- isEqual:\
	- isEqualSTR:\

\fs16 \

\fs28 Interrogation	- size\
	- charAt:\
	- charAt:put:\

\fs16 \

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Concatenation	- strcat:\
	- concatSTR:\
	- assignSTR:\
	- assignSTR:length:\

\fs16 \

\fs28 Format Conversions	- asDouble\
	- asInt\
	- asLong\
	- asSTR:maxSize:\
	- str\
	- strCopy\

\fs16 \

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Conversions	- toLower\
	- toUpper\

\fs16 \

\fs28 Printing	- printToFile:\

\fs16 \

\fs28 NextStep Archiving	- write:\
	- read:\

\fs16 \
\
\
\
\

\f1\b\fs36\fi0\li1400 Methods\

\f0\b0\fs16 \
\
\
\

\f1\b\fs28\li2200 new\

\f0\b0\li2500 +
\b  new\

\b0\fs16 \

\fs28\li2200 Creates an instance whose value is set to the empty string.\

\fs16 \
\
\
\

\f1\b\fs28 str:\

\f0\b0\li2500 +
\b  str:
\b0 (STR)
\i strValue\

\i0\fs16 \

\fs28\li2200 Creates an instance whose value is set to a copy of 
\i strValue
\i0 .  If 
\i strValue
\i0  is NULL, creates an instance whose value is set to the empty string. \

\fs16 \
\
\
\

\f1\b\fs28 sprintf:\

\f0\b0\li2500 +
\b  sprintf:
\b0 (STR)
\i format,...\

\i0\fs16 \

\fs28\li2200 Returns a new instace initialized just as the standard C library 
\i sprintf()
\i0 .  See the documentation on 
\i sprintf()
\i0  for the formats and variable declarations.\

\fs16 \
\
\
\

\f1\b\fs28 copy\

\f0\b0\li2500 -
\b  copy\

\b0\fs16 \

\fs28\li2200 Returns a copy of the receiver with its internal C string copied as well.\

\fs16 \

\f1\b\fs28 See also: 
\f0\b0 - strCopy\

\fs16 \
\
\
\

\f1\b\fs28 deepCopy\

\f0\b0\li2500 -
\b  deepCopy\

\b0\fs16 \

\fs28\li2200 For this class, this method acts as 
\b copy
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 free\

\f0\b0\li2500 -
\b  free\

\b0\fs16 \

\fs28\li2200 Frees the receiver and its internal C string as well.\

\fs16 \
\
\
\

\f1\b\fs28 compare:\

\f0\b0\li2500 - (int)
\b  compare:
\b0\i aStr\

\i0\fs16 \

\fs28\li2200 Compares the receiver's string to another instance of this class (or its subclasses).  Returns the comparison value.\

\fs16 \
\
\
\

\f1\b\fs28 compareSTR:\

\f0\b0\li2500 - (int)
\b  compareSTR:
\b0 (STR)
\i strValue\

\i0\fs16 \

\fs28\li2200 Compares the receiver's string to 
\i strValue
\i0 .  Returns the comparison value.\

\fs16 \
\
\
\

\f1\b\fs28 hash\

\f0\b0\li2500 - (unsigned)
\b  hash\

\b0\fs16 \

\fs28\li2200 Returns a hash value based upon the contents of the string held in the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 dictCompare:\

\f0\b0\li2500 - (int)
\b  dictCompare:
\b0\i aStr\

\i0\fs16 \

\fs28\li2200 Compares the receiver's string to another instance of this class, or its subclasses, according to 
\i dictionary ordering
\i0 , i.e., all characters other than letters and numbers are ignored and case is ignored.  Returns the comparison value.\

\fs16 \
\
\
\

\f1\b\fs28 isEqual:\

\f0\b0\li2500 - (BOOL)
\b  isEqual:
\b0\i aStr\

\i0\fs16 \

\fs28\li2200 Returns YES if the value contained by 
\i aStr
\i0  is equal to the contents of the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 isEqualSTR:\

\f0\b0\li2500 - (BOOL)
\b  isEqualSTR:
\b0 (STR)
\i strValue\

\i0\fs16 \

\fs28\li2200 Returns YES if the ordinary C string 
\i strValue
\i0  is equal to the contents of the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 size\

\f0\b0\li2500 - (unsigned)
\b  size\

\b0\fs16 \

\fs28\li2200 Returns the number of actual characters in the string, excluding the NULL terminator.\

\fs16 \
\
\
\

\f1\b\fs28 charAt:\

\f0\b0\li2500 - (char)
\b  charAt:
\b0 (unsigned)
\i anOffset\

\i0\fs16 \

\fs28\li2200 Returns the character at 
\i anOffset
\i0  or 
\b zero
\b0  if 
\i anOffset
\i0  is greater than the length of the C string.\

\fs16 \
\
\
\

\f1\b\fs28 charAt:put:\

\f0\b0\li2500 - (char)
\b  charAt:
\b0 (unsigned)
\i anOffset
\b\i0  put:
\b0 (char)
\i aChar\

\i0\fs16 \

\fs28\li2200 Replaces the character at 
\i anOffset
\i0  with 
\i aChar
\i0  and returns the old character which was in that location.  Returns 
\b zero
\b0  if 
\i anOffset
\i0  is greater than the length of the C string.\

\fs16 \
\
\
\

\f1\b\fs28 strcat:\

\f0\b0\li2500 - (STR)
\b  strcat:
\b0 (STR)
\i aBuffer\

\i0\fs16 \

\fs28\li2200 Concatenates the receiver's C string to 
\i aBuffer
\i0 .  No length checking is possible to ensure that 
\i aBuffer
\i0  is large enough.  Returns 
\i aBuffer
\i0 .\

\fs16 \
\
\
\

\f1\b\fs28 concatSTR:\

\f0\b0\li2500 -
\b  concatSTR:
\b0 (STR)
\i strValue\

\i0\fs16 \

\fs28\li2200 Concatenates 
\i strValue
\i0 , an ordinary C string, to the end of the receiver.  Returns 
\b self
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 assignSTR:\

\f0\b0\li2500 -
\b  assignSTR:
\b0 (STR)
\i strValue\

\i0\fs16 \

\fs28\li2200 Copies the C string 
\i strValue
\i0  into the receiver's string.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 assignSTR:length:\

\f0\b0\li2500 -
\b  assignSTR:
\b0 (STR)
\i strValue
\b\i0  length:
\b0 (unsigned)
\i nChars\

\i0\fs16 \

\fs28\li2200 Copies the C string 
\i strValue
\i0  into the receiver's string, truncating at 
\i nChars
\i0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 asDouble\

\f0\b0\li2500 - (double)
\b  asDouble\

\b0\fs16 \

\fs28\li2200 Returns the double value of the C string, using the standard C function 
\b atof()
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 asInt\

\f0\b0\li2500 - (int)
\b  asInt\

\b0\fs16 \

\fs28\li2200 Returns the integer value of the C string, using the standard C function 
\b atoi()
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 asLong\

\f0\b0\li2500 - (long)
\b  asLong\

\b0\fs16 \

\fs28\li2200 Returns the long value of the C string, using the standard C function 
\b atol()
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 asSTR:maxSize:\

\f0\b0\li2500 -
\b  asSTR:
\b0 (STR)
\i aBuffer
\b\i0  maxSize:
\b0 (int)
\i aSize\

\i0\fs16 \

\fs28\li2200 Copies the value of the object into 
\i aBuffer
\i0 , truncating at 
\i aSize
\i0 , and returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 str\

\f0\b0\li2500 - (STR)
\b  str\

\b0\fs16 \

\fs28\li2200 Returns a pointer to the NULL-terminated C string stored in the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 strCopy\

\f0\b0\li2500 - (STR)
\b  strCopy\

\b0\fs16 \

\fs28\li2200 Returns a 
\b malloc()
\b0 'ed copy of the NULL-terminated C string stored in the receiver.  You are responsible for 
\b free()
\b0 'ing the pointer.\

\fs16 \
\
\
\

\f1\b\fs28 toLower\

\f0\b0\li2500 -
\b  toLower\

\b0\fs16 \

\fs28\li2200 Converts the receiver string to lower case.\

\fs16 \
\
\
\

\f1\b\fs28 toUpper\

\f0\b0\li2500 -
\b  toUpper\

\b0\fs16 \

\fs28\li2200 Converts the receiver string to upper case.\

\fs16 \
\
\
\

\f1\b\fs28 printToFile:\

\f0\b0\li2500 -
\b  printToFile:
\b0 (FILE *)
\i aFile\

\i0\fs16 \

\fs28\li2200 Prints the string to 
\i aFile
\i0  without appending a newline.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 write:\

\f0\b0\li2500 -
\b  write:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Writes the string to 
\i stream
\i0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 read:\

\f0\b0\li2500 -
\b  read:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Reads a string object from 
\i stream
\i0 .  Returns the receiver.\

}
