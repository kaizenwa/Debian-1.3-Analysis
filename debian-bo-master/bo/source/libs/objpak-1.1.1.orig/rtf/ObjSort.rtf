{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fswiss Helvetica;\f2\fmodern Courier;}
\paperw16220
\paperh18640
\margl40
\margr40
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\f0\b0\i0\ulnone\fs24\fc0\cf0 ObjectPak Objective C Class Library
\fs16 \
\
\
\
\
\
\

\f1\b\fs56\li2200 ObjSort\

\f0\b0\fs16 \
\
\
\
\
\

\f1\b\fs28 Inherits From: 
\f0\b0 ObjPak
\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Class Description\

\f0\b0\fs16 \

\b\fs28\li2200 ObjSort
\b0  instances are groups of objects that are kept in sorted order (by default, the first object is the smallest with respect to 
\b compare:
\b0 ).  Inserting and searching objects in such a sorted collection can be faster than using, say an 
\b ObjCltn
\b0  object collection.\

\fs16 \
\

\f1\b\fs28 Creating An Instance\

\f0\b0\fs16 \

\fs28 The method 
\b new
\b0  creates an instance that sorts its elements with respect to 
\b compare:
\b0 .  The method 
\b newDictCompare
\b0  sends 
\b dictCompare:
\b0  messages to compare pairs of elements.\

\fs16 \
\

\f1\b\fs28 Adding Objects\

\f0\b0\fs16 \

\fs28 Normally, you insert an object with the 
\b add:
\b0  method.  This method allows you to add an object to the collection, even when it is equal to an element in the collection (when the comparison method returns zero; because you can use a different method than 
\b compare:
\b0 , this doesn't necessarily mean that 
\b isEqual:
\b0  returns YES).\

\fs16 \

\fs28 You can also choose not to add duplicate entries.  The 
\b addNTest:
\b0  method adds if the object was absent and returns a value that can be used to test whether the object was found or not. The 
\b filter:
\b0  method frees a new entry when it's a duplicate.  The 
\b replace:
\b0  method always replaces duplicates (returning the object that was previously in the collection).\

\fs16 \
\
\
\
\

\f1\b\fs36\li1400 Method Types\

\f0\b0\fs16 \
\

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Creation	+ new\
	+ newDictCompare\
	- copy\
	- deepCopy\
	- emptyYourself\
	- freeContents\
	- free\

\fs16 \

\pard\tx6000\fs28\fi-3800\li6000\fc0\cf0 Interrogation	- size\
	- isEmpty\
	- eachElement\

\fs16 \

\fs28 Comparing	- hash\
	- isEqual:\

\fs16 \

\fs28 Adding	- add:\
	- addNTest:\
	- filter:\
	- replace:\

\fs16 \

\fs28 Removing	- remove:\

\fs16 \

\fs28 Adding and Removing Contents	- addContentsTo:\
	- addContentsOf:\
	- removeContentsOf:\
	- removeContentsFrom:\

\fs16 \

\fs28 Locating	- find:\
	- contains:\

\fs16 \

\fs28 Printing	- printToFile:\

\fs16 \

\fs28 NextStep Archiving	- write:\
	- read:\

\fs16 \
\
\
\
\

\f1\b\fs36\fi0\li1400 Methods\

\f0\b0\fs16 \
\
\
\

\f1\b\fs28\li2200 new\

\f0\b0\li2500 +
\b  new\

\b0\fs16 \

\fs28\li2200 Returns a new instance that sorts its contents with respect to 
\b compare:
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 newDictCompare\

\f0\b0\li2500 +
\b  newDictCompare\

\b0\fs16 \

\fs28\li2200 Returns a new instance that sorts its contents with respect to 
\b dictCompare:
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 copy\

\f0\b0\li2500 -
\b  copy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the object (without copying the elements).\

\fs16 \
\
\
\

\f1\b\fs28 deepCopy\

\f0\b0\li2500 -
\b  deepCopy\

\b0\fs16 \

\fs28\li2200 Returns a new copy of the object.  The elements in the new copy are deep copies of the elements in the original object.\

\fs16 \
\
\
\

\f1\b\fs28 emptyYourself\

\f0\b0\li2500 -
\b  emptyYourself\

\b0\fs16 \

\fs28\li2200 Empties all the members of the object (without freeing them).  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 freeContents\

\f0\b0\li2500 -
\b  freeContents\

\b0\fs16 \

\fs28\li2200 Removes and frees the contents of the object, but doesn't free the object itself.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 free\

\f0\b0\li2500 -
\b  free\

\b0\fs16 \

\fs28\li2200 Frees the object, but not its contents.  Returns 
\b nil
\b0 .  Do :\

\fs16 \

\f2\fs24\li2800 aSort = [[aSort freeObjects] free];\

\f0\fs16 \

\fs28\li2200 if you want to free the object and its contents.\

\fs16 \
\
\
\

\f1\b\fs28 size\

\f0\b0\li2500 - (unsigned)
\b  size\

\b0\fs16 \

\fs28\li2200 Returns the number of elements in the object.\

\fs16 \
\
\
\

\f1\b\fs28 isEmpty\

\f0\b0\li2500 - (BOOL)
\b  isEmpty\

\b0\fs16 \

\fs28\li2200 Whether the number of elements is equal to zero.\

\fs16 \
\
\
\

\f1\b\fs28 eachElement\

\f0\b0\li2500 -
\b  eachElement\

\b0\fs16 \

\fs28\li2200 Returns a sequence of sorted elements.  The first element in the sequence is the smallest with respect to the ordering.\

\fs16 \

\f2\fs24\li2800 aSeq = [aSort eachElement];\
while ((anElement = [aSeq next])) \{\
    /* do something */\
\}\
aSeq = [aSeq free];\

\f0\fs16 \
\
\
\

\f1\b\fs28\li2200 hash\

\f0\b0\li2500 - (unsigned)
\b  hash\

\b0\fs16 \

\fs28\li2200 Returns a hash value based on the receiver's address and the results of sending the 
\b hash
\b0  message to the contents.\

\fs16 \
\
\
\

\f1\b\fs28 isEqual:\

\f0\b0\li2500 - (BOOL)
\b  isEqual:
\b0\i aSort\

\i0\fs16 \

\fs28\li2200 Returns YES if 
\i aSort
\i0  is an 
\b ObjSort
\b0  instance, and if each member of its contents responds affirmatively to the message 
\b isEqual:
\b0  when compared to the corresponding member of the receiver's contents.\

\fs16 \
\
\
\

\f1\b\fs28 add:\

\f0\b0\li2500 -
\b  add:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  to the receiver, keeping the contents of the object sorted.  Duplicate entries are allowed.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 addNTest:\

\f0\b0\li2500 -
\b  addNTest:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Adds 
\i anObject
\i0  if it was not previously in the set.  Returns 
\i anObject
\i0  if the addition takes place, otherwise returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 filter:\

\f0\b0\li2500 -
\b  filter:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 If 
\i anObject
\i0  compares equally to some object in the contents of the receiver, then 
\i anObject
\i0  is freed, and the matching object is returned.  Otherwise, 
\i anObject
\i0  is added and returned.\

\fs16 \
\
\
\

\f1\b\fs28 replace:\

\f0\b0\li2500 -
\b  replace:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 If a matching object is found, then 
\i anObject
\i0  replaces that object, and the matching object is returned.  If there is no matching object, 
\i anObject
\i0  is added to the receiver, and 
\b nil
\b0  is returned.\

\fs16 \
\
\
\

\f1\b\fs28 remove:\

\f0\b0\li2500 -
\b  remove:
\b0\i oldObject\

\i0\fs16 \

\fs28\li2200 Removes 
\i oldObject
\i0  or the element that matches (when the compare method returns zero).  Returns the removed entry, or 
\b nil
\b0  if there is no matching entry.\

\fs16 \

\f1\b\fs28 Note: 
\f0\b0 Not implemented\

\fs16 \
\
\
\

\f1\b\fs28 addContentsTo:\

\f0\b0\li2500 -
\b  addContentsTo:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds every element of the receiver to 
\i aCol
\i0  and returns 
\i aCol
\i0 .  If 
\i aCol
\i0  is 
\b nil
\b0 , returns 
\b nil
\b0 .  The argument 
\i aCol
\i0  need not actually be a collection, as long as it responds to 
\b add:
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 addContentsOf:\

\f0\b0\li2500 -
\b  addContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Adds each member of 
\i aCol
\i0  to the receiver.  Returns the receiver.  If 
\i aCol
\i0  is 
\b nil
\b0 , no action is taken.  The argument 
\i aCol
\i0  need not be a collection, so long as it responds to 
\b eachElement
\b0  in the same way as collections do.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsOf:\

\f0\b0\li2500 -
\b  removeContentsOf:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of 
\i aCol
\i0  from the receiver.  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b eachElement
\b0  as collections do.\

\fs16 \

\fs28 If 
\i aCol
\i0  is the same object as the receiver, it empties itself using 
\b emptyYourself
\b0  and returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 removeContentsFrom:\

\f0\b0\li2500 -
\b  removeContentsFrom:
\b0\i aCol\

\i0\fs16 \

\fs28\li2200 Removes each of the members of the receiver from 
\i aCol
\i0 .  Returns the receiver.  The argument 
\i aCol
\i0  need not be a collection, as long as it responds to 
\b remove:
\b0  in the same way as collections.\

\fs16 \
\
\
\

\f1\b\fs28 find:\

\f0\b0\li2500 -
\b  find:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns any element in the receiver which 
\b isEqual:
\b0  to 
\i anObject
\i0 .  Otherwise, returns 
\b nil
\b0 .\

\fs16 \
\
\
\

\f1\b\fs28 contains:\

\f0\b0\li2500 - (BOOL)
\b  contains:
\b0\i anObject\

\i0\fs16 \

\fs28\li2200 Returns YES if the receiver contains 
\i anObject
\i0 .  Otherwise, returns NO.  Implementation is in terms of the receiver's 
\b find:
\b0  method.\

\fs16 \
\
\
\

\f1\b\fs28 printToFile:\

\f0\b0\li2500 -
\b  printToFile:
\b0 (FILE *)
\i aFile\

\i0\fs16 \

\fs28\li2200 Prints a comma separated list of the objects in the set by sending each individual object a 
\b printToFile:
\b0  message.  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 write:\

\f0\b0\li2500 -
\b  write:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Writes the set and all its elements to the typed stream 
\i stream
\i0 .  Returns the receiver.\

\fs16 \
\
\
\

\f1\b\fs28 read:\

\f0\b0\li2500 -
\b  read:
\b0 (NXTypedStream *)
\i stream\

\i0\fs16 \

\fs28\li2200 Reads the set and all its elements from the typed stream 
\i stream
\i0 .  Returns the receiver.\

}
