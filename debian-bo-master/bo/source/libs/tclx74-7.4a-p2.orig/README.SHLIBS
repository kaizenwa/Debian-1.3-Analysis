               Building Shared Libraries for Tcl, Tk and TclX.
                     Dr. Joseph E. Sacco <jsacco@ssl.com>
                 Updated by Mark Diekhans <markd@grizzly.com>

The following is a discussion of the construction and use of shared libraries
for building TCL applications. The principal source of information for this 
discussion is the set of SUN Reference Manuals.

Shared Libraries
-----------------

Some operating systems allow a single physical copy of a program's text (code) 
to be shared in memory by all the processes executing it. Such sharing results 
in a more efficient use of memory since the code is not duplicated for each 
process executing it. This is particularly true for applications that use
libraries. If the contents of a library can be shared among several processes
the savings can be significant.

Libraries of shared objects offer the additional benefit of a space/time trade
off though run-time binding. An executable that uses shared objects does not
have copies of these shared objects bound into it when linked but rather 
maintains references to these objects which are satisfied at run-time. This 
can result in a significant reduction in storage space for an program at a 
cost of a small delay in startup time. For example, on a SPARC10 under OS4.1.3 
using gcc-2.5.3, the storage requirements for "wishx", which uses functions 
from several libraries, ranges from 57.3KB to 991.2KB depending upon the 
degree to which shared libraries are used in its construction. For "wishx"
on a SPARC10 there is no user preceptible difference in the startup time
between any of these versions.

The paradigm for constructing libraries of shared objects varies from one
operating system to another. Central to all of these is the notion of 
position independent code [pic] which is code that requires link editing only 
to relocate objects that are external to the given module. [Each reference to
a global datum is generated as a dereference of a pointer in a global offset
table. Each function call is generated in pc-relative addressing mode through
a procedure linkage table.] Such code is readily shared. The basic approach to 
creating a shared library is to use the compiler [and assembler] to generate 
position independent code objects and then use the link editor to "join" these 
objects together. 

It must be noted that not all source code can be converted into a position 
independent object. Modules that "export" "initialized" data items cannot be 
expressed as position independent code. A data item is "exported" from a 
module if a program that uses that module refers to that data item by name.
User transparent mechanisms are provided to handle the non-position-independent
code that is used by shared libraries. One such scheme that is used by SUN is 
to [manually] collect the non-position-independent code into an [static] 
archive format library from which objects are extracted and copied into the 
executable by the link editor during the link stage.

Building Shared Libraries
-------------------------

What follows are instructions for *manually* constructing shared libraries for 
Tcl, Tk and TclX on a various system with *minimal* changes to the existing
code. Other systems may follow different procedures so consult your local 
system manuals for specifics.

The basic approach that will be used in each case is to set a compiler flag 
to create position independent code and run the makefile. The contents of a 
resulting archive library will then be extracted and relinked into a shared 
library. This approach is not very elegant but it works. It is not difficult
to modify the makefiles to automatically construct shared libraries for a
SUN system. Xiaokun Zhu [xiaokun@stats.gla.ac.uk] has done an excellent job
of this for Tcl and Tk. However, such modifications are SUN-specific and are 
of limited value for non-SUN platforms.

In most implementations of shared libraries, the library with the highest
minor version number is chosen at run time.  The following examples use both
the major and minor number of Tcl/Tk as the major library number.  Thus the
Tcl 7.4 library is named libtcl.so.74.0.  For TclX we translate the version
letter to another number.  Thus TclX 7.4a is libtclx.so.741.0.  This prevents
library mismatch when new Tcl minor versions are released, as they are often
not compatible at the C interface level.

===============================================================================
SunOS:
-------------------------------------------------------------------------------

Tcl
---

    (1) Run configure.

    (2) Compile with the appropriate position-independent-code flag.

        make CFLAGS="-O -PIC"         <--- SUN cc
        make CFLAGS="-O -fPIC"        <--- GNU gcc

    (3) Create a directory named ./shared and extract all of the library
        .o files into it.

        % mkdir ./shared
        % cd ./shared
        % ar xv ../libtcl.a

    (4) Create the .sa part of the shared library, then remove tclMtherr.o.

        % ar rcv libtcl.sa.74.0 tclMtherr.o
        % rm tclMtherr.o

    (5) Create the .so part of the shared library.

        % ld -o libtcl.so.74.0 *.o -assert pure-text

        There should be no complaints from the assertion.

    (6) Copy the library to it's final location.

        % cp libtcl.so.74.0 libtcl.sa.74.0 /usr/local/lib
        % ranlib  /usr/local/lib/libtcl.sa.74.0

    (7) Build a version of tclsh using shared libraries.
        
        % cd ..
        % gcc -O -o tclsh tclAppInit.o -L/usr/local/lib -ltcl -lm

    (8) Verify the dynamic dependencies.

        % ldd tclsh
          -ltcl.74 => /usr/local/lib/libtcl.so.74.0
          -lc.1 => /usr/lib/libc.so.1.9
          -ldl.1 => /usr/lib/libdl.so.1.0


The reason for tcllib.sa.740.0.c is to guarantee the tcl-version of matherr()
is used rather than the system version contained in the math library, libm.a.
The dummy reference to matherr(), that is a standard part of tclAppInit.c
creates a demand that is resolved at link time by the tcl-version of matherr()
contained in the [static] archive libtcl.sa.740.0. To see see the consequences
of these actions try :

          % tclsh
          % catch {expr acos(-2)}
            1

Without this hack, the system version of matherr() would be used and catch
would fail to "catch" the acos domain error.

Tk
--

    (1) Run configure.

    (2) make CFLAGS="-O -PIC"         <--- SUN cc
        make CFLAGS="-O -fPIC"        <--- GNU gcc
     
    (3) % mkdir ./shared
        % cd ./shared
        % ar xv ../libtk.a

    (4) % ld -o libtk.so.40.0 *.o -assert pure-text

    (5) Copy the library to it's final location.

        % cp libtk.so.40.0 /usr/local/lib
        
    (6) Build a version of wish using shared libaries.

        % cd ..
        % gcc -O -o wish tkAppInit.o -L/usr/local/lib -ltk -ltcl -lX11 -lm

    (7) Verify the dynamic dependencies.

        % ldd wish

          -ltk.40 => /usr/local/lib/libtk.so.40.0
          -ltcl.74 => /usr/local/lib/libtcl.so.74.0
          -lc.1 => /usr/lib/libc.so.1.9
          -ldl.1 => /usr/lib/libdl.so.1.0
          -lX11.4 => /usr/lib/libX11.so.4.10
  
TclX
----

    (1) Run configure.

    (2) make CFLAGS="-O -PIC"  CXXFLAGS="-O -PIC"         <--- SUN cc
        make CFLAGS="-O -fPIC" CXXFLAGS="-O -fPIC"        <--- GNU gcc

        CXXFLAGS is passed to the C++ compiler.

    (3) Create the TclX shared library.

        % cd src
        % mkdir shared
        % cd shared
        % ar xv ../libtclx.a
        % ld -o libtclx.so.740.0 *.o -assert pure-text

    (4) Copy the library to it's final location.

        % cp libtclx.so.740.0 /usr/local/lib

    (5) Create the TkX shared library.

        % cd ../../tksrc
        % mkdir shared
        % cd shared 
        % ar xv ../libtkx.a
        % ld -o libtkx.so.400.0 *.o -assert pure-text
        
    (6) Copy the library to its final location.

        % cp libtkx.so.400.0 /usr/local/lib

    (7) TclX provides a special target to rebuild the programs with shared
        libraries.

        % cd ../..
        % make shlink
        
    (8) Verify the dependencies.

        % ldd src/tcl
          -ltclx.740 => /usr/local/lib/libtclx.so.740.0
          -ltcl.74 => /usr/local/lib/libtcl.so.74.0
          -ldl.1 => /usr/lib/libdl.so.1.0
          -lc.1 => /usr/lib/libc.so.1.9

        % ldd tksrc/wishx
          -ltkx.400 => /usr/local/lib/libtkx.so.400.0
          -ltk.40 => /usr/local/lib/libtk.so.40.0
          -lX11.4 => /usr/local/X11R5/lib/libX11.so.4.10
          -ltclx.740 => /usr/local/lib/libtclx.so.740.0
          -ltcl.74 => /usr/local/lib/libtcl.so.74.0
          -ldl.1 => /usr/lib/libdl.so.1.0
          -lc.1 => /usr/lib/libc.so.1.9

===============================================================================
Solaris:
-------------------------------------------------------------------------------

Tcl
---

    (1) Run configure.

    (2) Compile with the appropriate position-independent-code flag.

        make CFLAGS="-O -K PIC"       <--- SPARCcompiler C
        make CFLAGS="-O -fPIC"        <--- GNU gcc

    (3) Create a directory named ./shared and extract all of the library
        .o files into it.

        % mkdir ./shared
        % cd ./shared
        % ar xv ../libtcl.a

    (4) Create the the shared library.

        % ld -o libtcl.so.74.0 *.o -G -ztext

    (5) Copy the library to it's final location.

        % cp libtcl.so.74.0 /usr/local/lib
        % ln -s libtcl.so.74.0 /usr/local/lib/libtcl.so

    (6) Build a version of tclsh using shared libraries.
        
        % cd ..
        % gcc -O -o tclsh tclAppInit.o -L/usr/local/lib -R/usr/local/lib \
              -ltcl -lm

    (7) Verify the dynamic dependencies.

        % ldd tclsh

Tk
--

    (1) Run configure.

    (2) make CFLAGS="-O -K PIC"       <--- SPARCcompiler C
        make CFLAGS="-O -fPIC"        <--- GNU gcc

    (3) % mkdir ./shared
        % cd ./shared
        % ar xv ../libtk.a

    (4) % ld -o libtk.so.40.0 *.o -G -ztext

    (5) Copy the library to it's final location.

        % cp libtk.so.40.0 /usr/local/lib
        % ln -s libtk.so.40.0 /usr/local/lib/libtk.so
        
    (5) Build a version of wish using shared libaries.

        % cd ..
        % gcc -O -o wish tkAppInit.o -L/usr/local/lib -R/usr/local/lib \
              -ltk -ltcl -lX11 -lm

    (6) Verify the dynamic dependencies.

        % ldd wish
  
TclX
----

    (1) Run configure.

    (2) make CFLAGS="-O -K PIC" CXXFLAGS="-O -K PIC"     <--- SPARCcompiler C
        make CFLAGS="-O -fPIC"  CXXFLAGS="-O -fPIC"      <--- GNU gcc

        CXXFLAGS is passed to the C++ compiler.

    (3) Create the TclX shared library.

        % cd src
        % mkdir shared
        % cd shared
        % ar xv ../libtclx.a
        % ld -o libtclx.so.740.0 *.o -G -ztext

    (4) Copy the library to it's final location.

        % cp libtclx.so.740.0 /usr/local/lib
        % ln -s libtclx.so.740.0 /usr/local/lib/libtclx.so

    (5) Create the TkX shared library.

        % cd ../../tksrc
        % mkdir shared
        % cd shared 
        % ar xv ../libtkx.a
        % ld -o libtkx.so.400.0 *.o -G -ztext
        
    (6) Copy the library to it's final location.

        % cp libtkx.so.400.0 /usr/local/lib
        % ln -s libtk.so.400.0 /usr/local/lib/libtk.so

    (7) Edit Config.mk to add the -R flag to the TCLX_SHLIBS and TKX_SHLIBS
        macros:

        TCLX_SHLIBS=-L${TCL_LIBDIR} -R${TCL_LIBDIR} -ltclx -ltcl
        TKX_SHLIBS=-L${TCL_LIBDIR} -R${TCL_LIBDIR} -ltkx -ltk

    (8) TclX provides a special target to rebuild the programs with shared
        libraries.

        % cd ../..
        % make shlink
        
    (9) Verify the dependencies

        % ldd src/tcl
        % ldd tksrc/wishx

===============================================================================
FreeBSD 2.* (and probably others using GNU ld).
-------------------------------------------------------------------------------

Tcl
---

    (1) Run configure.

    (2) Compile with the position-independent-code flag.

        make CFLAGS="-O -fPIC"

    (3) Create a directory named ./shared and extract all of the library
        .o files into it.

        % mkdir ./shared
        % cd ./shared
        % ar xv ../libtcl.a

    (4) Create the the shared library.

        % ld -Bshareable -o libtcl.so.74.0 *.o

    (5) Copy the library to it's final location.

        % cp libtcl.so.74.0 /usr/local/lib

    (6) Update the run-time linker hints.  This must be doen as root.
        You might wish to wait until all libraries have been installed.
        
        % ldconfig

    (7) Build a version of tclsh using shared libraries.
        
        % cd ..
        % gcc -O -o tclsh tclAppInit.o -L/usr/local/lib -ltcl -lm

    (8) Verify the dynamic dependencies.

        % ldd tclsh

Tk
--

    (1) Run configure.

    (2) make CFLAGS="-O -fPIC"

    (3) % mkdir ./shared
        % cd ./shared
        % ar xv ../libtk.a

    (4) % ld -Bshareable -o libtk.so.40.0 *.o

    (5) Copy the library to it's final location.

        % cp libtk.so.40.0 /usr/local/lib
        
    (6) Update the run-time linker hints.  This must be doen as root.
        
        % ldconfig

    (7) Build a version of wish using shared libaries.

        % cd ..
        % gcc -O -o wish tkAppInit.o -L/usr/local/lib -ltk -ltcl -lX11 -lm

    (8) Verify the dynamic dependencies.

        % ldd wish
  
TclX
----

    (1) Run configure.

    (2) make CFLAGS="-O -fPIC" CXXFLAGS="-O -fPIC"

        CXXFLAGS is passed to the C++ compiler.

    (3) Create the TclX shared library.

        % cd src
        % mkdir shared
        % cd shared
        % ar xv ../libtclx.a
        % ld -Bshareable -o libtclx.so.740.0 *.o

    (4) Copy the library to it's final location.

        % cp libtclx.so.740.0 /usr/local/lib

    (5) Create the TkX shared library.

        % cd ../../tksrc
        % mkdir shared
        % cd shared 
        % ar xv ../libtkx.a
        % ld -Bshareable -o libtkx.so.400.0 *.o
        
    (6) Copy the library to it's final location.

        % cp libtkx.so.400.0 /usr/local/lib

    (7) Update the run-time linker hints.  This must be doen as root.
        
        % ldconfig

    (8) TclX provides a special target to rebuild the programs with shared
        libraries.

        % cd ../..
        % make shlink
        
    (9) Verify the dependencies.

        % ldd src/tcl
        % ldd tksrc/wishx

===============================================================================
SCO 5.0 (Dyanmic shared libraries are not available on earlier versions).
-------------------------------------------------------------------------------

Note, Tcl and TclX are part of SCO 5.0, use great care when installing new
versions of the software, or you might break some system software.

Tcl
---

    (1) Run configure.

    (2) Compile with the position-independent-code flag.

        make CFLAGS="-O -KPIC -belf"

    (3) Create a directory named ./shared and extract all of the library
        .o files into it.

        % mkdir ./shared
        % cd ./shared
        % ar xv ../libtcl.a

    (4) Create the the shared library.

        % ld -o libtcl.so.74.0 *.o -G -ztext

    (5) Copy the library to it's final location.

        % cp libtcl.so.74.0 /usr/local/lib

    (6) Build a version of tclsh using shared libraries.  Absolute paths
        to the libraries are specified so that the Tcl 7.3 libraries that
        are shipped with the ODT development system are not picked up
        
        % cd ..
        % cc -O -belf -o tclsh tclAppInit.o /usr/local/lib/libtcl.so.74.0 -lm

    (7) Verify the dynamic dependencies.

        % ldd tclsh

Tk
--

    (1) Run configure.

    (2) make CFLAGS="-O -KPIC -belf"

    (3) % mkdir ./shared
        % cd ./shared
        % ar xv ../libtk.a

    (4) % ld -o libtk.so.40.0 *.o -G -ztext

    (5) Copy the library to it's final location.

        % cp libtk.so.40.0 /usr/local/lib
        
    (6) Build a version of wish using shared libaries.

        % cd ..
        % gcc -O -o wish tkAppInit.o /usr/local/lib/libtk.so.40.0  \
            /usr/local/lib/libtcl.so.74.0 -lm

    (7) Verify the dynamic dependencies.

        % ldd wish
  
TclX
----

    (1) Run configure.

    (2) make CFLAGS="-O -KPIC -belf"

        CXXFLAGS is passed to the C++ compiler.

    (3) Create the TclX shared library.

        % cd src
        % mkdir shared
        % cd shared
        % ar xv ../libtclx.a
        % ld -o libtclx.so.740.0 *.o -G -ztext

    (4) Copy the library to it's final location.

        % cp libtclx.so.740.0 /usr/local/lib

    (5) Create the TkX shared library.

        % cd ../../tksrc
        % mkdir shared
        % cd shared 
        % ar xv ../libtkx.a
        % ld -o libtkx.so.400.0 *.o -G -ztext
        
    (6) Copy the library to it's final location.

        % cp libtkx.so.400.0 /usr/local/lib

    (7) Edit Config.mk to specify the TCLX_SHLIBS and TKX_SHLIBS macros as
        absolute paths to the shared libraries.  If this is not done the
        static, older versions of the Tcl libraries that are part of the SCO
        development system will be picked up.

        TCLX_SHLIBS= /usr/local/lib/libtclx.so.740.0 \
                     /usr/local/lib/libtcl.so.74.0
        TKX_SHLIBS= /usr/local/lib/libtkx.so.400.0 \
                    /usr/local/lib/libtk.so.40.0

    (8) TclX provides a special target to rebuild the programs with shared
        libraries.

        % cd ../..
        % make shlink LDFLAGS=-belf
        
    (9) Verify the dependencies.

        % ldd src/tcl
        % ldd tksrc/wishx
