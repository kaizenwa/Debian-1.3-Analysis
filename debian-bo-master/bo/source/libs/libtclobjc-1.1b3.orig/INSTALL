Installing `libtclobjc'
***********************

Read each of the numbered steps in its entirety before typing any
commands.

   To compile and install `libtclobjc':

  1. libtclobjc-1.1b2 and above only work with tcl version 7.4 (or
     newer) and gcc version 2.7.0 (or newer). It may still work with
     NeXT's cc.

  2. Configure the package for your system.  This is done by running the
     `configure' script provided with the distribution.  If you don't
     want `libtclobjc' to use Tk or readline, you may simply type
     `./configure' in the directory that this INSTALL file is in.  When
     using `csh' on an old version of System V, you might need to type
     `sh configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     By default, if the Tk library is installed on your system,
     libtclobjc will compile with Tk support built in. This will
     include the Objective-C object named `Tk' in `libtclobjc.a', and
     will install the file `Tk.h' along with the other header files.
     The configure script tries to find your X installation, but if it
     has trouble you can help it by setting some environment
     variables.  For example, if `libX11.a' were in `/usr/gnu/X11/lib'
     and `X.h' were in `/usr/gnu/X11/include', you might type (in the
     csh):
          setenv XLIBRARY_DIR /usr/gnu/X11/lib
          setenv XINCLUDE_DIR /usr/gnu/X11/include
          ./configure

     If the GNU readline library is installed on your system, you can
     make libtclobjc take advantage of it by giving `configure' the
     option `--with-readline'.  In order to help `configure' find the
     locations of readline's include and library directories, you will
     have to set the environment variables `READLINE_INCLUDE_DIR' and
     `READLINE_LIBRARY_DIR'.  See the descriptions of these environment
     vairables below.  For example, if the readline include file were
     `/usr/gnu/include/readline/readline.h', you might type (in the
     csh):
          setenv READLINE_INCLUDE_DIR /usr/gnu/include
          setenv READLINE_LIBRARY_DIR /usr/gnu/lib
          ./configure --with-readline

     The `configure' shell script attempts to guess correct values for
     various system-dependent variables used during compilation, and
     creates the Makefile(s) (one in each subdirectory of the source
     directory).  It also creates a file `config.status' that you can
     run in the future to recreate the current configuration.

     Running `configure' takes less than a minute or two.  While it is
     running, it prints some messages that tell what it is doing.  If
     you don't want to see the messages, run `configure' with its
     standard output redirected to `/dev/null'; for example:
          ./configure >/dev/null

     To compile the package in a different directory from the one
     containing the source code, you must use a version of make that
     supports the VPATH variable, such as GNU make.  `cd' to the
     directory where you want the object files and executables to go
     and run `configure'.  `configure' automatically checks for the
     source code in the directory that `configure' is in and in `..'.
     If for some reason `configure' is not in the source code directory
     that you are configuring, then it will report that it can't find
     the source code.  In that case, run `configure' with the option
     `--srcdir=DIR', where DIR is the directory that contains the
     source code.

     By default, `make install' will install the package's files in
     /usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can
     specify an installation prefix other than /usr/local by giving
     `configure' the option `--prefix=PATH'.  Alternately, you can do
     so by giving a value for the `prefix' variable when you run
     `make', e.g.,
          make prefix=/usr/gnu

     You can specify separate installation prefixes for
     architecture-specific files and architecture-independent files.
     If you give `configure' the option `--exec_prefix=PATH' or set the
     `make' variable `exec_prefix' to PATH, the package will use PATH
     as the prefix for installing programs and libraries.  Data files
     and documentation will still use the regular prefix.  Normally,
     all files are installed using the regular prefix.

     You can tell `configure' to figure out the configuration for your
     system, and record it in `config.status', without actually
     configuring the package (creating `Makefile's and perhaps a
     configuration header file).  To do this, give `configure' the
     `--no-create' option.  Later, you can run `./config.status' to
     actually configure the package.  This option is useful mainly in
     `Makefile' rules for updating `config.status' and `Makefile'.  You
     can also give `config.status' the `--recheck' option, which makes
     it re-run `configure' with the same arguments you used before.
     This is useful if you change `configure'.

     `configure' ignores any other arguments that you give it.

     If your system requires unusual options for compilation or linking
     that `configure' doesn't know about, you can give `configure'
     initial values for some variables by setting them in the
     environment.  In Bourne-compatible shells, you can do that on the
     command line like this:
          CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

     The `make' variables that you might want to override with
     environment variables when running `configure' are:

     (For these variables, any value given in the environment overrides
     the value that `configure' would choose:)
    `CC'
          C compiler program.  Default is `cc', or `gcc' if `gcc' is in
          your PATH.

    `INSTALL'
          Program to use to install files.  Default is `install' if you
          have it, `cp' otherwise.

    `XINCLUDE_DIR'
          Full path name of directory containing "X11" subdirectory
          with X include files.

    `XLIBRARY_DIR'
          Full path name of directory containing library archive for X.

    `READLINE_INCLUDE_DIR'
          Full path name of directory containing "readline"
          subdirectory with readline include files.

    `READLINE_LIBRARY_DIR'
          Full path name of directory containing library archive for
          readline.

     (For these variables, any value given in the environment is added
     to the value that `configure' chooses:)
    `DEFS'
          Configuration options, in the form `-Dfoo -Dbar ...'

    `LIBS'
          Libraries to link with, in the form `-lfoo -lbar ...'

     If you need to do unusual things to compile the package, we
     encourage you to figure out how `configure' could check whether to
     do them, and mail diffs or instructions to the address given in
     the `README' so we can include them in the next release.

  3. Type `make' to compile the package.  If you want, you can override
     the `make' variables `CFLAGS', `CPPFLAGS' and `INCLUDEFLAGS'.  For
     instance:
          	make CFLAGS=-O2

     You may see a warning message like:
          objc-malloc.m:0: warning: `_OBJC_SELECTOR_TABLE' defined but not used
     Ignore it.

  4. Type `make check' if you want to compile the minimal test
     executables and run them.

  5. Type `make install' to install programs, data files, and
     documentation.

  6. You can remove the program binaries and object files from the
     source directory by typing `make clean'.  To also remove the
     Makefile(s), the header file containing system-dependent
     definitions (if the package uses one), and `config.status' (all
     the files that `configure' created), type `make distclean'.

     The file `configure.in' is used as a template to create
     `configure' by a program called `autoconf'.  You will only need it
     if you want to regenerate `configure' using a newer version of
     `autoconf'.


