dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tk installation
dnl	to configure the system for the local environment.

AC_INIT(generic/tixInit.c)

CMDLINE="$0 $*"

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PREFIX_PROGRAM(tixwish)
AC_HAVE_HEADERS(unistd.h limits.h)
AC_PROG_MAKE_SET

CC=${CC-cc}
AC_SUBST(CC)

#--------------------------------------------------------------------
#		USER CONFIGURABLE VARIABLES
#----------------------------------------------------------------------
AC_SUBST(ENABLE_TK40)
AC_SUBST(ENABLE_ITCL20)
AC_SUBST(ENABLE_ET40)
AC_SUBST(ENABLE_TK41)
AC_SUBST(ENABLE_TK41_DSO)
AC_SUBST(ENABLE_CDEMOS)
AC_SUBST(ENABLE_DEBUG)
AC_SUBST(TIX_TARGETS)
AC_SUBST(TIX_TEST_LOAD)
AC_SUBST(TIX_MAKE_SHLIB)
AC_SUBST(TIX_INSTALL_SHLIB)

# Default values
#
#
ENABLE_TK40="yes"
ENABLE_ITCL20="no"
ENABLE_ET40="no"
ENABLE_TK41="no"
ENABLE_TK41_DSO="yes"
ENABLE_CDEMOS="yes"
ENABLE_DEBUG="no"

# Declarations of command line args
#
#
AC_ARG_ENABLE(all_targets,
    [  --enable-all_targets      Enable all compilation targets],
    [ENABLE_TK40="$enableval"
     ENABLE_ITCL20="$enableval"
     ENABLE_ET40="$enableval"
     ENABLE_TK41="$enableval"
     ENABLE_TK41_DSO="$enableval"
     ENABLE_CDEMOS="$enableval"
    ])

AC_ARG_ENABLE(tk40,
    [  --enable-tk40             compile Tix with TK 4.0/TCL 7.4],
    [ENABLE_TK40="$enableval"])

AC_ARG_ENABLE(et40,
    [  --enable-et40             compile Tix with ET/TK 4.0/TCL 7.4],
    [ENABLE_ET40="$enableval"])

AC_ARG_ENABLE(itcl20,
    [  --enable-itcl20           compile Tix with ITcl 2.0/TK 4.0/TCL 7.4],
    [ENABLE_ITCL20="$enableval"])

AC_ARG_ENABLE(tk41,
    [  --enable-tk41             compile Tix with TK 4.1/TCL 7.5],
    [ENABLE_TK41="$enableval"])

AC_ARG_ENABLE(tk41_dso,
    [  --enable-tk41_dso         compile dynamic Tix library with TK 4.1],
    [ENABLE_TK41_DSO="$enableval"])

AC_ARG_ENABLE(cdemos,
    [  --enable-cdemos           compile demo programs for using Tix with C],
    [ENABLE_CDEMOS="$enableval"])

AC_ARG_ENABLE(debug,
    [  --enable-debug            compile Tix with debug info],
    [ENABLE_DEBUG="$enableval"])

# The -with flags
#
#
AC_SUBST(TCL74_SRC_DIR)
  AC_SUBST(TCL74_LIB)
  AC_SUBST(TCL74_DEPEND)

AC_SUBST(TCL75_SRC_DIR)
  AC_SUBST(TCL75_LIB)
  AC_SUBST(TCL75_DEPEND)

AC_SUBST(TK40_SRC_DIR)
  AC_SUBST(TK40_LIB)
  AC_SUBST(TK40_DEPEND)

AC_SUBST(TK41_SRC_DIR)
  AC_SUBST(TK41_DEPEND)
  AC_SUBST(TK41_LIB)

AC_SUBST(ITCL20_SRC_DIR)

AC_SUBST(TIX_DEBUG_FLAG)
AC_SUBST(TIX_EXTRA_CFLAGS)
AC_SUBST(TIX_EXTRA_LDFLAGS)
AC_SUBST(TIX_CCOMP)

# Default values
#
#
TCL74_SRC_DIR=""
TCL75_SRC_DIR=""
TK40_SRC_DIR=""
TK41_SRC_DIR=""

# Declarations of command line args
#
#
AC_ARG_WITH(tcl74_src_dir, 
    [  --with-tcl74_src_dir=DIR  use TCL 7.4 source from DIR],
    TCL74_SRC_DIR=$withval, TCL74_SRC_DIR="")

AC_ARG_WITH(tcl75_src_dir, 
    [  --with-tcl75_src_dir=DIR  use TCL 7.5 source from DIR],
    TCL75_SRC_DIR=$withval, TCL75_SRC_DIR="")

AC_ARG_WITH(tk40_src_dir, 
    [  --with-tk40_src_dir=DIR   use TK 4.0 source from DIR],
    TK40_SRC_DIR=$withval, TK40_SRC_DIR="")

AC_ARG_WITH(tk41_src_dir, 
    [  --with-tk41_src_dir=DIR   use TK 4.1 source from DIR],
    TK41_SRC_DIR=$withval, TK41_SRC_DIR="")

AC_ARG_WITH(itcl20_src_dir, 
    [  --with-itcl20_src_dir=DIR use ITCL 20 source from DIR],
    ITCL20_SRC_DIR=$withval, ITCL20_SRC_DIR="")

AC_ARG_WITH(extra_cflags, 
    [  --with-extra_cflags=XXX   use additional C Flags],
    TIX_EXTRA_CFLAGS=$withval, TIX_EXTRA_CFLAGS="")

AC_ARG_WITH(extra_ldflags, 
    [  --with-extra_ldflags=XXX  use additional LD Flags],
    TIX_EXTRA_LDFLAGS=$withval, TIX_EXTRA_LDFLAGS="")

AC_ARG_WITH(cc, 
    [  --with-cc=XXX             use XXX as the C compiler],
    TIX_CCOMP=$withval, TIX_CCOMP="default")

if test "$TIX_CCOMP" != "default"; then
    CC="$TIX_CCOMP"
fi
#--------------------------------------------------------------------
# VARIABLES DETECTED BY THE CONFIGURE SCRIPT --
#
#	The following will be defined if some required packages
#	have not been installed.
#----------------------------------------------------------------------

AC_SUBST(TIX_CDEMOS_BAD)
AC_SUBST(TIX_TK40_BAD)
AC_SUBST(TIX_TK41_BAD)
AC_SUBST(TIX_ITCL20_BAD)
AC_SUBST(TIX_ET40_BAD)

TIX_CDEMOS_BAD=""
TIX_TK40_BAD=""
TIX_TK41_BAD=""
TIX_ITCL20_BAD=""
TIX_ET40_BAD=""

#--------------------------------------------------------------------
#	These are the names specially for Tix
#----------------------------------------------------------------------
TIX_DEFS=""

# SRC_DIR is the toplevel directory where all the Tix sources sits in
# e.g. /home/ioi/Tix4.0.1/
#
AC_SUBST(SRC_DIR)
AC_SUBST(TIX_DEFS)

#--------------------------------------------------------------------
# CAPABILITY CONTROL: some features are not available in Tix 4.0.x
#
#----------------------------------------------------------------------
AC_SUBST(TIX41_OBJS)
AC_SUBST(TIX41_SO_OBJS)
AC_SUBST(TIX41_DEFS)

AC_MSG_CHECKING([checking version of Tix])

. Version
if test "$tix_version" = "4.0"; then
    TIX41_OBJS=""
    TIX41_SO_OBJS=""
    TIX41_DEFS="-DTIX_VERSION_4_0_x"
    AC_MSG_RESULT(4.0.x)
else
    TIX41_OBJS="\$(TIX41_OBJS)"
    TIX41_SO_OBJS="\$(TIX41_SO_OBJS)"
    TIX41_DEFS=""
    AC_MSG_RESULT(4.1.x+)
fi

TIX_DEFS="$TIX_DEFS $TIX41_DEFS"
#--------------------------------------------------------------------
#	Remove the ./config.cache file and rerun configure if
#	the cache file belong to a different architecture
#----------------------------------------------------------------------
AC_CHECK_PROG(UNAME, uname -a, [uname -a], "")
if test "$UNAME" = ""; then
    AC_CHECK_PROG(UNAME, uname, [uname], "")
fi

if test "$UNAME" != ""; then
    uname=`$UNAME`
    AC_MSG_CHECKING([checking cached value of \$uname])
    AC_CACHE_VAL(ac_cv_prog_uname, [nocached=1 ac_cv_prog_uname=`$UNAME`])
    if test "$nocached" = "1"; then
	AC_MSG_RESULT(no)
    else
	AC_MSG_RESULT(yes)
    fi

    if test "$uname" != "$ac_cv_prog_uname"; then
        echo "Running on a different architecture. Can't use cached values"
	echo "Removing config.cache and running configure again"
	rm -f config.cache
	exec $CMDLINE
    fi
fi

#----------------------------------------------------------------------
# We don't want to use any relative path because we need to generate
# Makefile's in subdirectories
#----------------------------------------------------------------------
if test "$INSTALL" = "./install.sh"; then
    INSTALL=`pwd`/install.sh
fi

#----------------------------------------------------------------------
# We don't want to use any relative path because we need to generate
# Makefile's in subdirectories
#----------------------------------------------------------------------

PWDIR=`pwd`

cd ..
DOTDOT=`pwd`
cd $PWDIR

cd $srcdir
SRC_DIR=`pwd`
cd $PWDIR

#--------------------------------------------------------------------
#	strdup() is not a POSIX call and many machines don't have it
#--------------------------------------------------------------------

AC_CHECK_FUNC(strdup, , AC_DEFINE(NO_STRDUP))

#--------------------------------------------------------------------
#
#
#
#			   USUAL STUFF
#
#       Most of the following are copied from TK's configure.in
#
#
#
#
#--------------------------------------------------------------------

#--------------------------------------------------------------------
#	Include sys/select.h if it exists and if it supplies things
#	that appear to be useful and aren't already in sys/types.h.
#	This appears to be true only on the RS/6000 under AIX.  Some
#	systems like OSF/1 have a sys/select.h that's of no use, and
#	other systems like SCO UNIX have a sys/select.h that's
#	pernicious.  If "fd_set" isn't defined anywhere then set a
#	special flag.
#--------------------------------------------------------------------

AC_MSG_CHECKING([fd_set and sys/select])
AC_TRY_COMPILE([#include <sys/types.h>],
	[fd_set readMask, writeMask;], tk_ok=yes, tk_ok=no)
if test $tk_ok = no; then
    AC_HEADER_EGREP(fd_mask, sys/select.h, tk_ok=yes)
    if test $tk_ok = yes; then
	AC_DEFINE(HAVE_SYS_SELECT_H)
    fi
fi
AC_MSG_RESULT($tk_ok)
if test $tk_ok = no; then
    AC_DEFINE(NO_FD_SET)
fi

#--------------------------------------------------------------------
#	Supply a substitute for stdlib.h if it doesn't define strtol,
#	strtoul, or strtod (which it doesn't in some versions of SunOS).
#--------------------------------------------------------------------

AC_MSG_CHECKING(stdlib.h)
AC_HEADER_EGREP(strtol, stdlib.h, tk_ok=yes, tk_ok=no)
AC_HEADER_EGREP(strtoul, stdlib.h, , tk_ok=no)
AC_HEADER_EGREP(strtod, stdlib.h, , tk_ok=no)
if test $tk_ok = no; then
    AC_DEFINE(NO_STDLIB_H)
fi
AC_MSG_RESULT($tk_ok)

#--------------------------------------------------------------------
#	Check for various typedefs and provide substitutes if
#	they don't exist.
#--------------------------------------------------------------------

AC_MODE_T
AC_PID_T
AC_SIZE_T
AC_UID_T

#--------------------------------------------------------------------
#	Locate the X11 header files and the X11 library archive.  Try
#	the ac_path_x macro first, but if it doesn't find the X stuff
#	(e.g. because there's no xmkmf program) then check through
#	a list of possible directories.  Under some conditions the
#	autoconf macro will return an include directory that contains
#	no include files, so double-check its result just to be safe.
#--------------------------------------------------------------------

AC_PATH_X
not_really_there=""
if test "$no_x" = ""; then
    if test "$x_includes" = ""; then
	AC_TRY_CPP([#include <X11/XIntrinsic.h>], , not_really_there="yes")
    else
	if test ! -r $x_includes/X11/Intrinsic.h; then
	    not_really_there="yes"
	fi
    fi
fi
if test "$no_x" = "yes" -o "$not_really_there" = "yes"; then
    echo checking for X11 header files
    XINCLUDES="# no special path needed"
    AC_TRY_CPP([#include <X11/Intrinsic.h>], , XINCLUDES="nope")
    if test "$XINCLUDES" = nope; then
        dirs="/usr/unsupported/include /usr/local/include /usr/X386/include /usr/include/X11R4 /usr/X11R5/include /usr/include/X11R5 /usr/openwin/include /usr/X11/include /usr/sww/include"
        for i in $dirs ; do
	    if test -r $i/X11/Intrinsic.h; then
	        XINCLUDES=" -I$i"
	    fi
        done
    fi
else
    if test "$x_includes" != ""; then
	XINCLUDES=-I$x_includes
    else
	XINCLUDES="# no special path needed"
    fi
fi
if test "$XINCLUDES" = nope; then
  echo "Warning:  couldn't find any X11 include files."
  XINCLUDES="# no include files found"
fi
AC_SUBST(XINCLUDES)

if test "$no_x" = yes; then
    XLIBSW=nope
    if test "$XLIBSW" = nope; then
	dirs="/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/lib/X11R4 /usr/X11R5/lib /usr/lib/X11R5 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib"
	for i in $dirs ; do
	    if test -r $i/libX11.a -o -r $i/libX11.so -o -r $i/libX11.sl; then
		XLIBSW="-L$i -lX11"
	    fi
	done
    fi
else
    if test "$x_libraries" = ""; then
	XLIBSW=-lX11
    else
	XLIBSW="-L$x_libraries -lX11"
    fi
fi
if test "$XLIBSW" = nope ; then
    AC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)
fi
if test "$XLIBSW" = nope ; then
    echo "Warning:  couldn't find the X11 library archive.  Using -lX11."
    XLIBSW=-lX11
fi
AC_SUBST(XLIBSW)

#--------------------------------------------------------------------
#	Check for the existence of various libraries.  The order here
#	is important, so that then end up in the right order in the
#	command line generated by make.  The -lsocket and -lnsl libraries
#	require a couple of special tricks:
#	1. Use "connect" and "accept" to check for -lsocket, and
#	   "gethostbyname" to check for -lnsl.
#	2. Use each function name only once:  can't redo a check because
#	   autoconf caches the results of the last check and won't redo it.
#	3. Use -lnsl and -lsocket only if they supply procedures that
#	   aren't already present in the normal libraries.  This is because
#	   IRIX 5.2 has libraries, but they aren't needed and they're
#	   bogus:  they goof up name resolution if used.
#	4. On some SVR4 systems, can't use -lsocket without -lnsl too.
#	   To get around this problem, check for both libraries together
#	   if -lsocket doesn't work by itself.
#--------------------------------------------------------------------

AC_CHECK_LIB(Xbsd, main, [LIBS="$LIBS -lXbsd"])

tk_checkBoth=0
AC_CHECK_FUNC(connect, tk_checkSocket=0, tk_checkSocket=1)
if test "$tk_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", tk_checkBoth=1)
fi
if test "$tk_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, tk_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))

#--------------------------------------------------------------------
# One more check related to the X libraries.  The standard releases
# of Ultrix don't support the "xauth" mechanism, so send won't work
# unless TK_NO_SECURITY is defined.  However, there are usually copies
# of the MIT X server available as well, which do support xauth.
# Check for the MIT stuff and use it if it exists.
#
# Note: can't use ac_check_lib macro (at least, not in Autoconf 2.1)
# because it can't deal with the "-" in the library name.
#--------------------------------------------------------------------

if test -d /usr/include/mit ; then
    AC_MSG_CHECKING([MIT X libraries])
    tk_oldCFlags=$CFLAGS
    CFLAGS="$CFLAGS -I/usr/include/mit"
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lX11-mit"
    AC_TRY_LINK([
	#include <X11/Xlib.h>
    ], [
	XOpenDisplay(0);
    ], [
	AC_MSG_RESULT(yes)
	XLIBSW="-lX11-mit"
	XINCLUDES="-I/usr/include/mit"
    ], AC_MSG_RESULT(no))
    CFLAGS=$tk_oldCFlags
    LIBS=$tk_oldLibs
fi

#--------------------------------------------------------------------
#	Figure out how to find out whether a FILE structure contains
#	buffered readable data.  Some known names for the count field:
#		_cnt:		Most UNIX systems
#		__cnt:		HPUX
#		_r:		BSD
#		readCount:	Sprite
#	Or, in GNU libc there are two fields, _gptr and _egptr, which
#	have to be compared.
#--------------------------------------------------------------------

AC_MSG_CHECKING([count field in FILE structures])
AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->_cnt = 0;], fcnt="_cnt", )
if test "$fcnt" = ""; then
    AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->__cnt = 0;], fcnt="__cnt", )
fi
if test "$fcnt" = ""; then
    AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->_r = 0;], fcnt="_r", )
fi
if test "$fcnt" = ""; then
    AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->readCount = 0;], fcnt="readCount", )
fi
if test "$fcnt" != ""; then
    AC_DEFINE_UNQUOTED(TK_FILE_COUNT, $fcnt)
fi
if test "$fcnt" = ""; then
    AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->_gptr = f->_egptr;],
	tk_ok=yes, tk_ok=no)
    if test $tk_ok = yes; then
	AC_DEFINE(TK_FILE_GPTR)
	fcnt="_gptr/_egptr"
    fi
fi
if test "$fcnt" = ""; then
    AC_TRY_COMPILE([#include <stdio.h>],
	[FILE *f = stdin; f->_IO_read_ptr = f->_IO_read_end;],
	tk_ok=yes, tk_ok=no)
    if test $tk_ok = yes; then
	AC_DEFINE(TK_FILE_READ_PTR)
	fcnt="_IO_read_ptr/_IO_read_end"
    fi
fi
if test "$fcnt" = ""; then
    AC_MSG_RESULT([not found; must supply TkReadDataPending procedure])
else
    AC_MSG_RESULT("$fcnt")
fi

#--------------------------------------------------------------------
#	On a few very rare systems, all of the libm.a stuff is
#	already in libc.a.  Set compiler flags accordingly.
#	Also, Linux requires the "ieee" library for math to
#	work right (and it must appear before "-lm").
#--------------------------------------------------------------------

MATH_LIBS=""
AC_CHECK_FUNC(sin, , MATH_LIBS="-lm")
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])
AC_SUBST(MATH_LIBS)

#--------------------------------------------------------------------
#	If this system doesn't have a memmove procedure, use memcpy
#	instead.
#--------------------------------------------------------------------

AC_CHECK_FUNC(memmove, , [AC_DEFINE(memmove, memcpy)])

#--------------------------------------------------------------------
#	Figure out whether "char" is unsigned.  If so, set a
#	#define for __CHAR_UNSIGNED__.
#--------------------------------------------------------------------

AC_C_CHAR_UNSIGNED

#--------------------------------------------------------------------
#	SGI systems don't use the BSD form of the gettimeofday function,
#	but they have a BSDgettimeofday function that can be used instead.
#
#	Also, check for the existence of a gettimeofday declaration,
#	to tkPort.h can declare it if it isn't already declared.
#--------------------------------------------------------------------

AC_CHECK_FUNC(BSDgettimeofday, AC_DEFINE(HAVE_BSDGETTIMEOFDAY))
AC_MSG_CHECKING([for gettimeofday declaration])
AC_EGREP_HEADER(gettimeofday, sys/time.h, AC_MSG_RESULT(present), [
    AC_MSG_RESULT(missing)
    AC_DEFINE(GETTOD_NOT_DECLARED)
])

#--------------------------------------------------------------------
#	Under Solaris 2.4, strtod returns the wrong value for the
#	terminating character under some conditions.  Check for this
#	and if the problem exists use a substitute procedure
#	"fixstrtod" (provided by Tcl) that corrects the error.
#--------------------------------------------------------------------

AC_CHECK_FUNC(strtod, tk_strtod=1, tk_strtod=0)
if test "$tk_strtod" = 1; then
    AC_MSG_CHECKING([for Solaris 2.4 strtod bug])
    AC_TRY_RUN([
	extern double strtod();
	int main()
	{
	    char *string = "NaN";
	    char *term;
	    strtod(string, &term);
	    if ((term != string) && (term[-1] == 0)) {
		exit(1);
	    }
	    exit(0);
	}], tk_ok=1, tk_ok=0, tk_ok=0)
    if test "$tk_ok" = 1; then
	AC_MSG_RESULT(ok)
    else
	AC_MSG_RESULT(buggy)
	AC_DEFINE(strtod, fixstrtod)
    fi
fi

#----------------------------------------------------------------------
#
#		COMPILATION TARGET INFORMATION
#
#----------------------------------------------------------------------
DEFAULT_MAKEFILES="Makefile tixConfig.tcl"
makefiles=$DEFAULT_MAKEFILES
TIX_TARGETS=""
TIX_TEST_LOAD=""
LIBEXT=".a"

#--------------------------------------------------------------------
#	Find out the source dir of TCL 7.4/ Tk 4.0
#--------------------------------------------------------------------
TCL74_FOUND=0

if test "$ENABLE_TK40" != "no"; then

    # TCL 7.4
    #
    AC_MSG_CHECKING([checking for TCL 7.4 source])
    devdir="$DOTDOT/tcl7.4 $DOTDOT/tcl7.4p*"

    if test "$TCL74_SRC_DIR" = ""; then
        dirs=$devdir
        for i in $dirs ; do
	    if test -r $i/tcl.h; then
	        TCL74_SRC_DIR="$i"
	    fi
        done
    fi

    if test "$TCL74_SRC_DIR" = ""; then
        AC_MSG_RESULT([(not found)])
    else
        AC_MSG_RESULT([(found: $TCL74_SRC_DIR)])
    fi

    # TK 4.0
    #
    AC_MSG_CHECKING([checking for TK 4.0 source])
    devdir="$DOTDOT/tk4.0 $DOTDOT/tk4.0p*"

    if test "$TK40_SRC_DIR" = ""; then
        dirs=$devdir
        for i in $dirs ; do
	    if test -r $i/tk.h; then
	        TK40_SRC_DIR="$i"
	    fi
        done
    fi

    if test "$TK40_SRC_DIR" = ""; then
        AC_MSG_RESULT([(not found)])
    else
        AC_MSG_RESULT([(found: $TK40_SRC_DIR)])
    fi

    if  test "$TK40_SRC_DIR" != ""; then
        if test "$TCL74_SRC_DIR" != ""; then
	    TIX_TARGETS="$TIX_TARGETS unix-tk4.0"
	    TCL74_DEPEND="$TCL74_SRC_DIR/libtcl.a"
	    TK40_DEPEND="$TK40_SRC_DIR/libtk.a"
	    TCL74_LIB=$TCL74_DEPEND
	    TK40_LIB=$TK40_DEPEND
	    makefiles="$makefiles unix-tk4.0/Makefile"

	    TCL74_FOUND=1
        else
	    TIX_TARGETS="$TIX_TARGETS unix-tk4.0-bad"
	    TIX_TK40_BAD="unix-tk4.0-bad abort-make"
	fi
    else
	    TIX_TARGETS="$TIX_TARGETS unix-tk4.0-bad"
	    TIX_TK40_BAD="unix-tk4.0-bad abort-make"
    fi
fi

#--------------------------------------------------------------------
#	Find out the source dir of TCL 7.5/ Tk 4.1
#--------------------------------------------------------------------
if test "$ENABLE_TK41" != "no"; then

    TCL_CONFIG_INFO=tclConfig.sh
    TCL_LIB_INFIX="7.5"
    TK_LIB_INFIX="4.1"

    AC_MSG_CHECKING([checking for TCL 7.5 source])

    if test "$TCL75_SRC_DIR" = ""; then
        # TCL 7.5a
        #
        devdir="$DOTDOT/tcl7.5"
        dirs=$devdir
        for i in $dirs ; do
	    if test -r $i/generic/tcl.h; then
	        TCL75_SRC_DIR="$i"
	    fi
        done
    fi

    if test -r $TCL75_SRC_DIR/unix/tclConfig.sh.in; then
	TCL_CONFIG_INFO=tclConfig.sh
    else
	# looks like wrong version of tcl 7.5
	TCL75_SRC_DIR=""
    fi

    if test "$TCL75_SRC_DIR" = ""; then
        AC_MSG_RESULT([(not found)])
    else
        AC_MSG_RESULT([(found: $TCL75_SRC_DIR)])
    fi

    # TK 4.1
    #
    AC_MSG_CHECKING([checking for TK 4.1 source])

    if test "$TK41_SRC_DIR" = ""; then
        # TK 4.1a
        #
        devdir="$DOTDOT/tk4.1a* $DOTDOT/tk4.1b* $DOTDOT/tk4.1 $DOTDOT/tk4.1p*"
        dirs=$devdir
        for i in $dirs ; do
	    if test -r $i/generic/tk.h; then
	        TK41_SRC_DIR="$i"
	    fi
        done
    fi

    if test -r $TK41_SRC_DIR/unix/tkConfig.sh.in; then
	TK_LIB_INFIX=4.1
    else
	TK41_SRC_DIR=""
    fi

    if test "$TK41_SRC_DIR" = ""; then
        AC_MSG_RESULT([(not found)])
    else
        AC_MSG_RESULT([(found: $TK41_SRC_DIR)])
    fi

    if  test "$TK41_SRC_DIR" != ""; then
        if test "$TCL75_SRC_DIR" != ""; then

	    file="$TCL75_SRC_DIR/unix/$TCL_CONFIG_INFO"
	    . $file
	    AC_SUBST(SHLIB_CFLAGS)
	    AC_SUBST(SHLIB_LD)
	    AC_SUBST(SHLIB_SUFFIX)
	    AC_SUBST(DL_LIBS)
	    AC_SUBST(LD_FLAGS)
	    AC_SUBST(TCL_BUILD_LIB_SPEC)

	    SHLIB_CFLAGS=$TCL_SHLIB_CFLAGS
	    SHLIB_LD=$TCL_SHLIB_LD
	    SHLIB_LD_LIBS=$TCL_SHLIB_LD_LIBS
	    SHLIB_SUFFIX=$TCL_SHLIB_SUFFIX
	    SHLIB_VERSION=$TCL_SHLIB_VERSION
	    DL_LIBS=$TCL_DL_LIBS
	    LD_FLAGS=$TCL_LD_FLAGS

	    file="$TK41_SRC_DIR/unix/tkConfig.sh"
	    . $file
	    AC_SUBST(TK_BUILD_LIB_SPEC)

	    TIX_MAKE_SHLIB=""
	    TIX_INSTALL_SHLIB=""

	    TIX_TARGETS="$TIX_TARGETS unix-tk4.1"
	    TCL75_DEPEND="$TCL75_SRC_DIR/unix/libtcl${TCL_LIB_INFIX}$LIBEXT"
	    TK41_DEPEND="$TK41_SRC_DIR/unix/libtk${TK_LIB_INFIX}$LIBEXT"
	    TCL75_LIB=$TCL75_DEPEND
	    TK41_LIB=$TK41_DEPEND
	    makefiles="$makefiles unix-tk4.1/Makefile"

	    if test "$ENABLE_TK41_DSO" != "no"; then
	        if test "$SHLIB_LD" != ""; then
	            TIX_MAKE_SHLIB="\$(TIX_SHLIB) tixwish_s"
	            TIX_INSTALL_SHLIB='install-shlib'
		    TIX_TEST_LOAD="load"
	        else
		    TIX_MAKE_SHLIB=""
		    TIX_INSTALL_SHLIB=""
		    TIX_TEST_LOAD=""
	        fi
            fi
        else
	    TIX_TARGETS="$TIX_TARGETS unix-tk4.1-bad"
	    TIX_TK41_BAD="unix-tk4.1-bad abort-make"
	fi
    else
	    TIX_TARGETS="$TIX_TARGETS unix-tk4.1-bad"
	    TIX_TK41_BAD="unix-tk4.1-bad abort-make"
    fi
fi

#--------------------------------------------------------------------
#	Find out the source dir of ITCL 2.0
#--------------------------------------------------------------------
if test "$ENABLE_ITCL20" != "no"; then

    AC_MSG_CHECKING([checking for ITCL 2.0 source])
    devdir="$DOTDOT/itcl2.0"

    if test "$ITCL20_SRC_DIR" = ""; then
        dirs=$devdir
        for i in $dirs ; do
	    if test -r $i/itcl/itcl.h; then
	        ITCL20_SRC_DIR="$i"
	    fi
        done
    fi

    if test "$ITCL20_SRC_DIR" = ""; then
        AC_MSG_RESULT([(not found)])
    else
        AC_MSG_RESULT([(found: $ITCL20_SRC_DIR)])
    fi

    if  test "$ITCL20_SRC_DIR" != ""; then
	TIX_TARGETS="$TIX_TARGETS unix-itcl2.0"
	makefiles="$makefiles unix-itcl2.0/Makefile"
    else
  	TIX_TARGETS="$TIX_TARGETS unix-itcl2.0-bad"
	TIX_ITCL20_BAD="unix-itcl2.0-bad abort-make"
    fi
fi

#--------------------------------------------------------------------
#	Want to compile ET program?
#--------------------------------------------------------------------
AC_MSG_CHECKING([checking whether to compile with ET])

if test "$ENABLE_ET40" != "no"; then
    if test "$TCL74_FOUND" != "0"; then
        TIX_TARGETS="$TIX_TARGETS unix-et-tk4.0"
        makefiles="$makefiles unix-et-tk4.0/Makefile"
    else
        TIX_TARGETS="$TIX_TARGETS unix-et-tk4.0-bad"
	TIX_ET40_BAD="unix-et-tk4.0-bad abort-make"
        ENABLE_ET40=no
    fi
fi

if test "$ENABLE_ET40" != "no"; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#--------------------------------------------------------------------
#	Want to compile C demo programs?
#--------------------------------------------------------------------
AC_MSG_CHECKING([checking whether to compile C demos])

if test "$ENABLE_CDEMOS" != "no"; then
    if test "$TCL74_FOUND" != "0"; then
        TIX_TARGETS="$TIX_TARGETS demos-c"
        makefiles="$makefiles demos/c-code/Makefile"
    else
        TIX_TARGETS="$TIX_TARGETS demos-c-bad"
	TIX_CDEMOS_BAD="demos-c-bad abort-make"
	ENABLE_CDEMOS=no
    fi
fi

if test "$ENABLE_CDEMOS" != "no"; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#--------------------------------------------------------------------
#	Do we need the test suite
#----------------------------------------------------------------------
AC_MSG_CHECKING([checking if automated testing is needed])

if test "$makefiles" != "$DEFAULT_MAKEFILES"; then
    makefiles="$makefiles test/Makefile"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#--------------------------------------------------------------------
#	Want to compile Tix with debug info?
#----------------------------------------------------------------------

AC_MSG_CHECKING([checking if debugging info is needed])

if test "$ENABLE_DEBUG" != "no";  then
    TIX_DEFS="$TIX_DEFS -DTIX_DEBUG"
    TIX_DEBUG_FLAG=-g
    AC_MSG_RESULT(yes)
else
    TIX_DEBUG_FLAG=-O
    AC_MSG_RESULT(no)
fi

# CC may have be overridden by tclConfig.sh
#
if test "$TIX_CCOMP" != "default"; then
    CC="$TIX_CCOMP"
fi

AC_SUBST(TIX_PREFIX)
AC_SUBST(TIX_EXEC_PREFIX)

#----------------------------------------------------------------------
#
#			FINALLY ... the outputs
#
#----------------------------------------------------------------------

AC_OUTPUT($makefiles)

echo "Tix configuration is complete"