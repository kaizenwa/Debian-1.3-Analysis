@Section
   @Title { Changing the style of entries and columns }
@Begin
@PP
The style of an entry is mainly affected by three symbols:  {@Code "@Font"},
{@Code "@Break"}, and {@Code "@Wide"}.  We will review them only briefly
here, since they are treated elsewhere in this Guide, then explain how
they are used within tables.
@PP
The @Code "@Font" symbol changes the font and font size of an object.  For
example,
@ID @Code "Slope @Font { hello world }"
produces {Slope @Font { hello world }}, and
@ID @Code "{ Bold +2p } @Font { hello world }"
produces
@ID {{ Bold +2p } @Font { hello world }}
which is two points larger than it otherwise would have been, as well
as set in bold.  The abbreviations @Code "@I" and @Code "@B" stand for
@Code "Slope @Font" and {@Code "Bold @Font"}.
@PP
The @Code "@Break" symbol affects paragraph breaking.  Most relevant
here are @Code "clines @Break" and {@Code "rlines @Break"}, which will
centre or right-justify one or more lines in the column:
@ID @OneRow @Code {
"clines @Break {"
"A small centred"
"paragraph."
"}"
}
produces
@ID @OneRow {
clines @Break {
A small centred
paragraph.
}
}
for example.  Actually, there is a small problem with these symbols:  they
only work on paragraphs of at least two words, so they will fail to
centre or right-justify a solitary word.  @Code "@Tab" provides two symbols,
cc. @Index @Code "@CC"
rr. @Index @Code "@RR"
{@Code "@CC"} and {@Code "@RR"}, which do essentially the same thing,
but which work on single words as well.
@PP
The @Code "@Wide" symbol forces an object to have a given width, by
padding it with white space on the right if it is too small, or breaking
wide. @RawIndex @Code "@Wide"
wide.tables @SubIndex { in tables }
its paragraphs if it is too wide:
@ID @OneRow @Code {
"1.5i @Wide {"
"This small paragraph will be broken to"
"a width of one and one half inches."
"}"
}
produces
@ID @OneRow {
1.5i @Wide {
This small paragraph will
be broken to a width of
one and one half inches.
}
}
Widths may be specified in centimetres, points or ems using the letters
{@Code "c"}, {@Code "p"} and {@Code "e"} instead of {@Code "i"}, as
explained in Section {@NumberOf objects}.
@PP
Although these three symbols are the most frequently used in table
formats, more exotic symbols may be used equally well, for example
@Code "@Rotate" which rotates any object (the entire table, perhaps,
or one entry) by any angle (Section {@NumberOf rotation}).  Symbols
defined by the user may also be used.
@PP
To change the style of an individual entry, enclose it in the symbols
required:
@ID @OneRow @Code {
"@Rowa"
"    A { @CC { one entry of the table } }"
}
More commonly, the same style is to be applied to every entry in a
particular column, and this is done by placing the symbols for the style
inside the format option, between @Code "@Col" and the column letter:
@ID @OneRow @Code {
"@Tab"
"    @Fmta { @Col 3c @Wide @CC A  !  @Col @I 90d @Rotate B  }"
}
Any @Code "@CC" or @Code "@RR" symbol should appear last, immediately
before the column letter.  This example centres each entry of column
@Code "A" in a three centimetre space (excluding margins), and prints
every entry of column @Code "B" in italics, rotated 90 degrees.
@PP
It is best not to use the @Code "@Wide" symbol at first, since Lout is
quite good at choosing appropriate column widths:  it leaves narrow
columns unbroken, and breaks all wide ones to the same column
column.width.tables @SubIndex { in tables }
width.  If the result is not
satisfactory, and the table is wide enough to require paragraph breaking
within its entries, @Code "@Wide" should be used only to reduce the width
of the wider columns, not to increase the width of the narrower ones.
@End @Section
