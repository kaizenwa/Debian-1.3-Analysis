.\" 
.\" States manual page.
.\" Copyright (c) 1997 Markku Rossi.
.\" Author: Markku Rossi <mtr@iki.fi>
.\"
.\" This file is part of GNU enscript.
.\" 
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2, or (at your option)
.\" any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; see the file COPYING.  If not, write to
.\" the Free Software Foundation, 59 Temple Place - Suite 330,
.\" Boston, MA 02111-1307, USA.
.\"
.TH STATES 1 "Feb 6, 1997" "STATES" "STATES"

.SH NAME
states \- awk alike text processing tool

.SH SYNOPSIS
.B states
[\f3\-hV\f1]
[\f3\-D \f2var\f3=\f2val\f1]
[\f3\-f \f2file\f1]
[\f3\-o \f2outputfile\f1]
[\f3\-s \f2startstate\f1]
[\f3\-W \f2level\f1]
[\f2filename\f1 ...]

.SH DESCRIPTION

\f3States\f1 is an awk-alike text processing tool with some state
machine extensions.  It is designed for program source code
highlighting and to similar tasks where state information helps input
processing.

At a single point of time, \f3States\f1 is in one state, each quite
similar to awk's work environment, they have regular expressions which
are matched from the input and actions which are executed when a match
is found.  From the action blocks, \f3states\f1 can perform state
transitions; it can move to another state from which the processing is
continued.  State transitions are recorded so \f3states\f1 can return
to the calling state once the current state has finished.

The biggest difference between \f3states\f1 and awk, besides state
machine extensions, is that \f3states\f1 is not line-oriented.  It
matches regular expressions tokens from the input and once a match is
processed, it continues processing from the current position, not from
the beginning of the next input line.

.SH OPTIONS
.TP 8
.B \-D \f2var\f3=\f2val\f3, \-\-define=\f2var\f3=\f2val\f3
Define variable \f2var\f1 to have string value \f2val\f1.  Command
line definitions overwrite variable definitions found from the config
file. 
.TP 8
.B \-f \f2file\f3, \-\-file=\f2file\f3
Read state definitions from file \f2file\f1.  As a default,
\f3states\f1 tries to read state definitions from file \f3states.st\f1
in the current working directory.
.TP 8
.B \-h, \-\-help
Print short help message and exit.
.TP 8
.B \-o \f2file\f3, \-\-output=\f2file\f3
Save output to file \f2file\f1 instead of printing it to
\f3stdout\f1. 
.TP 8
.B \-s \f2state\f3, \-\-state=\f2state\f3
Start execution from state \f3state\f1.  This definition overwrites
start state resolved from the \f3start\f1 block.
.TP 8
.B \-V, \-\-version
Print \f3states\f1 version and exit.
.TP 8
.B \-W \f2level\f3, \-\-warning=\f2level\f3
Set the warning level to \f2level\f1.  Possible values for \f2level\f1
are:
.RS 8
.TP 8
.B light
light warnings (default)
.TP 8
.B all
all warnings
.RE

.SH PRIMITIVE FUNCTIONS

.TP 8
.B call (\f2symbol\f3)
Move to state \f2symbol\f1 and continue input file processing from
that state.  Function returns whatever the \f3symbol\f1 state's
terminating \f3return\f1 statement returned.
.TP 8
.B check_namerules ()
Try to resolve start state from \f3namerules\f1 rules.  Function
returns \f31\f1 if start state was resolved or \f30\f1 otherwise. 
.TP 8
.B check_startrules ()
Try to resolve start state from \f3startrules\f1 rules.  Function
returns \f31\f1 if start state was resolved or \f30\f1 otherwise. 
.TP 8
.B concat (\f2str\f3, ...)
Concanate argument strings and return result as a new string.
.TP 8
.B getenv (\f2str\f3)
Get value of environment variable \f2str\f1.  Returns an empty string
if variable \f2var\f1 is undefined.
.TP 8
.B int (\f2any\f3)
Convert argument to an integer number.
.TP 8
.B length (\f2item\f3, ...)
Count the length of argument strings or lists.
.TP 8
.B list (\f2any\f3, ...)
Create a new list which contains items \f2any\f1, ...
.TP 8
.B panic (\f2any\f3, ...)
Report a non-recoverable error and exit with status \f31\f1.  Function
never returns.
.TP 8
.B print (\f2any\f3, ...)
Convert arguments to strings and print them to the output.
.TP 8
.B regmatch (\f2string\f3, \f2regexp\f3)
Check if string \f2string\f1 matches regular expression \f2regexp\f1.
Functions returns a boolean success status and sets sub-expression
registers \f3$\f2n\f1.
.TP 8
.B regsub (\f2string\f1, \f2regexp\f3, \f2subst\f3)
Search regular expression \f2regexp\f1 from string \f2string\f1 and
replace the matching substring with string \f2subst\f1.  Returns the
resulting string.
.TP 8
.B regsuball (\f2string\f1, \f2regexp\f3, \f2subst\f3)
Like \f3regsub\f1 but replace all matches of regular expression
\f2regexp\f1 from string \f2string\f1 with string \f2subst\f1.
.TP 8
.B sprintf (\f2fmt\f1, ...)
Format arguments according to \f2fmt\f1 and return result as a
string. 
.TP 8
.B strcmp (\f2str1\f3, \f2str2\f3)
Perform a case\-sensitive comparision for strings \f2str1\f1 and
\f2str2\f1.  Function returns a value that is:
.RS 8
.TP 8
.B -1
string \f2str1\f1 is less than \f2str2\f1
.TP 8
.B 0
strings are equal
.TP 8
.B 1
string \f2str1\f1 is greater than \f2str2\f1
.RE
.TP 8
.B string (\f2any\f3)
Convert argument to string.
.TP 8
.B strncmp (\f2str1\f3, \f2str2\f3, \f2num\f3)
Perform a casee\-sensitive comparision for strings \f2str1\f1 and
\f2str2\f1 comparing at maximum \f2num\f3 characters.
.TP 8
.B substring (\f2str\f3, \f2start\f3, \f2end\f3)
Return a substring of string \f2str\f1 starting from position
\f2start\f1 (inclusively) to \f2end\f1 (exclusively).
.RE

.SH BUILTIN VARIABLES
.TP 8
.B $\f2n\f3
the \f2n\f1th parenthesized regular expression sub-expression from the
latest state regular expression or from the \f3regmatch\f1 primitive
.TP 8
.B filename
name of the current input file
.TP 8
.B program
name of the program (usually \f3states\f1)
.TP 8
.B version
program version string
.RE

.SH FILES
.nf
.ta 4i
/usr/local/share/enscript/enscript.st	enscript's states definitions
.fi

.SH SEE ALSO
awk(1), enscript(1)

.SH AUTHOR
Markku Rossi <mtr@iki.fi> <http://www.iki.fi/~mtr/>

GNU Enscript WWW home page: <http://www.iki.fi/~mtr/genscript/>
