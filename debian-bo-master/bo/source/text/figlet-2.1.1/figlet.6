.\"  figlet
.\"  Copyright (C) 1991, 1993, 1994 Glenn Chappell and Ian Chai
.\"  Internet: <ggc@uiuc.edu> and <chai@uiuc.edu>
.\"  figlet, along with the various figlet fonts and documentation, may
.\"  be freely copied and distributed.
.\"  If you use figlet, please send an e-mail message to <figlet@uiuc.edu>.
.\"
.TH FIGLET 6 "28 Apr 1995" "v2.1"

.SH NAME
figlet \- print in large characters made up of ordinary screen characters

.SH SYNOPSIS
.B figlet
[
.B \-clnprtvxDELNRX
]
[
.B \-d
.I fontdirectory
]
.PD 0
.IP
.PD
[
.B \-f
.I fontfile
]
[
.B \-m
.I smushmode
]
[
.B \-w
.IR outputwidth
]
.PD 0
.IP
.PD
[
.B \-C
.I controlfile
]
[
.B \-I
.I infocode
]

.SH DESCRIPTION
.B figlet
prints its input using large characters made up of ordinary
screen characters.
.B figlet
output is generally reminiscent of the
sort of ``signatures'' many people like to put at the end of e-mail
and UseNet messages.  It is also reminiscent of the output of some banner
programs, although it is oriented normally, not sideways.

.B figlet
can print in a variety of fonts, both left-to-right and right-to-left,
with adjacent characters kerned and ``smushed'' together in various ways.
.B figlet
fonts are stored in
separate files, which can be identified by the suffix
.RB `` .flf ''.
Most
.B figlet
font files will be stored in
.B figlet's
default font directory.

.B figlet
can also use ``control files'', which tell it to map certain input
characters to certain other characters, similar to the Unix
.B tr
command.  Control files can be identified by the suffix
.RB `` .flc ''.
Most
.B figlet
control files will be stored in
.B figlet's
default font directory.

.SH OTHER FONTS & MAILING LIST
As of this writing
you can get many fonts which are not in the basic
.B figlet
package by
anonymous FTP from ftp.nicoh.com:pub/figlet/fonts.  ftp.nicoh.com:pub/figlet
should also contain the latest version of
.B figlet
and other utilities related to
.BR figlet .
Of special interest are non-Roman fonts.  As of this
writing, there are Hebrew and Cyrillic (Russian) fonts;
more are expected.

We run an e-mail list dedicated to
.B figlet
software and font announcements, as well as general discussion about
.BR figlet .
If you would like to be on this list, send e-mail to
.B listserv@vmd.cso.uiuc.edu
with the message body
.RS
.nf

.fi
.B subscribe figlet-l
.I YOUR NAME
.nf

.fi
.RE
where
.I YOUR NAME
should be replaced with your name.  For those who don't want to be
bothered with the discussions, the list can be configured so that you
only see software update notices, or only software and font
announcements.

.SH USAGE
Just start up
.B figlet
(type
.RB `` figlet '')
and then type whatever you want.
Alternatively, pipe a file or the output of another command through
.BR figlet .
See
.B EXAMPLES
for other things to do.

.SH OPTIONS
.B figlet
reads command line options from left to right, and only the last
option that affects a parameter has any effect.  Every option
has an inverse, so that, for example, if
.B figlet
is customized with a C-shell
.BR alias ,
all the options are still available.

Commonly-used options are
.BR \-f ,
.BR \-c ,
.BR \-m0 ,
.BR \-t ,
.B \-p
and
.BR \-v .

.TP
.BI \-f \ fontfile
Select the font.  The
.B .flf
suffix may be left off of
.IR fontfile ,
in which case
.B figlet
automatically appends it.
.B figlet
looks for the file first in the default font directory and then
in the current directory, or, if
.I fontfile
was given as a full pathname, in the given directory.
If the
.B \-f
option is not specified,
.B figlet
uses the font that was specified
when it was compiled.  To find out which font this is, use the
.B \-I3
option.

.TP
.BI \-d \ fontdirectory
Change the default font directory.
.B figlet
looks for fonts first in the
default directory and then in the current directory.
If the
.B \-d
option is not specified,
.B figlet
uses the directory that was specified
when it was compiled.  To find out which directory this is, use the
.B \-I2
option.

.TP
.B \-c
.PD 0
.TP
.B \-l
.PD 0
.TP
.B \-r
.PD 0
.TP
.B \-x
.PD
These options handle the justification of
.B figlet
output.
.B \-c
centers the output horizontally.
.B \-l
makes the output flush-left.
.B \-r
makes it flush-right.
.B \-x
(default) sets the justification according to whether left-to-right or
right-to-left text is selected.  Left-to-right text will be flush-left,
while right-to-left text will be flush-right.  (Left-to-right versus
right-to-left text is controlled by
.BR \-L ,
.B \-R
and
.BR \-X .)

.TP
.B \-t
.PD 0
.TP
.BI \-w \ outputwidth
.PD
These options control the
.IR outputwidth ,
or the screen width
.B figlet
assumes when formatting its output.
.B figlet
uses the
.I outputwidth
to determine when to break lines and how to center
the output.  Normally,
.B figlet
assumes 80 columns so that people with wide terminals
won't annoy the people they e-mail
.B figlet
output to.
.B \-t
sets the
.I outputwidth
to the terminal width.  If the terminal width cannot be determined,
the previous
.I outputwidth
is retained.
.B \-w
sets the
.I outputwidth
to the given integer.  An
.I outputwidth
of 1 is a special value that tells
.B figlet
to print each non-space character, in its entirety, on a separate line,
no matter how wide it is.

.TP
.B \-p
.PD 0
.TP
.B \-n
.PD
These options control how figlet handles newlines.
.B \-p
puts
.B figlet
into ``paragraph mode'', which eliminates some unnecessary line
breaks when piping a multi-line file through
.BR figlet .
In paragraph mode,
.B figlet
treats line breaks within a paragraph as if they were merely blanks
between words.  (Specifically,
.B \-p
causes
.B figlet
to convert any newline which is not preceded by a newline and not
followed by a space character into a blank.)
.B \-n
puts
.B figlet
back to normal (default), in which every newline
.B figlet
reads causes it to produce a line break.

.TP
.B \-D
.PD 0
.TP
.B \-E
.PD
.B \-D
switches to the German (Deutsch) character set.  Turns `[', `\e'
and `]' into umlauted A, O and U, respectively.  `{', `|' and `}' turn
into the respective lower case versions of these.  `~' turns into s-z.
(Of course, all this assumes the font author has placed German
characters in these positions in the font file.  Many font authors do
not.)
.B \-E
switches back to English (default), i.e., the standard ASCII character
set.

.TP
.BI \-C \ controlfile
.PD 0
.TP
.B \-N
.PD
These options deal with
.B figlet
.IR controlfiles .
A 
.I controlfile
is a file containing a list of commands that
.B figlet
executes each time it reads a character.  These commands can map certain
input characters to other characters, similar to the Unix
.B tr
command or the
.B figlet
.B \-D
option.
.B figlet
maintains a list of
.IR controlfiles ,
which is empty when
.B figlet
starts up.
.B \-C
adds the given
.I controlfile
to the list.
.B \-N
clears the
.I controlfile
list, cancelling the effect of any previous
.BR \-C .
.B figlet
executes the commands in all
.I controlfiles
in the list.  See
.B CONTROLFILE FORMAT
for details on how to write a
.IR controlfile .

.TP
.BI \-m \ smushmode
Specifies how
.B figlet
should ``smush'' and kern consecutive characters together.
On the command line,
.B \-m0
can be useful, as it tells figlet to kern characters without smushing
them together.
Otherwise, this option is rarely needed, as a
.B figlet
font file specifies the best smushmode to use with the font.
.B \-m
is, therefore, most useful to font designers testing the various
.I smushmodes
with their font.
.I smushmode
can be
.B -2
through
.BR 63 .
.RS
.TP
.BR -2 " Get mode from font file (default)."
Every
.B figlet
font file specifies the best
.I smushmode
to use with the font.  This will be one of the
.I smushmodes
.RB ( -1
through
.BR 63 )
described in the following paragraphs.
.TP
.BR -1 " No smushing or kerning."
Characters are simply concatenated together.
.TP
.BR 0 " Kern only."
Characters are pushed together until they touch.

In any non-negative
.I smushmode
.B figlet
kerns adjacent font characters, i.e.,
it pushes adjacent font characters together until their non-blank portions
touch.  At that point, it may or may not push the two font characters 1
screen character closer, depending on the
.IR smushmode .
Pushing font characters one step closer requires ``smushing'' two
non-blank screen characters into a single screen character.
.B figlet
has 6 ways of doing this, represented by 1, 2, 4, 8, 16 and 32.  The
various non-negative
.I smushmodes
.RB ( 0 - 63 )
are obtained by adding up the numbers corresponding to the sort of
smushing
.B figlet
should do.  In particular
.I smushmode
.B 0
kerns characters without smushing them into each other.
.TP
.BR 1 " Smush equal characters."
Two screen characters are smushed into a single character if they are the
same.  The resulting character is the same as both of the original characters.
This mode does not smush the character known as a
.IR hardblank ,
which is a character that prints as a blank, but is not smushed (except
in mode 32).  See
.B FONT FILE FORMAT
for more information on
.IR hardblanks .
.TP
.BR 2 " Smush underscores."
An underscore will be
smushed into (and replaced by) any of ``|/\e[]{}()<>''.
.TP
.BR 4 " Hierarchy smushing."
Smushes certain characters together according to a hierarchy
containing 6 classes: ``|'', ``/\e'', ``[]'', ``{}'', ``()'', ``<>''.
A member of any class can be smushed into and replaced by a member of
any later class.
.TP
.BR 8 " Opposite pair smushing, type I."
Smushes opposing brackets (``[]''), braces (``{}'') and parentheses
(``()'') together, replacing them with a vertical bar (`|').
.TP
.BR 16 " Opposite pair smushing, type II."
Smushes opposing slashes (``/\e'') and greater-than/less-than (``><'')
together, replacing them with an upper-case `X'.  ``><'' are only
smushed together when they are in that order, i.e., ``<>'' will not be
smushed.
.TP
.BR 32 " Hardblank smushing."
Smushes two
.I hardblanks
together, replacing them with a single
.IR hardblank .
See
.B FONT FILE FORMAT
for more information on
.IR hardblanks .
.RE

.TP
.B \-v
.PD 0
.TP
.BI \-I \ infocode
.PD
These options print various information about
.BR figlet ,
then exit.  If several of these options are given on the command line, only
the last is executed, and only after
all other command-line options have been dealt with.

.B \-v
prints version and copyright information, as well as a ``Usage: ...''
line.
.B \-I
prints the information corresponding to the given
.I infocode
in a consistent, reliable (i.e., guaranteed to be the same in
future releases) format.
.B \-I
is primarily intended to be used by programs that use
.BR figlet .
.I infocode
can be any of the following.
.RS
.TP
.BR -1 " Normal operation (default)."
This
.I infocode
indicates that
.B figlet
should operate normally, not giving any informational printout,
printing its input in the selected font.
.TP
.BR 0 " Version and copyright."
This is identical to
.BR \-v .
.TP
.BR 1 " Version (integer)."
This will print the version of your copy of
.B figlet
as a decimal integer.  The main version number is multiplied by 10000,
the sub-version number is multiplied by 100, and the sub-sub-version
number is multiplied by 1.  These are added together, and the result is
printed out.  For example,
.B figlet
2.1 will print
.RB `` 20100 ''.
If there is ever a version 2.1.1, it will print
.RB `` 20101 ''.
Similarly, version 3.7.2 would print
.RB `` 30702 ''.
These numbers are guaranteed to be
ascending, with later versions having higher numbers.  Note that
the first major release of
.BR figlet ,
version 2.0, did not have the
.B \-I
option.
.TP
.BR 2 " Default font directory."
This will print the default font directory.  It is affected by the
.B \-d
option.
.TP
.BR 3 " Font."
This will print the name of the font figlet would use.  It is affected by
the
.B \-f
option.
This is not a filename; the
.RB `` .flf ''
suffix is not printed.
.TP
.BR 4 " Output width."
This will print the value
.B figlet
would use for
.IR outputwidth ,
the number of columns wide
.B figlet
assumes the screen is.
It is affected by the
.B \-w
and
.B \-t
options.
.RE
.IP
If
.I infocode
is any other positive value,
.B figlet
will simply exit without printing anything.

.TP
.B \-L
.PD 0
.TP
.B \-R
.PD 0
.TP
.B \-X
.PD
These options control whether
.B figlet
prints left-to-right or right-to-left.
.B \-L
selects left-to-right printing.
.B \-R
selects right-to-left printing.
.B \-X
(default) makes
.B figlet
use whichever is specified in the font file.

.SH EXAMPLES
To use
.B figlet
with its default settings, simply type
.RS
.nf
.ft B

example% figlet

.ft R
.fi
.RE
and then type whatever you like.

To change the font, use the
.B \-f
option, for example,
.RS
.nf
.ft B

example% figlet \-f script

.ft R
.fi
.RE

Use the
.B \-c
option if you would prefer centered output:
.RS
.nf
.ft B

example% figlet \-c

.ft R
.fi
.RE

We have found that the most common use of
.B figlet
is making up large text to be placed in e-mail messages.  For this
reason,
.B figlet
defaults to 80 column output.  If you are using a wider terminal, and
would like
.B figlet
to use the full width of your terminal, use the
.B \-t
option:
.RS
.nf
.ft B

example% figlet \-t

.ft R
.fi
.RE

If you don't want
.B figlet
to smush font characters into each other, use the
.B \-m0
option:
.RS
.nf
.ft B

example% figlet \-m0

.ft R
.fi
.RE

If
.B figlet
gets its input from a file, it is often a good idea to use
.BR \-p :
.RS
.nf
.ft B

example% figlet \-p < myfile

.ft R
.fi
.RE

Of course, the above can be combined:
.RS
.nf
.ft B

example% figlet \-ptm0 \-f shadow < anotherfile
example% figlet \-cf slant

.ft R
.fi
.RE

.SS Other Things to Try
On many systems nice effects can be obtained from the
.B lean
font by piping it through
.BR tr .
Some you might want to try are the following:

.RS
.nf
.ft B
example% figlet \-f lean | tr ' _/' ' ()'
example% figlet \-f lean | tr ' _/' './\e\e'
example% figlet \-f lean | tr ' _/' ' //'
example% figlet \-f lean | tr ' _/' '/  '
.ft R
.fi
.RE

Similar things can be done with the
.B block
font and many of the other
.B figlet
fonts.

.SH FONT FILE FORMAT
If you would like to design a
.B figlet
font, it is usually best to begin
with an already-existing font.  Except for the first line of a font
file, most of the file format should be obvious.  If you design a font,
please let us know about it!  (See
.B AUTHORS
for e-mail addresses.)

A
.B figlet
font filename must have the suffix 
.RB `` .flf ''.

A
.B figlet
font file begins with a header.  The header consists of one line giving
information about the font, followed by zero or more comment lines,
which
.B figlet
ignores.  Following the header is the font data.

.SS The Header
The first line of a
.B figlet
font file is of the following form:
.RS
.nf

.BI flf2a "hardblank height up_ht maxlen smushmode cmt_count rtol"

.fi
.RE
where
.I hardblank
is a character, and the remaining values are integers, for example:
.RS
.nf
.ft B

flf2a$ 6 5 20 15 3 0

.ft R
.fi
.RE
The last value,
.IR rtol ,
may be omitted, in which case it is assumed to be
.BR 0 .
.RS
.nf
.ft B

flf2a$ 6 5 20 15 3

.ft R
.fi
.RE

For those desiring a quick explanation, the above line indicates that
this font has characters which are 6 lines tall, 5 of which are above
the baseline, no line in the font data is more than 20 characters long,
the default smushmode is 15 (kern and smush in various ways), there are
3 comment lines, and this font is to be printed left-to-right.  More
in-depth explanations follow.

The first five characters of a font file should be
.RB `` flf2a ''.
.RB `` flf2 ''
is the
.I magic number
of a
.B figlet
2 font file.  The next character
.RB (` a ')
is currently ignored.  It may mean something in future versions of
.BR figlet .
If it does, you can be sure your fonts will still work if this
character is
.RB ` a '.

Immediately following this is the
.I hardblank
(character).  Note that there are no blanks between
.RB `` flf2a ''
and the
.IR hardblank .
.B figlet
can smush together consecutive characters in
various ways.  Normally, any character can be smushed into a blank.  A
.I hardblank
prints as a blank, but cannot be smushed into any character except a
blank, and, if
.I smushmode
32 is enabled, another
.IR hardblank .
(For example, the `r' in
.B script.flf
contains a
.IR hardblank ,
`$' in that font.  To see why this is necessary, create a copy of
.B script.flf
with this
.I hardblank
replaced by a blank.  In this new font, the ``tr'' combination looks
awful.)

By convention, the
.I hardblank
is a `$', but it can be any character besides blank, newline and null.
If you want the entire printing ASCII set available to use, make the
.I hardblank
a <delete> character.

Then comes the
.I height
(integer).  This is the number of screen lines high that each character
in the font is.

.I up_ht
(integer) is the number of lines from the baseline of a
character to the top of the character, i.e., it is the height of a
character, ignoring any descenders.  This number is currently ignored by
.BR figlet ,
but future versions may use it.

.I maxlen
(integer) is the maximum length of a line in the font file
(excluding the first line and the comments lines, which can be as long as
you want).  You may want to make this a little too large as a
safety measure.

.I smushmode
(integer) determines how much
.B figlet
smushes the font.  Possible
.I smushmodes
are
.B -1
through
.BR 63 .
Typically, you'll want to use
.B 0
(kern font characters without smushing them together),
.B -1
(no kerning or smushing) or
.B 15
(smush various pairs of characters together into single characters).
To try out different
.I smushmodes
with your font, use the
.B \-m
command-line option.  See
.B OPTIONS
for a more detailed explanation of these
.IR smushmodes .
(Note that a
.I smushmode
of
.B -2
can be given on the command line, but not in a font file.)

Between the first line and the actual characters of the font are the
comment lines.
.I Cmt_count
specifies how many lines there are.  These lines are optional, may be as
long as you want, and are ignored by
.BR figlet .

.I rtol
(integer) tells which direction the font is to be printed.  0 means
left-to-right, and 1 means right-to-left.  Left-to-right text is printed
flush-left by default, while right-to-left text is printed flush-right
by default.
.I rtol
may be omitted, in which case 0 (left-to-right) is assumed.
Earlier versions of
.B figlet
(i.e., version 2.0) ignore
.IR rtol .

Thus, a complete
.B figlet
font file header will look something like the following:

.RS
.nf
.ft B
flf2a$ 6 5 20 15 3
Example by Glenn Chappell <ggc@uiuc.edu> 8/94
Permission is hereby given to modify this font, as long as the
modifier's name is placed on a comment line.
.ft R
.fi
.RE

.SS The Font Data
The font data begins on the next line after the comments and continues to
the end of the file.  The characters from ` ' to `~' are given in standard
ASCII order, followed by the extra German characters: umlauted `A', `O',
`U', `a', `o' and `u' and s-z.  Following these are the optional
code-tagged characters.  Each character uses
.I height
lines, where
.I height
was given on the first line of the font file.  Each code-tagged
character is preceeded by an extra line with the character's code (a
number) on it.  The characters
in the file are given exactly as they should be printed out, with two
exceptions: (1)
.I hardblanks
should be the
.I hardblank
character, not a blank, and (2) every line has an
.I endmark
character.

In most
.B figlet
fonts, the
.I endmark
is either `@' or '#'.
.B figlet
eliminates the last block of consecutive equal characters from each line
(other than the header lines) when the file is read in.  By convention,
the last line of a font character has 2
.IR endmarks ,
while all the rest have one.  This makes it
easy to see where characters begin and end.  No line should have more
than 2
.IR endmarks .

The code-tagged characters are optional, and are ignored by earier
versions of
.B figlet
(i.e., version 2.0).
The code-tagged characters begin just after the German characters.
There can be as many or as few of these as you like.  The first line of a
code-tagged character has a single number on it, the character's code,
which is the number by which figlet will refer to it.  This number can be
in decimal, octal or hexadecimal, using the standard
.B scanf
conventions for such numbers.  On the next line the character itself
begins, in the same format as the un-tagged characters.

If two or more font characters have the same tag, the last one in the
font is the one used.  For this purpose, the normal ASCII characters are
considered to have tags equal to their ASCII value, while the German
characters are given tags -255 through -249.

There is no required encoding for the code-tagged characters.
.B figlet
simply prints the character with the given code when it is told to.
However, in most of the fonts, we have used ISO Latin-1 for
characters 160-255, following a suggestion of Zhahai Stewart.
Stewart has suggested using Unicode for other characters.

The zero tag is treated specially.  It is
.B figlet's
``missing character''.  Whenever
.B figlet
is told to print a character which doesn't exist in the current font, it
will print character zero.  If character zero doesn't exist, nothing will
be printed.

.SS Notes
It is very important that every character in a font has the same height,
and, once the
.I endmarks
are removed, that all the lines constituting a
single font character have the same length.  Be careful also that no
lines in the font file have trailing blanks, as
.B figlet
will take these to be the
.IR endmarks .
Many problems like these can be found easily using
.BR chkfont ,
part of the standard
.B figlet
package, and also available, as of this writing, by anonymous
FTP from ftp.nicoh.com:pub/figlet/util.

If you don't want to define all the characters, make the undefined
characters empty, i.e., each line of the character should consist only
of one or two
.IR endmarks .

The blank character should usually be made entirely of
.IR hardblanks .
(Most slanted fonts are an exception to this.)

If you design a font, it is helpful if you put your name and an e-mail
address on a comment line.  If you will allow others to modify your
font, you may want to say so on a comment line.

If a font contains a non-Roman alphabet
stored in locations normally taken by ASCII, we have found it helpful to
include a ``translation'' table as one of the characters of the font.
Typically, the
.RB `` ~ ''
character contains a list of all the special characters in the font, along
with the ASCII characters they correspond to.  It is a good idea to keep
this table no more than 79 columns wide.  (Thanks to Gedaliah Friedenberg
for this idea.)

Again, if you design a font, please let us know!

.SH CONTROLFILE FORMAT
(Note: This section isn't terribly well-written.  I really don't have
time right now to do much with it.  If you want to write a
.IR controlfile ,
just look at the existing files and ignore the
.B f
command, and you'll probably do pretty well.  Anyone needing extra help
can write us at <figlet@uiuc.edu>.  Also, anyone willing to revise this
section or the FONT FILE FORMAT section is welcome to do so.  Please let
us know about your efforts if you give it a try.  -GGC-)

'	# Above note needs to be removed eventually!!

.I Controlfiles
are files containing lists of commands that
.B figlet
executes each time it reads a character.  A
.I controlfile
is specified to
.B figlet
using the
.B \-C
command line option (see OPTIONS).
In the file itself the first line identifies the file as a
.B figlet
.IR controlfile ,
and the remaining lines are the commands, one per line.
Currently, the only recognized commands tell
.B figlet
to translate one character to another (similar to the Unix
.B tr
command).  In future versions of
.BR figlet ,
more commands may be added.
As with font files, when writing a
.IR controlfile ,
it is usually best to begin with an existing file.

The filename of a
.B figlet
.I controlfile
must have the suffix 
.RB `` .flc ''.

The first five characters of a
.I controlfile
should be
.RB `` flc2a ''.
.RB `` flc2 ''
is the
.I magic number
of a
.B figlet
.IR controlfile .
The next character
.RB (` a ')
is currently ignored.  It may mean something in future versions of
.BR figlet .
If it does, you can be sure your files will still work if this
character is
.RB ` a '.

Each of the following lines of the file consists of a one-character
command followed by whatever parameters the command requires, excepting
blank lines, which are ignored.  There are currently three recognized
commands: 
.BR # ,
.B t
and
.BR f .

.TP
.BR # " comment"
Any line beginning with
.B #
is ignored.

.TP
.BR t " translate"
This is similar to the Unix
.B tr
command.  It directs figlet to ``translate'' one character to another.
.RB `` t ''
is followed by one or more blanks, then by a character (or range of
characters, e.g.,
.RB `` A-Z '')
then one or more blanks, then another character (or range).

'	# Begin indent for t command discussion
.RS
For example,
.RS
.nf
.ft B

t # $

.ft R
.fi
.RE
will convert `#' to `$', while
.RS
.nf
.ft B

t A-Z a-z

.ft R
.fi
.RE
will convert upper-case ASCII to lower-case ASCII.  A range should always
be followed by another range of the same size.

A number of backslash (`\e') options are available for specifying
characters.  Any of the standard ``C'' language backslash-character
conventions are legal, e.g.,
.RB `` \en ''
for newline, etc.  Also, backslash-blank can be
used to specify a blank character.  Backslash followed by a number in any
of the standard
.B scanf
formats (decimal, octal or hexadecimal) specifies the character with the
given code.  For example,
.RS
.nf
.ft B

t \en-\e  \e65-W

.ft R
.fi
.RE
will convert all characters from newline to blank into the corresponding
characters from `A' to `W' (`A' has code 65).

If a number of consecutive
.B t
commands are given, then for each character input, only the first
applicable command, if any, will be executed.  As a result,
.RS
.nf
.ft B

t A B
t B A

.ft R
.fi
.RE
will swap the characters `A' and `B'.  If
.B figlet
reads an `A' the first command will change `A' to `B', in which
case the second will not be executed.  In the following list,
.RS
.nf
.ft B

t A B
t A C

.ft R
.fi
.RE
the second command is never executed.  In short, a sequence of
.B t
commands ``does what it ought to''.
'	# End indent for t command discussion
.RE

.TP
.BR f " freeze"
More complex files, in which a single character is acted upon by several
.B t
commands, can be set up using the
.B f
command.
.B f
``freezes'' the current character, executing the remaining commands in
the
.I controlfile
as if they were in a separate file.  The
.B f
command has no parameters, and anything following it on the same line is
ignored.
(Note: If you, along with so many others, cannot figure out
what the
.B f
command does, or why anyone would use it, feel free to ignore it.)
After
.B figlet
executes a
.B t
command, it skips to the end of the file or to the next
.B f
command.  If any
.B t
commands follow, the first applicable one will be executed.  The result
is that
.B f
acts as a ``freeze'', executing the remaining commands as if they were
in a separate file.

'	# Begin indent for f command discussion
.RS
'	# End indent for f command discussion
.RE

.SH FILES
.PD 0
.TP 20
.IB file .flf
.B figlet
font file
.TP 20
.IB file .flc
.B figlet
control file
.PD

.SH DIAGNOSTICS
.B figlet's
diagnostics are intended to be self-explanatory.  Possible
messages are

.RS
.nf
.ft B
Usage: ...
Out of memory
Unable to open font file
Not a figlet 2 font file
Unable to open control file
Not a figlet 2 control file
"\-t" is disabled, since ioctl is not fully implemented.
.ft R
.fi
.RE

This last message is printed when the
.B \-t
option is given, but the operating system in use does not include
the system call
.B figlet
uses to determine the terminal width.

.B figlet
also prints an explanatory message if the
.B \-F
option is given on the command line.
The earlier version of
.BR figlet ,
version 2.0, listed the available fonts when the
.B \-F
option was given.  This option has been removed from
.B figlet
2.1.  It has been replaced by the
.B figlist
script, which is part of the standard
.B figlet
package.

.SH ORIGIN
.RB `` figlet ''
stands for ``Frank, Ian and Glenn's LETters''.  Inspired by Frank's .sig,
Glenn wrote (most of) it, and Ian helped.

Most of the standard
.B figlet
fonts were inspired by signatures on various UseNet
articles.  Since typically hundreds of people use the same style of
letters in their signatures, it was often not deemed necessary to give
credit to any one font designer.

.SH BUGS
Very little error checking is done on font and control files.  While
.B figlet
tries to be forgiving of errors, and should (hopefully) never actually
crash, using an improperly-formatted file with
.B figlet
will produce unpredictable output.

.B figlet
does not handle formatting characters in a very intelligent way.
A tab character is converted to a blank, and vertical-tab, form-feed and
carriage-return are each converted to a newline.  On many systems, tabs
can be handled better by piping files through
.B expand
before piping through
.BR figlet .

.B figlet
output is quite ugly if it is displayed in a proportionally-spaced font.
I suppose this is to be expected.

.SH AUTHORS
Glenn Chappell <ggc@uiuc.edu> did most of the work. 
You can e-mail him but he is not an e-mail fanatic; people who e-mail
Glenn will probably get answers, but if you e-mail his best friend:

Ian Chai <chai@uiuc.edu>, who
.I is
an e-mail fanatic, you'll get answers, endless conversation about the
mysteries of life, invitations to join some 473 mailing lists and a
free toaster.  (Well, ok, maybe not the free toaster.)

Frank inspired this whole project with his .sig, but don't e-mail
him; he's decidedly an un-e-mail-fanatic.
