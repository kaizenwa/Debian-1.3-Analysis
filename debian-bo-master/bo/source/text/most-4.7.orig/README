Compiling MOST requires an ansi compatable c compiler.  It compiles fine with
`cc' on Ultrix and VMS, and `gcc' on a sun4.   In addition you MUST
have a copy of the S-Lang library.  This library is available from
ftp://space.mit.edu/pub/davis/slang.  

                          INSTALLATION INSTRUCTIONS
			  
On Unix, you should be able to simply type:

    ./configure; make

at the Unix prompt.  

For VMS, edit the file `vmsmake.com'.  When finished, either type `@vmsmake'
or `@vmsmake gcc' at the VMS prompt.  Once MOST has been created, it must be
installed as a foreign command.  This means that you must first type:

      $  most :== $device:[dir.containing.most]most.exe


I suggest that you first build MOST then view the doc file using MOST (`most
most.doc').  If you need help, hit the `h' key from within MOST. 

MOST understands the following environment variables:

    MOST_SWITCHES 
    MOST_EDITOR, SLANG_EDITOR, EDITOR
    MOST_INITFILE
    MOST_HELP

  1. MOST_SWITCHES is a list of commonly used switches.  

  2. MOST_EDITOR and SLANG_EDITOR are formatted strings describing what
     editor to use.  The string can contain %s and %d formatting descriptors
     that represent the file name and line number, respectively.  For
     example, if JED is your editor, then set MOST_EDITOR to 'jed %s -g %d'.
     Since MOST is just one of several programs that use the S-Lang library,
     I suggest that you use SLANG_EDITOR instead of MOST_EDITOR.

 3. MOST_INITFILE is a key definition file for MOST.  See `lesskeys.rc' for
    an example of a key definition file that causes MOST to emulate the
    `less' pager.  See also most-fun.txt for a list of functions that can be
    used for key definitions.  The file `default.rc' list the bindings that
    are built-in to the viewer.

 4. If MOST_HELP is defined to point to an existing file, MOST will load a
    file as a help file.  This is useful for describing custom keymaps.
    
Any problems with MOST should be reported to davis@space.mit.edu.

--John Davis
