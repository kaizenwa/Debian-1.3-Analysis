{\rtf1\ansi
{\fonttbl
{\f0\fswiss Helvetica;}
{\f1\fmodern Courier;}
{\f2\froman Times;}
{\f3\froman Symbol;}
}
{\info{\comment Translated from SGML to RTF w/ Linuxdoc-SGML}}

\page{\pard\plain\keepn\f0\fs36\b\tx576{1 Introduction}}
{}#{\footnote TOC_0}

${\footnote Introduction}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Introduction}

This is a user's guide to the SGML-Tools document processing system.  SGML-Tools  
provides a SGML DTD (Document Type Definition) and set of ``replacement files'' 
which convert the SGML to groff, LaTeX, HTML, GNU info, LyX, and RTF  
source.
\par\pard\plain
\li500{}
\sb200\fi0
SGML-Tools is based heavily on the QWERTZ DTD by Tom Gordon, 
{\f1 thomas.gordon@gmd.de}.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{1.1 About This Document}}
{}#{\footnote TOC_1}
{}K{\footnote About This Document}

This document is written using the linuxdoc DTD, which comes with SGML-Tools.   
It contains more or less everything you need to know to write SGML documents  
with this DTD.  See {\f1 example.sgml} for an example of an SGML document that  
you can use as a model for your own documents.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{1.2 Why SGML?}}
{}#{\footnote TOC_2}
{}K{\footnote Why SGML?}

I chose SGML for this system because SGML is made specifically for translation 
to other formats.  SGML, which stands for Standard Generalized Markup Language, 
allows you to specify the {\i structure} of a document---that is, what kinds 
of things make up the document.  You specify the structure of a document with 
a DTD (Document Type Definition).  linuxdoc is one DTD that specifies 
the structure for Linux HOWTOs and other documents.  QWERTZ is another DTD; the 
SGML standard provides DTD's for books, articles, and other generic document 
types.
\par\pard\plain
\li500{}
\sb200\fi0
The DTD specifies the names of ``elements'' within the document.  An element 
is just a bit of structure---like a section, a subsection, a paragraph, 
or even something smaller like {\i emphasized text}.  Unlike LaTeX, however, 
these elements are not in any way intrinsic to SGML itself.  The 
linuxdoc DTD happens to define elements that look a lot like  
their LaTeX counterparts---you have sections, subsections, verbatim 
``environments'', and so forth.  However, using SGML you can define any kind 
of structure for the document that you like.  In a way, SGML is like  
low-level TeX, while the linuxdoc DTD is like LaTeX.
\par\pard\plain
\li500{}
\sb200\fi0
Don't be confused by this analogy.  SGML is {\i not} a text-formatting system. 
There is no ``SGML formatter'' per se.  SGML source is {\i only} converted 
to other formats for processing.  Furthermore, SGML itself is used only to  
specify the document structure.  There are no text-formatting facilities or 
``macros'' intrinsic to SGML itself.  All of those things are defined within 
the DTD.  You can't use SGML without a DTD, a DTD defines what SGML does.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{1.3 How It Works}}
{}#{\footnote TOC_3}
{}K{\footnote How It Works}

Here's how processing a document with SGML-Tools  
works.  First, you need a DTD.  I'm using the QWERTZ DTD which was produced, 
originally, by a group of people who needed a LaTeX-like DTD.  I've modified 
the QWERTZ DTD to produce the linuxdoc DTD for our purposes.   
The DTD simply sets up the structure of the document.  A small portion of 
it looks like this: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <!element article - - \line
    (titlepag, header?,  \line
     toc?, lof?, lot?, p*, sect*,  \line
     (appendix, sect+)?, biblio?) +(footnote)>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
This part sets up the overall structure for an ``article'', which is like 
a ``documentstyle'' within LaTeX.  The article consists of a titlepage 
({\f1 titlepag}), an optional header ({\f1 header}), an optional table of  
contents ({\f1 toc}), optional lists of figures ({\f1 lof}) and tables 
({\f1 lot}), any number of paragraphs ({\f1 p}), any number of top-level 
sections ({\f1 sect}), optional appendices ({\f1 appendix}), an optional 
bibliography ({\f1 biblio}) and footnotes ({\f1 footnote}).  
\par\pard\plain
\li500{}
\sb200\fi0
As you can see, the DTD doesn't say anything about how the document should 
be formatted or what it should look like.  It just defines what parts make 
up the document.  Elsewhere in the DTD the structure of the  
{\f1 titlepag}, {\f1 header}, {\f1 sect}, and other elements are defined.  
\par\pard\plain
\li500{}
\sb200\fi0
You don't need to know anything about the syntax of 
the DTD in order to write documents.  I'm just presenting it so you know 
what it looks like and what it does.  You {\i do} need to be familiar with 
the document {\i structure} that the DTD defines.  If not, you might 
violate the structure when attempting to write a document, and be very 
confused about the resulting error messages.  We'll describe the 
structure of SGML documents in detail later.
\par\pard\plain
\li500{}
\sb200\fi0
The next step is to write a document using the structure defined by the 
DTD.  Again, the linuxdoc DTD makes documents look a lot like 
LaTeX---it's very easy to follow.  In SGML jargon a single document written 
using a particular DTD is known as an ``instance'' of that DTD.  
\par\pard\plain
\li500{}
\sb200\fi0
In order to translate the SGML source into another format (such as LaTeX 
or groff) for processing, the SGML source (the document that you wrote) 
is {\i parsed} along with the DTD by the SGML {\i parser}. 
I'm using the {\f1 sgmls} parser by James Clark, {\f1 jjc@jclark.com}, who 
also happens to be the author of {\f1 groff}.  We're in good hands. 
The parser ({\f1 sgmls}) simply picks through your document and  
verifies that it follows the structure set forth by the DTD.  It also spits out 
a more explicit form of your document, with all ``macros'' and elements 
expanded, which is understood by {\f1 sgmlsasp}, the next part of the 
process.  
\par\pard\plain
\li500{}
\sb200\fi0
{\f1 sgmlsasp} is responsible for converting the output of {\f1 sgmls} to 
another format (such as LaTeX).  It does this using {\i replacement files}, 
which describe how to convert elements in the original SGML document into 
corresponding source in the ``target'' format (such as LaTeX or groff).  
\par\pard\plain
\li500{}
\sb200\fi0
For example, part of the replacement file for LaTeX looks like: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <itemize>    +    "\\begin\{itemize\}   + \line
</itemize>   +    "\\end\{itemize\}    +}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Which says that whenever you begin an {\f1 itemize} element in the  
SGML source, it should be replaced with  

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 \begin\{itemize\}}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
in the LaTeX source.  (As I said, elements in the DTD 
are very similar to their LaTeX counterparts).  
\par\pard\plain
\li500{}
\sb200\fi0
So, to convert the SGML to another format, all you have to do is write 
a new replacement file for that format that gives the appropriate  
analogies to the SGML elements in that new format.  In practice, it's not 
that simple---for example, if you're trying to convert to a format that 
isn't structured at all like your DTD, you're going to have trouble.  In  
any case, it's much easier to do than writing individual parsers and 
translators for many kinds of output formats; SGML provides a generalized 
system for converting one source to many formats.
\par\pard\plain
\li500{}
\sb200\fi0
Once {\f1 sgmlsasp} has completed its work, you have LaTeX source which 
corresponds to your original SGML document, which you can format using 
LaTeX as you normally would.  Later in this document I'll give examples 
and show the commands used to do the translation and formatting.  You can 
do this all on one command line.
\par\pard\plain
\li500{}
\sb200\fi0
But first, I should describe how to install and configure the software.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{2 Installation}}
{}#{\footnote TOC_4}

${\footnote Installation}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Installation}

Get {\f1 sgml-tools-0.99.9.tar.gz} from one of the following ftp sites: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 ftp://sunsite.unc.edu/pub/Linux/utils/text/sgml-tools-0.99.0.tar.gz}
\par\pard\plain
\li500{}
\sb200\fi0
You can also get uptodate information from the  
{\f1 {SGML-Tools WWW Page}}.
\par\pard\plain
\li500{}
\sb200\fi0
The file {\f1 sgml-tools-0.99.0.tar.gz} contains everything that you need 
to write SGML documents and convert them to groff, LaTeX, HTML, GNU info, LyX, 
and RTF.  In addition to this package, you will need the following 
tools - these are not required by the SGML system, but I suggest that you get 
them in order to format your documents and verify that they look  
all right before distributing them.   
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 groff}.  You {\i need} version 1.08 or greater.  You can get this from  
{\f1 ftp://prep.ai.mit.edu/pub/gnu}.  There is a Linux  
binary version on  
{\f1 ftp://sunsite.unc.edu/pub/Linux/utils/text} 
as well.  You will need {\f1 groff} to produce plain text from your SGML documents. 
{\f1 nroff} will {\i not} work! 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} TeX and LaTeX.  This is available more or less everywhere; you should 
have no problem getting it and installing it (there is a Linux binary 
distribution on {\f1 sunsite.unc.edu}).  Of course, you only need TeX/LaTeX 
if you want to format your SGML documents with LaTeX.  So, installing TeX/LaTeX 
is optional. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 flex}.  {\f1 lex} will probably not work.  You can get this from 
{\f1 ftp://prep.ai.mit.edu/pub/gnu}. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 gawk} and the GNU info tools, for formatting and viewing  
info files.  These are also available on  
{\f1 ftp://prep.ai.mit.edu/pub/gnu}, or on  
{\f1 ftp://sunsite.unc.edu/pub/Linux/utils/text}  
(for {\f1 gawk}) and 
{\f1 ftp://sunsite.unc.edu/pub/Linux/system/Manual-pagers}  
(for GNU info tools).  {\f1 awk} will not work. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} LyX (a quasi-WYSIWYG interface to LaTeX, with SGML layouts), is 
available on  
{\f1 ftp://ftp.via.ecp.fr}.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.1 Installing The Software}}
{}#{\footnote TOC_5}
{}K{\footnote Installing The Software}

The steps needed to install and configure the SGML-Tools are:
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} First, unpack the tar file {\f1 sgml-tools-0.99.0.tar.gz} somewhere.   
This will create the directory {\f1 sgml-tools-0.99.0}.  It doesn't matter  
where you unpack this file; just don't move things around within the  
{\f1 sgml-tools-0.99.0} directory. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Read the {\f1 INSTALL} file - it has detailed installation instructions. 

If all went well, you should be ready to use the system.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.2 Formatting SGML Documents}}
{}#{\footnote TOC_6}
{}K{\footnote Formatting SGML Documents}

Let's say you have the SGML document {\f1 foo.sgml}, which you want to format. 
Here is a general overview of formatting the document for different output. 
For a complete list of options, consult the man pages.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating Plain Text Output}}
{}K{\footnote Creating Plain Text Output}\par\pard\plain\li500\sb200\fi0

If you want to produce plain text, use the command: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2txt foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
Note that I have tailored the groff conversion for plain text output. 
That is, I've removed page headers, page numbers, changed the margins, 
and so on.  With some hacking you can produce PostScript and DVI from the  
groff output, but I suggest that you use LaTeX for that instead.
\par\pard\plain
\li500{}
\sb200\fi0
You can also create groff source for man pages, which can be formatted with 
{\f1 groff -man}.  To do this, do the following: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2txt -man foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating LaTeX, DVI or PostScript Output}}
{}K{\footnote Creating LaTeX, DVI or PostScript Output}\par\pard\plain\li500\sb200\fi0

To create a LaTeX documents from the SGML source file, simply run: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2latex foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
If you want to produce PostScript output (via {\f1 dvips}), use the  
{\f1 -p} option: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2latex -p foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
Or, you can produce a DVI file using the {\f1 -d} switch, as so: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2latex -d foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating HTML Output}}
{}K{\footnote Creating HTML Output}\par\pard\plain\li500\sb200\fi0

If you want to produce HTML output, do this: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2html -img foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
This will produce {\f1 foo.html}, as well as {\f1 foo-1.html}, 
{\f1 foo-2.html}, and so on---one file for each section of the document. 
Run your WWW browser on {\f1 foo.html}, which is the top level file. 
Also make sure that all of the HTML files corresponding to your document 
are in one directory, as they reference each other with local URLs.   
The icons referenced in the HTML output are located in  
{\f1 $SGMLTOOLSLIB/icons}.  These will also need to be copied to the  
final location of the HTML documents.  {\f1 $SGMLTOOLSLIB} is defined  
at the beginning of the SGML conversion scripts.
\par\pard\plain
\li500{}
\sb200\fi0
If you use {\f1 sgml2html} without the {\f1 -img} flag, HTML documents will 
have the labels ``Previous'', ``Next'', and ``Table of Contents'' for  
navigation.  You can override these defaults by creating a file in  
{\f1 $SGMLTOOLSLIB/rep/html/<filename>}, and substituting your  
own words for different languages.  The file has the following format: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1    PrevPage:  newvalue \line
    NextPage:  newvalue \line
        TOC:     newvalue}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
See {\f1 deutsch} for an example.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating GNU Info Output}}
{}K{\footnote Creating GNU Info Output}\par\pard\plain\li500\sb200\fi0

If you want to format your file for the GNU info browser, just run the 
following command: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2info foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating LyX Output}}
{}K{\footnote Creating LyX Output}\par\pard\plain\li500\sb200\fi0

For LyX output, use the the command: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2lyx foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Creating RTF Output}}
{}K{\footnote Creating RTF Output}\par\pard\plain\li500\sb200\fi0

If you want to produce RTF output, run the command: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2rtf foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
This will produce {\f1 foo.rtf}, as well as {\f1 foo-1.rtf}, 
{\f1 foo-2.rtf}, and so on---one file for each section of the document.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Checking SGML Syntax}}
{}K{\footnote Checking SGML Syntax}\par\pard\plain\li500\sb200\fi0

If you just want to capture your errors from the SGML conversion, 
use the {\f1 sgmlcheck} script.  For example. 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgmlcheck foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{2.3 ISO 8859-1 Character Set}}
{}#{\footnote TOC_7}
{}K{\footnote ISO 8859-1 Character Set}

The ISO 8859-1 (latin1) character set may be used for international characters  
in plain text, LaTeX, HTML, LyX, and RTF output (GNU info support for  
ISO 8859-1 may be possible in the future).  To use this feature, give the 
formatting scripts the {\f1 -l} flag, for example: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 % sgml2txt -l foo.sgml }\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
You also can use ISO 8859-1 characters in the SGML source, they will  
automatically be translated to the proper escape codes for the corresponding  
output format.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{3 Writing Documents With SGML-Tools}}
{}#{\footnote TOC_8}

${\footnote Writing_Documents_With_SGML_Tools}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Writing Documents With SGML-Tools}

For the most part, writing documents using the SGML-Tools DTD is very 
simple, and somewhat like LaTeX.  However, there are some caveats to watch 
out for.  In this section I'll give an introduction on writing SGML documents. 
See the file {\f1 example.sgml} for a SGML example document (and tutorial) 
which you can use as a model when writing your own documents.  Here I'm just going 
to discuss the various features of SGML, but the source is not very  
readable as an example.  Instead, print out the source (as well as the 
formatted output) for {\f1 example.sgml} so you have a real live case to 
refer to.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.1 Basic Concepts}}
{}#{\footnote TOC_9}
{}K{\footnote Basic Concepts}

Looking at the source of the example document, you'll notice right off 
that there are a number of ``tags'' marked within angle brackets 
({\f1 <} and {\f1 >}).  A tag simply specifies the beginning or end 
of an element, where an element is something like a section, a paragraph, 
a phrase of italicized text, an item in a list, and so on.  Using a tag 
is like using a LaTeX command such as {\f1 \\item} or  
{\f1 \\section\{...\}}.
\par\pard\plain
\li500{}
\sb200\fi0
As a simple example, to produce {\b this boldfaced text}, I typed 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 As a simple example, to produce <bf>this boldfaced text</bf>, ...}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
in the source.  {\f1 <bf>} begins the region of bold text, and 
{\f1 </bf>} ends it.  Alternately, you can use the abbreviated form 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 As a simple example, to produce <bf/this boldfaced text/, ...}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
which encloses the bold text within slashes.  (Of course, you'll need to 
use the long form if the enclosed text contains slashes, such as the 
case with Unix filenames).  
\par\pard\plain
\li500{}
\sb200\fi0
There are other things to watch out with respect to special characters  
(that's why you'll notice all of these bizarre-looking ampersand  
expressions if you look at the source; I'll talk about those shortly).
\par\pard\plain
\li500{}
\sb200\fi0
In some cases, the end-tag for a particular element is optional.  For 
example, to begin a section, you use the {\f1 <sect>} tag,  
however, the end-tag for the section (which could appear at the end of 
the section body itself, not just after the name of the section!)  
is optional and implied when you start another section of the same depth. 
In general you needn't worry about these details; just follow the model 
used in the tutorial ({\f1 example.sgml}).
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.2 Special Characters}}
{}#{\footnote TOC_10}
{}K{\footnote Special Characters}

Obviously, the angle brackets are themselves special characters in the 
SGML source.  There are others to watch out for.  For example, let's say  
that you wanted to type an expression with angle brackets around it, 
as so: {\f1 <foo>}.  In order to get the left angle bracket, you 
must use the {\f1 &lt;} element, which is a ``macro'' that expands 
to the actual left-bracket character.  Therefore, in the source, I typed 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 angle brackets around it, as so: <tt>&lt;foo></tt>.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Generally, something beginning with an ampersand is a special macro.  For 
example, there's {\f1 &percnt;} to produce %,  
{\f1 &verbar;} to produce |, and so on.  For all  
``special characters'' there exist these ampersanded-entities to represent 
them.  
\par\pard\plain
\li500{}
\sb200\fi0
Usually, you don't need to use the ampersand macro to get a special 
character, however, in some cases it is necessary.  The most commonly used 
are: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &amp;} for the ampersand (&), 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &lt;} for a left bracket (<),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &gt;} for a right bracket (>),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &etago;} for a left bracket with a slash  
({\f1 </})
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &dollar;} for a dollar sign ($),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &num;} for a hash (#),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &percnt;} for a percent (%),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &tilde;} for a tilde (~),
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 ``} and {\f1 ''} for quotes, or use 
{\f1 &dquot} for ".
\par\pard\plain
\li500{}
\sb200\fi0
For a complete list of special characters, look at one of the replacement 
files.  Usually LaTeX complains the most about special characters, so 
paging through {\f1 $SGMLTOOLSLIB/rep/latex/general} would be a  
good place to start.  {\f1 $SGMLTOOLSLIB} is defined at the beginning  
of the SGML conversion scripts.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.3 Verbatim and Code Environments}}
{}#{\footnote TOC_11}
{}K{\footnote Verbatim and Code Environments}

While we're on the subject of special characters, I might as well mention 
the verbatim ``environment'' used for including literal text in the output 
(with spaces and indentation preserved, and so on).  The  
{\f1 verb} element is used for this; it looks like the following: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <verb> \line
 Some literal text to include as example output. \line
</verb>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
The {\f1 verb} environment doesn't allow you to use {\i everything} 
within it literally.  Specifically, you must do the following within 
{\f1 verb} environments. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &ero;} to get an ampersand, 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Use {\f1 &etago;} to get {\f1 </},
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Don't use {\f1 \\end\{verbatim\}} within a {\f1 verb} 
environment, as this is what LaTeX uses to end the {\f1 verbatim}  
environment.  (In the future, it should be possible to hide the underlying 
text formatter entirely, but the parser doesn't support this feature yet.) 
\par\pard\plain
\li500{}
\sb200\fi0
 
The {\f1 code} environment is much just like the {\f1 verb} environment, 
except that horizontal rules are added to the surrounding text, as so: 

\par\pard\sb200\keep\li1000{}{\f1 Here is an example code environment.}\line
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
You should use the {\f1 tscreen} environment around any {\f1 verb} environments, 
as so: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <tscreen><verb> \line
Here is some example text.   \line
</verb></tscreen>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
{\f1 tscreen} is an environment that simply indents the text and sets the  
sets the default font to {\f1 tt}.  This makes examples look much nicer, both 
in the LaTeX and plain text versions.  You can use {\f1 tscreen} 
without {\f1 verb}, however, if you use any special characters in your  
example you'll need to use both of them.  {\f1 tscreen} does nothing to  
special characters.  See {\f1 example.sgml} for examples.
\par\pard\plain
\li500{}
\sb200\fi0
The {\f1 quote} environment is like {\f1 tscreen}, except that it does 
not set the default font to {\f1 tt}.  So, you can use {\f1 quote} for 
non-computer-interaction quotes, as in: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <quote> \line
Here is some text to be indented, as in a quote. \line
</quote>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
which will generate: 
\begin{quotation}
Here is some text to be indented, as in a quote.
\end{quotation}
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.4 Overall Document Structure}}
{}#{\footnote TOC_12}
{}K{\footnote Overall Document Structure}

Before we get too in-depth with details, I'm going to describe the 
overall structure of a document as defined by the DTD. 
Look at {\f1 example.sgml} for a good example of how a document is set up.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{The Preamble}}
{}K{\footnote The Preamble}\par\pard\plain\li500\sb200\fi0

In the document ``preamble'' you set up things such as the title 
information and document style:  

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <!doctype linuxdoc system> \line
\line
<article> \line
\line
<title>Linux Foo HOWTO \line
<author>Norbert Ebersol, <tt/norb@baz.com/ \line
<date>v1.0, 9 March 1994 \line
<abstract> \line
This document describes how to use the <tt/foo/ tools to frobnicate \line
bar libraries, using the <tt/xyzzy/ relinker. \line
</abstract> \line
\line
<toc>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
The elements should go more or less in this order.  The first line tells 
the SGML parser to use the linuxdoc DTD.  The {\f1 <article>} 
tag forces the document to use the ``article'' document style.  (The  
original QWERTZ DTD defines ``report'' and ``book'' as well; I haven't 
tweaked these for use with SGML-Tools).
\par\pard\plain
\li500{}
\sb200\fi0
The {\f1 title}, {\f1 author}, and {\f1 date} tags should be obvious; in the 
{\f1 date} tag include the version number and last modification time of 
the document.
\par\pard\plain
\li500{}
\sb200\fi0
The {\f1 abstract} tag sets up the text to be printed at the top of the 
document, {\i before} the table of contents.  If you're not going to 
include a table of contents (the {\f1 toc} tag), you probably don't 
need an {\f1 abstract}.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Sectioning And Paragraphs}}
{}K{\footnote Sectioning And Paragraphs}\par\pard\plain\li500\sb200\fi0

After the preamble, you're ready to dive into the document.  The following 
sectioning commands are available: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 sect}: For top-level sections (i.e.  1, 2, and so on.) 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 sect1}: For second-level subsections (i.e.  1.1, 1.2, and so on.)
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 sect2}: For third-level subsubsections.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 sect3}: For fourth-level subsubsubsections.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 sect4}: For fifth-level subsubsubsubsections.
\par\pard\plain
\li500{}
\sb200\fi0
 
These are roughly equivalent to their LaTeX counterparts {\f1 section}, 
{\f1 subsection}, and so on.
\par\pard\plain
\li500{}
\sb200\fi0
After the {\f1 sect} (or {\f1 sect1}, {\f1 sect2}, etc.) tag comes the 
name of the section.  For example, at the top of this document, after 
the preamble, comes the tag: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <sect>Introduction}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
And at the beginning of this section (Sectioning and paragraphs), there 
is the tag: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <sect2>Sectioning And Paragraphs}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
After the section tag, you begin the body of the section.  However, you 
must start the body with a {\f1 <p>} tag, as so: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <sect>Introduction \line
<p> \line
This is a user's guide to the SGML-Tools document processing...}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
This is to tell the parser that you're done with the section title 
and are ready to begin the body.  Thereafter, new paragraphs are started 
with a blank line (just as you would do in TeX).  For example, 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 Here is the end of the first paragraph. \line
\line
And we start a new paragraph here.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
There is no reason to use {\f1 <p>} tags at the beginning of 
every paragraph; only at the beginning of the first paragraph after 
a sectioning command.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\plain\f0\sb200\fs24\b\tx576{Ending The Document}}
{}K{\footnote Ending The Document}\par\pard\plain\li500\sb200\fi0

At the end of the document, you must use the tag: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 </article>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{}\par\pard\plain
\li500{}
\sb200\fi0
to tell the parser that you're done with the {\f1 article} element (which 
embodies the entire document).  
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.5 Cross-References}}
{}#{\footnote TOC_13}
{}K{\footnote Cross-References}

{}#{\footnote cross_ref}
{}K{\footnote cross_ref}


Now we're going to move onto other features of the system.   
Cross-references are easy.  For example, if you want to make a 
cross-reference to a certain section, you need to label that section 
as so: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <sect1>Introduction<label id="sec-intro">}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
You can then refer to that section somewhere in the text using the 
expression: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 See section <ref id="sec-intro" name="Introduction"> for an introduction.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
This will replace the {\f1 ref} tag with the section number labeled 
as {\f1 sec-intro}.  The {\f1 name} argument to {\f1 ref} is necessary for 
groff and HTML translations.  The groff macro set used by SGML-Tools  
does not currently support cross-references, and it's often nice to refer  
to a section by name instead of number.  
\par\pard\plain
\li500{}
\sb200\fi0
For example, this section is {\uldb Cross-References}{\v cross-ref}.
\par\pard\plain
\li500{}
\sb200\fi0
There is also a {\f1 url} element for Universal Resource Locators, or 
URLs, used on the World Wide Web.  This element should be used to refer 
to other documents, files available for FTP, and so forth.  For 
example, 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 You can get the Linux HOWTO documents from  \line
<url url="http://sunsite.unc.edu/mdw/HOWTO/"  \line
   name="The Linux HOWTO INDEX">.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
The {\f1 url} argument specifies the actual URL itself.  A link to the 
URL in question will be automatically added to the HTML document. 
The optional {\f1 name} argument specifies the text that should be anchored to 
the URL (for HTML conversion) or named as the description of the 
URL (for LaTeX and groff).  If no {\f1 name} argument is given, the 
URL itself will be used.
\par\pard\plain
\li500{}
\sb200\fi0
For example, you can get the SGML-Tools package from\\  
{\f1 ftp://sunsite.unc.edu/pub/Linux/utils/text/sgml-tools-0.99.0.tar.gz}.
\par\pard\plain
\li500{}
\sb200\fi0
A useful variant of this is {\f1 htmlurl}, which suppresses rendering of 
the URL part in every context except HTML.  What this is useful for 
is things like a person's email addresses; you can write 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <htmlurl url="mailto:esr@snark.thyrsus.com" \line
      name="esr@snark.thyrsus.com">}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
and get ``esr@snark.thyrsus.com'' in text output rather than the 
duplicative ``esr@snark.thyrsus.com <mailto:esr@snark.thyrsus.com>'' 
but still have a proper URL in HTML documents.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.6 Fonts}}
{}#{\footnote TOC_14}
{}K{\footnote Fonts}

Essentially, the same fonts supported by LaTeX are supported 
by SGML-Tools.  Note, however, that the conversion to  
plain text (through {\f1 groff}) does away with the font  
information.  So, you should use fonts  
as much as possible, for the benefit of the conversion to LaTeX. 
But don't depend on the fonts to get a point across in the plain 
text version.  
\par\pard\plain
\li500{}
\sb200\fi0
In particular, the {\f1 tt} tag described above can be used to 
get constant-width ``typewriter'' font which should be used for 
all e-mail addresses, machine names, filenames, and so on.   
Example: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 Here is some <tt>typewriter text</tt> to be included in the document.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Equivalently: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 Here is some <tt/typewriter text/ to be included in the document.}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Remember that you can only use this abbreviated form if the enclosed 
text doesn't contain slashes.
\par\pard\plain
\li500{}
\sb200\fi0
Other fonts can be achieved with {\f1 bf} for {\b boldface} and {\f1 em}  
for {\i italics}.  Several other fonts are supported as well, but 
I don't suggest you use them, because we'll be converting these 
documents to other formats such as HTML which may not support them. 
Boldface, typewriter, and italics should be all that you need.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.7 Lists}}
{}#{\footnote TOC_15}
{}K{\footnote Lists}

There are various kinds of supported lists.  They are: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 itemize} for bulleted lists such as this one.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 enum} for numbered lists.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} {\f1 descrip} for ``descriptive'' lists.  
\par\pard\plain
\li500{}
\sb200\fi0
 
Each item in an {\f1 itemize} or {\f1 enum} list must be marked 
with an {\f1 item} tag.  Items in a {\f1 descrip} are marked with {\f1 tag}. 
For example, 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <itemize> \line
<item>Here is an item. \line
<item>Here is a second item. \line
</itemize>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
Looks like this: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Here is an item.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Here is a second item.
\par\pard\plain
\li500{}
\sb200\fi0
 
Or, for an {\f1 enum}, 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <enum> \line
<item>Here is the first item. \line
<item>Here is the second item. \line
</enum>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
You get the idea.  Lists can be nested as well; see the example document 
for details.
\par\pard\plain
\li500{}
\sb200\fi0
A {\f1 descrip} list is slightly different, and slightly ugly, but 
you might want to use it for some situations: 

\par\pard\sb200\keep\li1000{}{\f1 \line
\line
\par\pard\sb200\keep\li1500{}{\f1 <descrip> \line
<tag/Gnats./ Annoying little bugs that fly into your cooling fan. \line
<tag/Gnus./ Annoying little bugs that run on your CPU. \line
</descrip>}\line
\par\pard\sb200\li1000{}}
\par\pard\sb200\li500{} 
ends up looking like: 
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Gnats.
\line
Annoying little bugs that fly into your cooling fan.
\par\pard\plain
\li2000{}
\sb200\fi0
\li2000{}\fi-1000Gnus.
\line
Annoying little bugs that run on your CPU.
\par\pard\plain
\li500{}
\sb200\fi0

{\pard\sb200\plain\f0\fs24\b\tx576{3.8 Further Information}}
{}#{\footnote TOC_16}
{}K{\footnote Further Information}

\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} The QWERTZ User's Guide is available from  
{\f1 ftp://ftp.cs.cornell.edu/pub/mdw/SGML}. 
QWERTZ (and hence, SGML-Tools) supports many features such as  
mathematical formulae, tables, figures, and so forth. 
If you'd like to write general  
documentation in SGML, I suggest using the original QWERTZ DTD instead  
of the hacked-up linuxdoc DTD, which I've modified for use  
particularly by the Linux HOWTOs and other such documentation.   
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} Tom Gordon's original QWERTZ tools can be found at  
{\f1 ftp://ftp.gmd.de/GMD/sgml}. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} More information on SGML can be found at the following WWW  
pages:  
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} {\f1 {SGML and the Web}}
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} {\f1 {SGML Web Page}}
\par\pard\plain
\li1500{}
\sb200\fi0
\li1500{}\fi-200{\f3\'B7} {\f1 {Yahoo's SGML Page}}
\par\pard\plain
\li1000{}
\sb200\fi0
 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} James Clark's {\f1 sgmls} parser, and it's successor {\f1 nsgmls} 
and other tools can be found at 
{\f1 ftp://ftp.jclark.com} and at {\f1 {James Clark's WWW Page}}. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} The emacs psgml package can be found at 
{\f1 ftp://ftp.lysator.liu.se/pub/sgml}.  This package 
provides a lot of SGML functionality. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} You can join the SGML-Tools mailing list by sending mail to 
{\f1 majordomo@via.ecp.fr} with {\f1 subscribe linuxdoc-sgml} in  
the message body.  The list address is  
{\f1 linuxdoc-sgml@via.ecp.fr}. 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} More information on {\f1 LyX} can be found at the 
{\f1 {LyX WWW Page}}.  {\f1 LyX} is a high-level word processor  
frontend to LaTeX.  Quasi-WYSIWYG interface, many LaTeX styles and  
layouts automatically generated.  Speeds up learning LaTeX and makes  
complicated layouts easy and intuitive. 
\par\pard\plain
\li500{}
\sb200\fi0
}