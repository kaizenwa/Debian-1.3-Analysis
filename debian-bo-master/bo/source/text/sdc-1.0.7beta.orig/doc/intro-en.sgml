		       <!-- -*-jfw-sgml-*- -->
<!doctype report public "-//JFW//DTD Report//EN" [

<!ENTITY % targ SYSTEM "target.ent" > %targ;

<!ENTITY bib SYSTEM "intro-bib.sgml" SUBDOC>
<!ENTITY changes SYSTEM "Changes.sgml" SUBDOC >
<!ENTITY % f.text SYSTEM "common.ent" > %f.text;

<!ENTITY % use-inl "IGNORE" >

<!ENTITY % LaTeX "IGNORE" >
<![ %LaTeX [ <!ENTITY LaTeX SDATA "\LaTeX" > ]]>
<!ENTITY LaTeX "LaTeX" >

<![ %Lout [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %ASCII [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %HTML [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %Info [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %Man  [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %LaTeX [ <!ENTITY % hasTbl "INCLUDE" >]]>
<![ %RTF [ <!ENTITY % hasTbl "IGNORE" >]]>

<!ENTITY % v0.6.9 "IGNORE" >
<![ %v0.6.9 [ <!ENTITY % last "IGNORE" > ]]>
<!ENTITY % last "INCLUDE" >

<!Entity disnot "eps, fig, lfig, roff, latex, tgif" >

]>

<report
date="unfinished"
author="J&oe;rg Wittenberger"
inst="TU Dresden"
>Typeset, a short introduction
<abstract>

&bib;

This is a short introduction into <code/&sdc;/.

<code/&sdc;/ is a formater for SGML documents.

This document describes the use of the document types which are
currently handled from <code/&sdc;/. It does <em/not/ describe the
adaption of &sdc; to other document types or target formats.
</abstract>

<sect>Overview

<![ %LaTeX [ <bf/Fist of all:/
You're looking at the &LaTeX;-generated version of this document.
<em/ Please/ excuse the terrible formatting. When I write the doc, I
never ever worry about the final formatting, <em/and/ the
implementation verbatim copied text fot the &LaTeX;-target within
&sdc; won't allow this by now. ]]>


&t.desc;

Currently there are these DTD's <index id=DTD>

<desc

<dt/document/ Simple "plain" documents.

<dt/report/ Technical reports, documentation etc.

<dt/book/ Books (longer documentations).

<dt/bibdata/ Bibliography database.

<dt/manpage/ Pages for the Unix(TM) man command.

<dt/brief/ A letter according to DIN.

</desc>

Currently the following target formats are supported: <index
id="target formats">

<list>
<item> PostScript (for english and german text)
<o>&LaTeX;
<item> HTML (Hyper Text Markup Language)
<o> Info (to be used into the on-line help of <code/emacs/)
<o> man suitable for <code/roff -man/
<item> ASCII
<o>source code (literate programing)
<o>slide to extract slides from a document
<o>limitted support for RTF
</list>

Future output formats will include: roff -ms (or -mm), RTF.

<sect>What is SGML

This section may be translated some time. It's present in the german
version and it's intended to explain the advantages of text processing
over word processing and the advantages of a generalized markup over
target dependand one.

If you retrieved the package you are probably convinced anyway. So
it's obsolete.

You may refer for a description of SGML to <ref id=SGMLGuide t=b//.

<sect id=invocation>Invocation
<index id=Invocation
<index id="Environment" sub="DOCPATH">

First of all set your environment variable <code/DOCPATH/.
It should point to the top directory of the tree, where all your files
containing SGML data are stored.

Setting this variable could be done like this (for (t)csh) and
compatible shells.

<verb> setenv DOCPATH $HOME </verb>

Invocation systax for &sdc;:

<quote>
<code/&sdc;/ [<var/options/|<var/filename/<var/.sgml/]*
</quote>

Options:

&t.opts;

A typical call would be:

<rverb>
&sdc; -o text.ps source.sgml
</rverb>

<sect1 id=Environment>Environment

&t.env;

<sect1 id=files>Files

&t.files;

<sect>Document types
<index id="DTD">

<sect1>Document type <code/document/
<index id="DTD" sub="document">

We start with an example:

<verb>
<!doctype document public "-//JFW//DTD Document//EN" >
<document>The Title
<sect>Intro

Here goes the introductory text.
<sect>We continue

This is the text body of the first section. It's going to be a little
bit longer to show, that the formating of the source file really
doesn't matter for the output.

We start a new paragraph simply by inserting a newline.
</verb>

A document starts as every SGML document with the document type
declaration. It's opened with the document tag.

There are the following attributes available to a document:

<desc

<dt/date/ The date of the document.
<dt/author/ The author.
<dt/inst/ The institution.
<dt/lang/ The lang attribute for the document is obsolete. It has the
same effect as changing the public document language in the document
declaration.

<dt/face/ This attribut is intended to affect the representation of
the output. E. g., a value of <code/1c/ should cause printing in one
column and a value of <code/2c/ should result in two column. A token
<code/nidx/ will supress the generation of an index even if
<code/index/ tags are used. For <code/face/ multiple values can be
assigned (in quotes). See documentation for the target formats for the
treatment of this argument.

</desc>

Then some paragraphs might follow. Next after these paragraphs either
none or more than one sections can follow. Eventually and appendix can
finish the document.

<sect1>Dokument type <code/report/
<index id=DTD sub="report">

A technical report consists of an abstract followed by sections and
possible appendixes. Appendices themself are divided into sections.

Again an example:

<rverb>
&lt;!doctype report public "-//JFW//DTD Report//EN">

&lt;report 
date="Today"
>Reporttitel

&lt;abstract>

This is the abstract.
&lt;/abstract>

Here comes some introductory text. For some targets (e.g., PostScript
because Lout doen't allow text at this point) this text is taken to
be and section named "Introduction" (in the document language).

&lt;sect>first section

The text.
&lt;sect>second section

More text.
&lt;appendix>
&lt;sect>Appendix

Text of the appendix.
</rverb>

The part from and including the <code/appendix/-tag is optional.

The sections may be divided by <code/sect1/-Tags. These by <code/sect2/.
There is no division of the <code/sect2/.

<sect1>Dokument type <code/book/
<index id=DTD sub="book">

Books are written using a document type declaration like:

<verb>
<!doctype book public "-//JFW//DTD Book//EN">

<book 
date="Today"
>Title of the Book
</verb>

The <code/&lt;book>/ tag has the same attributes as the document or
report tag. This is for consitency but questionable. The
<code/inst/ attribute would better be called publisher. Future
versions will eventually rename this attribute.

In principle a book is divided into chapters (at least two) with the 
<code/&lt;chapt>/ tag as a simple document is divided into
sections. Chapters themself consist of sections. Prior to the first
chapter there may be two special sections named <code/&lt;preface>/ 
and <code/&lt;intro>/.

<em/Future/ versions will support grouping of chapters into
<code/&lt;part>/'s.

<sect1 id=man>Document type <code/manpage/
<index id=DTD sub="manpage">

The document type <code/manpage/ is intended to produce pages for the
Unix man command. It restricts the set of available elements to what
<code/roff -man/ can handle. Especially figures are not valid 
elements. Furthermore this document type enforces a "good style" for
the man page. The possible sections are predefined. (Well there is a
backdoor to use self defined sections, see 
<code>doc/badman.sgml</code>.)

A manpage begins like this:

<verb>
<!doctype manpage public "-//JFW//DTD Manpage//EN">

<manpage
date="today"
>
TYPESET
<short>
an extensible SGML formatter
<synopsis> <code/typeset/ <var/options/ <var/files/ ...
<descript>

</verb>

Up to this point the elements are enforced. That is, you can't write a
man page without a title (between the <code/&lt;manpage>/ and the
<code/&lt;short>/ tag, a short description and a synopsis. Up to the
synopsis these elements can't even spawn multible lines, which couldn't
be formatted to be a man page.

The description section can be preceded by a config section. But it
while config can be omitted <code/&lt;descript>/ can not.

The description section plays a special role in another way: it's the
only one which may be devided into subsections using <code/&lt;sect1>/.

The following sections are also valid for a man page. They must appear
in this order:

<code>options, return, errors, example, env, files,conform, notes,
diag, restrict, history, see</code>.

Here what goes into the sections:

<sect2>Synopsis

Tag: <code/&lt;synopsis>/.

The command or what to write to call the funtion. For example:

<verb>
<code/typeset/ <var/options/ <var/files/ ...
</verb>

or for C funtions and system calls:
<verb>
#include <something.h>
int foo(int bar);

int foo2(int bar);
</verb>

<sect2> Config

Tag: <code/&lt;config>/.

This section explains how a device is configured: major/minor numbers,
their meanings and the meaning of the device name.

<sect2> Description

Tag: <code/&lt;descript>/.

long drawn out discussion of the program.  It's a good idea
to break this up into subsections. Using <code/&lt;sect1/.

There is no BUGS section, instead discuss them here.

<sect2> Options

Tag: <code/&lt;options>/.

Some people make this separate from the description.

It's intended to hold one <code/&lt;desc>/ element <ref
id=glossares//. Don't forget to use the elements <code/&lt;code>/ and
<code/&lt;var>/ here. Example:

<verb>
<desc>
<dt><code/-option/ <var/file/

    Text describing the option.
...
</verb>

<sect2> Return Value

Tag: <code/&lt;return>/.

What the program or function returns if successful.

<sect2> Errors

Tag: <code/&lt;errors>/.

Return codes, either exit status or errno settings.

<sect2> Examples

give some example uses of the program

<sect2> Environment

Tag: <code/&lt;env>/.

Environment Variables this program might take care about

<sect2> Files

Tag: <code/&lt;files>/.

All files used by the program.  Typical usage is a <code/&lt;desc/
again. <ref id=glossares//

<sect2> Conforming To

Tag: <code/&lt;conform>/.

SVID [EXT], AT&amp;T, POSIX, X/OPEN, BSD 4.3

<sect2> Notes

Tag: <code/&lt;notes>/.

Miscellaneous commentary

<sect2> Diagnostics

Tag: <code/&lt;diag>/.

all the possible error messages the program can print out, and
what they mean.

<sect2> Restrictions

Tag: <code/&lt;restrict>/.

bugs you don't plan to fix :-)

<sect2> History

Tag: <code/&lt;history>/.

Programs derived from other sources sometimes have this.

<sect2> See Also

Tag: <code/&lt;see>/.

Other man pages to check out, like:

<verb>
<ref t=m id="man(1)"//, <ref t=m id="man(7)"//, <ref t=m
id="makewhatis(8)"//.
</verb>

Refer to <ref id=ref// for a detailed description of <code/&lt;ref>/.

<sect1>Document type <code/brief/
<index id=DTD sub="brief">

The Brief is a DTD according to the German DIN standard.
Example:

<verb>
<!doctype brief public "-//JFW//DTD Brief//DE">
<brief fenster=ja>
<von>&my-adr;
<an>
<adr
NAME="Mustermann"
VORNAME="Erwin"
ORT=Musterhausen
STRASSE="Musterstra&ss;e 7m"
PLZ="01000">
<datum>1. Januar 1995
<betr>Musterschreiben
<anrede>Lieber Erwin,
<text>
Heute reden wir &ue;ber Musterbriefe.

Wie gef&ae;llt Dir das?
<gruss>Ciao
<anlage><pkt>1 Musterschreiben
</verb>

This gives a letter according to the DIN. The sender address appears a
second time in the window of the envelope. Also fold marks are printed 
<code/fenster=nein/ will suppress this.

The tags <code/anrede, gruss/ and <code/anlage/ may be omitted. In this
case standard text is inserted for the opening and closing. Enclosed
is omitted.

The form of the address looks a little complicated. This is because
it's intended to come from a database. If you set up on, its use will
look like the from address (<code/&lt;von>.../).

The entity <code/my-adr/ is defined in the file holding the personal date
described in section <ref id=personl//.

<sect id=elements>Elements of the document
<index id=Element>

The different document types share the same elements (Except for
"brief").

<sect1 id=paragraphs> Paragraphs
<index id="Element" sub="paragraph"
<index id=Element sub=p>

Paragraphs are seperated with a <code/&lt;p>/-Tag.

To reduce markup, an empty line counts as an 
<code/&lt;p>/-tag. Sequences of those tags are reduced to just
one.

<sect1 id="lists" >Enumerations
<index id="Element" sub="enum"
<index id="Element" sub="list"
<index id="Element" sub="item"
<index id="Element" sub="o">

There are two kinds of lists, ordered and unordered.

<desc

<dt/&lt;enum>/ opens an enumerated list.

<dt/&lt;list>/ opens a not numbered list.

<dt/&lt;item>/ starts a new item.

<dt/&lt;o>/ same as &lt;item> (short form).

</desc>

Both <code/&lt;list>/ and <code/&lt;enum>/ have to be closed
(by <code>&lt;/list></code> or <code>&lt;/enum></code>).


Example:

<rverb>
&lt;list>
&lt;item> Language to describe the logical structure of text.
&lt;o> a tool and library to format SGML text into
&lt;enum>
&lt;o>PostScript
&lt;item>HTML
&lt;/enum>
&lt;item>One more point
&lt;/list>
</rverb>

formats to:

<list>
<item> Language to describe the logical structure of text.
<o> a tool and library to format SGML text into
<enum>
<o>PostScript
<item>HTML
</enum>
<item>One more point
</list>

<sect1 id="glossares" >Glossare
<index id="Element" sub="desc">

Glossares are declared by the <code/&lt;desc>/ Tag.

Again an example:

<rverb>
&lt;desc

&lt;dt/&lt;desc>/ opens a description

&lt;dt/&lt;dt>/ encloses the described topic

&lt;/desc>
</rverb>

And the corresponding output.

<desc

<dt/&lt;desc>/ opens a description

<dt/&lt;dt>/ encloses the described topic

</desc>

You don't want to put newlines (starting paragraphs) between the 
<code/&lt;desc>/ and the <code/&lt;dt>/. If you want (as me) omit the
closing > from the <code/&lt;desc>/ (say <code/&lt;desc/).

<sect1 id=picture>Pictures
<index id="Pictures">

We don't have a chance to describe pictures in terms of SGML, but we
can tell where the formating application should put them.

<![ %v0.6.9 [

There are two ways in &sdc; to include pictures. One 
<code/&lt;graphic>/ tag the other one is the use of entity definitions
using special notations. While the latter is more SGML like and more
flexible the former one is still available (it came into existance for
historical reasons) and eventually easier to use for it's simplicity.

]]>
<![ %last [

To include pictures one can use:

<list>
<o>Entity definitions and references.
   The reference is either a less controlled entity reference like
   <code>&amp;<var>name<code/;/ or it's done by using the
   <code/foreign/-tag. The latter should be prefered, because it could
   serve more control, but in fact there not much of a difference.

   This is the prefered method.

<o>Inlined code, see <ref id="inline"//.

<o>For some cases, like including GIF-pictures into HTML documents,
   it's nessesarry to compromise the portability and target
   independance of the document.

   Those cases need processing instructions. For the mentioned case
   one needs the following:

   <enum>
   <o>A <code/SDATA/ entity to get a literal &gt; into the final
      output. This could be achieved by having this definition in the
      "header":
      <verb><!ENTITY lit-gt SDATA ">" > </verb>
   <o>A Processing instruction at the place where the picture (here
      <var/picture.gif/) goes:
      <verb>
       <? <IMG SRC=picture.gif> &lit-gt;
      </verb>
      (We need the <code/lit-gt/ because SGML has no way to have
      (escape) a >-character within a processing instruction)
   </enum>
</list>
]]>

In all the cases there are two ways how to include the picture, either
directly between the lines of the text or as a floating part of the
document. The latter form will allow you to put a caption line on it
and an identifier to refer to from any part of the document.

<note>
Having pictures between the lines usually doesn't look very
professional. For the effort word processors require to handle floats,
it became common to do so. You should think twice whether this form is
appropriate in your case.
</note>

<![ %v0.6.9 [
<sect2 id="EntAndNot">Entities and Notations
]]>

<index id="Notation" sub="application of"
<index id="Entities" sub="referencing"
<index id="Element" sub="figure">

If you use entities and notations for your pictures, you need to
declare both in the header of your document. See <ref id=notations// 
for a more detailed description and refer to <ref t=b id="SGMLGuide"//
for full details.

The <ref id=local/local installation/ may provide some predefined
notations. A full installation supports at least &disnot;.

To include a picture entity (with entity name "name") defined using
notations between the lines of text just write the entity reference
like this: <code/&amp;name;/.

To include the same picture as a floating object use the 
<code/&lt;figure>/ tag:

<verb>
<figure id=refname>
<foreign file=name>
<caption/The caption line/
</verb>

The <code/id/ attribute tells the name to be used by <ref id=ref
/cross references/ for this figure.

<![ %v0.6.9 [
<sect2>The graphic tag
<index id=Element sub="graphic">

To include the picture between the lines write:

<verb>
<graphic file="FileName">
</verb>

The filename is given without a type. &sdc; will insert ".eps" for
PostScript and ".gif" for HTML. This rule is easy to change in the
format describing files.

For larger figures and such that should be referenced, there is the
following 4-line construct:

<rverb>
&lt;figure id=Name>
&lt;graphic file="FileName"//
&lt;caption/Bild Unterschrift/
&lt;/figure>
</rverb>

Telling the id which could be used by a <ref id=ref/cross reference/,
the Graphic to use as above and the caption line to put on the figure.
]]>

<sect1 id=ref>Cross References
<index id="Cross Reference">

Cross references are introduced by the <code/ref/-tag. It has two
attributes:

<desc <dt/id/ The ID it refers to. The interpretation of the id
depends on the value of the <bf/t/ attribute.

<dt/t/ The type of reference. There are 3 possible values:

       <desc
	 <dt/X/ (the default) The ID refers to some id in the same
	 document.

	 Note that this mean a document as SGML understands it. If
	 you are inside something which is a full document by itself,
	 but is included as a <code/SUBDOC/ Entity into some other
	 document, you can refer to any id within this document, but
	 <em/not/ any in the outer document!

         <dt/B/ Bibliography reference. The Id notes the <code/Tag/
	 Attribute value in the database <ref id=mkbib//.
	 <dt/M/ The ID refers to a manpage.
	 <dt/U/ A URL. The ID hold the complete URL.
       </desc>
</desc>

<sect1 id=emphases>Emphasize
<index id="Emphasize" sub="long Text">

To emphasize long parts of text there is the <code/&lt;quote>/-tag.

Example:

<verb>
<quote/Important result: long citations, definitions and other
material which should be emphasized is enclosed by quote-tags./
</verb>

And the result:

<quote/Important result: long citations, definitions and other
material which should be emphasized is enclosed by quote-tags./

The <code/&lt;quote>/-tag has a <code/style/ attribute accepting the
values <code/default/
 (wich is the same as if nothing is given)
and <code/center/.
These give the recomented style.
Default is to narrow the text a little,
while center narrows and centers the quoted material.

<sect1 id=fn>Footnotes
<index id="Cross Reference" sub="footnote"
<index id="Footnotes"
<index id=Element sub=footnote>

Footnotes are enclosed by <code/&lt;footnote>/-tags.

<verb>
<footnote/You can't have figures in footnotes./
</verb>

Will format as<footnote/You can't have figures in footnotes./.

<sect1 id=note>Notes
<index id="Element" sub=note>

Sometimes you may like to have longer side notes. These are enclosed
by <code/&lt;note>/. This looks like this:

<note>
This text has been enclosed by <code/&lt;note>/ and <code>&lt;/note></code>.
</note>

<sect1 id=verb>Verbatim copied text
<index id=element sub=verb
<index id=element sub=rverb>

For excerpts of source code there is the <code/&lt;verb>/-tag. The
examples in this text are made mostly by this. Code inside of the verb
marked region is not at all processed for SGML references. Therefore
no references to any entity are possible inside (like
<code/&amp;lt;/).

There is also a variant of <code/&lt;verb>/ called <code/&lt;rverb>/.
This means "replacable" verbatim. The contents of <code/&lt;rverb/
region is parsed for entity references. Thus allowing references to
external entities or SGML-end tags inside. The examples which have end
tags inside are written using this element.

<sect1 id=em>Emphasizing words
<index id="Emphasize" sub="words and phrases">

To emphasize short phrases or words you can choose from the prefered
tag <code/&lt;em>/ and these:

<desc

<dt/&lt;em>/ 
This will produce a different kind of emphasizing due to the level of use.
(slanted, bold..)

<dt/&lt;strong>/ <strong/Heavy/ emphasize.
<dt/&lt;bf>/  <bf/Bold face/
<dt/&lt;it>/ <it/italic/
<dt/&lt;tt>/ <tt/tele type/ kind
</desc>

<sect1 id=linguistic>Linguistic Markup
<index id="Emphasize" sub="documenting code"
<index id="Element" sub="code, var, meta">

For documentation purpose it is common to distinguish between literals
(code), variables and meta characters. Therefore markup exists. These
tag don't nest, that means each of them ends each other of this group.

For literals use <code/&lt;code>/, variables <code/&lt;var>/ and for
meta characters <code/&lt;meta>/.

Please don't look for use of them in this manual, they are late
introduced.

<sect1 id=nl>explicit line and page breaks
<index id="newline"
<index id="newpage">

In rare cases you might need to insert unconditional newlines. There is
the general entity <code/nl/ for.

To enforce a page break at a certain position use the 
<code/&lt;newpage>/ element.

Don't use it too much. It might look strange in some output
formats. You'll need it most with the <code/slide/ target, so best
enclose them all the time with a marked section like:

<rverb>
&lt;[ %Slide [ &lt;newpage> ]]&gt;
</rverb>

<sect1 id=inline>Inline Code
<index id="Notation" sub="inlined"
<index id="Element" sub="inline"
<index id="foreign data">

Using the <code/&lt;inline>/ element you can include code using other
notations (see <ref id=notations//) as available local at your site
(see <ref id=local//).

The <code/&lt;inline>/ element takes one argument <code/n/ which must
be assigned to a valid notation. This way you can achieve special
effects or write tables and equations.

Inside the <code/&lt;inline>/ element you can't write other SGML
markup, but you can refer to predefined entities (using the 
<code/&amp;name;/ notation). This raises the question how to include a
&amp; followed by a letter. For this purpose you need to write a
decimal character reference i.e., <code/&amp;#38;/.


Example:

<![ %LaTeX [
<rverb>
&lt;inline n=lout>
45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
&lt;/inline>
</rverb>
]]>
<![ %HTML [
<rverb>
&lt;inline n=lout>
45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
&lt;/inline>
</rverb>
]]>
<![ %Lout [
<rverb>
&lt;inline n=lout>
|1rt 45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
&lt;/inline>
</rverb>
]]>

will give you

<![ %use-inl [
<![ %LaTeX [
<inline n=lout>
45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
</inline>
]]>
<![ %HTML [
<inline n=lout>
45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
</inline>
]]>
<![ %Lout [
<inline n=lout>
|0.75rt 45d @Rotate @ShadowBox 2f @Font {that's a funny cyan @Color "&#38;" }
</inline>
]]>
]]>

<note>
If you use the <code/&lt;inline>/ feature, be careful about the
filenames you use: &sdc; will eventually (due to the need of the
target format) create files matching the pattern:

<var/basename-of-output/<code/-/<var/number/<code/./<var/extension/.
</note>

<note>
<em/For admins:/ The example above might not work "out of the box" at
your site since it uses a notation which needs to be set up. See <ref
id=local//and the documentation about target formats for things
nessesary.

If you're going to install &sdc;. See the file 
<code>doc/notations.sgml</code> of the installation and adapt the it
to your needs.
</note>

<sect1> Tables
<index id="Tables"
<index id="Notation" sub="application">

In response to various requests for tables one or more the following
"syntax", or to put it better the following ideas will be implemented.
I strongly encourage everybody to mail me comments about this.

Currently there is one SGML construct to describe tables within
&sdc;. If someone comes up with a better solution for (it shouldn't
look too strange in the source -- &sdc; is supposed to remain a
"don't worry" application) it will be incorporated.

A table is enclosed with the &lt;table> tag. It can contain one of
the implemented kinds of table (currently only &lt;tbl>).

<sect2><code/tbl/

A tbl-table consists of patterns and rows. Each row must name the
pattern it is formed after or otherwise it uses the most recent used
or defined pattern. A row itself is a sequence of cells. Cells begin
either with a &lt;c>-tag or simply a |.

A pattern consists of tags describing the alignment. There are
<code/left, right, center, decimal/ and <code/block/. Between these 
<code/&lt;sep>/ are allowed to request vertical lines in the table.

The formatting of the cells within a row is described by the
associated tag in the used pattern.

Probably an example is the better way to explain.

<note>
The implementation of tables is not finished.

The here defined syntax has a) not all the features of all the
backends, so you have to drop to plain backend (e.a., inline) code
ifyou really need those features b) it has more features than all
backends have in common, therefore depending on the backend some
features are silently dropped off.

For HTML HTML-3 Tables are implemented at the moment. As there is
virtually no client to display these, one can change to use fixed font
preformatted tables instead. (If you have a client please check if the
code works: I can't.) Change <code/html-tbl-writer-function/ in
the file <code>include/layout.scm</code> to something else but <code/
'html3-write-tbl/ or use <code/-R HTML2/ at the command line.
</note>

<verb>
<figure id=tblexam>
<table<tbl>
<pattern<left<center<sep double<decimal align=",">
<r><bf/Name/ | <bf/Group/ | <bf/V/
<sep>
<r> Fred | M | 3,4
<r> Sian | F | 5,78
<r> Tiger| F | 100
<pattern/<right<center<right>/
<sep double>
<r>A | &lt;=> | B
</verb<rverb>
&lt;/tbl&lt;table
&lt;caption/Example table/
&lt;/figure>
</rverb>

<![ %hasTbl [
Will give you what figure <ref id=tblexam// shows.

<figure id=tblexam>
<table<tbl>
<pattern<left<center<sep double<decimal align=",">
<r><bf/Name/ | <bf/Group/ | <bf/V/
<sep>
<r> Fred | M | 3,4
<r> Sian | F | 5,78
<r> Tiger| F | 100
<pattern/<right<center<right>/
<sep double>
<r>A | &lt;=> | B
</tbl>
<caption/Example table/
</figure>
]]>

Questions:
<list>
<o>Better have the freedom to mix the patterns with the rows (as it is
now) or to group all patterns before all the rows.

<o>Is the short reference character "|" a good choise for the column
separator?

<o>How much requests will come for row spawning cells? (They eat more
steam in implementation, thus it will take some more time.)
</list>

<sect2>Next

How about a HTML-3 like syntax. This is even harder to
implement on the existing targets (while it's obviously easier on
viewers -- but these are internals). Open questions:

<list>
<o>I, personaly, dislike the very verbose syntax of HTML-3 tables. How
is yours? Better have <code/&lt;r>/ and <code/&lt;c>/ tags (and "|"
as short reference for the latter) to separate row and columns or the
long syntax of HTML-3. The latter will mess up your source code, but
has the advantage to be the same as within HTML. (At the other hand
why should we be compatible with the stuff we compile out of the
source?)
</list>

If the above mentioned ways to create tables don't suit your needs you
can use notations see <ref id=notations//. And you might consider
utilizing the <code/&lt;inline>/ element (see <ref id=inline//) to
write the table using other notations as available local at your site
(see <ref id=local//).

<sect1>Equations
<index id="Equation"
<index id="Notation" sub="application">

There is a limited support for equations at the moment. As they are
used they'll be added. To give an example what's supported at the
moment:

<rverb>
&lt;quote>

&lt;bf/Lemma:/ &lt;math/&amp;alpha; &amp;isin; &lt;set/M<sup/200/<sub/4// &amp;cap;&lt;set/N//
&lt;/quote>
</rverb>

Will yield:

<quote>
<bf/Lemma:/ <math/ &alpha; &isin; <set/M<sup/200/<sub/4// &cap; <set/N//
</quote>

Future version will probably support the same features as HTML-3. (As
this is in fact simply a SGMLish translation of &LaTeX;'s idea of
equations and the latter is commonly treated to be the best way to
write equations.) The question remains: is this the best way or does
anybody have a better idea?

As mentioned the support on equations is limited at the moment and
intented for simple formulas. The translation into formating
instructions is straight forward implemented and not always
reliable. If you intent to use &LaTeX; as backend you want to use
<code/&lt;inline latex>/ (see. <ref id=inline//)and native &LaTeX;
coding instead.

<note>
It's not a big task to extend the formating rules to filter things
like that through the PostScript backend and convert it into say GIF
for HTML. But nobody came around to program it yet.
</note>

<sect1 id=lang>Foreign Languages
<index id="Language"
<index id="Element" sub="lang">

&sdc; will insert standard text phrases if appropriated. These depend
on the language of the document.

In the simple case you can choose the language for the whole document.
This is done by the document declaration. That is:

<verb>
<!doctype document public "-//JFW//DTD Document//DE" >
</verb>

will produce a German document and:

<verb>
<!doctype document public "-//JFW//DTD Document//EN" >
</verb>

an English one.

Furthermore the tags <code/report, document, chapt, sect, sect1, sect2,
lang/ have an attribute <code/lang/ which will temporary change the
language in the enclosed part.

<sect id=Indexes>Creating Indexes
<index id=Element sub=index
<index id=Indexes>

&sdc; creates an index for a document if at least one 
<code/&lt;index>/ tag was used in the text.

An index tag can appear at every place where text is allowed except
for headlines, which are terminated by.

For the index tag the following attributes are defined:

<desc
<dt<code/id/</dt> The topic which will appear in the index section.
This attribute is required.

<dt<code/sub/</dt> An optional subtopic.
</desc>

Creating useful indexes is an art by itself. Therefore you should
choose the attribute values carfully. The most common (recomended)
way to use indexes is like that:

<verb>
<sect id=Indexes>Creating Indexes
<index id=Element sub=index
<index id=Indexes>
</verb>

Please <em/note/: Because of an unresolved problem it's better to use
the short notation as above. That is: <em/don't/ close the 
<code/&lt;index/ tags (omit the <code/>/). Otherwise the PostScript
output will create an empty paragraph.

As mentioned, the <code/&lt;index>/ tag is not restricted to be used
immediately after the section start.

<sect id=mkbib>Bibliography database
<index id="Bibliography">

&sdc; can use one or more databases for bibliography. If items of
them are referenced (by a <code/&lt;ref>/ see <ref id=ref//), a section
is automatically appended to the document and the referenced items are
listed.

To use a data base you need to include the database file for instance
like this:

<verb>
<!doctype report public "-//JFW//DTD Report//DE" [
<!entity bib system "intro-bib.sgml" subdoc>
]>
</verb>

And you <em/have to/ reference the entity later on anywhere in the
document like this: <code/&amp;bib;/. But be sure to do so at some
point where data is allowed, e.g., where the first paragraph
begins. (Otherwise you'll violate SGML rules.)

The database has the following structure (with repeated BIBL's):

<verb>
<!doctype bibdata public "-//JFW//DTD Bibliography//EN" [
]>
<BIBL
     Tag="SGMLGuide"
     Author="Martin Bryan"
     Title="SGML an authors guide"
     Publ="Addison Wesley Publishing Company"
     Year="1993"
     exc= "not avail"
     ISBN="...."
     COM="a comment on the book"
>
</verb>

Don't write data in this file, only start tags as the one above.

This data base will be extended (some day) to support at least all
features a <code/bibtex/ data base supports.

Please note: If you get warnings about items not in the data base,
then the numbers within the references may be wrong. Those numbers are
only correct if all references could be resolved.

<sect id=conditional>Conditional Inclusion
<index id="marked section"
<index id="conditional inclusion">

You can always include text depending on the definition of some parameter
entities as you can from <code/sgmls/. That is you write a marked
section like this:

<verb>
<![ %Name [
conditional included Text
]]>
</verb>

Where name is a prior defined parameter entity. Refer to section <ref
id="ParameterEntities"// for predefined entities and conventions with
&sdc;. To exclude the text by default you need to have a entity
definition like the following in the document type definition:

<verb>
<!ENTITY % Name "IGNORE">
</verb>

Now you're able to include the marked section by a command line switch
<code/ -i Name/. This will pretend, that a entity definition 

<verb>
<!ENTITY % Name "INCLUDE">
</verb>

is seen from the parser, which will overwrite the other one.

Depending on the target format (the <code/-O/ switch) and the public
text language some parameter entities are predefined. See <ref
id=ParameterEntities// for details.

<sect id=slide>Slides
<index id=Slides>

Slides are extracted from ordinary documents, better say only from
documents of the types <code/document, report/ and <code/book/.

Everything enclosed by a <code/&lt;slide>/ tag goes onto one
slide. (Or more than one slide, we can't control what happens if a
slide gets overfilled.) Everything outside of those tags is simply
dropped.

Slide tags might appear wherever a <code/&lt;p>/ tag is allowed.

If you have more stuff in the document as you want to have on the
slide (as it is usually the case) you can exclude parts by marked
sections, see <ref id=conditional//.

The title used for the slide is that given to the last division (like
chapt, sect sect1) seen. The slides are grouped by the sect's of the
document. So if all you want is a document full of slides, just write
one and put <code/&lt;slide>/'s in instead of paragraphs.

<note>
As there is only a "Slide" entity defined if you generate your slides
but the usual case is to exclude stuff from them put three lines
like:&nl;
<code>
&lt;!ENTITY % Slide &#34;IGNORE&#34;>&nl;
&lt;[ %Slide [ &lt;!ENTITY % noSlide &#34;IGNORE&#34;> <?]]>>;&nl;
&lt;!ENTITY % noSlide "INCLUDE" >
</code>&nl;
This way noSlide is defined if Slide is not. Why? SGML say's the first
definition wins. If you define Slide via the target noSlide is defined
to ignore otherwise to include.
</note>

<sect id=personl>Personal Data
<index id="Files" sub="personal.data"
<index id="Custumization">

At some points <code/&sdc;/ will insert person dependant text like the
default for the authors name and institution.

These are defined in a document called <code/personal.data/. Usually
it's to be found in the directory <code/DOCPATH/ points to (see <ref
id=invocation//).

There is a file called <code/example-personal.data/in the standard
library directory to be copied and adapted.

The following general entities <em/must/ be defined from this file.
(They are used to be the default for the corresponding attributes)

<desc

<dt/myself/The name of the author.

<dt/my-Inst/The institution / organisation.

</desc>

<sect id=appendix>Appendices
<index id="Element" sub="appendix"
<index id=Appendix>

Appendices are all the sections which follow the
<code/&lt;appendix>/-tag. 

<sect id="SUBDOC">Large documents
<index id="SUBDOC">

Large documents can be spread over individual files. These files
together form the document. In principle there are two way to declare
them.

<enum>
<o>As a General Entity (see <ref id="general entities"//).
<o>As a SUBDOC General Entity
</enum>

The first form will insert the whole document instead of the entity
reference. This means, that the markup is part of the document, the
entity is included in. This restricts what you can put into the
document. but is has the advantage, that cross references work from
outside into and from inside out.

Example: within the <code/&lt;doctype .../ one can have a entity
declaration like:

<verb>
<doctype ... [
...
<!ENTITY t.desc system "descript.text" >
...
]>
</verb>

and later on, at the position of the document where the contents of
the file is to appear a usual entity reference like 
<code/&lt;t.desc;/. (Note that you can not cross reference to that
piece of the document as a whole, but to the id's defined within.)

&sdc; won't do anything interesting with the first form. It's
already handled by the SGML parser.

<index id="Re-Taging">
The second form, subdoc entities, makes the part to be included a
document of it's own. That is, it can (could) be used without being
included. Hence you can't put references from inside out. SGML also
disallows references from outside into it.

Those subdoc entities are restructured to form a division at the place
the references occur, e.g., if you are within a section and reference
a subdoc entity you get a subsection holding the text.
&sdc; achieves this by
preprocessing the subdoc entity in a smart way.
It re-tags the dcoument as if it was
taged according to the document-DTD.

<index id="Cross Reference">
As explained you can't do any cross referencing between the included
document and the outside document. But you can reference to the
subdocument as a whole by using it's entity name.

Example: the entity declaration changes from the above form to
something like:

<verb>
<doctype ... [
...
<!ENTITY bib SYSTEM "intro-bib.sgml" SUBDOC>
...
]>
</verb>

Note that the declaration is extended by the <code/SUBDOC/
keyword. And remember that documents included this way must start with
a <code/&lt;doctype.../ declaration while those suitable for the first
form must not.

Those subdoc entities are included the same way, that is in the
example by an entity reference to <code/lt;bib;/. In this case the
entity name (bib) becomes available for cross referencing (you can do 
<code>lt;ref id=bib//</code> in this example).

<quote>
You can't put those references everywhere you might want!
Read ahead.
</quote>

If you have such a reference to an entity
which contains a subdocument
at <em/the end/ of the text of a division
that's fine
(but not recomented, see below).
This way it will become a subdivision of the current one.
But if there was already a subdivision open
(e.q., a <code/&lt;sect>/ was there)
it would become a subdivision of this division.
If you want it at the same level as the last,
the obious solution is to put a corresponding end tag first
(in the example a <code>&lt;/sect></code>).
This is <em/not/ enough!
When we are "between" the divisions, there is no data allowed!
Hence the reference is rejected by the SGML-parser.
You need to wrap the reference with a <code/&lt;InclDiv>/ tag.
 <index id=InclDiv><index id="SUBDOC" sub="InclDiv">

This is sort of a backdoor.
It allows you to enter data and therefor the entity reference.
"Real" data within a <code/&lt;InclDiv>/ tag is silently skipped,
but subdocuments are processed correct.
It's possible,
but again not recommented,
to have more than one reference within an <code/&lt;InclDiv>/ tag.
The recommented way to reference <code/SUBDOC/ entities is:

<quote>
Write those SUBDOC entity references like
<verb>
<InclDiv>&1st-ent;
<InclDiv>&2nd-ent;
</verb>
At the and of a devision
(like it's subdivision)
to make them subdivisions of the latter.
Or write
<rverb>
... The end of the last section.
&lt;/sect1>
<InclDiv>&amp;subdoc;
</rverb>
To make it a division at the same level
as the one just closed
(with the <code>&lt;/sect1></code> in this example).
</quote>

<note>
Please note
that the tag name is written in mixed case.
Actualy that's not nessesary.
Tags can be in any case (by default).
But if someone changed the SGML-declaration
to use case on tag names
all tags would have to be typed in lower case
except this "InclDiv" which would be in mixed case as here.

The mixed case has been choosed
because I think
that the name is not too intuitive
(it's a run together of "include" and "division";
I want to reserve the name "include"
for something more intelligent)
and I consider it special enough to
deserve the attention of the reader of the document source.
</note>

<sect id="Literate Programing">Literate Programing

&sdc; supports so called "literate programing". That is the source
code and it's documentation are mixed. To get the plain code it is
first to be striped from the documentation.

With &sdc; it is possible to have the sources which goes into one
file spread over a set of files, i.e., one document and also to have
one document contain the source of a set of files.

To do literate programing the code is surounded by the
<code/&lt;literate/ tag. The literate tag has one attribute called
<code/file/, the name of the file where the code goes. This file is
opened at the first occurence and closed at the end of the work of
&sdc;. If no file is given the last used is implied if none at all
has been specified prior standard output is used.

Within the <code/literate/ taged area there may be anything what can
appear in normal text. But no formating is applied to the output if
target literate is choosen. The typical (intented) contents of it are
verb and rverb elements and may be plain text paragraphs. Because of
the formating applied on other target formats plain text paragraphs
are only a good idea if the code (or comment) is readable after
reformating.

With the features of replacement and conditional inclusion this form
of literate programing might be useful for simple preprocessing.

<sect id="ParameterEntities">Parameter Entities
<index id="Entities" sub="parameter">
<index id="Entities" sub="predefined">

SGML knows two kinds of entities: general entities and parameter
entities. While general entities can be referenced anywhere, parameter
entities are restricted to the meta level where the document structure
is defined. This is at most only the document type description. But
also marked sections can use parameter entities for conditional inclusion
(see <ref id="conditional"//).

To avoid conflicts between user defined parameter entities and predefined
parameter entities there is one convention: All parameter entities defined
by &sdc; begin with a upper case letter. User defined parameter
entities should therefore begin with a lower case letter. This is by
no means enforced but a recommented convention.

Depending on the target format the following parameter entities are
predefined. Only the one associated with the target format is defined
to <code/INCLUDE/ all other yield <code/IGNORE/.

<index id="target formats">
<index id="Entity" sub="predefined">

<desc
<dt/LaTeX/ for &LaTeX; processed documents.
<dt/Lout/ for PostScript output through Lout
<dt/HTML/ for HTML pages
<dt/ASCII/ for ASCII output
<dt/Info/ for output in Info format
<dt/Literat/ for literate programing
<dt/RTF/ for RTF output
<dt/Slide/ together with Lout for extracting slides.

</desc>

Depending on the public text language parameter entities named as the ISO
639 defined language codes will be define to <code/INCLUDE/. The other
again to <code/IGNORE/.

Currently only the definition to include is handled. It's up to you to
define them to <code/IGNORE/ in you doctype diretive. Also only
English and German are supported at the moment.

Here the codes reserved for this purpose:

EN: English, DE: German, FR: French, GR: Greek, IT: Italian, NL:
Dutch, ES: Spanish, PT: Portuguese, AR: Arabic, HE: Hebrew, RU:
Russian, CH: Chinese, JA: Japanese, HI: Hindi, UR: Urdu, SA: Sanscrit.

<sect id="layout">Changing the Layout
<index id="layout">

As it is not intended to have particular formating instructions or
something like that within the document, it can't be done.

To change the formating use the <code/-R/ option to load a scheme
file. If you do so, be sure what you do! You might want to have a look
at the file <code>include/layout.scm</code> as the definitions there
are most likely to be changed due to taste. Here an example of such an
file showing how to change the initial font for lout.

<verb>
(doc-preprocess-hook
 'add
 (lambda ()
   (if (equal? doc-output "lout")
	   (eval (set! lout-initial-font "Times Base 12p")))))
</verb>

Having this within a file, say <code/TB12.scm/ call &sdc; like
<rverb>
&sdc; -R TB12.scm -Ops -o output.ps text.sgml
</rverb>

<appendix>

<sect id="general entities">General Entities
<index id=Entities sub="genereal"
<index id="Entities" sub="predefined"
<index id="Greek characters">

Currently there are general entities for setting mathematical symbols
predefined. Their names are those defined by Addison Wesley.

Also the set of general entities for Greek characters are defined as
by Addison Wesley.

To see these set of entities and their repesentation, format a
document like the following into the target format you need.

<verb>
<!doctype document public "-//JFW//DTD Document//EN" [
<!ENTITY f.AWm SYSTEM "AWmaths.text" >
<!ENTITY f.AWg SYSTEM "AWgreek.text" >
]>
<document face="2c 2s nidx">General Entities

<sect>AWmaths

&f.AWm

<sect>AWgreek

&f.AWg
</verb>

<note>
Prior version had a problem with the <code/&lt;/ Entity. There where
two flavors, <code/&lt;/ and <code/&ltc;/. The problem is solved, see
the changes section.
</note>

<sect id=notations>Notations
<index id="Notation"
<index id="Notation" sub="handling"
<index id="foreign data">

SGML provides so called notations to define entities which use
"foreign" descriptions of their content. That is, the entity might be
a file containg figure drawn with say tgif. The interpretion of system
notation is implementation dependant.

You might define notations. And some entities using them. &sdc;
provides an interpretion for notations which are declared to be
<code/SYSTEM/.

The system identifier is used to start external commands. Prior the
command execution the following macros are expanded:

<desc>
<dt<code/%s/</dt> the system identifier of the entity
<dt<code/%S/</dt> the flatend system identifier of the entity
<dt<code/%f/</dt> the complete file name of the entity
<dt<code/%F/</dt> the flatend file name of the entity
<dt<code/%%/</dt> a single <code/%/
</desc>

"Flatend" means that
characters special to the file system
are converted into
characters elegible for regualr file names.
Per default '/' are converted into '_'.

<note>
The characters to be converted
are set using <code>file-system-set-meta-characters</code>.
</note>

If the notation is to be applied to inlined code, a temporary file is
used.

Example:

<verb>
<!DOCTYPE document public "-//JFW//DTD Document//DE"[
<!NOTATION cat SYSTEM "cat %f" >
<!ENTITY f1 SYSTEM "file1" NDATA cat>
<!ENTITY f2 SYSTEM "something" NDATA cat>
]>

<document
face="2s 2c"
>Notation Demo

Some text goes here. 
&f1;

And now call &f2;.
</verb>

<note>
For an extensive example see <code>doc/nottest.sgml</code> in the
&sdc; distibution. This shows the "real world" notations provided by
default by &sdc;.
</note>

The above example declares a notations named "cat" which starts the
external program <code/cat/ with one argument, the full filename of
the entity the notation is apllied to.

Then two entities (f1 and f2) are declared. These use both the
notation <code/cat/. Their system identifiers are "file1" and
"something" (i.e., their content is stored in these files). And their
content is declared to be in the notation <code/cat/. (That is done by
the <code/NDATA/ like notation data keyword followed by the name of
the notation i.e., <code/cat/ for the example).

When the entities are referenced (<code/&amp;f1;/ and <code/&amp;f2;/)
the command line associated with the notation (i.e., <code/cat %f/) is
executed (after the expansion of macros as explained above). The
output of this command is feed into the backend/output of &sdc;.

Make sure, that the output generated by the external programm is
suitable for the target format. If needed, use conditional definitions
for the notations depending on the target format. (See section <ref
id=conditional// for target dependant defined parameter entities.)
Needless to say, the gain in comfort and features is paid by a loss in
document portability.

A possible application could be to have a picture stored in some
format (like that of xfig). If there is a program <code/fig2dev/ which
translates this format into encapsulated PostScript you may wrap it by
a shell script like this:

<verb>
#!/bin/sh
SRC=`basename $1`
TARGET=`basename $1 .fig`.eps
fig2dev -L ps $SRC > $TARGET
echo "@IncludeGraphic{" \"$TARGET\" "}"
</verb>

If you use this notation with the Lout backend to produce PostScript,
this will insert the picture on every reference to the corresponding
entity.

<sect id=local>Local Features
<index id="local"
<index id="Notation" sub="local predefined"
<index id="foreign data">

The following notations are defined by default:

<desc>
<dt<code/ignore/ 

which will just print a note, that it has been used. It's intended to
get rid of the functionality implied by others.

<dt<code/eps/

This is Encapsulated PostScript.

<dt <code/fig/

This is to be used with figures drawn by <code/xfig/. It will
automatically retrieve the referenced file and transform it into the
proper format for the target.

<dt<code/lfig/

Figures drawn using the @Fig package of Lout. See <ref t=b 
id="Lout User Manual"/the Lout user manual/ for a description.

<dt<code/roff/

Preprocesses <code/tbl/ and other roff code. Be sure not to exceed one
page with the image you get from this notation.

<dt<code/latex/

Pieces (especially supposed to be formulas) of&LaTeX; code.

<dt <code/tgif/

This is for figures drawn by <code/tgif/.

</desc>

To use them you need to extend the head of the document like:

<verb>
<!doctype document public "-//JFW//DTD Document//DE"[
<!ENTITY fig1 SYSTEM "figure1.fig" NDATA fig >
<!ENTITY tbl1 SYSTEM "table1.eps" NDATA eps >
]>
</verb>

Then you can use it as described in section <ref id=picture//.

<sect>Installation

See the file INSTALL.

</sect>
<InclDiv>&changes;

<sect id=problems>Problems

If you get any problems don't hesitate to mail me:

<verb>
<joerg.wittenberger@inf.tu-dresden.de>
</verb>

Known Problems:

<list

<o>Ghostscript version has a problem 3.3 writing ppm files. If &sdc;
refuses to generate gif files try ghostscript version 2.6.1.

<o>&LaTeX; output dischards leading whithespaces in &lt;verb> and
&lt;rverb> elements. I don't know how to coerce &LaTeX; to keep
them. There is a macro \psedoverb in the converter file for &LaTeX;
if you have an idea how to correct this macro please drop me a note.

<o>Quote characters are internal translated into markup. They can't
spawn paragraph boundaries.

</list>
<!--
 LocalWords:  tt SGML em DTD's desc dt PostScript english german HTML Markup bf
 LocalWords:  RTF ref SGMLGuide setenv sgml ps html ascii doctype JFW DTD EN lt
 LocalWords:  inst lang DE enum nl mkbib URL BIBL's BIBL Lout isin GIF chapt
 LocalWords:  personl README joerg wittenberger dresden
-->
