Well - theoretically...

First identify if your system supports the mmap() system call.
If not then edit the file xal_mmap.h to add 
	#define NO_MMAP
We have found that it's best to do this for Ultrix, whose mmap() call
is somewhat old and limited. This only affects help file loading
in xcal itself.

Then make the makefiles

	xmkmf
	make Makefiles

then type

	make derived		- this makes xcal_help.h and xcal_ad.h
				  from XCal.help and XCal.ad. You
				  may not need to do this step
				  if the Makefile evaluates things in
				  the correct order
	type	make depend

	type	make

If that appears to compile (and if you are on a Sun see README.sunos), then

	make install
	make install.man

and type
	xcal

Of course, it's won't be as easy as that - because it never is.

Note on bitmaps:

Some systems emit a warning when they compile the bitmaps. They object
to having 8-bit values in a char array. You can ignore this, or change the
define in xcal.c to permit the bitmaps to be unsigned char.

Note on date formats:

The code uses your system's strftime(3) routine to generate some dates.
I have found that the arguments to this routine are not standard and have
picked a set that seems portable. This prints dates like:
	Saturday 06 November 1993
and I prefer
	Saturday  6 November 1993
On SunOS and Solaris, you can make the routine suppress the leading zero
by using `%e' is place of `%d'. If your system supports this, uncomment
the relevant lines in XCal.ad before installing. This file also acts as
a default fallback set of resources, so if you uncomment the lines, it's
a good idea to rebuild xcal.

If you are unsure what your system supports, compile the program
strftime/ptime and see what is generated by different formats.

Note on help installation:

To regenerate the help that is loaded into the program, run
	sh C_from_help.sh
this makes xcal_help.h from XCal.help.

To have NO help strings built in, change xcal_help.h to read

char helpdata[1];

