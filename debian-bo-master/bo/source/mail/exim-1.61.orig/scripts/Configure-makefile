#! /bin/sh

# Shell script to build a makefile in a build directory. It is called from the
# generic make file which is initially set up and run from inside the
# directory.

scripts=../scripts

# First off, get the OS type, and check that there is a make file for it.

os=`$scripts/os-type` || exit 1

if	test ! -r ../OS/Makefile-$os
then    echo ""
	echo "*** Sorry - operating system $os is not supported"
        echo "*** See OS/Makefile-* for supported systems" 1>&2
        echo ""
	exit 1;
fi

# We also need the architecture type, in order to test for any architecture-
# specific configuration files.

arch=`$scripts/arch-type` || exit 1

# Build a file called makefile in the current directory by joining
# the generic default makefile, the OS base makefile, and then local
# generic, OS-specific, architecture-specific, and OS+architecture-specific
# makefiles, if they exist. These files all contain macro definitions, with
# later definitions overriding earlier ones. Make a temporary file first, in
# case things go wrong. Use short macro names to save typing.

mf=makefile
mft=$mf-t

# Ensure the temporary does not exist and start the new one by setting
# the OSTYPE and ARCHTYPE variables.

rm -f $mft
(echo "OSTYPE=$os"; echo "ARCHTYPE=$arch"; echo "") > $mft || exit 1

# Now concatenate the files to the temporary file.

for f in OS/Makefile-Default \
         OS/Makefile-$os \
         Local/Makefile \
         Local/Makefile-$os \
         Local/Makefile-$arch \
         Local/Makefile-$os-$arch
do   if test -r ../$f
     then   echo "# From $f"
	    sed '/^#/d;/^[   ]*$/d' ../$f || exit 1
	    echo "# End of $f"
	    echo ""
     fi
done >> $mft || exit 1

# Finally, join on the generic base make file, which contains the actual
# rules and stuff.

cat ../OS/Makefile-Base >> $mft || exit 1

# If the new makefile is the same as an existing one, say so, and just
# update the timestamp. Otherwise remove the old and install the new.

if	cmp -s $mft $mf
then	echo ">>> $mf unchanged"
	touch $mf || exit
	rm -f $mft
elif	rm -f $mf
	mv $mft $mf
then	echo ">>> New $mf installed"
        echo '>>> Use "make makefile" if you need to force rebuilding'
else    echo ""
	echo "*** Failed to install $mf - see $mft"
        echo ""
	exit 1;
fi

# Remove the original make file (link) from the build directory (to stop make
# muttering about both existing).

rm -f Makefile

# End of Configure-makefile
