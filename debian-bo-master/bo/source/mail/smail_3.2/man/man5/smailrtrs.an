.rn '' }`
''' smailrtrs.an,v 1.2 1995/07/06 17:01:59 nm4 Exp
''' 
''' 
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.if t .ds PI \(*p
.if n .ds PI PI
'br\}
.TH ROUTERS X_MAN5_EXT_X "\*(RP"
.UC
.if n .hy 0 
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd S B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds / 
.	ds q 
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH NAME
X_LIB_DIR_X/routers \- smail router configuration
.SH "\fBTHE ROUTERS FILE\fR"
The \fIrouters\fR file describes the operations, and their order, for
handling remote addresses. For example, some possibilities are to
lookup hostnames in a routing database, to match a special
domain-literal form, or call a program to return a list of neighboring
hosts.
.PP
The following list describes the possible generic attributes for
router file entries:
.Ip "\fIalways\fR" 4
type: \fIboolean\fR
.Sp
Routers will not always find a complete match for a particular
hostname. For example, if a routing database has a route to the domain
\fIamdahl.com\fR but not to the hostname \fIfutatsu.uts.amdahl.com\fR then
the routing driver might return the route to \fIamdahl.com\fR. Generally,
the route for the longest match of the target host is used. However,
if the \fBalways\fR attribute is set, then any match found by this router
will be used in preference to routes that might have been returned by
routers \fIlater in the router list\fR. This is useful for hardwiring a
certain number of routes within a small database. For example, this is
useful for Internet sites that gateway for a small number of \s-1UUCP\s0
sites in the \s-1UUCP\s0 zone.
.Ip "\fIdriver\fR" 4
type: \fIstring\fR
.Sp
The driver attribute names a specific set of lowlevel functions which
will do the work of routing remote mail. This attribute is required.
.Ip "\fImethod\fR" 4
type: \fIstring\fR
.Ip "\fItransport\fR" 4
type: \fIstring\fR
.Sp
The router driver has the option of specifically setting a transport
to use for remote delivery. If the driver does not do so, then either
a \fBmethod\fR or a \fBtransport\fR attribute must exist to specify how the
mail is to be delivered. A \fBmethod\fR attribute specifies a file which
contains a table relating hostnames to transports. A \fBtransport\fR
attribute specifies a specific transport. If the method file does not
contain a match for all hosts, then the transport named with the
\fBtransport\fR attribute is used. The format of a method file is given
in the next section.
.SH "\fBTHE ROUTER DRIVERS\fR"
This section details the usage and driver-specific attributes for all
of the router drivers distributed with smail. See the section \fBTHE
ROUTER FILE\fR for more information on routers.
.Sh "\fBThe Pathalias Driver\fR"
The pathalias router computes routes from a database in the style
produced by the pathalias program. It has the following
driver-specific attributes:
.Ip "\fIdomain\fR" 4
type: \fIstring\fR
.Sp
A listp of domains to be stripped from the end of a hostname before it
is searched for in the database. Multiple domains, in this list, are
separated by colons.
.Ip "\fIfile\fR" 4
type: \fIstring\fR
.Sp
This defines the name of the file containing the database.  Except
when it does not make sense as a result of the \fIproto\fR used, if this
does not begin with ``/'\*(R', it will be referenced relative to the
\fIsmail_lib_dir\fR directory.
.Ip "\fIinterval\fR" 4
type: \fInumber\fR
.Sp
The number of seconds to wait between open retries.
.Ip "\fIoptional\fR" 4
type: \fIboolean\fR
.Sp
If set, then if the open fails, assume an empty alias file. This is
useful for optional databases. For example, in a networking
environment, workstations may be configured with the option of having
a private alias file, without the necessity of creating such a file on
each host.
.Ip "\fIproto\fR" 4
type: \fIstring\fR
.Sp
Names the protocol used in opening and searching the
database. Possibilities are discussed below.
.Ip "\fIreopen\fR" 4
type: \fIboolean\fR
.Sp
If set, the pathalias will be closed and reopened after each call to
the pathalias driver. This is useful in environments where file
descriptors are scarce but many databases are desired.
.Ip "\fIrequired\fR" 4
type: \fIstring\fR
.Sp
A list of domains which targets are required to be for a match. The
names are not stripped, unless they are also specified by the
\fBdomain\fR attribute.
.Ip "\fIretries\fR" 4
type: \fInumber\fR
.Sp
The maximum number of retries for opening a file. This is useful on
systems without an atomic rename system call. On such systems there
will be a window of vulnerability when new databases are moved into
place where no file will exist.
.Ip "\fItry\fR" 4
type: \fIstring\fR
.Sp
A list of domains to be stripped only if the target was not found in
the database without the domain stripped. (This is currently not
supported).
.Ip "\fItryagain\fR" 4
type: \fIboolean\fR
.Sp
If set, then if the open fails, the resolution of local addresses will
be attempted at a later time. This is useful in a networking
environment where failure to open a database (such as a remote \s-1YP\s0
database) may be a result of a server machine being down or
temporarily inaccessible.
.Ip "The current list of possible values for the \fIproto\fR attribute is:" 4
.Ip "bsearch " 8
Use a binary search to look through a sorted file arranged as lines
which begin with a key and are followed by the value associated with
the key, separated by a colon or whitespace.
.Ip "dbm" 8
Use the \s-1BSD\s0 \fIdbm\fR\|(3x) or \fIndbm\fR\|(3x) routines to search for the key. The
keys and data in the dbm database must end in a nul byte. If only the
\fIdbm\fR\|(3x) library is available then only one dbm database can be used by
\fIsmail ,\fR while the \fIndbm\fR\|(3x) routines will allow any number of
.Ip "databases." 8
However, it is always okay for multiple routers and directors to use
the same dbm database, if this is useful.
.Ip "lsearch " 8
Use a linear search using the same read routine used to read config
files. `#\*(R'\-style comments are allowed and the beginning of each file
entry should be the key, followed by whitespace or a colon
character. The rest of the entry should be the value associated with
the key.
.Ip "yp" 8
Use the Sun \s-1YP\s0 service to access a paths database stored on a remote machine. In this case the value for the \fBfile\fR attribute is of the form:
.Sp
.Vb 1
\&    domain_name:database_name
.Ve
where the \fIdomain_name:\fR is optional and defaults to the default \s-1YP\s0
domain for the local host.
.Ip "aliasyp " 8
This is a variant of the \fIyp\fR protocol that is compatible with the
standard Sun \fImail.aliases\fR \s-1YP\s0 service. This database has a different
format from other databases which must be taken into account when
sending requests. Typically this is not useful for a path database.
.Ip "nisplus " 8
Lookup the key in a remote Sun \s-1NIS\s0+ (Sun \s-1NIS\s0 version 3) database. \s-1NIS\s0+
is not compatible with \s-1NIS\s0 (otherwise known as \s-1YP\s0). The file parameter
must be a \s-1NIS\s0+ indexed name, which is described in the \fInis\fR\|(1) manual
page. The search string is replaced with \*(L"%s\*(R" where it can be filled
in by smail's \s-1NIS\s0+ lookup routine.  See the \f(CWnisplus\fR entry in the \fIsmail\fR manpage and the
more detailed example in the \f(CWnisplus\fR entry in the \fIdirectors\fR manpage
.PP
All database lookups are either independent of case or, when case
independent lookups are impossible, case-folded. Thus, keys in \s-1DBM\s0 or
\s-1YP\s0 databases must be in lower case.
.PP
As an example of the use of the \fBdomain\fR, \fBtry\fR and \fBrequired\fR
driver attributes, if the \fBdomain\fR value is ``uucp,'\*(R' then any
hostname that ends in .uucp will have the .uucp removed before being
looked up. Alternately, if the the \fBtry\fR value is ``uucp,'\*(R' then
``.uucp'\*(R' is stripped only if the original was not found. If the
\fBrequired\fR value is ``uucp'\*(R' then a hostname is not a candidate for a
match unless it ends in ``.uucp.'\*(R' The effects of \fBdomain\fR and \fBtry\fR
are not cumulative and a hostname is applied to the \fBrequired\fR
attribute value before being applied to \fBdomain\fR and \fBtry\fR in that
order.
.PP
Note that the length of any stripped string is added to the count of
characters matched for purposes of deciding which router had the most
complete match.
.PP
A sample pathalias router entry is:
.PP
.Vb 6
\&    pathalias:
\&            transport=uux, 
\&            driver=pathalias; 
\&            file=paths, 
\&            proto=bsearch,
\&            domain=uucp
.Ve
An example of a pathalias file for the site \fIwalldrug\fR is:
.PP
.Vb 9
\&    .amdahl.com         amdahl!%s 
\&    amdahl              amdahl!%s 
\&    dgcad               namei!glotz!nsavax!dgcad!%s 
\&    glotz               namei!glotz!%s 
\&    hoptoad             hoptoad!%s 
\&    kgbvax              kgbvax!%s 
\&    kremvax             kremvax!%s 
\&    namei               namei!%s 
\&    nsavax              namei!glotz!nsavax!%s
.Ve
This data base associates a host or domain name, on the left hand
side, with a path, on the right hand side. The right hand side should
be a \s-1UUCP\s0\-style `!\*(R'\-path ending in a ``%s'\*(R'. The format is intended to
be more general, with the ``%s'\*(R' showing where to put a user
name. Indeed, \fIpathalias\fR(X_MAN8_EXT_X) can produce paths involving
both right and left operators such as:
.PP
.Vb 1
\&    decwrl              decwrl!%s@ucbvax
.Ve
This form is not recommended in general because of a historical
disagreement over the precedence of ``!'\*(R' and ``@'\*(R' which is not
always resolved correctly by the pathalias program.  By standardizing
on \s-1UUCP\s0\-style `!\*(R'\-paths, as will be produced from the \s-1USENET\s0 maps, we
avoid many routing ambiguities. If the path is just ``%s,'\*(R' it denotes
a name for the local host.
.Sh "\fBThe Uuname Driver\fR"
Some sites in the \s-1UUCP\s0 zone may wish to use a direct path to their
neighbors, without relying on a pathalias database. Alternately, a
site may wish to use the pathalias routes to their neighbors only in
the case that a domain address is given (i.e., ``\fIneighbor\fR.uucp'').
.PP
A simple driver that meets these requirements is the \fBuuname\fR driver,
which reads a list of hostnames from the output of a shell command
(normally \fB/usr/bin/uuname\fR) and uses this list to match neighboring
hostnames.
.PP
An example entry for a site that wishes to route to their neighbors for hostnames that may end in .uucp is:
.PP
.Vb 5
\&    uuname: 
\&            transport=uux, 
\&            driver=uuname; 
\&            cmd=/usr/bin/uuname, 
\&            domain=uucp
.Ve
An alternative is a site that wishes to bypass the pathalias router
only for explicit target matches, so that the form
``\fIneighbor\fR.\s-1UUCP\s0'\*(R' will be routed through, as an example,
pathalias. This can be done by not specifying a domain, as in:
.PP
.Vb 4
\&    uuname: 
\&            transport=uux, 
\&            driver=uuname; 
\&            cmd=/usr/bin/uuname
.Ve
The \fIuuname\fR driver also supports the \fBdomain\fR, \fBrequired\fR and
\fBtry\fR attributes, and all three domain-style attributes can be colon
separated lists. See the pathalias driver for more details on these
attributes.
.PP
In addition, there is a string attribute, \fBstatfile\fR which names a
file which can be used to determine when the output of the shell
command will change. For example, when used with the uuname command
this would normally be either \fI/usr/lib/uucp/L.sys\fR or
\fI/usr/lib/uucp/Systems\fR depending on whether a site is using
HoneyDanBer or stock V7-style \s-1UUCP\s0. If a \fBstatfile\fR attribute is
defined, then smail daemons that expect to deliver multiple messages
will cache the output of the shell command. The specified pathname
will then be checked at regular intervals to determine if the command
should be reissued to refresh the cached information.
.Sh "\fBThe Queryprogram Driver\fR"
If no other router driver meets a particular routing requirement, but
a shell script or C program can be written which does, the
\fBqueryprogram\fR driver can be used to access this script or
program. This driver runs a program, with arguments, and examines its
exit status and standard output for information. The program should
return an exit status of zero to indicate a match for the target host,
non-zero otherwise. Optionally, this program can write a path and a
transport on its standard output to provide additional information. If
a path is not returned then a one-hop path to the target host is
assumed. The program is always executed as an unprivileged user.
.PP
The \fBqueryprogram\fR driver supports the \fBdomain\fR, \fBrequired\fR and
\fBtry\fR attributes, as defined in the description of the \fBpathalias\fR
driver. The program and its arguments are described in terms of a
\fBcmd\fR attribute which is a string consisting of white-space-separated
tokens which are expanded to form a program name and the arguments to
pass to that program. The variable \fB$host\fR can be used to obtain the
target host string. White space or punctuation from an expansion
variable do not delimit arguments. Two additional boolean attributes
affect the driver's behavior:
.Ip "\fBread_path\fR" 4
If this attribute is enabled, then a path is read as the first
white-space delimited field in the first line of output from the
program. If no output is produced by the program, or this attribute is
not enabled, then a one-hop path to the target host is assumed. A path
should consist of a list of hostnames separated by an exclamation
point (`!') character.
.Ip "\fBread_transport\fR" 4
If this attribute is enabled, then a transport is read as a
white-space delimited field from the first line of output from the
program. If the \fBread_path\fR attribute is also enabled, then the
transport is taken from the second field, otherwise it is taken from
the first. If no output was generated by the program, or the field did
not exist in the output, then the normal methods for determining the
transport are used.
.Sp
A trivial example of the use of this driver is the router file entry:
.Sp
.Vb 4
\&    match_bar:
\&            driver=queryprogram, 
\&            transport=bar; 
\&            cmd="/bin/test X${lc:host} = Xfoo"
.Ve
This router will use the program \fItest\fR\|(1) to determine if the target
host is \fIfoo\fR. If this is the target host, then it is assumed to be a
neighboring host which can be reached over the transport \fIbar\fR.
.Sp
A more complex example is to create a shell script such as:
.Sp
.Vb 1
\&    # match_fubar.sh - match hosts on the fubar networks
.Ve
.Vb 1
\&    case "$1" in
.Ve
.Vb 4
\&    foo)    echo "foo foo_transport"; exit 0;;
\&    bar)    echo "foo!bar foo_transport"; exit 0;;
\&    curds)  echo "curds curds_transport"; exit 0;;
\&    whey)   echo "curds!whey curds_transport"; exit 0;;
.Ve
.Vb 1
\&    esac
.Ve
.Vb 1
\&    exit 1
.Ve
By setting up a router file entry such as:
.Sp
.Vb 4
\&    match_fubar:
\&            driver=queryprogram;
\&            cmd="/bin/sh $lib_dir/match_fubar.sh ${lc:host}",
\&            read_path, read_transport
.Ve
a complete, though not particularly optimal, router is created which
can match the hosts \fIfoo\fR, \fIbar\fR, \fIcurds\fR and \fIwhey\fR and cause
messages to these hosts to be delivered using one of the transports
\fIfoo_transport\fR or \fIcurds_transport\fR.
.Sp
The \fBqueryprogram\fR driver is not very efficient, as it requires a
fork/exec for each host. However, it is a very simple to construct a
new router using this driver, so it is useful for prototyping. In
general, a new form of routing requirement is most efficiently handled
by writing a new router driver.
.Sh "\fBThe Gethostbyname Driver\fR"
In a networking environment, hostnames on a network can be matched
using this driver, which calls the \fIgethostby\fR\fIname\fR\|(3N) library
routine. This routine is only available on systems that supply a \s-1BSD\s0
compatible internet networking library. Driver attributes for this
driver include \fBdomain\fR, \fBrequired\fR and \fBtry\fR attributes, which are
compatible with the \fIpathalias\fR and \fIuuname\fR drivers.
.Sp
Additional attributes are:
.Ip "\fIonly_local_domain\fR" 4
type: \fIboolean\fR
.Sp
Do not match hosts that have a domain component (i.e., that contain a
dot). The \fBdomain\fR attribute is applied before the
\fBonly_local_domain\fR attribute, so hosts that have a domain component
consisting only of one of the strings listed with the \fBdomain\fR
attribute can be matched.
.Sp
\fIgethostbyname\fR will only match a target host completely. The
hostname given to the transport will be the host as given by the
\fIh_name\fR field of the \fIhostent\fR structure.
.Sp
\fB\s-1NOTE\s0:\fR The hostname given to \fIgethostbyname\fR\|(3N) will be downcased, so
that upper-case or mixed-case names can be matched correctly.
.Sh "\fBThe Gethostbyaddr Driver\fR"
Also in a network environment, it is useful to be able to specify
explicit Internet addresses using a target such as: [192.2.12.3] which
is the internet address for the host \fIeek.uts.amdahl.com\fR.
.Sp
The gethostbyaddr driver matches targets of this form, which is
defined by square brackets surrounding only digits and dot
characters. The driver then converts this number into a hostname by
calling \fIgethostbyaddr\fR\|(3N) to determine the proper name for the
host. If \fIgethostbyaddr\fR fails, then the input domain literal name is
given to the transport. This is useful with incomplete host tables.
.Sp
The gethostbyaddr driver has the following attributes:
.Ip "\fIcheck_for_local\fR" 4
type: \fIboolean\fR
.Sp
If set, see if the hostname returned by \fIgethostbyaddr()\fR matches one of
the known names for the local host. The name ``localhost'\*(R' is counted
here as a potential name for the local host.
.Sp
\fB\s-1NOTE\s0:\fR This attribute is set by default.
.Sp
\fIfail_if_error\fR
.Sp
type: \fIboolean\fR
.Sp
If set, then any domain-literal target which does not fit the form of
an internet address is considered an error. If not set, then such
addresses are merely not matched by the driver.
.Sh "\fBThe Bind Driver\fR"
The \fBbind\fR driver uses the \fIBerkeley Internet Name Domain\fR server,
\fInamed ,\fR to resolve target hostnames. It is fully compliant with the
\s-1RFC974\s0 standard, \fIMail Routing and the Domain System ,\fR and uses \s-1MX\s0
records. This router is available only on systems that have a 4.3BSD
compatible resolver library. It is highly recommended that this router
be used for machines that are on the internet, rather than using the
\fBgethostbyname\fR router.
.Sp
The following attributes vary the behavior of the \fBbind\fR driver:
.Ip "\fIdefer_no_connect\fR" 4
type: \fIboolean\fR
.Sp
If this boolean attribute is set, then we must be able to connect to
the server. If attempts to connect to the server fail, then routing is
retried at a later time, on the assumption that the nameserver is only
down temporarily. If this attribute is not set, then a failure to
connect to the server will cause the router to be ignored. This allows
a bind router to be optional based on whether or not the server
exists.
.Sp
\fB\s-1NOTE\s0:\fR This attribute is set by default.
.Ip "\fIlocal_mx_okay\fR" 4
type: \fIboolean\fR
.Sp
If this boolean attribute is not set, then it is considered an error
for an \s-1MX\s0 resource record to be encountered which points to the local
host. If this attribute is set, then such an \s-1MX\s0 resource record will
cause the address not to be matched. The precedence number for the
resource record is taken into account here, so that an \s-1MX\s0 resource
record which points to the local host is ignored if there are other
records with a lower precedence number.
.Ip "\fIdefnames\fR" 4
type: \fIboolean\fR
.Sp
This boolean attribute is passed to the \s-1BIND\s0 resolve routines as the
\s-1RES_DEFNAMES\s0 flag. If set, then hostnames which do not contain dots
will have a default domain appended to them before lookups. For
example, this allows for hosts on a local area network to be
referenced using the basename of the host rather than requiring the
full domain name.
.Sp
\fB\s-1NOTE\s0:\fR This attribute is set by default.
.Ip "\fIignore_domains\fR" 4
type: \fIstring\fR
.Sp
If this string is set, then it is used as a colonseparated list of
domain names. If a hostname ends in any of these domains, then the
router will not match the host, and will not result in any
queries. This can be set to a list of domains that are known not to
exist, such as \fBuucp\fR and \fBbitnet\fR, to prevent expensive lookups
which will never be successful.
.Ip "\fIdomain_required\fR" 4
type: \fIboolean\fR
.Sp
If this boolean attribute is set, then a hostname with only one domain
component (i.e., no dots) will not be matched. This should probably be
set if \fBdefnames\fR is not set, to prevent lookups for uucp hostnames
that will not be found by \s-1BIND\s0.
.Ip "\fImx_only\fR" 4
type: \fIboolean\fR
.Sp
If this boolean attribute is set, then match a host only if it has an
\s-1MX\s0 record. This is not currently useful on the Internet as a whole,
though it does have uses in managing networks disconnected from the
Internet, but that use \s-1BIND\s0 to manage the hostname space. If all hosts
that can accept mail have an \s-1MX\s0 entry pointing to them, then no
attempts will made to send mail to other ``hosts,'\*(R' such as printers
or terminal concentrators.
.Ip "\fImx_domains\fR" 4
type: \fIstring\fR
.Sp
This is a list of colon separated domains which if they match the tail
of a \s-1FQDN\s0 will force mx_only mode for that domain. This allows the
advantages of mx_only for areas that do conform to the specifications
\- most of the internet does not. Negative matches can be forced by
preceding the domain with a bang (!). For example: mx_domains =
\*(L"!york.ac.uk:ac.uk\*(R"
.Sp
This allows you to send to any host in the york.ac.uk domain but only
to \s-1MX\s0 registered hosts in the ac.uk domain.
.Ip "\fIgateways\fR" 4
type: \fIstring\fR
.Sp
A list of gateways and corresponding domains for explicit routing
using the bind processing logic for the gateway address. The string
consists of a sequence of lists. Each list consists of strings
separated by colons, and the lists are separated by a string
consisting of a single `+\*(R' character. Each list consists of the name
of a gateway, followed by a list of domains that should be routed to
that gateway. The gatewayed domains will match either against a
complete address, or against the terminating domain of an address. For
example:
.Sp
.Vb 2
\&    gateways = "uknet.ac.uk:uucp:+:\e
\&                earn-relay.ac.uk:bitnet:ie:earn"
.Ve
In this example, if an address of the form <anything>.uucp is being
processed, it will be converted to uknet.ac.uk before any other
processing is done. The new name will then be looked up in the \s-1DNS\s0 and
routed accordingly. Thus mail for <anything>.uucp will always be sent
to uknet.ac.uk, by whatever route is registered in the \s-1DNS\s0 for that
address. Similarly, mail for the domains bitnet, ie, and earn will be
routed to earn-relay.ac.uk.
.Ip "\fIdns_search\fR" 4
type: \fIboolean\fR
.Sp
If set allow the resolver to search its domain list for matches. This
experimental and might not have the effect you expect depending on
your resolver search capabilities.
.Ip "\fIwiden_domains\fR" 4
type: \fIstring\fR
.Sp
A list of domains, separated by colons, to be tacked onto the end of
the address if it isn't found directly in the \s-1DNS\s0. For example:
.Sp
.Vb 1
\&    widen_domains = "cam.ac.uk:ac.uk"
.Ve
With this setting, an address such as \*(L"psy.ox\*(R" will first be tried as
it stands, then \*(L"psy.ox.cam.ac.uk\*(R" will be tried, and if that fails,
\*(L"psy.ox.ac.uk\*(R" will be tried.
.Sp
The following attributes are for use in the \s-1UK\s0, where mail routing is
complicated by the co-existence of both the Internet and the \s-1JANET\s0
mail protocols. (\s-1NB\s0 Greybook protocols are now discouraged in the \s-1UK\s0).
.Ip "\fIuk_greybook_transport\fR" 4
type: \fIstring\fR
.Sp
If this attribute is set, then an address which is matched in the \s-1DNS\s0
but which does not have any usable \s-1MX\s0 records because they have been
discarded for \s-1UK\s0\-specific reasons (see below) will be routed to this
transport, provided the address ends in `.uk\*(R'. The string should be
the name of a transport defined in smail's transports configuration
file.
.Sp
If this attribute is not set, such an address will cause a `nomatch\*(R'
return, allowing a subsequent router (typically smarthost) to handle
the message.
.Ip "\fIuk_greybook_worldorder\fR" 4
type: \fIboolean\fR
.Sp
If this switch is set, addresses that are sent to the greybook
transport are left in world order, otherwise they are inverted into \s-1UK\s0
order.
.Ip "\fIuk_ignore_gateways\fR" 4
type: \fIstring\fR
.Sp
A list of known gateways which are not to be used for sending \s-1SMTP\s0
mail within the \s-1UK\s0 (that is, to addresses that end in `.uk'). For
example:
.Sp
.Vb 3
\&    uk_ignore_gateways = "nsfnet-relay.ac.uk:\e 
\&                          sun2.nsfnet-relay.ac.uk:\e 
\&                          mhs-relay.ac.uk"
.Ve
.Ip "\fIuk_max_precedence\fR" 4
type: \fInumber\fR
.Sp
The highest \s-1MX\s0 precedence value that is acceptable for an address in
the \s-1UK\s0 for \s-1SMTP\s0 mail. The default value is 999, which disables this
option, but sites in the \s-1UK\s0 should normally set it to 9 in accordance
with the established convention that preference values greater than 9
should not be used for intraUK \s-1SMTP\s0 mail.
.Ip "\fIuk_try_inverting\fR" 4
type: \fIboolean\fR
.Sp
If this attribute is set, then when an address cannot be found in the
\s-1DNS\s0, even after widening with the strings given in the widen_domains
attribute, the original address is inverted (e.g. uk.ac.somewhere
becomes somewhere.ac.uk) and the whole process is tried
again. Inversion does not take place if the address already ends in
`.uk\*(R'.
.Ip "\fIuk_greybook_hosts_list\fR" 4
type: \fIstring\fR
.Sp
A list of possible greybook hosts for a minimally connected greybook
site.
.Ip "\fIuk_greybook_hosts_file_name\fR" 4
type: \fIstring\fR
.Ip "\fIuk_greybook_hosts_file_proto\fR" 4
type: \fIstring\fR
.Ip "\fIuk_greybook_hosts_file_retries\fR" 4
type: \fInumber\fR
.Ip "\fIuk_greybook_hosts_file_interval\fR" 4
type: \fInumber\fR
.Sp
These specify a file to be used to look up greybook (or more generally
alternative transport) hosts. The advantage of doing things here
rather than in a separate transport is that you know things have
already matched in the \s-1DNS\s0!
.Ip "\fIuk_greybook_relay\fR" 4
type: \fIstring\fR
.Sp
A relay host used for any addresses that exist in the \s-1UK\s0 but were not
matched by the greybook transport stuff. This has an advantage over
the smarthost in that the host part of the address is known correct.
.Ip "\fIuk_suffix\fR" 4
type: \fIstring\fR
.Sp
The domain suffix (of the \s-1FQDN\s0) for the name to be considered as
applicable for all the nasty \s-1UK\s0 specific rules described by the uk_
variables.
.Sp
All matches found by the bind driver are considered full matches, for
the purposes of prioritizing results from different routers. Matches
are considered full even in the presence of wildcards in \s-1MX\s0 records.
.Sp
A site which exists only on the internet, requiring no other means of
routing should have a router file consisting of the entries:
.Sp
.Vb 2
\&    # match internet address domain literals internet_addrs:
\&    driver=gethostbyaddr, transport=smtp; fail_if_error
.Ve
.Vb 3
\&    # match internet hostnames
\&    internet_hosts:
\&            driver=bind, transport=smtp
.Ve
A site which servers as the internet gateway for some set of hosts
should either have a paths file naming the hosts for which it
gateways, or should use the \fBlocal_mx_okay\fR attribute and allow
target hostnames to fall through to a router for another network. For
example, a \s-1UUCP\s0 network gateway which gateways for a set of hosts
listed int the \s-1UUCP\s0 map database distributed over \s-1USENET\s0 could use the
following two routers, in order, to handle all of its gateway
responsibilities:
.Sp
.Vb 3
\&    internet_hosts:
\&            driver=bind, transport=smtp;
\&            local_mx_okay
.Ve
.Vb 4
\&    uucp_hosts:
\&            driver=pathalias, 
\&            transport=uux; 
\&            file=/usr/lib/smail/paths
.Ve
If the \fBdefer_no_connect\fR is not used, then it is advisable to
include a \fBgethostbyname\fR router to match hostnames. The following
sequence of routers will allow the same smail configuration to be used
on machines that do have the \s-1BIND\s0 server and on machines that don't
have the server:
.Sp
.Vb 3
\&    internet_hosts:
\&            driver=bind, transport=smtp;
\&            -defer_no_connect
.Ve
.Vb 3
\&    network_hosts: 
\&            driver=gethostbyname, 
\&            transport=smtp
.Ve
.Sh "\fBThe Smarthost Driver\fR"
Sometimes it is handy to be able to redirect mail to a host that you
don't know about to some other host that has more routing
information. This other host is called a \fIsmart host\fR, and can be
named by using the smarthost driver.
.Sp
The smarthost driver has the following driver attribute:
.Ip "\fIpath\fR" 4
type: \fIstring\fR
.Sp
This define a host or \s-1UUCP\s0\-style `!\*(R'\-path path that defines the smart
host.
.Sp
If no \fBtransport\fR or \fBmethod\fR attribute is given for the router file
entry, this address will be resent through all the routing drivers. An
exception is that an address cannot be sent to the smarthost driver
twice, as this would mean that the path to the smarthost was not
known.
.Sp
The global configuration variable \fBauth_domains\fR affects the
smarthost router by restricting the set of hostnames that can be
matched by the smarthost router to hostnames that are outside of the
domains listed in \fBauth_domains\fR.
.Sp
For example, if the site \fInamei\fR wanted to use \fIamdahl\fR's routing
database for mail delivery to non-neighboring sites they could use a
router file entry of:
.Sp
.Vb 1
\&    smart_host: driver=smarthost; path=amdahl
.Ve
or
.Sp
.Vb 2
\&    smart_host: transport=uusmtp, 
\&        driver=smarthost; path=amdahl
.Ve
\fB\s-1NOTE\s0:\fR At the present time, a \fBtransport\fR or \fBmethod\fR attribute is
required, as the software is not yet in place that can rescan the
routers in the required ways.
.Sp
Then, a recipient address of ``Ted.Husted.Jr@walldrug.uucp'\*(R' will be
rewritten so that the hostname is \fIamdahl\fR and the remaining part of
the address is ``Ted.Hustead.Jr@walldrug.uucp.'\*(R' 
.Sp
Alternately, in the second form for the entry, the transport, \fIuux,\fR
would be known immediately and be passed the hostname ``amdahl'\*(R'
immediately, with a \fB$user\fR value of
``Ted.Hustead.Jr@walldrug.uucp.'\*(R'
.Sp
By specifying a \s-1UUCP\s0\-style `!\*(R'\-path it is possible to route mail to a
smart host that you would not otherwise be able to route to. For
example, if the machine \fIglotz\fR wished to use \fIamdahl\fR as its smart
host, through its neighboring site \fInamei\fR, it could use:
.Sp
.Vb 1
\&    smart_host: driver=smarthost; path=namei!amdahl
.Ve
or
.Sp
.Vb 1
\&    smart_host: transport=demand, driver=smarthost; path=namei!amdahl
.Ve
It is possible to set the path and/or the transport in the \fIconfig\fR
file. This is done by setting the config file attributes \fBsmart_path\fR
and \fBsmart_transport\fR. For example, the config file could contain the
following:
.Sp
.Vb 2
\&    smart_path = amdahl
\&    smart_transport = uusmtp
.Ve
Then, if the entry in the router file was:
.Sp
.Vb 1
\&    smart_host: driver=smarthost
.Ve
the configuration would be essentially the same as in the second
smart_host example above. This makes it possible to share copies of
the router file among several machines, with the smart host
configuration specific to one machine being set in its private
configuration file.
.Sp
These config file attributes are used only if the path driver
attribute is not given in the \fIsmart_host\fR entry. If the
\fBsmart_path\fR attribute from the config file is used, the
\fBsmart_transport\fR will override a \fBtransport\fR or \fBmethod\fR
attribute.
.Sh "\fBThe Rewrite Driver\fR"
The rewrite driver is a pathalias like driver that matches addresses
against a database and gives back a new address that is subsequently
reparsed.
.Sp
The rewrite driver supports the following attributes, which are
supported in exactly the same way as the pathalias router: \fBfile,
proto, domain, required, retries, interval, reopen, tryagain,
optional, cacheopen.\fR
.Sp
The algorithm of the rewrite router is given a target (host or domain
name), look it up in the database, using the same search strategy as
the pathalias driver. The best match wins, as with pathalias. If a
match is found, the information on the matching line specifies how to
rewrite the address, or whether not to rewrite it at all. If the
address is not rewritten, the driver behaves as if it had not been
matched at all. If the address is rewritten, the driver sets the input
address up as the parent of the rewritten address, and returns the
rewritten address to be re-parsed. The match_always attribute has no
effect on this driver \- partial matches are treated like full matches.
.Sp
Each line in the rewrite database has the following format:
.Sp
.Vb 1
\&    domain flag format
.Ve
The domain is like pathalias \- a simple hostname, fully qualified
domain or a partial domain name beginning with a `.\*(R'.
.Sp
The flag is one of `\-\*(R' meaning rewriting should not be done (the
router then behaves as if the target had not been matched), or `+\*(R'
meaning rewriting should be done, using the specified format if the
remainder was a simple mailbox (user name), and leaving the remainder
unchanged if it was more complex.
.Sp
The format is a string to be variable expanded to produce the
rewritten address. The expansion is performed in a context in which
\f(CW$user\fR refers to the remainder and \f(CW$host\fR refers to the target. For
example:
.Sp
.Vb 5
\&    .special.com    +       special-$user 
\&    special.com -
\&    .foo.org        +       $user-$host 
\&    frobozz.com     +       ${lookup:user:lsearch{frobozz-aliases}{$value}{postmaster}} 
\&    frobozz.com     +       ${lookup:user:lsearch{frobozz-aliases}{$value}{$input_addr}}
.Ve
.Sh "\fBThe Rerouter Driver\fR"
The rerouter driver is an experimental router driver that can do
optimization of \s-1UUCP\s0\-zone !\-paths addresses. For example, given an
address of:
.Sp
.Vb 1
\&    host1!host2!host3!host4!host!user
.Ve
The rerouter driver could realize that a more efficient path exists to
\fBhost\fR and rewrite this as:
.Sp
.Vb 1
\&    host6!host!user
.Ve
Before you say to yourself how neat this would be and how much of a
savings this would be for the world, you must realize that such
rerouting is dangerous and should be configured-in only with a great
deal of consideration and attention to detail in your rerouting
database.
.Sp
Here are the attributes supported by the rerouter driver:
.Ip "\fIfile\fR" 4
type: \fIstring\fR
.Sp
An expansion string defining a file that selects which hosts or
domains will be considered candidates for rerouting. If the string,
after expansion, does not begin with \fB/\fR, it will be opened relative
to the smail library directory. The format of the file is described
later in this section.
.Ip "\fIproto\fR" 4
type: \fIstring\fR
.Sp
The lookup protocol to use in searching through the database specified
by the \fBfile\fR attribute. The list of possible lookup protocols for
the rerouter driver is the same as for the pathalias driver.
.Ip "\fIdomain\fR" 4
type: \fIstring\fR
.Sp
A colon-separated list of default domains for hosts in the
database. Targets ending in any of these domains will have the domain
stripped (incuding a preceding dot) before the database is searched. A
target containing only the domain (e.g., just \fB.uucp\fR) will remain
unchanged.
.Ip "\fIrequired\fR" 4
type: \fIstring\fR
.Sp
A colon-separated list of domain names that are must be part of a
hostname for that hostname to be considered a candidate for rerouting.
.Ip "\fIreopen\fR" 4
type: \fIboolean\fR
.Sp
If set, then reopen the database for each call to the rerouting
driver, and close before each return. This is necessary for systems
that would not otherwise have a sufficient number of available file
descriptors for all of their routing and directing needs.
.Ip "\fIoptional\fR" 4
type: \fIboolean\fR
.Sp
if set, then if the open of the database file fails, assume an empty
file.
.Ip "\fItryagain\fR" 4
type: \fIboolean\fR
.Sp
if set, then if the open fails, try again on a later spool directory
queue run.
.Ip "\fImatchall\fR" 4
type: \fIboolean\fR
.Sp
If set, reroute all bang path addresses. The rerouting database isn't
used at all in this mode, so even hosts that have an exclusion flag
(`\-') in the database will be rerouted. \fBUse this only for debugging
purposes. Unconditional rerouting is an offense against the
net.community!\fR
.Ip "\fImatchlocal\fR" 4
type: \fIboolean\fR
.Sp
If set, then address containing forms for the local host (within the
bounds of the \fBrequired\fR attributes) are considered candidates for
rerouting. The path starting with the component directly following the
last occurance of the local hostname is used rerouting. For example,
if the local hostname is \fBgeminix\fR, then the input path:
.Sp
.Vb 1
\&    host1!host2!geminix!host!user
.Ve
might be rewritten as:
.Sp
.Vb 1
\&    host4!host!user
.Ve
.Ip "\fImatchdb\fR" 4
type: \fIboolean\fR
.Sp
If set, a database lookup is done for the target. Otherwise, the
reroute database isn't used. This must be set of you intend to set the
\fBfile\fR attribute to point to a database.
.Ip "\fIbounceonly\fR" 4
type: \fIboolean\fR
.Sp
This attribute combines with the \fBmatchlocal\fR attribute to do limited
rerouting that bypasses multiple occurances of the local host, but
only for bounce messages (messages generated for returning errors to
the originator of a message). This attribute affects only the use of
the \fBmatchlocal\fR attribute, and has no other affect on the rerouter
driver.
.Sp
The rerouter driver operates only on pure !\-path addresses. For such
addresses, the !\-path is scanned from right to left for hostnames that
are considered candidates for rerouting. If such a host is found, the
path is truncated to contain everything from that component to the end
of the path. In the case of a match resulting from the \fBmatchlocal\fR
attribute, the matching component is also removed from the path.
.Sp
Given a truncated path generated by the rerouter driver, the address
is passed back into the smail address resolver engine to be rerouted
based on the other routers. This goes all the way back to the
beginning of the address resolution process, rather than continuing on
with the list of routers, as would happen for a non-matching target
hostname.
.Sp
If a database file is used to define candidate hosts for rerouting,
the file will be presumed to contain entries consisting of a hostname
or a domain name beginning with a period, followed by \fB+\fR or
\fB\-\fR. For example, the database file might contain:
.Sp
.Vb 8
\&    .do.main        +
\&    .bar            +
\&    .foo.bar        -
\&    host1.foo.bar   +
\&    host2           +
\&    host2.abc       +
\&    host3           +
\&    host4           +
.Ve
If a match is found on the given hostname, then the \fB+\fR or \fB\fRis used
to indicate whether the hostname is a candidate for rerouting. A \fB+\fR
indicates that the host is a candidate, a \fB\-\fR indicates that the host
is \fInot\fR a candidate.
.Sp
The rules for finding an entry in the database are:
.Ip "1." 4
Look for an exact match of the target hostname. If not found, and the
domain begins with a dot, look for a match without the dot.
.Ip "2." 4
If that fails, strip the first component of the domain, leaving the
initial dot on the second component. Look for a match on the resulting
name. Repeat this step until a match is found or no components remain.
.Sp
This lookup algorithm, together with the \fB+\fR or \fB\-\fR field can be
used to enable rerouting for all but a certain subset of hosts within
a domain.
.Sp
\fBGeneral recommendations\fR
.Sp
While rerouting can be useful, and can improve the flow of mail
through the \s-1UUCP\s0 zone, it can be disastrous if done wrong.
.Sp
Here are two situations where it can be useful to reroute mail:
.Ip "1." 4
If your site is on the Internet, and it is a backbone for a domain of
\s-1UUCP\s0 sites that are connected to your site, then your site might have
access to routing informations that isn't available to the \s-1UUCP\s0 sites
(\s-1MX\s0\-records etc.). Using shortcuts over the internet instead of
sending the mail along the original slow and maybe expensive
(telephone charges) path can be a major advantage.
.Ip "2." 4
If one or more links that in your direct neighbourhood (one or two
hops away) have changed and the new \s-1UUCP\s0 maps haven't yet propagated
widely enough to make other sites aware of these changes, you could
use rerouting to \fItemporarely\fR correct the incoming bang paths that
were generated from the old maps.
.Sp
However, before you enable rerouting you should make sure that your
routing databases are really accurate. It's not enough that you
install the posted \s-1USENET\s0 maps automatically. These maps are
notoriously inaccurate, and often contain very unrealistic link costs,
resulting in nonoptimal routes. Therefore, it is necessary to check
all routes that might be used for rerouting line by line whenever it
is rebuilt from the maps.
.Sp
If you can't or don't want to do this, don't use rerouting! Or at
least only for sites in your direct neighbourhood. Rerouting with a
poorly maintained routing database is a disservice to the net! The
simplest way to setup rerouting is to limit the set of hosts that you
use for rerouting and ensure that the routes to all of those hosts are
stable and accurate. Making a separate paths filebased router is the
simplest way of ensuring that stable paths are used.
.Sp
Also, if you think that you have the administrative resources for
rerouting, do so only when you are willing to keep in touch with the
maintainers of other rerouting sites in your area. Mail loops between
two rerouting sites are a serious problem that can be reduced only by
discussing changes you want to make to your routing \fIin advance\fR.
.Sp
So in short, folks, don't use rerouting if it isn't absolutely
necessary. Please don't use it as a means to inflate your
ego. Instead, maintaining a rerouting host is a responsible task that
needs lots of time and determination. Please restrain yourself, for
the sake of fast and flawless mail delivery.
.Sp
\fBHostname non-uniqueness\fR
.Sp
One more point, which is actually an important one, is that hostnames
within \s-1UUCP\s0\-zone are not always unique. Just because you recognize a
hostname on the end of path does \fInot\fR mean that it is the host that
you think it is. To avoid conflicts arrising from non-unique names it
is best to avoid rerouting for hostnames that are not qualified within
a domain.
.Sp
The only safe way to reroute an address is to reroute from left to
right rather than right to left, and to stop as soon as a host is
found which is not a rerouting candidate. However, such a policy
greatly limits the usefulness of rerouting or at least it greatly
increases the number of entries in your rerouting database that are
necessary for rerouting to be useful.
.rn }` ''
