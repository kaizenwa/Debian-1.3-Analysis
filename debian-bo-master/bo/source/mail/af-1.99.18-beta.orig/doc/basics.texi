@c This is part of the af manual.
@c Copyright (C) 1996 Malc Arnold, Emma Kemm, Kay Dekker.
@c Derived in parts from the GNU Emacs Manual, Eleventh Edition,
@c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995 Free Software Foundation, Inc.
@c See file af.texi for copying conditions.

@node Basics, Typeout, Exiting, Top
@chapter Basic af Commands

We now give the basics of how to read, save, and delete messages, send
mail to people and save your changes back to your mailbox.

@menu
* Reading Messages::    How to read the current message.
* Moving Point::        How to move around in a buffer.
* Scrolling::           How to scroll the messages on the screen.
* Deleting Messages::	Deleting and killing messages.
* Information::         Commands to get information.
* Quitting::            abort a key or command.
* Basic Help::          How to ask af what a key does.
* Arguments::   	Numeric arguments to repeat a command.
@end menu

@node Reading Messages
@section Reading Messages
@cindex opening messages
@cindex reading messages
@cindex displaying messages
@cindex viewing messages

The most basic operation in af is to @dfn{open} the current message;
to display it's contents via typeout (@pxref{Typeout}), or some other
pager.

@kindex @key{RET}
@kindex C-o
@kindex M-@key{RET}
@kindex C-M-o
@findex open-message
@findex page-message
@vindex pager
@vindex mime-pager
@table @kbd
@item RET @r{or} C-o
Open the current message, using the pager named in the @code{pager}
variable, usually @samp{typeout}.  If the message is a @sc{mime}
message, then use the pager named in the @code{mime-pager} variable
instead if possible.
@item M-@key{RET} @r{or} C-M-o
Open the current message, using the pager named in the @code{PAGER}
environment variable.
@end table

@vindex headers-not-displayed
Normally, only mail headers not listed in the
@code{headers-not-displayed} variable will be displayed when you open a
message.  A positive numeric argument makes af display all the message's
headers.  A negative argument makes af skip all headers, and only
display the body of the message.  @xref{Arguments} for more information
on numeric arguments.

@vindex pause-after-paging-message
If your external pager doesn't need af to pause after displaying the
message; then you can make reading messages more convenient by setting
the variable @code{pause-after-paging-message} to @code{true}.

@node Moving Point
@section Changing the Location of Point
@cindex moving point
@cindex movement
@cindex cursor motion
@cindex moving the cursor

To do anything useful with af, you have to know how to move point
(@pxref{Point}).  There are several keys which move point within a
buffer.

@kindex C-n
@kindex n
@kindex C-p
@kindex p
@kindex M->
@kindex >
@kindex M-<
@kindex <
@kindex M-.
@findex next-line
@findex previous-line
@findex beginning-of-buffer
@findex end-of-buffer
@findex goto-line
@findex move-to-window-line
@table @kbd
@item C-n @r{or} n
Move down one line, vertically (@code{next-line}).
@item C-p @r{or} p
Move up one line, vertically (@code{previous-line}).
@item M-.
Move point to the vertical centre of the window.
(@code{move-to-window-line}).  Text does not move on the screen.

A numeric argument says which screen line to place point on.  It counts
screen lines down from the top of the window (zero for the top line).  A
negative argument counts lines from the bottom (@minus{}1 for the bottom
line).
@item M-< @r{or} <
Move to the top of the buffer (@code{beginning-of-buffer}).  With
numeric argument @var{n}, move to @var{n}/10 of the way from the top.
@xref{Arguments}, for more information on numeric arguments.
@item M-> @r{or} >
Move to the end of the buffer (@code{end-of-buffer}).
@item C-g
Read a number @var{n} and move point to line number @var{n}
(@code{goto-line}).  Line 1 is the beginning of the buffer.
@end table

@node Scrolling
@section Scrolling
@cindex scrolling

Since only part of a large buffer fits in the window, af tries to show
the part that is likely to be interesting.  The display control commands
allow you to specify which part of the buffer you want to see.

@kindex C-l
@kindex C-v
@kindex M-v
@findex recenter
@findex scroll-up
@findex scroll-down
@table @kbd
@item C-l
Clear screen and redisplay, scrolling the selected window to center
point vertically within it (@code{recenter}).  A numeric argument
@var{n} says to move point to screen line @var{n}.
@item C-v
Scroll forward (a windowful or a specified number of lines)
(@code{scroll-up}).
@item M-v
Scroll backward (@code{scroll-down}).
@end table

The names of all scroll commands are based on the direction that the
messages move in the window.  Thus, the command to scroll forward is
called @code{scroll-up}, since the messages move up.

@vindex next-screen-context-lines
When scrolling a windowful at a time, af leaves two lines that were
visible before you scrolled still visible afterwards, so that you can
retain the context you were in before you scrolled.  The number of lines
of overlap across a @kbd{C-v} or @kbd{M-v} is controlled by the variable
@code{next-screen-context-lines}; by default, it is two.

@node Deleting Messages
@section Deleting Messages
@cindex deleting messages
@cindex killing messages

@kindex C-k
@kindex k
@findex kill-line
@findex delete-message
@findex undelete-message
@table @kbd
@item C-k @r{or} k
Kill the current message, removing it from the folder
(@code{kill-line}).  @xref{Killing and Yanking}.
@item M-x delete-message
Mark the current message as deleted.  This doesn't actually delete the
message until you save the buffer.  At that point any messages marked
as deleted will be killed, and not written to the folder.
@item M-x undelete-message
Remove the deleted marker from the current message; so that it will not
be killed when you save the buffer.
@end table

@node Information
@section Message and Position information
@cindex location of point
@cindex cursor location
@cindex point location
@cindex message information
@cindex information on messages

Here are commands to get information about messages, and your
position in the buffer.

@kindex M-=
@kindex C-x =
@kindex C-t ?
@findex what-cursor-position
@findex message-info
@findex message-tags
@table @kbd
@item M-=
Print line number of point in the buffer (@code{what-cursor-position}).
@item C-x =
Print a short summary of some of the message's details in the echo
area (@code{message-info}).
@item C-t ?
Print the message's tags in the echo area (@code{message-tags}).
@xref{Tags}.
@end table

@node Quitting
@section Quitting
@cindex quitting
@cindex aborting

@kindex C-g
@findex keyboard-quit
At any time in af except when a command is running, you can type
@kbd{C-g} (@code{keyboard-quit}) to quit from what you are doing.  If
you have typed part of a command, or a numeric argument, then @kbd{C-g}
will get rid of it.  If there isn't a partial command to get rid of,
but you are in the minibuffer or typeout then typing @kbd{C-g} will
exit back to the mail buffer, aborting the command you were running.

This means, that you can always get back to the top level of af by
typing @kbd{C-g C-g}.  This is useful for aborting commands, or if
you are unsure where you are in af.

@node Basic Help
@section Help
@cindex getting help with keys
@cindex help with keys

If you forget what a key does, you can find out with the Help character,
which is @key{C-h}.  Type @kbd{C-h k} followed by the key you want to
know about; for example, @kbd{C-h k C-n} tells you all about what
@kbd{C-n} does.  @key{C-h} is a prefix key; @kbd{C-h k} is just one of
its subcommands (the command @code{describe-key}).  The other
subcommands of @key{C-h} provide different kinds of help.  Type
@key{C-h} three times to get a description of all the help facilities.
(@pxref{Help}).

@node Arguments
@section Numeric Arguments
@cindex numeric arguments
@cindex prefix arguments
@cindex arguments, numeric
@cindex arguments, prefix

Any af command can be given a @dfn{numeric argument} (also called a
@dfn{prefix argument}), although it may be ignored.  Some commands
interpret the argument as a repetition count.  For example, @kbd{C-n}
with an argument of ten moves down ten lines instead of one.  With these
commands, no argument is equivalent to an argument of one.  Negative
arguments tell most such commands to move or act in the opposite
direction.

@kindex C-u
@kindex M-1
@kindex M-@t{-}
@findex universal-argument
@findex digit-argument
@findex negative-argument
If your terminal keyboard has a @key{META} key, the easiest way to
specify a numeric argument is to type digits and/or a minus sign while
holding down the @key{META} key.  For example,

@example
M-5 C-n
@end example

@noindent
would move down five lines.  The characters @kbd{Meta-1}, @kbd{Meta-2},
and so on, as well as @kbd{Meta--}, do this because they are keys bound
to commands (@code{digit-argument} and @code{negative-argument}) that
are defined to contribute to an argument for the next command.

Another way of specifying an argument is to use the @kbd{C-u}
(@code{universal-argument}) command followed by the digits of the
argument.  With @kbd{C-u}, you can type the argument digits without
holding down modifier keys; @kbd{C-u} works on all terminals.  To type a
negative argument, type a minus sign after @kbd{C-u}.  Just a minus sign
without digits normally means @minus{}1.

@kbd{C-u} followed by a character which is neither a digit nor a minus
sign has the special meaning of ``multiply by four''.  It multiplies the
argument for the next command by four.  @kbd{C-u} twice multiplies it by
sixteen.  Thus, @kbd{C-u C-u C-n} moves down sixteen lines.  This is a
good way to move down ``fast'', since it moves about 2/3 of a screen in
the usual size screen.  @kbd{C-u} is also a handy way of providing an
argument when you don't care about the value.

Many commands care only about whether there is an argument, and not
about its value.  Other commands care only about the sign of the
argument.  For example, the command @kbd{@key{RET}} (@code{open-message}) with
no argument shows only some of the message's headers; with a positive
argument, it shows all the headers, and with a negative argument it
shows no headers at all.  This may seem strange, but it is a convenient
way of modifying the behaviour of a command.

We use the term ``prefix argument'' as well as ``numeric argument'' to
emphasise that you type the argument before the command, and to
distinguish these arguments from minibuffer arguments that come after
the command.

@node Typeout, Minibuffer, Basics, Top
@chapter Typeout
@cindex typeout
@cindex continuation lines
@cindex line wrapping
@cindex wrapping

Typeout is the mode af uses to display large amounts of text such as
mail messages or help information.  When af uses typeout, the typeout
window appears, covering the entire screen apart from the echo area.
Once you exit typeout, the window disappears, ``uncovering'' the
original windows.

If possible, each line of the text is displayed as a single line on the
screen.  If a line is too long to fit on a single screen line, then it
will be displayed on several screen lines, with a @samp{\} at the
extreme right margin of all but the last of them.  The @samp{\} says
that the following screen line is not really a distinct line in the
text, but just the @dfn{continuation} of a line too long to fit the
screen.  This is called @dfn{line wrapping}, and the lines after the
first are often referred to as @dfn{continuation lines}.

When you are viewing typeout, the position indicator in the mode line
will often say @samp{MOR}.  This is because typeout does not wait to
read the entire input before displaying the first page, and since af
doesn't know how many lines there are in the text yet, it will give
the position as @samp{MOR} to indicate this.

Sometimes, the typeout window will appear, but you will still be able to
carry on with some other operation (such as displaying the help options
via @kbd{C-h C-h C-h}).  In these cases the typeout window will
disappear when the operation is completed.

Within typeout, only the cursor motion commands, the scrolling commands
and the text searching commands can be used.  To exit typeout, simply
type @kbd{C-g}.  The other af commands are irrelevant when you are just
viewing text.  Here is a brief summary of the commands available in
typeout:

@kindex @key{SPC} @r{(typeout)}
@kindex C-v @r{(typeout)}
@kindex M-v @r{(typeout)}
@kindex C-n @r{(typeout)}
@kindex C-p @r{(typeout)}
@kindex C-l @r{(typeout)}
@kindex C-s @r{(typeout)}
@kindex C-r @r{(typeout)}
@findex typeout-scroll-or-exit
@findex scroll-up @r{(typeout)}
@findex scroll-down @r{(typeout)}
@findex next-line @r{(typeout)}
@findex previous-line @r{(typeout)}
@findex recenter @r{(typeout)}
@findex search-forward @r{(typeout)}
@findex search-backward @r{(typeout)}
@table @kbd
@item @key{SPC}
Scroll the text up to show the next page of text.  If you are already
at the end of the text, then exit typeout  (@code{typeout-scroll}).
This is a convenient way of paging through short amounts of text.
@item C-v
Scroll forward (a windowful, or a specified number of lines)
(@code{scroll-up}).
@item M-v
Scroll backward (a windowful, or a specified number of lines)
(@code{scroll-down}).
@item C-n
Scroll forward one line (@code{next-line});
@item C-n
Scroll backward one line (@code{previous-line});
@item C-l
Redraw the display (@code{recenter}).
@item C-s @var{regex} @key{RET}
Search forward through the text for a line matching @var{regex}
(@code{search-forward}).  @xref{Searching}.
@item C-r @var{regex} @key{RET}
Search backward through the text for a line matching @var{regex}
(@code{search-forward}).  @xref{Searching}.
@end table

@node Minibuffer, Sending Mail, Typeout, Top
@chapter The Minibuffer
@cindex minibuffer

The @dfn{minibuffer} is the facility used by af commands to read
arguments more complicated than a single number.  Minibuffer arguments
can be file names, buffer names, af command names, address lists, and
many other things, depending on the command reading the argument.  You
can use many editing commands in the minibuffer to edit the argument.

@cindex prompt
When the minibuffer is in use, it appears in the echo area, and the
terminal's cursor moves there.  The beginning of the minibuffer line
displays a @dfn{prompt} which says what kind of input you should supply
and how it will be used.  Often this prompt is derived from the name of
the command that the argument is for.  The prompt normally ends with a
colon.

@cindex default argument
@cindex argument, default
Sometimes a @dfn{default argument} appears in parentheses after the
colon; it too is part of the prompt.  The default will be used as the
argument value if you enter an empty argument (e.g., just type
@kbd{@key{RET}}).  For example, commands that read buffer names always show a
default, which is the name of the buffer that will be used if you type
just @kbd{@key{RET}}.

@kindex @key{RET} @r{(minibuffer)}
@kindex C-g @r{(minibuffer)}
The simplest way to enter a minibuffer argument is to type the text
you want, terminated by @kbd{@key{RET}} which exits the minibuffer.  You can
cancel the command that wants the argument, and get out of the
minibuffer, by typing @kbd{C-g}.

@cindex default response
Sometimes, a @dfn{default response} will already be in the minibuffer
when you enter it.  If it is completely wrong, then you can type
@kbd{C-a C-k} to remove it.  These default responses appear for
convenience when you are prompted for a long value that you are
likely to want to edit, rather then retype from scratch.

Most commands which use typeout allow you to redirect the output into a
file, instead of viewing it.  The major exception to this is
@kbd{@key{RET}} (@code{open-message}), since there are several ways to
save a message to a file.  To redirect typeout to a file simply give the
command a prefix argument of any value; you will be prompted for the
file name using the minibuffer.

@menu
* Echo Area Conflicts:: How af handles echoing in the minibuffer.
* Inserting Text::      How to enter text into the minibuffer.
* Deleting Text::       How to delete text in the minibuffer.
* Editing the Text::    Basic minibuffer editing commands.
* Dealing with Words::  Commands which act on words in the text.
* Completion::          An abbreviation facility for minibuffer input.
* Minibuffer History::  Reusing recent minibuffer arguments.
@end menu

@node Echo Area Conflicts
@section Echo Area Conflicts
Since the minibuffer uses the screen space of the echo area, it can
conflict with other ways af customarily uses the echo area.  Here is
how af handles such conflicts:

@itemize @bullet
@item
If a command gets an error while you are in the minibuffer, this does
not cancel the minibuffer.  However, the echo area is needed for the
error message and therefore the minibuffer itself is hidden for a
while.  It comes back after a few seconds, or as soon as you type
anything.

@item
If in the minibuffer you use a command whose purpose is to print a
message in the echo area, such as @kbd{C-x =}, the message is printed
normally, and the minibuffer is hidden for a while.  It comes back
after a few seconds, or as soon as you type anything.

@item
Echoing of keystrokes does not take place while the minibuffer is in
use.
@end itemize

@node Inserting Text
@section Inserting Text
@cindex insertion
@cindex graphic characters
@cindex quoting

@findex self-insert-command
To insert printing characters into the minibuffer, just type them.  This
inserts the characters you type into the buffer at the cursor (that is,
at @dfn{point}; which has a different appearance in the minibuffer, but
the same meaning).  The cursor moves forward, and any text after the
cursor moves forward too.  If the text in the buffer is @samp{foobar},
with the cursor before the @samp{b}, then if you type @kbd{xx}, you get
@samp{fooxxbar}, with the cursor still before the @samp{b}.  This all
works because in the minibuffer all the printing characters run the
command @code{self-insert-command}.

@kindex C-q
@findex quoted-insert
Direct insertion works for printing characters and @key{SPC}, but other
characters act as editing commands and do not insert themselves.  If you
need to insert a control character or a character whose code is above
200 octal, you must @dfn{quote} it by typing the character @kbd{C-q}
(@code{quoted-insert}) first.  There are two ways to use @kbd{C-q}:

@itemize @bullet
@item
@kbd{C-q} followed by any non-graphic character (even @kbd{C-g})
inserts that character.
@item
@kbd{C-q} followed by three octal digits inserts the character
with the specified character code.
@end itemize

@noindent
A numeric argument to @kbd{C-q} specifies how many copies of the
quoted character should be inserted (@pxref{Arguments}).

@kindex @key{RET} @r{(minibuffer)}
@findex newline
When you have finished entering the text, simply type @kbd{@key{RET}}
(@code{newline}) to accept the argument and exit the minibuffer.

@node Deleting Text
@section Deleting Text
@cindex deleting text

@kindex @key{DEL}
@findex delete-backward-char
To @dfn{delete} a character you have inserted, use @kbd{@key{DEL}}
(@code{delete-backward-char}).  @key{DEL} deletes the character
@emph{before} the cursor (not the one that the cursor is on top of or
under; that is the character @var{after} the cursor).  The cursor and
all characters after it move backwards.  Therefore, if you type a
printing character and then type @kbd{@key{DEL}}, they cancel out.

@kindex C-d
@findex delete-char
To delete the character that the cursor is under, use @kbd{C-d}
(@code{delete-char}).  This deletes the character, moving all the
characters after the cursor backwards.  The cursor is left in place.
Therefore @kbd{C-d} is equivalent to @kbd{C-f DEL}.

@kindex C-k @r{(minibuffer)}
@findex kill-line @r{(minibuffer)}
To delete the text from the cursor to the end of the line, use
@kbd{C-k} (@code{kill-line}).  This kills the characters from
the one the cursor is under to the end of the line, leaving the
cursor at the end of the line (@pxref{Minibuffer Kills}).

@node Editing the Text
@section Editing the Text
To edit the text in the minibuffer, you need to be able to move around
in the text.  There are several commands available to do this:

@kindex C-a
@kindex C-e
@kindex C-f
@kindex C-b       
@kindex C-t
@findex beginning-of-line
@findex end-of-line
@findex forward-char
@findex backward-char
@findex transpose-chars
@table @kbd
@item C-a
Move to the beginning of the line (@code{beginning-of-line}).
@item C-e
Move to the end of the line (@code{end-of-line}).
@item C-f
Move forward one character (@code{forward-char}).
@item C-b
Move backward one character (@code{backward-char}).
@item C-t
Transpose the two characters on either side of point, moving point forward
one character (@code{transpose-chars}).
@end table

@node Dealing with Words
@section Dealing with Words

The minibuffer includes several commands for dealing with words
rather than characters.  Often these take the usual command for
moving point, but use a Meta key rather then a control key:

@kindex M-f
@kindex M-b
@kindex M-@key{DEL}
@kindex M-d
@kindex M-l
@kindex M-u
@kindex M-c
@table @kbd
@findex forward-word
@findex backward-word
@findex backward-kill-word
@findex kill-word
@findex downcase-word
@findex upcase-word
@findex capitalize-word
@item M-f
Move forward one word (@code{forward-word}).
@item M-b
Move backward one word (@code{backward-word}).
@item M-@key{DEL}
Delete the next word (@code{backward-kill-word}).
@item M-d
Delete the previous word (@code{kill-word}).
@item M-l
Convert the next word to lower case (@code{downcase-word}).
@item M-u
Convert the next word to upper case (@code{upcase-word}).
@item M-c
Capitalise the next word (@code{capitalize-word}).
@end table

@node Completion
@section Completion
@cindex completion

For certain kinds of arguments, you can use @dfn{completion} to enter
the argument value.  Completion means that you type part of the
argument, then af visibly fills in the rest, or as much as can be
determined from the part you have typed.

When completion is available, certain keys---@key{TAB}, @key{RET}, and
@key{SPC}---are rebound to complete the text present in the minibuffer
into a longer string that it stands for, by matching it against a set of
@dfn{completion alternatives} provided by the command reading the
argument.  @kbd{?} is defined to display a list of possible completions
of what you have inserted.

For example, when @kbd{M-x} uses the minibuffer to read the name of a
command, it provides a list of all available af command names to
complete against.  The completion keys match the text in the minibuffer
against all the command names, find any additional name characters
implied by the ones already present in the minibuffer, and add those
characters to the ones you have given.  This is what makes it possible
to type @kbd{M-x del @key{SPC} m @key{RET}} instead of @kbd{M-x
delete-message @key{RET}} (for example).

Case is often significant in completion, because it is significant in
many of the names that you can complete (buffer names and file names).
Thus, @samp{fo} often does not complete to @samp{Foo}.  Completion does
ignore case distinctions for certain arguments in which case does not
matter (such as af command or configuration variable names).

@menu
* Example: Completion Example.   An example of minibuffer completion.
* Commands: Completion Commands. Commands that completion uses.
* Strict Completion::            Types of minibuffer completion.
@end menu

@node Completion Example
@subsection Completion Example

A concrete example may help here.  If you type @kbd{M-x co @key{TAB}},
the @key{TAB} looks for alternatives (in this case, command names) that
start with @samp{co}.  There are only two: @code{copy-region-as-kill}
and @code{copy-tagset-as-kill}.  These are the same as far as
@code{copy-}, so the @samp{co} in the minibuffer changes to
@samp{copy-}.

If you type @kbd{@key{TAB}} again immediately, there are multiple 
possibilities for the very next character---it could be @samp{r} or
@samp{t}---so no more characters are added; instead, @key{TAB} just
produces a beep.  If you now type @kbd{?}, af will produce a list
of all possible completions to typeout; when you exit typeout, the
minibuffer is still waiting for the next character.

If you go on to type @kbd{r @key{TAB}}, this @key{TAB} sees
@samp{copy-r}.  The only command name starting this way is
@code{copy-region-as-kill}, so completion fills in the rest of that.
You now have @samp{copy-region-as-kill} in the minibuffer after typing
just @kbd{co @key{TAB} r @key{TAB}}.  Note that @key{TAB} has this
effect because in the minibuffer it is bound to the command
@code{minibuffer-complete} when completion is available.

@node Completion Commands
@subsection Completion Commands
Here is a list of the completion commands defined in the minibuffer
when completion is available.

@kindex @key{TAB} @r{(completion)}
@kindex @key{SPC} @r{(completion)}
@kindex @key{RET} @r{(completion)}
@kindex ? @r{(completion)}
@findex minibuffer-complete
@findex minibuffer-complete-word
@findex minibuffer-complete-and-exit
@findex minibuffer-list-completions
@table @kbd
@item @key{TAB}
Complete the text in the minibuffer as much as possible
(@code{minibuffer-complete}).
@item @key{SPC}
Complete the minibuffer text, but don't go beyond one word
(@code{minibuffer-complete-word}).
@item @key{RET}
Submit the text in the minibuffer as the argument, possibly completing
first as described below (@code{minibuffer-complete-and-exit}).
@item ?
Print a list of all possible completions of the text in the minibuffer
(@code{minibuffer-list-completions}).
@end table

@key{SPC} completes much like @key{TAB}, but never goes beyond the next
hyphen or space.  If you have @samp{copy-r} in the minibuffer and type
@kbd{@key{SPC}}, it finds that the completion is
@samp{copy-region-as-kill}, but it stops completing after
@samp{region-}.  This gives @samp{copy-region-}.  Another @key{SPC} at
this point completes to @samp{copy-region-as-}.

@node Strict Completion
@subsection Strict Completion

There are three different ways that @key{RET} can work in completing
the minibuffer, depending on how the argument will be used.

@itemize @bullet
@item
@dfn{Strict} completion is used when it is meaningless to give any
argument except one of the known alternatives.  For example, when
@kbd{M-x} reads the name of a command to run, it is meaningless to
give anything but the name of an existing command or macro.  In strict
completion, @key{RET} refuses to exit if the text in the minibuffer does
not complete to an exact match.

@item
@dfn{Cautious} completion is similar to strict completion, except that
@key{RET} exits only if the text was an exact match already, not
needing completion.  If the text is not an exact match, @key{RET} does
not exit, but it does complete the text.  If it completes to an exact
match, a second @key{RET} will exit.

Cautious completion is used for reading file names for files that must
already exist.

@item
@dfn{Permissive} completion is used when any string whatever is
meaningful, and the list of completion alternatives is just a guide.
For example, when @kbd{C-x C-f} reads the name of a folder to visit, any
folder name is allowed, in case you want to create a folder.  In
permissive completion, @key{RET} takes the text in the minibuffer
exactly as given, without completing it.
@end itemize

@node Minibuffer History
@section Minibuffer History
@cindex minibuffer history
@cindex history of minibuffer input
@cindex searching the minibuffer history
@cindex history searches

Every argument that you enter with the minibuffer is saved on a
@dfn{minibuffer history list} so that you can use it again later in
another argument.  You can think of the minibuffer history as a buffer
which you can move through displaying a line at a time.

@kindex C-n @r{(minibuffer)}
@kindex C-p @r{(minibuffer)}
@kindex M-< @r{(minibuffer)}
@kindex M-> @r{(minibuffer)}
@kindex C-s @r{(minibuffer)}
@kindex C-r @r{(minibuffer)}
@findex next-line @r{(minibuffer)}
@findex previous-line @r{(minibuffer)}
@findex beginning-of-buffer @r{(minibuffer)}
@findex end-of-buffer @r{(minibuffer)}
@findex search-forward @r{(minibuffer)}
@findex search-backward @r{(minibuffer)}
@table @kbd
@item C-p
Move to the next earlier argument string saved in the minibuffer history
(@code{previous-line}).
@item C-n
Move to the next later argument string saved in the minibuffer history
(@code{next-line}).
@item M-<
Move to the first argument string saved in the minibuffer history
(@code{beginning-of-buffer}).
@item M->
Move to the last argument string saved in the minibuffer history
(@code{end-of-buffer}).  This will always move you to the text you
were editing before using the minibuffer history.
@item C-r
Move to an earlier saved argument in the minibuffer history that matches
the current text (@code{search-backward}).
@item C-s
Move to a later saved argument in the minibuffer history that matches
the current text (@code{search-forward})..
@end table

The simplest way to reuse the saved arguments in the history list is to
move through the history list one element at a time.  While in the
minibuffer, type @kbd{C-p} to ``move to'' the previous minibuffer input,
and use @kbd{C-n} to ``move to'' the next input.  Similarly, you can use
@kbd{C-<} and @kbd{C->} to ``move to'' the first and last elements in
the history list.

When you move to a new history line, any text you had typed is stored
for you as the last history element, so you can return to it by typing
@kbd{M->}.  To use a history element as the argument, exit the
minibuffer as usual with @key{RET}.  You can also edit the text before
you reuse it; this does not change the history element that you
``moved'' to, but your new argument does go at the end of the history
list in its own right.

There are also commands to search forward or backward through the
history.  At the moment they search for a history element that starts
with the text you have typed in the minibuffer, up to the position of
the cursor; so typing @samp{list- C-r} will search for a history element
that begins with @samp{list-}.  If a matching history element is found
then the cursor will stay in the same column, so that typing @kbd{C-r}
again will search for another history element beginning with
@code{list-}.

@node Sending Mail, M-x, Minibuffer, Top
@chapter Composing and Sending Mail

Af allows you to compose and send mail as well as read it.  There are
several different commands to send mail, each of which sends mail in
a slightly different way.

Af composes messages in three stages.  First you are prompted for any
details needed for the message, such as the addresses to send it to.
Then af starts an editor, so that you can edit the message.  Finally,
you are prompted for what to do with the message (its
@dfn{disposition}).

@menu
* Sending Commands::	        The different commands to send mail.
* Initial Details::	        The details af may ask for when sending mail.
* Editing Mail::                Details of editing your mail message.
* Final Disposition::           Your options after editing the message.
* Composition Variables::       Variables which affect composing messages.
* Aliases::                     Convenient abbreviations for addresses.
@end menu

@node Sending Commands
@section Commands for Sending Mail
@cindex sending mail
@cindex replying to mail
@cindex group replying to mail
@cindex replying to a group
@cindex forwarding mail
@cindex bouncing mail

There are five commands for sending mail in af.  These commands are all
similar in use, but conceptually different.

@kindex M-s
@kindex M-m
@kindex M-r
@kindex C-M-r
@kindex M-f
@kindex M-b
@findex send-mail
@findex reply-to-message
@findex group-reply-to-message
@findex forward-message
@findex bounce-message
@table @kbd
@item M-m @r{or} M-s
Send a message to one or more people.  This allows you to compose and
send a mail message (@code{send-mail}).
@item M-r
Reply to the current message.  This lets you compose and send mail to
whoever the current message is from (@code{send-reply}).
@item C-M-r
Group reply to the current message.  This lets you compose and send mail
to whoever the message is from, and all the addresses listed in the
@samp{To:} header.  Copies are sent to the addresses listed in the
@samp{Cc:} header (@code{group-reply-to-message}).
@item M-f
@dfn{Forwarding} allows you to compose an annotated copy of the current
message and send it to one or more people.  (@code{forward-message}).
@item M-b
@dfn{Bouncing} means sending an exact copy of the current message to one
or more addresses, making it appear that the copy you send them is from
the person who sent the message to you (@code{bounce-message}).
You will not normally edit the text of the message.
@end table

@node Initial Details
@section Initial Details for Composing Mail

Depending on how you are sending mail, and how you have configured af,
you will be prompted for several things when you begin composing a
mail message.  Normally af will only prompt for @samp{To:} and
@samp{Subject:}, but here are all the possible questions:

@table @samp
@item To:
The addresses you want send the mail to.
@item Subject:
A brief description of what the message is about.
@item Cc:
Any mail addresses to send additional copies of the message to.
@item Bcc:
Any mail addresses to send @dfn{blind copies} of the mail to.  These
addresses will not be listed in the headers of the message when it is
sent.
@item Signature file
Which signature file (@pxref{Signatures}) do you want to include at the
end of the message.
@item Copy message (y/n)
If you are replying to a message, you can copy the text of of the
original message into the initial text of the reply.  This is called
@dfn{quoting}.
@end table

@node Editing Mail
@section Editing the Mail Message
@cindex @file{.signature} file
@cindex signature file

When you first edit a message you will normally see either a blank file
or the text of the original message with each line prefixed with
@samp{> }.  You can then use your editor as usual to compose the text of
the message.  When you save the message, your @file{.signature} file
will be appended to the message, separated by a line containing
@samp{--}.

When you edit a message for the second time (or if you have configured
af to do so), the headers of the message are inserted into the file you
edit, separated by a blank line, and your signature will be visible at
the end of the file.  You can edit the headers with your editor, and af
will process the changes when you exit the editor; reporting any
problems to typeout.  You can create headers by adding them into the
header section of the file, or delete them by deleting them from the
file.

You should be very careful when editing a message's headers.  If you
accidentally insert a blank line before the headers, then af will not
find them when you exit the editor, and will therefore think that you
have deleted them all.  This can normally be fixed by editing the file
again, and removing the offending text from the start of the file.

@node Final Disposition
@section Options After Editing the Message

When you finish editing a message and exit the editor, af will display a
summary of the message's headers and prompt you with

@example
Send, Edit, Check spelling, List or Forget?
@end example

It is a @strong{very} good idea to check the headers that af displays,
to make sure that you are sending the message to the people you think
you are, that the subject is appropriate, and so on.  Your options at
this point are:

@table @samp
@item Send
Confirm the message, and give it to the system for delivery.
@item Edit
Edit the message again, this time inserting the headers and any
signature into the text for you to edit.
@item Check spelling
Run an interactive spelling checker on the body of the message (but not
the headers).  This option may not be available on systems where there
isn't an interactive spelling checker installed.
@item List
List the message to typeout, exactly as it will be given to the system
for delivery.  This can be useful for checking a message, as it is much
quicker than starting up an editor.
@item Forget
Cancel the message and exit mail composition.  There is no way to recover
a message that you have ``forgotten''.
@end table

@node Composition Variables
@section Variables Related to Composing Mail

There are a number of configuration variables related to composing and
sending mail.  Here is a summary of each variable and its effects:

@vindex addresses-to-ignore
@vindex ask-bcc
@vindex ask-cc
@vindex auto-fold-headers
@vindex copy-on-reply
@vindex copy-preface
@vindex copy-prefix
@vindex edit-initial-headers
@vindex edit-initial-signature
@vindex edit-reply-address
@vindex editor
@vindex headers-to-copy
@vindex multiple-reply-warning
@vindex organization
@vindex outbound-folder
@vindex outbound-threshold
@vindex preserve-cc-in-group-reply
@vindex real-name
@vindex reply-address
@vindex signature-file
@vindex signature-separator
@vindex spell-checker
@table @code
@item addresses-to-ignore
Contains mail addresses which are to be ignored in group replies,
typically your mail addresses on this and other machines.  Default is
unset.
@item ask-bcc
If set to @code{true}, then af will prompt for addresses to send blind
copies to whenever you send mail.  Default is @code{false}.
@item ask-cc
If set to @code{true}, then af will prompt for addresses to send copies
to whenever you send mail.  Default is @code{false}.
@item auto-fold-headers
If set to @code{false}, then af will not automagically fold long header
lines onto several lines.  Default is @code{true}.
@item copy-on-reply
If set to @code{false}, af will never quote the text of the original
message in the initial text of a reply.  If set to @code{true} af will
always quote the original message.  If set to @code{ask} then you will
be asked each time you reply to a message.  Defaults to @code{ask}.
@item copy-preface
If set, the value is inserted before any text copied into the body of a
replying or forwarding message.  Any conversion characters in the value
are expanded to their full value.  A good value for this variable might
be @samp{On %D, %o wrote:}.  Default is unset.
@item copy-prefix
The prefix for lines of text copied into an outgoing message when
replying or forwarding a message.  Defaults to @samp{> }.
@item edit-initial-headers
It set to @code{true}, headers will be placed into the file to edit the 
first time you edit a message.  When set to @code{accept}, headers will
not be displayed for editing, but any valid headers typed at the
start of the message will be accepted.  Defaults to @code{false}.
@item edit-initial-signature
When set to @code{true}, any signature will be placed into the editor
the first time you edit a message.  Defaults to @code{false}.
@item edit-reply-address
When set to @code{true}, allows editing of the destination address when
replying to mail.  It is intended for use by people at sites with
inadequate mail configurations.  Defaults to @code{false}.
@item editor
The program to use to edit messages.  Defaults to the value of the
@code{VISUAL} or @code{EDITOR} environment variable.
@item headers-to-copy
A colon separated list of header names which should be included in
text copied into an outgoing message when replying to or forwarding
a message.  Default is unset (no headers are copied).
@item multiple-reply-warning
If set to @code{true}, then af will prompt for confirmation if you try
to reply to a message that you have already replied to.  Defaults to
@code{false}.
@item organization
If set, the the value is inserted into an @samp{Organization:} header
in the outgoing message.  Defaults to the value of the
@code{ORGANIZATION} environment variable.
@item outbound-folder
Gives the name of a folder in which to store a copy of all messages
sent with af.  The messages are stored with headers (except for a
@samp{Message-ID:}) in the named folder, immediately after being sent.
Default is unset (don't save messages).
@item outbound-threshold
Gives the maximum number of lines in a message body which should be
silently saved to the @code{outbound-folder}.  Af will prompt for
confirmation that a message longer than this limit is to be saved.  If
set to 0 then all outbound messages will be saved regardless of length.
Default is 100 lines.
@item preserve-cc-in-group-reply
If set to @code{true}, any @code{Cc:} header on a message is duplicated
in an outgoing group-reply to that message, so that recipients of a
carbon-copy will also receive the reply.  Default is @code{true}.
@item real-name
Your real name, for inclusion in @samp{From:} headers.  Defaults to the
value of the @code{NAME} environment variable, or your details stored in
the file @file{/etc/passwd}.
@item reply-address
Contains a mail address which forms a @samp{Reply-To:} header in all
messages you send, so that replies to those messages will be sent to
the address you specify.  Default is unset.
@item signature-file
The name of your signature file.  If the value begins with @samp{ask:},
then you will be prompted for the signature file to use, with any value
after the @samp{ask:} being used as a default.  Defaults to
@file{.signature} in your home directory.
@item signature-separator
A string which will be printed on a line between the body of an outgoing
message and any automatically-included signature.  If not set, then no
separator line is printed.  Defaults to @samp{--}.
@item spell-checker
The program to use to interactively spell-check the body of a message
before you send it.  Defaults to @samp{ispell -x} if @code{ispell} is
installed on your system, or unset otherwise.
@end table

@node Aliases
@section Defining and Using Mail Aliases
@cindex mail aliases
@cindex @file{.afalias} file
@cindex afalias file

Af will let you set @dfn{mail aliases}.  These are short mnemonic names
which stand for mail addresses or groups of mail addresses.  Like many
other mail programs, af expands aliases when they occur in the
@samp{To:}, @samp{From:}, @samp{Cc:}, @samp{Bcc:}, and @samp{Reply-to:}
headers.

@kindex C-x C-a
@findex set-alias
The easiest way to define a mail alias within af is with @kbd{C-x C-a}
(@code{set-alias}).  Af will prompt for the alias and then the real name
and the full address of the alias, defaulted from the From: header of
the current message.  If the alias already exists, af will prompt for
confirmation that you want to change the alias.  @footnote{If you edit
your @file{.afalias} file, you will find that the old version of the
alias will be commented out rather than deleted when you change it.
This can be useful if you accidentally overwrite an important alias.}

@kbd{C-x C-a} sets the alias internally; but it also writes the alias to
the file @file{.afalias} in your home directory.  This file is read
whenever af starts up, so your aliases will be available next time you
run af.  You can also edit your @file{.afalias} file directly; each line
should either be blank, be a comment beginning with @samp{;}, or look
like:

@example
@var{alias}:@var{Real Name}:@var{addresses}
@end example

@noindent
@var{alias} is the name of the alias; @var{Real Name} is the real name
of the person or group the alias represents, and @var{addresses} stands
for one or more mail addresses for @var{alias} to expand into.  Separate
multiple addresses with spaces or (preferably) commas.  You can make an
address list span more than one line by starting the second and
subsequent lines with a space or tab, in the same way as mail headers
are split over several lines of text.

For instance, to make @code{afbugs} stand for
@code{af-bug@@csv.warwick.ac.uk} put in the these lines:

@example
; Set up the af-bug mailing list as an alias
afbug:Af Bug Mailing List:af-bug@@csv.warwick.ac.uk
@end example

Af expands aliases as soon as you finish editing the mail file, so you
can check that the alias expanded properly by looking at the list of
headers that af shows you when it prompts for the disposition of the
mail.

@node M-x, Help, Sending Mail, Top
@chapter Running Commands by Name

The af commands that are used often or that must be quick to type are
bound to keys---short sequences of characters---for convenient use.
Other af commands that do not need to be brief are not bound to keys; to
run them, you must refer to them by name.

A command name is, by convention, made up of one or more words,
separated by hyphens; for example, @code{af-version} or
@code{list-commands}.  The use of English words makes the command name
easier to remember than a key made up of obscure characters, even though
it is more characters to type.

@kindex M-x
The way to run a command by name is to start with @kbd{M-x}, type the
command name, and finish it with @key{RET}.  @kbd{M-x} uses the
minibuffer to read the command name.  @key{RET} exits the minibuffer and
runs the command.  The string @samp{M-x} appears at the beginning of the
minibuffer as a @dfn{prompt} to remind you to enter the name of a
command to be run.  @xref{Minibuffer}, for full information on the
features of the minibuffer.

Note that @code{next-line} is the same command that you invoke with the
key @kbd{C-n}.  You can run any af command by name using @kbd{M-x},
whether or not any keys are bound to it.

If you type @kbd{C-g} while the command name is being read, you cancel
the @kbd{M-x} command and get out of the minibuffer, ending up at top
level.

To pass a numeric argument to the command you are invoking with
@kbd{M-x}, specify the numeric argument before the @kbd{M-x}.  @kbd{M-x}
passes the argument along to the command it runs.  The argument value
appears in the prompt while the command name is being read.

Normally, when describing a command that is run by name, we omit the
@key{RET} that is needed to terminate the name.  Thus we might speak of
@kbd{M-x af-version} rather than @kbd{M-x af-version @key{RET}}.  We
mention the @key{RET} only when there is a need to emphasise its
presence, such as when we show the command together with following
arguments.

@findex execute-extended-command
@kbd{M-x} works by running the command @code{execute-extended-command},
which is responsible for reading the name of another command and
invoking it.

@node Help, Handling Messages, M-x, Top
@chapter Help
@cindex help
@cindex self-documentation

@kindex C-h
@findex help-command
Af provides extensive help features accessible through the command
@kbd{C-h} (@code{help-command}).  @kbd{C-h} is a prefix key that is used
only for documentation-printing commands.  The characters that you can
type after @kbd{C-h} are called @dfn{help options}.  One help option is
@key{C-h}; that is how you ask for help about using @kbd{C-h}.  To
cancel, type @kbd{C-g}.

@kbd{C-h C-h} displays a list of the possible help options.  Typing
@kbd{C-h} again displays a longer list of the options, each with
a brief description.

@menu
* Key Help::		Asking what a key does in af.
* Name Help::		Asking about a things via their names.
* List Help::           Asking for lists of things.
* Apropos::		Asking what pertains to a given topic.
* Misc Help::		Other help commands.
@end menu

@node Key Help
@section Documentation for a Key

@kindex C-h c
@findex describe-key-briefly
The most basic @kbd{C-h} options are @kbd{C-h c}
(@code{describe-key-briefly}) and @w{@kbd{C-h k}} (@code{describe-key}).
@kbd{C-h c @var{key}} prints in the echo area the name of the command
that @var{key} is bound to.  For example, @kbd{C-h c C-n} prints
@samp{next-line}.  Since command names are chosen to describe what
the commands do, this is a good way to get a very brief description of
what @var{key} does.

@kindex C-h k
@findex describe-key
@kbd{C-h k @var{key}} is similar but gives more information: it
displays the documentation string of the command as well as its name.
This is too big for the echo area, so typeout is used for the display.

@node Name Help
@section Help by Command, Mode or Variable Name

@kindex C-h d
@kindex C-h f
@findex describe-function
@kbd{C-h f} (@code{describe-function}) reads the name of an af command,
keyboard macro or afl function using the minibuffer, then displays that
function's documentation string to typeout.  For example,

@example
C-h f delete-message @key{RET}
@end example

@noindent
displays the documentation of @code{delete-message}.  This is the only
way to get the documentation of a command that is not bound to any key
(one which you would normally run using @kbd{M-x}).

@kindex C-h v
@findex describe-variable
@kbd{C-h v} (@code{describe-variable}) is like @kbd{C-h f} but describes
configuration variables instead of commands and functions
(@pxref{Variables}).

@kindex C-h m
@findex describe-mode
@kbd{C-h m} (@code{describe-mode}) is also like @kbd{C-h f} but describes
major and minor modes rather than commands and functions
(@pxref{Major Modes}).

@node List Help
@section Help for Lists of Things

@kindex C-h b
@findex list-bindings
@kbd{C-h b} (@code{list-bindings}) displays the current key bindings
active in af to typeout.  The global bindings are shown first, and then
those for each of the major modes.  This be quite a long list, but might
be useful as a wall chart.

@kindex C-h d
@findex list-commands
@kbd{C-h d} (@code{list-commands}) lists all of af's commands, with
their bindings, to typeout.  Bindings which only take effect in mail
mode are listed in square brackets (eg @samp{[@key{M-s}]}).  Bindings
for typeout mode only are listed in braces (eg @samp{@{@key{C-f}@}}).
Bindings that are minibuffer-specific are listed in parentheses (eg
@samp{(@key{SPC})}).

@kindex C-h f
@findex list-functions
@kbd{C-h C-f} lists all of the afl functions to typeout.  Only those
functions which are not also commands are listed.  This is quite a
short list at present (@pxref{Afl}).

@kindex C-h k
@findex list-kbd-macros
@kbd{C-h C-k} @code{list-kbd-macros} lists all of the named keyboard
macros, with their values, to typeout (@pxref{Keyboard Macros}).

@kindex C-h v
@findex list-variables
@kbd{C-h C-v} lists all of the af configuration variables, with their
values, to typeout (@pxref{Variables}).

@kindex C-h C-a
@findex list-aliases
@kbd{C-h C-a} (@code{list-aliases}) lists all the mail aliases you have
defined to typeout, along with their values (@pxref{Aliases}).

@node Apropos
@section Apropos

@kindex C-h a
@findex apropos
@cindex apropos
A more sophisticated sort of question to ask is, ``What is relevant for
working with messages?''  To ask this question, type @kbd{C-h a message
@key{RET}}, which displays a list of all command, function, keyboard
macro and variable names that contain @samp{message}, including
@code{open-message}, @code{print-message}, and so on.  The bindings for
each command is listed with that command, in the same format as
list-bindings (@pxref{List Help}).  Similarly the values of keyboard
macros and variables are listed.  The @kbd{a} in @kbd{C-h a} stands for
`Apropos'; @kbd{C-h a} runs the command @code{command-apropos}.

Because @kbd{C-h a} looks only for things whose names contain the string
which you specify, you must use ingenuity in choosing the string.  If
you are looking for commands for reading messages and @kbd{C-h a
read-message @key{RET}} doesn't reveal any, don't give up.  Try just
@kbd{read}, or just @kbd{message}.  Be persistent.  Also note that you
can use a regular expression as the argument, for more flexibility
(@pxref{Regex Syntax}).

Here is a set of arguments to give to @kbd{C-h a} that covers many
classes of af commands, since there are strong conventions for naming
the standard af commands.  By giving you a feel for the naming
conventions, this set should also serve to aid you in developing a
technique for picking @code{apropos} strings.

@quotation
char, line, word, region, list, buffer, window, file, mode, beginning,
end, forward, backward, next, previous, up, down, search, goto, kill,
delete, mark, insert, yank, case, set, what, view, describe, default,
print, page, message, send.
@end quotation

@node Misc Help
@section Other Help Commands
@cindex Info
@cindex manuals, on-line
@cindex on-line manuals

@kindex C-h i
@findex info
@kbd{C-h i} (@code{info}) runs the Info program, which is used for
browsing through structured documentation files.  The entire af manual
is available within Info.  Type @kbd{h} after entering Info to run a
tutorial on using Info.

@kindex C-h l
@findex view-lossage
If something surprising happens, and you are not sure what commands you
typed, use @kbd{C-h l} (@code{view-lossage}).  @kbd{C-h l} prints the
last 100 command characters you typed in.  If you see commands that you
don't know, you can use @kbd{C-h c} to find out what they do.

@kindex C-h j
@findex describe-major-mode
Af has numerous major modes, each of which redefines keys and alters the
behaviour of some commands.  @kbd{C-h j} (@code{describe-major-mode})
prints documentation on the current major mode to typeout.

@kindex C-h n
@findex view-af-news
@kindex C-h C-c
@findex describe-copying
@kindex C-h C-w
@findex describe-no-warranty
The other @kbd{C-h} options display assorted useful information.
@kbd{C-h n} (@code{view-af-news}) displays information on recent changes
to af.  @kbd{C-h C-w} (@code{display-no-warranty}) displays details on
the complete absence of warranty for af.  @kbd{C-h C-c}
(@code{describe-copying}) displays the conditions you must obey in
distributing copies of af.


@c $Id: basics.texi,v 1.5 1996/10/06 17:33:52 malc Exp $
