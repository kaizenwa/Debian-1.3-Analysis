@c This is part of the af manual.
@c Copyright (C) 1996, 1997 Malc Arnold, Emma Kemm, Kay Dekker.
@c Derived in parts from the GNU Emacs Manual, Eleventh Edition,
@c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995 Free Software Foundation, Inc.
@c See file af.texi for copying conditions.

@node E-Mail, Screen, Future, Top
@chapter An Introduction to Electronic Mail
@cindex e-mail
@cindex mail
@cindex mailbox

@dfn{Electronic mail} (often known as @dfn{e-mail}, or simply
@dfn{mail}), is the exchange of messages between people using computer
networks.  In this manual, when we say mail, we mean electronic mail.  A
@dfn{mail message} is a message which has been or will be sent via
electronic mail.  Again, when we say message in this manual, we are
referring to a mail message.

When a mail message is sent, it is transmitted from one computer to
another until it reaches the correct one.  A message can be addressed to
more than one person, in which case a separate copy of the message is
sent to each person.  Once a message has reached the machine to which
it was addressed, then it is usually stored in the incoming mailbox of
the person it is addressed to.

An @dfn{incoming mailbox}, or @dfn{mailbox} is simply a file containing
mail messages, with a special sequence of characters separating each
message from the others.  Each user of a system will normally have their
own mailbox.  Users can also store messages in files of their own, which
are called @dfn{folders}.  In this manual, the term folder will refer to
any file which contains mail messages.

To read your mail, you will usually use a @dfn{mail reader}, a program
which can understand the format of a folder and present the contents to
you in a convenient form.  Af is an example of a mail reader.
Similarly, you would normally send mail by using a @dfn{mail composer},
a program which knows how to construct and send a mail message, and
gives the user a (hopefully) convenient environment in which to compose
and send their message.  Most mail readers, including af, are also mail
composers.

To allow a mail message to be sent to the correct person, it needs an
@dfn{envelope}.  To supply this, a mail message is divided up into two
parts, the @dfn{headers} and the @dfn{body}.  The headers supply the
information required to send the message to the right people, while
the body is the actual message you wanted to send.

@menu
* Mail Headers::        What the headers look like and mean.
* Addresses::           How to interpret a mail address.
* Message Body::        The contents of the message body.
* Signatures::          How to automatically sign a message.
@end menu

@node Mail Headers
@section Mail Headers
@cindex mail headers

The headers of a mail message are held at the beginning of the message,
and are separated from the message body by a blank line.  Here's an
example of message headers:

@smallexample
From malc@@thing.demon.co.uk Tue Jan 23 16:20:39 1996
Date: Tue, 23 Jan 1996 16:20:36 GMT
Message-Id: <4780.199201201539@@thing.demon.co.uk>
From: Malc Arnold <malc@@thing.demon.co.uk>
Organization: Team Limpid
Sender: The Management <root@@thing.demon.co.uk>
To: Kay Dekker <kay@@thing.demon.co.uk>,
    Andrew Fry <vic@@pootug.demon.co.uk>
Subject: Af manual in progress
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
@end smallexample

Note that apart from the first line, each header consists of a header
name, followed by a colon and then the header text.  The first line is
not really a header at all; it is the marker that most Unix systems
insert to mark the start of each new message.  You can also see that
unlike the envelope for a postal letter, the envelope information
contained in the header can also be of interest to the recipient.  There
are actually several other headers contained in most mail messages, but
by default af will filter them out when it displays a message for you to
read (@pxref{Reading Messages}).

Another interesting feature is the @samp{To:} header, which has been
extended over two lines by starting the second line with a tab.  You can
also continue headers in the same way by starting the following line
with a space.  Probably it's best to try to keep headers to a single
line though; if a long header line needs to be @dfn{folded} like this,
then af will normally do so for you.

Here is a brief summary of some of the headers you are likely to see
in a mail message.

@table @samp
@item From:
The e-mail address of the person who the mail is from.  Replies to the
message will be sent to this address (@pxref{Sending Mail}).  It is
possible for a message to be from more than one person.
@item Organization:
The sender's organisational affiliation.
@item Subject:
A brief description of what the message is about.
@item To:
The e-mail address of the message's recipients.
@item Cc:
A ``carbon copy'' of the message is sent to the addresses listed.  People
listed in the @samp{Cc:} header shouldn't regard the mail as being sent
to them.
@end table

@node Addresses
@section Mail Addresses
@cindex mail addresses

Mail addresses usually take the form @samp{user@@full.domain.name}.  They
may also be written as @samp{Full Name <user@@full.domain.name>}, or
@samp{user@@full.domain.name (Full Name)}.  In all of these cases, the
address of the user is the same; the addition of the full name is
simply a convenience to allow mail readers to display the sender's real
name rather then their e-mail address.

Usually, the part of the address to the left of the ``@@'' character
(@samp{user}) identifies the user to which the mail is to be sent, while
the part to the right (@samp{full.domain.name}) identifies the specific
computer or organisation where that user can be found.  Note that while
mail addresses must be unique, a user name may be duplicated many times
by different organisations; each with a different full domain name.

Lists of addresses (such as in a @samp{To:} header) should be separated
either by spaces or commas.

We shall not go into the intimate details of mail address syntax here;
af will check any addresses you give it, and either correct minor
problems or report any serious errors in an address.

@node Message Body
@section The Message Body
@cindex message body
@cindex @sc{mime}

Normally, the body of a mail message is just text, which is not handled
in any special way.  Recently, electronic mail has been extended to
allow for a message body which is something other than text.  These
extensions are called @dfn{@sc{mime}} (Multipurpose Internet Mail
Enhancements), and mail which makes use of them is called
@dfn{@sc{mime} mail}.

The version of af you are using may use an external program to display
mail in @sc{mime} format.  Otherwise, @sc{mime} mail will be displayed
just like any other message, which will probably not be helpful if the
message is an encoded image or other binary data.  We hope to add more
powerful and better-integrated support for @sc{mime} into later versions
of af.

@vindex viewable-charsets
One of the commonest uses of @sc{mime} (in Europe at least) is to send
mail which contains characters which aren't in the @code{us-ascii}
character set, such as accented characters.  Af can be set up so that
it doesn't use an external pager to display such messages, by setting
the variable @code{viewable-charsets} (@pxref{Variables}).

@node Signatures
@section Signatures
@cindex signatures

It is common for people to want to include a small amount of text at
the end of each message, to give information such as their telephone
number, paper-mail (``snail-mail'') address, other e-mail addresses.
and so on.

To aid people in doing this, af supports a feature known as
@dfn{signature files}.  These files contain text which will
automagically be included at the end of each mail message you send.  By
default, af's uses the file @code{.signature} in your home directory as
your signature file.

Some people also like to include lengthy quotations, large @sc{ascii}
graphics or other amusements in signature files.  This annoys many
people on the net, since it costs money to transfer large signatures,
and conveys no useful information.  Because of this, the version of
af which you use may be configured to truncate signature files that
are larger than a certain size; typically 4 lines of 79 columns each.
You have been warned.

@node Screen, User Input, E-Mail, Top
@chapter The Organization of the Screen
@cindex screen
@cindex parts of the screen

Normally, the af display occupies the whole screen.  When you start af,
the entire screen except for the last line is devoted to the folder you
are reading.  This area is called the @dfn{window}.  The last line is a
special @dfn{echo area} or @dfn{minibuffer window} where prompts appear
and where you can enter responses.  You can subdivide the window into
different windows, each of which can be used to display a different
folder (@pxref{Windows}).  In this manual, the word ``window'' always
refers to the subdivisions of the screen within af.

The window that the arrow cursor is in is the @dfn{selected window}, in
which most operations take place.  Most af commands implicitly apply to
the messages in the selected window.  The other windows display messages
for reference only, unless/until you select them.

Most windows display the details of folders, showing a @dfn{header line}
for each message in the folder.  Each header line shows a brief summary
of the message's details, and is treated as a pointer to the message it
describes.

Each window's last line is a @dfn{mode line} which describes what is
going on in that window.  It contains text that starts like
@samp{==== Af:@: @var{something}}.  Its purpose is to indicate what
buffer is being displayed above it in the window above it, how many
messages are in the buffer, whether the buffer contains unsaved changes,
and so on.

@menu
* Point::	        The place in the buffer where commands operate.
* Echo Area::           Short messages appear at the bottom of the screen.
* Header Lines::        How to interpret the lines in a mail buffer.
* Mode Line::	        Interpreting the mode line.
@end menu

@node Point
@section Point
@cindex point
@cindex cursor

Within a buffer displaying a folder, an arrow pointer shows the location
at which commands will take effect.  This location is called
@dfn{point}.  Many af commands move point through the buffer, so that
you can execute commands at different places in it.

While the arrow appears to point @var{at} a message, you should think of
point as @var{between} two messages; it lies @var{before} the message
that it is pointing at.  Sometimes people speak of ``the cursor'' when
they mean ``point'', or speak of commands that move point as ``cursor
motion'' commands.

If you are reading several folders in af, each in its own buffer, each
buffer has its own point location.  A buffer that is not currently
displayed remembers where point is in case you display it again later.

When there are multiple windows on the screen, each window has its own
point location.  The arrow shows the location of point in the selected
window.  This also is how you can tell which window is selected.  If the
same buffer appears in more than one window, each window has its own
position for point in that buffer.

It is possible to move point past the last message in a buffer.  This is
deliberate, to allow several other commands to work properly in an
``Emacs-like'' way.  While it may seem strange at first if you are used
to other mail readers, it soon becomes familiar; and it allows you to
use many af features much more easily.  Most commands that deal with
messages will report an error if you have moved point past the last
message in the buffer, just as they would if there were no messages at
all.

@node Echo Area
@section The Echo Area
@cindex echo area

The line at the bottom of the screen (below the mode line) is the
@dfn{echo area}.  It is used to display small amounts of text for
several purposes.

@dfn{Echoing} means displaying the characters that you type.  Outside
af, the operating system normally echoes all your input.  Inside af
things work a little differently.

@vindex echo-keystrokes
Single-character commands do not echo in af, and multi-character
commands echo only if you pause while typing them.  As soon as you pause
for more than a second in the middle of a command, af echoes all the
characters of the command so far.  This is to @dfn{prompt} you for the
rest of the command.  Once echoing has started, the rest of the command
echoes immediately as you type it.  This behaviour is designed to give
confident users fast response, while giving hesitant users maximum
feedback.  You can change this behaviour by setting the variable
@code{echo-keystrokes} (@pxref{Variables}).

@cindex error message in the echo area
If a command cannot be executed, it may print an @dfn{error message} in
the echo area.  Error messages are accompanied by a beep.

Some commands print informative messages in the echo area.  These
messages look much like error messages, but they are not announced with
a beep.  Sometimes the message tells you what the command has done, when
this is not obvious from looking at the screen.  Sometimes the sole
purpose of a command is to print a message giving you specific
information---for example, @kbd{C-x =} prints a message describing the
position of point in the buffer.  Commands that take a long time often
display messages ending in @samp{...} while they are working, and add
@samp{done} at the end when they are finished.

The echo area is also used to display the @dfn{minibuffer}, a window
that is used for reading arguments to commands, such as the name of a
file to be read.  When the minibuffer is in use, the echo area begins
with a prompt string that usually ends with a colon; also, the cursor
appears in that line because it is the selected window.  You can always
get out of the minibuffer by typing @kbd{C-g} (@pxref{Minibuffer}).

@node Header Lines
@section The Header Lines
@cindex header lines
@cindex current message

Most of the lines in a window which displays a folder will be
@dfn{header lines}, which present a one-line summary of a mail message.
By default a header line will look something like this:

@smallexample
@var{ptr} @var{tags}  @var{originator}                  @var{subject}
@end smallexample

@var{ptr} is the pointer which indicates the position of point in the
window; the ptr will be represented as @samp{=>} only on the line that
point lies before, and as blank on all other lines.  The line on which
the pointer is present is sometimes referred to as the @dfn{current
line}, and the message it represents as the @dfn{current message}, or
the @dfn{message at point}.

@var{tags} are the @dfn{tags} of the message.  Normally, this will
only show @dfn{system tags} which af sets to show information about a
message's status (@pxref{Tags}).

@var{originator} is the sender of the message.  If the sender's
real name is available in the message headers then it will be shown
here, otherwise their e-mail address will be displayed.

@var{subject} is the subject of the message.

@vindex header-line-format
@vindex header-line-arrow
It is possible to change the layout of the header lines by setting the
variable @code{header-line-format} (@pxref{Variables}).  Also, the arrow
pointer can be changed by setting the variable @code{header-line-arrow}.

@node Mode Line
@section The Mode Line
@cindex mode line

Each window's last line is a @dfn{mode line} which describes what is
going on in that window.  When there is only one window, the mode line
appears right above the echo area.  The mode line starts and ends with
dashes, and it contains text like @samp{Af:@: @var{something}}.

Normally, the mode line looks like this:

@smallexample
=@var{ch}= Af: @var{buf} == @var{count} == (@var{modes}) == @var{pos} =
@end smallexample

@noindent
This gives information about the buffer being displayed in the window:
the buffer's name, what modes are in use, whether the buffer has been
changed, and how far down the buffer you are currently looking.

@var{ch} contains two stars @samp{**} if the buffer has been changed
(the buffer is ``modified''), two plus signs @samp{++} if the buffer
contains messages whose status has changed, or @samp{==} if the buffer
has not been changed.  For a read-only buffer, it is @samp{%*} if the
buffer is modified, and @samp{%%} otherwise.

@var{buf} is the name of the window's @dfn{buffer}.  In most cases
this is the same as the name of a folder you are processing.
(@pxref{Buffers})

@var{count} is the number of messages in the window's buffer.

The buffer displayed in the selected window (the window that the arrow
cursor is in) is also af's selected buffer, the one that most commands
operate on.  When we speak of what some command does to ``the buffer'',
we are talking about the currently selected buffer.

@var{pos} tells you whether there are more messages above the top of the
window, or below the bottom.  If your buffer is small and it is all
visible in the window, @var{pos} is @samp{All}.  Otherwise, it is
@samp{Top} if you are looking at the beginning of the buffer, @samp{Bot}
if you are looking at the end of the buffer, or @samp{@var{nn}%}, where
@var{nn} is the percentage of the buffer above the top of the window.

@var{modes} lists the @dfn{major mode} and any @dfn{minor modes} which
are in effect in the buffer.  At any time, each buffer is in one and
only one of the possible major modes.  The major modes available include
Mail mode (for reading folders), Typeout mode (for displaying
information) and Minibuffer mode (for asking the user for input).  Each
major mode may be supplemented by one or more minor modes, which change
the mode's behaviour in some small way. (@pxref{Major Modes}).

@vindex mode-line-format
It is possible to change the layout of the mode line by setting the
variable @code{mode-line-format} (@pxref{Variables}).

@node User Input, Keys, Screen, Top
@chapter Characters, Keys and Commands
@cindex input with the keyboard
@cindex keyboard input
@cindex character set (keyboard)
@cindex @sc{ascii}
@cindex C-
@cindex Control
@cindex control characters

@sc{ascii} consists of 128 character codes.  Some of these codes are
assigned graphic symbols such as @samp{a} and @samp{=}; the rest are
control characters, such as @kbd{Control-a} (usually written @kbd{C-a}
for short).  @kbd{C-a} gets its name from the fact that you type it by
holding down the @key{CTRL} key while pressing @kbd{a}.

Some control characters have special names, and special keys you can
type them with: for example, @key{RET}, @key{TAB}, @key{LFD}, @key{DEL}
and @key{ESC}.  The space character is usually referred to below as
@key{SPC}, even though strictly speaking it is a graphic character whose
graphic happens to be blank.

On @sc{ascii} terminals, there are only 32 possible control characters.
These are the control variants of letters and @samp{@@[]\^_}.  In
addition, the shift key is meaningless with control characters:
@kbd{C-a} and @kbd{C-A} are the same character, and af cannot
distinguish them.

One af character set extension is that characters have an additional
modifier, called Meta.  Every character has a Meta variant; examples
include @kbd{Meta-a} (normally written @kbd{M-a}, for short), @kbd{M-A}
(not the same character as @kbd{M-a}, but those two characters normally
have the same meaning in af), @kbd{M-@key{RET}}, and @kbd{M-C-a}.  For
reasons of tradition, we usually write @kbd{C-M-a} rather than
@kbd{M-C-a}; logically speaking, the order in which the modifier keys
@key{CTRL} and @key{META} are mentioned does not matter.

@cindex Meta
@cindex M-
@cindex @key{ESC} replacing @key{META} key
Some terminals have a @key{META} key, and allow you to type Meta
characters by holding this key down.  Thus, @kbd{Meta-a} is typed by
holding down @key{META} and pressing @kbd{a}.  The @key{META} key works
much like the @key{SHIFT} key.  Such a key is not always labelled
@key{META}, however, as this function is often a special option for a
key with some other primary purpose.

If there is no @key{META} key, you can still type Meta characters using
two-character sequences starting with @key{ESC}.  Thus, to enter
@kbd{M-a}, you could type @kbd{@key{ESC} a}.  To enter @kbd{C-M-a}, you
would type @kbd{@key{ESC} C-a}.  @key{ESC} is allowed on terminals with
@key{META} keys, too, in case you have formed a habit of using it.
  
@sc{ascii} terminals represent function keys as a special sequence of
@sc{ascii} characters.  Because of this, it is possible, although not
simple, to configure af to handle function and arrow keys.
(@pxref{Customisation})

@node Keys, Commands, User Input, Top
@section Keys
@cindex key sequence
@cindex key

A @dfn{key sequence} (@dfn{key}, for short) is a sequence of characters
that are meaningful as a unit---as ``a single command.''  Some af
command sequences are just one character; for example, just @kbd{C-n} is
enough to move down one line.  But af also has commands that take two or
more characters to invoke.

@cindex complete key
@cindex prefix key
If a sequence of events is enough to invoke a command, it is a
@dfn{complete key}.  Examples of complete keys include @kbd{C-n},
@key{RET}, @kbd{C-x C-f} and @kbd{C-x 4 C-f}.  If it isn't long enough
to be complete, we call it a @dfn{prefix key}.  The above examples show
that @kbd{C-x} and @kbd{C-x 4} are prefix keys.  Every key sequence is
either a complete key or a prefix key.

Many single characters constitute complete keys in the standard af
command bindings.  A few of them are prefix keys.  A prefix key combines
with the following character to make a longer key sequence, which may
itself be complete or a prefix.  For example, @kbd{C-x} is a prefix key,
so @kbd{C-x} and the next character combine to make a two-character key
sequence.  Most of these key sequences are complete keys, including
@kbd{C-x C-f} and @kbd{C-x b}.  A few, such as @kbd{C-x 4} and @kbd{C-x
r}, are themselves prefix keys that lead to three-character key
sequences.  There's no limit to the length of a key sequence, but in
practice people rarely use sequences longer than four characters.

By contrast, you can't add more characters onto a complete key.  For
example, the two-character sequence @kbd{C-n C-k} is not a key, because
the @kbd{C-n} is a complete key in itself.  It's impossible to give
@kbd{C-n C-k} an independent meaning as a command.  @kbd{C-n C-k} is two
key sequences, not one.

All told, the prefix keys in af are @kbd{C-h}, @kbd{C-t}, @kbd{C-x}
@kbd{C-x 4}, and @key{ESC}.  But this is not cast in concrete; it is
just a matter of af standard key bindings.  If you customise af, you can
make new prefix keys, or eliminate these (@pxref{Key Bindings}).

If you do make or eliminate prefix keys, that changes the set of
possible key sequences.  For example, if you redefine @kbd{C-n} as a
prefix, @kbd{C-n C-k} automatically becomes a key (complete, unless you
define it too as a prefix).  Conversely, if you remove the prefix
definition of @kbd{C-x 4}, then @kbd{C-x 4 f} (or @kbd{C-x 4
@var{anything}}) is no longer a key.

@node Commands, Major Modes, Keys, Top
@section Keys and Commands

@cindex binding
@cindex function
@cindex command
@cindex function definition
This manual is full of passages that tell you what particular keys do.
But af does not assign meanings to keys directly.  Instead, af assigns
meanings to named @dfn{commands}, and then gives keys their meanings by
@dfn{binding} them to commands.

Every command has a name chosen by a programmer.  The name is usually
made of a few English words separated by dashes; for example,
@code{next-line} or @code{open-message}.  The bindings between keys and
commands are recorded in various tables called @dfn{keymaps}
(@pxref{Key Bindings}).

When we say that ``@kbd{C-n} moves down vertically one line'' we are
glossing over a distinction that is irrelevant in ordinary use but is
vital in understanding how to customise af.  It is the command
@code{next-line} that is programmed to move down vertically.  @kbd{C-n}
has this effect @emph{because} it is bound to that command.  If you
rebind @kbd{C-n} to the command @code{end-of-buffer} then @kbd{C-n} will
move to the end of the buffer instead.  Rebinding keys is a common
method of customisation.

In the rest of this manual, we usually ignore this subtlety to keep
things simple.  To give the information needed for customisation, we
state the name of the command which really does the work in parentheses
after mentioning the key that runs it.  For example, we will say that
``The command @kbd{C-n} (@code{next-line}) moves point vertically
down,'' meaning that @code{next-line} is a command that moves vertically
down and @kbd{C-n} is a key that is standardly bound to it.

While we are on the subject of information for customisation only, it's
a good time to tell you about @dfn{variables}.  Often the description of
a command will say, ``To change this, set the variable @code{foobar}.''
A variable is a name used to remember a value.  Most of the variables
documented in this manual exist just to facilitate customisation: some
command or other part of af examines the variable and behaves
differently according to the value that you set.  Until you are
interested in customising, you can ignore the information about
variables.  When you are ready to be interested, read the basic
information on variables, and then the information on individual
variables will make sense (@pxref{Variables}).

@node Major Modes, Minor Modes, Commands, Top
@section Major Modes
@cindex modes
@cindex major modes
@cindex mail mode
@cindex minibuffer mode
@cindex typeout mode

Af has several modes of operation; known as @dfn{major modes}.  A major
mode is in effect a subset of af, where a command may have a different
effect, and different commands may be available (This is probably the
most pronounced difference between af and Emacs; Emacs major modes just
alter its behaviour in minor ways, such as changing key bindings; while
af major modes may have a completely different set of commands and
behaviour).

There are three major modes currently available in af.  @dfn{Mail mode}
is the mode used for buffers displaying mail messages; most af buffers
use mail mode.  @dfn{Minibuffer mode} is used to support the minibuffer;
it has no commands to handle mail messages, but many extra commands to
allow editing of text.  @dfn{Typeout mode} is the mode used for displaying
text to the screen.  Again, it has no commands to handle mail messages,
it simply allows you to browse text displayed on the screen.

Each major mode allows you to bind keys independently of the other major
modes (just like in Emacs), so keys may be bound in only one mode, or
even be bound to different things in different modes (just as they can
in Emacs).  For example, in mail mode @kbd{@key{SPC}} just clears the
echo area, in minibuffer mode it inserts a space into the text you are
editing, and in typeout mode it scrolls the text up to display the next
page.

Each af command may be available in all modes, or just in some of them.
For example the command @code{open-message} is only available in mail
mode, since in the other modes you are not dealing with mail messages
and the command wouldn't make sense.  So you can't run the command
@code{open-message} in typeout mode even by typing
@kbd{M-x open-message}.

A command may also have slightly different behaviour in different modes.
For example the command search-forward in mail mode searches through
the text of each mail message, looking some text.  In typeout mode it
searches through the text you are viewing instead.

This distinction is only really important when customising af; when you
are using af it is (hopefully) quite obvious what commands are likely to
work.  The important thing to remember is that keys may do very
different things depending on whether you are browsing a list of
messages, entering an argument in the minibuffer, or viewing text.

@node Minor Modes, Entering Af, Major Modes, Top
@section Minor Modes
@cindex minor modes

A minor mode is a particular feature which can be turned on or off.  For
example, @code{Read Only} mode selects whether you are allowed to modify
the contents of a buffer.  Unlike the major modes, the minor modes are
independent of each other, although they may only be valid in some major
modes.

Minor modes are usually specific to a buffer, so they may be turned on
in some buffers and off in others.  Normally, minor modes are turned on
or off automatically in response to some situation.  There may also be a
command to turn the minor mode off if it is on, or on if it is off; this
will be formed from the prefix @samp{toggle-} followed by the name of
the mode.  So the command to turn @code{Read Only} mode on or off is
@code{toggle-read-only}.

@node Entering Af, Exiting, Minor Modes, Top
@chapter Entering and Exiting Af
@cindex entering af
@cindex starting af 

The usual way to invoke af is with the shell command @samp{af}.  Af
clears the screen and then displays an initial help message and
copyright notice while it processes any startup files (@pxref{Startup
Files}), and then reads your incoming mailbox.  (If your mailbox is
small, you may not see the initial help message and copyright; it would
be very inconvenient for experienced users if af were to pause long
enough to let you read the message.)  When af has finished reading the
mailbox, it displays a final count of how many messages it read, and
displays the buffer containing the messages.

Some operating systems discard all type-ahead when af starts up; they
give af no way to prevent this.  Therefore, it is advisable to wait
until af clears the screen before typing your first command.

It is possible to specify folders to be visited, or details of a message
you want to send, by giving af arguments in the shell command line
(@pxref{Command Arguments}).  But you can do these things from within af
too; whether you run af once and suspend it, or separately each time you
want to read or send mail is simply a matter of taste.

Arguments starting with @samp{-} are @dfn{options}.  Other arguments
specify addresses to send mail to.  If you specify addresses, then af
doesn't read any folders; it simply allows you to send a single mail
message to the addresses you supplied, and then exits.

You can use options to specify various other things, such as which
folders to read, the subject for mail you're sending, and so on.  A few
options support advanced usage, such as running @code{afl} functions in
batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.

@cindex initial options (command line)
@cindex action options (command line)
Most options specify how to initialise af, or set parameters for the af
session.  We call them @dfn{initial options}.  A few options specify
things to do: for example, read folders or load @code{afl} programs
(@pxref{Afl}).  These are called @dfn{action options}.  These and file
names together are called @dfn{action arguments}.  Af processes all the
action arguments in the order they are written.

@menu
* Command Arguments::   The command line arguments af accepts
* Command Examples::    Examples of using command line arguments.
* Environment::         Environment variables that af uses.
@end menu

@node Command Arguments
@section Command Line Arguments

Here is a table of the arguments and options that af accepts:

@table @samp
@item @var{address}
Send mail to @var{address}.  @xref{Sending Mail}.  If addresses are
supplied, then many of the other arguments are disabled, since af will
not be visiting any folders.  If the standard input is not a terminal,
then af will silently send the message as requested, rather than
expecting you to edit the text of the message.

@item -E
This option has two effects.  Firstly, it makes af start up to send a
single mail message even if no addresses were given as arguments.
Secondly, it forces af to allow you to edit the text of the message
you send, even if the text is being obtained from the standard input.
This doesn't really seem very useful, but occasionally it can be
very handy in allowing you to write flexible scripts which send mail
using af.

@item -H
Force af to present the user with the headers of an outgoing message
when editing it, or to force translation of headers in mail sent from
the standard input.  In effect, it causes af's
@code{edit-initial-headers} variable to be set to @code{true} regardless
of the contents of the user's @file{.afrc} file
(@pxref{Sending Mail,Variables}).

@item -s @var{subject}
Specifies the Subject: for an outgoing message.  Only one @samp{-s}
option may be given, and it only takes effect if addresses (or the
@samp{-E} option) were given on the command line.

@item -f @var{folder}
Read @var{folder} in place of your incoming mailbox.  Multiple @samp{-f}
options may be given, in which case each folder is read into its own
buffer.  This option is ignored if addresses or the @samp{-E} option
were given.

@item -u @var{user}
Read @var{user}'s incoming mailbox in place of your own.  You must have
permissions to read @var{user}'s mailbox.  Multiple @samp{-u} options
may be given, and they may be mixed with @samp{-f} options.  This option
is ignored if addresses or the @samp{-E} option were given.

@item -F
Interpret any arguments other than options as folders to be read in,
rather than addresses to send mail to.  This can be very useful if
you want to read in a set of folders with @samp{af -F *}.

@item -w
Create enough windows to display all the folders given with the
@samp{-f}, @samp{-u} or @samp{-F} options, subject to the maximum number
of windows that will fit on the screen (usually about four on a 24-line
display).  This option is ignored if addresses or the @samp{-E} option
were given.

@item -e
Check whether there is mail in your default mailbox (or, if @samp{-f} or
@samp{-u} are given, any specified mailboxes) and then exit.  The exit
status is zero if there is mail in any of the mailboxes; one if not.
This option is ignored if addresses or the @samp{-E} option were given.

@item -z
Makes af terminate immediately with an exit status of 1 if your incoming
mailbox (or, if @samp{-f} or @samp{-u} are given, any specified folders)
is empty.  Otherwise, af will start up normally.  This option is ignored
if addresses or the @samp{-E} option were given.

@item -n
Ignore the file @file{.afrc} in the user's home directory.
@xref{Startup Files}.

@item -v
Prints the version of af and then exit.  Ignores the effect of any other
options.

@item -l @var{loadfile}
Specifies a file which should be read and executed on startup before any
buffers are created.  Used with the @samp{-n} option, this allows the
user to specify an alternate startup file, rather than the default of
@file{.afrc} in their home directory.

@item -S @var{file}
Names a file of commands in af's internal language @code{afl}.  The
commands in the file are read and executed exactly as if af had been
started up interactively and then the af command @code{load-file} had
been executed.  When all the commands in @var{file} have been executed,
or if an error is encountered in the file, then af terminates.  If the
@samp{-S} option is given, then af will not display the screen; only
messages will be printed to the standard output.  Only one @samp{-S}
option may be given, it is ignored if destinations or the @samp{-E}
option were specified.
@end table

@node Command Examples
@section Command Line Examples

Here are a few examples of af command line usage, with brief explanations.

Read two folders @file{foo} and @file{bar} into separate windows:

@example
af -f foo -f bar -w
@end example

Check if there is any mail in folders foo and bar:

@example
af -e -f foo -f bar
@end example

Send mail to @samp{fred} on the local system with subject @samp{Hi}:

@example
af -s Hi fred
@end example

Take a current directory listing, and use it as a base for some mail
to user @samp{fred@@foobar.co.uk}:

@example
ls -l | af -E fred@@foobar.co.uk
@end example

Run the afl script in file @file{script.afl} with folder @file{foobar}
as the default buffer:

@example
af -S script.afl -f foobar
@end example

@node Environment
@section Environment Variables
@cindex environment variables
@cindex environment

Af uses several @dfn{environment variables}.  An environment variable is
a string passed from the operating system to af, and the collection of
environment variables is known as the @dfn{environment}.  Environment
variable names are case sensitive and it is conventional to use upper
case letters only.

Because environment variables come from the operating system there is no
general way to set them; it depends on the operating system and
especially the shell that you are using.  For example, here's how to set
the environment variable @code{ORGANIZATION} to @samp{Utter Chaos}
using bash:
@example
export ORGANIZATION="Utter Chaos"
@end example

@noindent
and here's how to do it in csh or tcsh:
@example
setenv ORGANIZATION "Utter Chaos"
@end example

It should be noted that the environment variables are used to
@emph{customise} af, not to configure it.  None of these variables
are required; and af should work correctly without them.  They
simply serve to tailor af to your taste.

Here is a list of the environment variables af uses, with a brief
description of what they are used for.

@table @code
@item MAIL
The full path to your incoming mailbox.
@item HOME
Your home directory.
@item FOLDER
The directory where your mail folders are stored.  Defaults to
@file{~/Mail}.
@item SAVEDIR
The directory where your news folders are stored.  Defaults to
@file{~/News}.
@item TMPDIR
The directory where temporary files should be created.
@item VISUAL, EDITOR
The editor to use for editing outgoing mail (or messages if you choose
to edit them).  @code{VISUAL} overrides @code{EDITOR} if they are set
to different values.
@item PAGER
The program to use when you ask af to display a message via an external
pager.
@item NAME
Your real name.  Used for generating the headers on the messages you
send.
@item ORGANIZATION
your organisational affiliation.  If set, af will generate an
Organization: header on the messages you send.
@end table

@node Exiting, Basics, Entering Af, Top
@section Exiting af
@cindex exiting
@cindex killing af
@cindex suspending
@cindex leaving af
@cindex quitting af

There are two commands for exiting af because there are two kinds of
exiting: @dfn{suspending} af and @dfn{killing} af.

@dfn{Suspending} means stopping af temporarily and returning control to
its parent process (usually a shell), allowing you to resume reading
mail later in the same af job, with the same buffers, same kill ring,
and so on.

@dfn{Killing} af means destroying the af job.  You can run af again
later, but you will get a fresh af; there is no way to resume
the same mail reading session after it has been killed.

@table @kbd
@item C-z
Suspend af (@code{suspend-af})
@item C-x C-c
Kill af (@code{save-buffers-kill-af}).
@item M-z
Kill af, automatically saving any changed buffers
(@code{save-all-kill-af}).
@end table

@kindex C-z
@findex suspend-af
To suspend af, type @kbd{C-z} (@code{suspend-af}).  This takes you back
to the shell from which you invoked af.  You can resume af with the
shell command @samp{%af} in most common shells.

@findex shell
On systems that do not support suspending programs, @kbd{C-z} starts an
inferior shell that communicates directly with the terminal
(@code{shell}).  Af waits until you exit the inferior shell.  (The way
to do that is probably with @kbd{C-d} or @samp{exit}, but it depends on
which shell you use).  The only way on these systems to get back to the
shell from which af was run (to log out, for example) is to kill af.

@kindex C-x C-c
@findex save-buffers-kill-af
To kill af, type @kbd{C-x C-c} (@code{save-buffers-kill-af}).  A
two-character key is used for this to make it harder to type.  This
command first offers to save any modified file-visiting buffers.  If you
do not save them all, it asks for confirmation with @kbd{yes} before
killing af, since any changes not saved will be lost forever.

@kindex M-z
@findex save-all-kill-af
To kill af, saving all modified file-visiting buffers, type @kbd{M-z}
(@code{save-all-kill-af}).  We don't recommend using this, since you
might accidentally save changes you didn't mean to, but you can use
@kbd{M-z} to exit if you prefer.

The operating system usually listens for certain special characters
whose meaning is to kill or suspend the program you are running.
@b{This operating system feature is turned off while you are in af.}
The meanings of @kbd{C-z} and @kbd{C-x C-c} as keys in af were inspired
by the use of @kbd{C-z} and @kbd{C-c} on several operating systems as
the characters for stopping or killing a program, but that is their only
relationship with the operating system.  You can customise these keys to
run any commands of your choice (@pxref{Key Bindings}).

@c $Id: concepts.texi,v 1.5 1997/03/05 21:20:14 malc Exp $
