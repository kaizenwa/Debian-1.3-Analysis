# Af.help - Help file for af.
# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997 Malc Arnold, Kay Dekker.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
#
#
##############################################################################
# RCS Info
#
# $Id: af.help,v 1.57 1997/05/06 16:15:02 malc Exp $
#
##############################################################################

:af	copying
Af is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option)
any later version.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

:af	warranty
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

:af	help
You have typed C-h, the help character.  Type a Help option:

C-a		- Help for all Aliases
C-c		- Help for Copying terms of af
C-d		- Help for all af's commands
C-f		- Help for all af's Functions
C-h		- Show this list and prompt for more input
C-k		- Help for all named Keyboard macros
C-v		- Help for all af's Variables
C-w		- Help for Warranty information for af
a		- Help for commands and variables Apropos a string
b		- Help for current key-Bindings
c		- Help for Command or Macro bound to a key sequence
d or f		- Help for a command, Function or macro's Description
h		- Show this list and prompt for more input
i		- Help with the af user manual in Info format
j		- Help for the current buffer's Major mode
k		- Help for command or macro bound to a Key sequence
l		- Help for the Last 100 characters typed
m		- Help for a Mode's description
n		- Help for any News about af
v		- Help for a Variable's description

:af	news
This version of af is a beta release, not a production release.  It
is currently being beta-tested but there may well be more bugs left.
Therefore a degree of caution is certainly a good idea.  Please make
sure that anyone you give this version to is aware that it is a beta
release.

Please feel free to mail any comments you have on af to the development
team, whether they be bug reports, comments on the interface, or new
features you would like to see added.  You can reach us at:

	af-bug@csv.warwick.ac.uk

There is also a mailing list for af users, intended for announcements of
new features, discussions of af and so on.  To subscribe, send mail to
"majordomo@csv.warwick.ac.uk".  The body of the message should consist
of the single line "subscribe af-user".  You should receive a message
confirming that you've joined the list.


User-visible changes in Version 1.99

The "system" afl function, which returns the output of a shell
command, has been added.  This allows a lot more flexibility
in startup files.

The "domain" variable has been added; allowing you to change the
default domain for outgoing mail.  This can be useful if your
system does site hiding.

Af now has a new regular expression package, which is upwardly
compatible with POSIX regular expression formats.  This means
that several new features have been added to regular expressions,
and the speed of searches has also improved.  See the af user
manual for full details of the new regular expression format.

Several frequently-used commands have been bound to non-control keys
in mail and typeout modes, to make af more convenient for people who
aren't emacs users.

The '-F' command line option has been added, specifying that all the
non-option arguments should be interpreted as folders to load, rather
than addresses to send mail to.

The af help topic commands have been removed, and replaced with the
"info" command (C-h i), which lets you browse the af manual.

When you save a buffer which contains deleted messages, the deleted
messages are now killed (NOT deleted) after the save completes.

Conflicts between the echo area and minibuffer have been cleaned up.
Echo area messages now disappear after a short time, revealing the
minibuffer.

The minibuffer completion commands now list the possible completions
if they fail to complete twice in succession.

The "kbd-macro-query" command has been updated to be compatible with
Emacs 19, so the keys you can choose from are different.

The minibuffer history now splits history entries by the context of
what type of argument you were entering.

Minibuffer mark handling has been simplified.  The mark is no longer
preserved when you move between history entries, or between different
uses of the minibuffer.  I think this should reduce confusion.

The "keyboard-quit" command (C-g) no longer quits from the minibuffer
if a partial command had been typed.  This makes the "typeout-quit"
command redundant, so it has been removed.  The typeout interface
has not changed, it is just achieved differently.

If you have ispell installed on your system, you will now get a "Check
spelling" option when you're prompted what to do with an outgoing mail
message.

The variables "headers-not-displayed", "headers-to-copy", "load-path",
and "viewable-charsets" are now lists as far as afl is concerned,
rather than colon-delimited strings.  More apologies if this breaks
your startup file (again).

The comment delimiter in alias files has changed to semicolon ';' to
match with the delimiter in afl scripts.  This probably should have
been done in 1.97 but got overlooked; sorry.

The %* escape in format strings is now two characters long; allowing
for values of '%*' or '%+' when you have a modified read-only buffer.

Af finally converts time-zones correctly.  Formerly, it would reverse
the sign on named time zones.  Oops.

Af has been made considerably more robust when faced with control
characters in headers.  It also manages to deal correctly with CRLF
line breaks in message headers.


User-visible changes in Version 1.98

Af can now be configured at compile-time to allow outgoing mail to be
submitted directly to an SMTP server.  In this case, the new variable
"smtp-posting-host" (which has a compile-time default) gives the name
of the default host to connect to for SMTP delivery.

You can now configure af at compile-time to handle remote folders via
the POP3 protocol.  If you read in a POP3 folder directly, then you
are limited to the mail-handling facilities found in more traditional
mailers (no message kill or yank, inserting files, or such).  This is
because the POP3 protocol gives you all the facilities a traditional
mailer could want, which if fine for them, but brain-damaged by af's
lights.  If you use POP3 folders a lot, I recommend you check out the
"pending-folder" variable.  POP3 folders are referenced as a filename
in the form :[user@]host.  So ":thing" will attempt to read a folder
from host "thing" with your own login name.  ":malc@thing" will try
to read malc's POP3 mailbox on thing.

Af now handles both Unix- and MMDF-format mailboxes and folders,
checking the type of a folder when it is read or written.  Handy
for those of us who have to deal with a mixed environment.

Af now handles content-length properly when compiled with the correct
options.  This should avoid problems for anyone unlucky enough to have
to deal with SYSVr4 machines where the Content-Length header is used.

Af now deals more gracefully with addresses in the form user@host (Name).

References: headers can now be changed in outgoing mail, although they
don't appear in the buffer for editing.  This is useful when af is used
to send a reply from a news-reader.

The "typeout-quit" command is now bound to C-g in Typeout mode, rather
than q,  restoring the consistency of the af bindings.  Apologies if
this causes any distress.

You can now quote any file names which are special to af by prepending
a backslash to the filename.  So the file "\+foo" expands to the file
"+foo" in the current directory.

Minor bugs in saving messages and folders, writing configuration files,
and the header parsing, have been fixed.


User-visible changes in Version 1.97

The "initial-buffer-sort" variable has been added, so you can now sort
buffers into your favourite ordering as you read them.

The "news-folder" variable has been added, controlling the expansion
of the new '=' prefix.

The "not-modified" command (ESC ~) now takes an argument.  With an
argument it makes the buffer modified.  This is GNU emacs compatible.

Redrawing has been made generally lazier (and hence faster), and the
screen is no longer updated when running a script or macro.  When af
is given the -S flag to run a script, it runs "silently", producing
only error messages as output.

Meta characters are now handled better in af, so that if you have a
keyboard with a meta key on, you can insert meta characters directly
into the minibuffer by using it.

The "define-kbd-macro" and "define-key" commands have been deleted,
and replaced with afl functions of the same name.  There really
isn't much point in leaving these as commands since they were only
designed for use in load files anyway.

The old load (and startup) file format has been replaced with a much
more flexible lisp-like language, "afl" for "af language"; it doesn't
really qualify as a lisp.  This language is binary-clean (so you can
define macros in startup files), and allows decent error checking and
reporting while loading files.

While the new load files are far more powerful than the old ones, and
have vastly more potential for enhancement, they are also entirely
(and gratuitously) incompatible with the old-format startup files.
Sorry about that, but I had to do it some time.


User-visible changes in Version 1.96

The "tag-thread" command has been added.  This is probably quite
useful for people who receive high-traffic mailing lists.


User-visible changes in Version 1.95

Keyboard macros have now been added.  The usual emacs features for
defining keyboard macros are now available, including kbd-macro-query.
Macros may be named, and after you name them they may be bound to keys
just like any other command.  The command "define-kbd-macro" is not
much use interactively, but is useful for reading macros from startup
files.  The "write-configuration" command now saves all named macros
to the file.

The default bindings for the "save-message", "save-region", and
"save-tagset" commands has changed, since the old ones conflicted
with the standard emacs macro bindings.  The save commands are
now bound to M-+, C-x +, and C-t + respectively.  Apologies to
anyone this inconveniences.


User-visible changes in Version 1.94.

Typeout is now a major mode, like the minibuffer.  This adds a lot
of new functionality, as well as making typeout configurable.  You
can now scroll backwards, move to the start or end of typeout, set
the mark, or search for a pattern in the text.

Redrawing in mail buffers has been simplified, and made more like
GNU Emacs.

Changing the "viewable-charsets" variable now resets the Mime flag
on text messages to match the new list of charsets.  In addition,
typeout will now correctly display 8-bit character sets, assuming
that your display can.

The "next-screen-context-lines" variable has been added, effective
both in mail buffers and in typeout.

Af now shows an introductory message on startup, and a summary of
the message before sending mail.

The minibuffer can now handle metacharacters properly, and the
"quoted-insert" command will now interpret a numeric sequence as
the octal value of the character to insert.  I don't see much use
for this as yet, but it may occasionally be useful.

Dates are now displayed as "03 Jan 1994", which looks better in
format strings than " 3 Jan 1994".

"Narrow-to-tagset" is now bound to C-t n not C-t C-n, which is where
it should have been all along.

Bugs causing crashes when killing in a narrowed buffer or editing
the first message in a buffer have been fixed.

Af now reports read errors encountered while reading folders (oops).

A problem in filename completion when the '~' or '%' prefixes are
used has been fixed.

The format of the af news has been changed.


User-visible changes in version 1.93.

Af's mode and keymap handling has been drastically revised.  There
is now a Mail mode, which binds keys active in mail buffers, and the
global keymaps only bind commands common to both Mail buffers and the
minibuffer.  In addition, prefixes are fixed to behave like they do
in emacs, scanning both global and local prefix keymaps if available.
Sadly, this change will break startup files generated by af.  A
global-replace of fundamental with mail should cure the problem.

The "edit-message" command now updates the message in place.

The "preface-inclusions" variable has been replaced by "copy-prefix",
the "signature-separator" variable added, and the "reply-subject-prefix"
variable removed.

The "load" command has been renamed to "load-file", and the
"load-library" command added, along with a "load-path" variable.

The "read-pending-file" command has been added, allowing you to make a
buffer pending on a file, similar to the effect of the "pending-folder"
variable.

The commands "local-set-key", "local-unset-key" and "describe-major-
mode" (C-h j) have been added.

Several minor bugs have been fixed.


User-visible changes in version 1.92.

C-g is now always acceptable as a response to a prompt for confirmation,
and always aborts the entire command.  The "quit-char" variable has been
added to support this.

When sending mail and all the headers are in the file being edited,
then deleting a header line will unset that header.

The semantics of the argument for opening, paging, piping, and
printing messages have changed, see the help topic "arguments" for
a full explanation.

"Transpose-chars" now acts exactly as is does in emacs, and handles
an argument properly.

The variables "header-line-arrow", "headers-to-copy", "reply-subject-
prefix", and "pending-folder" have been added.

afrc.vm and afrc.pine have been added to the set of af libraries.


User-visible changes in version 1.91.

The "preserve-cc-in-group-reply" variable has been added.

Multimedia support has been added via MIME and metamail.  The MIME
support isn't very well integrated as yet, mostly because metamail
doesn't cope with af's more advanced features very well.


User-visible changes in version 1.90.

Argument handling added.  Several commands have been replaced by an
argument to another command (eg save-message-body is now save-message
with an argument).  The control-t-prefix keymap has also been added,
to handle tag-related commands.

:af	startup
Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996 Malc Arnold.
Type C-h for help; C-x C-c to exit. ('C-' means use the CTRL key).

Af comes with ABSOLUTELY NO WARRANTY; type C-h C-w for full details.
You may give out copies of af; type C-h C-c to see the conditions.
Type C-h i to access the complete af documentation.

:command	af-version
(af-version)

Prints the version of af and the release date in the echo area.

:command	apropos
(apropos "regex" &optional "filename")

Prompts for a regular expression and searches for commands, functions,
variables, and keyboard macros, typing-out any whose names match the
expression.  The comparison is case-insensitive.  If an argument is
given, then af prompts for a file name, and the output is appended to
that file.

:command	backward-char
(backward-char &optional count)

Moves the cursor one character backwards, or a number of characters
specified by an argument.  A minibuffer-only command.

:command	backward-kill-word
(backward-kill-word &optional count)

Deletes from point up to the start of the word before point, or a
number of words specified by an argument, appending the text to the
history kill buffer.  A minibuffer-only command.

:command	backward-word
(backward-word &optional count)

Moves point to the beginning of the word to the left, or a number of
word specified by an argument.  A minibuffer-only command.

:command	beginning-of-buffer
(beginning-of-buffer &optional tenths)

Moves point to the first message in the current buffer.  If an
argument is given, then the argument sets how many tenths into
the buffer point should be moved to (an argument of 4 implies move
to a message 40% of the way though the buffer).  In the minibuffer,
moves point to the first history line.  Mark is set to the old
point.

:command	beginning-of-line
(beginning-of-line)

Moves point to the first character on the line.  A minibuffer-only
command.

:command	bounce-message
(bounce-message "To")

Bounces the current message to one or more users.  When mail is
bounced, Resent- headers are used, so that the message appears to
be from the original sender of the mail.

:command	call-last-kbd-macro
(call-last-kbd-macro &optional count)

Calls the last keyboard macro defined with "start-kbd-macro"
(C-x () and "end-kbd-macro" (C-x )).  Any argument is used as
a repeat count for the macro.

:command	capitalize-word
(capitalize-word &optional count)

Capitalises the first character of the word after point, or a
number of words specified by an argument, lower-casing the rest
of the word.  A minibuffer-only command.

:command	cd
(cd "directory")

Prompts for a directory and changes the current working directory
to it.  It defaults to the user's home directory.

:command	clear-echo-area
(clear-echo-area)

Clears the echo area, ie the bottom line of the screen.

:command	copy-region-as-kill
(copy-region-as-kill)

In a mail buffer, copies the messages in the region into the message
kill buffer, as if they had been killed with kill-region, but without
actually deleting the messages.  In the minibuffer, copies text in
the region into the history kill buffer, provided that mark is on the
same history line as the point.

:command	copy-tagset-as-kill
(copy-tagset-as-kill "tag-expression")

Prompts for a tag expression and then copies the messages in the
tagset into the message kill buffer, as if they had been killed
with kill-tagset, but without actually deleting the messages.

:command	delete-backward-char
(delete-backward-char &optional count)

Deletes the character to the left of point, or a number of characters
specified by an argument, and moves point leftwards that many
characters.  A minibuffer-only command.

:command	delete-char
(delete-char &optional count)

Deletes the character to the right of point, or a number of characters
specified by an argument, leaving point in the current position.
A minibuffer-only command.

:command	delete-message
(delete-message)

Marks the current message as deleted, so that when the buffer is saved
to a file, the message will not be written.  Marking as deleted does
not prevent a message being read, saved or otherwise operated on.

:command	delete-other-windows
(delete-other-windows)

Deletes all windows other than the current window, making that the
only window.

:command	delete-window
(delete-window)

Deletes the current window, making the previous window current.

:command	describe-copying
(describe-copying &optional "filename")

Displays the copying conditions relating to af.  If an argument is
given, then af prompts for a file name, and the output is appended
to that file.

:command	describe-function
(describe-function function &optional "filename")

Prompts for a command, function, or keyboard macro name, and then
types-out help for that command, function or macro.  If an argument
is given, then af prompts for a file name, and the output is appended
to that file.

:command	describe-key
(describe-key "key" &optional "filename")

Prompts for a key sequence, and, when the sequence is complete,
displays help on the command bound to it, if any.  If an argument
is given, then af prompts for a file name, and the output is
appended to that file.

:command	describe-key-briefly
(describe-key-briefly "key")

Prompts for a key sequence, and, when the sequence is complete,
reports which command is bound to it, if any.

:command	describe-major-mode
(describe-major-mode &optional "filename")

Types-out help for the major mode in effect in the current buffer.
If an argument is given, then af prompts for a file name, and the
output is appended to that file.

:command	describe-mode
(describe-mode mode &optional "filename")

Prompts for the name of a mode and types-out help for that mode.
If an argument is given, then af prompts for a file name, and the
output is appended to that file.

:command	describe-no-warranty
(describe-no-warranty &optional "filename")

Displays the warranty, or rather, lack of warranty, relating to af.
If an argument is given, then af prompts for a file name, and the
output is appended to that file.

:command	describe-variable
(describe-variable variable &optional "filename")

Prompts for the name of a variable, and types-out help for that
variable.  If an argument is given, then af prompts for a file
name, and the output is appended to that file.

:command	digit-argument
(digit-argument argument)

If bound to a numeric key adds the key it is bound to to a numeric
argument.  Then reads any digit keystrokes as part of the argument.
The next command executed will have the argument set to the value.

:command	downcase-word
(downcase-word &optional count)

Lower-cases the word after point, or a number of words specified
by an argument.  A minibuffer-only command.

:command	edit-message
(edit-message &optional argument)

Stores the current message, complete with headers, in a temporary
file, and invokes an editor (named by the "editor" variable) on
it.  Any changes the user makes will be read after the file is
edited, and the current message updated.  If the user introduces
errors into the message while editing, then the command will fail,
and the message will be unchanged.  If an argument is given, then
only the body of the message is placed into the file to be edited.

:command	end-kbd-macro
(end-kbd-macro &optional count)

Ends definition of a keyboard macro started by "start-kbd-macro"
(C-x ().  If an argument is given, then the macro is executed
that many times, counting the definition as the first execution.

It should be noted that at the moment this command won't work
properly if it is called via "execute-extended-command".  In this
case, the keys to execute this command will become part of the
macro.  I hope that this will not tend to cause problems.

:command	end-of-buffer
(end-of-buffer &optional tenths)

Moves point to the last message in the current buffer.  If an
argument is given, then the argument sets how many tenths from
the end of the buffer point should be moved to (an argument of
4 implies move to a message 60% of the way though the buffer).
In the minibuffer, moves point to the first history line.
Mark is set to the old point.

:command	end-of-line
(end-of-line)

Moves point to the end of the line.  A minibuffer-only command.

:command	enlarge-window
(enlarge-window &optional count)

Makes the current window one line larger, or a number of lines
given by any argument.  The line is taken from the previous
window, except for the top window on the screen, which must
expand downwards rather than upwards.

:command	exchange-point-and-mark
(exchange-point-and-mark)

Swaps the position of point and mark in the buffer.  In the minibuffer
this can cause a new history line to be selected.

:command	execute-extended-command
(execute-extended-command)

Allows the user to execute any af command which is applicable to
the current major mode by name.

:command	explode-digest
(explode-digest)

Expands any digest entries in the current message, inserting them
into the buffer after point, so that each digest entry becomes
a separate message.  Reports an error if the current message
isn't recognisably a digest.

:command	find-alternate-file
(find-alternate-file "filename")

Prompts for a filename and reads the file (just like find-file),
replacing the current buffer with the new one if the read succeeds.

:command	find-file
(find-file "filename")

Prompts for a filename, then creates a new buffer, reading the
specified file into it as a folder.  If the file was already in a
buffer, the old buffer is displayed instead.  If errors occur, no
new buffer is created.

:command	find-file-other-window
(find-file-other-window "filename")

Reads a file, like find-file, but it is read into the "other" window
(which is created, if necessary), rather than the current window.

:command	find-file-read-only
(find-file-read-only "filename")

Reads a file, like find-file, but Read-Only mode is set on the
buffer after the file is read.

:command	forward-char
(forward-char &optional count)

Moves point one character to the right, or a number of characters
specified by an argument.  A minibuffer-only command.

:command	forward-message
(forward-message "To")

Forwards the current message to one or more users.  The forwarded
message's body lines are each prefixed with the contents of the
"copy-prefix" variable.  The message is presented for editing, and,
when editing is finished, sent to the new destination.  Forwarded
mail appears to come from the forwarder, rather than from the
original sender.  Compare the "bounce-message" command.

:command	forward-word
(forward-word &optional count)

Moves point to the end of the next word, or a number of words
specified by an argument.  A minibuffer-only command.

:command	global-set-key
(global-set-key "key" command | keymap | macro | nil)

Prompts for a key sequence and a command to bind to the key sequence,
so that presses of the key sequence invoke the command.  For example,
after the command "ESC x global-set-key k previous-line", the 'k'
key will thereafter run the command "previous-line".  Unless later
rebound, an upper-case key will have the same behaviour as that
key in lower-case.  Thus, after the example command, the 'K' key
would also run the "previous-line" command, until it is itself
specifically bound to some other command.

:command	global-unset-key
(global-unset-key "key")

Prompts for a key sequence, removing any binding of that key.

:command	goto-line
(goto-line line-number)

If an argument is given, moves point to that line of the current
buffer, or the beginning or end of the buffer if the line number
is too small or too large.  Negative arguments are taken as offsets
from the end of the buffer.  Without an argument, prompts for a line
number, and moves point in the same way.  If bound to a key sequence
ending in a digit, the digit is placed in the minibuffer as part of
the line to move to when prompting.

:command	group-reply-to-message
(group-reply-to-message)

Replies to the "group" associated with the current message: its
originator and any recipients specified in a To: header line.
Recipients named in a Cc: header line will receive a copy of the
reply if the "preserve-cc-in-group-reply" variable is set to "true".
It is otherwise the same as "reply-to-message".

:command	help-on-help
(help-on-help)

The first time this command is run, it displays a list of the keys
that may validly follow it, and prompts for a key to interpret in
the help-command keymap.  If the command is then run again, it
types-out a brief digest of the effect of those keys, and then
returns to the prompt.

:command	info
(info)

Runs the command stored in the "info-browser" variable, which will
allow you to browse the info version of the af user manual.

:command	insert-file
(insert-file "filename")

Prompts for a filename, and then reads that file as a folder,
inserting its contents before the current message.

:command	kbd-macro-query
(kbd-macro-query)

Queries the user during macro execution.  The options are:

SPC	execute the rest of the macro.
RET	skip this repetition of the macro.
ESC	cancel the macro and don't repeat any more.
C-l	redisplay the screen and ask again.

This command cannot be run except during macro definition (when
it does nothing) or execution.

:command	keyboard-quit
(keyboard-quit)

Aborts any input, whether while scanning keymaps or in the minibuffer.
It usually results in a command being aborted.

:command	kill-buffer
(kill-buffer "buffer-name")

Prompts for a buffer name and kills that buffer, freeing any memory
used by it. If the buffer has been modified, confirmation is needed.
The last buffer cannot be killed.

:command	kill-line
(kill-line &optional count)

In a mail buffer, kills the current message, adding it to the
message kill buffer.  If an argument is given, kills that many
lines after point, or before with a negative argument.  Repeated
kills append the deleted messages to the message kill buffer, so
that blocks of messages may be copied or moved.  In the minibuffer,
kills from point to end of line, placing the text in the history
kill buffer.

:command	kill-region
(kill-region)

In a mail buffer, kills the messages in the region, adding them to
the message kill buffer.  In the minibuffer, kills text in the
region and adds it to the history kill buffer, but only if point
is on the same line as the mark.

:command	kill-some-buffers
(kill-some-buffers)

Loops through the available mail buffers, asking if each is to be
killed.

:command	kill-tagset
(kill-tagset "tag-expression")

Prompts for a tag expression and then kills the messages in the
tagset, adding them to the the message kill buffer.

:command	kill-word
(kill-word &optional count)

Kills from point to the end of the next word, or a number of
words specified by an argument, and adds the text to the
history kill buffer.  A minibuffer-only command.

:command	list-aliases
(list-aliases &optional "filename")

Types-out a list of all aliases and the addresses associated with
them.  If an argument is given, then af prompts for a file name,
and the output is appended to that file.

:command	list-bindings
(list-bindings &optional "filename")

Types-out a list of all bound keys and the commands bound to them.
Keys bound only in the minibuffer are listed separately from global
bindings.  If an argument is given, then af prompts for a file name,
and the output is appended to that file.

:command	list-buffers
(list-buffers &optional "filename")

Types-out a list of all buffers, showing the number of messages in
each, whether they have been modified, and which folder (if any)
they contain.  If an argument is given, then af prompts for a file
name, and the output is appended to that file.

:command	list-commands
(list-commands &optional "filename")

Types-out a list of all commands and any key sequences they are
bound to.  Minibuffer bindings are shown in parentheses.  If an
argument is given, then af prompts for a file name, and the
output is appended to that file.

:command	list-functions
(list-functions &optional "filename")

Types-out a list of all afl functions.  If an argument is given,
then af prompts for a file name, and the output is appended to that
file.

:command	list-kbd-macros
(list-kbd-macros &optional "filename")

Types-out a list of named keyboard macros and their definitions.
If an argument is given, then af prompts for a file name, and
the output is appended to that file.

:command	list-keymaps
(list-keymaps &optional "filename")

Types-out a list of keymaps and any key sequences they are bound
to.  If an argument is given, then af prompts for a file name,
and the output is appended to that file.

:command	list-minibuffer-history
(list-minibuffer-history &optional "filename")

Types-out the minibuffer history, one entry per line.  If an
argument is given, then af prompts for a file name, and the
output is appended to that file.

:command	list-variables
(list-variables &optional "filename")

Types-out a list of variables and their values.  If an argument
is given, then af prompts for a file name, and the output is
appended to that file.

:command	load-file
(load-file "filename")

Prompts for a file name.  The file, which should contain afl
forms, is read, and the forms it contains are evaluated.  If
any form in the file is invalid, or produces an error, then
the evaluation of the files contents halts.

See the af user manual for details of the afl language.

:command	load-library
(load-library "filename")

Prompts for a file name.  The directories listed in the "load-path"
variable are searched, and if the file is found then the afl forms
it contains are evaluated.  See also the load-file command.

:command	local-set-key
(local-set-key "key" command | keymap | macro | nil)

Similar to global-set-key, but binds the command in the currently
active major mode (Mail, Minibuffer or Typeout), rather than the
global keymaps.  The command must be usable in the current major
mode.

:command	local-unset-key
(local-unset-key "key")

Similar to global-unset-key, but removes any binding of the key in
the current major mode (Mail, Minibuffer or Typeout).

:command	make-keymap
(make-keymap keymap)

Prompts for a name and creates an empty keymap with that name.  It
will fail if there is already such a keymap.

:command	message-info
(message-info)

Shows information about the current message: the date it was sent,
how many lines it contains, whether it is New or Old and unread,
and whether it has been Replied to, Forwarded, Saved, or Printed.

:command	message-tags
(message-tags)

Displays the the tags of the current message in the echo area.
Useful if there are more tags than can be displayed.

:command	minibuffer-complete
(minibuffer-complete)

Performs minibuffer completion: if executed when the name of an af
object (file, command, buffer, variable, mode, or keymap) is being
entered in the minibuffer, the text entered so far will be completed
as much as possible.  A minibuffer-only command.

:command	minibuffer-complete-and-exit
(minibuffer-complete-and-exit)

Completes the text in the minibuffer in one of three ways, depending
on the type of text being entered.

If the text is the name of an object of a bounded type, such as a
variable or buffer name, the text is completed as far as possible.
If the completed text is unambiguous, it is accepted; if not, af
beeps and waits for more text to be typed.

If the text is the name of an object of a constrained type, (such
as a file to be read with 'load-file', which must exist), only
completion will be performed: minibuffer-complete-and-exit will
only accept the text if it is already complete.

If the text is the name of an object of an unconstrained type, such
as a file for use as a folder, it will not be completed, but accepted
as it stands, similarly to the 'newline' command.

A minibuffer-only command.

:command	minibuffer-complete-word
(minibuffer-complete-word)

Similar to minibuffer-complete, except that the text will be completed
only up to the end of the next word.  A minibuffer-only command.

:command	minibuffer-list-completions
(minibuffer-list-completions)

If completion is possible, types-out all completions of the text
in the minibuffer.  A minibuffer-only command.

:command	minibuffer-set-key
(minibuffer-set-key "key" command | keymap | macro | nil)

Similar to global-set-key, but binds the command (which must be
usable in the minibuffer) to the key in the minibuffer only, rather
than in the global bindings.

:command	minibuffer-unset-key
(minibuffer-unset-key "key")

Similar to global-unset-key, but removes any binding of the key in
the minibuffer.

:command	move-to-window-line
(move-to-window-line line-number)

Without an argument, moves point to the centre line in the window.
With a positive argument, moves point to that line from the top of
the window (counting the first line as line 0).  With a negative
argument moves point that many lines from the last line in the
window.

:command	name-last-kbd-macro
(name-last-kbd-macro name)

Assigns a name to the last keyboard macro defined.  The macro may
then be run using "execute-extended-command" or bound to a key.

:command	narrow-to-region
(narrow-to-region)

Makes all messages except those in the region invisible.  The
messages are not deleted, and will be written to disk if the
buffer is saved, but user commands act as if the messages did
not exist.  This allows a subset of messages to be selected for
operations without moving them to another buffer.

:command	narrow-to-tagset
(narrow-to-tagset "tag-expression")

Prompts for a tag expression and then makes all messages not in
the tagset defined by the expression invisible, in the same way
as narrow-to-region.

:command	negative-argument
(negative-argument argument)

Toggles the sign of the argument, setting the value to zero if no
numeric argument is being entered.  Then reads digit keystrokes as
part of the value of the argument.  The next command executed will
have the argument set to the value given.

:command	newline
(newline)

Accepts the current minibuffer contents as input.  If the minibuffer
is empty, newline signals that the command reading the minibuffer
for input should use a default value for the input if it can.
Non-empty input is added to the history list.  A minibuffer-only
command.

:command	next-line
(next-line &optional count)

In a mail buffer or typeout, moves point to the next message.  In
the minibuffer, replaces the current line with the next line of
command history, if any, losing changes made to the previous line.
If an argument is given then point (or history) moves that many
lines forwards.

:command	not-modified
(not-modified &optional argument)

Marks the current buffer as unmodified so that it does not need to
be saved.  If an argument is supplied, then marks the buffer as
modified, so that save-buffer or exiting af will save it.
Use with care.

:command	open-message
(open-message &optional argument)

Displays the current message.  A text message (one which can be
displayed as ordinary text) is filtered through the program named
in the "pager" variable.  Normally, header lines listed in the
"headers-not-displayed" variable are not sent through the filter.
If a positive argument is given then all headers will be sent
through the filter.  If a negative argument is given, then no
headers will be sent.  Non-text messages are filtered, with all
headers, through the program named in the "mime-pager" variable,
unless an argument is supplied in which case the raw form will
be displayed as if it were text.  If the "mime-pager" variable
is not set, then all messages are treated as if they were text.

:command	other-window
(other-window &optional count)

Makes the "other" window (the window below the current window, or
the uppermost window in the case of the bottom window) current.
An argument specifies the number of windows to move.  Repeated use
of this function will cycle through all the windows.

:command	page-message
(page-message &optional argument)

Displays the current message, filtering it through the program
named in the PAGER environment variable, ignoring af's "pager"
and "mime-pager" variables.  Normally, header lines listed in the
"headers-not-displayed" variable are not sent through the filter.
If a positive argument is given then all headers will be sent
through the filter.  If a negative argument is given, then only
the body of the message will be sent to the pager.

:command	pipe-message
(pipe-message "system command" &optional argument)

Prompts for the name of a system command and pipes the current
message into it, skipping headers listed in the "headers-not-
displayed" variable.  If a positive argument is given, then
all the headers are piped into the command, while a negative
argument means that only the body of the message is piped into
the command.

:command	pipe-region
(pipe-region "system-command" &optional argument)

Prompts for the name of a system command and pipes the text of the
messages in the region into it, skipping headers listed in the
"headers-not-displayed" variable.  If a positive argument is
given, then all the headers are piped into the command, while a
negative argument means that only the bodies of the messages are
piped into the command.

:command	pipe-tagset
(pipe-tagset "tag-expression" "system-command" &optional argument)

Prompts for a tag expression and the name of a system command, and
pipes the text of the messages in the tagset into the command,
skipping headers listed in the "headers-not-displayed" variable.
If a positive argument is given, then all the headers are piped
into the command, while a negative argument means that only the
bodies of the messages are piped into the command.

:command	previous-line
(previous-line &optional count)

In a mail buffer or typeout, moves point to the next line.  In
the minibuffer, calls up the previous line in the command history,
the current line is preserved while the moving through the command
history.  If an argument is given then point (or history) moves
that many lines backwards.

:command	previous-window
(previous-window &optional count)

Makes the previous window (the window above the current window, or
the bottom window in the case of the uppermost window) current.
An argument specifies the number of windows to move.  Repeated use
of this function will cycle through all the windows.

:command	print-message
(print-message &optional argument)

Sends the current message to the program named in the "print-command"
variable, skipping headers listed in the "headers-not-displayed"
variable.  If a positive argument is given, then all the headers
are printed, while a negative argument means that only the body of
the message is printed.  If the variable "confirm-print" is set,
confirmation is asked for.  If the message is not text, the program
named in the "mime-printer" variable is used to print it with all
its headers.

:command	print-region
(print-region &optional argument)

Sends the messages in the region to the program named in the "print-
command" variable, skipping headers listed in the "headers-not-
displayed" variable.  If a positive argument is given, then all
the headers are printed, while a negative argument means that only
the bodies of the messages are printed.  If the variable "confirm-
print" is set, confirmation is asked for.  If any message is not
text, the program named in the "mime-printer" variable is used to
print it with all its headers.

:command	print-tagset
(print-tagset "tag-expression" &optional argument)

Prompts for a tag expression and then sends the messages in the
tagset to the program named in the "print-command" variable,
skipping headers listed in the "headers-not-displayed" variable.
If a positive argument is given, then all the headers are
printed, while a negative argument means that only the bodies of
the messages are printed.  If the variable "confirm-print" is set,
confirmation is asked for.  If any message is not text, the
program named in the "mime-printer" variable is used to print it
with all its headers.

:command	pwd
(pwd)

Reports the current working directory.

:command	quoted-insert
(quoted-insert character)

Reads a key, inserting it into the minibuffer regardless of its
ASCII value, except that the null character may not be inserted.
If the quoted character is numeric, then up to three digits will
be read, and interpreted as the octal value of the character to
insert.  An argument specifies how many times to insert the
character.  A minibuffer-only command.

:command	read-pending-file
(read-pending-file "filename")

Prompts for a file name, and then appends the contents of the
file to the current buffer.  In addition, it makes the buffer
"pending" on the specified file.  Pending buffers are considered
to contain both the read file and the pending file, so resync-
buffer will check the pending file for new messages as well as
the original file.  When the buffer is saved to disk, the contents
of the pending file are deleted.  See also the "pending-folder"
variable.  The command will if the buffer is already pending on
a file, or the named file is held in a buffer already.

:command	recenter
(recenter &optional argument)

Redraws the current window, positioning the current line as near
to the centre of the window as possible.  If an argument is given
then the whole screen is forcibly redrawn.

:command	remove-tags
(remove-tags "tag-list")

Prompts for a list of tags, and then removes the specified tags
from all the messages in the current buffer.

:command	reply-to-message
(reply-to-message)

Replies to the current message.  The user is given the option of
copying the body of the message into the reply, depending on the
value of the "copy-on-reply" variable.  If the body is copied in,
its lines are each prefixed with the contents of the "copy-prefix"
variable.  The text of the reply is presented for editing, and,
when editing is finished, sent to the sender of the original message.

:command	resync-buffer
(resync-buffer)

Checks if new mail has arrived in the folder corresponding to the
current buffer.  Any new mail is read in and appended to the buffer.

:command	revert-buffer
(revert-buffer)

If the current buffer has been modified, asks for confirmation,
and, if given, reads the folder corresponding to it back in,
effectively scrapping any changes to the buffer since the folder
was last modified.

:command	save-all-buffers
(save-all-buffers)

Writes all modified buffers with corresponding folders to disk
exactly as with the "save-buffer" command.

:command	save-all-kill-af
(save-all-kill-af)

Updates the modified buffers to disk and then exits af.  If new
mail has arrived in any folder, then the user is alerted to this,
the new mail is read into its buffer, and af does not terminate.

:command	save-buffer
(save-buffer)

Writes a buffer back to the folder from which it was read.  If new
mail has arrived in the folder, the buffer is resynchronised and
no save is performed.  If the buffer does not correspond to a
folder, the user is prompted for a filename to save the buffer to,
as in the "write-buffer" command.

:command	save-buffers-kill-af
(save-buffers-kill-af)

Saves active buffers, as in the "save-some-buffers" command.  If
no modified and unwritten buffers then remain, af terminates
normally, otherwise the user will be asked whether to exit with
modified files outstanding.

:command	save-message
(save-message "filename" &optional argument)

Prompts for a file name and appends the current message with headers
to the file.  The file name defaults to the local-part of the sender's
mail address.  If an argument is given, then only the body of the
message is appended to the file, and if the message is not text,
the message is sent to the program named in the "mime-saver" variable
to be decoded and saved.

:command	save-region
(save-region "filename" &optional argument)

Prompts for a file name and appends the text of the messages in the
region to the file, complete with headers.  The file name defaults
to the local-part of the first message's sender's mail address.  If
an argument is given, then only the bodies of the messages are
appended to the file, and if any messages are not text, they are
sent to the program named in the "mime-saver" variable to be
decoded and saved.

:command	save-some-buffers
(save-some-buffers)

Loops through all mail buffers, asking whether each modified buffer
should be saved.  If no buffers need saving, this is reported.

:command	save-tagset
(save-tagset "tag-expression" "filename" &optional argument)

Prompts for a tag expression and a file name, and appends the text
of the messages in the tagset to the file, complete with headers.
The file name defaults to the local-part of the first message's
sender's mail address.  If an argument is given, then only the
bodies of the messages are appended to the file, and if any messages
are not text, they are sent to the program named in the "mime-saver"
variable to be decoded and saved.

:command	scroll-down
(scroll-down &optional count)

Scrolls the screen downwards so that the first few lines on the screen
(as specified by the "next-screen-context-lines" variable) are at the
bottom of the screen, and moves point to the bottom of the screen.  If
an argument is given, then scrolls down that many lines instead.

:command	scroll-other-window
(scroll-other-window &optional count)

Like "scroll-up", but scrolls the "other" window.    If an argument is
given, then scrolls down that many lines instead.

:command	scroll-up
(scroll-up &optional count)

Scrolls the screen upwards so that the last few lines on the screen
(as specified by the "next-screen-context-lines" variable) are at the
top of the screen, and moves point to the top of the screen.  If an
argument is given, then scrolls up that many lines instead.

:command	search-and-tag
(search-and-tag "regex" "tag-list" &optional argument)

Prompts for a regular expression and a tag list, then loops over the
messages in the buffer, setting the tags on those which match the
expression.  If an argument is given, then only the headers of the
messages are searched for the expression.

:command	search-backward
(search-backward "regex" &optional argument)

In a mail buffer, prompts for a regular expression and then searches
the messages before point until either the beginning of the buffer
is reached (an error), or a message matches the expression, in which
case point is moved to that message.  If an argument is given, then
only the headers of the messages are searched for the expression.

In typeout, prompts for a regular expression and then searches the
text before point until either the beginning of the buffer is reached
(an error), or a line matches the expression, in which case point is
moved to that line.

In the minibuffer, searches backward through the minibuffer history
from the current history line until a line is found which starts
with the text to the left of the cursor on the current line being
entered, and then makes that line current.  The cursor remains at
the same column, so that repeating the command will repeat the
same search.  If no matching line is found, then there is no effect.

:command	search-forward
(search-forward "regex" &optional argument)

In a mail buffer, prompts for a regular expression and then searches
the messages after point until either the end of the buffer is
reached (an error), or a message matches the expression, in which
case point is moved to that message.  If an argument is given, then
only the headers of the messages are searched for the expression.

In typeout, prompts for a regular expression and then searches the
text after point until either the end of the buffer is reached (an
error), or a line matches the expression, in which case point is
moved to that line.

In the minibuffer, searches forward through the minibuffer history
from the current history line until a line is found which starts
with the text to the left of the cursor on the current line being
entered, and then makes that line current.  The cursor remains at
the same column, so that repeating the command will repeat the
same search.  If no matching line is found, then there is no effect.

:command	self-insert-command
(self-insert-command character)

Causes the key to which it is bound to be inserted at point.  If
bound to a key sequence, only the last key of the sequence is
inserted.  An argument specifies how many times to insert the
character.  A minibuffer-only command.

:command	send-mail
(send-mail "To")

Sends mail to specified users.  The user is prompted for destinations
and the subject of the message, and the editor (see the "editor"
variable) is invoked to compose the message body.  When the editor
is exited, the message "Send, Edit, List or Forget" appears.
Pressing 'S' causes the mail to be sent; 'F' causes the mail to be
discarded; 'L' causes the mail to be typed-out.

If the message is re-edited, the message headers, the message body,
and any signature, become available for editing.  If any headers
are edited, they are re-translated, validated, and expanded as
appropriate.  Lines which look like a mail header that have been
inserted into or appended to the message headers will also be
translated, validated and expanded.

NB: If invalid header lines are inserted into the message headers
during editing, any headers after such lines will be treated as
part of the message body, and not retranslated.  Caution should be
observed.

:command	set-alias
(set-alias "alias" "name" "addresses")

Sets an alias for the current message's sender.  It prompts for
the alias name, asking for confirmation if that alias already
exists.  It then prompts for the "real name" corresponding to the
alias, which defaults to the real name of the sender of the current
message.  It finally prompts for the address (or list of addresses)
to which the alias should expand, which defaults to the address of
the sender of the current message.  The alias data is then added
to the internal list of aliases, and appended to the user's .afalias
file.  If an existing alias is redefined, the original .afalias
entry is not deleted, but merely superseded by the new entry.

:command	set-mark-command
(set-mark-command)

Sets the mark in the current window at point.

:command	set-variable
(set-variable variable value)

Sets a variable's value.  The command prompts for a variable name
and the value to which it is to be set.  Validation is performed.

:command	shell
(shell)

Spawns a new instance of the system's command interpreter (or an
interpreter named by the SHELL environment variable), and hands
control to it.  When the interpreter terminates, af continues.

:command	shell-command
(shell-command "system command")

Prompts for the name of a system command, and then executes it.
Af waits for the command to complete, and for the user then to
press a key indicating that af should resume.

:command	shell-command-to-typeout
(shell-command-to-typeout "system-command")

Prompts for the name of a system command, and then executes it,
sending any output to typeout.  Af waits for the command to complete,
and for the user then to press a key indicating that af should
resume.  Note that interactive commands cannot be executed in this
fashion.

:command	shrink-window
(shrink-window &optional count)

Makes the current window smaller by one line, or as many lines as given
by an argument, giving the lines to the previous window, except for the
top window on the screen, which shrinks upwards rather than downwards.

:command	sort-buffer
(sort-buffer "sort-type")

Prompts for a sort type and sorts the messages in the current
buffer into order as given by the sort type.  See the af user
manual for more details on sort types.

:command	sort-region
(sort-region "sort-type")

Prompts for a sort type and sorts the messages in the region into
order as given by the sort type.  The af user manual for more details
on sort types.

:command	sort-tagset
(sort-tagset "tag-expression" "sort-type")

Prompts for a tag expression and a sort type, and then sorts the
messages in the defined tagset in place.  Only the messages in
the tagset are moved, others are not effected.  This command is
equivalent to narrowing the buffer to the tagset and then sorting.
See the af user manual for more details on sort types.

:command	split-window-vertically
(split-window-vertically &optional argument)

Divides the current window in two, making the lower half into a
new window, which becomes the "other" window for the original
window.  An argument specifies the number of lines in the new
window, or the new size of the old window if negative.  It fails
if the window is too small to be divided.

:command	start-kbd-macro
(start-kbd-macro &optional argument)

Records subsequent keyboard input, defining a keyboard macro.
The keystrokes are recorded even as they are executed.  If an
argument is given, then the keystrokes are appended to the last
macro defined, beginning by re-executing that macro as if you
had typed it again.  Use "end-kbd-macro" (C-x )) to finish the
recording and make the macro available.

:command	suspend-af
(suspend-af)

Suspends af and returns control to the command interpreter which
started af.  It only works on systems that support job-control.
Af cannot be restarted in the background, and attempts to do so
will result in af re-suspending.

:command	switch-to-buffer
(switch-to-buffer "buffer-name")

Prompts for a buffer name and makes that buffer current in the
active window.  If the buffer does not exist, it is created, empty,
with no associated file.

:command	switch-to-buffer-other-window
(switch-to-buffer-other-window "buffer-name")

Creates, or makes current, a named buffer in the "other" window
(which is created if required).

:command	tag-message
(tag-message "tag-list")

Prompts for a list of tags and applies them to the current message.

:command	tag-search-backward
(tag-search-backward "tag-expression")

Prompts for a tag expression and then searches the messages before
point until either the beginning of the buffer is reached (an error),
or a message matches the tag expression, in which case point is moved
to that message.

:command	tag-search-forward
(tag-search-forward "tag-expression")

Prompts for a tag expression and then searches the messages after
point until either the end of the buffer is reached (an error), or
a message matches the tag expression, in which case point is moved
to that message.

:command	tag-thread
(tag-thread "tag-list")

Prompts for a list of tags and applies them to all messages in the
buffer which are in the same thread as the current message.  A
message is in the same thread if its Message-ID is referenced by
the In-Reply-To or References headers of any message in the thread.
In other words, a thread should pick out a single conversation in
your mailbox.

Sometimes, messages which are part of a thread will not be picked
up by this command.  This is because most mailers only store a
single reference to another message (the In-Reply-To: header), and
if you don't have that specific message (for example because you
replied to someone, and didn't mail a copy to yourself) then af
will not be able to detect that the reply is part of the thread.
Threads from mailing lists, or where all the participants use af
should work fine though.

:command	toggle-read-only
(toggle-read-only)

Toggles Read-Only mode for the current buffer.

:command	transpose-chars
(transpose-chars &optional count)

Transposes the characters either side of point, or a number of
characters specified by any argument, moving point past each pair
of transposed characters.  At the end of the line, transposes the
last two characters in the line.  A minibuffer-only command.

:command	typeout-scroll-or-exit
(typeout-scroll-or-exit &optional count)

If at end of typeout, then exits typeout.  Otherwise scrolls the
screen exactly like scroll-down.

:command	typeout-set-key
(typeout-set-key "key" command | keymap | macro | nil)

Similar to global-set-key, but binds the command (which must be
usable in typeout) to the key in typeout only, rather than in the
global bindings.

:command	typeout-unset-key
(typeout-unset-key "key")

Similar to global-unset-key, but removes any binding of the key in
typeout.

:command	undelete-message
(undelete-message)

Removes any deleted flag set on the current message.

:command	universal-argument
(universal-argument argument)

Sets the argument to 4, or multiplies it by 4 if a universal argument
has already been set.  If digit or '-' keystrokes then follow, the
universal argument is removed, and replaced with a numeric argument,
with a value as entered.  The next command executed will have the
argument set to the value given.

:command	untag-message
(untag-message "tag-list")

Prompts for a list of tags and removes them tags from the current
message.

:command	upcase-word
(upcase-word &optional count)

Uppercases the word after point, or a number of words specified
by an argument.  A minibuffer-only command.

:command	view-af-news
(view-af-news &optional "filename")

Types-out any news about af, such as notes on new releases or
features.  If an argument is given, then af prompts for a file
name, and the output is appended to that file.

:command	view-lossage
(view-lossage &optional "filename")

Types-out the "lossage": the last hundred characters typed at the
keyboard.  If an argument is given, then af prompts for a file
name, and the output is appended to that file.

:command	what-cursor-position
(what-cursor-position)

Reports how many lines down from the top of the current buffer
point is.

:command	widen
(widen)

Removes the effect of any narrowing on the current buffer, so that
all messages in the buffer become visible.

:command	write-configuration
(write-configuration "filename")

Prompts for a filename and writes any changes from the default
configuration into it.  Loading such a file (or installing it as
a startup file) will cause af to enter the state that it was in
when the command was run.  This is intended to help users generate
their own startup files.

:command	write-file
(write-file "filename")

Prompts for a filename and writes the current buffer to the file.
If this would overwrite an existing file, confirmation is required.
If the write succeeds, the file associated with the buffer is set
to the file which has been written.

:command	yank
(yank &optional argument)

Inserts the contents of the kill buffer into the current buffer
before point.  The message kill buffer is available in all mail
buffers, so messages may be "cut" from one buffer and then "pasted"
into another.  The mark is set at the first message inserted, so
that the inserted messages make up the region.  An argument implies
that the kill ring is to be popped that many times before inserting
the contents of the kill buffer.  The minibuffer keeps its own kill
buffer for manipulating the history list.

:command	yank-pop
(yank-pop argument)

Can only be executed immediately after a yank or yank-pop.  Removes
the messages yanked by the previous kill, pops the kill ring one
message, or as many as given by an argument, and replaces the removed
messages with the contents of the newly-active kill buffer.  Repeated
use will cycle through the kill ring, returning to the messages that]
were originally yanked.

:function	and
(and &rest condition)

Evaluates the arguments until one of them returns nil, and then returns
nil; the remaining arguments are never evaluated.  If no argument returns
nil, then returns the value of the last argument.

:function	define-kbd-macro
(define-kbd-macro macro "value")

Defines a new or existing keyboard macro with the given name and assigns
it value.  This allows macros to be defined in startup and load files.
Returns the value the macro is set to.

:function	define-key
(define-key keymap "key" command | keymap | kbd-macro | nil)

Sets "key" within keymap to the command, keymap or macro specified,
or unbinds it if given nil.  Prefix keys are valid within key.
Returns the value to which the key was set.

:function	equal
(equal object object)

Returns t if the two objects have the same afl type and contents, nil
otherwise.  Lists and strings are compared element by element, other
objects by value.

:function	error
(error &rest message)

Beeps and prints the value of the message in the echo area.  Message
is one or more afl objects of any type.  Returns an error, which will
halt the afl program that is running.

:function	getenv
(getenv "variable")

Returns the value of environment variable "variable" as a string, or
nil if "variable" is undefined in the environment.

:function	if
(if condition then &optional else)

If condition evaluates to non-nil then evaluates then; otherwise
evaluates else.  Returns the value of whichever was evaluated.

:function	message
(message &rest message)

Beeps and prints the value of the message in the echo area.  Message
is one or more afl objects of any type.  Returns the forms that were
printed. 

:function	not
(not condition)

Returns t if condition evaluated to nil, nil otherwise.

:function	or
(or &rest form)

Evaluates the arguments until one of them returns non-nil, and then
returns that value; the remaining arguments are never evaluated.  If
no argument returns non-nil, then returns nil.

:function	progn
(progn &rest form)

Evaluates its arguments sequentially, and then returns the value of the
last argument.

:function	quote
(quote form)

Returns the form without evaluating it.

:function	set
(set symbol value)

Sets the symbol to value, and returns value.  Values assigned to
configuration variables are checked, and an error occurs if the
value is invalid.

At present, set can only assign to af configuration variables.

:function	setq
(setq symbol value)

Sets the symbol, which not evaluated, to value, and returns value.
Values assigned to configuration variables are checked, and an
error occurs if the value is invalid.

At present, setq can only assign to af configuration variables.

:function	system
(system "commands")

Runs a shell command, and returns the output of that command, or
nil if the command couldn't be executed.  Any newline characters
in the output are removed, and sequences of other white space
characters are replaced with a single space.

:mode	Complete
Complete mode is turned on in the minibuffer when completion is
available, allowing the various completion commands to be used.
It may not be turned on or off by the user.

:mode	Defining
Defining mode is turned on whenever you are defining a keyboard
macro.  It is turned off again when you finish the macro.  It may
not be turned on or off by the user.

:mode	Mail
The major mode for mail buffers, allowing the mail keymaps to be
used in a buffer.  It may not be turned off in a mail buffer, or
on in the minibuffer or in typeout.

:mode	Minibuffer
The major mode for the minibuffer, allowing the minibuffer keymaps
to be used in the minibuffer.  It may not be turned off in the
minibuffer or on in a mail buffer or typeout.

:mode	Narrow
When a mail buffer is narrowed, this mode is set on it, indicating
that not all of the messages in the buffer are visible.  It is
turned off when the buffer is widened.

:mode	Password
This mode is set on the minibuffer when you are editing a password.
In Password mode, the characters are not displayed when they are
typed, and the line will not be added to the minibuffer history.
Password mode may not be turned on or off by the user.

:mode	Pop3
When a folder is read into a buffer using POP3, Pop3 mode is set on
the buffer.  It disallows most of the operations that make af unlike
other mailers (killing, yanking, and so on).  This is because the
POP3 protocol only allows very limited manipulation of the folder,
and can't support the more "unusual" features of af.  The mode can
only be turned off by writing the file to a non-POP3 folder.

:mode	Read-Only
When a mail buffer is Read-Only, it may not be changed by inserting
or deleting messages within it.  Also, it will not be marked as
status-changed if a message in it changes status (for example, by
saving a message).

:mode	Typeout
The major mode for typeout, allowing the typeout keymaps to be
used in typeout.  It may not be turned off in typeout, or on in
a mail buffer or the minibuffer.

:mode	Show
An alternative major mode for typeout, which makes typeout display
only the first page of output and then exit.  It is used internally
by af, and cannot be turned on or off by the user.

:variable	addresses-to-ignore
Contains an address list which specifies addresses which are to be
ignored in group replies, typically the user's mail addresses on this
and other machines.  Default is unset.

:variable	ask-bcc
Controls prompting for blind-carbon-copy entries when sending mail
with af.  Defaults to "false".

:variable	ask-cc
Controls prompting for carbon-copy entries when sending mail with
af.  Defaults to "false".

:variable	auto-fold-headers
Controls folding header lines in outgoing mail at the 80th column.
Defaults to "true".

:variable	case-fold-search
Controls whether searches should be case dependent.  If set to
"true" then case will be ignored in searches, otherwise searches
will be case-dependent.  Defaults to "true".

:variable	confirm-print
Controls the need to confirm the printing of messages by the
"print-message" command.  If set to "true", confirmation is
required.  Defaults to "true".

:variable	copy-on-reply
Controls copying the body of a message being replied to into the
body of the reply.  If "true", the message body will always be
copied.  If "false", it will never be copied.  If "ask", the user
will be asked each time.  Defaults to "ask".

:variable	copy-preface
If set to a value, the the string is inserted before any text
copied into the body of a replying or forwarding message.
Any conversion characters in the string are expanded to their
full value in the same way as the "header-line-format" variable,
except that only conversions which deal with message attributes
(specifically %, c, C, d, D, e, k, K, o, O, s, t, v) can be used.
In addition, the output string is not padded by default, the fields
are inserted as is unless a specific size is given.  A good value
for this variable might be:

	"On %D, %o wrote:"

Default is unset.

:variable	copy-prefix
The prefix for lines of text copied into an outgoing message for
a reply or forward.  Defaults to "> ".

:variable	domain
The domain name of your mail site.  This is usually the same as
the full name of the machine you are running af on, but may
sometimes be different, such as when your site uses site hiding
so that all mail should appear as coming from "full.domain", not
"machine.full.domain".  Defaults to your machine's fully qualified
domain name.

:variable	echo-keystrokes
The pause in seconds before an incomplete key sequence is displayed
in the minibuffer.  If "0", incomplete sequences are never displayed.
It cannot be set to greater than 60 seconds.  Defaults to "2".

:variable	edit-initial-headers
When set to "true", mail headers will be placed into the editor
upon a message's first edit.  When set to "accept", headers will
not be displayed for editing, but any valid headers typed at the
start of the message will be accepted.  If sending mail from
standard input, headers at the start of the message will be accepted
if it is set either to "true" or "accept".  Defaults to "false".

:variable	edit-initial-signature
When set to "true", any signature will be placed into the editor
upon a message's first edit.  Defaults to "false".

:variable	edit-reply-address
When set to "true", allows editing of the destination address when
replying to mail.  It is intended for use by people at sites with
inadequate mail configurations.  Defaults to "false".

:variable	editor
The program used to edit outgoing mail. If not set, or it names a
program that cannot be run, the environment variables VISUAL and
EDITOR will be consulted.  Defaults to the value of the VISUAL
environment variable, or of the EDITOR environment variable if
VISUAL is not set.

:variable	first-unread-message
When set to "true", the current message will be set to the first
unread message (if any are present) rather than the first message
when a folder is read.  Defaults to "false".

:variable	folder
Controls expansion of the folder prefix, and contains the name of
the directory where the user's folders are stored.  Defaults to
the value of the FOLDER environment variable if it is set, or
"$HOME/Mail" otherwise.

:variable	header-line-arrow
The arrow string printed to show the current message in a window.
It can be set to any value, but the header-line-format should be
changed if the new arrow pointer is not the same length as the
default of "=>".

:variable	header-line-format
Controls display of message details for each message line in a mail
buffer.  It is a string of characters interspersed with conversion
sequences:

    %% (-1)		A percent character
    %* (-2)		Buffer status flags ('==' '++', '**', etc)
    %a (-2)		The arrow pointer or a blank if not the
			current message
    %b (-20) *		Name of the buffer
    %c (5)		Size of the message in characters
    %C (4)		Size of the message in lines
    %d (-6)		Date the message was sent
    %D (-12)		Date and time the message was sent
    %e (-16) *		The encoding of the message
    %f (-20) *		File associated with the buffer    
    %k (-15) *		The type of the message
    %K (-15) *		The type and parameters of the message
    %l (4)		Line number of the message in the buffer
    %m (-15)		Modes active in the buffer
    %n (4)		Number of messages in the buffer
    %o (-20) *		Name of the sender of the message
    %O (-30) *		Mail address of the sender of the message
    %p (-3)		Relative position of screen in the buffer
    %s (-30) *		Subject of the message
    %t (-4)		Tags associated with the message
    %v (-4)		Af version number

Each conversion has a default field width which may be overridden
by giving a width after the '%' character (for example, %20o).  If
the width is negative, the field is left-aligned, otherwise it is
right-aligned.  If the default width is used for escapes marked
with a '*', the width of the conversion will be scaled to fit the
width of the screen.  Scaling will never reduce the width to less
than half the default, and will produce acceptable output if the
screen width is greater than the total width explicitly given in
the string.

Padding is performed at the nearest space character to the conversion,
so that a sequence of '(%l/%n)' will give the intuitive result,
with columns still aligned.

The best way to find out how this works is to experiment.  Don't
let this description scare you off; try modifying the default and
seeing what happens.

:variable	headers-not-displayed
A list of header names which should not normally be displayed when
viewing messages.  Defaults to: ">From:Received:Message-Id:References:\
Apparently-To:Return-Path:X-Mailer:Mailer:X-Af-Status:X-Status:Status:".

:variable	headers-to-copy
A list of header names which should be included in text copied into an
outgoing message when replying to or forwarding a message.  Default is
unset (no headers are copied).

:variable	info-browser
Controls browsing of the af info manual via the "info" command.
This variable names a program to browse the af manual in info format,
preferably a dedicated info browser.  Defaults to "info af" if the
standalone info browser is installed on your system, or "typeout"
(display the info manual to typeout) otherwise.

:variable	initial-buffer-sort
If set, specifies a sort type which will be used to sort each buffer
as it is read from disk.  It has no effect when a folder is inserted
into a buffer, or a buffer is resynchronised.  Default is unset.

:variable	kill-ring-max
Controls the growth of the kill ring.  When new messages are killed
in a mail buffer, if the number of entries in the kill ring is less
than the value of kill-ring-max, then a new entry is added to the
kill ring, rather than the new entry replacing an existing one.
Note that lowering the value of this variable can never cause the
kill ring to shrink, only prevent it from growing further.
Defaults to 8.

:variable	load-path
Contains a list of directories to search for af libraries when the
load-library command is executed.  Defaults to the contents of the
AFLOADPATH environment variable if set, or to a site-dependent af
library directory otherwise.

:variable	message-count-update
When reading or writing buffers, af gives a running report of the
number of messages processed to date.  The value gives the number
of messages that are processed before the report is updated.  If
set to zero, no reports are given.  Defaults to 5.

:variable	meta-prefix-char
Stores the current meta character, which is used to determine the
prefix used for metacharacters typed at the keyboard and for the
M- prefix in "load"ed files.  Defaults to ESC (the escape key).

:variable	mime-pager
Controls the display of non-text messages for the "open-message"
command.   If it is set then all non-text messages are paged using
the program named in this variable, otherwise they are handled as
if they were text messages.  Defaults to "metamail -m af -p".

:variable	mime-printer
Names the program used to print non-text messages.  If it is set
then all non-text messages are printed using the program named in
this variable, otherwise they are handled as if they were text
messages.  Defaults to "metamail -m af -h".

:variable	mime-saver
Controls the saving of non-text message bodies.  If it is set then
all non-text messages bodies are sent to the named program to be
saved, otherwise they are handled as if they were text messages.
Defaults to "metamail -m af -w".

:variable	mode-line-format
Controls display of information in the mode lines of windows.  It
is a string of characters interspersed with conversion sequences,
just as for the "header-line-format" variable.  Any message-dependent
conversions in the mode line will show the values for the current
message.  The only difference between this and the "header-line-format"
variable is that "mode-line-format" uses "=" rather than SPACE as
the fill character, and "=" is considered to be a SPACE when
determining where to fill when converting.

As with "header-line-format", the best way to find out how it works
is to experiment.

:variable	multiple-reply-warning
Controls whether to warn the user when attempting to reply to a
message which has already been replied to.  Defaults to "false".

:variable	news-folder
Controls expansion of the news-folder prefix, and contains the name
of the directory where the user's news files are stored.  Defaults
to value of the FOLDER environment variable if it is set, or
"$HOME/News" otherwise.

:variable	next-screen-context-lines
Controls the number of lines of context when scrolling by
screenfuls.  Context lines are those visible both before and
after scrolling.  Default is 2.

:variable	organization
Contains a string naming the user's organization, used to generate
an Organization: header when sending mail.  Defaults to the value
of the ORGANIZATION environment variable.  If not set, no
Organization: header will be generated.

:variable	outbound-folder
Gives the name of a folder in which to store a copy of all messages
sent with af.  The messages are stored with headers (except for a
Message-ID) in the named folder, immediately after being sent.
Default is unset (don't save messages).

:variable	outbound-threshold
Gives the maximum number of lines in a message body which should be
silently saved to the outbound-folder (if set).  Messages longer
than this limit cause the sender to be asked for confirmation that
the message is to be saved if interactive, or if sending mail from
the standard input the message is not saved.  If set to 0 then all
outbound messages will be saved regardless of length.  Lines are
counted after being folded to the screen width of 79 characters,
so a single line of 100 characters would count as two lines.
Default is 100 lines.

:variable	pager
Controls the display of messages for the "open-message" command.
If set to "typeout", the message will be paged through af's internal
pager; otherwise it should name a program which can perform paging.
Defaults to "typeout".

:variable	pause-after-paging-message
Controls whether af should wait for a key press after using a pager
(other than typeout) to display a message. If set to "true", af
will wait for a key press before resuming.  Defaults to "true".

:variable	pending-folder
If this variable is set to a file name when af starts up with no
folders specified, then instead of reading the user's incoming
mailbox, the pending-folder is read, and the contents of the
pending-folder appended to it.  When the user saves the buffer,
the incoming mailbox will be cleared.  Af considers a pending
folder to contain both the folder and the incoming mailbox, so
it will be resynchronised properly and so forth.  Default is unset.

:variable	persistent-tags
Gives a list of the user tags which will be retained when messages
are read from a file or yanked from the kill buffer.  All other tags
are removed from the messages.  Default is unset (no tags persistent).

:variable	preserve-cc-in-group-reply
If true, any Cc: (carbon-copy) header on a message is duplicated in
an outgoing group-reply to that message, so that recipients of a
carbon-copy will also receive the reply.  Default is "true".

:variable	print-command
Names the system command used to print messages.  It must be set
before messages can be printed.  Default is system-dependent;
usually something like "pr | lpr".

:variable	quit-char
Stores the current quit character, which is used to check for a
user quit while confirming or in typeout.  Has no effect in
commands which use the minibuffer, where the keyboard-quit
command has the same effect.  Defaults to C-g (control G).

:variable	real-name
Contains the user's real name, used to generate a From: header line
when sending mail.  Defaults to the value of the NAME environment
variable, or is extracted from the user's password file entry
(on UNIX-based systems) otherwise.

:variable	reply-address
Contains a mail address which recipients of mail are to use as the
address for mailing the sender of a message.  If set, it is used
to generate a Reply-To: header line in all outgoing messages.
Default is unset.

:variable	resync-time
The time in seconds between automatic checks for new incoming mail.
If "0", no checks are made.  Defaults to 600 seconds (10 minutes).
If non-zero, it cannot be set to less than 30 seconds.

:variable	show-dates-in-local-time
Controls whether dates for messages are to be shown in local time
for the reader or not.  If set to "false", dates are displayed in
sender local time.  Defaults to "true".

:variable	signature-file
Names a file which will be appended to all outgoing mail.  Some
sites may configure af at compilation time to trim this file to
some maximum size (often 79 columns by 4 lines).  If the filename
begins with "ask:", the remainder of the name is taken as a default,
and the user is prompted for the name of the signature file to use
each time mail is sent.  Defaults to "$HOME/.signature".

:variable	signature-separator
A string which will be printed on a line between the text of an
outgoing message and any automatically-included signature file.
If not set, then no separator line is printed.  Defaults to "-- ".

:variable	smtp-posting-host
This variable names the server which af will connect to in order to
submit an outgoing mail message via SMTP.  The default is defined
when af is built, and should rarely need to be changed.

:variable	spell-checker
Names the program to use to interactively spell-check the body of
an outgoing message.  The name of a file containing the text to be
checked will be appended to this command.  If unset, you won't be
able to spell-check a message before you send it.  Defaults to
"ispell -x" if ispell is installed on your system, or unset if not.

:variable	viewable-charsets
A list of character sets which can be displayed by the user's
terminal.  When MIME mail of type text/plain is to be displayed, the
specified character set is checked against this list and the message
considered textual if the character set is viewable.  Defaults to
"us-ascii".
