@c This is part of the af manual.
@c Copyright (C) 1996 Malc Arnold, Emma Kemm, Kay Dekker.
@c Derived in parts from the GNU Emacs Manual, Eleventh Edition,
@c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995 Free Software Foundation, Inc.
@c See file af.texi for copying conditions.

@node Handling Messages, Mark and Region, Help, Top
@chapter More Ways to Handle Messages

You can use af to handle messages in more sophisticated ways than by
simply displaying them; You can save messages to folders, print a
hardcopy of them, pipe them into commands, and more.

Most commands that deal with a single message also have similar commands
which deal with a set of messages, selected either by using the mark and
region (@pxref{Mark and Region}), or with tags (@pxref{Tags}).  These
similar commands will be covered later.

@menu
* Saving Messages::	Saving a message to a folder.
* Printing Messages::	Printing a hardcopy of a message.
* Piping Messages::     Passing messages to a shell command.
* Other Message::       Other message-handling commands.
* Shell Commands::      Executing shell commands from within af.
@end menu

@node Saving Messages
@section Saving Messages
@cindex saving messages

@kindex M-+
@findex save-message
Af allows you to @dfn{save} messages by copying them to folders.  One
way to save a message to a folder is to use @kbd{M-+}
(@code{save-message}).  Af will prompt you for the folder name, offering
a default based on the sender's mail address (@pxref{Folders}).  The
message will be appended to the folder you specify, so any messages
already in the folder will be left unchanged.

When the message is saved to a folder, the original copy is not deleted.
an @samp{S} will appear in the system tags of the message, so that you
know you have saved it.

@kbd{M-+} can take a numeric argument, in which case it only saves the
body of the message, not the headers.  Obviously the file containing a
saved copy of the message shouldn't be read with af; it isn't a mail
folder.  Saving the body of a message can be useful when the body is
input for some other program (such as a patch file).

@vindex mime-saver
If you save only the body of a @sc{mime} message, then af will use the
command listed in the @code{mime-saver} variable to save the message,
to ensure that the message mode is properly decoded before writing it
to the file.

@node Printing Messages
@section Printing Messages
@cindex printing messages
@cindex hardcopy

@kindex M-p
@findex print-message
@vindex print-command
@vindex mime-printer
@vindex confirm-print
Af allows you to print a hardcopy of a message to a spooler.  The
program to use to print hard copies of mail is defined by the
@code{print-command} variable for ordinary text messages, or the
@code{mime-printer} variable for @sc{mime} messages.

To print a hardcopy of a message, use @kbd{C-p} (@code{print-message}).
Af will usually prompt you to confirm that you want a hardcopy of the
message; this feature can be turned off by setting the variable
@code{confirm-print} to @code{false}.  After you print the message, a
@samp{P} will appear in the system tags of the message, to remind you
that you have printed it.

Normally, only mail headers not listed in the
@code{headers-not-displayed} variable will be printed when you print a
message.  A positive numeric argument makes af print all the message's
headers, while a negative argument makes af skip all headers, and only
print the body of the message.

@node Piping Messages
@section Piping Messages
@cindex piping messages
@cindex filtering messages

@kindex M-|
@findex pipe-message
Af allows you to @dfn{pipe} a message into the standard input of a
system command.  To do this use @kbd{M-|} (@code{pipe-message}).  Af
will prompt for the command to pipe the message into, and then execute
the command.  Any output from the command will be displayed on the
screen.  Once the command has completed, af will wait for you to press a
key before continuing; giving you a chance to read any output from the
command.

Normally, only mail headers not listed in the
@code{headers-not-displayed} variable will be piped into the command.  A
positive numeric argument makes af pass all the message's headers to the
command.  A negative argument makes af skip all headers, and only pass
the body of the message to the command.

@node Other Message
@section Other Message-Handling Commands
@cindex mail digests
@cindex digests, mail
@cindex editing a message

@findex explode-digest
Af is able to process @dfn{mail digests}; mail messages which themselves
contain one or more mail messages.  If you receive a mail digest, you can
use @kbd{M-x explode-digest} to ``explode'' the digest back into the
messages it contains.

The exploded messages are placed after the digest in the buffer.  The
mark is set on the first exploded message, and point lies after the
last; making it convenient to handle them after exploding the digest.

@kindex C-x C-e
@findex edit-message
Af will allow you to edit a message in a folder with @kbd{C-x C-e}
(@code{edit-message}).  Af will save the message to a temporary file and
execute an editor to edit the file.  When you finish editing, af will
read back the temporary file, and update its internal copy of the
message.  When you save the buffer, the modified message will be written
to the folder.

With an argument, @kbd{C-x C-e} will only pass the body of the message to
the editor.

@node Shell Commands
@section Running Shell Commands from Af
@cindex executing external commands
@cindex shell commands
@cindex inferior shell
@cindex subshell

Af has commands for running inferior shell processes, displaying the
result to typeout or letting the inferior process take control of
the terminal.

@kindex M-!
@kindex C-x !
@findex shell-command-to-typeout
@findex shell-command
@findex shell
@table @kbd
@item M-! @var{cmd} @key{RET}
Run the shell command line @var{cmd} and display the output to typeout
(@code{shell-command-to-typeout}).
@item C-x ! @var{cmd} @key{RET}
Start an inferior shell to run the command line @var{cmd}.  The inferior
shell will take control of the terminal until it exits.
(@code{shell-command})
@item M-x shell
Run an inferior shell interactively under af.  The inferior shell will
take control of the terminal until it exits (@code{shell}).
@end table

@node Mark and Region, Tags, Handling Messages, Top
@chapter The Mark and the Region
@cindex mark
@cindex setting a mark
@cindex region

Many af commands operate on an arbitrary contiguous part of the
current buffer.  To specify the text for such a command to operate on,
you set @dfn{the mark} at one end of it, and move point to the other
end.  The text between point and the mark is called @dfn{the region}.

You can move point or the mark to adjust the boundaries of the region.
It doesn't matter which one is set first chronologically, or which one
comes earlier in the buffer.  Once the mark has been set, it remains
where you put it until you set it again at another place.  Each af
buffer has its own mark, so that when you return to a buffer that had
been selected previously, it has the same mark it had before.

Many commands that insert messages (or text in the minibuffer), such as
@kbd{C-y} (@code{yank}) and @kbd{C-x i} (@code{insert-file}), position
point and the mark at opposite ends of the inserted text, so that the
region contains the text just inserted.

@menu
* Setting the Mark::	Commands to set the mark.
* Using the Region::	Ways you can operate on the region.
* Typeout Region::      Things you can do with the region in typeout.
* Minibuffer Region::   Region operations in the minibuffer.
@end menu

@node Setting the Mark
@section Setting the Mark

There are two commands to set the mark in a buffer.  These commands work
identically in mail buffers, typeout, and the minibuffer.

@table @kbd
@item C-@key{SPC} @r{or} C-@@ @r{or} M-@key{SPC}
Set the mark where point is (@code{set-mark-command}).
@item C-x C-x
Interchange mark and point (@code{exchange-point-and-mark}).
@end table

For example, suppose you wish to save part of a mail buffer to a folder,
using the @kbd{C-x +} (@code{save-region}) command, which operates on
the messages in the region.  You can first go to the beginning of the
messages to be saved, type @kbd{C-@key{SPC}} to put the mark there, move
to the end, and then type @kbd{C-x +}.  Or, you can set the mark at the
end of the text, move to the beginning, and then type @kbd{C-x +}.

@kindex C-SPC
@findex set-mark-command
The most common way to set the mark is with the @kbd{C-@key{SPC}} command
(@code{set-mark-command}).  This sets the mark where point is.  Then you
can move point away, leaving the mark behind.

@kindex C-x C-x
@findex exchange-point-and-mark
Af doesn't show you where the mark is located.  You have to remember.
The usual solution to this problem is to set the mark and then use it
soon, before you forget where it is.  Alternatively, you can see where
the mark is with the command @kbd{C-x C-x}
(@code{exchange-point-and-mark}) which puts the mark where point was and
point where the mark was.  The extent of the region is unchanged, but
point is now at the previous position of the mark.

@kbd{C-x C-x} is also useful when you are satisfied with the position of
point but want to move the mark; do @kbd{C-x C-x} to put point at that
end of the region, and then move it.  A second use of @kbd{C-x C-x}, if
necessary, puts the mark at the new position with point back at its
original position.

@kindex C-@@
There is no such character as @kbd{C-@key{SPC}} in ASCII; when you type
@key{SPC} while holding down @key{CTRL}, what you get on most ordinary
terminals is the character @kbd{C-@@}.  This key is actually bound to
@code{set-mark-command}.  But unless you are unlucky enough to have a
terminal where typing @kbd{C-@key{SPC}} does not produce @kbd{C-@@}, you
might as well think of this character as @kbd{C-@key{SPC}}.  If you are
on a terminal where @kbd{C-@key{SPC}} doesn't work, you could use
@kbd{M-@key{SPC}} instead; it is also bound to @code{set-mark-command}.

@node Using the Region
@section Operating on the Region
@cindex operations on a marked region

Once you have a region in a mail buffer, here are some of the commands
that operate on the region.  Note that these commands all have the word
@code{region} in their names.

@kindex C-w
@kindex M-w
@kindex C-x +
@kindex C-x p
@kindex C-x |
@findex kill-region
@findex copy-region-as-kill
@findex save-region
@findex print-region
@findex pipe-region
@table @kbd
@item C-w
Kill the messages in the region (@code{kill-region}).
@xref{Killing and Yanking}.
@item M-w
Copy the region into the kill buffer as if it had been killed
(@code{copy-region-as-kill}). @xref{Killing and Yanking}.
@item C-x + @var{folder} @key{RET}
Save the messages in the region into @var{folder} (@code{save-region}).
This command handles the argument in the same way as @kbd{M-+}
(@code{save-message}). @xref{Saving Messages}.
@item C-x p
Print a hardcopy of all the messages in the region
(@code{print-region}).  This command handles the argument in the same
way as @kbd{M-p} (@code{print-message}). @xref{Printing Messages}.
@item C-x | @var{command} @key{RET}
Pipe the messages in the region into a single instance of the shell
command @var{command} (@code{pipe-region}).  Again, this command handles
the argument in the same way as @kbd{M-|} (@code{pipe-message})
@xref{Piping Messages}.
@end table

@node Typeout Region
@section Using the Region in Typeout
@cindex region (typeout)

Typeout is only used to display text, and not to edit or delete anything.
For that reason, there are no commands which operate on the region available
in typeout.  It is still possible to set the mark in the typeout buffer; but
the only thing you can do with it is to use @kbd{C-x C-x}
(@code{exchange-point-and-mark}) to move back to the mark.

@node Minibuffer Region
@section Using the Region in the Minibuffer
@cindex region (minibuffer)

The minibuffer supports the mark and region, but only a subset of the
commands which are available in a mail buffer to process the region.
Since the minibuffer deals with text rather than messages, the region
delimits a block of text in the minibuffer.

Just like any other buffer, the minibuffer has its own mark.  The mark
is not preserved between uses of the minibuffer, or when you move
between minibuffer history entries, so you will usually need to set the
mark in the minibuffer before you use it.

There are two commands which operate on the region in the minibuffer:

@kindex C-w @r{(minibuffer)}
@kindex M-w @r{(minibuffer)}
@findex kill-region @r{(minibuffer)}
@findex copy-region-as-kill @r{(minibuffer)}
@table @kbd
@item C-w
Delete the text in the region (@code{kill-region}).
@xref{Minibuffer Kills}.
@item M-w
Copy the text in the region into the kill buffer as if it had been
killed (@code{copy-region-as-kill}).  @xref{Minibuffer Kills}.
@end table

@node Tags, Killing and Yanking, Mark and Region, Top
@chapter Tags

The region allows you to conveniently process blocks of messages, but
what if you want to handle an arbitrary set of messages?  Af uses tags
to let you mark a set of messages and process them quickly.

Tags are only available in mail buffers; they wouldn't make any sense
in the minibuffer or the mail buffer.

@menu
* Tag Concepts::        An introduction to af's tags.
* Setting Tags::        How to set and remove tags.
* Using Tags::          How you can process tagged messages.
@end menu

@node Tag Concepts
@section Tag Concepts

A @dfn{tag} is a single-character mark which is set on a message.  A
message can have any number of tags set on it.  There are two types of
tags: @dfn{system tags} which are automatically set by af for various
reasons, and @dfn{user tags} which you can set and unset yourself.  You
cannot set or remove system tags, but you can use them in exactly the
same ways as you can user tags.

There are many commands which operate on tagged messages; and you can
use either single tags or a combination of them to specify a set of
messages to operate on.  Tags are central to advanced use of af; they
provide a way for you to easily set up a set of messages, which you
can then work with in several ways.

@menu
* System Tags::         Tags which reflect a message's status.
* User Tags::           Tags which you can set and unset yourself.
* Tag Lists::           Format of lists of tags to (un)set.
* Tag Expressions::     Expressions you can use to select messages.
@end menu

@node System Tags
@subsection System Tags
@cindex system tags
@cindex tags, system

The system tags are all upper-case letters, which give information on
the status of messages.  The possible system tags are:

@table @samp
@item D
The message has been marked for deletion with @kbd{M-x delete-message}.
@item E
Af found an error in the message's headers when the folder was visited.
This is not normally critical, but you may not be able to reply to the
message; or it may even (rarely) indicate a corrupted folder.
@item F
You have forwarded or bounced the message (@pxref{Sending Mail}).
@item M
The message is in @sc{mime} format; and isn't plain text that you can
display on your terminal.  When you read the message the command given
in the @code{mime-pager} variable will be used to display it.  The exact
meaning of this tag may change as af's @sc{mime} support improves.
@item N
The message is new; the message has arrived since last time you visited
the folder and hasn't yet been read.
@item O
The message is old but unread.  The message was present last time you
visited the folder, but you haven't read it yet.
@item P
A hardcopy of the message has been printed to a spooler.
@item R
You have replied to the message (@pxref{Sending Mail}).
@item S
The message has been saved to a folder.
@end table

@node User Tags
@subsection User Tags
@cindex user tags
@cindex tags, user

The user tags you can use are the lower case letters, and @samp{+}.
@samp{+} is sometimes called the @dfn{default tag}, since it is the
default whenever you are asked about tags.

@vindex persistent tags
Normally, the user tags are considered transient, and are lost when you
exit af.  If you would like to keep some or all of the tags across mail
reading sessions, then you can set the variable @code{persistent-tags}
to the tags you would like to be preserved.  For example, setting the
value of @code{persistent-tags} to @samp{aeiou}, would mean that the
user tags @samp{a}, @samp{e}, @samp{i}, @samp{o}, and @samp{u} will be
preserved whenever you save a folder, but the other tags will be lost.
You cannot make the default tag (@samp{+}) persistent.

@node Tag Lists
@subsection Tag Lists
@cindex tag lists

Whenever you are setting or removing tags, af will expect you to enter
a @dfn{tag list}.  Tag lists consist of one or more user tags, which may
be separated by spaces.  For example, @samp{abcd} and @samp{a b c d},
both specify a list of four tags, @samp{a}, @samp{b}, @samp{c}, and
@samp{d}.

Whenever you are prompted for a tag list, you can just hit return to
use the default tag (@samp{+}).

@node Tag Expressions
@subsection Tag Expressions

When you are using tags to define a set of messages to apply some
command to, you will be expected to enter a @dfn{tag expression}.  That
tag expression is then compared to the tags of each message in the
buffer, and the command will operate on the message if the expression is
true for that message.  We often refer to the messages which match a tag
expression as the @dfn{tagset}.

Tag expressions are made up of sub-expressions, which may be system or
user tags.  You can use operators to combine subexpressions, and build
arbitrarily complex expressions.  Any tag will evaluate to true if the
message being checked has that tag set, false otherwise.  The possible
operators are, in decreasing precedence:

@table @samp
@item ( @dots{} )
Override any precedence, and force the contents of the parentheses to
be evaluated as a unit.  @samp{(a)} is equivalent to @samp{a}.
@item !
Logical not; true if the expression it precedes is false.  @samp{!a} is
true if @samp{a} is not set.
@item &
Logical and; true if both sides of the expression are true. @samp{a & b}
is true if both @samp{a} and @samp{b} are set.
@item ^
Logical exclusive-or; true if only one side of the expression is true.
@samp{a ^ b} is true if either @samp{a} or @samp{b} is set, but not
both.
@item |
Logical or; true if either side of the expression is true.  @samp{a | b}
is true if either @samp{a} or @samp{b} is set, or if both are set.
@end table

Here are some examples of tag expressions, with their meanings.

@example
a & b | c & d
@end example

@noindent
True if @samp{a} and @samp{b} are both set, or @samp{c} and @samp{d} are
both set.

@example
a & (b | c) & d
@end example

@noindent
True if @samp{a}, @samp{d}, and either @samp{b} or @samp{c} are set.

@example
a & !b
@end example

@noindent
True if @samp{a} is set and @samp{b} is not set.

@example
a & !(b | c)
@end example

@noindent
True if @samp{a} is set and neither of @samp{b} or @samp{c} are set.

@node Setting Tags
@section Setting and Removing Tags

@table @kbd
@item C-t t @var{tags} @key{RET}
Set @var{tags} on the current message (@code{tag-message}).
@item C-t u @var{tags} @key{RET}
Remove @var{tags} from the current message (@code{untag-message}).
@item C-t r @var{tags} @key{RET}
Remove @var{tags} from all the messages in the buffer
(@code{remove-tag}).
@item M-x tag-thread @var{tags} @key{RET}
@end table

@kindex C-t t
@findex tag-message
To tag the current message, use @kbd{C-t t}.  You will be prompted for
the tags to set; simply type in the tag list to set.  The tags in the
list will be added to those already set on the message.

@kindex C-t u
@findex untag-message
To remove one or more tags from the current message use @kbd{C-t u}.
You will be prompted for the tags to remove.  The tags you specify will
be removed from the message's tags.

@kindex C-t r
@findex remove-tags
To remove one or more tags from all the messages in the buffer, use
@kbd{C-t r}.  You will be prompted for the tags to remove.  The tags
you specify will be removed from all the messages in the buffer.

@findex tag-thread
The experimental command @kbd{M-x tag-thread @var{tags} @key{RET}} tags
all the messages in a @dfn{thread} of conversation, a set of messages
which are all sent as replies to other related messages.  (This is
similar to the concept of threading found in most news readers.)  This
command works, but at the moment there are too many mail composers which
don't include references to messages when they generate a reply, so that
the threads are often broken by replies which af can't detect as a part
of the thread.  It is probably best not to use this command for the
moment, unless you can be sure that all the participants are using a
mail composer that does include references to messages in replies.

There is also a command to set tags on messages which match search
criteria.  @xref{Search and Tag}.

@node Using Tags
@section Using Tags

Once you have tagged messages in the region, you can use single tags or
tag expressions to operate on them.  Here are some of the ways in which
you can operate on tagged messages:

@kindex C-t C-k
@kindex C-t w
@kindex C-t +
@kindex C-t p
@kindex C-t |
@findex kill-tagset
@findex copy-tagset-as-kill
@findex save-tagset
@findex print-tagset
@findex pipe-tagset
@table @kbd
@item C-t C-k @var{tag-expr} @key{RET}
Kill the messages in the tagset defined by @var{tag-expr}
(@code{kill-tagset}).  @xref{Killing and Yanking}.
@item C-t w @var{tag-expr} @key{RET}
Copy the messages in the tagset into the kill buffer as if they had been
killed (@code{copy-tagset-as-kill}). @xref{Killing and Yanking}.
@item C-t + @var{tag-expr} @key{RET} @var{folder} @key{RET}
Save the messages in the tagset into @var{folder} (@code{save-tagset}).
This command handles the argument in the same way as @kbd{M-+}
(@code{save-message}). @xref{Saving Messages}.
@item C-t p @var{tag-expr} @key{RET}
Print a hardcopy of all the messages in the tagset
(@code{print-tagset}).  This command handles the argument in the same
way as @kbd{M-p} (@code{print-message}). @xref{Printing Messages}.
@item C-t | @var{tag-expr} @key{RET} @var{folder} @key{RET}
Pipe the messages in the tagset into a single instance of the shell
command @var{command} (@code{pipe-tagset}).  Again, this command handles
the argument in the same way as @kbd{M-|} (@code{pipe-message})
@xref{Piping Messages}.
@end table

@node Killing and Yanking, Searching, Tags, Top
@chapter Killing and Yanking
@cindex killing messages
@cindex moving text
@cindex copying text
@cindex kill ring
@cindex yanking
@cindex cutting
@cindex pasting

@dfn{Killing} means erasing messages (or text in the minibuffer) and
copying them into the @dfn{kill ring}, from which it can be retrieved by
@dfn{yanking} it.  Some systems use the terms ``cutting'' and
``pasting'' for these operations.

The commonest way of moving or copying messages within af is to kill
them, and later yank them elsewhere one or more times.  This is very
safe because af remembers several recent kills, not just the last one.
It is versatile, because the many commands for killing messages can also
be used for moving them.

Af has only one kill ring for all mail buffers, so you can kill messages
in one buffer and yank them in another buffer.  The minibuffer has a
separate kill ring for storing text.

All commands which delete messages from the buffer save it in the kill
ring (even @code{delete-message} when you save the folder) so that you
can move or copy it to other parts of the buffer.  These commands are
known as @dfn{kill} commands.

@menu
* Killing::             Details of killing and copying messages.
* Yanking::             How to yank messages you have killed.
* Appending Kills::     Several kills in a row all yank together.
* Earlier Kills::	Yanking something killed some time ago.
* Minibuffer Kills::    Killing and yanking text in the minibuffer.
@end menu

@node Killing
@section Killing Messages

There are two ways to add messages to the kill ring; killing and
copying.  @dfn{Killing} means deleting messages and adding them to the
kill ring, while @dfn{copying} means copying messages to the kill ring
without deleting them.

There are commands to kill a single message (@pxref{Deleting Messages}),
commands to kill or copy the region (@pxref{Using the Region}), and
commands to kill or copy a tagset (@pxref{Using Tags}).

@node Yanking
@section Yanking Messages

All killed messages are recorded in the @dfn{kill ring}, a list of
blocks of messages that have been killed.  There is only one kill ring,
shared by all mail buffers, so you can kill messages in one buffer and
yank them in another buffer.  This is the usual way to move messages
from one folder to another (@xref{Saving Messages}, for another way).

@kindex C-y
@findex yank
The command @kbd{C-y} (@code{yank}) reinserts the most recently killed
messages.  It leaves the cursor at the end of the text.  It sets the
mark at the beginning of the text (@pxref{Mark and Region}).

@kbd{C-y} can take a numeric argument, in which case it select an
earlier kill to yank, rather than the last (@pxref{Earlier Kills}).

@node Appending Kills
@section Appending Kills

@cindex appending kills in the ring
Normally, each kill command pushes a new entry onto the kill ring.
However, two or more kill commands in a row combine their messages into
a single entry, so that a single @kbd{C-y} yanks all the messages as a
unit, just as they were before they were killed.

Thus, if you want to yank messages as a unit, you need not kill all of
them with one command; you can keep killing line after line, until you
have killed them all, and you can still get them all back at once.

Commands that kill forward from point add the messages onto the end of
the previous killed messages.  Commands that kill backward from point
add them onto the beginning.  This way, any sequence of mixed forward
and backward kill commands puts all the killed messages into one entry
without rearrangement.  Numeric arguments do not break the sequence of
appending kills.

@node Earlier Kills
@section Yanking Earlier Kills
@cindex yanking previous kills

@kindex M-y
@findex yank-pop
To recover killed messages that are no longer the most recent kill, use
the @kbd{M-y} command (@code{yank-pop}).  It takes the messages
previously yanked and replaces them with the messages from an earlier
kill.  So, to recover the messages of the next-to-the-last kill, first
use @kbd{C-y} to yank the last kill, and then use @kbd{M-y} to replace
it with the previous kill.  @kbd{M-y} is allowed only after a @kbd{C-y}
or another @kbd{M-y}.

You can understand @kbd{M-y} in terms of a ``last yank'' pointer which
points at an entry in the kill ring.  Each time you kill, the ``last
yank'' pointer moves to the newly made entry at the front of the ring.
@kbd{C-y} yanks the entry which the ``last yank'' pointer points to.
@kbd{M-y} moves the ``last yank'' pointer to a different entry, and the
text in the buffer changes to match.  Enough @kbd{M-y} commands can move
the pointer to any entry in the ring, so you can get any entry into the
buffer.  Eventually the pointer reaches the end of the ring; the next
@kbd{M-y} moves it to the first entry again.

@kbd{M-y} moves the ``last yank'' pointer around the ring, but it does
not change the order of the entries in the ring, which always runs from
the most recent kill at the front to the oldest one still remembered.

@kbd{M-y} can take a numeric argument, which tells it how many entries
to advance the ``last yank'' pointer by.  A negative argument moves the
pointer toward the front of the ring; from the front of the ring, it
moves ``around'' to the last entry and continues forward from there.

Once the messages you are looking for are brought into the buffer, you
can stop doing @kbd{M-y} commands and it will stay there.  They are a
copy of the kill ring entry, so altering them in the buffer does not
change what's in the ring.  As long as no new killing is done, the
``last yank'' pointer remains at the same place in the kill ring, so
repeating @kbd{C-y} will yank another copy of the same previous kill.

If you know how many @kbd{M-y} commands it would take to find the
messages you want, you can yank those messages in one step using
@kbd{C-y} with a numeric argument.  @kbd{C-y} with an argument restores
the text the specified number of entries back in the kill ring.  Thus,
@kbd{C-u 2 C-y} gets the next to the last block of killed messages.  It
is equivalent to @kbd{C-y M-y}.  @kbd{C-y} with a numeric argument
starts counting from the ``last yank'' pointer, and sets the ``last
yank'' pointer to the entry that it yanks.

@vindex kill-ring-max
The length of the kill ring is controlled by the variable
@code{kill-ring-max}; no more than that many blocks of killed messages
are saved.

@node Minibuffer Kills
@section Killing and Yanking in the Minibuffer
@cindex killing text

The minibuffer is used for editing text rather than handling mail, so it
has it's own kill ring.  Any command which kills more than one character
at a time (the @code{word} and @code{line} killing commands) will store
the killed text in the minibuffer kill ring.  You can yank the killed
text back in exactly the same way as killed messages using @kbd{C-y}.

The minibuffer kill commands will append successive kills to the kill
ring, just like the mail buffer kill commands do.  If you use @kbd{M-d}
(@code{delete-word}) three times, then the three words you kill will all
be stored in a single kill ring entry; and a single yank will insert
them into the text at point.

For simplicity, the minibuffer kill ring only has one entry, so you
can't use @kbd{M-y} in the minibuffer.  If many people find this a
problem, then it may change at some point in the future.

@node Searching, Sorting, Killing and Yanking, Top
@chapter Searching Mail Folders
@cindex searching
@cindex finding strings within messages

Af has search commands, which allow you to search through the messages
in a buffer and find those which match a regular expression.  You can
also search for messages which match a tag expression.

@menu 
* Regex Search::	Searching for regular expressions.
* Tag Search::          Searching for tagged messages.
* Search and Tag::      Tag all messages which match a regex.
* Regex Syntax::	The syntax of regular expressions.
* Search Case::		Should case be ignored while searching?
@end menu

@node Regex Search
@section Searching for Regular Expressions

@table @kbd
@item C-s @var{regex} @key{RET}
Search for @var{regex} (@code{search-forward}).
@item C-r @var{regex} @key{RET}
Search backward for @var{regex} (@code{search-backward}).
@end table

@kindex C-s
@kindex C-r
@findex search-forward
@findex search-backward
To do a search on a buffer (whether typeout or a mail buffer), use
@kbd{C-s} or @kbd{C-r}.  Af will prompt you for the regular expression
to search for, and then the search takes place.  If no messages match
the regular expression then the search will fail with an error.

A second search immediately after the first, will not match the current
message, so repeated searches will move through all the messages which
match the regular expression.  To make this more convenient, the search
expression is defaulted to the last one you entered.

The search commands with a numeric argument will only search the headers
of the messages.  This is often convenient when (for example) looking
for messages which are from a particular person.

@node Tag Search
@section Searching for Tagged Messages
@cindex tag search

@table @kbd
@item C-t C-s @var{tagexpr} @key{RET}
Search for messages matching @var{tagexpr} (@code{tag-search-forward}).
@item C-t C-r @var{tagexpr} @key{RET}
Search backward for messages matching @var{tagexpr}
(@code{tag-search-backward}).@
@end table

@kindex C-t C-s
@findex tag-search-forward
@kindex C-t C-r
@findex tag-search-backward
To search for a message matching a tag expression use @kbd{C-t C-s} or
@kbd{C-t C-r}.  Af will prompt you for the tag expression (@pxref{Tag
Expressions}) to search for; and then the search takes place.  If no
messages match the tag expression then the search will fail with an
error.

Just as with regular expression searches, a second search immediately
after the first, will not match the current message, so repeated
searches will move through all the messages which match the tag
expression.  To make this more convenient, the search expression is
defaulted to the last one you entered.

@node Search and Tag
@section Tagging Matching Messages

@kindex C-t s
@findex search-and-tag
As well as just searching for a regular expression and moving point to
the first matching message, af can tag all the messages which match a
regular expression.  To do this use @kbd{C-t s} (@code{search-and-tag}).
You will be prompted for the regular expression to search for, and the
tags to set on the matching messages (@pxref{Setting Tags}).  Once the
search has finished, af will report how many messages were tagged.

With a numeric argument this command will only search the headers of the
messages.  This is often convenient when (for example) looking for
messages which are from a particular person or mailing list.

@node Regex Syntax
@section Syntax of Regular Expressions
@cindex regex syntax

Regular expressions have a syntax in which a few characters are special
constructs and the rest are @dfn{ordinary}.  An ordinary character is a
simple regular expression which matches that same character and nothing
else.  The special characters are @samp{$}, @samp{^}, @samp{.},
@samp{*}, @samp{+}, @samp{?}, @samp{[}, @samp{]} and @samp{\}.  Any
other character appearing in a regular expression is ordinary, unless a
@samp{\} precedes it.

For example, @samp{f} is not a special character, so it is ordinary, and
therefore @samp{f} is a regular expression that matches the string
@samp{f} and no other string.  (It does @emph{not} match the string
@samp{ff}.)  Likewise, @samp{o} is a regular expression that matches
only @samp{o}.  (When case distinctions are being ignored, these regular
expressions also match @samp{F} and @samp{O}, but we consider this a
generalization of ``the same string'', rather than an exception.)

Any two regular expressions @var{a} and @var{b} can be concatenated.
The result is a regular expression which matches a string if @var{a}
matches some amount of the beginning of that string and @var{b} matches
the rest of the string.

As a simple example, we can concatenate the regular expressions @samp{f}
and @samp{o} to get the regular expression @samp{fo}, which matches only
the string @samp{fo}.  Still trivial.  To do something nontrivial, you
need to use one of the special characters.  Here is a list of them.

@table @kbd
@item .@: @r{(Full stop)}
is a special character that matches any single character except a newline.
Using concatenation, we can make regular expressions like @samp{a.b} which
matches any three-character string which begins with @samp{a} and ends with
@samp{b}.

@item *
is not a construct by itself; it is a postfix operator, which means to
match the preceding regular expression repetitively as many times as
possible.  Thus, @samp{o*} matches any number of @samp{o}s (including no
@samp{o}s).

@samp{*} always applies to the @emph{smallest} possible preceding
expression.  Thus, @samp{fo*} has a repeating @samp{o}, not a repeating
@samp{fo}.  It matches @samp{f}, @samp{fo}, @samp{foo}, and so on.

@item +
is a postfix character, similar to @samp{*} except that it must match
the preceding expression at least once.  So, for example, @samp{ca+r}
matches the strings @samp{car} and @samp{caaaar} but not the string
@samp{cr}, whereas @samp{ca*r} matches all three strings.

@item ?
is a postfix character, similar to @samp{*} except that it can match the
preceding expression either once or not at all.  For example,
@samp{ca?r} matches @samp{car} or @samp{cr}; nothing else.

@item [ @dots{} ]
is a @dfn{character set}, which begins with @samp{[} and is terminated
by @samp{]}.  In the simplest case, the characters between the two
brackets are what this set can match.

Thus, @samp{[ad]} matches either one @samp{a} or one @samp{d}, and
@samp{[ad]*} matches any string composed of just @samp{a}s and @samp{d}s
(including the empty string), from which it follows that @samp{c[ad]*r}
matches @samp{cr}, @samp{car}, @samp{cdr}, @samp{caddaar}, etc.

You can also include character ranges in a character set, by writing two
characters with a @samp{-} between them.  Thus, @samp{[a-z]} matches any
lower-case letter.  Ranges may be intermixed freely with individual
characters, as in @samp{[a-z$%.]}, which matches any lower case letter
or @samp{$}, @samp{%} or @samp{.}.

Note that the usual regex special characters are not special inside a
character set.  A completely different set of special characters exists
inside character sets: @samp{]}, @samp{-} and @samp{^}.

To include a @samp{]} in a character set, you must make it the first
character.  For example, @samp{[]a]} matches @samp{]} or @samp{a}.  To
include a @samp{-}, write @samp{-} as the first or last character of the
set.  Thus, @samp{[]-]} matches both @samp{]} and @samp{-}.

To include @samp{^}, make it other than the first character in the
set.

@item [^ @dots{} ]
@samp{[^} begins a @dfn{complemented character set}, which matches any
character except the ones specified.  Thus, @samp{[^a-z0-9A-Z]} matches
all characters @emph{except} letters and digits.

@samp{^} is not special in a character set unless it is the first
character.  The character following the @samp{^} is treated as if it
were first (@samp{-} and @samp{]} are not special there).

@item ^
is a special character that matches the empty string, but only at the
beginning of a line in the text being matched.  Otherwise it fails to
match anything.  Thus, @samp{^foo} matches a @samp{foo} which occurs at
the beginning of a line.

@item $
is similar to @samp{^} but matches only at the end of a line.  Thus,
@samp{xx*$} matches a string of one @samp{x} or more at the end of a line.

@item \
has two functions: it quotes the special characters (including
@samp{\}), and it introduces additional special constructs.

Because @samp{\} quotes special characters, @samp{\$} is a regular
expression which matches only @samp{$}, and @samp{\[} is a regular
expression which matches only @samp{[}, etc.

For the most part, @samp{\} followed by any character matches only that
character.  However, there are several exceptions: two-character
sequences starting with @samp{\} which have special meanings.  The
second character in the sequence is always an ordinary character on its
own.  Here is a table of `@samp{\}' constructs.

@table @kbd
@item \@{ @dots{} \@}
is a postfix construct, similar to @samp{*} except that it allows you to
specify the number of times the preceding expression must be matched.
So, for example, @samp{ca\@{3\@}r} will match only the string
@samp{caaar}.

If you add a comma after the number of times the expression must be
matched, then the expression must be matched at least as many times as
you specified.  So @samp{ca\@{2,\@}r} will match the strings
@samp{caar}, @samp{caaar}, @samp{caaaar}, and so on.

You can also add a maximum value after the comma, to specify a range
of values.  So @samp{ca\@{1,3\@}r} will match only the strings
@samp{car}, @samp{caar} and @samp{caaar}.

@item \|
specifies an alternative.  Two regular expressions @var{a} and @var{b}
with @samp{\|} in between form an expression that matches anything that
either @var{a} or @var{b} matches.

Thus, @samp{foo\|bar} matches either @samp{foo} or @samp{bar}
but no other string.

@samp{\|} applies to the largest possible surrounding expressions.  Only a
surrounding @samp{\( @dots{} \)} grouping can limit the scope of
@samp{\|}.

@item \( @dots{} \)
is a grouping construct that serves three purposes:

@enumerate
@item
To enclose a set of @samp{\|} alternatives for other operations.
Thus, @samp{\(foo\|bar\)x} matches either @samp{foox} or @samp{barx}.

@item
To enclose a complicated expression for the postfix operators @samp{*},
@samp{+} and @samp{?} to operate on.  Thus, @samp{ba\(na\)*} matches
@samp{bananana}, etc., with any (zero or more) number of @samp{na}
strings.

@item
To mark a matched substring for later reference with @samp{\@var{N}}.
@end enumerate

@item \@var{N}
When you use @samp{\( @dots{} \)} in an expression, you can look for
another match for the exact same text that was matched inside the
@samp{\( @dots{} \)}.  The two-character sequence @samp{\@var{N}} will
match the same text as was matched by the @var{N}th use of @samp{\(
@dots{} \)}.  The first nine uses are remembered, and are assigned the
numbers @samp{1} to @samp{9}.  So @samp{\1} matches the text that was
matched by the first use of @samp{\( @dots{} \)}.

For example, @samp{\([a-z]\)\1} matches any two consecutive lower case
characters.  The @samp{\([a-z]\)} matches any lower case character, while
the @samp{\1} must match the same character.

If a use of @samp{\( @dots{} \)} matches more than once, which often
happens if it is followed by @samp{*} or @samp{+}, only the last match
is stored for use with @samp{\@var{N}}.
@end table
@end table

Here is a moderately complicated regex, which you might use to find
messages from the af-bug or af-user mailing lists.

@example
^From:.*af-\(bug\|user\)@@csv.warwick.ac.uk
@end example

@node Search Case
@section Searching and Case

@vindex case-fold-search
Searches in af normally ignore the case of the text they are searching
through.  Thus, if you specify searching for @samp{foo}, then @samp{Foo}
and @samp{foo} are also considered a match.  Regular expressions, and in
particular character sets, are included: @samp{[ab]} would match
@samp{a} or @samp{A} or @samp{b} or @samp{B}.

If you set the variable @code{case-fold-search} to @code{false}, then
all letters must match exactly, including case.

@node Sorting, Narrowing, Searching, Top
@chapter Sorting Messages
@cindex sorting

Af provides commands for sorting some or all of the messages in a mail
buffer.  Each command prompts for a sort order, and then sorts the
selected messages into that order.

@findex sort-buffer
@findex sort-region
@findex sort-tagset
@table @kbd
@item M-x sort-buffer @var{order} RET
Sort all of the messages in the buffer into @var{order} order.
@item M-x sort-region @var{order} RET
Sort the messages in the region into @var{order} order.
@item M-x sort-tagset @var{order} RET
Sort the messages in the tagset into @var{order} order.  The messages
in the tagset are sorted correctly, but messages which are not in the
tagset are not moved at all.
@end table

The sort orders which af understands are:

@vindex show-dates-in-local-time
@table @code
@item (reverse-)address
The address of the sender of the message, sorted case-independent.
Any full name or routing information in the address is ignored.
@item (reverse-)date
The date the message was sent (or received if the date sent isn't
known), from oldest to newest (newest to oldest).  The variable
@code{show-dates-in-local-time} indicates whether dates should be
compared as they are, or converted to your local time before they are
compared (the default).
@item (reverse-)lines
The number of lines in the message, from smallest to largest (largest to
smallest).
@item (reverse-)mailbox
The (reverse) order of the messages in the folder when it was read.
Messages which were yanked into the buffer after it was read may appear
anywhere in the buffer.
@item (reverse-)sender
The full name of the sender of the message, sorted case-independent.
@item (reverse-)status
The system tags of the message (@pxref{System Tags}).  Messages with no
system tags are sorted after those that have them.
@item (reverse-)subject
The subject of the message, sorted alphabetically and case-independent.
The prefix 'Re: ' is handled specially in subject lines, so that replies
to a message will sort immediately after (before) the original message.
@item (reverse-)tags
The user tags of the message (@pxref{User Tags}).  Messages with no user
tags are sorted after those that have them.
@end table

When you sort, messages which sort identically will remain in their
original order, so sorting a buffer by date and then subject will result
in the messages being in date order within each subject.  This is often
a good approximation to the ``threading'' that news readers such as
@code{trn} do, and is handy for reading mailing lists.

@vindex initial-buffer-sort
Af does not sort your folders by default when it reads them.  If you
have a preference for reading buffers in a certain order, then you can
set the configuration variable @code{initial-buffer-sort} to the sort
ordering you prefer.

If you are familiar with other mail readers it is worth noting that af,
unlike most other mail readers, saves the messages back to the folders
in whatever order you sort them into.  This can often be convenient when
managing large folders.

@node Narrowing, Folders, Sorting, Top
@chapter Narrowing
@cindex widening
@cindex restriction
@cindex narrowing
@cindex accessible part

@dfn{Narrowing} means focusing in on some portion of the buffer, making
the rest temporarily inaccessible.  The portion which you can still get
to is called the @dfn{accessible part}.  Canceling the narrowing, which
makes the entire buffer once again accessible, is called @dfn{widening}.
The amount of narrowing in effect in a buffer at any time is called the
buffer's @dfn{restriction}.

Narrowing can make it easier to concentrate on a set of messages by
eliminating clutter.  It can also be used to restrict the range of
operation of a search command or repeating keyboard macro.

@table @kbd
@item C-x n
Narrow down to between point and mark (@code{narrow-to-region}).
@item C-t n @var{expression} RET
Narrow to the tagset defined by tag-expression
(@code{narrow-to-tagset}).
@item C-x w
Widen to make the entire buffer accessible again (@code{widen}).
@end table

When you have narrowed down to a part of the buffer, that part appears
to be all there is.  You can't see the rest, you can't move into it
(motion commands won't go outside the accessible part), you can't change
it in any way.  However, it is not gone, and if you save the folder all
the inaccessible messages will be saved.  The word @samp{Narrow} appears
in the mode line whenever narrowing is in effect.

@kindex C-x n
@findex narrow-to-region
One narrowing command is @kbd{C-x n} (@code{narrow-to-region}).  It sets
the current buffer's restrictions so that the messages in the region
remain accessible but all messages before or after the region are
inaccessible.  Point and mark do not change.

@kindex C-t n
@findex narrow-to-tagset
Another narrowing command is @kbd{C-t n} (@code{narrow-to-tagset}).  It
prompts for a tag expression, and then set the current buffer's
restrictions so that the messages in the tagset remain accessible but
all the other messages are inaccessible.

@kindex C-x w
@findex widen
The way to cancel narrowing is to widen with @kbd{C-x w} (@code{widen}).
This makes all the messages in the buffer accessible again.

Narrowing can be very useful if you have a set of messages that you want
to deal with independently of any others; such as all the messages from
a mailing list, or from a certain user.  Use @kbd{C-t s}
(@code{search-and-tag}) to tag the messages you are interested in, and
then use @kbd{C-t n} to narrow the buffer to only the tagged messages.
When you are done with the messages, use @kbd{C-x w} to widen to buffer.

Another use for narrowing is when you are using tags to kill messages.
You can use @kbd{C-t n} to narrow to the messages you intend to kill,
and then conveniently scan the messages to make sure that you are happy
to kill them all; using @kbd{C-t u} to untag any messages that you
decide you want to keep.  Finally you can either kill the tagset with
@kbd{C-t C-k} (@code{kill-tagset}), or set the mark and point at
opposite ends of the buffer and use @kbd{C-w} (@code{kill-region}).
When you have finished, use @kbd{C-x w} to widen the buffer.

@c $Id: message.texi,v 1.4 1996/10/06 17:33:52 malc Exp $
