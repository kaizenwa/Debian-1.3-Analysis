head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	97.01.19.18.58.58;	author david;	state Rel;
branches;
next	1.3;

1.3
date	96.10.26.15.15.26;	author david;	state Rel;
branches;
next	1.2;

1.2
date	96.09.13.20.21.29;	author david;	state Rel;
branches;
next	1.1;

1.1
date	96.07.13.20.58.36;	author david;	state Rel;
branches;
next	1.0;

1.0
date	95.12.31.18.19.34;	author david;	state Rel;
branches;
next	;


desc
@Simple rpn calculator, tries to emulate a HP28.
various utilities
@


1.4
log
@Changed dupstr(char *) to dupstr(const char *)
@
text
@/************************************************************************
 * utils.c -- various utilities for rpncalc				*
 *									*
 * Refer to rpncalc.c for copyrights and license permissions.           *
 ************************************************************************/

/* $Id: utils.c,v 1.4 1997/01/19 18:19:23 david Exp david $
 * $Log: utils.c,v $
 * Revision 1.4  1997/01/19 18:19:23  david
 * Changed dupstr(char *) to dupstr(const char *)
 *
 * Revision 1.2  1996/09/13 20:21:29  david
 * lclint additions
 *
 * Revision 1.1  1996/07/13 20:58:36  david
 * Added dupstr()
 * Moved getline() from rpncalc.c into utils.c
 *
 * Revision 1.0  1995/12/31 18:19:34  david
 * Initial revision
 *
 * Revision 1.0  1995/11/25 20:02:25  david
 * Initial revision
 * */

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>

#include "utils.h"

#ifdef HAVE_READLINE
#include <readline/readline.h>
#include <readline/history.h>
#endif

#define LINEFRAGMENT 32

/*@@out@@*/ void *xmalloc(size_t size)	/* safe malloc */
{
  void *ptr;

  ptr=malloc(size);
  if (ptr == NULL) 
  {
    perror("Out of memory!"); 
    exit(1); 
  }

  return ptr;
}

/*@@out@@*/ void *xrealloc(void *ptr, size_t size)	/* save realloc */
{
  ptr=realloc(ptr, size);
  if (ptr == NULL) 
  {
    perror("Out of memory!"); 
    exit(1); 
  }

  return ptr;
}

char *dupstr(const char *s)
{
  char *r;

  r = (char *)xmalloc (strlen (s) + 1);
  strcpy (r, s);
  return (r);
}

/*@@null@@*/ char *getline(void)
/* Read a line of text without imposing an length limit.
   If we readline support is compiled in, use the readline function. */
{
  char *line=NULL;
#ifndef HAVE_READLINE
  int c;
  int i;
#endif

#ifdef HAVE_READLINE
  line=(char*)readline(""); 
#else
  i=0; line=(char *)xmalloc((size_t)(LINEFRAGMENT+1));
  while (((c = getc(stdin)) != EOF) && (c != '\n') && (c != '\0'))
  {
   if ((i > LINEFRAGMENT) &&  (i % LINEFRAGMENT) == 0) 
     line=(char *)xrealloc(line,(size_t)(LINEFRAGMENT+1));
   line[i]=(char)c; i++;
  }
  if ((c != EOF) && (c != '\0')) line[i]='\0';
  else
  {
    free(line); line=NULL;   /* this is readline compatible; 
				return NULL when the input line is empty */
  }
#endif

  return line;
}
@


1.3
log
@Changes in order to make rpncalc compile under SunOs 5.5
@
text
@d4 1
a4 19
 * A little RPN (Reverse Polish Notation) calculator,                   *
 * rudimentary emulating a HP 28S. 					*
 * 								        *
 * rpncalc is (c) David Frey, 1993, 1994, 1995				*
 *								        * 
 * This program is free software; you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation; either version 2 of the License, or    *
 * (at your option) any later version.                                  *
 *									* 
 * This program is distributed in the hope that it will be useful,      *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 * GNU General Public License for more details.                         *
 *									* 
 * You should have received a copy of the GNU General Public License    *
 * along with this program; if not, write to the Free Software          *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *									* 
d7 1
a7 1
/* $Id: utils.c,v 1.2 1996/09/13 20:21:29 david Rel $
d9 3
d30 2
d65 1
a65 1
char *dupstr(char *s)
@


1.2
log
@lclint additions
@
text
@d25 1
a25 1
/* $Id: utils.c,v 1.1 1996/07/13 20:58:36 david Rel david $
d27 3
d43 1
d82 1
a82 1
  r = xmalloc (strlen (s) + 1);
d91 1
a91 1
  unsigned char *line=NULL;
d98 1
a98 1
  line=(unsigned char*)readline(""); 
d100 1
a100 1
  i=0; line=(unsigned char *)xmalloc((size_t)(LINEFRAGMENT+1));
d104 2
a105 2
     line=(unsigned char *)xrealloc(line,(size_t)(LINEFRAGMENT+1));
   line[i]=(unsigned char)c; i++;
@


1.1
log
@Added dupstr()
Moved getline() from rpncalc.c into utils.c
@
text
@d25 1
a25 1
/* $Id: utils.c,v 1.0 1995/12/31 18:19:34 david Rel david $
d27 4
d48 1
a48 1
void *xmalloc(size_t size)	/* safe malloc */
d62 1
a62 1
void *xrealloc(void *ptr, size_t size)	/* save realloc */
d83 1
a83 1
unsigned char *getline(void)
d96 1
a96 1
  i=0; line=xmalloc(LINEFRAGMENT+1);
d100 2
a101 2
     line=xrealloc(line,i+LINEFRAGMENT+1);
   line[i]=c; i++;
@


1.0
log
@Initial revision
@
text
@d25 1
a25 1
/* $Id: utils.c,v 1.0 1995/11/25 20:02:25 david Rel david $
d27 3
d37 7
d58 1
a58 1
void *xrealloc(void *ptr, size_t size)
d68 40
@
