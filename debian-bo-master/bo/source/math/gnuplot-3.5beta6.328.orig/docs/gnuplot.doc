C RCS $Id: gnuplot.doc,v 1.55 1997/01/05 22:03:19 drd Exp $
C 1 November 1996
C Copyright (C) 1986 - 1993, 1996   Thomas Williams, Colin Kelley
C
^ <h2> An Interactive Plotting Program </h2><p>
^ <h2>  Thomas Williams & Colin Kelley</h2><p>
^ <h2>   Version 3.6 organized by: David Denholm </h2><p>
^   Major contributors (alphabetic order):</h2>
^<ul><h3>
^<li>  John Campbell
^<li>  Robert Cunningham
^<li>  David Denholm
^<li>  Gershon Elber
^<li>  Roger Fearick
^<li>  Carsten Grammes
^<li>  Thomas Koenig
^<li>  David Kotz
^<li>  Ed Kubaitis
^<li>  Russell Lang
^<li>  Alexander Lehmann
^<li>  Carsten Steger
^<li>  Tom Tkacik
^<li>  Jos Van der Woude
^<li>  Alex Woo
^</h3></ul> <p>
^<h2>  Copyright (C) 1986 - 1993, 1996   Thomas Williams, Colin Kelley<p>
^   Mailing list for comments: info-gnuplot@dartmouth.edu <p>
^   Mailing list for bug reports: bug-gnuplot@dartmouth.edu<p>
^</h2><p>
^<h3> This manual was prepared by Dick Crawford</h3><p>
^<hr>
1 gnuplot
2 copyright
?copyright
       Copyright (C) 1986 - 1993, 1996   Thomas Williams, Colin Kelley

 Permission to use, copy, and distribute this software and its documentation
 for any purpose with or without fee is hereby granted, provided that the
 above copyright notice appears in all copies and that both that copyright
 notice and this permission notice appear in supporting documentation.

 Permission to modify the software is granted, but not the right to distribute
 the modified code.  Modifications are to be distributed as patches to the
 released version.

 This software is provided "as is" without express or implied warranty.


       AUTHORS
       
       Original Software:
          Thomas Williams,  Colin Kelley.
       
       Gnuplot 2.0 additions:
          Russell Lang, Dave Kotz, John Campbell.
       
       Gnuplot 3.0 additions:
          Gershon Elber and many others.
2 introduction
?introduction
?
 `gnuplot` is a command-driven interactive function and data plotting program.
 It is case sensitive (commands and function names written in lowercase are
 not the same as those written in CAPS).  All command names may be abbreviated
 as long as the abbreviation is not ambiguous.  Any number of commands may
 appear on a line (with the exception that `load` or `call` must be the final
 command), separated by semicolons (;).  Strings are indicated with quotes.
 They may be either single or double quotation marks, e.g.,

       load "filename"
       cd 'dir'

 although there are some subtle differences (see `syntax` for more details).

 Any command-line arguments are assumed to be names of files containing
 `gnuplot` commands, with the exception of standard X11 arguments, which are
 processed first.  Each file is loaded with the `load` command, in the order
 specified.  `gnuplot` exits after the last file is processed.  When no load
 files are named, `gnuplot` enters into an interactive mode.

 Many `gnuplot` commands have multiple options.  These options must appear in
 the proper order, although unwanted ones may be omitted in most cases.  Thus
 if the entire command is "command a b c", then "command a c" will probably
 work, but "command c a" will fail.

 Commands may extend over several input lines by ending each line but the last
 with a backslash (\).  The backslash must be the _last_ character on each
 line.  The effect is as if the backslash and newline were not there.  That
 is, no white space is implied, nor is a comment terminated.  Therefore, 
 commenting out a continued line comments out the entire command (see 
 `comment`).  But note that if an error occurs somewhere on a multi-line
 command, the parser may not be able to locate precisely where the error is
 and in that case will not necessarily point to the correct line.

 In this document, curly braces ({}) denote optional arguments and a vertical
 bar (|) separates mutually exclusive choices.  `gnuplot` keywords or `help`
 topics are indicated by backquotes or `boldface` (where available).  Angle
 brackets (<>) are used to mark replaceable tokens.

 For on-line help on any topic, type `help` followed by the name of the topic
 or just `help` or `?` to get a menu of available topics.

 The new `gnuplot` user should begin by reading about the `plot` command (if
 on-line, type `help plot`).
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/simple/simple.html"> Simple Plots Demo </a>
2 seeking-assistance
?seeking-assistance
 There is a mailing list for `gnuplot` users.  Note, however, that the
 newsgroup
       comp.graphics.apps.gnuplot
 is identical to the mailing list (they both carry the same set of messages).
 We prefer that you read the messages through the newsgroup rather than
 subscribing to the mailing list.  Administrative requests should be sent to
       majordomo@dartmouth.edu
 Send a message with the body (not the subject) consisting of the single word
 "help" (without the quotes) for more details.

 The address for mailing to list members is:
       info-gnuplot@dartmouth.edu

 Bug reports and code contributions should be mailed to:
       bug-gnuplot@dartmouth.edu

 The list of those interested in beta-test versions is:
       info-gnuplot-beta@dartmouth.edu

 There is also a World Wide Web page with up-to-date information, including
 known bugs:
^ <a href="http://www.cs.dartmouth.edu/gnuplot_info.html">
       http://www.cs.dartmouth.edu/gnuplot
^ </a>

 Before seeking help, please check the 
^ <a href="http://www.uni-karlsruhe.de/~ig25/gnuplot-faq.html">
 FAQ (Frequently Asked Questions) list.
^ </a>
 If you do not have a copy of the FAQ, you may request a copy by email from
 the Majordomo address above, or see the WWW `gnuplot` page.

 When posting a question, please include full details of the version of
 `gnuplot`, the machine, and operating system you are using.  A _small_ script
 demonstrating the problem may be useful.  Function plots are preferable to
 datafile plots.  If email-ing to info-gnuplot, please state whether or not
 you are subscribed to the list, so that users who use news will know to email
 a reply to you.  There is a form for such postings on the WWW site.
2 What's New in version 3.6
?what's new in version 3.6
 Gnuplot version 3.6 contains many new features.  This section gives a partial
 list and links to the new items in no particular order.
 
 1. `fit f(x) 'file' via` uses the Levison-Marquardt method to fit data.
 (This is only slightly different from the `gnufit` patch available for 3.5.)
 
 2. Greatly expanded `using` command.
 
 3. `set timefmt` allows for the use of dates as input and output for time
 series plots.  See
^ <a href="http://www.nas.ansa.gov/~woo/gnuplot/timefmt/timefmt.html">
 timedat.dem.
 
 4. Multiline labels and font selection in some drivers.
 
 5. Minor (unlabeled) tics.  See `set mxtics`.
 
 6. `key` options for moving the key box in the page (and even outside of the
 plot), putting a title on it and a box around it, and more.
 
 7. Multiplots on a single logical page with `set multiplot`.
 
 8. Enhanced `postscript` driver with super/subscripts and font changes.
 (This was a separate driver (`enhpost`) that was available as a patch for
 3.5.)
 
 9. Second axes:  use the top and right axes independently of the bottom and
 left, both for plotting and labels.  See `plot`.
 
 10. Special datafile names `'-'` and `""`.  See `plot special-filenames`.
 
 11. Additional coordinate systems for labels and arrows.  See `coordinates`.
 
 12. `set size` tries to plot with a specified aspect ratio.
 
 13. `set missing` now treats missing data correctly.
 
 14. The `call` command: `load` with arguments.
 
 15. More flexible `range` commands with `reverse` and `writeback` keywords.
 
 16. `set encoding` for multi-lingual encoding.
 
 17. New `x11` driver with persistent and multiple windows.
 
 18. New plotting styles: `xerrorbars`, `histeps`, `financebars` and more.
 See `set style`.
 
 19. New tic label formats, including `"%l %L"` which uses the mantissa and
 exponents to a given base for labels.  See `set format`.
 
 20. New drivers, including `cgm` for inclusion into MS-Office applications
 and `gif` for serving plots to the WEB.

 21. Smoothing and spline-fitting options for `plot`.  See `plot smooth`.

 22. `set margin` and `set origin` give much better control over where a
 graph appears on the page.

 23. `set border` now controls each border individually.

 24. The new commands `if` and `reread` allow command loops.

 25. Point styles and sizes, line types and widths can be specified on the
 `plot` command.  Line types and widths can also be specified for grids,
 borders, tics and arrows.  See `plot with`.
2 command-line-editing
?line-editing
?editing
?history
?command-line-editing
 Command-line editing is supported by the Unix, Atari, VMS, MS-DOS and OS/2
 versions of `gnuplot`.  Also, a history mechanism allows previous commands to
 be edited and re-executed.  After the command line has been edited, a newline
 or carriage return will enter the entire line without regard to where the
 cursor is positioned.

 (The readline function in `gnuplot` is not the same as the readline used in
 GNU Bash and GNU Emacs.  If the GNU version is desired, it may be selected
 instead of the `gnuplot` version at compile time.)


 The editing commands are as follows:

@start table - first is interactive cleartext form
       `Line-editing`:
       
       ^B    moves back a single character.
       ^F    moves forward a single character.
       ^A    moves to the beginning of the line.
       ^E    moves to the end of the line.
       ^H    and DEL delete the previous character.
       ^D    deletes the current character.
       ^K    deletes from current position to the end of line.
       ^L,^R redraws line in case it gets trashed.
       ^U    deletes the entire line.
       ^W    deletes the last word.

       `History`:

       ^P    moves back through history.
       ^N    moves forward through history.
#Character && Function \\ \hline
#\multicolumn{3}{|c|}{Line Editing}\\
#\verb~^B~ && move back a single character.\\
#\verb~^F~ && move forward a single character.\\
#\verb~^A~ && move to the beginning of the line.\\
#\verb~^E~ && move to the end of the line.\\
#\verb~^H, DEL~ && delete the previous character.\\
#\verb~^D~ && delete the current character.\\
#\verb~^K~ && delete from current position to the end of line.\\
#\verb~^L, ^R~ && redraw line in case it gets trashed.\\
#\verb~^U~ && delete the entire line. \\
#\verb~^W~ && delete from the current word to the end of line. \\ \hline
#\multicolumn{3}{|c|}{History} \\
#\verb~^P~ && move back through history.\\
#\verb~^N~ && move forward through history.\\
%Character@@Function
%_
%@@Line Editing
%^B@@move back a single character.
%^F@@move forward a single character.
%^A@@move to the beginning of the line.
%^E@@move to the end of the line.
%^H, DEL@@delete the previous character.
%^D@@delete the current character.
%^K@@delete from current position to the end of line.
%^L, ^R@@redraw line in case it gets trashed.
%^U@@delete the entire line.
%^W@@delete from the current word to the end of line.
%_
%@@History
%^P@@move back through history.
%^N@@move forward through history.
@end table

 On the IBM PC, the use of a TSR program such as DOSEDIT or CED may be desired
 for line editing.  The default makefile assumes that this is the case;  by
 default `gnuplot` will be compiled with no line-editing capability.  If you
 want to use `gnuplot`'s line editing, set READLINE in the makefile and add
 readline.obj to the link file.  The following arrow keys may be used on the
 IBM PC and Atari versions if readline is used:

@start table - first is interactive cleartext form
       Left  Arrow      - same as ^B.
       Right Arrow      - same as ^F.
       Ctrl Left  Arrow - same as ^A.
       Ctrl Right Arrow - same as ^E.
       Up    Arrow      - same as ^P.
       Down  Arrow      - same as ^N.
#Arrow key  & Function & \\ \hline
#Left       & same as \verb~^B~. & \\
#Right      & same as \verb~^F~. & \\
#Ctrl Left  & same as \verb~^A~. & \\
#Ctrl Right & same as \verb~^E~. & \\
#Up         & same as \verb~^P~. & \\
#Down       & same as \verb~^N~. & \\
%Arrow key@@Function
%_
%Left Arrow@@same as ^B.
%Right Arrow@@same as ^F.
%Ctrl Left Arrow@@same as ^A.
%Ctrl Right Arrow@@same as ^E.
%Up Arrow@@same as ^P.
%Down Arrow@@same as ^N.
%_
@end table

 The Atari version of readline defines some additional key aliases:

@start table - first is interactive cleartext form
       Undo            - same as ^L.
       Home            - same as ^A.
       Ctrl Home       - same as ^E.
       Esc             - same as ^U.
       Help            - `help` plus return.
       Ctrl Help       - `help `.
#Arrow key & Function & \\ \hline
#Undo      & same as \verb~^L~. & \\
#Home      & same as \verb~^A~. & \\
#Ctrl Home & same as \verb~^E~. & \\
#Esc       & same as \verb~^U~. & \\
#Help      & `{\bf help}' plus return. & \\
#Ctrl Help & `{\bf help }'. & \\
%Arrow key@@Function
%_
%Undo@@same as ^L.
%Home@@same as ^A.
%Ctrl Home@@same as ^E.
%Esc@@same as ^U.
%Help@@help plus return.
%Ctrl Help@@help .
%_
@end table
2 comment
?comments
 Comments are supported as follows: a # may appear in most places in a line
 and `gnuplot` will ignore the rest of the line.  It will not have this effect
 inside quotes, inside numbers (including complex numbers), inside command
 substitutions, etc.  In short, it works anywhere it makes sense to work.
2 coordinates
?coordinates
 The commands `set arrow`, `set key`, and `set label` allow you to draw
 something at an arbitrary position on the graph.  This position is specified
 by the syntax:

       {<system>} <x>, {<system>} <y> {,{<system>} <z>}

 Each <system> can either be `first`, `second`, `graph` or `screen`.

 `first` places the x, y, or z coordinate in the system defined by the left
 and bottom axes; `second` places it in the system defined by the second axes
 (top and right); `graph` specifies the area within the axes---0,0 is bottom
 left and 1,1 is top right (for splot, 0,0,0 is bottom left of plotting area;
 use negative z to get to the base---see `set ticslevel`); and `screen`
 specifies the screen area (the entire area---not just the portion selected by
 `set size`), with 0,0 at bottom left and 1,1 at top right.

 If the coordinate system for x is not specified, `first` is used.  If the
 system for y is not specified, the one used for x is adopted.

 If one (or more) axis is timeseries, the appropriate coordinate should
 be given as a quoted time string according to the `timefmt` format string.
 See `set xdata` and `set timefmt`.  `gnuplot` will also accept an integer
 expression, which will be interpreted as seconds from 1 January 2000.
2 environment
?environment
 A number of shell environment variables are understood by `gnuplot`.  None of
 these are required, but may be useful.

 If GNUTERM is defined, it is used as the name of the terminal type to be
 used.  This overrides any terminal type sensed by `gnuplot` on start-up, but
 is itself overridden by the .gnuplot (or equivalent) start-up file (see
 `start-up`) and, of course, by later explicit changes.

 On Unix, AmigaDOS, AtariTOS, MS-DOS and OS/2, GNUHELP may be defined to be
 the pathname of the HELP file (gnuplot.gih).

 On VMS, the logical name gnuplot$HELP should be defined as the name of the
 help library for `gnuplot`.  The `gnuplot` help can be put inside any system
 help library, allowing access to help from both within and outside `gnuplot`
 if desired.

 On Unix, HOME is used as the name of a directory to search for a .gnuplot
 file if none is found in the current directory.  On AmigaDOS, AtariTOS,
 MS-DOS and OS/2, gnuplot is used.  On VMS, SYS$LOGIN: is used. See `help
 start-up`.

 On Unix, PAGER is used as an output filter for help messages.

 On Unix, AtariTOS and AmigaDOS, SHELL is used for the `shell` command.  On
 MS-DOS and OS/2, COMSPEC is used for the `shell` command.

 On MS-DOS, if the BGI interface is used, BGI is used to point to the full
 path of the BGI drivers directory.  Furthermore, SVGA is used to name the
 Super VGA BGI driver in 800x600 resolution and its mode of operation is
 Name.Mode.  E.g., if the Super VGA driver is
       C:\TC\BGI\SVGADRV.BGI
 and mode 3 is used for 800x600 resolution, then use the following:
       set BGI=C:\TC\BGI
       set SVGA=SVGADRV.3

 FIT_SCRIPT may be used to specify a `gnuplot` command to be executed when a
 fit is interrupted---see `fit`.  FIT_LOG specifies the filename of the
 logfile maintained by fit.
2 expressions
?expressions
 In general, any mathematical expression accepted by C, FORTRAN, Pascal, or
 BASIC is valid.  The precedence of these operators is determined by the
 specifications of the C programming language.  White space (spaces and tabs)
 is ignored inside expressions.

 Complex constants are expressed as {<real>,<imag>}, where <real> and <imag>
 must be numerical constants.  For example, {3,2} represents 3 + 2i; {0,1}
 represents 'i' itself.  The curly braces are explicitly required here.

 Note that gnuplot uses both "real" and "integer" arithmetic, like FORTRAN and
 C.  Integers are entered as "1", "-10", etc; reals as "1.0", "-10.0", "1e1",
 3.5e-1, etc.  The most important difference between the two forms is in
 division: division of integers truncates: 5/2 = 2; division of reals does
 not: 5.0/2.0 = 2.5.  In mixed expressions, integers are "promoted" to reals
 before evaluation: 5/2e0 = 2.5.  The result of division of a negative integer
 by a positive one may vary among compilers.  Try a test like "print -5/2" to
 determine if your system chooses -2 or -3 as the answer.

 The real and imaginary parts of complex expressions are always real, whatever
 the form in which they are entered: in {3,2} the "3" and "2" are reals, not
 integers.
3 functions
?expressions functions
?functions
 The functions in `gnuplot` are the same as the corresponding functions in
 the Unix math library, except that all functions accept integer, real, and
 complex arguments, unless otherwise noted.

 For those functions that accept or return angles that may be given in either
 degrees or radians (sin(x), cos(x), tan(x), asin(x), acos(x), atan(x),
 atan2(x) and arg(z)), the unit may be selected by `set angles`, which
 defaults to radians.

@start table
#Function & Arguments & Returns \\ \hline
%Function@Arguments@Returns
%_
4 abs
?expressions functions abs
?functions abs
?abs
#abs(x) & any  &  absolute value of {\tt x}, $|x|$; same type \\
#abs(x) & complex &  length of {\tt x}, $\sqrt{{\mbox{real}(x)^{2} +
#\mbox{imag}(x)^{2}}}$ \\
%abs(x)@any@absolute value of x, $|x|$; same type
%abs(x)@complex@length of x, $sqrt{roman real (x) sup 2 + roman imag (x) sup 2}$
 The `abs` function returns the absolute value of its argument.  The returned
 value is of the same type as the argument.

 For complex arguments, abs(x) is defined as the length of x in the complex
 plane [i.e.,  sqrt(real(x)**2 + imag(x)**2) ].
4 acos
?expressions functions acos
?functions acos
?acos
#acos(x) & any  & $\cos^{-1} x$ (inverse cosine) \\
%acos(x)@any@$cos sup -1 x$ (inverse cosine)
 The `acos` function returns the arc cosine (inverse cosine) of its argument.
 `acos` returns its argument in radians or degrees, as selected by `set
 angles`.
4 acosh
?expressions functions acosh
?functions acosh
?acosh
#acosh(x) & any  & $\cosh^{-1} x$ (inverse hyperbolic cosine) in radians \\
%acosh(x)@any@$cosh sup -1 x$ (inverse hyperbolic cosine) in radians
 The `acosh` function returns the inverse hyperbolic cosine of its argument in
 radians.
4 arg
?expressions functions arg
?functions arg
?arg
#arg(x) & complex & the phase of $x$ \\
%arg(x)@complex@the phase of $x$
 The `arg` function returns the phase of a complex number in radians or
 degrees, as selected by `set angles`.
4 asin
?expressions functions asin
?functions asin
?asin
#asin(x) & any  & $\sin^{-1} x$ (inverse sin) \\
%asin(x)@any@$sin sup -1 x$ (inverse sin)
 The `asin` function returns the arc sin (inverse sin) of its argument.
 `asin` returns its argument in radians or degrees, as selected by `set
 angles`.
4 asinh
?expressions functions asinh
?functions asinh
?asinh
#asinh(x) & any  & $\sinh^{-1} x$ (inverse hyperbolic sin) in radians \\
%asinh(x)@any@$sinh sup -1 x$ (inverse hyperbolic sin) in radians
 The `asinh` function returns the inverse hyperbolic sin of its argument in
 radians.
4 atan
?expressions functions atan
?functions atan
?atan
#atan(x) & any  & $\tan^{-1} x$ (inverse tangent) \\
%atan(x)@any@$tan sup -1 x$ (inverse tangent)
 The `atan` function returns the arc tangent (inverse tangent) of its
 argument.  `atan` returns its argument in radians or degrees, as selected by
 `set angles`.
4 atan2
?expressions functions atan2
?functions atan2
?atan2
#atan2(y,x) & int or real & $\tan^{-1} (y/x)$ (inverse tangent) \\
%atan2(y,x)@int or real@$tan sup -1 (y/x)$ (inverse tangent)
 The `atan2` function returns the arc tangent (inverse tangent) of the ratio
 of the real parts of its arguments.  `atan2` returns its argument in radians
 or degrees, as selected by `set angles`, in the correct quadrant.
4 atanh
?expressions functions atanh
?functions atanh
?atan
#atanh(x) & any  & $\tanh^{-1} x$ (inverse hyperbolic tangent) in radians \\
%atanh(x)@any@$tanh sup -1 x$ (inverse hyperbolic tangent) in radians
 The `atanh` function returns the inverse hyperbolic tangent of its argument
 in radians.
4 besj0
?expressions functions besj0
?functions besj0
?besj0
#besj0(x) & int or real &  $j_{0}$ Bessel function of $x$, in radians \\
%besj0(x)@int or real@$j sub 0$ Bessel function of $x$, in radians
 The `besj0` function returns the j0th Bessel function of its argument.
 `besj0` expects its argument to be in radians.
4 besj1
?expressions functions besj1
?functions besj1
?besj1
#besj1(x) & int or real & $j_{1}$ Bessel function of $x$, in radians \\
%besj1(x)@int or real@$j sub 1$ Bessel function of $x$, in radians
 The `besj1` function returns the j1st Bessel function of its argument.
 `besj1` expects its argument to be in radians.
4 besy0
?expressions functions besy0
?functions besy0
?besy0
#besy0(x) & int or real & $y_{0}$ Bessel function of $x$, in radians \\
%besy0(x)@int or real@$y sub 0$ Bessel function of $x$, in radians
 The `besy0` function returns the y0th Bessel function of its argument.
 `besy0` expects its argument to be in radians.
4 besy1
?expressions functions besy1
?functions besy1
?besy1
#besy1(x) & int or real & $y_{1}$ Bessel function of $x$, in radians \\
%besy1(x)@int or real@$y sub 1$ Bessel function of $x$, in radians
 The `besy1` function returns the y1st Bessel function of its argument.
 `besy1` expects its argument to be in radians.
4 ceil
?expressions functions ceil
?functions ceil
?ceil
#ceil(x) & any & $\lceil x \rceil$, smallest integer not less than $x$
#(real part) \\
%ceil(x)@any@$left ceiling x right ceiling$, smallest integer not less than $x$ (real part)
 The `ceil` function returns the smallest integer that is not less than its
 argument.  For complex numbers, `ceil` returns the smallest integer not less
 than the real part of its argument.
4 cos
?expressions functions cos
?functions cos
?cos
#cos(x) & any & $\cos x$, cosine of $x$ \\
%cos(x)@radians@$cos~x$, cosine of $x$
 The `cos` function returns the cosine of its argument.  `cos` accepts its
 argument in radians or degrees, as selected by `set angles`.
4 cosh
?expressions functions cosh
?functions cosh
?cosh
#cosh(x) & any & $\cosh x$, hyperbolic cosine of $x$ in radians \\
%cosh(x)@any@$cosh~x$, hyperbolic cosine of $x$ in radians
 The `cosh` function returns the hyperbolic cosine of its argument.  `cosh`
 expects its argument to be in radians.
4 erf
?expressions functions erf
?functions erf
?erf
#erf(x) & any & $\mbox{Erf}(\mbox{real}(x))$,  error function of real($x$) \\
%erf(x)@any@$erf ( roman real (x))$, error function of real ($x$)
 The `erf` function returns the error function of the real part of its
 argument.  If the argument is a complex value, the imaginary component is
 ignored.
4 erfc
?expressions functions erfc
?functions erfc
?erfc
#erfc(x) & any & $\mbox{Erfc}(\mbox{real}(x))$,  1.0 - error function of real($x$) \\
%erfc(x)@any@$erfc ( roman real (x))$, 1.0 - error function of real ($x$)
 The `erfc` function returns 1.0 - the error function of the real part of its
 argument.  If the argument is a complex value, the imaginary component is
 ignored.
4 exp
?expressions functions exp
?functions exp
?exp
#exp(x) & any & $e^{x}$,  exponential function of $x$ \\
%exp(x)@any@$e sup x$, exponential function of $x$
 The `exp` function returns the exponential function of its argument (`e`
 raised to the power of its argument).  On some implementations (notably
 suns), exp(-x) returns undefined for very large x.  A user-defined function
 like safe(x) = x<-100 ? 0 : exp(x) might prove useful in these cases.
4 floor
?expressions functions floor
?functions floor
?floor
#floor(x) & any & $\lfloor x \rfloor$,  largest integer not greater
#than $x$ (real part) \\
%floor(x)@any@$left floor x right floor$, largest integer not greater than $x$ (real part)
 The `floor` function returns the largest integer not greater than its
 argument.  For complex numbers, `floor` returns the largest integer not
 greater than the real part of its argument.
4 gamma
?expressions functions gamma
?functions gamma
?gamma
#gamma(x) & any & $\mbox{Gamma}(\mbox{real}(x))$,  gamma function of real($x$) \\
%gamma(x)@any@$GAMMA ( roman real (x))$, gamma function of real ($x$)
 The `gamma` function returns the gamma function of the real part of its
 argument.  For integer n, gamma(n+1) = n!.  If the argument is a complex
 value, the imaginary component is ignored.
4 ibeta
?expressions functions ibeta
?functions ibeta
?ibeta
#ibeta(p,q,x) & any & $\mbox{Ibeta}(\mbox{real}(p,q,x))$,  ibeta function of real($p$,$q$,$x$) \\
%ibeta(p,q,x)@any@$Ibeta ( roman real (p,q,x))$, ibeta function of real ($p$,$q$,$x$)
 The `ibeta` function returns the incomplete beta function of the real parts
 of its arguments. p, q > 0 and x in [0:1].  If the arguments are complex,
 the imaginary components are ignored.
4 inverf
?expressions functions inverf
?functions inverf
?inverf
#inverf(x) & any &  inverse error function of real($x$)  \\
%inverf(x)@any@inverse error function real($x$)
 The `inverf` function returns the inverse error function of the real part
 of its argument.
4 igamma
?expressions functions igamma
?functions igamma
?igamma
#igamma(a,x) & any & $\mbox{Igamma}(\mbox{real}(a,x))$,  igamma function of real($a$,$x$) \\
%igamma(a,x)@any@$Igamma ( roman real (a,x))$, igamma function of real ($a$,$x$)
 The `igamma` function returns the incomplete gamma function of the real
 parts of its arguments.  a > 0 and x >= 0.  If the arguments are complex,
 the imaginary components are ignored.
4 imag
?expressions functions imag
?functions imag
?imag
#imag(x) & complex &  imaginary part of $x$ as a real number \\
%imag(x)@complex@imaginary part of $x$ as a real number
 The `imag` function returns the imaginary part of its argument as a real
 number.
4 invnorm
?expressions functions invnorm
?functions invnorm
?invnorm
#invnorm(x) & any &  inverse normal distribution function of real($x$)  \\
%invnorm(x)@any@inverse normal distribution function real($x$)
 The `invnorm` function returns the inverse normal distribution function of
 the real part of its argument.
4 int
?expressions functions int
?functions int
?int
#int(x) & real &  integer part of $x$, truncated toward zero \\
%int(x)@real@integer part of $x,$ truncated toward zero
 The `int` function returns the integer part of its argument, truncated
 toward zero.
4 lgamma
?expressions functions lgamma
?functions lgamma
?lgamma
#lgamma(x) & any & $\mbox{Lgamma}(\mbox{real}(x))$,  lgamma function of real($x$) \\
%lgamma(x)@any@$Lgamma ( roman real (x))$, lgamma function of real ($x$)
 The `lgamma` function returns the natural logarithm of the gamma function
 of the real part of its argument.  If the argument is a complex value, the
 imaginary component is ignored.
4 log
?expressions functions log
?functions log
?log
#log(x) & any & $\log_{e} x$,  natural logarithm (base $e$) of $x$ \\
%log(x)@any@$ln~x$, natural logarithm (base $e$) of $x$
 The `log` function returns the natural logarithm (base `e`) of its argument.
4 log10
?expressions functions log10
?functions log10
?log10
#log10(x) & any & $\log_{10} x$,  logarithm (base $10$) of $x$ \\
%log10(x)@any@${log sub 10}~x$, logarithm (base $10$) of $x$
 The `log10` function returns the logarithm (base 10) of its argument.
4 norm
?expressions functions norm
?functions norm
?norm
#norm(x) & any & normal distribution (Gaussian) function of real($x$) \\
%norm(x)@any@$norm(x),$ normal distribution function of real($x$)
 The `norm` function returns the normal distribution function (or Gaussian)
 of the real part of its argument.
4 rand
?expressions functions rand
?functions rand
?rand
#rand(x) & any & $\mbox{Rand}(\mbox{real}(x))$,  pseudo random number generator \\
%rand(x)@any@$rand ( roman real (x))$, pseudo random number generator
 The `rand` function returns a pseudo random number in the interval [0:1]
 using the real part of its argument as a seed.  If seed < 0, the sequence
 is (re)initialized.  If the argument is a complex value, the imaginary
 component is ignored.
4 real
?expressions functions real
?functions real
?real
#real(x) & any &  real part of $x$ \\
%real(x)@any@real part of $x$
 The `real` function returns the real part of its argument.
4 sgn
?expressions functions sgn
?functions sgn
?sgn
#sgn(x) & any & 1 if $x>0$, -1 if $x<0$, 0 if $x=0$. imag($x$) ignored \\
%sgn(x)@any@1 if $x > 0$, -1 if $x < 0$, 0 if $x = 0$. $roman imag (x)$ ignored
 The `sgn` function returns 1 if its argument is positive, -1 if its argument
 is negative, and 0 if its argument is 0.  If the argument is a complex value,
 the imaginary component is ignored.
4 sin
?expressions functions sin
?functions sin
?sin
#sin(x) & any & $\sin x$, sine of $x$ \\
%sin(x)@any@$sin~x$, sine of $x$
 The `sin` function returns the sine of its argument.  `sin` expects its
 argument to be in radians or degrees, as selected by `set angles`.
4 sinh
?expressions functions sinh
?functions sinh
?sinh
#sinh(x) & any & $\sinh x$, hyperbolic sine $x$ in radians \\
%sinh(x)@any@$sinh~x$, hyperbolic sine $x$ in radians
 The `sinh` function returns the hyperbolic sine of its argument.  `sinh`
 expects its argument to be in radians.
4 sqrt
?expressions functions sqrt
?functions sqrt
?sqrt
#sqrt(x) & any & $\sqrt{x}$,  square root of $x$ \\
%sqrt(x)@any@$sqrt x $, square root of $x$
 The `sqrt` function returns the square root of its argument.
4 tan
?expressions functions tan
?functions tan
?tan
#tan(x) & any & $\tan x$,  tangent of $x$ \\
%tan(x)@any@$tan~x$, tangent of $x$
 The `tan` function returns the tangent of its argument.  `tan` expects
 its argument to be in radians or degrees, as selected by `set angles`.
4 tanh
?expressions functions tanh
?functions tanh
?tanh
#tanh(x) & any & $\tanh x$, hyperbolic tangent of $x$ in radians\\
%tanh(x)@any@$tanh~x$, hyperbolic tangent of $x$ in radians
 The `tanh` function returns the hyperbolic tangent of its argument.  `tanh`
 expects its argument to be in radians.
@end table

 A few additional functions are also available.

@start table
#Function & Arguments & Returns \\ \hline
%Function@Arguments@Returns
%_
4 column
?expressions functions column
?functions column
?column
#column(x) & int & column $x$ during datafile manipulation. \\
%column(x)@int@ column $x$ during datafile manipulation.
 `column(x)` may be used only in expressions as part of `using` manipulations
 to fits or datafile plots.  See `plot datafile using`.
4 tm_hour
?expressions tm_hour
?functions tm_hour
#tm\_hour(x) & int & the hour \\
%tm_hour(x)@int@the hour
 The `tm_hour` function interprets its argument as a time, in seconds from 
 1 Jan 2000.  It returns the hour (an integer in the range 0--23) as a real.
4 tm_mday
?expressions tm_mday
?functions tm_mday
#tm\_mday(x) & int & the day of the month \\
%tm_mday(x)@int@the day of the month
 The `tm_mday` function interprets its argument as a time, in seconds from 
 1 Jan 2000.  It returns the day of the month (an integer in the range 1--31)
 as a real.
4 tm_min
?expressions tm_min
?functions tm_min
#tm\_min(x) & int & the minute \\
%tm_min(x)@int@the minute
 The `tm_min` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the minute (an integer in the range 0--59) as a real.
4 tm_mon
?expressions tm_mon
?functions tm_mon
#tm\_mon(x) & int & the month \\
%tm_mon(x)@int@the month
 The `tm_mon` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the month (an integer in the range 1--12) as a real.
4 tm_sec
?expressions tm_sec
?functions tm_sec
#tm\_sec(x) & int & the second \\
%tm_sec(x)@int@the second
 The `tm_sec` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the second (an integer in the range 0--59) as a real.
4 tm_wday
?expressions tm_wday
?functions tm_wday
#tm\_wday(x) & int & the day of the week \\
%tm_wday(x)@int@the day of the week
 The `tm_wday` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the day of the week (an integer in the range 1--7) as
 a real.
4 tm_yday
?expressions tm_yday
?functions tm_yday
#tm\_yday(x) & int & the day of the year \\
%tm_yday(x)@int@the day of the year
 The `tm_yday` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the day of the year (an integer in the range 1--366)
 as a real.
4 tm_year
?expressions tm_year
?functions tm_year
#tm\_year(x) & int & the year \\
%tm_year(x)@int@the year
 The `tm_year` function interprets its argument as a time, in seconds from
 1 Jan 2000.  It returns the year (an integer) as a real.
4 valid
?expressions functions valid
?functions valid
?valid
#valid(x) & int & test validity of $\mbox{column}(x)$ during datafile manip.\\
%valid(x)@int@ test validity of column($x$) during datafile manip.
 `valid(x)` may be used only in expressions as part of `using` manipulations
 to fits or datafile plots.  See `plot datafile using`.
@end table
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/airfoil/airfoil.html">Use of functions and complex variables for airfoils </a>
3 operators
?expressions operators
?operators
 The operators in `gnuplot` are the same as the corresponding operators in the
 C programming language, except that all operators accept integer, real, and
 complex arguments, unless otherwise noted.  The ** operator (exponentiation)
 is supported, as in FORTRAN.

 Parentheses may be used to change order of evaluation.
4 unary
?expressions operators unary
?operators unary
?unary
 The following is a list of all the unary operators and their usages:

@start table - first is interactive cleartext form
     Symbol      Example    Explanation
       -           -a          unary minus
       +           +a          unary plus (no-operation)
       ~           ~a        * one's complement
       !           !a        * logical negation
       !           a!        * factorial
       $           $3        * call arg/column during `using` manipulation
#\multicolumn{3}{|c|}{Unary Operators}\\
#Symbol & Example & Explanation \\ \hline
#\verb@-@ & \verb@-a@ & unary minus \\
#\verb@+@ & \verb@+a@ & unary plus (no-operation) \\
#\verb@~@ & \verb@~a@ & * one's complement \\
#\verb@!@ & \verb@!a@ & * logical negation \\
#\verb@!@ & \verb@a!@ & * factorial \\
#\verb@$@ & \verb@$3@ & * call arg/column during `using` manipulation \\
%Symbol@Example@Explanation
%_
%-@-a@unary minus
%+@+a@unary plus (no-operation)
%~@~a@* one's complement
%!@!a@* logical negation
%!@a!@* factorial
%$@$3@* call arg/column during `using` manipulation
%_
@end table
 (*) Starred explanations indicate that the operator requires an integer
 argument.

 Operator precedence is the same as in Fortran and C.  As in those languages,
 parantheses may be used to change the order of operation.  Thus -2**2 = -4,
 but (-2)**2 = 4.

 The factorial operator returns a real number to allow a greater range.
4 binary
?expressions operators binary
?operators binary
?binary
 The following is a list of all the binary operators and their usages:

@start table - first is interactive cleartext form
     Symbol       Example      Explanation
       **          a**b          exponentiation
       *           a*b           multiplication
       /           a/b           division
       %           a%b         * modulo
       +           a+b           addition
       -           a-b           subtraction
       ==          a==b          equality
       !=          a!=b          inequality
       <           a<b           less than
       <=          a<=b          less than or equal to
       >           a>b           greater than
       >=          a>=b          greater than or equal to
       &           a&b         * bitwise AND
       ^           a^b         * bitwise exclusive OR
       |           a|b         * bitwise inclusive OR
       &&          a&&b        * logical AND
       ||          a||b        * logical OR
#\multicolumn{3}{|c|}{Binary Operators} \\
#Symbol & Example & Explanation \\ \hline
#\verb~**~ & \verb~a**b~ & exponentiation\\
#\verb~*~ & \verb~a*b~ & multiplication\\
#\verb~/~ & \verb~a/b~ & division\\
#\verb~%~ & \verb~a%b~ & * modulo\\
#\verb~+~ & \verb~a+b~ & addition\\
#\verb~-~ & \verb~a-b~ & subtraction\\
#\verb~==~ & \verb~a==b~ & equality\\
#\verb~!=~ & \verb~a!=b~ & inequality\\
#\verb~<~ & \verb~a<b~ & less than\\
#\verb~<=~ & \verb~a<=b~ & less than or equal to\\
#\verb~>~ & \verb~a>b~ & greater than\\
#\verb~>=~ & \verb~a>=b~ & greater than or equal to\\
#\verb~&~ & \verb~a&b~ & * bitwise AND\\
#\verb~^~ & \verb~a^b~ & * bitwise exclusive OR\\
#\verb~|~ & \verb~a|b~ & * bitwise inclusive OR\\
#\verb~&&~ & \verb~a&&b~ & * logical AND\\
#\verb~||~ & \verb~a||b~ & * logical OR\\
%Symbol@Example@Explanation
%_
%**@a**b@exponentiation
%*@a*b@multiplication
%/@a/b@division
%%@a%b@* modulo
%+@a+b@addition
%-@a-b@subtraction
%==@a==b@equality
%!=@a!=b@inequality
%<@a<b@less than
%<=@a<=b@less than or equal to
%>@a>b@greater than
%>=@a>=b@greater than or equal to
%&@a&b@* bitwise AND
%^@a^b@* bitwise exclusive OR
%|@a|b@* bitwise inclusive OR
%&&@a&&b@* logical AND
%||@a||b@* logical OR

@end table
 (*) Starred explanations indicate that the operator requires integer
 arguments.

 Logical AND (&&) and OR (||) short-circuit the way they do in C.  That is,
 the second `&&` operand is not evaluated if the first is false; the second
 `||` operand is not evaluated if the first is true.
4 ternary
?expressions operators ternary
?operators ternary
?ternary
 There is a single ternary operator:

@start table - first is interactive cleartext form
     Symbol       Example      Explanation
       ?:          a?b:c     ternary operation
#\multicolumn{3}{|c|}{Ternary Operator} \\
#Symbol & Example & Explanation \\ \hline
#\verb~?:~ & \verb~a?b:c~ & ternary operation\\
%Symbol@Example@Explanation
%_
%?:@a?b:c@* ternary operation

@end table
 The ternary operator behaves as it does in C.  The first argument (a), which
 must be an integer, is evaluated.  If it is true (non-zero), the second
 argument (b) is evaluated and returned; otherwise the third argument (c) is
 evaluated and returned.

 The ternary operator is very useful both in constructing piecewise functions
 and in plotting points only when certain conditions are met.

 Examples:

 Plot a function that is to equal sin(x) for 0 <= x < 1, 1/x for 1 <= x < 2,
 and undefined elsewhere:
       f(x) = 0<=x && x<1 ? sin(x) : 1<=x && x<2 ? 1/x : 1/0
       plot f(x)
^ <img align=bottom src="http://www.nas.nasa.gov/~woo/gnuplot/doc/ternary.gif">
 Note that `gnuplot` quietly ignores undefined values, so the final branch of
 the function (1/0) will produce no plottable points.  Note also that f(x)
 will be plotted as a continuous function across the discontinuity if a line
 style is used.  To plot it discontinuously, create separate functions for the
 two pieces.  (Parametric functions are also useful for this purpose.)

 For data in a file, plot the average of the data in columns 2 and 3 against
 the datum in column 1, but only if the datum in column 4 is non-negative:

       plot 'file' using 1:( $4<0 ? 1/0 : ($2+$3)/2 )

 Please see `plot data-file using` for an explanation of the `using` syntax.
3 user-defined
?expressions user-defined
?user-defined
?variables
 New user-defined variables and functions of one through five variables may
 be declared and used anywhere, including on the `plot` command itself.

 User-defined function syntax:
       <func-name>( <dummy1> {,<dummy2>} ... {,<dummy5>} ) = <expression>

 where <expression> is defined in terms of <dummy1> through <dummy5>.

 User-defined variable syntax:
       <variable-name> = <constant-expression>

 Examples:
       w = 2
       q = floor(tan(pi/2 - 0.1))
       f(x) = sin(w*x)
       sinc(x) = sin(pi*x)/(pi*x)
       delta(t) = (t == 0)
       ramp(t) = (t > 0) ? t : 0
       min(a,b) = (a < b) ? a : b
       comb(n,k) = n!/(k!*(n-k)!)
       len3d(x,y,z) = sqrt(x*x+y*y+z*z)
       plot f(x) = sin(x*a), a = 0.2, f(x), a = 0.4, f(x)

^ <img align=botton src="http://www.nas.nasa.gov/~woo/gnuplot/doc/userdefined.gif">
 Note that the variable `pi` is already defined.  But it is in no way magic;
 you may redefine it to be whatever you like.

 Valid names are the same as in most programming languages: they must begin
 with a letter, but subsequent characters may be letters, digits, "$", or "_".
 Note, however, that the `fit` mechanism uses several variables with names
 that begin "FIT_".  It is safest to avoid using such names.  "FIT_LIMIT",
 however, is one that you may wish to redefine.

 See `show functions` and `show variables`.
2 glossary
?glossary
 Throughout this document an attempt has been made to maintain consistency of
 nomenclature.  This cannot be wholly successful because as `gnuplot` has
 evolved over time, certain command and keyword names have been adopted that
 preclude such perfection.  This section contains explanations of the way
 some of these terms are used.

 A "page" or "screen" is the entire area addressable by `gnuplot`.  On a
 monitor, it is the full screen; on a plotter, it is a single sheet of
 paper.

 A screen may contain one or more "graphs".  A graph is defined by an
 abscissa and an ordinate, although these need not actually appear on it.

 A graph may contain one or more "plots".  A plot is a single function or
 data set.

 The plots on a graph may have individual names.  These may be listed together
 with a sample of the line and/or point style used to represent them in the
 "key", sometimes also called the "legend".

 The word "title" occurs with multiple meanings in `gnuplot`.  In this
 document, it will always be preceded by the adjective "graph", "plot", or
 "key" to differentiate among them.

 A graph may have up to four labelled axes.  Various commands have the name of
 an axis built into their names, such as `set xlabel`.  Other commands have
 one or more axis names as options, such as `set logscale xy`.  The names of
 the four axes for these usages are "x" for the axis along the bottom border
 of the plot, "y" for the left border, "x2" for the top border, and "y2" for
 the right border.  "z" also occurs in commands used with three-dimensional
 plotting.
2 start-up
?startup
?start
?.gnuplot
 When `gnuplot` is run, it looks for an initialization file to load.  This
 file is called `.gnuplot` on Unix and AmigaDOS systems, and `GNUPLOT.INI`
 on other systems.  If this file is not found in the current directory, the
 program will look for it in the home directory (under AmigaDOS,
 Atari(single)TOS, MS-DOS and OS/2, the environment variable `gnuplot` should
 contain the name of this directory).  Note: if NOCWDRC is defined during the
 installation, `gnuplot` will not read from the current directory.

 If this file is found, `gnuplot` executes the commands in this file.  This
 is most useful for setting the terminal type and defining any functions or
 variables that are used often.
2 substitution
?substitution
 Command-line substitution is specified by a system command enclosed in
 backquotes.  This command is spawned and the output it produces replaces
 the name of the command (and backquotes) on the command line.

 Newlines in the output produced by the spawned command are replaced with
 blanks.

 Command-line substitution can be used anywhere on the `gnuplot` command
 line.

 Example:

 This will run the program `leastsq` and replace `leastsq` (including
 backquotes) on the command line with its output:
       f(x) = `leastsq`

 or, in VMS
       f(x) = `run leastsq`
2 syntax
?syntax
?specify
?punctuation
 The general rules of syntax and punctuation in `gnuplot` are that keywords
 and options are order-dependent.  Options and any accompanying parameters are
 separated by spaces whereas lists and coordinates are separated by commas.
 Ranges are separated by colons and enclosed in braces [], text and file names
 are enclosed in quotes, and a few miscellaneous things are enclosed in
 parentheses.  Brackets {} are used for a few special purposes.

 Commas are used to separate coordinates on the `set` commands `arrow`,
 `key`, and `label`; the list of variables being fitted (the list after the
 `via` keyword on the `fit` command); lists of discrete contours or the loop
 parameters which specify them on the `set cntrparam` command; the arguments
 of the `set` commands `dgrid3d`, `dummy`, `isosamples`, `offsets`, `origin`,
 `samples`, `size`, `time`, and `view`; lists of tics or the loop parameters
 which specify them; the offsets for titles and axis labels; parametric
 functions to be used to calculate the x, y, and z coordinates on the `plot`,
 `replot` and `splot` commands; and the complete sets of keywords specifying
 individual plots (data sets or functions) on the `plot`, `replot` and `splot`
 commands.

 Parentheses are used to delimit sets of explicit tics (as opposed to loop
 parameters) and to indicate computations in the `using` filter of the `fit`,
 `plot`, `replot` and `splot` commands.

 (Parentheses and commas are also used as usual in function notation.)

 Braces are used to delimit ranges, whether they are given on `set`, `plot` or
 `splot` commands.

 Colons are used to separate extrema in `range` specifications (whether they
 are given on `set`, `plot` or `splot` commands) and to separate entries in
 the `using` filter of the `plot`, `replot`, `splot` and `fit` commands.

 Semicolons are used to separate commands given on a single line.

 Brackets are used in text to be specially processed by some terminals, like
 `postscript`.  They are also used to denote complex numbers: {3,2} = 3 + 2i.

 Text may be enclosed in single- or double-quotes.  Backslash processing of
 sequences like \n (newline) and \345 (octal character code) is performed for
 double-quoted strings, but not for single-quoted strings.

 The justification is the same for each line of a multi-line string.  Thus the
 center-justified string
       "This is the first line of text.\nThis is the second line."
 will produce
                        This is the first line of text.
                           This is the second line.
 but
       'This is the first line of text.\nThis is the second line.'
 will produce
           This is the first line of text.\nThis is the second line.

 At present you should not embed \n inside {} when using the enhanced option
 of the postscript terminal.

 The EEPIC, Imagen, Uniplex, LaTeX, and TPIC drivers allow a newline to be
 specified by \\ in a single-quoted string or \\\\ in a double-quoted string.

 Back-quotes are used to enclose system commands for substitution.
1 commands
?commands
2 cd
?cd
 The `cd` command changes the working directory.

 Syntax:
       cd '<directory-name>'

 The directory name must be enclosed in quotes.

 Examples:
       cd 'subdir'
       cd ".."

 DOS users _must_ use single-quotes---backslash [\] has special significance
 inside double-quotes.  For example,
       cd "c:\newdata"
 fails, but
       cd 'c:\newdata'
 works as expected.
2 call
?call
 The `call` command is identical to the load command with one exception: you
 can have up to ten additional parameters to the command (delimited according
 to the standard parser rules) which can be substituted into the lines read
 from the file.  As each line is read from the `call`ed input file, it is
 scanned for the sequence `$` (dollar-sign) followed by a digit (0--9).  If
 found, the sequence is replaced by the corresponding parameter from the
 `call` command line.  If the parameter was specified as a string in the
 `call` line, it is substituted without its enclosing quotes.  `$` followed by
 any character other than a digit will be that character.  E.g. use `$$` to
 get a single `$`.  Providing more than ten parameters on the `call` command
 line will cause an error.  A parameter that was not provided substitutes as
 nothing.  Files being `call`ed may themselves contain `call` or `load`
 commands.

 The `call` command _must_ be the last command on a multi-command line.

 Syntax:
       call "<input-file>" <parameter-0> <parm-1> ... <parm-9>

 The name of the input file must be enclosed in quotes, and it is recommended
 that parameters are similarly enclosed in quotes (future versions of gnuplot
 may treat quoted and unquoted arguments differently).

 Example:

 If the file 'calltest.gp' contains the line:
       print "p0=$0 p1=$1 p2=$2 p3=$3 p4=$4 p5=$5 p6=$6 p7=x$7x"

 entering the command:
       call 'calltest.gp' "abcd" 1.2 + "'quoted'" -- "$2"

 will display:
       p0=abcd p1=1.2 p2=+ p3='quoted' p4=- p5=- p6=$2 p7=xx

 NOTE: there is a clash in syntax with the datafile `using` callback
 operator.  Use `$$n` or `column(n)` to access column n from a datafile inside
 a `call`ed datafile plot.
2 clear
?clear
 The `clear` command erases the current screen or output device as specified
 by `set output`.  This usually generates a formfeed on hardcopy devices.  Use
 `set terminal` to set the device type.

 For some terminals `clear` erases only the portion of the plotting surface
 defined by `set size`, so for these it can be used in conjunction with `set
 multiplot` to create an inset.

 Example:
       set multiplot
       plot sin(x)
       set origin 0.5,0.5
       set size 0.4,0.4
       clear
       plot cos(x)
       set nomultiplot

 Please see `set multiplot`, `set size`, and `set origin` for details of these
 commands.
2 exit
?exit
?quit
 The commands `exit` and `quit` and the END-OF-FILE character will exit
 `gnuplot`.  Each of these commands will clear the output device (as does
 the `clear` command) before exiting.
2 fit
?fit
 This implementation incorporates the capability of nonlinear least squares
 fitting using the Marquardt-Levenberg Algorithm.  It may fit any user-defined
 function to any set of data points (x,y) or (x,y,z).  x, y, z and the
 function's return type _must_ be real!  Any variable occurring in the
 function body may serve as a fit parameter (fitting functions without
 adjustable parameters make no sense).

 Syntax:
       fit {[xrange]} {[yrange]} <function>
           '<datafile>' {datafile-modifiers}
            via {'<parameter file>' | <var1>,<var2>,...}

 Notice that `via` is now a required keyword, to distinguish it from a scanf
 format string.

 [xrange] and [yrange] are of the form [{variable=}{<min>}{:<max>}], allowing
 the range of the fit to be limited temporarily in a manner analogous to
 `plot`.  <function> is any valid `gnuplot` expression, although it is usual
 to use a previously user-defined function of the form f(x) or f(x,y).
  <datafile> is treated as in the `plot` command.  All the modifiers for
 datafiles (`using`, `every`,...) in `plot` are available here (except
 `smooth`)---see `plot datafile` for full details.  The default columns for x
 and y are 1 and 2.  These may be changed by the `using x:y` mechanism.  If
 `using` has a third entry (a column or an expression), it will be interpreted
 as the standard deviation of each y value and will be used to compute the
 weight; otherwise all data will be weighted equally.  If four columns are
 specified, they are x:y:z:error---note that an error _must_ be specified in
 order to perform a 3D fit.  If errors are not available, a constant value can
 be specified, e.g., `using ...:(1)`.  Initial values for the parameters to be
 fit may be specified in a (load-)file wherein each line is of the form:
  
       varname = value

 Comments, marked by '#', and blank lines are permissible.  The form

       varname = value       # FIXED

 means that the variable is treated as a `fixed parameter` that is initialized
 but will not be adjusted.  It is not necessary (but sometimes useful for
 clarity) to specify them at all.  The keyword '# FIXED' has to appear in
 exactly this form.

 The other means of specifying the adjustable parameters is to provide a
 comma-separated list of variable names after the `via` keyword.  If any of
 these variables do not yet exist within the current `gnuplot` session, they
 are created with an initial value of 1.0, but the fit is more likely to
 converge if a more appropriate starting value is given.  If this form is
 used, it may prove beneficial to iterate the fit, allowing only one or two
 variables to be adjusted at a time until a reasonably close fit is obtained,
 before allowing `fit` to vary all parameters.

 After each iteration step, detailed information is given about the fit's
 state, both on the screen and on a logfile "fit.log".  This file will never be
 erased but always appended to so that the fit's history isn't lost.  After
 each iteration step, the fit may be interrupted by pressing Ctrl-C (any key
 _but_ Ctrl-C under MSDOS and Atari Multitasking Systems).  Then you have the
 options of stopping (and accepting the current parameter values), continuing
 the iteration of the fit, or executing a `gnuplot` command specified by an
 environment variable FIT_SCRIPT.  A `plot` or `load` command may be useful in
 this context.

 Special `gnuplot` variable:

       FIT_LIMIT
 may be specified to change the default epsilon limit (1e-5).  When the sum
 of squared residuals changes between two iteration steps by less than a
 factor of this number, the fit is considered to have 'converged'.

 [FIT_SKIP was available in previous releases of gnufit.  Its functionality
 is now obtained using the `every` modifier for datafiles.  FIT_INDEX was
 previously available in order to allow multi-branch fitting.  Multi-branch
 fitting in 2D can now be done as a pseudo-3D fit in which the y values are
 the dataline number (`using 1:-1:...`) or index (`using 1:-2:...`).]

 Environment variables:

       FIT_LOG
 changes the logfile's path from './fit.log' (write permission is necessary).

       FIT_SCRIPT
 specifies a command to be executed after an user interrupt.

 Examples:
       f(x) = a*x**2 + b*x + c
       fit f(x) 'measured.dat' via 'start.par'
       fit f(x) 'measured.dat' using 3:($7-5) via 'start.par'
       fit f(x) './data/trash.dat' using 1:2:3 via a, b, c
       fit f(x,y) 'surface.dat' using 1:2:3:(1) via a, b, c

 See also `update`
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/fit/fit.html"> See the `fit` demos. </a>
2 help
?help
 The `help` command displays on-line help. To specify information on a
 particular topic use the syntax:

       help {<topic>}

 If <topic> is not specified, a short message is printed about `gnuplot`.
 After help for the requested topic is given, a menu of subtopics is given;
 help for a subtopic may be requested by typing its name, extending the help
 request.  After that subtopic has been printed, the request may be extended
 again or you may go back one level to the previous topic.  Eventually, the
 `gnuplot` command line will return.

 If a question mark (?) is given as the topic, the list of topics currently
 available is printed on the screen.
2 if
?if
 The `if` command allows commands to be executed conditionally.

 Syntax:
       if (<condition>) <command-line>

 <condition> will be evaluated.  If it is true (non-zero), then the command(s)
 of the <command-line> will be executed.  If <condition> is false (zero), then
 the entire <command-line> is ignored.  Note that use of `;` to allow multiple
 commands on the same line will _not_ end the conditionalized commands.

 Examples:
       pi=3
       if (pi!=acos(-1)) print "?Fixing pi!"; pi=acos(-1); print pi
 will display:
       ?Fixing pi!
       3.14159265358979
 but
       if (1==2) print "Never see this"; print "Or this either"
 will not display anything.

 See `reread` for an example of how `if` and `reread` can be used together to
 perform a loop.
2 load
?load
 The `load` command executes each line of the specified input file as if it
 had been typed in interactively.  Files created by the `save` command can
 later be `load`ed.  Any text file containing valid commands can be created
 and then executed by the `load` command.  Files being `load`ed may themselves
 contain `load` or `call` commands.  See `comment` for information about
 comments in commands.

 The `load` command _must_ be the last command on a multi-command line.

 Syntax:
       load "<input-file>"

 The name of the input file must be enclosed in quotes.

 Examples:
       load 'work.gnu'
       load "func.dat"

 The `load` command is performed implicitly on any file names given as
 arguments to `gnuplot`.  These are loaded in the order specified, and
 then `gnuplot` exits.  See also `call`.
2 pause
?pause
 The `pause` command displays any text associated with the command and then
 waits a specified amount of time or until the carriage return is pressed.
 `pause` is especially useful in conjunction with `load` files.

 Syntax:
       pause <time> {"<string>"}

 <time> may be any integer constant or expression.  Choosing -1 will wait
 until a carriage return is hit, zero (0) won't pause at all, and a positive
 integer will wait the specified number of seconds.  `pause 0` is synonymous
 with `print`.

 Note: Since `pause` communicates with the operating system rather than the
 graphics, it may behave differently with different device drivers (depending
 upon how text and graphics are mixed).

 Examples:
       pause -1    # Wait until a carriage return is hit
       pause 3     # Wait three seconds
       pause -1  "Hit return to continue"
       pause 10  "Isn't this pretty?  It's a cubic spline."

2 plot
?plot
?splot
 `plot` and `splot` are the primary commands of the program. They create
 graphs of functions and data in many, many ways.  `plot` is used to draw 2-d
 functions and data; `splot` draws 2-d projections of 3-d surfaces and data.

 Syntax:
       plot {<ranges>}
            {<function> | {"<datafile>" {datafile-modifiers}}}
            {axes <axes>} {<title-spec>} {with <style>} 
            {, {definitions,} <function> ...}
       splot {<ranges>}
             {<function> | {"<datafile>" {datafile-modifiers}}}
             {<title-spec>} {with <style>} 
             {, {definitions,} <function> ...}

 where either a <function> or the name of a data file enclosed in quotes is
 supplied.  A function is a mathematical expression, or a pair (`plot`) or
 triple (`splot`) of mathematical expressions in the case of parametric
 functions.  The expressions may be defined completely or in part earlier in
 the stream of `gnuplot` commands (see `user-defined`).

 It is also possible to define functions and parameters on the `plot` command
 itself.  This is done merely by isolating them from other items with commas. 

 For `plot` there are four possible sets of axes available; the keyword <axes>
 is used to change the axes for which the following plots should be scaled.
 `x1y1` refers to the axes on the bottom and left; `x2y2` to those on the top
 and right; `x1y2` to those on the bottom and right; and `x2y1` to those on
 the top and left.  Ranges specified on the `plot` command apply only to the
 first set of axes (bottom left).

 The `axes` option has not been implemented for `splot`.

 By default `splot` draws the xy plane completely below the plotted data.  The
 offset between the lowest ztic and the xy plane can be changed by `set
 ticslevel`.  The orientation of a 'splot' is controlled by `set view`.  See
 `set view` and `set ticslevel` for more information.

 Examples:
       plot sin(x)
       splot x * y
       plot f(x) = sin(x*a), a = .2, f(x), a = .4, f(x)
       plot [t=1:10] [-pi:pi*2] tan(t), \
            "data.1" axes x1y2 using (tan($2)):($3/$4) \
                     smooth csplines notitle with lines 5

3 data-file
?plot data-file
?plot datafile
?splot data-file
?splot datafile
?data-file
?datafile
?data
 Discrete data contained in a file can be displayed by specifying the name of
 the data file (enclosed in quotes) on the `plot` or `splot` command line.

 Syntax:
       {s}plot '<file_name>' {binary | matrix}
                             {index <index list>}
                             {every <every list>}
                             {thru <thru expression>}
                             {using <using list>}
                             {smooth <option>}

 The modifiers `binary`, `matrix`, `index`, `every`, `thru`, `using`, and
 `smooth` are discussed separately.  In brief, `binary` (`splot` only) is a
 flag indicating that the file is binary, `matrix` (`splot` only) is a flag
 indicating that the data are in matrix form, `index` selects which data sets
 in a multi-data-set file are to be plotted, `every` specifies which lines
 within a single data set are to be plotted, `using` determines how the
 columns within a single line are to be interpreted (`thru` is a special case
 of `using`), and `smooth` allows for simple interpolation and approximation
 (`plot` only).

 Data files should contain one data point per line.  Lines beginning with #
 (or ! on VMS) will be treated as comments and ignored.  For `plot`s, each
 data point represents an (x,y) pair.  For `splot`s, each point is an (x,y,z)
 triple.  For `plot`s with error bars (see `set style errorbars`), each data
 point is (x,y,ydelta), (x,y,ylow,yhigh), (x,y,xdelta), (x,y,xlow,xhigh), or
 (x,y,xlow,xhigh,ylow,yhigh).  In all cases, the numbers on each line of a
 data file must be separated by white space (one or more blanks or tabs),
 unless a format specifier is provided by the `using` option.  This white
 space divides each line into columns.

 Data may be written in exponential format with the exponent preceded by the
 letter e, E, d, D, q, or Q.

 For `plot`s, only one column (the y value) need be provided.  For `splot`s,
 provide either one column (z) or three (x,y,z).  (It is no longer necessary
 to specify `parametric` mode for three-column splots.)  If x (and y) are
 omitted, `gnuplot` provides integer values starting at 0.

 In datafiles, blank lines (lines with no characters other than blanks and a
 line feed or carriage return) are significant---pairs of blank lines separate
 `index`es (see `plot datafile index`).  Data separated by double blank lines
 are treated as if they were in separate data files.

 Single blank lines separate points in a `plot`, or isolines in a `splot`.
 No line will join points separated by a blank line in either a `plot` or
 `splot`.  For `splot`, if all isolines (groups of contiguous points) are of
 equal length, `gnuplot` will draw cross-isolines in the opposite direction.
 This is termed "grid data", and is required for contouring (`set contour`)
 and hidden-line removal (`set hidden3d`).

 If autoscaling has been enabled (`set autoscale`), the axes are automatically
 extended to include all datapoints, with a whole number of tic marks if tics
 are being drawn.  This has two consequences: i) For `splot`, the corner of
 the surface may not coincide with the corner of the base.  In this case, no
 vertical line is drawn.  ii) When plotting data with the same x range on a
 dual-axis graph, the x coordinates may not coincide if the x2tics are not
 being drawn.  This is because the x axis has been autoextended to a whole
 number of tics, but the x2 axis has not.  The following example illustrates
 the problem:

       reset; plot '-', '-'
       1 1
       19 19
       e
       1 1
       19 19
       e
4 binary
?plot data-file binary
?splot data-file binary
?plot datafile binary
?splot datafile binary
?plot binary
?splot binary
?data-file binary
?datafile binary
?binary
?binary data
?binary files
 In previous versions, `gnuplot` dynamically detected binary data files.  It
 is now necessary to specify the keyword `binary` directly after the filename.
 Currently, binary data is supported only for `splot`, since a format for
 binary data in 2-d has not been designed.

 Single precision floats are stored in a binary file as follows:

       <N+1>  <y0>   <y1>   <y2>  ...  <yN>
        <x0> <z0,0> <z0,1> <z0,2> ... <z0,N>
        <x1> <z1,0> <z1,1> <z1,2> ... <z1,N>
         :      :      :      :   ...    :


 which are converted into triplets:

       <x0> <y0> <z0,0>
       <x0> <y1> <z0,1>
       <x0> <y2> <z0,2>
        :    :     :
       <x0> <yN> <z0,N>

       <x1> <y0> <z1,0>
       <x1> <y1> <z1,1>
        :    :     :

 These triplets are then converted into `gnuplot` iso-curves and then
 `gnuplot` proceeds in the usual manner to do the rest of the plotting.

 A collection of matrix and vector manipulation routines (in C) is provided
 in `binary.c`.  The routine to write binary data is

       int fwrite_matrix(file,m,nrl,nrl,ncl,nch,row_title,column_title)

 An example of using these routines is provided in the file `bf_test.c`, which
 generates binary files for the demo file `demo/binary.dem`.

 The `index` keyword is not supported, since the file format allows only one
 surface per file.  The `every` and `using` filters are supported.  `using`
 operates as if the data were read in the above triplet form.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/binary/binary.html">Binary File Splot Demo.</a>
4 every
?plot data-file every
?plot datafile every
?splot data-file every
?splot datafile every
?plot every
?splot every
?data-file every
?datafile every
?every
 The `every` keyword allows a periodic sampling of a data set to be plotted.

 Syntax:
       plot 'file' every {<point_incr>}
                           {:{<line_incr>}
                             {:{<start_point>}
                               {:{<start_line>}
                                 {:{<end_point>}
                                   {:<end_line>}}}}}

 This plots a subset of the data in "file".  The points are selected according
 to a loop from <`start_point`> to <`end_point`> with increment <`point_incr`>
 and the lines according to a loop from <`start_line`> to <`end_line`> with
 increment <`line_incr`>.

 Any of the numbers can be omitted; the increments default to unity, the start
 values to the first point or line, and the end values to the last point or
 line.  If `every` is not specified, all points in all lines are plotted.

 Examples:
       every :::::10    # selects the first 10 lines
       every 2:2        # selects every other point in every other line
       every ::5:15     # selects points 5 through 15 in each line

 To plot a single line from a 3-d datafile, one trick is to set <`start_line`>
 to the desired line, and set <`line_incr`> large enough that no subsequent
 lines will be selected.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/simple/simple.html">Simple Plot Demos </a>,
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/surfacea/surfacea.html">Non-parametric splot demos </a>, and
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/surfaceb/surfaceb.html">Parametric splot demos.</a>
4 example datafile
?plot data-file example
?plot datafile example
?splot data-file example
?splot datafile example
?plot example
?splot example
?datafile example
?data-file example
?example
 This example compares the data in the file population.dat to a theoretical
 curve:

       pop(x) = 103*exp((1965-x)/10)
       plot [1960:1990] 'population.dat', pop(x)

 The file "population.dat" might contain:

       # Gnu population in Antarctica since 1965
          1965   103
          1970   55
          1975   34
          1980   24
          1985   10

^ <img align=bottom src="http://www.nas.nasa.gov/~woo/gnuplot/doc/population.gif">

 A simple example of plotting a 3-d data file is

       splot 'datafile.dat'

 where the file "datafile.dat" might contain:

       # The valley of the Gnu.
          0 0 10
          0 1 10
          0 2 10

          1 0 10
          1 1 5
          1 2 10

          2 0 10
          2 1 1
          2 2 10

          3 0 10
          3 1 0
          3 2 10

 Note that "datafile.dat" defines a 4 by 3 grid ( 4 rows of 3 points each ).
 Rows are separated by blank lines.

^ <img align=bottom src="http://www.nas.nasa.gov/~woo/gnuplot/doc/splot.gif">
 Note also that the x value is held constant within each isoline.  If you
 instead keep y constant, and plot with hidden-line removal enabled, you will
 find that the surface is drawn 'inside-out'.

 Actually it is not necessary to keep the x values constant within an isoline,
 nor is it necessary to keep the y values the same along the perpendicular
 isolines.  `gnuplot` requires only that the number of points be the same
 along each isoline.
4 index
?plot data-file index
?plot datafile index
?splot data-file index
?splot datafile index
?plot index
?splot index
?data-file index
?datafile index
?index
 The `index` keyword allows only some of the data sets in a multi-data-set
 file to be plotted.

 Syntax:
       plot 'file' index <m>{{:<n>}:<p>}

 Data sets (surfaces for `splot`) are separated by pairs of blank lines.
 `index <m>` selects only set <m>; `index <m>:<n>` selects sets in the range
 <m> to <n>; and `index <m>:<n>:<p>` selects indices <m>, <m>+<p>, <m>+2<p>,
 etc., but stopping at <n>.  Following C indexing, the index 0 is assigned to
 the first data set in the file.  Specifying too large an index results in an
 error message.  If `index` is not specified, all sets are plotted as a single
 data set.

 Example:
       plot 'file' index 4:5
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/multimsh/multimsh.html"> splot with indices demo. </a>
4 matrix
?plot data-file matrix
?plot datafile matrix
?splot data-file matrix
?splot datafile matrix
?plot matrix
?splot matrix
?data-file matrix
?datafile matrix
?matrix
 The `matrix` flag indicates that the data are stored in matrix format.  In
 its present implementation the z-values are read in a row at a time, i. e.,
       z11 z12 z13 z14 ...
       z21 z22 z23 z24 ...
       z31 z32 z33 z34 ...
 and so forth.  The row and column indices are used for the x- and y-values.
4 smooth
?plot data-file smooth
?plot datafile smooth
?splot data-file smooth
?splot datafile smooth
?plot smooth
?splot smooth
?data-file smooth
?datafile smooth
?smooth
 `gnuplot` includes a few general-purpose routines for interpolation and
 approximation of data; these are grouped under the `smooth` option.  More
 sophisticated data processing may be performed by preprocessing the data
 externally or by using `fit` with an appropriate model.

 Syntax:
       smooth {unique | csplines | acsplines | bezier | sbezier}

 `unique` plots the data after making them monotonic.  Each of the other
 routines uses the data to determine the coefficients of a continuous curve
 between the endpoints of the data.  This curve is then plotted in the same
 manner as a function, that is, by finding its value at uniform intervals
 along the abscissa (see `set samples`) and connecting these points with
 straight line segments (if a line style is chosen).

 If `autoscale` is in effect, the ranges will be computed such that the
 plotted curve lies within the borders of the graph.

 If too few points are available to allow the selected option to be applied,
 an error message is produced.  The minimum number is one for `unique`, four
 for `acsplines`, and three for the others.

 The `smooth` options have no effect on function plots.  Neither have they
 been installed for `splot`.
5 acsplines
?plot data-file smooth acsplines
?plot datafile smooth acsplines
?data-file smooth acsplines
?datafile smooth acsplines
?plot smooth acsplines
?plot acsplines
?smooth acsplines
?acsplines
 `acsplines` approximates the data with a "natural smoothing spline".  After
 the data are made monotonic in x (see `smooth unique`), a curve is piecewise
 constructed from segments of cubic polynomials whose coefficients are found
 by the weighting the data points; the weights are taken from the third column
 in the data file.  That default can be modified by the third entry in the
 `using` list, e.g.,
       plot 'data-file' using 1:2:(1.0) smooth acsplines

 Qualitatively, the absolute magnitude of the weights determines the number
 of segments used to construct the curve.  If the weights are large, the
 effect of each datum is large and the curve approaches that produced by
 connecting consecutive points with natural cubic splines.  If the weights are
 small, the curve is composed of fewer segments and thus is smoother; the
 limiting case is the single segment produced by a weighted linear least
 squares fit to all the data.  The smoothing weight can be expressed in terms
 of errors as a statistical weight for a point divided by a "smoothing factor"
 for the curve so that (standard) errors in the file can be used as smoothing
 weights.

 Example:
       sw(x,S)=1/(x*x*S)
       plot 'data_file' using 1:2:(sw($3,100)) smooth acsplines
5 bezier
?plot data-file smooth bezier
?plot datafile smooth bezier
?plot smooth bezier
?data-file smooth bezier
?dat-file smooth bezier
?plot bezier
?smooth bezier
?bezier
 The `bezier` option approximates the data with a Bezier curve of degree n
 (the number of data points) that connects the endpoints.
5 csplines
?plot data-file smooth csplines
?plot datafile smooth csplines
?plot smooth csplines
?data-file smooth csplines
?datafile smooth csplines
?plot csplines
?smooth csplines
?csplines
 The `csplines` option connects consecutive points by natural cubic splines
 after rendering the data monotonic (see `smooth unique`).
5 sbezier
?plot data-file smooth sbezier
?plot datafile smooth sbezier
?plot smooth sbezier
?data-file smooth sbezier
?datafile smooth sbezier
?plot sbezier
?smooth sbezier
?sbezier
 The `sbezier` option first renders the data monotonic (`unique`) and then
 applies the `bezier` algorithm.
5 unique
?plot data-file smooth unique
?plot datafile smooth unique
?plot smooth unique
?data-file smooth unique
?datafile smooth unique
?plot unique
?smooth unique
?unique
 The `unique` option makes the data monotonic in x; points with the same
 x-value are replaced by a single point having the average y-value.  The
 resulting points are then connected by straight line segments.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/mgr/mgr.html"> See demos. </a>
4 special-filenames
?plot data-file special-filenames
?plot datafile special-filenames
?splot data-file special-filenames
?splot datafile special-filenames
?plot special-filenames
?splot special-filenames
?datafile special-filenames
?special-filenames
 A special filename of `'-'` specifies that the data are inline; i.e., they
 follow the command.  Only the data follow the command; `plot` options like
 filters, titles, and line styles remain on the 'plot' command line.  This is
 similar to << in unix shell script, and $DECK in VMS DCL.  The data are
 entered as though they are being read from a file, one data point per record.
 The letter "e" at the start of the first column terminates data entry.  The
 `using` option can be applied to these data---using it to filter them through
 a function might make sense, but selecting columns probably doesn't!

 `'-'` is intended for situations where it is useful to have data and commands
 together, e.g., when `gnuplot` is run as a sub-process of some front-end
 application.  Some of the demos, for example, might use this feature.

 If you use `'-'` with `replot`, you may need to enter the data more than once
 (see `replot`).

 A blank filename ('') specifies that the previous filename should be reused.
 This can be useful with things like

       plot 'a/very/long/filename' using 1:2, '' using 1:3, '' using 1:4

 On some computer systems with a popen function (Unix), the datafile can be
 piped through a shell command by starting the file name with a '<'.  For
 example,

       pop(x) = 103*exp(-x/10)
       plot "< awk '{print $1-1965, $2}' population.dat", pop(x)

 would plot the same information as the first population example but with
 years since 1965 as the x axis.  If you want to execute this example, you
 have to delete all comments from the data file above or substitute the
 following command for the first part of the command above (the part up to
 the comma):

       plot "< awk '$0 !~ /^#/ {print $1-1965, $2}' population.dat"

 While this approach is most flexible, it is possible to achieve simple
 filtering with the `using` or `thru` keywords.
4 thru
?plot data-file thru
?plot datafile thru
?splot data-file thru
?splot datafile thru
?plot thru
?splot thru
?data-file thru
?datafile thru
?thru
 The `thru` function is provided for backward compatibility.

 Syntax:
       plot 'file' thru f(x)

 It is equivalent to:

       plot 'file' using 1:(f($2))

 While the latter appears more complex, it is much more flexible.  The more
 natural

       plot 'file' thru f(y)

 also works (i.e. you can use y as the dummy variable).

 `thru` is parsed for `splot` and `fit` but has no effect.
4 using
?plot data-file using
?plot datafile using
?splot data-file using
?splot datafile using
?plot using
?splot using
?data-file using
?datafile using
?using
 The most common datafile modifier is `using`.

 Syntax:
       plot 'file' using {<entry> {:<entry> {:<entry> ...}}} {'format'}

 If a format is specified, each datafile line is read using the C library's
 scanf function, with the specified format string.  Otherwise the line is read
 and broken into columns at spaces or tabs.  A format cannot be specified if
 time-format data is being used (this must be done by `set data time`).

 The resulting array of data is then sorted into columns according to the
 entries.  Each <entry> may be a simple column number, which selects the
 datum, an expression enclosed in parentheses, or empty.  The expression can
 use $1 to access the first item read, $2 for the second item, and so on.  It
 can also use `column(x)` and `valid(x)` where x is an arbitrary expression
 resulting in an integer.  `column(x)` returns the x'th datum; `valid(x)`
 tests that the datum in the x'th column is a valid number.  A column number
 of 0 generates a number increasing (from zero) with each point, and is reset
 upon encountering two blank lines.  A column number of -1 gives the data line
 number, which starts at 0, increments at single blank lines, and is reset at
 double blank lines.  A column number of -2 gives the index number, which is
 incremented only when two blank lines are found.  An empty <entry> will
 default to its order in the list of entries.  For example, `using ::4` is
 interpreted as `using 1:2:4`.

 If the `using` list for a 2D data file has but a single entry, that <entry>
 will be used for y and the data point number is used for x; for example,
 "`plot 'file' using 1`" is identical to "`plot 'file' using 0:1`".  For 3D
 data files, the listed entry is used for z, the data point number for x, and
 the line number for y; thus "`splot 'file' using 1`" is identical to "`splot
 'file' using 0:-1:1`".

 N.B.---the `call` command also uses $'s as a special character.  See `call`
 for details about how to include a column number in a `call` argument list.

 The interpretation of the `using` entries depends on the plot and style.  For
 `splot`, a single <entry> is z or three entries are (x,y,z) (unless `set
 mapping` has been used).  For `plot`, a single <entry> is y.  For `plot` or
 `fit`, the first two entries are x and y; additional entries are usually
 errors in x and/or y.  See `set style` for more details about the structure
 of files containing error information.

 Examples:

 This creates a plot of the sum of the 2nd and 3rd data against the first:
 (The format string specifies comma- rather than space-separated columns.)
       plot 'file' using 1:($2+$3) '%lf,%lf,%lf'

 In this example the data are read from the file "MyData" using a more
 complicated format:
       plot "MyData" using "%*lf%lf%*20[^\n]%lf"

 The meaning of this format is:

       %*lf        ignore the first number
       %lf         read in the second and assign to x
       %*20[^\n]   ignore 20 non-newline characters
       %lf         read in the y value

 Note that the use of newline (\n) requires use of double-quotes rather than
 single-quotes.

 One trick is to use the ternary `?:` operator to filter data:

       plot 'file' using 1:($3>10 ? $2 : 1/0)

 which plots the datum in column two against that in column one provided
 the datum in column three exceeds ten.  `1/0` is undefined; `gnuplot`
 quietly ignores undefined points, so unsuitable points are suppressed.

 In fact, you can use a constant expression for the column number, provided it
 doesn't start with an opening parenthesis; constructs like `using
 0+(complicated expression)` can be used.  The crucial point is that the
 expression is evaluated once if it doesn't start with a left parenthesis, or
 once for each data point read if it does.

 If timeseries data are being used, the time can span multiple columns.  The
 starting column should be specified.  Note that the spaces within the time
 must be included when calculating starting columns for other data.  E.g., if
 the first element on a line is a time with an embedded space, the y value
 should be specified as column three.

 It should be noted that `plot 'file'`, `plot 'file' using 1:2`, and `plot
 'file' using ($1):($2)` can be subtly different: 1) if `file` has some lines
 with one column and some with two, the first will invent x values when they
 are missing, the second will quietly ignore the lines with one column, and
 the third will store an undefined value for lines with one point (so that in
 a plot with lines, no line joins points across the bad point); 2) if a line
 contains text at the first column, the first will abort the plot on an error,
 but the second and third should quietly skip the garbage.

 In fact, it is often possible to plot a file with lots of lines of garbage at
 the top simply by specifying

       plot 'file' using 1:2

 If you want to leave text in your data files, it is always safe to put the
 comment character (#) in the first column of the text lines.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/using/using.html"> Feeble using demos. </a>
3 errorbars
?plot errorbars
?splot errorbars
?errorbars
 Error bars are supported for 2-d data file plots by reading one to four
 additional columns (or `using` entries); these additional values are used in
 different ways by the various errorbar styles.

 No support exists for any error bars for `splot`s.

 In the default situation, `gnuplot` expects to see three, four, or six
 numbers on each line of the data file---either

       (x, y, ydelta),
       (x, y, ylow, yhigh),
       (x, y, xdelta),
       (x, y, xlow, xhigh),
       (x, y, xdelta, ydelta), or
       (x, y, xlow, xhigh, ylow, yhigh).

 The x coordinate must be specified.  The order of the numbers must be
 exactly as given above, though the `using` qualifier can manipulate the order
 and provide values for missing columns.  For example,

       plot 'file' with errorbars
       plot 'file' using 1:2:(sqrt($1)) with xerrorbars
       plot 'file' using 1:2:($1-$3):($1+$3):4:5 with xyerrorbars

 The last plot is for a file with an unsupported combination of relative x and
 absolute y errors. The `using` entry generates absolute x min and max from
 the relative error.

 The y error bar is a vertical line plotted from (x, ylow) to (x, yhigh).
 If ydelta is specified instead of ylow and yhigh, ylow = y - ydelta and
 yhigh = y + ydelta are derived.  If there are only two numbers on the line,
 yhigh and ylow are both set to y.  The x error bar is a horizontal line
 computed in the same fashion.  To get lines plotted between the data points,
 `plot` the data file twice, once with errorbars and once with lines (but
 remember to use the `notitle` option on one to avoid two entries in the key).

 The error bars have crossbars at each end unless `set bar` is used (see `set
 bar` for details).

 If autoscaling is on, the ranges will be adjusted to include the error bars.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/errorbar/errorbar.html"> Errorbar demos. </a>

 See `plot using`, `plot with`, and `set style` for more information.
3 parametric
?plot parametric
?splot parametric
?parametric
 When in parametric mode (`set parametric`) mathematical expressions must be
 given in pairs for `plot` and in triplets for `splot`.

 Examples:
       plot sin(t),t**2
       splot cos(u)*cos(v),cos(u)*sin(v),sin(u)

 Data files are plotted as before, except any preceding parametric function
 must be fully specified before a data file is given as a plot.  In other
 words, the x parametric function (`sin(t)` above) and the y parametric
 function (`t**2` above) must not be interrupted with any modifiers or data
 functions; doing so will generate a syntax error stating that the parametric
 function is not fully specified.

 Other modifiers, such as `with` and `title`, may be specified only after the
 parametric function has been completed:

       plot sin(t),t**2 title 'Parametric example' with linespoints
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/param/param.html"> Parametric Mode Demos. </a>
3 ranges
?splot ranges
?plot ranges
?ranges
 The optional ranges specify the region of the graph that will be displayed.

 Syntax:
       [{<dummy-var>=}{{<min>}:{<max>}}]
       [{{<min>}:{<max>}}]

 The first form applies to independent variables: `xrange`, `trange`, `urange`,
 `vrange` and, for `splot`, `yrange`.  The second form applies to dependent
 variables: `zrange` and, for `plot`, `yrange`. <dummy-var> is a new name for
 the independent variable. (The defaults may be changed with `set dummy`.)  The
 optional <min> and <max> terms can be constant expressions or *.

 In non-parametric mode, the order in which ranges must be given is `xrange`,
 `yrange`, and, for `splot`, `zrange`.

 In parametric mode, the order for the `plot` command is `trange`, `xrange`,
 and `yrange`.  For `splot` the order is `urange`, `vrange`, `xrange`,
 `yrange`, and finally `zrange`.  The following `plot` command shows setting
 the `trange` to [-pi:pi], the `xrange` to [-1.3:1.3] and the `yrange` to
 [-1:1] for the duration of the graph:

       plot [-pi:pi] [-1.3:1.3] [-1:1] sin(t),t**2

 Note that the x2range and y2range cannot be specified here---`set x2range`
 and `set y2range` must be used.

 Ranges are interpreted in the order listed above for the appropriate mode.
 Once all those needed are specified, no further ones must be listed, but
 unneeded ones cannot be skipped---use an empty range `[]` as a placeholder.

 `*` can be used to allow autoscaling of either of min and max.  See also
 `set autoscale`.

 Ranges specified on the `plot` or `splot` command line affect only that
 graph; use the `set xrange`, `set yrange`, etc., commands to change the
 default ranges for future graphs.

 With time data, you must provide the range (in the same manner as the time
 appears in the datafile) within quotes.  `gnuplot` uses the `timefmt` string
 to read the value---see `set timefmt`.

 Examples:

 This uses the current ranges:
       plot cos(x)

 This sets the x range only:
       plot [-10:30] sin(pi*x)/(pi*x)

 This is the same, but uses t as the dummy-variable:
       plot [t = -10 :30]  sin(pi*t)/(pi*t)

 This sets both the x and y ranges:
       plot [-pi:pi] [-3:3]  tan(x), 1/x

 This sets only the y range, and turns off autoscaling on both axes:
       plot [ ] [-2:sin(5)*-8] sin(x)**besj0(x)

 This sets xmax and ymin only:
       plot [:200] [-pi:]  exp(sin(x))

 This sets the x, y, and z ranges:
       splot [0:3] [1:4] [-1:1] x*y

 This sets the x range for a timeseries:
       set timefmt "%d/%m/%y %H:%M"
       plot ["1/6/93 12:00":"5/6/93 12:00"] 'timedata.dat'

^<a href="http://www.nas.nasa.gov/~woo/gnuplot/ranges/ranges.html"> See Demo. </a>
3 title
?plot title
?splot title
 A title for each function and data set appears in the key, accompanied by a
 sample of the line and/or symbol used to represent it.  By default the plot
 title is the function or file name as it appears on the `plot` command.  It
 can be changed by using the `title` option.

 Syntax:
       title "<title>" | notitle

 where <title> is the new title of the plot and must be enclosed in quotes.
 The quotes will not be shown in the key.  A special character may be given as
 a backslash followed by its octal value ("\345").  The tab character "\t" is
 understood.  Note that backslash processing occurs only for strings enclosed
 in double quotes---use single quotes to prevent such processing.  The newline
 character "\n" is not processed in key entries in either type of string.

 The plot title and sample can be omitted from the key by using the keyword
 `notitle`.  A null title (`title ''`) is equivalent to `notitle`.  If only
 the sample is wanted, use one or more blanks (`title ' '`).

 The layout of the key itself (position, title justification, etc.) can be
 controlled by `set key`.  Please see `set key` for details.

 Examples:

 This plots y=x with the title 'x':
       plot x

 This plots the "glass.dat" file with the title 'surface of revolution':
       splot "glass.dat" title 'surface of revolution'

 This plots x squared with title "x^2" and "data.1" with title 'measured
 data':
       plot x**2 title "x^2", "data.1" t 'measured data'

 This puts an untitled circular border around a polar graph:
       set polar; plot my_function(t), 1 notitle
3 with
?plot with
?plot style
?splot with
?splot style
?style
?with
 Functions and data may be displayed in one of a large number of styles.
 The `with` keyword provides the means of selection.

 Syntax:
       with <style> { {linestyle | ls <line_style>}
                      | {{linetype | lt <line_type>}
                         {linewidth | lw <line_width>}
                         {pointtype | pt <point_type>}
                         {pointsize | ps <point_size>}} }

 where <style> is either `lines`, `points`, `linespoints`, `impulses`, `dots`,
 `steps`, `fsteps`, `histeps`, `errorbars`, `xerrorbars`, `yerrorbars`,
 `xyerrorbars`, `boxes`, `boxerrorbars`, `boxxyerrorbars`, `financebars`,
 `candlesticks` or `vector`.  A given style may not be appropriate for both
 2-d and 3-d plots and may require additional information.  See `set style
 <style>` for details of each style.

 Default styles are chosen with the `set function style` and `set data style`
 commands.

 By default, each function and data file will use a different line type and
 point type, up to the maximum number of available types.  All terminal
 drivers support at least six different point types, and re-use them, in
 order, if more than six are required.  The LaTeX driver supplies an
 additional six point types (all variants of a circle), and thus will only
 repeat after 12 curves are plotted with points.  The PostScript drivers
 (`postscript`) supplies a total of 64.

 If you wish to choose the line or point type for a single plot, <line_type>
 and <point_type> may be specified.  These are positive integer constants (or
 expressions) that specify the line type and point type to be used for the
 plot.  Use `test` to display the types available for your terminal.

 You may also scale the line width and point size for a plot by using
 <line_width> and <point_size>, which are specified relative to the default
 values for each terminal.  The pointsize may also be altered globally---see
 `set pointsize` for details.  But note that both <point_size> as set here and
 as set by `set pointsize` multiply the default point size---their effects are
 not cumulative.  That is, `set pointsize 2; plot x w p ps 3` will use points
 three times default size, not six.

 If you have defined specific line type/width and point type/size combinations
 with `set linestyle`, one of these may be selected by setting <line_style> to
 the index of the desired style.

 The keywords may be abbreviated as indicated.

 Note that the linewidth and pointsize options are not supported by all
 terminals.

 Examples:

 This plots sin(x) with impulses:
       plot sin(x) with impulses

 This plots x*y with points, x**2 + y**2 default:
       splot x*y w points, x**2 + y**2

 This plots tan(x) with the default function style, "data.1" with lines:
       plot [ ] [-2:5] tan(x), "data.1" with l

 This plots "leastsq.dat" with impulses:
       plot 'leastsq.dat' w i

 This plots the data file 'population' with boxes:
       plot "population" with boxes

 This plots "exper.dat" with errorbars and lines connecting the points
 ('exper.dat' should have three or four data columns):
       plot 'exper.dat' w lines, 'exper.dat' notitle w errorbars

 This plots x**2 + y**2 and x**2 - y**2 with the same line type:
       splot x**2 + y**2 with line lt 1, x**2 - y**2 with line lt 1

 This plots sin(x) and cos(x) with linespoints, using the same line type but
 different point types:
       plot sin(x) with linesp lt 1 pt 3, cos(x) with linesp lt 1 pt 4

 This plots file "data" with points of type 3 and twice usual size:
       plot "data" with points pointtype 3 pointsize 2

 This plots two data sets with lines differing only by weight:
       plot "d1" t "good" w l lt 2 lw 3, "d2" t "bad" w l lt 2 lw 1

 See `set style` to change the default styles.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/styles/styles.html"> Styles demos. </a>
2 print
?print
 The `print` command prints the value of <expression> to the screen.  It is
 synonymous with `pause 0`.  <expression> may be anything that `gnuplot` can
 evaluate that produces a number, or it can be a string.

 Syntax:
       print <expression> {, <expression>, ...}

 See `expressions`.
2 pwd
?pwd
 The `pwd` command prints the name of the working directory to the screen.
2 quit
?quit
 The `exit` and `quit` commands and END-OF-FILE character will exit `gnuplot`.
 Each of these commands will clear the output device (as does the `clear`
 command) before exiting.
2 replot
?replot
 The `replot` command without arguments repeats the last `plot` or `splot`
 command.  This can be useful for viewing a graph with different `set`
 options, or when generating the same graph for several devices.

 Arguments specified after a `replot` command will be added onto the last
 `plot` or `splot` command (with an implied ',' separator) before it is
 repeated.  `replot` accepts the same arguments as the `plot` and `splot`
 commands except that ranges cannot be specified.  Thus you can use `replot`
 to plot a function against the second axes if the previous command was `plot`
 but not if it was `splot`, and similarly you can use `replot` to add a plot
 from a binary file only if the previous command was `splot`.

 N.B.---use of

       plot '-' ; ... ; replot

 is not recommended.  `gnuplot` does not store the inline data internally, so
 since `replot` appends new information to the previous `plot` and then
 executes the modified command, the `'-'` from the initial `plot` will expect
 to read inline data again. 

 See `command-line-editing` for ways to edit the last `plot`
 (`splot`) command.
2 reread
?reread
 The `reread` command causes the current `gnuplot` command file, as specified
 by a `load` command or on the command line, to be reset to its starting
 point before further commands are read from it.  This essentially implements
 an endless loop of the commands from the beginning of the command file to
 the `reread` command.  (But this is not necessarily a disaster---`reread` can
 be very useful when used in conjunction with `if`.  See `if` for details.)
 The `reread` command has no effect if input from standard input.

 Examples:

 Suppose the file "looper" contains the commands
       a=a+1
       plot sin(x*a)
       pause -1
       if(a<5) reread
 and from within `gnuplot` you submit the commands
       a=0
       load 'looper'
 The result will be four plots (separated by the `pause` message).

 Suppose the file "data" contains six columns of numbers with a total yrange
 from 0 to 10; the first is x and the next are five different functions of x.
 Suppose also that the file "plotter" contains the commands
       c_p = c_p+1
       plot "$0" using 1:c_p with lines linetype c_p
       if(c_p <  n_p) reread
 and from within `gnuplot` you submit the commands
       n_p=6
       c_p=1
       set nokey
       set yrange [0:10]
       set multiplot
       call 'plotter' 'data'
       set nomultiplot
 The result is a single graph consisting of five plots.  The yrange must be
 set explicitly to guarantee that the five separate graphs (drawn on top of
 each other in multiplot mode) will have exactly the same axes.  The linetype
 must be specified; otherwise all the plots would be drawn with the same type.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/animate/animate.html"> Reread Animation Demo</a>
2 reset
?reset
 The `reset` command causes all options that can be set with the `set`
 command to take on their default values.  The only exceptions are that the
 terminal set with `set term` and the output file set with `set output` are
 left unchanged.  This command is useful, e.g., to restore the default
 settings at the end of a command file, or to return to a defined state after
 lots of settings have been changed within a command file.  Please refer to
 the `set` command to see the default values that the various options take.
2 save
?save
 The `save` command saves user-defined functions, variables, `set` options,
 or all three, plus the last `plot` (`splot`) command to the specified file.

 Syntax:
       save  {<option>} "<filename>"

 where <option> is `functions`, `variables` or `set`. If no option is used,
 `gnuplot` saves functions, variables, `set` options and the last `plot`
 (`splot`) command.

 `save`d files are written in text format and may be read by the `load`
 command.

 The filename must be enclosed in quotes.

 Examples:
       save "work.gnu"
       save functions 'func.dat'
       save var 'var.dat'
       save set "options.dat"
2 set-show
?set
?show
?show all
 The `set` command sets _lots_ of options.  No screen is drawn, however, until
 a `plot`, `splot`, or `replot` command is given.

 The `show` command shows their settings.  `show all` shows all the
 settings.
3 angles
?set angles
?show angles
?angles
?set angles degrees
 By default, `gnuplot` assumes the independent variable in polar graphs is in
 units of radians.  If `set angles degrees` is specified before `set polar`,
 then the default range is [0:360] and the independent variable has units of
 degrees.  This is particularly useful for plots of data files.  The angle
 setting also applies to 3-d mapping as set via the `set mapping` command.

 Syntax:
       set angles {degrees | radians}
       show angles

 The angle specified in `set grid polar` is also read and displayed in the
 units specified by `set angles`.

 `set angles` also affects the arguments of the machine-defined functions
 sin(x), cos(x) and tan(x), and the outputs of asin(x), acos(x), atan(x),
 atan2(x), and arg(x).  It has no effect on the arguments of hyperbolic
 functions or Bessel functions.  Note that the output of inverse hyperbolic
 functions of complex arguments are effected, however; if these functions are
 used, `set angles radians` must be in effect:

       x={1.0,0.1}
       set angles radians
       y=sinh(x)
       print y         #prints {1.16933, 0.154051}
       print asinh(y)  #prints {1.0, 0.1}
 but
       set angles degrees
       y=sinh(x)
       print y         #prints {1.16933, 0.154051}
       print asinh(y)  #prints {57.29578, 5.729578}
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/poldat/poldat.html"> Polar plot using `set angles`. </a>
3 arrow
?set arrow
?set noarrow
?show arrow
?arrow
?noarrow
 Arbitrary arrows can be placed on a graph using the `set arrow` command.

 Syntax:
       set arrow {<tag>} {from <position>} {to <position>} {{no}head}
                 { {linestyle | ls <line_style>}
                   | {linetype | lt <line_type>}
                     {linewidth | lw <line_width} }
       set noarrow {<tag>}
       show arrow

 <tag> is an integer that identifies the arrow.  If no tag is given, the
 lowest unused tag value is assigned automatically.  The tag can be used to
 delete or change a specific arrow.  To change any attribute of an existing
 arrow, use the `set arrow` command with the appropriate tag and specify the
 parts of the arrow to be changed.

 The <position>s are specified by either x,y or x,y,z, and may be preceded by
 `first`, `second`, `graph`, or `screen` to select the coordinate system.
 Unspecified coordinates default to 0.  The endpoints can be specified in
 one of four coordinate systems---`first` or `second` axes, `graph` or
 `screen`.  See `coordinates` for details.  A coordinate system specifier
 does not carry over from the "from" position to the "to" position.  Arrows
 outside the screen boundaries are permitted but may cause device errors.

 Specifying `nohead` produces an arrow drawn without a head---a line segment.
 This gives you yet another way to draw a line segment on the graph.  By
 default, arrows have heads.

 The line style may be selected from a user-defined list of line styles (see
 `set linestyle`) or may be defined here by providing values for <line_type>
 (an index from the default list of styles) and/or <line_width> (which is a
 multiplier for the default width).

 Note, however, that if a user-defined line style has been selected, its
 properties (type and width) cannot be altered merely by issuing another
 `set arrow` command with the appropriate index and `lt` or `lw`.

 Examples:

 To set an arrow pointing from the origin to (1,2) with user-defined style 5,
 use:
       set arrow to 1,2 ls 5

 To set an arrow from bottom left of plotting area to (-5,5,3), and tag the
 arrow number 3, use:
       set arrow 3 from graph 0,0 to -5,5,3

 To change the preceding arrow to end at 1,1,1, without an arrow head and
 double its width, use:
       set arrow 3 to 1,1,1 nohead lw 2

 To draw a vertical line from the bottom to the top of the graph at x=3, use:
       set arrow from 3, graph 0 to 3, graph 1 nohead

 To delete arrow number 2, use:
       set noarrow 2

 To delete all arrows, use:
       set noarrow

 To show all arrows (in tag order), use:
       show arrow
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/arrows/arrows.html"> Arrows Demos. </a>
3 autoscale
?set autoscale
?set noautoscale
?show autoscale
?autoscale
?noautoscale
 Autoscaling may be set individually on the x, y or z axis or globally on all
 axes. The default is to autoscale all axes.

 Syntax:
       set autoscale {<axes>{min|max}}
       set noautoscale {<axes>{min|max}}
       show autoscale

 where <axes> is either `x`, `y`, `z`, `x2`, `y2` or `xy`.  A keyword with
 `min` or `max` appended (this cannot be done with `xy`) tells `gnuplot` to
 autoscale just the minimum or maximum of that axis.  If no keyword is given,
 all axes are autoscaled.

 When autoscaling, the axis range is automatically computed and the dependent
 axis (y for a `plot` and z for `splot`) is scaled to include the range of the
 function or data being plotted.

 If autoscaling of the dependent axis (y or z) is not set, the current y or z
 range is used.

 Autoscaling the independent variables (x for `plot` and x,y for `splot`) is a
 request to set the domain to match any data file being plotted.  If there are
 no data files, autoscaling an independent variable has no effect.  In other
 words, in the absence of a data file, functions alone do not affect the x
 range (or the y range if plotting z = f(x,y)).

 Please see `set xrange` for additional information about ranges.

 The behavior of autoscaling remains consistent in parametric mode, (see `set
 parametric`).  However, there are more dependent variables and hence more
 control over x, y, and z axis scales.  In parametric mode, the independent or
 dummy variable is t for `plot`s and u,v for `splot`s.  `autoscale` in
 parametric mode, then, controls all ranges (t, u, v, x, y, and z) and allows
 x, y, and z to be fully autoscaled.

 Autoscaling works the same way for polar mode as it does for parametric mode
 for `plot`, with the extension that in polar mode `set dummy` can be used to
 change the independent variable from t (see `set dummy`).

 When tics are displayed on second axes but no plot has been specified for
 those axes, x2range and y2range are inherited from xrange and yrange.  This
 is done _before_ xrange and yrange are autoextended to a whole number of
 tics, which can cause unexpected results.

 Examples:

 This sets autoscaling of the y axis (other axes are not affected):
       set autoscale y

 This sets autoscaling only for the minimum of the y axis (the maximum of the
 y axis and the other axes are not affected):
       set autoscale ymin

 This sets autoscaling of the x and y axes:
       set autoscale xy

 This sets autoscaling of the x, y, z, x2 and y2 axes:
       set autoscale

 This disables autoscaling of the x, y, z, x2 and y2 axes:
       set noautoscale

 This disables autoscaling of the z axis only:
       set noautoscale z
4 parametric mode
?set autoscale parametric
?set autoscale t
 When in parametric mode (`set parametric`), the xrange is as fully scalable
 as the y range.  In other words, in parametric mode the x axis can be
 automatically scaled to fit the range of the parametric function that is
 being plotted.  Of course, the y axis can also be automatically scaled just
 as in the non-parametric case.  If autoscaling on the x axis is not set, the
 current x range is used.

 Data files are plotted the same in parametric and non-parametric mode.
 However, there is a difference in mixed function and data plots: in
 non-parametric mode with autoscaled x, the x range of the datafile controls
 the x range of the functions; in parametric mode it has no influence.

 For completeness a last command `set autoscale t` is accepted.  However, the
 effect of this "scaling" is very minor.  When `gnuplot` determines that the
 t range would be empty, it makes a small adjustment if autoscaling is true.
 Otherwise, `gnuplot` gives an error.  Such behavior may, in fact, not be very
 useful and the command `set autoscale t` is certainly questionable.

 `splot` extends the above ideas as you would expect.  If autoscaling is set,
 then x, y, and z ranges are computed and each axis scaled to fit the
 resulting data.
4 polar mode
?set autoscale polar
?set autoscale t
 When in polar mode (`set polar`), the xrange and the yrange are both found
 from the polar coordinates, and thus they can both be automatically scaled.
 In other words, in polar mode both the x and y axes can be automatically
 scaled to fit the ranges of the polar function that is being plotted.

 When plotting functions in polar mode, the rrange may be autoscaled.  When
 plotting data files in polar mode, the trange may also be autoscaled.  Note
 that if the trange is contained within one quadrant, autoscaling will produce
 a polar plot of only that single quadrant.

 Explicitly setting one or two ranges but not others may lead to unexpected
 results.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/poldat/poldat.html"> See polar demos </a>
3 bar
?set bar
?show bar
 The `set bar` command controls the tics at the ends of errorbars.

 Syntax:
       set bar {small | large | <size>}
       show bar

 `small` is a synonym for 0.0, and `large` for 1.0.
 The default is 1.0 if no size is given.
3 bmargin
?set bmargin
?bmargin
 The command `set bmargin` sets the size of the bottom margin.  Please see
 `set margin` for details.
3 border
?set border
?set noborder
?show border
?border
?noborder
 The `set border` and `set noborder` commands control the display of the graph  
 borders for the `plot` and `splot` commands.

 Syntax:
       set border {<integer>}
       set noborder
       show border

 The borders are encoded in a 12-bit integer: the bottom four bits control the
 border for `plot` and the sides of the base for `splot`; The next four bits
 control the verticals in `splot`; the top four bits control the edges on top
 of the `splot`.  The default is 31, which is all four sides for `plot`, and
 base and z axis for `splot`.  

 Various axes or combinations of axes may be added together on the command.

 To have tics on edges other than bottom and left, disable the usual tics and
 enable the second axes.

 Examples:

 Draw all borders:
       set border

 Draw only the SOUTHWEST borders:
       set border 3

 Draw a complete box around a `splot`:
       set border 4095

 Draw a partial box, omitting the front vertical:
       set border 127+256+512

 Draw only the NORTHEAST borders:
       set noxtics; set noytics; set x2tics; set y2tics; set border 12

^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/borders/borders.html"> Borders Demo. </a>
3 boxwidth
?set boxwidth
?show boxwidth
?boxwidth
 The `set boxwidth` command is used to set the default width of boxes in the
 `boxes` and `boxerrorbars` styles.

 Syntax:
       set boxwidth {<width>}
       show boxwidth

 If a data file is plotted without the width being specified in the third,
 fourth, or fifth column (or `using` entry), or if a function is plotted, the
 width of each box is set by the `set boxwidth` command.  (If a width is given
 both in the file and by the `set boxwidth` command, the one in the file is
 used.)  If the width is not specified in one of these ways, the width of each
 box will be calculated automatically so that it touches the adjacent boxes.
 In a four-column data set, the fourth column will be interpreted as the box
 width unless the width is set to -2.0, in which case the width will be
 calculated automatically.  See `set style boxerrorbars` for more details.

 To set the box width to automatic use the command
       set boxwidth
 or, for four-column data,
       set boxwidth -2

 The same effect can be achieved with the `using` keyword in `plot`:
       plot 'file' using 1:2:3:4:(-2)
3 clabel
?set clabel
?set noclabel
?show clabel
?clabel
?noclabel
 `gnuplot` will vary the linetype used for each contour level when clabel is
 set.  When this option on (the default), a legend labels each linestyle with
 the z level it represents.  It is not possible at present to separate the
 contour labels from the surface key.

 Syntax:
       set clabel {'<format>'}
       set noclabel
       show clabel

 The default for the format string is %8.3g, which gives three decimal places.
 This may produce poor label alignment if the key is altered from its default
 configuration.

 See also `set contour`.
3 clip
?set clip
?set noclip
?show clip
?clip
?noclip
 `gnuplot` can clip data points and lines that are near the boundaries of a
 graph.

 Syntax:
       set clip <clip-type>
       set noclip <clip-type>
       show clip

 Three clip types are supported by `gnuplot`: `points`, `one`, and `two`.
 One, two, or all three clip types may be active for a single graph.

 The `points` clip type forces `gnuplot` to clip (actually, not plot at all)
 data points that fall within but too close to the boundaries.  This is done
 so that large symbols used for points will not extend outside the boundary
 lines.  Without clipping points near the boundaries, the graph may look bad.
 Adjusting the x and y ranges may give similar results.

 Setting the `one` clip type causes `gnuplot` to draw a line segment which has
 only one of its two endpoints within the graph.  Only the in-range portion of
 the line is drawn.  The alternative is to not draw any portion of the line
 segment.

 Some lines may have both endpoints out of range, but pass through the graph.
 Setting the `two` clip-type allows the visible portion of these lines to be
 drawn.

 In no case is a line drawn outside the graph.

 The defaults are `noclip points`, `clip one`, and `noclip two`.

 To check the state of all forms of clipping, use
       show clip

 For backward compatibility with older versions, the following forms are also
 permitted:
       set clip
       set noclip

 `set clip` is synonymous with `set clip points`; `set noclip` turns off all
 three types of clipping.
3 cntrparam
?set cntrparam
?show cntrparam
?cntrparam
 `set cntrparam` controls the generation of contours and their smoothness for
 a contour plot.

 Syntax:
       set cntrparam {  {linear | cubicspline | bspline}
                      | points <n> | order <n> 
                      | levels  {auto} {<n>} 
                              | discrete <z1> {,<z2>} ... 
                              | incremental {<start>, <incr> {,<end>}} }
       show cntrparam      

 This command controls the way contours are plotted.  <n> should be an
 integral constant expression and <z1>, <z2> ... any constant expressions.
 The parameters are:

 `linear`, `cubicspline`, `bspline`---Controls type of approximation or
 interpolation.  If `linear`, then the contours are drawn piecewise linear, as
 extracted from the surface directly.  If `cubicspline`, then piecewise linear
 contours are interpolated to form somewhat smoother contours, but which may
 undulate.  If `bspline`, a guaranteed-smoother curve is drawn, which only
 approximates the piecewise linear data.

 `points`---Eventually all drawings are done with piecewise linear strokes.
 This number controls the number of points used to approximate a curve.
 It is relevant only for `cubicspline` and `bspline` modes.

 `order`---Order of the bspline approximation to be used.  The bigger this
 order is, the smoother the resulting contour.  (Of course, higher order
 bspline curves will move further away from the original piecewise linear
 data.)  This option is relevant for `bspline` mode only.  Allowed values are
 integers in the range from 2 (linear) to 10.

 `levels`---Approximate number of contour levels.  Selection of the levels is
 controlled by `auto` (default), `discrete`, and `incremental`.  For `auto`,
 if the surface is bounded by zmin and zmax, contours will be generated at
 integer multiples of dz between zmin and zmax, where dz is 1, 2, or 5 times
 some power of ten (like the step between two tic marks).  For `discrete`,
 contours will be generated at z = <z1>, <z2> ... as specified.  The number of
 discrete levels is limited to MAX_DISCRETE_LEVELS, defined in plot.h to be
 30.  If `incremental`, contours are generated at values of z beginning at
 <start> and increasing by <increment> until <end> is reached.  If <end> is
 not specified, MAX_DISCRETE_LEVELS will be generated.

 If the command `set cntrparam` is given without any arguments specified,  the
 defaults are used: linear, 5 points, order 4, 5 `auto` levels.

 Examples:
       set cntrparam bspline
       set cntrparam points 7
       set cntrparam order 10

 To select 5 levels automatically:
       set cntrparam levels auto 5

 To specify discrete levels at .1, .37, and .9:
       set cntrparam levels discrete .1,1/exp(1),.9

 To specify levels from 0 to 4 with increment 1:
       set cntrparam levels incremental  0,1,4

 To set the number of levels to 10 (retaining the current settings of auto,
 discr. and increment's start and increment value, while changing its end):
       set cntrparam levels 10

 To set the start and increment while retaining the number of levels:
       set cntrparam levels incremental 100,50

 See also `set contour` for control of where the contours are drawn, and `set
 clabel` for control of the format of the contour labels.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/contours/contours.html">Contours Demo</a> and
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/discrete/discrete.html">contours with User Defined Levels.</a>
3 contour
?set contour
?set nocontour
?show contour
?contour
?nocontour
 `set contour` enables contour drawing for surfaces. This option is available
 for `splot` only.

 Syntax:
       set contour {base | surface | both}
       set nocontour
       show contour

 The three options specify where to draw the contours: `base` draws the
 contours on the grid base where the x/ytics are placed, `surface` draws the
 contours on the surfaces themselves, and `both` draws the contours on both
 the base and the surface.  If no option is provided, the default is `base`.

 See also `set cntrparam` for the parameters that affect the drawing of
 contours, and `set clabel` for control of labelling of the contours.

 The surface can be switched off (see `set surface`), giving a contour-only
 graph.  Though it is possible to use `set view` to enlarge the graph to fill
 the screen, good results can be obtained by writing the contour information
 out to a file, and rereading it as a 2-d datafile plot:

       set nosurface
       set contour
       set cntrparam ...
       set term table
       set out 'filename'
       splot ...
       set out
       # contour info now in filename
       set term <whatever>
       plot 'filename'

 In order to draw contours, the data must be organized as "grid data".  In
 such a file all of the points for a single y value are listed, then all the
 points for the next y, and so on.  A single blank line (a line containing no
 characters other than blank spaces and a carriage return and/or a line feed)
 separates one y value group from the next.  See also `plot datafile`.

 If contours are desired from non-grid data, `set dgrid3d` can be used to
 create an appropriate grid.  See `set dgrid3d` for more information.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/contours/contours.html">Contours Demo</a> and
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/discrete/discrete.html">contours with User Defined Levels.</a>
3 data style
?set data style
?show data style
?data style
 The `set data style` command changes the default plotting style for data
 plots.

 Syntax:
       set data style <style-choice>
       show data style

 See `set style` for the choices.  If no choice is given, the choices are
 listed.  `show data style` shows the current default data plotting style.
3 dgrid3d
?set dgrid3d
?set nodgrid3d
?show dgrid3d
?dgrid3d
?nodgrid3d
 The `set dgrid3d` command enables and sets the different parameters for
 non-grid to grid data mapping.

 Syntax:
       set dgrid3d {<row_size>} {,{<col_size>} {,<norm>}}
       set nodgrid3d
       show dgrid3d

 By default `dgrid3d` is disabled.  When enabled, 3-d data read from a file
 are always treated as a scattered data set.  A grid with dimensions derived
 from a bounding box of the scattered data and size as specified by the
 row/col_size parameters is created for plotting and contouring.  The grid is
 equally spaced in x and y; the z values are computed as weighted averages of
 the scattered points' values.

 The third parameter, norm, controls the weighting: each point is weighted
 inversely by its distance (from the grid point) raised to the norm power.
 (Actually it's not quite the distance: the weights are given by the inverse
 of dx^norm + dy^norm, where dx and dy are the components of the separation
 of the grid point from each data point.)  Thus the closer the data point is
 to a grid point, the more effect it has on that grid point.  In `gnuplot`,
 this distance computation is optimized for norms that are powers of 2,
 specifically 1, 2, 4, 8, and 16, but any non-negative integer can be used.

 The `dgrid3d` option is a simple low pass filter that converts scattered data
 to a grid data set.  More sophisticated approaches to this problem exist and
 should be used to preprocess the data outside `gnuplot` if this simple
 solution is found inadequate.

 Examples:
       set dgrid3d 10,10,2
       set dgrid3d ,,4

 The first specifies that a grid of size 10 by 10 is to be constructed using
 the L2 norm (a norm of 2 is to be used in the distance computation).  The
 second only modifies the norm to be used to L4.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/scatter/scatter.html"> Dgrid3d Demo.</a>

3 dummy
?set dummy
?show dummy
?dummy
 The `set dummy` command changes the default dummy variable names.

 Syntax:
       set dummy {<dummy-var>} {,<dummy-var>}
       show dummy

 By default, `gnuplot` assumes that the independent, or "dummy", variable for
 the `plot` command is "t" if in parametric or polar mode, or "x" otherwise.
 Similarly the independent variables for the `splot` command are "u" and "v"
 in parametric mode (`splot` cannot be used in polar mode), or "x" and "y"
 otherwise.

 It may be more convenient to call a dummy variable by a more physically
 meaningful or conventional name.  For example, when plotting time functions:

       set dummy t
       plot sin(t), cos(t)

 At least one dummy variable must be set on the command; `set dummy` by itself
 will generate an error message.

 Examples:
       set dummy u,v
       set dummy ,s

 The second example sets the second variable to s.
3 encoding
?set encoding
?show encoding
?encoding
 The `set encoding` command selects a character encoding.  Valid values are
 `default`, which does nothing; `iso_8859_1` (known in the PostScript world as
 `ISO-Latin1`), which is used on many Unix workstations and with MS-Windows;
 `cp850`, for OS/2; and `cp437`, for MS-DOS.

 Syntax:
       set encoding <value>
       show encoding

 Please note that this is not supported on all terminal types.  Note also that
 the device must be able to produce the non-standard characters.
3 format
?set format
?show format
?format
 The format of the tic-mark labels can be set with the `set format` command.

 Syntax:
       set format {<axes>} {"<format-string>"}
       set format {<axes>} {'<format-string>'}
       show format

 where <axes> is either `x`, `y`, `z`, `xy`, `x2`, `y2` or nothing (which is
 the same as `xy`).  The length of the string representing a ticmark (after
 formatting with printf) is restricted to 100 characters.  If the format
 string is omitted, the format will be returned to the default "%g".  For
 LaTeX users, the format "$%g$" is often desirable.  If the empty string "" is
 used, no label will be plotted with each tic, though the tic mark will still
 be plotted.  To eliminate all tic marks, use `set noxtics` or `set noytics`.

 The default format for both axes is "%g", but other formats such as "%.2f" or
 "%3.0em" are often desirable.  Anything accepted by printf when given a
 double precision number, and accepted by the terminal, will work.  Some other
 options have been added.  If the data type for the axis is date/time, the
 format string must contain valid codes for the strftime function (outside of
 `gnuplot`, type `man strftime`).  It is best to stick to the conversion codes
 accepted by the `set timefmt` command.  If the format string looks like a
 floating point format, then `gnuplot` tries to construct a reasonable format.

 The acceptible formats are:

@start table - first is interactive cleartext form
       Format       Explanation
       %x or %X     hex
       %o or %O     octal
       %t           mantissa to base 10
       %l           mantissa to base of current logscale
       %s           mantissa to base of current logscale; scientific power
       %T           power to base 10
       %L           power to base of current logscale
       %S           scientific power
       %c           character replacement for scientific power
       %P           multiple of pi
#\multicolumn{3}{|c|}{Format Specifiers}\\
#Format && Explanation \\ \hline
#\verb@%x@ or \verb@%X@ && hex \\
#\verb@%o@ or \verb@%O@ && octal \\
#\verb@%t@ && mantissa to base 10 \\
#\verb@%l@ && mantissa to base of current logscale \\
#\verb@%s@ && mantissa to base of current logscale; scientific power \\
#\verb@%T@ && power to base 10 \\
#\verb@%L@ && power to base of current logscale \\
#\verb@%S@ && scientific power \\
#\verb@%c@ && character replacement for scientific power \\
#\verb@%P@ && multiple of pi \\
%Format@Explanation
%_
%%x or %X@hex
%%o or %O@octal
%%t@mantissa to base 10
%%l@mantissa to base of current logscale
%%s@mantissa to base of current logscale; scientific power
%%T@power to base 10
%%L@power to base of current logscale
%%S@scientific power
%%c@character replacement for scientific power
%%P@multiple of pi
%_
@end table

 A 'scientific' power is one such that the exponent is a multiple of three.

 Examples:
       set format y "%t"; set ytics (5,10)          # "5.0" and "1.0"
       set format y "%s"; set ytics (500,1000)      # "500" and "1.0"
       set format y "%.2t*10^%T"; set ytic(12345)   # "1.23*10^4"
       set format y "%s*10^{%S}"; set ytic(12345)   # "12.345*10^{3}"
       set format y "%s %cg"; set ytic(12345)       # "12.345 kg"
       set format y "%.0P pi"; set ytic(6.283185)   # "2 pi"

       set log y 2; set format y '%l'; set ytics (1,2,3)
       #displays "1.0", "1.0" and "1.5" (since 3 is 1.5 * 2^1)

 There are some problem cases that arise when numbers like 9.999 are printed
 with a format that requires both rounding and a power.

 Newline (\n) is accepted in the format string.  Use double-quotes rather than
 single-quotes to enable such interpretation.  See also `syntax`.

 See also `set xtics` and `set ytics` for more control over tic labels.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/electron/electron.html"> See demo. </a>
3 function style
?set function style
?show function style
?function style
 The `set function style` command changes the default plotting style for
 function plots.

 Syntax:
       set function style <style-choice>
       show function style

 See `set style` for the choices.  If no choice is given, the choices are
 listed.  `show function style` shows the current default function plotting
 style.
3 functions
?show functions
 The `show functions` command lists all user-defined functions and their
 definitions.

 Syntax:
       show functions

 For information about the definition and usage of functions in `gnuplot`,
 please see `expressions` and `user-defined`.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/spline/spline.html"> Splines as User Defined Functions.</a>
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/airfoil/airfoil.html">Use of functions and complex variables for airfoils </a>
3 grid
?set grid
?set nogrid
?show grid
?grid
?nogrid
 The `set grid` command allows grid lines to be drawn on the graph.

 Syntax:
       set grid {{no}{m}xtics} {{no}{m}ytics} {{no}{m}ztics}
                {{no}{m}x2tics} {{no}{m}y2tics}
                {polar {<angle>}} {<major_linetype> {<minor_linetype>}}
       set nogrid
       show grid

 The grid can be enabled and disabled for the major and/or minor tic marks on
 any axis, and the linetype can be specified for major and minor grid lines.
 But note that <major_linetype> and <minor_linetype> are indices in the
 default linetype list provided by the terminal; user-defined linetypes (via
 the `set linestyle` command) are not accessible for grid lines.

 Additionally, a polar grid can be selected for 2-d plots---circles are drawn
 to intersect the selected tics, and radial lines are drawn at definable
 intervals.  (The interval is given in degrees or radians ,depending on the
 `set angles` setting.)  Note that a polar grid is no longer automatically
 generated in polar mode.

 The pertinent tics must be enabled before `set grid` can draw them; `gnuplot`
 will quietly ignore instructions to draw grid lines at non-existent tics, but
 they will appear if the tics are subsequently enabled.

 If no linetype is specified for the minor gridlines, the same linetype as the
 major gridlines is used.  The default polar angle is 30 degrees.

 Z grid lines are drawn on the back of the graph.  This looks better if a
 partial box is drawn around the graph---see `set border`.
3 hidden3d
?set hidden3d
?set nohidden3d
?show hidden3d
?hidden3d
?nohidden3d
 The `set hidden3d` command enables hidden line removal for explicit surface
 plotting (see `splot`).

 Syntax:
       set hidden3d
       set nohidden3d
       show hidden3d

 Hidden line removal may be used for both explicit functions and for explicit
 data.  It now works for parametric surfaces as well.  This mode is meaningful
 only when surfaces are `splot`ted `with lines`.

 When this flag is set, both the hidden portion of the surface and possibly
 its hidden contours (see `set contour`) as well as the hidden grid will be
 removed.  Each surface has its hidden parts removed with respect to itself
 and to other surfaces, if more than one surface is plotted.  But contours
 drawn on the surface (`set contour surface`) don't seem to work.  Labels and
 arrows are always visible and are unaffected.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/hidden/hidden.html"> Hidden Line Removal Demo</a> and
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/singulr/singulr.html"> Complex Hidden Line Demo. </a>
3 isosamples
?set isosamples
?show isosamples
?isosamples
 The isoline density of surfaces may be changed by the `set isosamples`
 command.

 Syntax:
       set isosamples <iso_1> {,<iso_2>}
       show isosamples

 Each surface plot will have <iso_1> iso-u lines and <iso_2> iso-v lines.  If
 you only specify <iso_1>, <iso_2> will be set to the same value as <iso_1>.
 By default, sampling is set to 10 isolines per u or v axis.  A higher
 sampling rate will produce more accurate plots, but will take longer.  These
 parameters have no effect on data file plotting.

 An isoline is a curve parameterized by one of the surface parameters while
 the other surface parameter is fixed.  Isolines provide a simple means to
 display a surface.  By fixing the u parameter of surface s(u,v), the iso-u
 lines of the form c(v) = s(u0,v) are produced, and by fixing the v parameter,
 the iso-v lines of the form c(u) = s(u,v0) are produced.

 When a surface plot is being done without the removal of hidden lines, `set
 samples` also has an effect on the number of points being evaluated---it
 controls the number of points sampled along each isoline.  See `set samples`.
3 key
?set key
?set nokey
?show key
?key
?nokey
?legend
 The `set key` enables a key (or legend) describing plots on a graph.

 The contents of the key, i.e., the names given to each plotted data set and
 function and samples of the lines and/or symbols used to represent them, are
 determined by the `title` and `with` options of the {`s`}`plot` command.
 Please see `plot title` and `plot with` for more information.

 Syntax:
       set key {  left | right | top | bottom | outside | below 
                | <position>}
               {Left | Right} {{no}reverse}
               {samplen <sample_length>} {spacing <vertical_spacing>}
               {title "<text>"} {{no}box {<linetype>}}
       set nokey
       show key

 By default the key is placed in the upper right corner of the graph.  The
 keywords `left`, `right`, `top`, `bottom`, `outside` and `below` may be used
 to place the key in the other corners inside the graph or to the right
 (outside) or below the graph.  They may be given alone or combined.

 Justification of the labels within the key is controlled by `Left` or `Right`
 (default is `Right`).  The text and sample can be reversed (`reverse`) and a
 box can be drawn around the key (`box {<linetype>}`) in a specified linetype.
 But note that <linetype> is an index in the default linetype list provided by
 the terminal; user-defined linetypes (via the `set linestyle` command) are
 not accessible for the key box.

 The length of the sample line can be controlled by `samplen`.  The sample
 length is computed as the sum of the tic length and <sample_length> times the
 character width.  `samplen` also affects the positions of point samples in
 the key since these are drawn at the midpoint of the sample line, even if it
 is not drawn.  <sample_length> must be an integer.

 The vertical spacing between lines is controlled by `spacing`.  The spacing
 is set equal to the product of the pointsize, the vertical tic size, and
 <vertical_spacing>.  The program will guarantee that the vertical spacing is
 no smaller than the character height.

 A title can be put on the key (`title "<text>"`)---see also `syntax` for the
 distinction between text in single- or double-quotes.  The key title uses the
 same justification as do the plot titles.

 The defaults for `set key` are `right`, `top`, `Right`, `noreverse`, `samplen
 4`, `spacing 1.25`, `title ""`, and `nobox`.  The default <linetype> is the
 same as that used for the plot borders.  Entering `set key` with no options
 returns the key to its default configuration.

 The <position> can be a simple x,y,z as in previous versions, but these can
 be preceded by one of four keywords (`first`, `second`, `graph`, `screen`)
 which selects the coordinate system in which the position is specified.  See
 `coordinates` for more details.  

 The key is drawn as a sequence of lines, with one plot described on each
 line.  On the right-hand side (or the left-hand side, if `reverse` is
 selected) of each line is a representation that attempts to mimic the way the
 curve is plotted.  On the other side of each line is the text description
 (the plot title), obtained from the `plot` command.  The lines are vertically
 arranged so that an imaginary straight line divides the left- and right-hand
 sides of the key.  It is the coordinates of the top of this line that are
 specified with the `set key` command.  In a `plot`, only the x and y
 coordinates are used to specify the line position.  For a `splot`, x, y and
 z are all used as a 3-d location mapped using the same mapping as the graph
 itself to form the required 2-d screen position of the imaginary line.

 Some or all of the key may be outside of the graph boundary, although this
 may interfere with other labels and may cause an error on some devices.  If
 you use the keywords `outside` or `below`, `gnuplot` makes space for the keys
 and the graph becomes smaller.  Putting keys outside to the right, they
 occupy as few columns as possible, and putting them below, as many columns as
 possible (depending of the length of the labels), thus stealing as little
 space from the graph as possible.

 When using the TeX or PostScript drivers, or similar drivers where formatting
 information is embedded in the string, `gnuplot` is unable to calculate
 correctly the width of the string for key positioning.  If the key is to be
 positioned at the left, it may be convenient to use the combination  `set key
 left Left reverse`.  The box and gap in the grid will be the width of the
 literal string.

 If `splot` is being used to draw contours, the contour labels will be listed
 in the key.  If the alignment of these labels is poor or a different number
 of decimal places is desired, the label format can be specified.  See `set
 clabel` for details.

 Examples:

 This places the key at the default location:
       set key

 This disables the key:
       set nokey

 This places a key at coordinates 2,3.5,2 in the default (first) coordinate
 system:
       set key 2,3.5,2

 This places the key below the graph:
       set key below

 This places the key in the bottom left corner, left-justifies the text,
 gives it a title, and draws a box around it in linetype 3:
       set key left bottom Left title 'Legend' box 3
3 label
?set label
?set nolabel
?show label
?label
?nolabel
 Arbitrary labels can be placed on the graph using the `set label` command.

 Syntax:
       set label {<tag>} {"<label_text>"} {at <position>}
                 {<justification>} {font "<name><,size>"}
       set nolabel {<tag>}
       show label

 The <position> is specified by either x,y or x,y,z, and may be preceded by
 `first`, `second`, `graph`, or `screen` to select the coordinate system.
 See `coordinates` for details.

 The tag is an integer that is used to identify the label. If no <tag> is
 given, the lowest unused tag value is assigned automatically.  The tag can be
 used to delete or modify a specific label.  To change any attribute of an
 existing label, use the `set label` command with the appropriate tag, and
 specify the parts of the label to be changed.

 By default, the text is placed flush left against the point x,y,z.  To adjust
 the way the label is positioned with respect to the point x,y,z, add the
 parameter <justification>, which may be `left`, `right` or `center`,
 indicating that the point is to be at the left, right or center of the text.
 Labels outside the plotted boundaries are permitted but may interfere with
 axis labels or other text.

 If one (or more) axis is timeseries, the appropriate coordinate should be
 given as a quoted time string according to the `timefmt` format string.  See
 `set xdata` and `set timefmt`.

 The EEPIC, Imagen, LaTeX, and TPIC drivers allow \\ in a string to specify
 a newline.

 Examples:

 To set a label at (1,2) to "y=x", use:
       set label "y=x" at 1,2

 To set a label of the sign Sigma of size 24 at the center of the graph, use:
       set label "S" at graph 0.5,0.5 center font "Symbol,24"

 To set a label "y=x^2" with the right of the text at (2,3,4), and tag the
 label as number 3, use:
       set label 3 "y=x^2" at 2,3,4 right

 To change the preceding label to center justification, use:
       set label 3 center

 To delete label number 2, use:
       set nolabel 2

 To delete all labels, use:
       set nolabel

 To show all labels (in tag order), use:
       show label

 To set a label on a graph with a timeseries on the x axis, use, for example:
       set timefmt "%d/%m/%y,%H:%M" 
       set label "Harvest" at "25/8/93",1
3 linestyle
?set linestyle
?set nolinestyle
?show linestyle
?linestyle
 Each terminal has a default set of line and point types, which can be seen
 by using the command `test`.  `set linestyle` defines a set of line types
 and widths and point types and sizes so that you can refer to them later by
 an index instead of repeating all the information at each invocation.

 Syntax:
       set linestyle <index> {linetype | lt <line_type>}
                             {linewidth | lw <line_width>}
                             {pointtype | pt <point_type>}
                             {pointsize | ps <point_size>}
       set nolinestyle
       show linestyle

 The line and point types are taken from the default types for the terminal
 currently in use.  The line width and point size are multipliers for the
 default width and size (but note that <point_size> here is unaffected by
 the multiplier given on 'set pointsize').

 The defaults for the line and point types is the index.  The defaults for
 the width and size are both unity.
3 lmargin
?set lmargin
?lmargin
 The command `set lmargin` sets the size of the left margin.  Please see
 `set margin` for details.
3 locale
?set locale
?show logscale
?locale
 The `locale` setting determines the language with which `{x,y,z}{d,m}tics`
 will write the days and months.

 Syntax:
       set locale {"<locale>"}

 <locale> may be any language designation acceptible to your installation.
 See your system documentation for the available options.  The default value
 is determined from the LANG environment variable.
3 logscale
?set logscale
?set nologscale
?show logscale
?logscale
?nologscale
 Log scaling may be set on the x, y, z, x2 and/or y2 axes.

 Syntax:
       set logscale <axes> <base>
       set nologscale <axes>
       show logscale

 where <axes> may be any combinations of `x`, `y`, and `z`, in any order, or
 `x2` or `y2` and where <base> is the base of the log scaling.  If <base> is
 not given, then 10 is assumed.  If <axes> is not given, then all axes are
 assumed.  `set nologscale` turns off log scaling for the specified axes.

 Examples:

 To enable log scaling in both x and z axes:
       set logscale xz

 To enable scaling log base 2 of the y axis:
       set logscale y 2

 To disable z axis log scaling:
       set nologscale z
3 mapping
?set mapping
?show mapping
?mapping
 If data are provided to `splot` in spherical or cylindrical coordinates,
 the `set mapping` command should be used to instruct `gnuplot` how to
 interpret them.

 Syntax:
       set mapping {cartesian | spherical | cylindrical}

 For a spherical coordinate system, the data occupy two or three columns (or
 `using` entries).  The first two are interpreted as the polar and azimuthal
 angles theta and phi (in the units specified by `set angles`).  The radius r
 is taken from the third column if there is one, or is set to unity if there
 is no third column.  The mapping is:

       x = r * cos(theta) * cos(phi)
       y = r * sin(theta) * cos(phi)
       z = r * sin(phi)

 Note that this is a "geographic" spherical system, rather than a "polar" one.

 For a cylindrical coordinate system, the data again occupy two or three
 columns.  The first two are interpreted as theta (in the units specified by
 `set angles`) and z.  The radius is either taken from the third column or set
 to unity, as in the spherical case.  The mapping is:

       x = r * cos(theta)
       y = r * sin(theta)
       z = z

 The effects of `mapping` can be duplicated with the `using` filter on the
 `splot` command, but `mapping` may be more convenient if many data files are
 to be processed.

 `mapping` has no effect on `plot`s.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/world/world.html">Mapping Demos.</a>
3 margin
?set margin
?show margin
?margin
 Normally the margins of the graph are automatically calculated based on tics
 and axis labels.  These computed values can be overridden by the `set margin`
 commands.  `show margin` shows the current settings.

 Syntax:
       set bmargin {<margin>}
       set lmargin {<margin>}
       set rmargin {<margin>}
       set tmargin {<margin>}
       show margin

 The units of <margin> are character heights or widths, as appropriate.  A
 positive value defines the absolute size of the margin.  A negative value (or
 none) causes `gnuplot` to revert to the computed value.
3 missing
?set missing
?missing
 The `set missing` command allows you to tell `gnuplot` what character is
 used in a data file to denote missing data.

 Syntax:
       set missing {"<character>"}
       show missing

 Example:
       set missing "?"

 would mean that, when plotting a file containing

          1 1
          2 ?
          3 2

 the middle line would be ignored.

 There is no default character for `missing`.
3 multiplot
?set multiplot
?multiplot
?set nomultiplot
 The command `set multiplot` places `gnuplot` in the multiplot mode, in which
 several graphs are placed on the same page, window, or screen.

 Syntax:
       set multiplot
       set nomultiplot

 For some terminals, no graph is displayed until the command `set nomultiplot`
 is given, which causes the entire page to be drawn and then returns `gnuplot`
 to its normal single-plot mode.  For other terminals, each separate `plot`
 command produces a graph, but the screen may not be cleared between graphs.

 Any labels or arrows that have been defined will be drawn for each graph
 according to the current size and origin (unless their coordinates are
 defined in the `screen` system).

 The commands `set origin` and `set size` must be used to correctly position
 each graph; see `set origin` and `set size` for details of their usage.

 Example:
       set size 0.7,0.7
       set origin 0.1,0.1
       set multiplot
       set size 0.4,0.4
       set origin 0.1,0.1
       plot sin(x)
       set size 0.2,0.2
       set origin 0.5,0.5
       plot cos(x)
       set nomultiplot

 displays a graph of cos(x) stacked above a graph of sin(x).  Note the initial
 `set size` and `set origin`.  While these are not always required, their
 inclusion is recommended.  Some terminal drivers require that bounding box
 information be available before any graphs can be made, and the form given
 above guarantees that the bounding box will include the entire graph array
 rather than just the bounding box of the first graph.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/multiplot/multiplt.html"> See demo. </a>
3 mx2tics
?set mx2tics
?set nomx2tics
?show mx2tics
?mx2tics
?nomx2tics
 Minor tic marks along the x2 (top) axis are controlled by `set mx2tics`.
 Please see `set mxtics`.
3 mxtics
?set mxtics
?set nomxtics
?show mxtics
?mxtics
?nomxtics
 Minor tic marks along the x axis are controlled by `set mxtics`.  They can be
 turned off with `set nomxtics`.  Similar commands control minor tics along
 the other axes.

 Syntax:
       set mxtics {<freq> | default}
       set nomxtics
       show mxtics

 The same syntax applies to `mytics`, `mztics`, `mx2tics` and `my2tics`.

 <freq> is the number of sub-intervals (NOT the number of minor tics) between
 major tics (ten is the default for a linear axis, so there are nine minor
 tics between major tics). Selecting `default` will return the number of minor
 ticks to its default value.

 If the axis is logarithmic, the number of sub-intervals will be set to a
 reasonable number by default (based upon the length of a decade).  This will
 be overridden if <freq> is given.  However the usual minor tics (2, 3, ...,
 8, 9 between 1 and 10, for example) are obtained by setting <freq> to 10,
 even though there are but nine sub-intervals.

 Minor tics can be used only with uniformly spaced major tics.  Since major
 tics can be placed arbitrarily by `set {x|x2|y|y2|z}tics`, minor tics cannot
 be used if major tics are explicitly `set`.

 By default, minor tics are off for linear axes and on for logarithmic axes.
 They inherit the settings for `axis|border` and `{no}mirror` specified for
 the major tics.  Please see `set xtics` for information about these.
3 my2tics
?set my2tics
?set nomy2tics
?show my2tics
?my2tics
?nomy2tics
 Minor tic marks along the y2 (right-hand) axis are controlled by `set
 my2tics`.  Please see `set mxtics`.
3 mytics
?set mytics
?set nomytics
?show mytics
?mytics
?nomytics
 Minor tic marks along the y axis are controlled by `set mytics`.  Please
 see `set mxtics`.
3 mztics
?set mztics
?set nomztics
?show mztics
?mztics
?nomztics
 Minor tic marks along the z axis are controlled by `set mztics`.  Please
 see `set mxtics`.
3 offsets
?set offsets
?set nooffsets
?show offsets
?offsets
?nooffsets
 Offsets provide a mechanism to put a boundary around the data inside of an
 autoscaled graph.

 Syntax:
       set offsets <left>, <right>, <top>, <bottom>
       set nooffsets
       show offsets

 Each offset may be a constant or an expression.  Each defaults to 0.  Left
 and right offsets are given in units of the x axis, top and bottom offsets in
 units of the y axis.  A positive offset expands the graph in the specified
 direction, e.g., a positive bottom offset makes ymin more negative.  Negative
 offsets, while permitted, can have unexpected interactions with autoscaling
 and clipping.

 Offsets are ignored in `splot`s.

 Example:
       set offsets 0, 0, 2, 2
       plot sin(x)

 This graph of sin(x) will have a y range [-3:3] because the function
 will be autoscaled to [-1:1] and the vertical offsets are each two.
3 origin
?set origin
?show origin
?origin
 The `set origin` command is used to specify the origin of a plotting surface
 (i.e., the graph and its margins) on the screen.  The coordinates are given
 in the `screen` coordinate system (see `coordinates` for information about
 this system).

 Syntax:
       set origin <x-origin>,<y-origin>
3 output
?set output
?show output
?output
 By default, screens are displayed to the standard output. The `set output`
 command redirects the display to the specified file or device.

 Syntax:
       set output {"<filename>"}
       show output

 The filename must be enclosed in quotes.  If the filename is omitted, any
 output file opened by a previous invocation of `set output` will be closed
 and new output will be sent to the standard output.  MSDOS users should note
 that the \ character has special significance in double-quoted strings, so
 single-quotes should be used for filenames in different directories.

 If both `set terminal` and `set output` are used together, it is safest to
 give `set terminal` first, because some terminals set a flag which is needed
 in some operating systems.

 On machines with popen functions (Unix), output can be piped through a shell
 command if the first character of the filename is '|'.  For instance,

       set output "|lpr -Plaser filename"
       set output "|lp -dlaser filename"

 On MSDOS machines, `set output "PRN"` will direct the output to the default
 printer.  On VMS, output can be sent directly to any spooled device.  It is
 also possible to send the output to DECnet transparent tasks, which allows
 some flexibility.
3 parametric
?set parametric
?set noparametric
?show parametric
?parametric
?noparametric
 The `set parametric` command changes the meaning of `plot` (`splot`) from
 normal functions to parametric functions.  The command `set noparametric`
 restores the plotting style to normal, single-valued expression plotting.

 Syntax:
       set parametric
       set noparametric
       show parametric

 For 2-d plotting, a parametric function is determined by a pair of parametric
 functions operating on a parameter.  An example of a 2-d parametric function
 would be `plot sin(t),cos(t)`, which draws a circle (if the aspect ratio is
 set correctly---see `set size`).  `gnuplot` will display an error message if
 both functions are not provided for a parametric `plot`.

 For 3-d plotting, the surface is described as x=f(u,v), y=g(u,v), z=h(u,v).
 Therefore a triplet of functions is required.  An example of a 3-d parametric
 function would be `cos(u)*cos(v),cos(u)*sin(v),sin(u)`, which draws a sphere.
 `gnuplot` will display an error message if all three functions are not
 provided for a parametric `splot`.

 The total set of possible plots is a superset of the simple f(x) style plots,
 since the two functions can describe the x and y values to be computed
 separately.  In fact, plots of the type t,f(t) are equivalent to those
 produced with f(x) because the x values are computed using the identity
 function.  Similarly, 3-d plots of the type u,v,f(u,v) are equivalent to
 f(x,y).

 Note that the order the parametric functions are specified is xfunction,
 yfunction (and zfunction) and that each operates over the common parametric
 domain.

 Also, the `set parametric` function implies a new range of values.  Whereas
 the normal f(x) and f(x,y) style plotting assume an xrange and yrange (and
 zrange), the parametric mode additionally specifies a trange, urange, and
 vrange.  These ranges may be set directly with `set trange`, `set urange`,
 and `set vrange`, or by specifying the range on the `plot` or `splot`
 commands.  Currently the default range for these parametric variables is
 [-5:5].  Setting the ranges to something more meaningful is expected.
3 pointsize
?set pointsize
?show pointsize
?pointsize
 The `set pointsize` command changes the size of the points used in plots.

 Syntax:
       set pointsize <pointsize>
       show pointsize

 Default is pointsize 1.0.  Larger pointsizes (>1.0) are useful for high
 resolution in bitmapped graphics.

 The pointsize of a single plot may be changed on the `plot` command.  See
 `plot with` for details.

 Please note that the pointsize setting is not supported with all terminal
 types.
3 polar
?set polar
?set nopolar
?show polar
?polar
?nopolar
 The `set polar` command changes the meaning of the graph from rectangular
 coordinates to polar coordinates.

 Syntax:
       set polar
       set nopolar
       show polar

 There have been changes made to polar mode in version 3.6, so that scripts
 for `gnuplot` versions 3.5 and earlier will require modification.  The main
 change is that the dummy variable t is used for the angle so that the x and
 y ranges can be controlled independently.  Other changes are:
 1) tics are no longer put along the zero axes automatically
 ---use `set xtics axis nomirror`; `set ytics axis nomirror`; 
 2) the grid, if selected, is not automatically polar
 ---use `set grid polar`; 
 3) the grid is not labelled with angles
 ---use `set label` as necessary.

 In polar coordinates, the dummy variable (t) is an angle.  The default range
 of t is [0:2*pi], or, if degree units have been selected, to [0:360] (see
 `set angles`).

 The command `set nopolar` changes the meaning of the graph back to the
 default rectangular coordinate system.

 The `set polar` command is not supported for `splot`s.  See the `set mapping`
 command for similar functionality for `splot`s.

 While in polar coordinates the meaning of an expression in t is really
 r = f(t), where t is an angle of rotation.  The trange controls the domain
 (the angle) of the function, and the x and y ranges control the range of the
 graph in the x and y directions.  Each of these ranges, as well as the
 rrange, may be autoscaled or set explicitly.  See `set xrange` for details
 of all the `set range` commands.

 Example:
       set polar
       plot t*sin(t)
       plot [-2*pi:2*pi] [-3:3] [-3:3] t*sin(t)

 The first `plot` uses the default polar angular domain of 0 to 2*pi.  The
 radius and the size of the graph are scaled automatically.  The second `plot`
 expands the domain, and restricts the size of the graph to [-3:3] in both
 directions.

 You may want to `set size square` to have `gnuplot` try to make the aspect
 ratio equal to unity, so that circles look circular.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/polar/polar.html">Polar demos </a>
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/poldat/poldat.html">Polar Data Plot. </a>
3 rmargin
?set rmargin
?rmargin
 The command `set rmargin` sets the size of the right margin.  Please see
 `set margin` for details.
3 rrange
?set rrange
?show rrange
?rrange
 The `set rrange` command sets the range of the radial coordinate for a
 graph in polar mode.  Please see `set xrange` for details.
3 samples
?set samples
?show samples
?samples
 The sampling rate of functions may be changed by the `set samples` command.

 Syntax:
       set samples <samples_1> {,<samples_2>}
       show samples

 By default, sampling is set to 100 points.  A higher sampling rate will
 produce more accurate plots, but will take longer.  This parameter has no
 effect on data-file plotting unless one of the `smooth` options is used.

 When a 2-d graph is being done, only the value of <samples_1> is relevant.

 When a surface plot is being done without the removal of hidden lines, the
 value of samples specifies the number of samples that are to be evaluated for
 isoline.  Each iso-v line will have <sample_1> samples and each iso-u line
 will have <sample_2> samples.  If you only specify <samples_1>, <samples_2>
 will be set to the same value as <samples_1>.  See also `set isosamples`.
3 size
?set size
?show size
?size
 The `set size` command scales the displayed size of the graph.

 Syntax:
       set size {{no}square | ratio <r> | noratio} {<xscale>,<yscale>}
       show size

 The <xscale> and <yscale> values are the scaling factors for the size of the
 plotting area, which includes the margins.  `ratio` causes `gnuplot` to try
 to create a graph with an aspect ratio of <r> (the ratio of the y-axis length
 to the x-axis length) within the portion of the plotting area specified by
 <xscale> and <yscale>.  The success of `gnuplot` in producing the requested
 aspect ratio depends on the terminal selected.  The graph area will be the
 largest rectangle of aspect ratio <r> that will fit into the specified
 portion of the output (leaving adequate margins, of course).  `square` is a
 synonym for `ratio 1`.  Both `noratio` and `nosquare` return the graph to its
 default aspect ratio (0.0, no control), but do not return <xscale> or <yscale>
 to their default values (1.0).
 
 The meaning of a negative value for <r> is different. If <r>=-1, gnuplot tries
 to set the scales so that the unit has the same length on x and y axis
 (suitable for geographical data, for instance). If <r>=-2, the unit on y has
 twice the length of the unit on x, and so on.
 
 `set size` is relative to the default size, which differs from terminal to
 terminal.  Since `gnuplot` fills as much of the available plotting area as
 possible by default, it is safer to use `set size` to decrease the size of
 a graph than to increase it.  See `set terminal` for the default sizes.

 On some terminals, changing the size of the graph will result in text being
 misplaced.

 Examples:

 To set the size to normal size use:
       set size 1,1

 To make the graph half size and square use:
       set size square 0.5,0.5

 To make the graph twice as high as wide use:
       set size ratio 2

^<a href="http://www.nas.nasa.gov/~woo/gnuplot/airfoil/airfoil.html"> See demo. </a>
3 style
?set function style
?show function style
?set data style
?show data style
?set style
?show style
 Default styles are chosen with the `set function style` and `set data style`
 commands.  See `plot with` for information about how to override the default
 plotting style for individual functions and data sets.

 Syntax:
       set function style <style>
       set data style <style>
       show function style
       show data style

 The types used for all line and point styles (i.e., solid, dash-dot, color,
 etc. for lines; circles, squares, crosses, etc. for points) will be either
 those specified on the `plot` or `splot` command or will be chosen
 sequentially from the types available to the terminal in use.  Use the
 command `test` to see what is available.

 None of the styles requiring more than two columns of information (e.g.,
 `errorbars`) can be used with `splot`s or function `plot`s.  Neither `boxes`
 nor any of the `steps` styles can be used with `splot`s.  If an inappropriate
 style is specified, it will be changed to `points`.

 For 2-d data with more than two columns, `gnuplot` is picky about the allowed
 `errorbar` styles.  The `using` option on the `plot` command can be used to
 set up the correct columns for the style you want.  (In this discussion,
 "column" will be used to refer both to a column in the data file and an entry
 in the `using` list.)

 For three columns, only `xerrorbars`, `yerrorbars` (or `errorbars`), `boxes`,
 and `boxerrorbars` are allowed.  If another plot style is used, the style
 will be changed to `yerrorbars`.  The `boxerrorbars` style will calculate the
 boxwidth automatically.

 For four columns, only `xerrorbars`, `yerrorbars` (or `errorbars`),
 `xyerrorbars`, `boxxyerrorbars`, and `boxerrorbars` are allowed.  An illegal
 style will be changed to `yerrorbars`.

 Five-column data allow only the `boxerrorbars`, `financebars`, and
 `candlesticks` styles.  (The last two of these are primarily used for plots
 of financial prices.)  An illegal style will be changed to `boxerrorbars`
 before plotting.

 Six- and seven-column data only allow the `xyerrorbars` and `boxxyerrorbars`
 styles.  Illegal styles will be changed to `xyerrorbars` before plotting.

 For more information about error bars, please see `plot errorbars`.
4 boxerrorbars
?set style boxerrorbars
?style boxerrorbars
?boxerrorbars
 The `boxerrorbars` style is only relevant to 2-d data plotting.  It is a
 combination of the `boxes` and `yerrorbars` styles.  The boxwidth will come
 from the fourth column if the y errors are in the form of "ydelta" and the
 boxwidth was not previously set equal to -2.0 (`set boxwidth -2.0`) or from
 the fifth column if the y errors are in the form of "ylow yhigh".  The
 special case  `boxwidth = -2.0` is for four-column data with y errors in the
 form "ylow yhigh".  In this case the boxwidth will be calculated so that each
 box touches the adjacent boxes.  The width will also be calculated in cases
 where three-column data are used.

 The box height is determined from the y error in the same way as it is for
 the `yerrorbars` style---either from y-ydelta to y+ydelta or from ylow to
 yhigh, depending on how many data columns are provided.
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/errorbar/errorbar.html"> See Demo. </a>
4 boxes
?set style boxes
?style boxes
?boxes
?set style bargraph
?style bargraph
?bargraph
 The `boxes` style is only relevant to 2-d plotting.  It draws a box centered
 about the given x coordinate from the x axis (not the graph border) to the
 given y coordinate.  The width of the box is obtained in one of three ways.
 If it is a data plot and the data file has a third column, this will be used
 to set the width of the box.  If not, if a width has been set using the `set
 boxwidth` command, this will be used.  If neither of these is available, the
 width of each box will be calculated automatically so that it touches the
 adjacent boxes.
4 boxxyerrorbars
?set style boxxyerrorbars
?style boxxyerrorbars
?boxxyerrorbars
 The `boxxyerrorbars` style is only relevant to 2-d data plotting.  It is a
 combination of the `boxes` and `xyerrorbars` styles.

 The box width and height are determined from the x and y errors in the same
 way as they are for the `xyerrorbars` style---either from xlow to xhigh and
 from ylow to yhigh, or from x-xdelta to x+xdelta and from y-ydelta to
 y+ydelta , depending on how many data columns are provided.
4 candlesticks
?set style candlesticks
?style candlesticks
?candlesticks
 The `candlesticks` style is only relevant for 2-d data plotting of financial
 data.  Five columns of data are required; in order, these should be the x
 coordinate (most likely a date) and the opening, low, high, and closing
 prices.  The symbol is an open rectangle, centered horizontally at the x
 coordinate and limited vertically by the opening and closing prices.  A
 vertical line segment at the x coordinate extends up from the top of the
 rectangle to the high price and another down to the low.  The width of the
 rectangle may be changed by `set bar`.  The symbol will be unchanged if the
 low and high prices are interchanged or if the opening and closing prices
 are interchanged.  See `set bar` and `financebars`.
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/finance/finance.html"> See demos.</a>
4 dots
?set style dots
?style dots
?dots
 The `dots` style plots a tiny dot at each point; this is useful for scatter
 plots with many points.
4 financebars
?set style financebars
?style financebars
?financebars
 The `financebars` style is only relevant for 2-d data plotting of financial
 data.  Five columns of data are required; in order, these should be the x
 coordinate (most likely a date) and the opening, low, high, and closing
 prices.  The symbol is a vertical line segment, located horizontally at the x
 coordinate and limited vertically by the high and low prices.  A horizontal
 tic on the left marks the opening price and one on the right marks the
 closing price.  The length of these tics may be changed by `set bar`.  The
 symbol will be unchanged if the high and low prices are interchanged.  See
 `set bar` and `candlesticks`.
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/finance/finance.html"> See demos.</a>
4 fsteps
?set style fsteps
?style fsteps
?fsteps
 The `fsteps` style is only relevant to 2-d plotting.  It connects consecutive
 points with two line segments: the first from (x1,y1) to (x1,y2) and the
 second from (x1,y2) to (x2,y2).
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/steps/steps.html"> See demo. </a>
4 histeps
?set style histeps
?style histeps
?histeps
 The `histeps` style is only relevant to 2-d plotting.  It is intended for
 plotting histograms.  Y-values are assumed to be centered at the x-values;
 the point at x1 is represented as a horizontal line from ((x0+x1)/2,y1) to
 ((x1+x2)/2,y1).  The lines representing the end points are extended so that
 the step is centered on at x.  Adjacent points are connected by a vertical
 line at their average x, that is, from ((x1+x2)/2,y1) to ((x1+x2)/2,y2).

 If `autoscale` is in effect, it selects the xrange from the data rather than
 the steps, so the end points will appear only half as wide as the others.
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/steps/steps.html"> See demo. </a>
4 impulses
?set style impulses
?style impulses
?impulses
 The `impulses` style displays a vertical line from the x axis (not the graph
 border), or from the grid base for `splot`, to each point.
4 lines
?set style lines
?style lines
?lines
 The `lines` style connects adjacent points with straight line segments.
4 linespoints
?set style linespoints
?set style lp
?style linespoints
?style lp
?linespoints
?lp
 The `linespoints` style does both `lines` and `points`, that is, it draws a
 small symbol at each point and then connects adjacent points with straight
 line segments.  The command `set pointsize` may be used to change the size of
 the points.  See `set pointsize` for its usage.

 `linespoints` may be abbreviated `lp`.
4 points
?set style points
?style points
?points
 The `points` style displays a small symbol at each point.  The command `set
 pointsize` may be used to change the size of the points.  See `set pointsize`
 for its usage.
4 steps
?set style steps
?style steps
?steps
 The `steps` style is only relevant to 2-d plotting.  It connects consecutive
 points with two line segments: the first from (x1,y1) to (x2,y1) and the
 second from (x2,y1) to (x2,y2).
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/steps/steps.html"> See demo. </a>
4 vectors
?set style vectors
?style vectors
?vectors
 The `vectors` style draws a vector from (x,y) to (x+xdelta,y+ydelta).  Thus
 it requires four columns of data.  It also draws a small arrowhead at the
 end of the vector.

 The `vectors` style is still experimental: it doesn't get clipped properly
 and other things may also be wrong with it.  Use it at your own risk.
4 xerrorbars
?set style xerrorbars
?style xerrorbars
?xerrorbars
 The `xerrorbars` style is only relevant to 2-d data plots.  `xerrorbars` is
 like `dots`, except that a horizontal error bar is also drawn.  At each point
 (x,y), a line is drawn from (xlow,y) to (xhigh,y) or from (x-xdelta,y) to
 (x+xdelta,y), depending on how many data columns are provided.  A tic mark
 is placed at the ends of the error bar (unless `set bar` is used---see `set
 bar` for details).
4 xyerrorbars
?set style xyerrorbars
?style xyerrorbars
?xyerrorbars
 The `xyerrorbars` style is only relevant to 2-d data plots.  `xyerrorbars` is
 like `dots`, except that horizontal and vertical error bars are also drawn.
 At each point (x,y), lines are drawn from (x,y-ydelta) to (x,y+ydelta) and
 from (x-xdelta,y) to (x+xdelta,y) or from (x,ylow) to (x,yhigh) and from
 (xlow,y) to (xhigh,y), depending upon the number of data columns provided.  A
 tic mark is placed at the ends of the error bar (unless `set bar` is
 used---see `set bar` for details).

 If data are provided in an unsupported mixed form, the `using` filter on the
 `plot` command should be used to set up the appropriate form.  For example,
 if the data are of the form (x,y,xdelta,ylow,yhigh), then you can use

       plot 'data' using 1:2:($1-$3),($1+$3),4,5 with xyerrorbars
4 yerrorbars
?set style yerrorbars
?style yerrorbars
?yerrorbars
?set style errorbars
?style errorbars
?errorbars
 The `yerrorbars` (or `errorbars`) style is only relevant to 2-d data plots.
 `yerrorbars` is like `dots`, except that a vertical error bar is also drawn.
 At each point (x,y), a line is drawn from (x,y-ydelta) to (x,y+ydelta) or
 from (x,ylow) to (x,yhigh), depending on how many data columns are provided.
 A tic mark is placed at the ends of the error bar (unless `set bar` is
 used---see `set bar` for details).
^<a href="http://www.nas.nasa.gov/~woo/gnuplot/errorbar/errorbar.html"> See demo. </a>
3 surface
?set surface
?set nosurface
?show surface
?surface
?nosurface
 The command `set surface` controls the display of surfaces, which are drawn
 as a mesh of isolines.

 Syntax:
       set surface
       set nosurface
       show surface

 Whenever `set nosurface` is issued, no surface isolines/mesh will be drawn.
 This is useful if contours are to be displayed by themselves.  See also `set
 contour`.
^ <h2> Terminal Types </h2>
3 terminal
?set terminal
?set term
?show terminal
?terminal
?term
 `gnuplot` supports many different graphics devices.  Use `set terminal` to
 tell `gnuplot` what kind of output to generate.

 Syntax:
       set terminal {<terminal-type>}
       show terminal

 If <terminal-type> is omitted, `gnuplot` will list the available terminal
 types.  <terminal-type> may be abbreviated.

 Use `set output` to redirect this output to a file or device.

 If both `set terminal` and `set output` are used together, it is safest to
 give `set terminal` first, because some terminals set a flag which is needed
 in some operating systems.

 Several terminals have additional options.  For example, see `dumb`,
 `iris4d`, `hpljii` or `postscript`.

 This document may describe drivers that are not available to you because they
 were not installed, or it may not describe all the drivers that are available
 to you, depending on its output format.
<4 -- all terminal stuff is pulled from the .trm files
3 tics
?set tics
?show tics
?tics
 The `set tics` command can be used to change the tics to be drawn outwards.

 Syntax:
       set tics {<direction>}
       show tics

 where <direction> may be `in` (the default) or `out`.

 See also `set xtics` for more control of major (labelled) tic marks and `set
 mxtics` for control of minor tic marks.
3 ticslevel
?set ticslevel
?show ticslevel
?ticslevel
 Using `splot`, one can adjust the relative height of the vertical (Z) axis
 using `set ticslevel`.  The numeric argument provided specifies the location
 of the bottom of the scale (as a fraction of the z-range) above the xy-plane.
 The default value is 0.5.  Negative values are permitted, but tic labels on
 the three axes may overlap.

 To place the xy-plane at a position 'pos' on the z-axis, `ticslevel` should
 be set equal to  (pos - zmin) / (zmin - zmax).

 Syntax:
       set ticslevel {<level>}
       show tics

 See also `set view`.
3 ticscale
?set ticscale
?show ticscale
?ticscale
 The size of the tic marks can be adjusted with `set ticscale`.

 Syntax:
       set ticscale {<major> {<minor>}}
       show tics

 If <minor> is not specified, it is 0.5*<major>.  The default size is 1.0 for
 major tics and 0.5 for minor tics.  Note that it is possible to have the tic
 marks pointing outward by specifying a negative size.
3 time
?set time
?set notime
?show time
?time
?notime
 The optional `set time` places the time and date of the graph either at the
 top or bottom of the left margin.  The exact location is device dependent.

 Syntax:
       set time {"<format>"} {<xoff>}{,<yoff>} {"<font>"}
       set notime
       show time

 The format string allows you to choose the format used to write the date and
 time.  Its default value is what asctime() uses: "%a %b %d %H:%M:%S %Y"
 (weekday, month name, day of the month, hours, minutes, seconds, four-digit
 year).  The constants <xoff> and <off> are offsets from the default position
 given in character screen coordinates.  <font> is used to specify the font
 with which the time is to be written.

 Example:
       set time "%d/%m/%y %H:%M" 80,-2 "Helvetica"

 See `set timefmt` for more information about time format strings.
3 timefmt
?set timefmt
?show timefmt
?timefmt
 This command applies to timeseries where data are composed of dates/times.
 It has no meaning unless the command `set xdata time` is given also.

 Syntax:
       set timefmt "<format string>"
       show timefmt

 The string argument tells `gnuplot` how to read timedata from the datafile.
 Valid conversion codes are: %d (day of month, 1--31), %m (month, 1--12), %y
 (year, 0--99), %Y (year, 4 digits), %j (day of year, 1--365), %H (hour,
 0--24), %M (minute, 0--60), and %S (second, 0--60).  Any character is allowed
 in the string (including space), but must match exactly.  Backslash-octals
 (\nnn) are converted to char; \t (tab) is understood.  If there is no
 separating character between the date/time elements, then %d, %m, %y, %H, %M
 and %S read two digits each, %Y reads four digits and %j reads three digits.

 Each set of non-blank characters in the timedata counts as one column in the
 `using n:n` specification.  Thus `11:11  25/12/76  21.0` consists of three
 columns.  To avoid confusion, `gnuplot` requires that you provide a complete
 `using` specification if your file contains timedata.

 See also `set xdata`.

 Example:
       set timefmt "%d/%m/%Y\t%H:%M"
 tells `gnuplot` to read date and time separated by tab.  (But look closely at
 your data---what began as a tab may have been converted to spaces somewhere
 along the line; the format string must match what is actually in the file.)
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/timedat/timedat.html"> Time Data Demo </a>
3 title
?set title
?show title
?title
 The `set title` command produces a graph title that is centered at the top of
 the graph.  `set title` is a special case of `set label`.

 Syntax:
       set title {"<title-text>"} {<xoff>}{,<yoff>} {"<font>,{<size>}"}
       show title

 Specifying constants <xoff> or <yoff> as optional offsets for the title will
 move the title <xoff> or <yoff> character screen coordinates (not graph
 coordinates).  For example, "`set title ,-1`" will change only the y offset
 of the title, moving the title down by roughly the height of one character.

 <font> is used to specify the font with which the title is to be written;
 the units of the font <size> depend upon which terminal is used.

 `set title` with no parameters clears the title.

 See `syntax` for details about the processing of backslash sequences and
 the distinction between single- and double-quotes.
3 tmargin
?set tmargin
?tmargin
 The command `set tmargin` sets the size of the top margin.  Please see
 `set margin` for details.
3 trange
?set trange
?show trange
?trange
 The `set trange` command sets the parametric range used to compute x and y
 values when in parametric or polar modes.  Please see `set xrange` for
 details.
3 urange
?set urange
?show urange
?urange
 The `set urange` and `set vrange` commands set the parametric ranges used
 to compute x, y, and z values when in `splot` parametric mode.  Please see
 `set xrange` for details.
3 variables
?show variables
 The `show variables` command lists all user-defined variables and their
 values.

 Syntax:
       show variables
3 view
?set view
?show view
?view
 The `set view` command sets the viewing angle for `splot`s.  It controls how
 the 3-d coordinates of the plot are mapped into the 2-d screen space.  It
 provides controls for both rotation and scaling of the plotted data, but
 supports orthographic projections only.

 Syntax:
       set view <rot_x> {,{<rot_z>}{,{<scale>}{,<scale_z>}}}
       show view

 where <rot_x> and <rot_z> control the rotation angles (in degrees) along a
 virtual 3-d coordinate system aligned with the screen such that the screen
 horizontal axis is x, screen vertical axis is y, and the axis perpendicular
 to the screen is z.  <rot_x> is bounded to the [0:180] range with a default
 of 60 degrees, while <rot_z> is bounded to the [0:360] range with a default
 of 30 degrees.  <scale> controls the scaling of the entire `splot`, while
 <scale_z> scales the z axis only.  Both scales default to 1.0.

 Examples:
       set view 60, 30, 1, 1
       set view ,,0.5

 The first sets all the four default values.  The second changes only scale,
 to 0.5.

 See also `set ticslevel`.
3 vrange
?set vrange
?show vrange
?vrange
 The `set urange` and `set vrange` commands set the parametric ranges used
 to compute x, y, and z values when in `splot` parametric mode.  Please see
 `set xrange` for details.
3 x2data
?set x2data
?show x2data
?x2data
 The `set x2data` command sets data on the x2 (top) axis to timeseries
 (dates/times).  Please see `set xdata`.
3 x2dtics
?set x2dtics
?set nox2dtics
?show x2dtics
?x2dtics
?nox2dtics
 The `set x2dtics` command changes tics on the x2 (top) axis to days of the
 week.  Please see `set xmtics` for details.
3 x2label
?set x2label
?show x2label
?x2label
 The `set x2label` command sets the label for the x2 (top) axis.  Please see
 `set xlabel`.
3 x2mtics
?set x2mtics
?set nox2mtics
?show x2mtics
?x2mtics
?nox2mtics
 The `set x2mtics` command changes tics on the x2 (top) axis to months of the
 year.  Please see `set xmtics` for details.
3 x2range
?set x2range
?show x2range
?x2range
 The `set x2range` command sets the horizontal range that will be displayed on
 the x2 (top) axis.  Please see `set xrange` for details.
3 x2tics
?set x2tics
?set nox2tics
?show x2tics
?x2tics
?nox2tics
 The `set x2tics` command controls major (labelled) tics on the x2 (top) axis.
 Please see `set xtics` for details.
3 x2zeroaxis
?set x2zeroaxis
?set nox2zeroaxis
?show x2zeroaxis
?x2zeroaxis
?nox2zeroaxis
 The `set x2zeroaxis` command draws a line at the origin of the x2 (top) axis
 (x2 = 0).  For details, please see
 `set zeroaxis`.
3 xdata
?set xdata
?show xdata
?xdata
 This command sets the datatype on the x axis to date/time.  A similar command
 does the same thing for each of the other axes.

 Syntax:
       set xdata {time}
       show xdata

 The same syntax applies to `ydata`, `zdata`, `x2data` and `y2data`.

 The `time` option signals that the datatype is indeed date/time.  If the
 option is not specified, the datatype reverts to normal.

 See `set timefmt` to tell `gnuplot` how to read date or time data.  The
 date/time is converted to seconds from start of the century.  There is
 currently only one timefmt, which implies that all the date/time columns must
 confirm to this format.  Specification of ranges should be supplied as quoted
 strings according to this format to avoid interpretation of the date/time as
 an expression.

 The function "strftime" (type "man strftime" on unix to look it up) is used
 to print ticmark labels.  `gnuplot` tries to figure out a reasonable format
 for this  unless the `set format x "string"` has supplied something that does
 not look like a decimal format (more than one '%' or neither %f nor %g).
3 xdtics
?set xdtics
?set noxdtics
?show xdtics
?xdtics
?noxdtics
 The `set xdtics` commands converts the x-axis tic marks to days of the week
 where 0=Sun and 6=Sat.  Overflows are converted modulo 7 to dates.  `set
 noxdtics` returns the labels to their default values.  Similar commands do
 the same things for the other axes.

 Syntax:
       set xdtics
       set noxdtics
       show xdtics

 The same syntax applies to `ydtics`, `zdtics`, `x2dtics` and `y2dtics`.

 See also the `set format` command.
3 xlabel
?set xlabel
?show xlabel
?xlabel
 The `set xlabel` command sets the x axis label.  Similar commands set labels
 on the other axes.

 Syntax:
       set xlabel {"<label>"} {<xoff>}{,<yoff>} {"<font>{,<size>}"}
       show xlabel

 The same syntax applies to `x2label`, `ylabel`, `y2label` and `zlabel`.

 Specifying the constants <xoff> or <yoff> as optional offsets for a label
 will move it <xoff> or <yoff> character screen coordinates. For example,
 "` set xlabel -1`" will change only the x offset of the xlabel, moving the
 label roughly one character width to the left.

 <font> is used to specify the font in which the label is written; the units
 of the font <size> depend upon which terminal is used.

 To clear a label, put no options on the command line, e.g., "`set y2label`".

 The default positions of the axis labels are as follows:

 xlabel:  The x-axis label is centered below the bottom axis.

 ylabel:  The position of the y-axis label depends on the terminal, and can be
 one of the following three positions:

 1. Horizontal text flushed left at the top left of the graph.  Terminals that
 cannot rotate text will probably use this method.  If `set x2tics` is also
 in use, the ylabel may overwrite the left-most x2tic label.  This may be
 remedied by adjusting the ylabel position or the left margin.

 2. Vertical text centered vertically at the left of the graph.  Terminals
 that can rotate text will probably use this method.

 3. Horizontal text centered vertically at the left of the graph.  The EEPIC,
 LaTeX and TPIC drivers use this method.  The user must insert line breaks
 using \\ to prevent the ylabel from overwriting the graph.  To produce a
 vertical row of characters, add \\ between every printing character (but this
 is ugly).

 zlabel: The z-axis label is centered along the z axis and placed in the space
 above the grid level.

 y2label: The y2-axis label is placed to the right of the y2 axis.  The
 position is terminal-dependent in the same manner as is the y-axis label.

 x2label: The x2-axis label is placed above the top axis but below the graph
 title.  It is also possible to create an x2-axis label by using new-line
 characters to make a multi-line graph title, e.g.,

       set title "This is the title\n\nThis is the x2label"

 Note that double quotes must be used.  The same font will be used for both
 lines, of course.

 Please see `set syntax` for further information about backslash processing
 and the difference between single- and double-quoted strings.
3 xmtics
?set xmtics
?set noxmtics
?show xmtics
?xmtics
?noxmtics
 The `set xmtics` commands converts the x-axis tic marks to months of the
 year where 1=Jan and 12=Dec.  Overflows are converted modulo 12 to months.
 The tics are returned to their default labels by `set noxmtics`.  Similar
 commands perform the same duties for the other axes.

 Syntax:
       set xmtics
       set noxmtics
       show xmtics

 The same syntax applies to `x2mtics`, `ymtics`, `y2mtics`, and `zmtics`.

 See also the `set format` command.
3 xrange
?set xrange
?show xrange
?xrange
 The `set xrange` command sets the horizontal range that will be displayed.
 A similar command exists for each of the other axes, as well as for the
 polar radius r and the parametric variables t, u, and v.

 Syntax:
       set xrange [{{<min>}:{<max>}}] {{no}reverse} {{no}writeback}
       show xrange

 where <min> and <max> terms are constants, expressions or an asterisk to set
 autoscaling.  If the data are date/time, you must give the range as a quoted
 string according to the `set timefmt` format.  Any value omitted will not be
 changed.

 The same syntax applies to `yrange`, `zrange`, `x2range`, `y2range`,
 `rrange`, `trange`, `urange` and `vrange`.

 The `reverse` option reverses the direction of the axis, e.g., `set xrange
 [0:1] reverse` will produce an axis with 1 on the left and 0 on the right.
 This is identical to the axis produced by `set xrange [1:0]`, of course.
 `reverse` is intended primarily for use with `autoscale`.

 The `writeback` option essentially saves the range found by `autoscale` in
 the buffers that would be filled by `set xrange`.  This is useful if you wish
 to plot several functions together but have the range determined by only
 some of them.  The `writeback` operation is performed during the `plot`
 execution, so it must be specified before that command.  For example,

       set xrange [-10:10]
       set yrange [] writeback
       plot sin(x)
       set noautoscale y
       replot x/2

 results in a yrange of [-1:1] as found only from the range of sin(x); the
 [-5:5] range of x/2 is ignored.  Executing `show yrange` after each command
 in the above example should help you understand what is going on.

 In 2-d, `xrange` and `yrange` determine the extent of the axes, `trange`
 determines the range of the parametric variable in parametric mode or the
 range of the angle in polar mode.  Similarly in parametric 3-d, `xrange`,
 `yrange`, and `zrange` govern the axes and `urange` and `vrange` govern the
 parametric variables.

 In polar mode, `rrange` determines the radial range plotted.  <rmin> acts as
 an additive constant to the radius, whereas <rmax> acts as a clip to the
 radius---no point with radius greater than <rmax> will be plotted.  `xrange`
 and `yrange` are affected---the ranges can be set as if the graph was of
 r(t)-rmin, with rmin added to all the labels.

 Any range may be partially or totally autoscaled, although it may not make
 sense to autoscale a parametric variable unless it is plotted with data.

 Ranges may also be specified on the `plot` command line.  A range given on
 the plot line will be used for that single `plot` command; a range given by
 a `set` command will be used for all subsequent graphs that do not specify
 their own ranges.  The same holds true for `splot`.

 Examples:

 To set the xrange to the default:
       set xrange [-10:10]

 To set the yrange to increase downwards:
       set yrange [10:-10]

 To change zmax to 10 without affecting zmin (which may still be autoscaled):
       set zrange [:10]

 To autoscale xmin while leaving xmax unchanged:
       set xrange [*:]
3 xtics
?set xtics
?set noxtics
?show xtics
?xtics
?noxtics
 Fine control of the major (labelled) tics on the x axis is possible with the
 `set xtics` command.  The tics may be turned off with the `set noxtics`
 command, and may be turned on (the default state) with `set xtics`.  Similar
 commands control the major tics on the y, z, x2 and y2 axes.

 Syntax:
       set xtics {axis | border} {{no}mirror} 
                 {  <incr> 
                  | <start>, <incr> {,<end>}
                  | ({"<label>"} <pos> {,{"<label>"} <pos>}...) }
       set noxtics
       show xtics

 The same syntax applies to `ytics`, `ztics`, `x2tics` and `y2tics`.

 `axis` or `border` tells `gnuplot` to put the tics (both the tics themselves
 and the accompanying labels) along the axis or the border, respectively.
 `mirror` tells it to put unlabelled tics at the same positions on the
 opposite border.  `nomirror` does what you think it does.  The defaults are
 `border mirror` for tics on the x, y, x2, and y2 axes.  For the z axis, the
 the `{axis | border}` option is not available and the default is `nomirror`.
 If you do want to mirror the z-axis tics, you might want to create a bit more
 room for them with `set border`.

 The positions of the tics may be specified in either of two forms:

 The <start>, <incr>, <end> form specifies that a series of tics will be
 plotted on the axis between the values <start> and <end> with an increment of
 <incr>.  If <end> is not given, it is assumed to be infinity.  The increment
 may be negative.  If neither <start> nor <end> is given, <start> is assumed
 to be negative infinity, <end> is assumed to be positive infinity, and the
 tics will be drawn at multiples of <step>---there will be a tic at zero (if
 it is within the plotted range).  If the axis is logarithmic, the increment
 will be used as a multiplicative factor.

 Examples:

 Make tics at 0, 0.5, 1, 1.5, ..., 9.5, 10.
       set xtics 0,.5,10

 Make tics at ..., -10, -5, 0, 5, 10, ...
       set xtics 5

 Make tics at 1, 100, 1e4, 1e6, 1e8.
       set logscale x; set xtics 1,100,10e8

 The ("<label>" <pos>, ...) form allows arbitrary tic positions or non-numeric
 tic labels.  A set of tics is a set of positions, each with its own optional
 label.  Note that the label is a string enclosed by quotes, and may be a
 constant string, such as "hello", or contain formatting information for the
 tic number (which is the same as the position), such as "%3f clients".  See
 `set format` for more information about this case.  The label may be made
 empty by specifying it as an empty string.  If no string is given, the
 default label (numerical) is used.  In this form, the tics do not need to be
 listed in numerical order.

 Examples:
       set xtics ("low" 0, "medium" 50, "high" 100)
       set xtics (1,2,4,8,16,32,64,128,256,512,1024)
       set ytics ("bottom" 0, "" 10, "top" 20)

 In the second example, all tics are labelled.  In the third, only the end
 tics are labelled.

 Tics will only be plotted when in range.

 Minor (unlabelled) tics can be added by the `set mxtics` command.

 In case of timeseries data, position values must be given as quoted dates
 or times according to the format `timefmt`.
3 xzeroaxis
?set xzeroaxis
?set noxzeroaxis
?show xzeroaxis
?xzeroaxis
?noxzeroaxis
 The `set xzeroaxis` command draws a line at x = 0.  For details, please see
 `set zeroaxis`.
3 y2data
?set y2data
?show y2data
?y2data
 The `set y2data` command sets y2 (right-hand) axis data to timeseries
 (dates/times).  Please see `set xdata`.
3 y2dtics
?set y2dtics
?set noy2dtics
?show y2dtics
?y2dtics
?noy2dtics
 The `set y2dtics` command changes tics on the y2 (right-hand) axis to days of
 the week.  Please see `set xmtics` for details.
3 y2label
?set y2label
?show y2label
?y2label
 The `set y2dtics` command sets the label for the y2 (right-hand) axis.
 Please see `set xlabel`.
3 y2mtics
?set y2mtics
?set noy2mtics
?show y2mtics
?y2mtics
?noy2mtics
 The `set y2mtics` command changes tics on the y2 (right-hand) axis to months
 of the year.  Please see `set xmtics` for details.
3 y2range
?set y2range
?show y2range
?y2range
 The `set y2range` command sets the vertical range that will be displayed on
 the y2 (right-hand) axis.  Please see `set xrange` for details.
3 y2tics
?set y2tics
?set noy2tics
?show y2tics
?y2tics
?noy2tics
 The `set y2tics` command controls major (labelled) tics on the y2 (right-hand)
 axis.  Please see `set xtics` for details.
3 y2zeroaxis
?set y2zeroaxis
?set noy2zeroaxis
?show y2zeroaxis
?y2zeroaxis
?noy2zeroaxis
 The `set y2zeroaxis` command draws a line at the origin of the y2 (right-hand)
 axis (y2 = 0).  For details, please see `set zeroaxis`.
3 ydata
?set ydata
?show ydata
?ydata
 Sets y-axis data to timeseries (dates/times).  Please see `set xdata`.
3 ydtics
?set ydtics
?set noydtics
?show ydtics
?ydtics
?noydtics
 The `set ydtics` command changes tics on the y axis to days of the week.
 Please see `set xmtics` for details.
3 ylabel
?set ylabel
?show ylabel
?ylabel
 This command sets the label for the y axis.  Please see `set xlabel`.
3 ymtics
?set ymtics
?set noymtics
?show ymtics
?ymtics
?noymtics
 The `set ymtics` command changes tics on the y axis to months of the year.
 Please see `set xmtics` for details.
3 yrange
?set yrange
?show yrange
?yrange
 The `set yrange` command sets the vertical range that will be displayed on
 the y axis.  Please see `set xrange` for details.
3 ytics
?set ytics
?set noytics
?show ytics
?ytics
?noytics
 The `set ytics` command controls major (labelled) tics on the y axis.
 Please see `set xtics` for details.
3 yzeroaxis
?set yzeroaxis
?set noyzeroaxis
?show yzeroaxis
?yzeroaxis
?noyzeroaxis
 The `set yzeroaxis` command draws a line at y = 0.  For details, please see
 `set zeroaxis`.
3 zdata
?set zdata
?show zdata
?zdata
 Set zaxis date to timeseries (dates/times).  Please see `set xdata`.
3 zdtics
?set zdtics
?set nozdtics
?show zdtics
?zdtics
?nozdtics
 The `set zdtics` command changes tics on the z axis to days of the week.
 Please see `set xmtics` for details.
3 zero
?set zero
?show zero
?zero
 The `zero` value is the default threshold for values approaching 0.0.

 Syntax:
       set zero <expression>
       show zero

 `gnuplot` will not plot a point if its imaginary part is greater in magnitude
 than the `zero` threshold.  Axis ranges cannot be less than `zero`.  The
 default `zero` value is 1e-8.
3 zeroaxis
?set zeroaxis
?set nozeroaxis
?show zeroaxis
?zeroaxis
?nozeroaxis
 The x axis may be drawn by `set xzeroaxis` and removed by `set noxzeroaxis`.
 Similar commands behave similarly for the y, x2, and y2 axes.

 Syntax:
       set zeroaxis {<linetype>}
       set xzeroaxis {<linetype>}
       set yzeroaxis {<linetype>}
       set x2zeroaxis {<linetype>}
       set y2zeroaxis {<linetype>}
       set nozeroaxis
       set noxzeroaxis
       etc.
       show zeroaxis
       show xzeroaxis
       etc.

 By default, these options are off.  The selected zero axis is drawn with a
 line of type <linetype> from the default linetype list provided by the
 terminal; user-defined linetypes (via the `set linestyle` command) are not
 accessible for these axes.  If <linetype> is not specified, any zero axes
 selected will be drawn using the axis linetype (linetype 0).

 `set zeroaxis l` is equivalent to `set xzeroaxis l; set yzeroaxis l`. `set
 nozeroaxis` is equivalent to `set noxzeroaxis; set noyzeroaxis`.
3 zlabel
?set zlabel
?show zlabel
?zlabel
 This command sets the label for the z axis.  Please see `set xlabel`.
3 zmtics
?set zmtics
?set nozmtics
?show zmtics
?zmtics
?nozmtics
 The `set zmtics` command changes tics on the z axis to months of the year.
 Please see `set xmtics` for details.
3 zrange
?set zrange
?show zrange
?zrange
 The `set zrange` command sets the range that will be displayed on the z axis.
 The zrange is used only by `splot` and is ignored by `plot`.  Please see `set
 xrange` for details.
3 ztics
?set ztics
?set noztics
?show ztics
?ztics
?noztics
 The `set ztics` command controls major (labelled) tics on the z axis.
 Please see `set xtics` for details.
2 shell
?shell
 The `shell` command spawns an interactive shell.  To return to `gnuplot`,
 type `logout` if using VMS, `exit` or the END-OF-FILE character if using
 Unix, `endcli` if using AmigaDOS, or `exit` if using MS-DOS or OS/2.

 A single shell command may be spawned by preceding it with the ! character
 ($ if using VMS) at the beginning of a command line.  Control will return
 immediately to `gnuplot` after this command is executed.  For example, in
 Unix, AmigaDOS, MS-DOS or OS/2,

       ! dir

 prints a directory listing and then returns to `gnuplot`.

 On an Atari, the `!` command first checks whether a shell is already loaded
 and uses it, if available.  This is practical if `gnuplot` is run from
 `gulam`, for example.
2 splot
?splot
?surface plot
 Three-dimensional surface and contour plotting is available in `gnuplot` with
 the `splot` command.  See the `plot` command for features common to the
 `plot` command.

 See also `set contour`, `set cntrparam`, and `set surface`.
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/surfacea/surfacea.html">Non parametric Splot Demos</a>
^ <a href="http://www.nas.nasa.gov/~woo/gnuplot/surfaceb/surfaceb.html">Parametric Splot Demos.</a>
2 test
?test
 `test` creates a display of line and point styles and other useful things
 appropriate for the terminal you are using.

 Syntax:
       test
2 update
?update
 This command updates the start parameter assignments in a start parameter
 file as specified in the `fit` section.  Each parameter will be replaced
 by its actual value.  This is useful for restarting a converged or stopped
 fit again.

 Syntax:
       update <filename>

 See `fit`
1 Graphical User Interfaces
?graphical user interfaces
?gui's
 Several graphical user interfaces have been written for `gnuplot` and one for
 win32 is included in this distribution.  In addition, there is a MacIntosh
 interface at
^<a href="ftp://ftp.ee.gatech.edu/pub/mac/gnuplot">
        ftp://ftp.ee.gatech.edu/pub/mac/gnuplot
^</a>
 and several X11 interfaces include three tcl/tk located at the usual tcl/tk
 repositories.
1 bugs
?bugs
 The bessel functions do not work for complex arguments.

 The gamma function does not work for complex arguments.

 There is a bug in the stdio library for old Sun operating systems (SunOS
 Sys4-3.2).  The "%g" format for 'printf' sometimes incorrectly prints numbers
 (e.g., 200000.0 as "2").  Thus, tic mark labels may be incorrect on a Sun4
 version of `gnuplot`.  A work-around is to rescale the data or use the `set
 format` command to change the tic mark format to "%7.0f" or some other
 appropriate format.  This appears to have been fixed in SunOS 4.0.

 Another bug: On a Sun3 under SunOS 4.0, and on Sun4's under Sys4-3.2 and
 SunOS 4.0, the 'sscanf' routine incorrectly parses "00 12" with the format
 "%f %f" and reads 0 and 0 instead of 0 and 12.  This affects data input.  If
 the data file contains x coordinates that are zero but are specified like
 '00', '000', etc, then you will read the wrong y values.  Check any data
 files or upgrade the SunOS.  It appears to have been fixed in SunOS 4.1.1.

 Suns appear to overflow when calculating exp(-x) for large x, so `gnuplot`
 gets an undefined result.  One work-around is to make a user-defined function
 like e(x) = x<-500 ? 0 : exp(x).  This affects plots of Gaussians (exp(-x*x))
 in particular, since x*x grows quite rapidly.

 Microsoft C 5.1 has a nasty bug associated with the %g format for printf.
 When any of the formats "%.2g", "%.1g", "%.0g", "%.g" are used, printf will
 incorrectly print numbers in the range 1e-4 to 1e-1.  Numbers that should be
 printed in the %e format are incorrectly printed in the %f format, with the
 wrong number of zeros after the decimal point.  To work around this problem,
 use the %e or %f formats explicitly.

 `gnuplot`, when compiled with Microsoft C, did not work correctly on two VGA
 displays that were tested.  The CGA, EGA and VGA drivers should probably be
 rewritten to use the Microsoft C graphics library.  `gnuplot` compiled with
 Borland C++ uses the Turbo C graphics drivers and does work correctly with
 VGA displays.

 VAX/VMS 4.7 C compiler release 2.4 also has a poorly implemented %g format
 for printf.  The numbers are printed numerically correct, but may not be in
 the requested format.  The K&R second edition says that for the %g format, %e
 is used if the exponent is less than -4 or greater than or equal to the
 precision.  The VAX uses %e format if the exponent is less than -1.  The VAX
 appears to take no notice of the precision when deciding whether to use %e or
 %f for numbers less than 1.  To work around this problem, use the %e or %f
 formats explicitly.  From the VAX C 2.4 release notes: e,E,f,F,g,G  Result
 will always contain a decimal  point.  For g and G, trailing zeros will not
 be removed from the result.

 VAX/VMS 5.2 C compiler release 3.0 has a slightly better implemented %g
 format than release 2.4, but not much.  Trailing decimal points are now
 removed, but trailing zeros are still not removed from %g numbers in
 exponential format.

 The two preceding problems are actually in the libraries rather than in the
 compilers.  Thus the problems will occur whether `gnuplot` is built using
 either the DEC compiler or some other one (e.g. the latest gcc).

 ULTRIX X11R3 has a bug that causes the X11 driver to display "every other"
 graph.  The bug seems to be fixed in DEC's release of X11R4 so newer releases
 of ULTRIX don't seem to have the problem.  Solutions for older sites include
 upgrading the X11 libraries (from DEC or direct from MIT) or defining
 ULTRIX_KLUDGE when compiling the x11.trm file.  Note that the kludge is not
 an ideal fix, however.

 The constant HUGE was incorrectly defined in the NeXT OS 2.0 operating
 system.  HUGE should be set to 1e38 in plot.h. This error has been corrected
 in the 2.1 version of NeXT OS.

 Some older models of HP plotters do not have a page eject command 'PG'.  The
 current HPGL driver uses this command in HPGL_reset.  This may need to be
 removed for these plotters.  The current PCL5 driver uses HPGL/2 for text as
 well as graphics.  This should be modified to use scalable PCL fonts.

 On the Atari version, it is not possible to send output directly to the
 printer (using `/dev/lp` as output file), since CRs are added to LFs in
 binary output.  As a work-around, write the output to a file and copy it to
 the printer afterwards using a shell command.

 There may be an up-to-date list of bugs since the release on the WWW page:
       http://www.cs.dartmouth.edu/gnuplot

 Please report any bugs to bug-gnuplot@dartmouth.edu.
