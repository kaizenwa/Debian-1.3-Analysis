This file documents the installation of Octave.

   Octave is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation.

Installing Octave
*****************

   Here is the procedure for installing Octave from scratch on a Unix
system.  For instructions on how to install the binary distributions of
Octave, see *Note Binary Distributions::.

   * Run the shell script `configure'.  This will determine the features
     your system has (or doesn't have) and create a file named
     `Makefile' from each of the files named `Makefile.in'.

     Here is a summary of the configure options that are most
     frequently used when building Octave:

    `--prefix=PREFIX'
          Install Octave in subdirectories below PREFIX.  The default
          value of PREFIX is `/usr/local'.

    `--srcdir=DIR'
          Look for Octave sources in the directory DIR.

    `--with-f2c'
          Use `f2c' even if a Fortran compiler is available.

    `--with-g77'
          Use `g77' to compile Fortran code.

    `--enable-dl'
          Use `dlopen' and friends to make Octave capable of dynamically
          linking externally compiled functions.  This only works on
          systems that actually have these functions.

    `--enable-shl'
          Use `shl_load' and friends to make Octave capable of
          dynamically linking externally compiled functions.  This only
          works on systems that actually have these functions (only
          HP-UX systems).

    `--enable-lite-kernel'
          Compile smaller kernel.  This currently requires the dynamic
          linking functions `dlopen' or `shl_load' and friends so that
          Octave can load functions at run time that are not loaded at
          compile time.

    `--help'
          Print a summary of the options recognized by the configure
          script.

     See the file `INSTALL' for more information about the command line
     options used by configure.  That file also contains instructions
     for compiling in a directory other than where the source is
     located.

   * Run make.

     You will need a recent version of GNU Make.  Modifying Octave's
     makefiles to work with other make programs is probably not worth
     your time.  We recommend you get and compile GNU Make instead.

     For plotting, you will need to have gnuplot installed on your
     system.  Gnuplot is a command-driven interactive function plotting
     program.  Gnuplot is copyrighted, but freely distributable.  The
     `gnu' in gnuplot is a coincidence--it is not related to the GNU
     project or the FSF in any but the most peripheral sense.

     For version 2.0.4, you must have the GNU C++ compiler (`gcc')
     version 2.7.2 or later to compile Octave.  You will also need
     version 2.7.1 or 2.7.2 of the GNU C++ class library (`libg++').
     If you plan to modify the parser you will also need GNU `bison'
     and `flex'.  If you modify the documentation, you will need GNU
     Texinfo, along with the patch for the `makeinfo' program that is
     distributed with Octave.

     GNU Make, `gcc', and `libg++', `gnuplot', `bison', `flex', and
     Texinfo are all available from many anonymous ftp archives.  The
     primary site is `prep.ai.mit.edu', but it is often very busy.  A
     list of sites that mirror the software on `prep' is available by
     anonymous ftp from `ftp://prep.ai.mit.edu/pub/gnu/GNUinfo/FTP', or
     by fingering <fsf@prep.ai.mit.edu>.

     If you don't have a Fortran compiler, or if your Fortran compiler
     doesn't work like the traditional Unix f77, you will need to have
     the Fortran to C translator `f2c'.  You can get `f2c' from any
     number of anonymous ftp archives.  The most recent version of `f2c'
     is always available from `netlib.att.com'.

     On an otherwise idle Pentium 133 running Linux, it will take
     somewhere between 1-1/2 to 3 hours to compile everything,
     depending on whether you are building shared libraries.  You will
     need about 100 megabytes of disk storage to work with
     (considerably less if you don't compile with debugging symbols).
     To do that, use the command

          make CFLAGS=-O CXXFLAGS=-O LDFLAGS=

     instead of just `make'.

   * If you encounter errors while compiling Octave, first check the
     list of known problems below to see if there is a workaround or
     solution for your problem.  If not, see the file BUGS for
     information about how to report bugs.

   * Once you have successfully compiled Octave, run `make install'.

     This will install a copy of octave, its libraries, and its
     documentation in the destination directory.  As distributed,
     Octave is installed in the following directories.  In the table
     below, PREFIX defaults to `/usr/local', VERSION stands for the
     current version number of the interpreter, and HOST_TYPE is the
     type of computer on which Octave is installed (for example,
     `i586-unknown-gnu').

    `PREFIX/bin'
          Octave and other binaries that people will want to run
          directly.

    `PREFIX/lib'
          Libraries like libcruft.a and liboctave.a.

    `PREFIX/share'
          Architecture-independent data files.

    `PREFIX/include/octave'
          Include files distributed with Octave.

    `PREFIX/man/man1'
          Unix-style man pages describing Octave.

    `PREFIX/info'
          Info files describing Octave.

    `PREFIX/share/octave/VERSION/m'
          Function files distributed with Octave.  This includes the
          Octave version, so that multiple versions of Octave may be
          installed at the same time.

    `PREFIX/lib/octave/VERSION/exec/HOST_TYPE'
          Executables to be run by Octave rather than the user.

    `PREFIX/lib/octave/VERSION/oct/HOST_TYPE'
          Object files that will be dynamically loaded.

    `PREFIX/share/octave/VERSION/imagelib'
          Image files that are distributed with Octave.

Installation Problems
=====================

   This section contains a list of problems (and some apparent problems
that don't really mean anything is wrong) that may show up during
installation of Octave.

   * On some SCO systems, `info' fails to compile if `HAVE_TERMIOS_H'
     is defined int `config.h'.  Simply removing the definition from
     `info/config.h' should allow it to compile.

   * If `configure' finds `dlopen', `dlsym', `dlclose', and `dlerror',
     but not the header file `dlfcn.h', you need to find the source for
     the header file and install it in the directory `usr/include'.
     This is reportedly a problem with Slackware 3.1.  For Linux/GNU
     systems, the source for `dlfcn.h' is in the `ldso' package.

   * If you encounter errors like

          passing `void (*)()' as argument 2 of
            `octave_set_signal_handler(int, void (*)(int))'

     or

          warning: ANSI C++ prohibits conversion from `(int)' to `(...)'

     while compiling `sighandlers.cc', you may need to edit some files
     in the `gcc' include subdirectory to add proper prototypes for
     functions there.  For example, Ultrix 4.2 needs proper
     declarations for the `signal' function and the `SIG_IGN' macro in
     the file `signal.h'.

     On some systems the `SIG_IGN' macro is defined to be something like
     this:

          #define  SIG_IGN  (void (*)())1

     when it should really be something like:

          #define  SIG_IGN  (void (*)(int))1

     to match the prototype declaration for the `signal' function.  This
     change should also be made for the `SIG_DFL' and `SIG_ERR'
     symbols. It may be necessary to change the definitions in
     `sys/signal.h' as well.

     The `gcc' `fixincludes' and `fixproto' scripts should probably fix
     these problems when `gcc' installs its modified set of header
     files, but I don't think that's been done yet.

     *You should not change the files in `/usr/include'*.  You can find
     the `gcc' include directory tree by running the command

          gcc -print-libgcc-file-name

     The directory of `gcc' include files normally begins in the same
     directory that contains the file `libgcc.a'.

   * There is a bug with the `makeinfo' program that is distributed with
     Texinfo (through version 3.9) that causes the indices in Octave's
     on-line manual to be generated incorrectly.  If you need to
     recreate the on-line documentation, you should get the `makeinfo'
     program that is distributed with texinfo-3.9 and apply the patch
     for `makeinfo' that is distributed with Octave.  See the file
     `MAKEINFO.PATCH' for more details.

   * Some of the Fortran subroutines may fail to compile with older
     versions of the Sun Fortran compiler.  If you get errors like

          zgemm.f:
          	zgemm:
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 245: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 304: warning: unexpected parent of complex
            expression subtree
          warning: unexpected parent of complex expression subtree
          zgemm.f, line 327: warning: unexpected parent of complex
            expression subtree
          pcc_binval: missing IR_CONV in complex op
          make[2]: *** [zgemm.o] Error 1

     when compiling the Fortran subroutines in the `libcruft'
     subdirectory, you should either upgrade your compiler or try
     compiling with optimization turned off.

   * On NeXT systems, if you get errors like this:

          /usr/tmp/cc007458.s:unknown:Undefined local symbol LBB7656
          /usr/tmp/cc007458.s:unknown:Undefined local symbol LBE7656

     when compiling `Array.cc' and `Matrix.cc', try recompiling these
     files without `-g'.

   * Some people have reported that calls to shell_cmd and the pager do
     not work on SunOS systems.  This is apparently due to having
     `G_HAVE_SYS_WAIT' defined to be 0 instead of 1 when compiling
     `libg++'.

   * On NeXT systems, linking to `libsys_s.a' may fail to resolve the
     following functions

          _tcgetattr
          _tcsetattr
          _tcflow

     which are part of `libposix.a'.  Unfortunately, linking Octave with
     `-posix' results in the following undefined symbols.

          .destructors_used
          .constructors_used
          _objc_msgSend
          _NXGetDefaultValue
          _NXRegisterDefaults
          .objc_class_name_NXStringTable
          .objc_class_name_NXBundle

     One kluge around this problem is to extract `termios.o' from
     `libposix.a', put it in Octave's `src' directory, and add it to
     the list of files to link together in the makefile.  Suggestions
     for better ways to solve this problem are welcome!

   * If Octave crashes immediately with a floating point exception, it
     is likely that it is failing to initialize the IEEE floating point
     values for infinity and NaN.

     If your system actually does support IEEE arithmetic, you should
     be able to fix this problem by modifying the function
     `octave_ieee_init' in the file `lo-ieee.cc' to correctly
     initialize Octave's internal infinity and NaN variables.

     If your system does not support IEEE arithmetic but Octave's
     configure script incorrectly determined that it does, you can work
     around the problem by editing the file `config.h' to not define
     `HAVE_ISINF', `HAVE_FINITE', and `HAVE_ISNAN'.

     In any case, please report this as a bug since it might be
     possible to modify Octave's configuration script to automatically
     determine the proper thing to do.

   * If you don't have NPSOL but you still want to be able to solve
     NLPs, or if you don't have QPSOL but you still want to solve QPs,
     you'll need to find replacements or order them from Stanford.  If
     you know of a freely redistributable replacement, please let us
     know--we might be interested in distributing it with Octave.

     You can get more information about NPSOL and QPSOL from

          Stanford Business Sofrtware, Inc.
          2680 Bayshore Parkway, Suite 304
          Mountain View, CA 94043
          Tel: (415) 962-8719
          Fax: (415) 962-1869

     Octave may soon support FSQP, an NLP solver from Andre Tits
     <andre@src.umd.edu> of the University of Maryland.  FSQP is
     available free of charge to academic sites, but can not be
     redistributed to third parties.

Binary Distributions
====================

   Although Octave is not very difficult to build from its sources, it
is a relatively large program that does require a significant amount of
time and disk space to compile and install.  Because of this, many
people want to be able to obtain binary distributions so they can start
using Octave immediately, without having to bother with the details of
compiling it first.  This is understandable, so I try to maintain a
current collection of binary distributions at
`ftp://ftp.che.wisc.edu/pub/octave/BINARIES'.

   Please understand, however, that there is only a limited amount of
time available to devote to making binaries, so binaries may not be
immediately available for some platforms.  (Please contact
<bug-octave@bevo.che.wisc.edu> if you are interested in helping make a
binary distribution available for your system.)

   Also, binary distributions are limited to static binaries that do not
support dynamic linking.  For earlier versions of Octave, I tried
distributing dynamically linked binaries but that proved to be too much
trouble to support.  If you want to have a copy of Octave that includes
all the features described in this manual, you will have to build it
from the sources yourself, or find someone else who is willing to do it
for you.

Installing Octave from a Binary Distribution
--------------------------------------------

   To install Octave from a binary distribution, execute the command

     sh ./install-octave

in the top level directory of the distribution.

   Binary distributions are normally compiled assuming that Octave will
be installed in the following subdirectories of `/usr/local'.

`bin'
     Octave and other binaries that people will want to run directly.

`lib'
     Shared libraries that Octave needs in order to run.  These files
     are not included if you are installing a statically linked version
     of Octave.

`man/man1'
     Unix-style man pages describing Octave.

`info'
     Info files describing Octave.

`share/octave/VERSION/m'
     Function files distributed with Octave.  This includes the Octave
     version, so that multiple versions of Octave may be installed at
     the same time.

`libexec/octave/VERSION/exec/HOST_TYPE'
     Executables to be run by Octave rather than the user.

`libexec/octave/VERSION/oct/HOST_TYPE'
     Object files that will be dynamically loaded.

`share/octave/VERSION/imagelib'
     Image files that are distributed with Octave.

where VERSION stands for the current version number of the interpreter,
and HOST_TYPE is the type of computer on which Octave is installed (for
example, `i586-pc-linux-gnu').

   If these directories don't exist, the script `install-octave' will
create them for you.  The installation script also creates the following
subdirectories of `/usr/local' that are intended for locally installed
functions:

`share/octave/site/m'
     Locally installed M-files.

`libexec/octave/site/exec/HOST_TYPE'
     Locally installed binaries intended to be run by Octave rather
     than by the user.

`libexec/octave/site/octave/HOST_TYPE'
     Local object files that will be dynamically linked.

   If it is not possible for you to install Octave in `/usr/local', or
if you would prefer to install it in a different directory, you can
specify the name of the top level directory as an argument to the
`install-octave' script.  For example:

     sh ./install-octave /some/other/directory

will install Octave in subdirectories of the directory
`/some/other/directory'.

Creating a Binary Distribution
------------------------------

   Here is how to build a binary distribution for others to use.  If you
want to make a binary distribution for your system available along with
the Octave sources and binaries on `ftp.che.wisc.edu', please follow
this procedure.  For directions explaining how to make the binary
available on the ftp site, please contact
<bug-octave@bevo.che.wisc.edu>.

   * Unpack the source distribution:

          gunzip -c octave-2.0.4.tar.gz | tar xf -

   * Change your current directory to the top-level directory of the
     source distribution:

          cd octave-2.0.4

   * Make the binary distribution:

          make binary-dist

     This will create a compressed tar file ready for distribution.  It
     will contain statically linked binaries and have a name like
     `octave-2.0.4-i586-pc-linux-gnu.tar.gz'

