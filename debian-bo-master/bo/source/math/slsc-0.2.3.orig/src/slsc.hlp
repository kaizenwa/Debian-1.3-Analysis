This document provides a brief overview of the `slsc' spreadsheet program
which is derived from the public domain spreadsheet `sc'.

1 Introduction

 SLSC is derived from the public domain spreadsheet `sc'.  With the
 exception of the internal parts of the spreadsheet, much of it has been
 completely rewritten.  In particular, the user interface is completely
 different and the spreadsheet is now customizable to suit different tastes.
 (See `Customizing').
 
 The user interface has been designed to work much like a text editor.  That
 is, most commands either work on single cells or regions.  Like a common
 text editor, a region is defined by a cell containing a mark and the cell
 containing the current point.  See `Regions' for more information.

 Unlike a text editor which may be thought to operate upon a one dimensional
 stream of characters, a spreadsheet is a two dimensional array of cells.
 This extra dimensionality gets in the way when one tries to interact with
 the spreadsheet as a text editor. To preserve the analogy with a text
 editor as much as possible, the SLSC spreadsheet may be thought of in any
 one of three ways: a stream of rows, a stream of columns, or a set of
 blocks.  For this reason, SLSC operates in 1 of 3 modes: ``Row'',
 ``Column'', or ``Block''. The current mode is indicated in the top right
 corner of the screen. Commands that operate on regions are affected by the
 current mode.  These include range deletion, hiding, moving, copying,
 etc...  See `Modes' for more information.

 Although all of the power of SLSC is available from the keyboard, a simple
 menu interface modeled after a popular spreadsheet has been implemented.
 This interface is available by pressing the `/' key.

1 Colors

  To use colors with SLSC, start SLSC with the -C command line parameter,
  e.g., 
  
       slsc -C my_spreadsheet.sc
       
  See `Customizing' for information about setting up colors.

1 Menus

  To access the menus, press the `/' key.  At the top of the screen, you
  will see a list of menu items.  Some of the items (e.g., File) lead to
  other menus.
  
  There are two ways to select a menu item: 
  
      1.  Use the arrow keys to move from one item to another.  Then press
          the RETURN key to select the current item.
          
      2.  Press the first letter of the menu item.
      
  The SPACEBAR may be used to return to the previous menu level.
  

1 Modes

  There are three modes: Row, Column, and Block.  The current mode is
  indicated on the status line at the top of the spreadsheet.  The mode
  affects the way a region is defined and how range functions operate on the
  region.
  
  In `Row' mode, regions are a series of rows.  In `Column' mode, they are
  simply a series of columns.   Block mode is more complex and unlike the
  other modes, it is two dimensional.
  
  After an item is entered into a cell, either the row or column will be
  incremented depending upon the mode.  
  
  The mode may be set by using the `toggle' menu.
  
1 Regions

  A region is defined by a `Mark' and the current cell as well as the
  current mode (See `Modes').  The region can be copied to a paste buffer
  for for subsequent use or deleted to the paste buffer.  
  
  Setting the Mark and moving from one cell to another via the cursor keys
  defines a region.  The region definition may be aborted by pressing the
  Abort character Ctrl-G.
  
2 Copying
 
  Copy region to the paste buffer.  This operation does not modify the
  region.  Contents in the paste buffer will be overwritten by this operation.
   
2 Pasting

  Insert the contents of the paste buffer into the buffer.  In ROW and COLUMN
  modes, the spreadsheet will expand to allow for the addition of the new
  cells.  However, in BLOCK mode, the deleted block will overwrite.  If this
  is not the desired effect, simply insert enough rows and columns to allow
  for the block.
  
2 Deleting

  Deleting a region removes it from the spreadsheet and places a copy of the
  region in the paste buffer destroying previous data already in the paste
  buffer.  
  
  In ROW and COLUMN modes, the region is deleted and the spreadsheet will
  reorganize itself to fill in the gap.  However, in BLOCK mode, the region
  will simply be cleared.
  
2 Hiding

  This keeps a region of rows or columns from being displayed but keeps it
  in the spreadsheet.  The status of the rows and columns is saved with the
  spreadsheet so hidden rows and columns will be still be hidden when the
  spreadsheet is loaded.  Hidden rows or columns are not printed when when
  saved in the `printable' format.
  
2 Showing

  Enter a range of rows (columns) to be revealed.  The default is the first
  range of rows (columns) currently hidden.


1 Files

  SLSC can save a file in 2 different formats: native and printable.  

  The printable format is simply a text representation of exactly what is
  visible on the screen.  If one desires to get a printout of the
  spreadsheet, this format should be used.

  The native format should be selected whenever one desires to save the
  entire spreadsheet for later use.  It is the default.

1 Printing 

 You can print your spreadsheet in at least two ways:
  
       1.  Use slsc's `print' command.
       2.  Save the spreadsheet in the `printable' format and print the 
            resulting text file.
        
 If you use the first method, you will need to set up the printer.
 Hopefully, your system manager has already done this.  If not, you will
 have to add a line like:
 
       set printer "|lpr"

 to the system `slsc.rc' file or to your personal $HOME/.slscrc file.
 
1 Editing

  The TAB key may be used to begin editing the definition of the current cell.
  
  Cell values are defined and edited in the top line of the display.  The left
  and right arrow keys may be used to edit the expression.  The up and down
  arrow keys allow one to quickly recall and edit previously entered data.  A
  Ctrl-G may be used to abort a definition and leave the cell unchanged.

  Pressing the DELETE key will cause the cell to be deleted after
  confirmation.

1 Customizing

  If the file .slscrc is present in the users $HOME directory, it will be
  loaded by SLSC when it starts up.  This file may be used to customize
  SLSC.  Typically, it contains lines that specify keybindings, colors,
  etc...  See also `Printing' for information on printer setup.
  
  The `%' character is used as a comment character.  

2 Keys

  Binding a key is accomplished through the `setkey' function.  The syntax
  is: 
        setkey   `function'   "keyname"

  For example, to bind `Ctrl-X 2' to the function `sc_dup', use:
  
        setkey sc_dup "^X2"
        
  Unsetting a key is possible using the `unsetkey' function.  It takes a 
  single argument:
  
        unsetkey "keyname"
                
3 Functions

  The following functions may be used in key definitions:
  
    suspend
    insert_char
    insert_number
    left_string
    right_string
    center_string
    up
    right
    left
    down
    exit
    define_cell
    find_file
    paste
    write_file
    copy_region
    delete_region
    
  
3 Keyname

  A keyname must be enclosed in double quotes.  The `^' character may be
  used to represent `Ctrl'.  Also, `\e' may be used to represent the ESC
  character.  That is, "^X\e" means Ctrl-X ESC.
  

  See `Examples' for more information.
        
2 Colors
  
  SLSC allows the user to control the color of various objects.  The syntax
  is: 
  
       set color `object'  `foreground-color'  `background-color'
       
  Here object can be any one of:
  
     label           column and row numbers
     number          numerical value of the cell (constant cell)
     string          textual value of a cell
     region          selected range of rows or columns
     expression      cell that contains a visible formula
     formula         cell that contains a formula (calculated cell)
     mode            mode indicator (top left of screen)
     cell            current cell
     menu            Currently selected menu item
     normal          everything else

  The foreground and background colors can be any one of:

     black       red        green        brown       blue     magenta 
     lightgray   gray       brightred    brightgreen yellow   brightblue 
     brightmagenta          brightcyan   white       cyan

  See also `Mono' for setting ``colors'' on a monochrome terminal.

1 Functions

  Functions are categorized according to two types depending upon whether
  the function operates on a single cell (simple) or a range of cells
  (range).

2 simple

   All of these functions operate on floating point numbers (doubles) and
   return numeric values.  Most of them are standard system functions more
   fully described in math(3). The trig functions operate with angles in
   radians.

    @sqrt(e)          Return the square root of e.
    @exp(e)           Return the exponential function of e.
    @ln(e)            Return the natural logarithm of e.
    @log(e)           Return the base 10 logarithm of e.
    @floor(e)         Return the largest integer  not  greater than e.
    @ceil(e)          Return  the  smallest  integer  not less than e.
    
    @rnd(e)           Round e to the nearest integer. default: round-to-even
                      (banker's round), *.5 will round to the closest even
                      number; 'set rndinfinity' will round *.5 up to the
                      next integer.
    @round(e,n)       Round e to n decimal places.  n may be positive to
                      round off the right side of the decimal, and
                      negative to round off the left side.  See @rnd(e)
                      above for rounding types.
    @abs(e)
    @fabs(e)          Return the absolute value of e.
    @pow(e1,e2)       Return e1 raised to the power of e2.
    @hypot(e1,e2)     Return sqrt(e1*e1+e2*e2), taking precautions against 
                      unwarranted overflows.
    pi  @pi           A constant quite close to pi.
    @dtr(e)           Convert e in degrees to radians.
    @rtd(e)           Convert e in radians to degrees.
    @sin(e)
    @cos(e)
    @tan(e)           Return trigonometric functions of radian
                      arguments.  The magnitude of  the  argu-
                      ments are not checked to assure meaning-
                      ful results.
    
    @asin(e)          Return the arc sine of e  in  the  range
                      -pi/2 to pi/2.

    @acos(e)          Return  the arc cosine of e in the range 0 to pi.
    @atan(e)          Return the arc tangent of e in the range
                      -pi/2 to pi/2.
    @atan2(e1,e2)     Returns  the arc tangent of e1/e2 in the
                      range -pi to pi.
    @max(e1,e2,...)   Return the maximum of the values of  the
                      expressions.   Two  or  more expressions
                      may be specified.  See  also  the  range
                      version of @max above.

    @min(e1,e2,...)   Return  the minimum of the values of the
                      expressions.  Two  or  more  expressions
                      may  be  specified.   See also the range
                      version of @min above.

     @ston(se)        Convert string expression se to a numeric value.
     @eqs(se1,se2)    Return  1  if  string expression se1 has
                      the same value as string expression se2, 0 otherwise.

     @nval(se,e)      Return  the  numeric  value  of  a  cell
                      selected by name.  String expression se must evaluate
                      to a column name (``A''-``AE'') and e must evaluate
                      to a row number (0-199).  If se or e is out of
                      bounds, or the cell has no numeric value, the result
                      is 0.  You can use this for simple table lookups.  Be
                      sure the table doesn't move unexpectedly! See also
                      @sval() below.


2 range

 These functions return numeric values.
 
3 @sum

 Syntax: @sum(r) 

 Sum all valid (nonblank) entries in the region whose two corners are
 defined by the two variable names (e.g.  c5:e14) or the range name
 specified.

3 @prod

 Syntax: @prod(r)

 Multiply together all valid (nonblank) entries in the specified region.

3 @avg

 Syntax: @avg(r)

 Average all valid (nonblank) entries in the specified region.

3 @count

 Syntax: @count(r)  

 Count all valid (nonblank) entries in the specified region.

3 @max

 Syntax: @max(r) 

 Return the maximum value in the specified region.  See also the multi
 argument version of @max below.

3 @min

 Syntax: @min(r)

 Return the minimum value in the specified region.  See also the multi
 argument version of @min below.

3 @stddev

 Syntax: @stddev(r) 

 Return the sample standard deviation of the cells in the specified region.

3 @lookup

 Syntax: @lookup(se,r)

 Evaluates the expression then searches through the range r for a matching
 value.  The range should be either a single row or a single column.  The
 expression can be either a string expression or a numeric expression.  If
 it is a numeric expression, the range is searched for the the last value
 less than or equal to e.  If the expression is a string expression, the
 string portions of the cells in the range are searched for an exact string
 match.  The value returned is the numeric value from the next row and the
 same column as the match, if the range was a single row, or the value from
 the next column and the same row as the match if the range was a single
 column.

3 @hlookup

 Syntax: @hlookup(se,r,n)  

 Evaluates the expression then searches through the first row in the range r
 for a matching value.  The expression can be either a string expression or
 a numeric expression.  If it is a numeric expres- sion, the row is searched
 for the the last value less than or equal to e.  If the expression is a
 string expression, the string portions of the cells in the row are searched
 for an exact string match.  The value returned is the numeric value from
 the same column n rows below the match.

 
3 @vlookup

 Syntax: @vlookup(se,r,n)

 Evaluates the expression then searches through the first column in the
 range r for a matching value.  The expression can be either a string
 expression or a numeric expression.  If it is a numeric expression, the
 column is searched for the the last value less than or equal to e.  If the
 expression is a string expression, the string portions of the cells in the
 column are searched for an exact string match.  The value returned is the
 numeric value from the same row n columns to the right of the match.

3 @index

 Syntax: @index(e,r)

 Use the value of the expression e to index into the range r.  The numeric
 value at that position is returned.  The value 1 selects the first item in
 the range, 2 selects the second item, etc. R should be either a single row
 or a single column.

3 @stindex

 Syntax: @stindex(e,r)

 Use the value of e to index into the range r.  The string value at that
 position is returned.  The value 1 selects the first item in the range, 2
 selects the second item, etc.  The range should be either a single row or a
 single column.


1 Formulas

   Formulas can be one of two types: numeric and string.  A formula is
   entered into a cell by pressing the equal (=) sign.
   
2 Numeric

   Numeric expressions used with the `=' commands have a fairly
   conventional syntax.  Terms may be constants, variable names,
   parenthesized expressions, and negated terms.  Ranges may be operated
   upon with range functions such as sum (@sum()) and average (@avg()).
   Terms may be combined using binary operators.

       -e     Negation.

       e+e    Addition.

       e-e    Subtraction.

       e*e    Multiplication.

       e/e    Division.

       e1%e2  e1 mod e2.

       e^e    Exponentiation.

       e<e
       e<=e
       e=e
       e!=e
       e>=e
       e>e    Relationals: true (1) if and only if the  indicated
              relation  holds, else false (0).  Note that ``<='',
              ``!='', and ``>='' are converted to  their  ``~()''
              equivalents.

       ~e     Boolean operator NOT.

       e&e    Boolean operator AND.

       e|e    Boolean operator OR.

       @if(e,e,e)
       e?e:e  Conditional:  If  the first expression is true then
              the value of the second is returned, otherwise  the
              value of the third.
       Operator precedence from highest to lowest is:
              -, ~
              ^
              *, /
              +, -
              <, <=, =, !=, >=, >
              &
              |
              ?:


1 Variables

  Normally, a variable name is just the name of a cell, such as K20.  The
  value is the numeric or string value of the cell, according to context.

  When a cell's expression (formula) is copied to another location, variable
  references are by default offset by the amount the formula moved.  This
  allows the new formula to work on new data.  If cell references are not to
  change, you can use one of the following variations on the cell name:

       K20    References cell K20; the reference changes when the
              formula is copied.

       $K$20  Always  refers  to  cell  K20;  the reference stays
              fixed when the formula is copied.

       $K20   Keeps the column fixed at column K; the row is free
              to vary.

       K$20   Similarly, this fixes the row and allows the column
              to vary.


1 Copyright
