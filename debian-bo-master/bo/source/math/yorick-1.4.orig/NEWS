5/Mar/97
   yorick-1.4
     changed a few .i files for Langer -- this is the baseline version
     for the 1.3-level Mac and Windows ports to avoid confusion with
     all the patched 1.3 versions

   My plan is to resist any patches or bug fixes to 1.4, and begin work
   on the next round of major changes to be called 2.0.  The 2.0 version
   will certainly include the following features:

   (1) Fully event driven.  Complete input lines will be events on par
       with mouse events.  This will drastically simplify interfacing
       Yorick to Windows/Mac or Java environments.  Allow interpreted
       callbacks to service events.
   (2) Filename and directory support for non-UNIX environments.  Handle
       slashes, backslashes, colons, and other idiocy better.
   (3) Rework the aging Gist package completely to reflect the lessons
       learned from the original.  Biggest problems are event handling
       (mouse and keyboard) and many infelicities and unnecessary
       complexities in the coding.
   (4) Rework the binary file interface to cope with the new HDF and
       netCDF formats currently under construction.
   (5) If possible, repair the x()=a bug when x is scalar, and work on
       improving array indexing performance.  Make it easy to extract
       diagonal array elements in multidimensional arrays.

   If I can get help, I would also like to merge the Windows and Mac
   ports into the mainstream distribution.  Is the Java JNI a way to
   do that?  Or wxWindows?  Or something else?

27/Feb/97
     fix Yorick/std0.c for [] args to atan, abs, min, max
26/Feb/97
     fixed bugs in make.i
20/Feb/97
     fixed overreach bug in Gist/gcntr.c:data_init (plfc function)

6/Feb/97
   yorick-1.3-patch-6
     fixed line buffer overrun in Gist/ps.c
     bumps version to 1.3e (sigh)
   ftp-icf.llnl.gov:/pub/munro/yorick-1.3e.tgz is the release
     1.3 with patch-[123456] applied (version 1.3e)

4/Feb/97
     fixed Browser/cgmin.c bug to allow more than 512 pages/file

3/Feb/97
   yorick-1.3-patch-5
     fix Gist/draw.c and Gist/draw0.c mesh-with-ireg scanning
     bumps version to 1.3d (sigh)
   ftp-icf.llnl.gov:/pub/munro/yorick-1.3d.tgz is the release
     1.3 with patch-[12345] applied (version 1.3d)

21/Jan/97
     fix Gist/xbasic.c bug involving zero length strings in plt

15/Jan/97
   yorick-1.3-patch-4.gz
     fixes %% bug in format= for write
     bumps version to 1.3c (sigh)
   ftp-icf.llnl.gov:/pub/munro/yorick-1.3c.tgz is the release
     1.3 with patch-[1234] applied (version 1.3c)

14/Jan/97
   yorick-1.3-patch-3.gz
     fixes Gist/ps*.ps to work around PostScript search function bug
     fixes Drat/track.c to track through bowtied zones properly
     bumps version to 1.3b (sigh)

10/Jan/97
   yorick-1.3-patch-2.gz
     fixes Yorick/graph.c plc, plv automatic scaling for meshes
     with logical holes
     fixes plmk to work on log scales
     cosmetic changes to Makefiles to help with Debian Linux
     bumps version to 1.3a (sigh)

26/Dec/96
   yorick-1.3-patch-1
     fixes MathC/dgblas.c so that LUrcond works (see bullet 5 below)
     don't know if any other LU, QR, or SVD routines affected

------------------------------------------------------------------------

Here are some of the bug fixes and new features of Yorick 1.3.  There
are some pretty major changes here.

(0) Major bugs in X window error handling and color allocation fixed.
    Yorick should now run on DEC alpha consoles (1.2 usually died --
    it could run on the alpha as long as DISPLAY was elsewhere).

(1) Yorick/Gist now handles 90 degree rotated text!  Thanks to Phil
    Rasch of NCAR for pushing me to provide this.  The old path=
    keyword is defunct.  Phil also supplied the plclab.i file, which
    puts numeric labels on contour curves.  (Anyone who used the
    old path= keyword to plt and wants to keep using that style should
    read the new txpath.i file for help.)
    Furthermore, escape sequences for superscripts, subscripts, and
    special symbols are now recognized; see help on the plt function
    for more.  Thanks to Roland Walter.

(2) Yorick can now query and change the minutest graphics style
    parameters without recourse to style sheets.  See style.i file.

(3) Many bugs fixed in text I/O and parser (latter are workarounds
    for libc bugs on various platforms).
    One new feature: Yorick read now handles 1.234D56 Fortran-style
                     numbers.  A script f77dfix to repair this sort
                     of output is provided as an alternative.

(4) Bugs in binary I/O fixed.  The netcdf.i package works much better
    in particular.

(5) I reworked the C-BLAS subroutines, giving about a 20% performance
    improvement for matrix operations on most platforms.  Several of
    the intrinsic Yorick functions have been similarly reworked (in
    particular, simple copy operations like y=x are faster now.)

(6) The LUsolve routine now handles complex matrices directly.

(7) pnm.i reads and writes PBMPlus-format portable bitmap files.

(8) The Yorick manual has a new chapter on graphics.

(9) The new contour function and modifications to the plfp function
    allowed new user-level graphics functions plfc and plmk, which
    color the regions between contours and draw polymarkers with
    user-definable shapes respectively.

(10) The mesh_loc function is dramatically faster.  A new digit2.i
    library file provides 2D versions of the digitize and interp
    functions (the latter is the oft-requested bilinear interpolator).

(11) Some functions were added to the pl3d.i package to handle limits
    for arbitrary wire frame plots (plwf.i) and to draw unintelligible
    labeled tickmarks like other 3D graphics packages (at least no one
    can say Yorick can't plot 3D axes any more).

Yorick 1.3 includes the optional MPY package.  This is a multi-processing
version of Yorick (Message Passing Yorick) based on the MPI standard.
You need to have an MPI library and development system in order to
build MPY.  See the file MPY/README in the distribution.

Yorick 1.3 includes an optional rlterm terminal emulator package.  To
build this, you need to get and build the readline package from
project GNU first.  See rlterm/README for instructions.  If you are
using an underpowered terminal emulator which cannot recall previous
input lines (e.g.- xterm), rlterm may interest you.  Yorick (and other
command line based programs) are much easier to use if you can recall
and edit previous input lines.

Adding custom compiled routines is different under Yorick 1.3.  You will
need to simplify any pre-1.3 Makefiles: all you need to do is replace
the exec_prefix and Y_HOME definitions at the top of the file with
the new MAKE_TEMPLATE definition, and slice off the bottom half of the
file (where the big cut mark is), replacing it by include $(MAKE_TEMPLATE)
-- see MathC/Makefile or Drat/Makefile for examples.  You may also want to
add the new special MAKE-INSTRUCTIONS comments at the top of your startup
.i files.  Again, see Drat/drat.i or MathC/fft.i.  If you do that, then
the new make.i library can be used to automatically generate Yorick
Makefiles.

The directory layout Yorick wants to install to has changed again.
Reread the top level README for details.

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Yorick 1.2 adds the functions catch, set_idler, and _lst and an
associated set of linked list handling functions.  Also, the sizeof
operator now returns the length in bytes of a binary file, which is
helpful for use with the _read function.  The plotting function plfp,
which plots a list of filled polygons, is also new.

A minor change to the gridxy function allows full control over the
ticks and labels without resorting to graphics style sheet files.
This allows for "custom" tick marks and labels which cannot be
generated by the automatic machinery.

The combination of plfp and set_idler makes possible a basic 3D
graphics interface, which is demonstrated by the new demo5.i include
file.  Start Yorick, include demo5.i and type demo5 to run the
demonstration.  If you like it, read demo5.i to lead you to the other
relevant include files; the only documentation is via help DOCUMENT
comments.  As a general rule, expect to expend considerably more
effort to make an intelligible 3D plot than, say, a 2D filled mesh
(which requires more effort than an XY-plot) -- and don't complain to
me that it's too hard!

Other new include files (use the library function to print a complete
list):
   legndr.i - Legendre polynomials, associated Legendre functions
   random.i - fancy random number generators
   fits.i   - astronomical data FITS file interface
   string.i - handy functions for dealing with string data
   color.i  - palette functions, including HSV<->RGB converters

The combination of catch and set_idler makes possible Yorick extensions
such as a simple message passing (multiprocessing) package based on the
MPI standard.  An alpha version of an MPI extension package, called MPY,
may be available at ftp-icf and wuarchive.

The Lisp-like lists correct the problem that Yorick pointers cannot
point to some objects, such as file handles, functions, and bookmarks
- which you sometimes need to keep in lists of indeterminate length.
Lists are also far more efficient than the array grow function when
the length of the list increases many times, since they are implemented
as linked lists.  The down side is that save and restore don't work
for lists.

-------------

Yorick 1.1 is not *very* different from 1.0.  The main change is that
shell-style comments (#) are no longer supported.  If you have used
them, I'm sorry -- switch your source to C++-style comments.  I also
changed the prompt so that dbug> appears only after you have really
entered debug mode.

I added three new demo programs, and a graphics test routine which can
serve as a crude introduction to all of the graphics commands:
   grtest (in testg.i)   -- crude graphics tutorial/shakedown
   demo2  (in demo2.i)   -- movie of drumhead oscillations
   demo3  (in demo3.i)   -- movie of chaotic pendulum
   demo4  (in demo4.i)   -- movie of airfoil flow field

There are also several new files in Yorick/include (use the library
function to print the updated list):
  rkutta.i   - Runge-Kutta integrator
  romberg.i  - Romberg and Simpson integrators
  ellipse.i  - complete elliptic integrals
  movie.i    - aids to making animations

Finally, there is now a Yorick mailing list.  You can subscribe by
sending "subscribe yorick" in the *body* of an e-mail message to:
     majordomo@lists.llnl.gov
To post to the mailing list, send mail to yorick@llnl.gov.  Please
do *not* post things (such as installation questions or generic "I
can't figure out how to...") to the mailing list -- instead, contact
me at:
     munro@icf.llnl.gov
Limit the mailing list to discussions of how you use Yorick,
postings of generally useful Yorick functions, and the like.

Bug fixes
---------

1. Gist/clip.c      - clipping for closed polylines
2. Yorick/std1.c    - poly function for LValue arguments
3. Gist/engine.c    - Engine size multiple of alignment
4. Makefiles        - Fixed SED scripts, .c.i rule, removed if tests
5. Gist/draw.c, Yorick/defstr.h  - consistent SIZE_T_TYPE options
6. Yorick/yinput.c  - bogus initial dbug> prompt fixed, #include syntax errs
7. MathC/fft.i      - fixed roll for complex arguments
<several others I can't recall>

New features
------------

1. Makefile.in      - added debug, optimize targets
2. configure        - updated
3. include/copyb.i  - size= option
4. MathC            - split dgelss, dgesvd
