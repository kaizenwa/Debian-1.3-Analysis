-------------------
What's new for version 3.10.0b6:
    A.	Instead of closing descriptors >2 right away, the close-on-exec
	flag is instead used for machines with this feature.  For IRIX 5
	(and others?), this is a bugfix, not just a general improvement:
	Gordon Lack wrote ``Irix NIS seems to "cache" a UDP connexion
	on a file-descriptor, and super closes this before execing''.

	Bugfix/improvement courtesy of Gordon Lack (gml4410@ggr.co.uk).

-------------------
What's new for version 3.10.0:

    ** If you are familiar with super version <=3.7.2, but haven't used
    ** a more recent version, please read the changelist back through 3.8.0!
    ** There have been MANY enhancements since 3.7.2.

    A.	EASIER INSTALLATION: configuration is now handled by a configure
	script.  This reduces the number of items you have to hand-adjust
	from 20 to none at all (if you like the defaults).

    B.	SECURITY FIX:  Until version 3.9.7, super never did anything to
	change the supplementary groups list.  This is not a security problem
	if you are adding privileges (such as switching to root), but it
	is a potential problem if you are switching to a different user and/or
	a different group.

	Solution: this version of super adds the following new semantics:
	If you use u+g=foo, then the user is set to foo and the group is
	set to foo's login group (as in earlier versions), and the
	supplementary groups are set to foo's supplementary groups list
	(new feature).  Otherwise, the supplementary groups list is deleted.

	See also the new options groups=a,b,...  and addgroups=a,b,...

	The problem was reported and a workaround supplied by
	Morten Rolland (Morten.Rolland@si.sintef.no).

    C.	BUGFIX: Super had assumed that there would only be one ":global_option"
	line.  If there were multiple :global_option instances, and logfile=xxx
	was used before the last :global_option  instance, super would
	create multiple logging processes.  Worse, interactions with password
	checking could lead to super's running a command without getting
	the user's password (when password=y).

	The bug was reported by Richard Czech (Richard.Czech@gmd.de)

    D.	PER-USER SUPER.TAB FILES:
 
	Super now allows ordinary users to supply their own super.tab files.
	This lets users give well-controlled setuid/setgid access to their
	programs: the user who offers the program gets the assurance of
	safe IFS settings, safe environment variable settings, etc; and the
	user who executes the program knows that it will execute under
	the uid of the offering user.

	o   The user-supplied super file is .supertab, in the home directory
	    of the user, and must be owned and writable only by the owner.

	o   Joe user's supplied command "foo" is invoked by typing

		super joe:foo

	    Super will act as follows:

	    i.	immediately changes its uid, gid, and supplementary groups
		to be those of the owner of the super.tab file (joe);

	    ii.	close all descriptors except for stdin, stdout, and stderr;

	    iii. follow its usual rules for processing super.tab files,
		except that any options that require setuid() or setgid()
		will fail since super is running as an ordinary user.

    E.	EASIER LISTS: in the past, super permitted csh-style
	brace-expansion for valid-user patterns.  It has also allowed
	comma-separated lists for some options (e.g. fd=n1,n2,...).
	These forms have been synthesized into a single format: anywhere
	a list makes sense, either comma-separated or brace-expansion
	is permitted.  (The implementation is easy: the list is wrapped
	in braces, and then brace-expansion is done.)

    F.	NEW OPTION
		    groups=a,b,...          supplementary group list is a,b,c
		    groups=                 supplementary group list is empty

	causes super to set the supplementary groups to the named list,
	before exec'ing the command.

    G.	NEW OPTION
		    addgroups=a,b,...

	causes super to add the named groups to the supplementary set
	before exec'ing the command.  (Note: the supplementary set is
	intialized to be empty unless the option u+g=foo is used, so
	addgroups=a,b,... usually has the same affect as groups=a,b,...
	Alternatively,  groups=<caller> addgroups=a,b,...  will set the
	groups' to the caller's login groups, then add a,b,... to the list.)

    H.	NEW OPTION
		    cd=SomePath
	causes super to change directory to SomePath before executing
	the command.  This can be global or local; the local overrides
	the global setting.

    I.	NEW OPTION
		    rlog_host=hostname
	tells super which host's syslog daemon is to receive log messages
	when option syslog=y is enabled.  Default=localhost.

    J.  NEW OPTION
		    gethostbyname=y|n
	tells super to enable/disable hostname lookup using gethostbyname().
	Default: enabled (if you have gethostbyname()).

    K.	CHANGE TO NETGROUP HANDLING: hostnames beginning with ``+'' are
	_always_ treated as NIS netgroup names -- that is,  @+xyz  means
	that anyone at a host in netgroup xyz can execute the command.
	If your system doesn't have innetgr(), patterns beginning with ``+''
	will not ever match any hostname.  (Previously, interpreting
	``+'' as a special character was enabled as compile-time option.)

    L.  CHANGE TO GETHOSTBYNAME() USAGE: if you have gethostbyname(), it
	gets compiled in and will be enabled by default; use global option
	gethostbyname=n to disable.  (Previously, you had to define
	USE_GETHOSTBYNAME to compile it in, and there was no switch
	to turn it off.)

    M.	CHANGE TO SYSLOG() USAGE: we always compile the rsyslog() function
	from Jean-luc Szpyrka, so you can always send syslog output to either
	a remote or local host.  The new option rlog_host=xxxxx specifies
	the host that receives the messages; the default is "localhost" --
	i.e. same behavior as plain syslog().  (Previously, neither
	syslog() nor rsyslog() use was compiled in unless USE_SYSLOG
	was defined.)

    N.	SPECIAL NAMES: Two name have been added that you can use as an
	argument to any of the options owner=xxx, uid=xxx, gid=xxx,
	u+g=xxx, groups=xxx, addgroups=xxx, umask=xxx.
	These names are
		<owner>     means owner of the file to be executed
			    (or owner's group, whichever is appropriate
			    in the context);
		<caller>   means the owner or group of the user calling super.
	The angle brackets are literally part of the name.  (Exception:
	umask=<owner> makes no sense and isn't defined.)

	Example:
		 gid=Foo  uid=<caller>
	would change the group only, but leave the uid unchanged -- this is
	something you could not formerly do in super.

    O.  Updated man pages.

    P.  Security enhancement: the default umask is no longer inherited
	from the caller; instead it is set to 022.  However, you can
	set it to the caller's umask by using the option
		umask=<caller>

    Q.  Dead code elimination: a branch of code made a call to the
	unsafe (on some systems) function getlogin().  This branch of
	code was never invoked, and has now been completely eliminated.

-------------------
What's new for version 3.9.7:
    A.  Super 3.9.6 installed the "setuid" program as setuid-root.
	This is a severe security hole.
	Version 3.9.7 removes the setuid-root entry from the Makefile.

-------------------
What's new for version 3.9.6:

    A.  Important bugfix for version 3.9.  Super had its internal structure
	overhauled for version 3.9.  Unfortunately, one important error was
	introduced: the super.tab options
	    uid=xxx
	    group=xxx
	    u_g=xxx
	were not properly reset from one entry to the next.  This version
	fixes that error.

    B.  A new -c option: causes super to check the syntax of a super.tab
	file, but not actually execute anything.  Its use:

	    super -c [superfile]

	When you modify a super.tab file, you should use super -c to
	check the file's overall syntax, and also use   super -d cmd
	for each modified command cmd, to verify that the details of
	the invoked command (args, uid, gid, umask, etc) are what
	you wanted to do.

    C.  A new -f option: this is a "just the facts, ma'm" help mode:
	it prints lines like:
	    CmdPattern FullPath [leading args]
	    CmdPattern FullPath [leading args]
	    ...
	which allows scripts to make lists of commands the user may execute.

    D.  A new super.tab option has been added:
		print="msg"
	causes the message to be printed just before exec'ing the
	command.

    E.  Better man page information.

    F.  Replaced DIE=msg with die=msg.  (Retaining DIE=msg as obsolete form.)

-------------------
What's new for version 3.9.5:

    A.  Patches to 3.9 for Digital UNIX,
	from Stephen Carney (carney@gvc.dec.com).

-------------------
What's new for version 3.9.4:

    A.  Bugfix for yet another silly error if invoked via symlink in
	version 3.9.2.  Error pointed out and fixed by Rein Tollevik
	(Rein.Tollevik@si.sintef.no).

    B.  Syslog messages were always logged at priority SYSLOG_PRIORITY.
	Error found and fixed by Rein Tollevik (Rein.Tollevik@si.sintef.no).

    C.  If the preprocessor symbol SUNOS5 is defined, then the symbol SVR4
	is also defined (if not already done) in super.h.  One ifdef'd
	section of code was changed to look at SVR4 instead of SUNOS5;
	hopefully this will be an improvement for other SVR4-based systems.

-------------------
What's new for version 3.9.3:

    A.  Wrong processing if invoked without any arguments, or if invoked
	via symlink.  Error pointed out and initial fix by Gerry Singleton
	(Gerry.Singleton@Canada.Sun.COM).

-------------------
What's new for version 3.9.2:

    A.  Makefile entries and a few #includes needed for  TI SYS V 3.3,
	from Oyvind Gjerstad (ogj@it.tollpost.no).

-------------------
What's new for version 3.9.1:

    A.  Left some commas out of an #ifdef'd initialization array.
	Bugfix from Oyvind Gjerstad (ogj@it.tollpost.no).

    B.  Fixed: variable expansion happening inside comments, reported by
	Oyvind Gjerstad (ogj@it.tollpost.no).

-------------------
What's new for version 3.9.0:

    **  If you are familiar with super version <=3.7.2, make sure you **
    ** read the changes in 3.8.0!  There have been MANY enhancements **
    ** made since 3.7.2. **

    This version consolidates all of the changes done in beta tests
    of 3.8, and added enough new items that I had to change the version
    number to 3.9 (without pausing for a non-beta version of 3.8).
    The improvements have come thick and fast, but that will now stop
    and only corrections will be done to v3.9 for some time to come.

    The visible changes are:

    A.  The super.tab control line format has been generalized.
	The old syntax and semantics remain a valid subset -- old
	super.tab files will continue to work as expected.

	Super now takes the following approach to selecting a command to
	execute.  For each control line in the super.tab file,
	super requires that:

	1.  The user's typed command must match a control-line command;
	2.  The user's name/group/host must match one of the user/group/host
		entries;
	3.  The current time and day must match a time entry (if any are
		given);

	Otherwise, super "falls through" and tries the next control line.
	The user/group/host and  time entries are _conditions_ that must
	be matched.  Conditions that don't match the user/group/host
	or the present time are simply ignored.

	_Options_ on the control line are handled very differently from
	_conditions_.  After conditions are met and a line is selected,
	all options must be satisfied, or super quits without executing
	the command and without trying further control lines in the super.tab
	file.

	This distinction between conditions and options is easy to use
	in practice: basically, super searches for a line that matches
	a command, user and time of day.  When the line is found, super
	will execute the command if the options -- such as a required
	password or restrictions on command arguments -- are satisfied;
	otherwise, it stops.

	There are three important differences between conditions and options.

	1.  If conditions aren't matched, super will "fall through" and
		look at the next line.  In contrast, when options are
		checked, super will quit if the options aren't satisfied.

	2.  Conditions can be "negated", that is, !condition~pattern
		means that if the pattern is matched, the user is
		_rejected_ from using this line.  Options can't be negated.

	3.  Many similar conditions be applied, and the last-matching
		condition is used.  For example, the list of user-conditions

			:develop   !joeblow

		says that anybody in group "develop" can use the command,
		but then rejects joeblow, even if he is in the develop group.

		If an option can appear more than once on a line, all
		instances of the option must be satisfied, not just the
		last-matching instance.

	As part of the syntax generalization, user patterns may now begin
	with "user~":
			user~:develop	!user~joeblow

	Options and conditions can be interleaved.
 
    B.  time~pat  is a new condition that has to be met before the line
	is accepted for execution.  See next item for sample uses.
	All time patterns on a line must be matched or super will continue
	to the next control line.  For example,

		time~8:00-12:00  time~13-17	!time~{sat,sun}

	restricts a command to being used during typical office hours
	on weekdays.

    C.  DIE=msg   is a new option that can be used in a command line
	to force super to exit (and print msg) if the rest of the
	command line is successfully matched.  Here are a few examples
	that also illustrate use of the new :define command.

		:define RestrictedCommands ...
		:define weekdays {mon,tues,wed,thurs,fri}
		:define BadHours time~0-08:30/$weekdays \
				time~17:30-24:00/$weekdays \
				time~{sat,sun}

		$RestrictedCommands $BadHours \
		    DIE="You can't use this command outside of office hours."

	or

		:define RestrictedCommands ...
		:define officeHours {8:30-12:30,1:30-17:30}/{mo,tu,we,th,fr}

		$RestrictedCommands !time~$officeHours DIE="hahaha"

	Without the DIE option, super will try to execute the restricted
	commands during the restricted hours.


    D.  gethostbyname() is now called both with and without a trailing dot
	in the hostname.  If both forms succeed, the longer returned name
	is kept, except that any trailing dot is deleted.
	
    E.  nice=nnn changes the ``nice'' level of the executed command
	by an amount nnn from the default level.  (Positive increments
	reduce the command's priority; negative increments increase it.)

    F.  umask=nnn (local or global option) makes commands run with the
	specified umask.  Useful if you want to help ensure that files
	are created with restricted access permissions.

    G.	:include filename   allows a super.tab file to include other files.
	The filename must either be an absolute path or is interpreted
	relative to the directory containing the super.tab file, and the
	same restrictions are put on the file ownership and permissions
	as for the top-level super.tab file.  The number of nested includes
	is limited only by the number of allowed open files.
	Use with caution!

    H.	The new local option argMMM-NNN=SSS or argNNN=SSS (where MMM and
	NNN are positive integers, and SSS is a string) means that the
	MMM-NNN'th user-entered arguments must match pattern SSS.
	The pattern SSS must be enclosed in quotes if it contains
	whitespace.  Note that this doesn't _require_ MMM-NNN arguments;
	it only says what those arguments must look like, if entered.

    I.  Updated and corrected super.5 man page.

    J.  Fixed "mail" option.  It can be used as either a global or local
	option.

-------------------
What's new for version 3.8.0:

    (The first 5 items are substantive visible changes/enhancements!
    Please read them!)

    A.	The rule for processing backslash-newline-whitespace (indicating
	continued lines) IS MODIFIED.  THE NEW RULE IS:
	    - if it follows a letter, digit, or underscore, replace the
		sequence with a single space.
	    - otherwise, it is eliminated entirely.
	Therefore, you can type

		Cmd File	user1\
				user2\
				user3
	and it is equivalent to
		Cmd File	user1 user2 user3
	
	But typing
		Cmd File	{user1,\
				user2,\
				user3}
	is equivalent to
		Cmd File	{user1,user2,user3}

    B.	Variables are now supported!  You can type

		:define okusers		{joe,jane,tom,sally}

	The above could also have been written

		:define okusers		{joe,\
					jane,\
					tom,\
					sally}

	and then use

		Cmd	FullPath	$okusers

	with the obvious result.  (The variable name may be enclosed
	in parentheses to insulate it from the characters which follow.)
	Read the man page super.5 before proceeding to use variables!

    C.  New global option syntax:

		:global		globaloptions...
	    or
		:global_options	globaloptions...

	The old syntax:

		/  /  globaloptions

	is still supported, but its use is discouraged.

    D.  Multiple commands/filenames are now allowed on one line.  Now you
	can type

	    Cmd1::FullPath1 Cmd2::FullPath2 [...] ok-user-pats

	This can be useful for treating a group of commands as a unit:

	    :define Common_cmds Cmd1::FullPath1 \
				Cmd2::FullPath2 \
				Cmd3::FullPath3

	    :define okusers		{\
					:operators,\
					joe,jane,tom,sally}

	    $Common_cmds $okusers

    E.	In general, a colon in a Cmd part of a line is now reserved
	to super, and must not be used as part of the Cmd name.
	This has been done to support the :define and :global commands,
	the Cmd::File syntax, and provide space for future development.

    F.  The super.tab file can now be owned by root or nobody.
	This change is to support networked accounts.

    G.  Substantial modifications to hostname matching to improve
	handling of netgroups.
	(From Steve Robbins -- steve@cim.mcgill.ca)

    H.  Added Makefile entry Max + header #ifdef's for SGI v5.3
	(from Max Buchheit, buchheit@ccrs.emr.ca).

    I.  Fixed comparison between char and NULL.
	Added Makefile adjustments for Solaris 2.4 (SunOS 5.4).

    J.  Fixed an error related to an appended dot on hostnames.
	(from Geoffrey A. Lowney, galowney@isdlz.ca.boeing.com)

    K.	If compiled with __STDC__ defined, prototypes are used.

    L.  Disabled "mail" global option.  Nobody was using it, and it wasn't
	implemented right anyway... maybe that's why nobody used it :-).

    M.  Disallowed relative pathnames unless global option relative_path
	is set.  This is to prevent admins from accidentally making a
	stupid error.

    N.  Disallowed slash in groupnames unless global option group_slash
	is set.  This lets us find formatting errors more easily -- namely,
	using Cmd:File instead of Cmd::File.

-------------------
What's new for version 3.7.4:
    A.	Added setenv=var=xxx	option.  This option defines environment
	variable var to have value xxx, and adds it to the environment
	variables that are kept when the command is executed.

	Can be used multiple times to add definitions for multiple variables.
	
	Note that "setenv=DISPLAY" is syntactically invalid (missing the
	`=' after the variable name), and that "setenv=DISPLAY="
	sets DISPLAY to the null string.
	
	(Recall that you can also use the option "env=var1,var2,..."
	to keep a list of user-defined environment variables.)

    B.	Improved error reporting.

-------------------
What's new for version 3.7.3:

    A.  *** NOTE WELL *** Changed processing of FullPathNames with quoted
	arguments: the quotes are now stripped (it was an error that they
	weren't).  For example, the super.tab entry

		doit    "/usr/bin/xxx  -o1 -o2 -xrm 'a b c'"   willie

	allows user willie to type

		super doit

	and to execute /usr/bin/xxx with arglist
		argv[0]: doit
		argv[1]: -o1
		argv[2]: -o2
		argv[3]: -xrm
		argv[4]: a b c

	Previous versions of super would pass argv[4] as 'a b c', including
	the single quotes.


    B.  Added #ifdef to define LOG_USER and LOG_ERR if they aren't
	defined in <syslog.h>.

    C.  When logging successful super uses, added #ifdef so that the
	message priority isn't set unless USE_SYSLOG is defined.

    D.  Added Makefile entry for Ultrix 4.3 (from Christoph Geelen,
	geelen@rzulx1.mpie-duesseldorf.mpg.de).

    E.  Added Makefile entry for UnixWare 2.0 (from Pete Holsberg,
	pjh@tecoma.mccc.edu).

    F.  Added Makefile entry and super.c patches for Digital UNIX V3.2
	(formerly DEC OSF/1); from Stephen Carney, carney@gvc.dec.com.

-------------------
What's new for version 3.7.2:

    A.  Added owner=xxx option so that super won't run a program
	unless it's owned by xxx.

-------------------
What's new for version 3.7.1:

    A.  Modified error msg for clarity.

    B.  If super.tab isn't owned by root, then:
	    + if real uid is root, bail out: don't run at all.
	    + if real uid isn't root, run as real uid (can be useful
		for testing).

-------------------
What's new for version 3.7.0:

    A.  Changed hostname comparisons to be case-insensitive.

	(From Steve Robbins -- steve@cim.mcgill.ca)

    B.  New capability: wildcard commands.

	In previous versions of super, entries in the super.tab file
	looked like:

		CmdName   FullPathName   PermittedUsers

	This is now supplanted by a new format, which is a superset
	of the previous one (note that all existing super.tab files
	remain valid):

		CmdPattern  FullPathName-with-optional-"*"  PermittedUsers

	There are two new features here:

	    1) The former CmdName string is now interpreted as a pattern
		(with csh-style brace expansion, so that it can
		actually stand for a variety of commands).

	    2) If there is an asterisk in FullPathName, it is replaced
		by the user's cmd.

	In the usual situation, in which CmdPattern is still just a plain
	name without wildcards, the user (a) types "super cmd";
	(b) the cmd is matched against CmdPattern;
	(c) the user checked to be a PermittedUser, etc;
	(d) FullPathName is then executed.  As long as CmdPattern is
	just made up of letters, digits, and underscore, and
	FullPathName has no asterisk, the effect will be exactly
	as super has always acted.
	
	If you put special pattern-matching characters into the CmdPattern,
	you simply give more ways a user can execute the same FullPathName.
	This isn't yet very exciting, and in fact isn't a good idea at
	all.  The power of using patterns in the CmdPattern string comes
	when FullPathName includes an asterisk.  In that case, the asterisk
	is replaced with the user's "cmd" string to form the actual
	command to exec.  For instance, a SysV-based host might have
	an entry in the super.tab file that looks like:

		/usr/bin/{lp,lpstat,disable,enable,cancel} * :operators

	This would allow anybody in the "operators" group to have root access
	to the line printer commands.  For instance, if the user typed:

		super /usr/bin/disable some_printer
	
	then the FullPathName == "*" would be replaced by /usr/bin/disable,
	and become the command to exec.

	More conveniently, the super.tab file could have a line like:

		{lp,lpstat,disable,enable,cancel} /usr/bin/* :operators

	In this case, the user can type

		super disable some_printer

	The asterisk is replaced by "disable" to form the command
	/usr/bin/disable.

	If you _completely_ trust some users, but want logging of all
	actions, you could use:

		/*	*	ReallyReallyTrustedUsers

	(if the global option patterns=shell has been set) or

		/.*	*	ReallyReallyTrustedUsers

	(the default case: patterns=regex).

	The user can now execute any command.  Note that the pattern
	begins with a slash, to ensure that the cmd must be an
	absolute path -- this helps avoid accidental execs of the
	wrong program.

	Of course, if you were really going to give everything away as shown
	above, you'd probably want to exclude any public-area workstations,
	require the trusted users to periodically give their passwords,
	and set the real uid=root (instead of just the effective uid),
	so the entry might be modified to read:
  
		/*  *  TrustedUsers !{PatternsOfPublicWorstations} \
		      password=y timeout=5 uid=0

	(if the global option patterns=shell has been set).

	(These changes were inspired by Aaron Schuman, schuman@sgi.com)

-------------------
What's new for version 3.6.1:

    A.  Added support for shadow passwords on HP-UX 9.x.

-------------------
What's new for version 3.6.0:

    A.  Changed super's logging to offer networked syslog messages:
	all syslog messages can be sent to a single host.

    B.  Provided bugfix with -V option (super could coredump otherwise).

	(These changes provided by Jean-luc Szpyrka, jls@sophia.inria.fr)

-------------------
What's new for version 3.5.2:

    A.  Bugfix: the full path of the executed command was inserted
	as argv[1] in the output arguments, when it didn't belong there
	at all.

    B.  Bugfix: log messages for _successful_ commands weren't
	being newline-terminated.

	(These bugs reported by Olof Backing, obg@nada.kth.se)

-------------------
What's new for version 3.5.1:

    A.  Added better copyright + licensing info.

    B.  Did some code cleanup (getting rid of unused variables, adding
	declaration of wait(), etc).

    C.  After logging a super call to the logfile, failed exec's might
	not be printed on the screen (although they were
	logged in the logfile).

-------------------
What's new for version 3.5:

    A.  Added pattern negation to super.tab:
	    !pat
	says to disallow a user who matches the pattern.
	Until now, you could only give permission to users that
	matched, not take it away.  Patterns are scanned left-to-right,
	and the allow/disallow depends on the last pattern that matches.
	This lets you do things like

	    cmd	/Full/Path	:goodguys   !jan

	to mean allow anybody in group goodguys, but then disallows
	user jan, even if jan is in goodguys.

    B.  Added user/group/host patterns to the global settings:

	    /	/	[global opts]	pat pat ... <> pat pat ...

	User/group/host patterns to the left of "<>" are processed
	_before_ the per-command patterns; user/group/host patterns
	to the right of "<>" are processed _after_ the per-command
	patterns.  If "<>" is missing, all patterns are processed after
	the user patterns.
	For example,

	    /	/		jan <> !@+badhosts

	says that user jan can execute any command (unless a per-command
	pattern explicitly disallows jan from executing a particular
	command), but under no circumstances will a user on any host in
	netgroup ``badhosts'' be allowed to execute any command.
	(Thus jan can execute any command, but only from hosts _not_
	in ``badhosts''.)

	(These changes were inspired by Jean-luc Szpyrka,
	jls@sophia.inria.fr .)

    C.  Added special handling of hostnames:  If a host is using
	DNS names, and the hostname isn't matched in the super.tab
	file, it's possible that the reason is simply that gethostname()
	returns a name with fewer or more components of the fully-qualified
	domain name (fqdn) than is in the hostname pattern in super.tab.
	For example, gethostname() might return "w.x.y.z", but the
	hostname pattern might be simply "w".  Until now, super wouldn't
	consider this a successful match.
	
	If you enable the new feature USE_GETHOSTBYNAME, then
	if the hostname doesn't match the pattern directly, super will
	determine the fqdn, and then compare ever-shorter parts against
	the pattern.  For instance, given the hostname "ab.cd.ef.gh",
	super will test "ab.cd.ef.gh", then "ab.cd.ef", then "ab.cd",
	and finally "ab".   Warning: using this option may reduce
	security a bit - your host may query a nameserver on another
	host to obtain the FQDN, and that nameserver could conceivably
	have been subverted and then return incorrect hostnames.

	(Idea from Dave Curry, davy@ecn.purdue.edu).


    D.  Fixed a bug in creating timestamp files.  Basically, unless
	the global option timestampuid=0 was set, one frequently got
	a message "Timestamp creation failed" and then couldn't
	run a command requiring a password.

	(Bug reported by Brian Huntley,
	bhuntley%tsegw.tse.com@spectre.uunet.ca)

    E.  Changed super's logging to include the arguments passed to
	the command.
	
	(Patch from Dave Curry, davy@ecn.purdue.edu).

    F.  An error in the str_val() function allowed some typos in
	option names to pass unnoticed.  Files with properly typed
	option names were not affected.

    G.  Modified some error messages that were not printing accurate
	information about why access was being denied.

    H.  Bugfix: comments in super.tab are supposed to only go up to
	newline, but instead they ran to the end of an input block.

    I.  Ported to SCO 3.2v4.

	(Changes from Keith Menard, menard@gateway.wtc.com)

    J.  Fixed error in processing backslashes in super.tab lines
	(backslash-newline was being processed correctly; others left
	super in an infinite loop).

    K.  Stripped down the strqtok function that splits input lines
	of text.


-------------------
What's new for version 3.4.9:

    A.  Added #ifdef's and Makefile entries for 
	    Clix 3.1 r.7.1.3 (Intergraph)
	contributed by David Sandmann (das@ipro15.aaa.com).

    B.  Added #ifdef'd code to implement scripts that start with
	"#! interpreter" on OS's which don't support it directly.

-------------------
What's new for version 3.4.8:

Minor bugfixes:

    A.  _Successful_ executions of commands were not being logged by
	syslog unless they were also being logged to a (non-syslog) file.

    B.  There were formatting errors and other minor mistakes in
	the super.5 man page.

    C.  Changed the example in README and the super.1 man page regarding
	how a program can super itself, so that it will work on all
	Bourne shell variations (the argument to "test" had to be
	protected against empty strings.)

-------------------
What's new for version 3.4.7:

    A.  Bugfix for patterns like
		    uuu:ggg  and   uuu:
	...valid user is denied access.  Bug report & fix came from
	Karen L Dickerson (kld@mudshark.sunquest.com).

-------------------
What's new for version 3.4.6:

    A.  Bugfix for sites that don't compile with USE_NETGROUP but
	do specify a hostname.  Bug reported by
	Adam P. Harris (apharris@mcs.com).

-------------------
What's new for version 3.4.5:

    A.  Improved parsing for arguments that super supplies to commands.
	Previously, only whitespace would separate arguments.  Version
	3.4.5 parses the FullPathName with recognition of embedded
	quotes and backslashes.

	For example, suppose the super.tab file contains a line like

	    cmd	"FullPath -a -b 2\ 3 -xrm 'r s t \
		    u v w' ..."	SuperOptions...	validusers...

	The "FullPath..." string (containing the arguments -a, -b, ...)
	...  is parsed using Bourne-shell-like rules for backslashes
	and quotes, and the line is parsed as
	    argv[0] FullPath
	    argv[1] -a
	    argv[2] -b
	    argv[3] 2 3
	    argv[4] -xrm
	    argv[5] r s t u v w

	(Use "super -d cmd" to check that your args are being parsed
	as expected before you unleash a new command on your users.)

-------------------
What's new for version 3.4.4:

    A.  The timestamp file of user@host.name.dom is now by default
	stored in
		TIMESTAMP_DIR/hostname/user
	with the old behavior (TIMESTAMP_DIR/user) being an option
	controlled with global option timestampbyhost=y|n.

	The timestampuid=xxx option has been added to allow timestamp
	files to be created under a particular uid.
	This allows for a cross-mounted timestamp directory on hosts
	that map NFS root accesses to nobody, but still keeps the
	password entries distinct on different hosts.

    B.  TIMESTAMP_DIR is now documented in the Makefile, so that it
	is easily configured at compile time.

-------------------
What's new for version 3.4.3:

    A.  Option -H has been added to give the long-winded help information
	that has been the only thing printed until now.

	The -h option now prints a short help listing:

	    Command     Comments
	    -------     --------
	    cmd1        help info for cmd1
	    cmd2        help info for cmd2
	    ...

-------------------
What's new for version 3.4.2:

    A.  If "xyz" is a symlink to super, then
	    % xyz args...
	is treated by super just like
	    % super xyz args...

	Super detects such symlinks by the rule that argv[0] must
	match "*/super" or "super"; otherwise, it's assumed to be
	a symlink.  Therefore, a symlink named "super" won't work --
	super won't recognize it's being invoked via symlink.

-------------------
What's new for version 3.4.1:

    A.  When printing debug info, there was misformatted output
	of any extra file descriptors being held open.  (The
	problem only occurred in 3.4.0, not earlier versions.)

-------------------
What's new for version 3.4:

    A.  Added nargs=[mmm-]nnn to limit user-entered args.

-------------------
What's new for version 3.3.2:

    A.  Allow "@hostname", without any user or groupname part.

-------------------
What's new for version 3.3.1:

    A.  Fixed SunOS 5.x to use "getspnam()" when looking up passwords.

-------------------
What's new for version 3.3:

    A.  Added mail="....." global option.

    B.  Fixed goofy error in parsing password=n.
    
    C.  Added syslog=y|n option.

-------------------
What's new for version 3.2:
    A.  Added options password=y|n, timeout=n, renewtime=y|n to require
	passwords on specific commands (or all commands).

    B.  A bugfix:  if the super.tab file tried to pass options to the
	executable command, the exec would fail.

-------------------
What's new for version 3.1:
    A.  Added global option loguid=xxx to allow the logfile to be opened
	under a uid other than root.  This allows the logfile to be
	shared across a network over which root doesn't have write access.

-------------------
What's new for version 3.0:

    A.  Command logging -- you can specify a file to receive a log
	of super uses and attempts.

    B.  More environment variables -- for each entry, the super.tab file
	can specify environment variables that should be passed to
	the command instead of discarded.  You simply add entries like
	    env=TZ,TAPE
	to the super.tab file, to keep TZ and TAPE in addition to
	the default list.  Of course one has to use this with
	caution.

    C.  Set uid/gid -- for each entry, the super.tab file can specify
	the uid and/or gid (the default is to only change the effective
	uid to root).  To use this, you add entries like
	    uid=xxx   gid=yyy
	to the super.tab file, or  u+g=xxx  to set the uid
	to xxx and the gid to xxx's login gid.
	
	As a supplement to the setuid/setgid ability, super defines
	some extra environment variables so that the invoked command
	can know the username and home directory of the user who
	invoked the command, as well as that of the uid under which
	the command is executing.

    D.  Open file descriptors -- for each entry, the super.tab file
	can specify a list of file descriptors that should not be
	closed (in addition to the default 0,1,2).

    E.  Initial arguments -- for each entry, the super.tab file can
	specify a set of initial arguments that are put into argv[]
	ahead of the arguments the user typed on the command line.

    F.  super -h now only prints the commands that may be executed by the
	user; and the super.tab file can specify a line of explanatory
	text to be printed with each command.

    G.  A bugfix: The TERM environment variable can now contain "-+_.:/"
	in addition to [a-zA-Z0-9].

    H.  The super.tab file can be configured with either Bourne-shell style
	or regex (ed-style) valid-user patterns; the default is regex.

-------------------
What's new for version 2.0:
    A.  A couple of bugfixes.  (These fixes were first introduced
	in version 1.2.)

    B.  You can restrict commands to particular users on particular
	hosts.  This allows one "super.tab" file to serve many hosts.

    C.  Entries in "super.tab" can now span multiple lines.  Helpful
	when one file serves many users + hosts.

    D.  csh-style brace-expansion:  super's pattern-matching previously
	was done with the BSD 4.x regex routines.  This is now extended
	allow csh-style braces.  For instance, to allow users
	pam and sammy, executing from hosts alpha and beta, you can
	use an entry like {pam,sammy}@{alpha,beta}

