.TH SUPER 1 local
.\"
.\"	Copyright (c) 1993 by California Institute of Technology.
.\"	Written by William Deich.  Not derived from licensed software.
.\"
.\"    You may distribute under the terms of either the GNU General Public
.\"    License or the Artistic License, as specified in the README file.
.\"
.\"
.SH NAME
super \- execute commands setuid root.
.SH SYNOPSIS
.B super
.RI [ " \-d " | " \-D " ]
.RI [ " \-h " | " \-H " | " \-f " ]
.RI [ " \-V " ]
.I command
.RI [ " args " ]
.br
.B command
.RI [ " args " ]
.br
.B super
.B \-c
.RI [ " superfile " ]
.SH DESCRIPTION
.B Super
allows specified users to execute scripts (or other commands) as if they
were root; or it can set the uid, gid, and/or supplementary groups on
a per-command basis before executing the command.
It is intended to be a secure alternative to making scripts setuid root.
Super also allows ordinary users to supply commands for execution by others;
these execute with the uid, gid, and groups of the user offering the command.
.PP
.B Super
consults a
.RI `` super.tab ''
file to see if the user is allowed to execute the requested
.IR command .
If permission is granted,
.B super
will exec
.IR pgm\  [\  args\  ],
where
.I pgm
is the program that is associated with this
.I command.
Root is always permitted to execute any command in the
super file.
.PP
The most common sort of entry in a
.I super.tab
file pairs a simple
.I command
with a
.I pgm
path.
But in fact, the command in the
.I super.tab
file is actually treated as a pattern, and
.I any
user-entered
command that matches this pattern causes the associated
.I pgm
to be executed.  If the listed
.I pgm
contains an asterisk, then the asterisk is replaced with
the command entered by the user.  One use of this is to
let any program in a certain directory be executed by a user.
For example, if the entry contains the command/pgm pairs
.ta 1.75in 2in 
.ti +.5i
.I "CommandPattern		Program"
.br
.ti +.5i
.B "scripts/*	\(->	/usr/local/super/*"
.br
.ti +.5i
.B "\ \ \ *	\(->	/usr/local/somedir/*"
.br
then the translations made are
.ti +.5i
.I "User's Command		Executed Program"
.br
.ti +.5i
.B "scripts/xyz	\(->	/usr/local/super/scripts/xyz"
.br
.ti +.5i
.B "xyz	\(->	/usr/local/somedir/xyz"
.br
.PP
Some commands can only be run after the user enters his or her password.
These commands can then be run multiple times until some expiration time,
at which point the password needs to be re-entered.
The list of password-requiring commands and the password durations
are set in the same file that records the valid users for each command.
.PP
Ordinary users can supply their own super files.
This lets users give well-controlled setuid/setgid access to their
programs: the user who offers the program gets the assurance of
safe IFS settings, safe environment variable settings, etc; and the
user who executes the program knows that it will execute under
the uid and gid of the offering user.
If a
.I command
is entered in the form \fIacct\fB:\fIcmd\fR,
.I super
looks for
.I cmd
in the file
.BR .supertab ,
in the home directory of account
.IR acct .
The
.I cmd
will be executed using the uid, gid, and supplementary groups (if any) of user
.IR acct .
.PP
If
\fIcommand\fR (or \fIacct\fB:\fIcmd\fR)
is a link to the
.B super
program,
then typing
.ti +.5i
% \fIcommand args\fP
.br
is equivalent to typing
.ti +.5i
% \fBsuper\fP \fIcommand args\fP
.br
(The
.I command
must not be
.BR super ,
or
.B super
will not recognize that it's being invoked via a link.)
.PP
.B Super
without any arguments will display the list of commands that may be executed
by the user.
.PP
For security, the following precautions are taken before exec'ing:
.TP
(a)
all descriptors save 0,1,2 are closed;
.TP
(b)
all of the user's environment variables are
discarded, save for TERM, LINES, and COLUMNS.
If TERM contains any characters other than
{-/:+._a\-zA\-Z0\-9}, it is discarded.
If LINES or COLUMNS contains any
characters other than [0\-9], it is discarded.
To these
are added reasonable values for:
.RS
.HP
USER and LOGNAME: both are set to the username associated with the
real uid of the program running under
.BR super ;
.HP
HOME: set to the login directory
of the user running
.BR super ;
.HP
ORIG_USER, ORIG_LOGNAME, ORIG_HOME: the values of
USER, LOGNAME, and HOME that came from the user who invoked
.B super
(these are normally the same values as USER, LOGNAME, and HOME;
but they will differ if the super command changes uid or gid
before executing the program);
.HP
IFS: set to blank, tab, newline;
.HP
PATH: set to
.IR @SafePath@ .
.HP
SUPERCMD: set to \fIcommand\fP.
.HP
additional environment variables as specified in the
.I super.tab
file (see below).
.RE
.in -.5i
.TP
(c)
all signal handling is reset to the default.
.SH OPTIONS
.TP
.BR \-c \ [\fIsuperfile\fP]
Tells
.I super
to check the syntax of the entries in the
.IR superfile ,
but not to execute any command.  If no
.I superfile
is given, the regular
.I super.tab
is checked.
After modifying a
super file, you should use this option to check its integrity.
.sp
Note that
.I "super \-c"
isn't a complete check that you've correctly set up an
entry, because you can create syntactically valid
entries that don't do exactly what you want.  Therefore,
you should also use
.IR "super \-d cmd"
to make sure that the command you've entered will be executed with the
correct arguments, uid, gid, umask, and so on.
.TP
.BR \-d
This enables debug mode, in which case (a) debugging information
is printed while checking a user for validity, and (b) the command
isn't actually executed.  Useful to check if a new entry in the
.I super.tab
file (see below) has been handled properly.
.TP
.BR \-D
Same as
.BR \-d ,
plus prints more information about variables defined in
the
.I super.tab
file.
.TP
.BR \-f
This requests help information in a format useful for processing by scripts.
(See
.B \-h
for standard help.)
.I Super
will print
the commands that the user may execute, one command per line, with no
additional help information.  Each output line looks like:
.ti +.5i
CmdPat\ \ \ FullPath\ \ [ args from super ]
.br
The
.I CmdPat
command patterns and
.I FullPath
strings
are explained under the
.B \-h
and
.B \-H
options.
The
.I super.tab
file can specify initial arguments that precede any user-supplied arguments;
these arguments, if any, are printed after the
.I FullPath
column.
(\fB\-f\fP stands for facts, as in ``just the facts, m'am'').
.HP
.BR \-h \ |\  \-?
If no arguments are given, or if the option ``\-h'' or ``\-?'' is given,
.B super
prints a brief summary of the commands available to the present user.
(Remember that the ``commands'' listed are actually patterns,
and you may type any command that matches a pattern.
Most often, however, the patterns are plain text
without any special characters.)
.TP
.B
\-H
Causes
.B super
to print a verbose listing of the commands available to the user.
It prints both the
.I command
and its translation to a program
.IR pgm .
If the displayed
.I pgm
contains an asterisk, then the actual program executed is formed
by replacing the asterisk with the
.IR command
entered by the user.
Consider the following three examples:
.sp
.I "Example 1."
.ti +0.5i
.B super skill
\(->
.I /usr/local/bin/skill
.sp
Typing
.B super\ skill
will execute
.BR /usr/local/bin/skill .
.sp
.I "Example 2."
.ti +0.5i
.B super {lp*}
\(->
.I /usr/bin/*
.sp
This example contains asterisks on both the left and right sides.
The left side shows the valid pattern you must match to execute
the command shown on the right-hand side.
Usually, the right-hand side has no asterisk, just
a full path to a command to execute.
If there
.I is
an asterisk present, it is replaced by the command you entered,
thereby forming the actual executed command.
Thus, if you type
.BI super\ lp xxx
(where
.I xxx
is any string),
.B super
will execute
.BI /usr/bin/lp xxx.
.sp
.I "Example 3."
.ti +0.5i
.B super {co*}
\(->
.I /usr/bin/compress
.sp
The asterisk on the left-hand side means you can enter
.BI super\ co xxx
(where
.I xxx
is any string),
but since the right-hand side
doesn't contain an asterisk,
.BI co xxx
will always execute
.BR /usr/bin/compress .
.SH FILES
.TP
.I @SUPERFILE@
contains the list of commands that
.B super
may execute, along with the names of the user/group combinations
who may execute each command.  The valid-user line can restrict use to
particular users or groups on different hosts, so a single super.tab
file can be used across a network.
.TP
.IR /usr/local/lib/superstamps/ username
(or similar; check your local configuration)
is used as a timestamp for the last time that the user entered
his or her password.
.SH CREATING SUPER SCRIPTS
You must be exceedingly careful when writing scripts for
.BR super .
A surprising variety of ordinary commands can, when
run setuid-root, be exploited for nasty purposes.  Always make your
scripts do as little as possible, and give the user as few options
as possible.
.PP
Think twice about side-effects and alternative uses
of these scripts.  For instance, make sure your script doesn't quietly
invoke the user's
.I .cshrc
or similar file.
Or, you might write a script to allow
users to mount cd-rom's by executing
.BR mount(8) .
But if you don't write it carefully, a user could mount a floppy
disk containing, say, a setuid-root shell.
.PP
Security issues aside, here are some hints on creating super scripts:
.TP
1.
Scripts must begin with \fB#!\ \fIinterpreter-path\fR.
.TP
2.
Some variants of csh will not run setuid scripts
unless the \-b flag (force a "break" from option processing) is set:
.ti +.5i
#!/bin/csh \-fb
.br
Similarly, if your
.I super.tab
file starts a shell such as csh or tcsh, you
may want to include the \-b option in the
.I super.tab
file, so that you
don't have to remember to type it on the command line every time;
use a line like the following in the
.I super.tab
file:
.ti +.5i
SHELL  "/usr/bin/csh \-fb"  some_priv_user
.br
N.B.  This is by way of example only; it's not a very good idea to
really let somebody become root without any password check.
.TP
3.
Better still, avoid csh scripts entirely -- they are harder to
write safely than Bourne-shell scripts.
.TP
4.
It's nice to make the
.B super
call transparent to users, so that they can type
.ti +.5i
% \fBcdmount\fP \fIargs\fP
.br
instead of
.ti +.5i
% \fBsuper cdmount\fP \fIargs\fP
.br
You can make a script
.B super
itself by beginning the script in the following way:
.in +.5i
.nf
#!/bin/sh
prog=`basename $0`
test "X$SUPERCMD" = "X$prog" ||
		exec /usr/local/bin/super $prog ${1+"$@"}
.fi
.in -.5i
Here, the path that is exec'd should be replaced with the
path at your site that leads to
.I super.
.TP
5.
Some programs need certain directories in the path.  Your
super scripts may have to add directories like
.I /etc
or
.I /usr/etc
to make commands work.
For instance, SunOS\ 4.1 needs
.I /usr/etc
in the path before it can mount filesystems of type ``hsfs''.
.TP
6.
By default, \fBsuper\fP only changes the effective uid.
Some programs (e.g. \fBexportfs\fP under SunOS\ 4.1.x)
require the real uid to be root.  In that case, you should put
an option like ``\fIuid=root\fP'' or ``\fIu+g=root\fP''
into the
.I super.tab
file.
.SH "SEE ALSO"
.I super(5)
.SH AUTHOR
Will Deich
.br
will@ucolick.org
.SH NOTES
If the
.I super.tab
file isn't owned by root, or if it is group- or world-writable,
.B super
won't run setuid-root.  (If the user's real uid is root,
.B super
won't run at all; otherwise, the effective uid reverts to real uid.)

There is a race condition when using password-requiring commands,
but it doesn't affect security: if a user is running two copies
of \fBsuper\fR simultaneously, and both processes try to update the
user's password timestamp file at the same time, then it is possible
for one of the \fBsuper\fR commands to fail.
Workaround: a single user shouldn't execute two password-requiring
\fBsuper\fR programs simultaneously.
