          Dial Up Networking Client Configuration Utility

		Chat Tutorial Section
		$Id: chat.tut,v 1.6 1996/11/18 00:01:07 richr Exp richr $

In this section you will configure the chat parameters.
Don't worry, we'll explain everything.  Chat is a program that
acts on your behalf once the connection to your ISP is made.
It does the actual interactive logon part.  However, like
(almost) everything else, there is no magic here.  Chat needs
to know what text the ISP will prompt you with, so it can
echo a response to the prompt at the proper time.  If you
don't know what the login prompts look like, don't worry.
We've provided some very common default prompts.  Chat can use
uucp style magic tokens too.  This IS magic!  The best way to
illustrate this is to walk through a login attempt.

If you were to dial into your ISP with a terminal emulator
such as minicom, or even cu, you might see something like this:

	CONNECT 9600

	Welcome to Jimmy Joe Jim Bob's Internet Service!

	This server has been up for 187 days!

	Enter username:

to which you respond with your username by typing:
my_ppp_username and then get prompted for a passwd:

	Enter Secret Key:

to which you would respond with your passwd:  my_ppp_passwd
You might also be prompted for additional information, or
you might even be expected to enter a command or series of
commands without getting prompted.  You may have to ask your
ISP for details if you don't know.  Or, if you have special
software you ISP provided you with, it surely has its own
"chat" information, probably in an .ini file somewhere if
its MS-Windows software.  If so, you could probably just read
the chat file they provide you with and get all of the needed
prompts and responses from it.  But for now, lets assume we
know the prompt strings and go through the same login as above,
but we'll configure chat to act on our behalf.

We need to tell chat what to expect before it will send
anything, so the first thing we tell chat to expect is nothing.
We do that by making our first entry on the first line of
the chat file an empty pair of quotes (it doesn't matter
what kind of quotes as long as they're the same and empty).
We'll use "".  Now we can tell chat to dial up your ISP.
We place this on the line with the "" separated by a space:
atdtm02225551122.  Please note there is not period.  In case you
don't know hayes at commands (niether do I really), the at
is just the modem command prefix.  The dt is for "dial tone"
as opposed to "dial pulse" which is dp.   The m0 tells the
modem that the volume should be 0, or no volume.  This makes
a quiet connection.  You can make this m1 or m2 if you like,
but we make it m0 by default because most people don't want
to hear all of those high pitched mechanical frequencies, etc.
The rest is just the area code and phone number.

Now we want chat to wait for the CONNECT string before we start
looking for other login prompt text, so we give this to chat:
CONNECT "".  This tells chat to look for CONNECT and send "",
or nothing.  This procedure is called an "expect send pair".
Using chat is as simple as giving it expect send pairs with
the right information.  Our chat file line now looks like this:

"" atdtm02225551122 CONNECT ""
^_________________^ ^________^
      /                 \
  expect send pair    expect send pair


We need to give an expect send pair for the login prompt, but
here we'll use one of those uucp magic tokens we mentioned.
If you remember, the login prompt was: "Enter username:", so
we'll tell chat to look for just the last piece of that, rname:.
The magic token is "--" without the quotes.  This tells chat
to look for the string "rname:" and if it doesn't get it,
send a carriage return and look again.  Some ISP's require
a carriage return prior to giving the login prompt.  So our
chat line now looks like:

"" atdtm02225551122 CONNECT "" rname:--rname:
                               ^^^^^ ^^ ^^^^^
                               |     |  |
                        prompt /   magic \ prompt
                         string    token    string

We tell chat to send our username: my_ppp_username, so we have:

"" atdtm02225551122 CONNECT "" rname:--rname: my_ppp_username
                               ^____________________________^
                                         /
                                    expect send pair

The next expect send pair we need to configure is the passwd
set.  The ISP here used this prompt:  Enter Secret Key:,
so we'll use the last part of that and our passwd which will
look like this:

"" atdtm02225551122 CONNECT "" rname:--rname: my_ppp_username \
Key: my_ppp_passwd

Please note the uppercase "Key:" as chat looks for whatever
text we tell it to, and the ISP sent a capital K.  Please also
note that I wrapped the chat line for readability and you don't
have to do that in reality.  In fact, the chat file we create
for you using this utility won't.

Now, for some, this is a complete chat file, but for others
we still need to invoke the remote connection daemon (start
the program we talk to on the ISP's computer).  This may be
as simple as an expect send pair like the following:

"" start_ppp

or may be entirely different.  Your ISP may present a menu
and prompt you for a choice.   In that case the expect send
pair will be the last part of the prompt followed by what you
would type in to respond to the prompt.

There, now we've finished configuring our chat file!  and it
now looks like this:

"" atdtm02225551122 CONNECT "" rname:--rname: my_ppp_username \
Key: my_ppp_passwd "" start_ppp

You should be ready to configure your chat file by providing the
expect send pairs we ask you for.  We'll ask for a connection
acknowledgement, such as CONNECT, which needs no send string.
Then we'll ask you for the login prompt expect string, and use your
username as the send pair.  Then you'll be asked for the passwd
prompt string (Key: in our example).  Because there is a security
issue with storing a human readable passwd in a text file, we dont'
reccommend doing it.  During the account configuration section, 
you will be given the option of storing your passwd in the chat file
(which is not reccommended) or being asked for your passwd each 
time you run the connection script we create.

This is the secure way to do it.  You passwd won't be echoed to 
your terminal when you type it, so don't worry about some seeing
it each time you connect.  If you choose not to do it that way, you
can enter the passwd once in this utility and never have to do it
again.  The down side to this is that your passwd will be stored
in human readable form both in the script we create and in the conf
file for this utility.

After completing the passwd expect send pair configuration (really
just the expect side of these pairs), you'll be asked if you need
to add an expect send pair to start the server side software.  
If so, you will be asked to enter the expect string (which might
be nothing, so "") and then the send string.

If you have special needs beyond this, you can edit the connect 
script we create prior to executing it to make additional
changes.  As with all input boxes, the defaults we provide can
be overwritten by backspacing and typing over them.  There is currently
no automatic support for configuring Microsoft RAS or DUN clients (which
use either PAP or CHAP authentication).  This is only a shortcoming of
this utility and _not_ of the client software provided by Debian.
I hope to include this support in the next release of this utility. I
may also include SLIP configuration support at that time, but there is
no support for SLIP configuration yet either.  Of course, if all else
fails, send mail to the debian-user list and you'll surely get help
there.

Good luck!

