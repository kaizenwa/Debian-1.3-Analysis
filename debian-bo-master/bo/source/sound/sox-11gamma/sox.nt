#
# This is an NMAKE file for Windows NT. It was originally created using
# the Visual C++ project manager. Hence, the reason it looks machine generated.
# There are only two targets supported: all and clean. Before running nmake,
# be sure to have the NT SDK environment established, e.g.,
#
#	\mstools\setenv \mstools
#
PROJ = SOXNT
DEBUG = 1
PROGTYPE = 2
CALLER = 
ARGS = 
DLLS = 
ORIGIN = MSVCNT
ORIGIN_VER = 1.00
PROJPATH = D:\PROJ\SOX7
USEMFC = 0
CC = cl
CPP = cl
CXX = cl
CCREATEPCHFLAG = 
CPPCREATEPCHFLAG = 
CUSEPCHFLAG = 
CPPUSEPCHFLAG = 
FIRSTC = RAW.C
FIRSTCPP = 
RC = rc
CFLAGS_D_DEXE32 = /nologo /W3 /Zi /YX /D "_X86_" /D "_DEBUG" /D "_CONSOLE" /D "DOS" /FR /ML /Fd"SOX.PDB" /Fp"SOX.PCH"
CFLAGS_R_DEXE32 = /nologo /W3 /YX /O2 /D "_X86_" /D "NDEBUG" /D "_CONSOLE" /D "DOS" /FR /ML /Fp"SOX.PCH"
LFLAGS_D_DEXE32 = /NOLOGO /DEBUG /DEBUGTYPE:cv /SUBSYSTEM:console netapi32.lib
LFLAGS_R_DEXE32 = /NOLOGO /SUBSYSTEM:console netapi32.lib
LFLAGS_D_LIB32 = /NOLOGO
LFLAGS_R_LIB32 = /NOLOGO
LIBS_D_DEXE32 = 
LIBS_R_DEXE32 = 
RCFLAGS32 = 
D_RCDEFINES32 = -d_DEBUG
R_RCDEFINES32 = -dNDEBUG
OBJS_EXT = 
LIBS_EXT = 
!if "$(DEBUG)" == "1"
CFLAGS = $(CFLAGS_D_DEXE32)
LFLAGS = $(LFLAGS_D_DEXE32)
LIBS = $(LIBS_D_DEXE32)
LFLAGS_LIB=$(LFLAGS_D_LIB32)
MAPFILE_OPTION = 
RCDEFINES = $(D_RCDEFINES32)
!else
CFLAGS = $(CFLAGS_R_DEXE32)
LFLAGS = $(LFLAGS_R_DEXE32)
LIBS = $(LIBS_R_DEXE32)
MAPFILE_OPTION = 
LFLAGS_LIB=$(LFLAGS_R_LIB32)
RCDEFINES = $(R_RCDEFINES32)
!endif
SBRS = RAW.SBR \
		VOC.SBR \
		AU.SBR \
		SF.SBR \
		AIFF.SBR \
		HCOM.SBR \
		8SVX.SBR \
		SNDRTOOL.SBR \
		WAV.SBR \
		SMP.SBR \
		AUTO.SBR \
		COPY.SBR \
		AVG.SBR \
		PRED.SBR \
		STAT.SBR \
		VIBRO.SBR \
		ECHO.SBR \
		RATE.SBR \
		LOWP.SBR \
		REVERSE.SBR \
		SOX.SBR \
		HANDLERS.SBR \
		LIBST.SBR \
		MISC.SBR \
		GETOPT.SBR \
		BAND.SBR


RAW_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h \
	$(PROJPATH)\libst.h


VOC_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


AU_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


SF_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h \
	$(PROJPATH)\sfheader.h


AIFF_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


HCOM_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


8SVX_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


SNDRTOOL_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


WAV_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


SMP_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


AUTO_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


COPY_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


AVG_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


PRED_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


STAT_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


VIBRO_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


ECHO_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


RATE_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


LOWP_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


REVERSE_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


SOX_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


HANDLERS_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


LIBST_DEP = 

MISC_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


GETOPT_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


BAND_DEP =  \
	$(PROJPATH)\st.h \
	$(PROJPATH)\amiga.h \
	$(PROJPATH)\patchlvl.h


all:	$(PROJ).EXE

clean:
	del *.obj
	del *.exe
	
RAW.OBJ:	RAW.C $(RAW_DEP)
	$(CC) $(CFLAGS) $(CCREATEPCHFLAG) /c RAW.C

VOC.OBJ:	VOC.C $(VOC_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c VOC.C

AU.OBJ:	AU.C $(AU_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c AU.C

SF.OBJ:	SF.C $(SF_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c SF.C

AIFF.OBJ:	AIFF.C $(AIFF_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c AIFF.C

HCOM.OBJ:	HCOM.C $(HCOM_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c HCOM.C

8SVX.OBJ:	8SVX.C $(8SVX_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c 8SVX.C

SNDRTOOL.OBJ:	SNDRTOOL.C $(SNDRTOOL_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c SNDRTOOL.C

WAV.OBJ:	WAV.C $(WAV_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c WAV.C

SMP.OBJ:	SMP.C $(SMP_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c SMP.C

AUTO.OBJ:	AUTO.C $(AUTO_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c AUTO.C

COPY.OBJ:	COPY.C $(COPY_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c COPY.C

AVG.OBJ:	AVG.C $(AVG_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c AVG.C

PRED.OBJ:	PRED.C $(PRED_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c PRED.C

STAT.OBJ:	STAT.C $(STAT_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c STAT.C

VIBRO.OBJ:	VIBRO.C $(VIBRO_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c VIBRO.C

ECHO.OBJ:	ECHO.C $(ECHO_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c ECHO.C

RATE.OBJ:	RATE.C $(RATE_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c RATE.C

LOWP.OBJ:	LOWP.C $(LOWP_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c LOWP.C

REVERSE.OBJ:	REVERSE.C $(REVERSE_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c REVERSE.C

SOX.OBJ:	SOX.C $(SOX_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c SOX.C

HANDLERS.OBJ:	HANDLERS.C $(HANDLERS_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c HANDLERS.C

LIBST.OBJ:	LIBST.C $(LIBST_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c LIBST.C

MISC.OBJ:	MISC.C $(MISC_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c MISC.C

GETOPT.OBJ:	GETOPT.C $(GETOPT_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c GETOPT.C

BAND.OBJ:	BAND.C $(BAND_DEP)
	$(CC) $(CFLAGS) $(CUSEPCHFLAG) /c BAND.C

$(PROJ).EXE:	RAW.OBJ VOC.OBJ AU.OBJ SF.OBJ AIFF.OBJ HCOM.OBJ 8SVX.OBJ SNDRTOOL.OBJ \
	WAV.OBJ SMP.OBJ AUTO.OBJ COPY.OBJ AVG.OBJ PRED.OBJ STAT.OBJ VIBRO.OBJ ECHO.OBJ RATE.OBJ \
	LOWP.OBJ REVERSE.OBJ SOX.OBJ HANDLERS.OBJ LIBST.OBJ MISC.OBJ GETOPT.OBJ BAND.OBJ $(OBJS_EXT) $(LIBS_EXT)
	echo >NUL @<<$(PROJ).CRF
RAW.OBJ 
VOC.OBJ 
AU.OBJ 
SF.OBJ 
AIFF.OBJ 
HCOM.OBJ 
8SVX.OBJ 
SNDRTOOL.OBJ 
WAV.OBJ 
SMP.OBJ 
AUTO.OBJ 
COPY.OBJ 
AVG.OBJ 
PRED.OBJ 
STAT.OBJ 
VIBRO.OBJ 
ECHO.OBJ 
RATE.OBJ 
LOWP.OBJ 
REVERSE.OBJ 
SOX.OBJ 
HANDLERS.OBJ 
LIBST.OBJ 
MISC.OBJ 
GETOPT.OBJ 
BAND.OBJ 
$(OBJS_EXT)
-OUT:$(PROJ).EXE
$(MAPFILE_OPTION)
$(LIBS)
$(LIBS_EXT)
$(DEFFILE_OPTION) -implib:$(PROJ).lib
<<
	link $(LFLAGS) @$(PROJ).CRF

run: $(PROJ).EXE
	$(PROJ) $(RUNFLAGS)


