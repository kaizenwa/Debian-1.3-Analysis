#! /usr/bin/make -f
#
# Time-stamp: <Sun Aug 11 16:21:33 CDT 1996 by steveg>
#
# To make the binary distribution package, the ``Debianized'' source package
# and the context diff to the original package, type `./debian.rules dist'.
# Make sure that `debian.rules' is executable before the final distribution
# is made.
#
# Invoke each target with `./debian.rules <target>'.  All targets should be
# invoked with the package root as the current directory.
#
# The `binary' target must be run as root, as it needs to install files with
# specific ownerships.  The `diff' target assumes that you have the original
# source package available, unpacked, in ../$(p)-$(v).orig, or that you have
# the previous revision of the ``Debianized'' source package and context diff
# in the parent directory.

CC = gcc
CFLAGS = -O2
LDFLAGS = -s

# The name of the package (for example, `emacs').
p = cern-httpd
# The version of the package (for example, `19.28').
v = 3.0
# The Debian revision of the package (for example, `2').
d = 7
# The build architecture
a = $(shell dpkg --print-architecture)

sect=net
prio=optional
urg=Low
curdir=$(shell pwd)

###
###
###

INSTALL = install
INSTALL_BIN = $(INSTALL) --owner=root --group=root --mode=0755
INSTALL_LIB = $(INSTALL) --owner=root --group=root --mode=0644
INSTALL_DIR = $(INSTALL) --directory --owner=root --group=root --mode=0755

FAKE_ROOT = ./debian-tmp
PREFIX = /usr

BINDIR = $(FAKE_ROOT)$(PREFIX)/sbin

CONFDIR = $(FAKE_ROOT)/etc

LIBDIR = $(FAKE_ROOT)$(PREFIX)/lib/cern-httpd
ICONDIR = $(LIBDIR)/icons
SERVERSCRIPTDIR = $(LIBDIR)/cgi-bin

DOCDIR = $(FAKE_ROOT)$(PREFIX)/doc
COPYRIGHTDIR = $(DOCDIR)/copyright
EXAMPLEDIR = $(DOCDIR)/examples/cern-httpd

CONTROLDIR = $(FAKE_ROOT)/DEBIAN

build: httpdconfig
# compile everthing needed for the package.
	./BUILD.SH

clean:
# Undoes the effect of 'build' and 'binary' targets.
	rm -rf debian-tmp
	rm -f control
	make clobber 

binary: build
# Makes a binary package.
	# clean up the previous run
	if [ -d debian-tmp ] ; then  rm -rf debian-tmp ; fi
	if [ -f control ] ; then rm -f control ; fi
	# Install the package files.
	$(INSTALL_DIR) $(BINDIR)
	$(INSTALL_BIN) Daemon/linux/httpd_3.0 $(BINDIR)/cern-httpd
	$(INSTALL_BIN) Daemon/linux/cgiparse $(BINDIR)/cgiparse
	$(INSTALL_BIN) Daemon/linux/cgiutils $(BINDIR)/cgiutils
	$(INSTALL_BIN) Daemon/linux/htadm $(BINDIR)/htadm
	$(INSTALL_BIN) httpdconfig $(BINDIR)/httpdconfig

	$(INSTALL_DIR) $(SERVERSCRIPTDIR)
	$(INSTALL_BIN) Daemon/linux/htimage $(SERVERSCRIPTDIR)/htimage

	$(INSTALL_DIR) $(ICONDIR)
	$(INSTALL_LIB) server_root/icons/* $(ICONDIR)

	$(INSTALL_DIR) $(COPYRIGHTDIR)
	$(INSTALL_LIB) debian.copyright $(COPYRIGHTDIR)/httpd

	$(INSTALL_DIR) $(EXAMPLEDIR)
	$(INSTALL_LIB) server_root/config/all.conf $(EXAMPLEDIR)/httpd-all.conf
	$(INSTALL_LIB) server_root/config/caching.conf $(EXAMPLEDIR)/httpd-caching.conf
	$(INSTALL_LIB) server_root/config/prot.conf $(EXAMPLEDIR)/httpd-prot.conf
	$(INSTALL_LIB) server_root/config/proxy.conf $(EXAMPLEDIR)/httpd-proxy.conf

	$(INSTALL_DIR) $(CONFDIR)
	$(INSTALL_DIR) $(CONFDIR)/cron.weekly
	$(INSTALL_BIN) debian.scripts/logfile-rotation \
	               $(CONFDIR)/cron.weekly/cern-httpd
	$(INSTALL_DIR) $(CONFDIR)/init.d
	$(INSTALL_BIN) debian.scripts/startup $(CONFDIR)/init.d/cern-httpd

	# Now the control files.
	$(INSTALL_DIR) $(CONTROLDIR)
	sed -e 's/=V/$(v)/' -e 's/=D/$(d)/' -e 's/=A/$(a)/' \
		debian.control > control
	$(INSTALL_LIB) control           $(CONTROLDIR)/control
	rm -f control
	$(INSTALL_BIN) debian.preinst    $(CONTROLDIR)/preinst
	$(INSTALL_BIN) debian.postinst   $(CONTROLDIR)/postinst
	$(INSTALL_BIN) debian.prerm      $(CONTROLDIR)/prerm
	$(INSTALL_BIN) debian.postrm     $(CONTROLDIR)/postrm
	# Build the debian binary package
	dpkg --build debian-tmp && chown $(USER).$(USER) debian-tmp.deb \
               && dpkg-name -o -s .. debian-tmp.deb
	rm -rf debian-tmp

source:
# Makes a source package.
	make -f debian.rules clean
	( cd .. && tar cf - $(p)-$(v) | gzip -9f > $(p)_$(v)-$(d).tar.gz )

diff:
# Makes a context diff.
	make -f debian.rules clean
	-test -d ../$(p)-$(v).orig -o -f ../$(p)-$(v)-`expr $(d) - 1`.diff.gz \
	  || ( echo "Original source package is not available." ; false )
	-test -d ../$(p)-$(v).orig || make -f debian.rules orig
	( cd .. && diff -cNr $(p)-$(v).orig $(p)-$(v) | gzip -9f \
	  > $(p)_$(v)-$(d).diff.gz )

changes:
	rm -f ../$(p)_$(v)-$(d).changes
	cd .. && dchanges   \
            urg=$(urg) s=$(sect) p=$(prio) \
            $(p)_$(v)-$(d){_$(a).deb,.tar.gz,.diff.gz}

dist: binary source diff
# Prepares the package for distribution.

orig:
# Prepares the original package from the previous
# Debian revision source package and context diff.
	( cd .. \
	  && mkdir $(p).orig \
	  && cd $(p).orig \
	  && tar xzf ../$(p)_$(v)-`expr $(d) - 1`.tar.gz \
	  && cd $(p)-$(v) \
	  && ( zcat ../../$(p)_$(v)-`expr $(d) - 1`.diff.gz \
	    | patch -sER -p1 ) \
	  && find . -name "*.orig" -exec rm -f {} \; \
	  && cd .. \
	  && mv $(p)-$(v) ../$(p)-$(v).orig \
	  && cd .. \
	  && rmdir $(p).orig )
