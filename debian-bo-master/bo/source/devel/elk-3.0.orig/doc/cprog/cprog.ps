%!PS-Adobe-3.0
%%Creator: groff version 1.08
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font Courier-Bold
%%+ font Courier
%%+ font Symbol
%%DocumentSuppliedResources: procset grops 1.08 0
%%Pages: 65
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.08 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll 
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Symbol
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72 def/PL
841.89 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron/scaron
/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/space
/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft
/parenright/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four
/five/six/seven/eight/nine/colon/semicolon/less/equal/greater/question/at/A/B/C
/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash
/bracketright/circumflex/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q
/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase
/guillemotleft/guillemotright/bullet/florin/fraction/perthousand/dagger
/daggerdbl/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guilsinglleft/logicalnot/minus
/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guilsinglright
/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde
/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]def/Courier@0 ENC0/Courier RE/Courier-Bold@0
ENC0/Courier-Bold RE/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0
/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF(Building Extensible A)173.286 123 Q
(pplications with Elk \212)-.3 E(C/C++ Pr)210.504 153 Q(ogrammer')-.216 E 3(sM)
-.444 G(anual)336.816 153 Q/F1 10/Times-Italic@0 SF(Oliver Laumann)255.085 177
Q(ABSTRA)264.535 219 Q(CT)-.3 E/F2 11/Times-Roman@0 SF .953(Elk \()133 246 R/F3
11/Times-Italic@0 SF .952(Extension Langua)B 1.172 -.11(ge K)-.11 H(it).11 E F2
3.702(\)i)C 3.702(saS)274.089 246 S .952(cheme implementation designed as an)
296.772 246 R .723(embeddable, reusable e)108 261 R .724
(xtension language subsystem for inte)-.165 F .724(gration into e)-.165 F
(xisting)-.165 E .767(and future applications written in C or C++.)108 276 R
.766(The programmer')6.266 F 3.516(si)-.605 G(nterf)401.821 276 Q .766
(ace to Elk)-.11 F(pro)108 291 Q .653(vides for a close interw)-.165 F .653
(orking of the C/C++ parts of Elk-based,)-.11 F F3(hybrid)3.403 E F2(appli-)
3.403 E .619(cations with e)108 306 R .619(xtensible Scheme code.)-.165 F .618
(This manual describes the f)6.118 F .618(acilities of the)-.11 F .436
(C/C++ programmer')108 321 R 3.186(si)-.605 G(nterf)209.28 321 Q .436
(ace that can be used by authors of e)-.11 F .437(xtensible applica-)-.165 F
1.523(tions and Scheme e)108 336 R 4.273(xtensions. T)-.165 F 1.523
(opics range from the architecture of Elk-based)-.88 F 1.538(applications and \
the de\214nition of application-speci\214c Scheme types and primi-)108 351 R
(ti)108 366 Q -.165(ve)-.275 G 2.973(st).165 G 2.973(om)134.37 366 S .223
(ore adv)151.401 366 R .223
(anced subjects such as weak data structures and interacting with)-.275 F .626
(the g)108 381 R .626(arbage collector)-.055 F 6.126(.M)-.605 G(an)219.493 381
Q 3.376(ye)-.165 G .626(xamples throughout the te)243.307 381 R .627
(xt illustrate the f)-.165 F(acilities)-.11 E
(and techniques discussed in this manual.)108 396 Q/F4 11/Times-Bold@0 SF 2.75
(1. Additional)72 438 R(Documentation)2.75 E F2 1.614(The of)97 456.6 R 1.614
(\214cial speci\214cation of the Scheme programming language is the `)-.275 F
(`R)-.814 E/F5 9/Times-Roman@0 SF(4)435.891 451.1 Q F2(RS')440.391 456.6 Q
4.363('\()-.814 G -.44(Wi)468.382 456.6 S(lliam).44 E 2.446
(Clinger and Jonathan Rees \(editors\),)72 471.6 R F3(Re)5.197 E(vised)-.165 E
/F6 9/Times-Italic@0 SF(4)281.417 466.1 Q F3 2.447
(Report on the Algorithmic Langua)291.114 471.6 R 2.667 -.11(ge S)-.11 H -.165
(ch).11 G(eme).165 E F2(,)A 2.873(1991\). A)72 486.6 R .123
(slightly modi\214ed v)2.873 F .123(ersion of an earlier re)-.165 F .123
(vision of this report w)-.275 F .122(as adopted as an IEEE an)-.11 F .62
(ANSI standard in 1990 \(IEEE)72 501.6 R -.917(Std 1178-1990,)1.833 F F3 .62
(IEEE Standar)3.37 F 3.371(df)-.407 G .621(or the Sc)352.136 501.6 R .621
(heme Pr)-.165 F -.11(og)-.495 G -.165(ra).11 G .621(mming Lan-).165 F(gua)72
516.6 Q -.11(ge)-.11 G F2 2.75(,1).11 G(991\).)109.664 516.6 Q .244
(The dialect of Scheme implemented by Elk \(a superset of the of)97 535.2 R
.243(\214cial language\) is described)-.275 F 1.066(in the)72 550.2 R F3(Refer)
3.816 E 1.066(ence Manual for the Elk Extension Langua)-.407 F 1.286 -.11(ge I)
-.11 H(nterpr).11 E(eter)-.407 E F2 1.066(that is included in the Elk)3.816 F
(distrib)72 565.2 Q .83(ution as trof)-.22 F 3.58(fs)-.275 G .829
(ource and preformatted PostScript \214les.)165.966 565.2 R .829
(Reference manuals for the v)6.329 F(arious)-.275 E 1.077(prede\214ned Elk e)72
580.2 R 1.077(xtensions \(such as the UNIX and X11 e)-.165 F 1.077
(xtensions\) are also part of the distrib)-.165 F(u-)-.22 E
(tion; see the \214le `)72 595.2 Q(`doc/README')-.814 E 2.75('f)-.814 G
(or an o)229.542 595.2 Q -.165(ve)-.165 G(rvie).165 E 2.75(wo)-.275 G 2.75(ft)
303.165 595.2 S(he a)312.636 595.2 Q -.275(va)-.22 G(ilable documentation.).275
E 1.743(This manual supersedes the document)97 613.8 R F3 1.743(Interfacing Sc)
4.493 F 1.742(heme to the `)-.165 F 1.742(`Real W)-1.221 F(orld')-1.012 E(')
-1.221 E F2 1.742(that w)4.492 F(as)-.11 E(included in earlier v)72 628.8 Q
(ersions of Elk.)-.165 E 1.424
(An article about Elk has appeared in USENIX Computing Systems in 1994 \(Oli)97
647.4 R -.165(ve)-.275 G 4.175(rL).165 G(au-)489.953 647.4 Q .068
(mann and Carsten Bormann, Elk: The Extension Language Kit,)72 662.4 R F3 .067
(USENIX Computing Systems)2.817 F F2 2.817(,v)C(ol.)492.692 662.4 Q
(7, no. 4, pp. 419\255449\).)72 677.4 Q 3.508(Ar)97 696 S .758(ecent e)112.113
696 R .758(xample of an application that uses Elk as its e)-.165 F .759
(xtension language implementation)-.165 F .912(is freely a)72 711 R -.275(va)
-.22 G .911(ilable in source and binary form as).275 F F3(http://www)3.661 E
(.informatik.uni-br)-.814 E(emen.de/~net/unr)-.407 E(of)-.495 E(f)-.198 E F2(.)
A F3(unr)72 726 Q(of)-.495 E(f)-.198 E F2 3.382(is a programmable, e)6.132 F
3.383(xtensible trof)-.165 F 6.133(ft)-.275 G 3.383
(ranslator with Scheme-based back-ends for the)280.89 726 R EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2-)278.837 51 S(Hyperte)72 87 Q 1.667
(xt Markup Language.)-.165 F 1.667(The source code sho)7.167 F 1.666
(wn in Appendix B has been directly tak)-.275 F(en)-.11 E 1.23(from the)72 102
R/F1 11/Times-Italic@0 SF(unr)3.98 E(of)-.495 E(f)-.198 E F0 1.23(source; auth\
ors of Elk-based applications are encourage to reuse this and other)3.98 F
(parts of the)72 117 Q F1(unr)2.75 E(of)-.495 E(f)-.198 E F0
(source for their o)2.75 E(wn projects.)-.275 E/F2 11/Times-Bold@0 SF 2.75
(2. Intr)72 147 R(oduction)-.198 E F0 .163(This manual can be roughly di)97
165.6 R .163(vided into tw)-.275 F 2.913(op)-.11 G 2.913(arts. The)303.85 165.6
R .162(\214rst part \(chapters)2.912 F 2.912(3t)2.75 G 2.75(o6)442.744 165.6 S
2.912(\)d)456.494 165.6 S(escribes)468.569 165.6 Q 1.606
(the architectural aspects of Elk-based applications and Elk e)72 180.6 R 4.357
(xtensions. F)-.165 F 1.607(acilities and tools for)-.165 F -.22(bu)72 195.6 S
.859(ilding e).22 F .859(xtensible applications with Elk are introduced here.)
-.165 F .858(Readers who are already f)6.359 F(amiliar)-.11 E .363
(with the concepts e)72 210.6 R .363
(xplained in this part of the document may w)-.165 F .364
(ant to skip it and be)-.11 F .364(gin reading at)-.165 F(chapter 7)72 225.6 Q
.223(or later)2.973 F 5.722(.T)-.605 G .222(he second part \(co)161.867 225.6 R
-.165(ve)-.165 G .222(ring chapters).165 F 2.972(7t)2.75 G 2.75(o1)324.545
225.6 S .222(2\) speci\214es the C functions and types)338.295 225.6 R -.22(av)
72 240.6 S 1.428
(ailable to application programmers and describes techniques for b)-.055 F
1.428(uilding data structures that)-.22 F .001(can be interf)72 255.6 R .001
(aced to Scheme in an ef)-.11 F .001(\214cient w)-.275 F(ay)-.11 E 5.5(.A)-.715
G(ppendix C brie\215y summarizes all the functions,)295.319 255.6 Q
(macros, types, and v)72 270.6 Q(ariables e)-.275 E(xported by the Elk k)-.165
E(ernel to the C/C++ programmer)-.11 E(.)-.605 E .594(Here is a short o)97
289.2 R -.165(ve)-.165 G(rvie).165 E 3.344(wo)-.275 G 3.344(ft)215.14 289.2 S
.594(he remaining chapters of this manual.)225.205 289.2 R(Chapter 3)6.094 E
.594(discusses the)3.344 F 3.873(architecture of e)72 304.2 R 3.873
(xtensible applications based on Elk and their relation to Elk e)-.165 F
(xtensions.)-.165 E(Chapter 4)72 319.2 Q(pro)2.991 E .241(vides an o)-.165 F
-.165(ve)-.165 G(rvie).165 E 2.991(wo)-.275 G 2.991(ft)220.969 319.2 S .241
(he tw)230.681 319.2 R 2.991(ob)-.11 G .241(asic methods for inte)268.937 319.2
R .241(grating an application \(or e)-.165 F(xten-)-.165 E .515
(sions\) with Elk: dynamic loading and static linking.)72 334.2 R(Chapter 5)
6.015 E .515(describes use of dynamic loading)3.265 F 2.8
(in more detail; topics include automatic e)72 349.2 R 2.801
(xtension initialization and C++ static constructors)-.165 F 1.728
(embedded in dynamically loaded modules.)72 364.2 R(Chapter 6)7.228 E 1.728
(describes se)4.478 F -.165(ve)-.275 G 1.727(ral forms of linking user).165 F
(-)-.22 E 1.568(supplied code with Elk statically and ho)72 379.2 R 4.318(wt)
-.275 G 1.568(hese af)272.44 379.2 R 1.568
(fect the structure of an application')-.275 F(s)-.605 E F1(main\(\))4.319 E F0
(function.)72 394.2 Q .035(The remaining chapters are a complete speci\214cati\
on of the functions and types of the C/C++)97 412.8 R(programmer')72 427.8 Q
4.166(si)-.605 G(nterf)140.934 427.8 Q 1.416(ace to Elk.)-.11 F(Chapter 7)6.917
E(pro)4.167 E 1.417(vides introductory notes and advice for program-)-.165 F
1.57(mers of C/C++ code interf)72 442.8 R 1.569
(acing to Elk \(use of include \214les, prede\214ned preprocessor symbols,)-.11
F 2.947(etc.\). Chapter)72 457.8 R 2.947(8d)2.75 G .198
(escribes the anatomy of Scheme objects from the C/C++ programmer')151.209
457.8 R 2.948(sp)-.605 G .198(oint of)474.773 457.8 R(vie)72 472.8 Q 6.029
-.715(w. C)-.275 H(hapter 9).715 E -.165(ex)4.599 G 1.849(plains ho).165 F
4.599(wa)-.275 G 1.849(pplications and e)219.415 472.8 R 1.849
(xtensions can de\214ne ne)-.165 F 4.598(wS)-.275 G 1.848(cheme primiti)423.766
472.8 R -.165(ve)-.275 G(s.).165 E(Chapter 10)72 487.8 Q 1.935
(presents the standard, b)4.685 F 1.936
(uilt-in Scheme types implemented by Elk \(numbers, pairs,)-.22 F -.165(ve)72
502.8 S .451(ctors, etc.\) and functions for creating and accessing Scheme obj\
ects of these types from within).165 F 2.562(C/C++ code.)72 517.8 R 2.562
(The f)8.062 F 2.563(acilities for de\214ning ne)-.11 F 3.993 -.715(w, \214)
-.275 H 2.563(rst-class Scheme data types are described in).715 F(chapter 11.)
72 532.8 Q(Finally)6.448 E 3.698(,c)-.715 G(hapter 12)169.112 532.8 Q .948
(deals with a number of more adv)3.698 F .947(anced topics, such as functions)
-.275 F .184(for interacting with the g)72 547.8 R .185(arbage collector)-.055
F 2.935(,a)-.44 G .185
(utomatic \214nalization of inaccessible objects, de\214nition)262.923 547.8 R
(of user)72 562.8 Q(-supplied reader functions, error handling, etc.)-.22 E
3.295(An)97 581.4 S .545(ote on the naming con)113.737 581.4 R -.165(ve)-.44 G
.545(ntions follo).165 F .544
(wed by the C identi\214ers used throughout this docu-)-.275 F .382
(ment: the names of all functions, macros, types, and v)72 596.4 R .382
(ariables e)-.275 F .382(xported by Elk ha)-.165 F .712 -.165(ve t)-.22 H .382
(heir compo-).165 F 1.405
(nents separated by underscores and capitalized \(as in)72 611.4 R F1(Re)4.155
E(gister_Object\(\))-.44 E F0 4.155(,f)C 1.405(or e)407.396 611.4 R 4.155
(xample\). In)-.165 F(con-)4.155 E 1.304(trast, the names de\214ned by e)72
626.4 R 1.305(xamples sho)-.165 F 1.305(wn in this manual only use lo)-.275 F
1.305(wer case letters, so that)-.275 F(the)72 641.4 Q 2.75(yc)-.165 G
(an be distinguished easily from prede\214ned functions e)98.411 641.4 Q
(xported by Elk.)-.165 E F2 2.75(3. The)72 671.4 R(Ar)2.75 E(chitectur)-.198 E
2.75(eo)-.198 G 2.75(fE)174.553 671.4 S(xtensible A)188.303 671.4 Q
(pplications)-.275 E F0 1.352(Extensible applications b)97 690 R 1.352
(uilt with Elk are)-.22 F F1(hybrid)4.102 E F0 1.352(in that the)4.102 F 4.101
(yc)-.165 G 1.351(onsist of code written in a)383.285 690 R .154
(mixture of languages\212code written in the application')72 705 R(s)-.605 E F1
.155(implementation langua)2.905 F -.11(ge)-.11 G F0 .155(\(C or C++\) and)
3.015 F 3.582(code written in the)72 720 R F1 -.22(ex)6.332 G 3.582
(tension langua).22 F -.11(ge)-.11 G F0 6.332(\(Scheme\). An)6.442 F 3.581
(application of this kind is usually)6.331 F EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3-)278.837 51 S 1.597(composed of tw)72 87 R
4.347(ol)-.11 G 1.597(ayers, a lo)158.257 87 R(w-le)-.275 E -.165(ve)-.275 G
4.347(lC).165 G 1.598(/C++ layer that pro)250.311 87 R 1.598
(vides the basic, performance-critical)-.165 F .175
(functionality of the application, and on top of that a higher)72 102 R(-le)
-.22 E -.165(ve)-.275 G 2.925(ll).165 G .175(ayer which is written in Scheme)
361.676 102 R(and interpreted at runtime.)72 117 Q .287(The Scheme-language po\
rtion of an Elk-based application may range from just a fe)97 135.6 R 3.037(wd)
-.275 G(ozen)483.232 135.6 Q .214
(lines of Scheme code \(if a simple form of customization is suf)72 150.6 R
.214(\214cient\) to \214fty percent of the appli-)-.275 F 1.13
(cation or more \(if a high de)72 165.6 R 1.13(gree of e)-.165 F 1.13
(xtensibility is required\).)-.165 F 1.13(As Scheme code is interpreted at)6.63
F .285(runtime by an interpreter embedded in the application, users can custom\
ize and modify the appli-)72 180.6 R(cation')72 195.6 Q 3.273(sS)-.605 G .524
(cheme layer or add and test their o)115.61 195.6 R .524
(wn Scheme procedures; recompilation, access to the)-.275 F 1.895
(C/C++ source, or kno)72 210.6 R 1.894
(wledge of the implementation language are not required.)-.275 F 1.894
(Therefore, an)7.394 F .148(application can achie)72 225.6 R .478 -.165(ve h)
-.275 H .148(ighest e).165 F .149(xtensibility by restricting its lo)-.165 F
(w-le)-.275 E -.165(ve)-.275 G 2.899(lp).165 G .149
(art to just a small core of)393.733 225.6 R(time-critical C/C++ code.)72 240.6
Q 3.014 -.88(To e)97 259.2 T 1.254(nable e).88 F 1.254(xtensions to `)-.165 F
(`w)-.814 E 1.254(ork on')-.11 F 4.004('a)-.814 G 4.004(na)267.313 259.2 S
(pplication')281.701 259.2 Q 4.004(si)-.605 G 1.254
(nternal data structures and state, the)340.1 259.2 R .329(application core e)
72 274.2 R .33(xports a set of ne)-.165 F 1.76 -.715(w, a)-.275 H .33
(pplication-speci\214c Scheme data types and primiti).715 F -.165(ve)-.275 G
3.08(so).165 G(per)486.51 274.2 Q(-)-.22 E .321
(ating on them to the Scheme layer)72 289.2 R 5.821(.T)-.605 G .321
(hese types and primiti)238.928 289.2 R -.165(ve)-.275 G 3.071(sc).165 G .32
(an be thought of as a `)358.924 289.2 R(`wrapper')-.814 E(')-.814 E .701
(around some of the C/C++ types and functions used by the application')72 304.2
R 3.452(sc)-.605 G 3.452(ore. F)405.688 304.2 R .702(or e)-.165 F .702
(xample, the)-.165 F 2.027(core of an Elk-based ne)72 319.2 R 2.027
(wsreader program w)-.275 F 2.027(ould e)-.11 F 2.026
(xport \214rst-class Scheme types representing)-.165 F/F1 11/Times-Italic@0 SF
(ne)72 334.2 Q(wsgr)-.165 E(oups)-.495 E F0(,)A F1(subscriptions)4.124 E F0
4.124(,a)C(nd)201.204 334.2 Q F1(ne)4.124 E 1.375(ws articles)-.165 F F0 4.125
(;t)C 1.375(hese types w)285.529 334.2 R 1.375
(ould encapsulate the corresponding)-.11 F(lo)72 349.2 Q(w-le)-.275 E -.165(ve)
-.275 G 3.85(lC).165 G -.814(``)-.001 G(structs').814 E 3.849('o)-.814 G 3.849
(rC)178.962 349.2 S 1.099(++ classes.)193.811 349.2 R 1.099(In addition, it w)
6.599 F 1.099(ould e)-.11 F 1.099(xport a number of Scheme primi-)-.165 F(ti)72
364.2 Q -.165(ve)-.275 G 3.446(st).165 G 3.446(oo)98.843 364.2 S .696
(perate on these types\212to create members of them \(e.)113.289 364.2 R .697
(g. by reading a ne)1.833 F .697(ws article from)-.275 F .004
(disk\), to present them to the user through the application')72 379.2 R 2.753
(su)-.605 G(ser)336.323 379.2 Q(-interf)-.22 E .003(ace, etc.)-.11 F .003
(Each of these prim-)5.503 F(iti)72 394.2 Q -.165(ve)-.275 G 3.211(sw).165 G
.462(ould recur on one or more corresponding C or C++ functions implementing t\
he function-)106.44 394.2 R(ality in an ef)72 409.2 Q(\214cient w)-.275 E(ay)
-.11 E(.)-.715 E 1.089(Another job of the lo)97 427.8 R(w-le)-.275 E -.165(ve)
-.275 G 3.839(lC).165 G 1.089
(/C++ layer of an application is to hide platform-speci\214c or)237.074 427.8 R
1.572(system-speci\214c details by pro)72 442.8 R 1.572
(viding suitable abstractions, so that the Scheme part can be k)-.165 F(ept)
-.11 E .978(portable and simple.)72 457.8 R -.165(Fo)6.478 G 3.728(re).165 G
.978(xample, in case of the ne)193.513 457.8 R .978(wsreader program, e)-.275 F
.978(xtension writers should)-.165 F .267(not ha)72 472.8 R .597 -.165(ve t)
-.22 H 3.017(oc).165 G .267(are about whether the ne)128.934 472.8 R .268
(ws articles are stored in a local \214le system or retrie)-.275 F -.165(ve)
-.275 G 3.018(df).165 G(rom)486.279 472.8 Q 3.189(an)72 487.8 S(etw)85.573
487.8 Q .439(ork serv)-.11 F(er)-.165 E 3.189(,o)-.44 G 3.188(ra)156.906 487.8
S .438(bout the idiosyncrasies of the system')168.641 487.8 R 3.188(sn)-.605 G
(etw)349.095 487.8 Q .438(orking f)-.11 F 3.188(acilities. Most)-.11 F .438
(of these)3.188 F .666
(system-speci\214c details can be better dealt with in a language oriented to)
72 502.8 R -.11(wa)-.275 G .666(rds systems program-).11 F
(ming, such as C, than in Scheme.)72 517.8 Q 2.028 -.88(To d)97 536.4 T .268
(ecide whether to mak).88 F 3.017(eaf)-.11 G .267(unction part of the lo)
231.409 536.4 R(w-le)-.275 E -.165(ve)-.275 G 3.017(lp).165 G .267
(art of an application or to write)365.536 536.4 R(it in the e)72 551.4 Q
(xtension language, you may ask yourself the follo)-.165 E(wing questions:)
-.275 E<83>72 570 Q F1(Is the function performance-critical?)97 570 Q F0 .567
(If the answer to this question is)97 588.6 R F1(yes)3.317 E F0 3.317(,p)C .568
(ut the function into the C/C++ core.)266.822 588.6 R -.165(Fo)6.068 G 3.318
(re).165 G .568(xample, in)456.99 588.6 R .021(case of the ne)97 603.6 R .021
(wsreader application, a primiti)-.275 F .351 -.165(ve t)-.275 H 2.771(os).165
G .02(earch all articles in a gi)319.764 603.6 R -.165(ve)-.275 G 2.77(nn).165
G -.275(ew)445.911 603.6 S .02(sgroup for).275 F 2.818(ap)97 618.6 S .069
(attern is certainly performance-critical and w)110.202 618.6 R .069
(ould therefore be written in the implementa-)-.11 F .273(tion language, while\
 a function to ask the user to select an item from a list of ne)97 633.6 R .272
(wsgroups is)-.275 F(not time-critical and could be written Scheme.)97 648.6 Q
<83>72 667.2 Q F1
(Does the function have to deal with platform-speci\214c details?)97 667.2 Q F0
-.165(Fo)97 685.8 S 3.061(re).165 G .311(xample, a function that needs to allo\
cate and open a UNIX pseudo-tty or to establish a)119.894 685.8 R(netw)97 700.8
Q 2.552
(ork connection needs to care about numerous system-speci\214c details and dif)
-.11 F(ferent)-.275 E 1.394(kinds of operating system f)97 715.8 R 1.395
(acilities and will therefore be written in C/C++ rather than in)-.11 F
(Scheme.)97 730.8 Q EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4-)278.837 51 S<83>72 87 Q/F1 11/Times-Italic@0
SF(In whic)97 87 Q 2.75(hl)-.165 G(angua)140.835 87 Q .22 -.11(ge c)-.11 H
(an the function be e).11 E(xpr)-.22 E(essed mor)-.407 E 2.75(e`)-.407 G
(`natur)340.903 87 Q(ally')-.165 E('?)-1.221 E F0 3.556(Af)97 105.6 S .805
(unction that parses and tok)112.161 105.6 R .805(enizes a string can be e)-.11
F .805(xpressed more naturally \(that is, in a)-.165 F .742
(signi\214cantly more concise and ef)97 120.6 R .743(\214cient w)-.275 F .743
(ay\) in a language such as C than in Scheme.)-.11 F(On)6.243 E .295
(the other hand, functions to construct trees of ne)97 135.6 R .294
(ws articles, to tra)-.275 F -.165(ve)-.22 G .294(rse them, and to apply a).165
F 2.353(function to each node are ob)97 150.6 R 2.353
(vious candidates for writing them in a Lisp-lik)-.165 F 5.104(el)-.11 G
(anguage)467.348 150.6 Q(\(Scheme\).)97 165.6 Q<83>72 184.2 Q F1(Ar)97 184.2 Q
2.75(ec)-.407 G(ustomizability and e)120.111 184.2 Q(xtensibility important?)
-.22 E F0 1.2(If it is lik)97 202.8 R 1.2(ely that the application')-.11 F 3.95
(su)-.605 G 1.2(sers will w)262.04 202.8 R 1.199
(ant to customize or augment a function or)-.11 F -2.365 -.275(ev e)97 217.8 T
3.126(nr).275 G .376(eplace it with their o)124.117 217.8 R .376(wn v)-.275 F
.376(ersions, write it in the e)-.165 F .376(xtension language.)-.165 F .376
(If, for some rea-)5.876 F .175
(son, this is impossible or not practicable, at least pro)97 232.8 R .175
(vide suitable `)-.165 F(`hooks')-.814 E 2.925('t)-.814 G .175
(hat enable users)433.393 232.8 R(to in\215uence the function')97 247.8 Q 2.75
(so)-.605 G(peration from within Scheme code.)219.826 247.8 Q/F2 11
/Times-Bold@0 SF 2.75(3.1. Scheme)72 277.8 R(Extensions)2.75 E F0 .142
(In addition to the Scheme interpreter component, Elk consists of a number of)
97 296.4 R F1(Sc)2.893 E .143(heme e)-.165 F(xten-)-.22 E(sions)72 311.4 Q F0
5.888(.T)C .388(hese e)109.975 311.4 R .387(xtensions are not speci\214c to an)
-.165 F 3.137(yk)-.165 G .387(ind application and are therefore reusable.)
288.63 311.4 R(The)5.887 E(y)-.165 E(pro)72 326.4 Q 1.605(vide the `)-.165 F
(`glue')-.814 E 4.355('b)-.814 G 1.606(etween Scheme and a number of e)169.413
326.4 R 1.606(xternal libraries, in particular the X11)-.165 F .605
(libraries and the UNIX C library \(e)72 341.4 R .605
(xceptions are the record e)-.165 F .604(xtension and the bitstring e)-.165 F
(xtension)-.165 E .198(which pro)72 356.4 R .198
(vide a functionality of their o)-.165 F 2.948(wn\). The)-.275 F .199
(purpose of these e)2.948 F .199(xtensions is to mak)-.165 F 2.949(et)-.11 G
.199(he func-)467.457 356.4 R 1.392(tionality of the e)72 371.4 R 1.392
(xternal libraries \(for e)-.165 F 1.392(xample, the UNIX system calls\) a)
-.165 F -.275(va)-.22 G 1.392(ilable to Scheme as).275 F
(Scheme data types and primiti)72 386.4 Q -.165(ve)-.275 G 2.75(so).165 G
(perating on them.)227.683 386.4 Q .225(While the Scheme e)97 405 R .225
(xtensions are useful for writing freestanding Scheme programs \(e.)-.165 F
.225(g. for)1.833 F .156
(rapid prototyping of X11-based Scheme programs\), their main job is to help b)
72 420 R .156(uilding applications)-.22 F .84(that need to interf)72 435 R .84
(ace to e)-.11 F .84(xternal libraries on the e)-.165 F .841
(xtension language le)-.165 F -.165(ve)-.275 G 3.591(l. The).165 F .841(X11 e)
3.591 F(xtensions,)-.165 E .64(for instance, are intended to be used by applic\
ations with a graphical user interf)72 450 R .639(ace based on the)-.11 F 3.042
(Xw)72 465 S(indo)90.926 465 Q 3.042(ws)-.275 G 3.042(ystem. By)125.472 465 R
.292(linking the X11 e)3.042 F .293
(xtensions \(in addition to the Scheme interpreter\) with an)-.165 F .575
(Elk-based application, the application')72 480 R 3.325(su)-.605 G .574
(ser interf)256.086 480 R .574(ace can be written entirely in Scheme and will)
-.11 F .642(therefore be inherently customizable and e)72 495 R 3.392
(xtensible. As)-.165 F .642(the Scheme e)3.392 F .643
(xtensions are reusable and)-.165 F .19(can be shared between applications, e)
72 510 R .19(xtension language code can be written in a portable manner)-.165 F
(.)-.605 E F2 2.75(3.2. A)72 540 R(pplications v)-.275 E(ersus Extensions)-.11
E F0 1.17(As f)97 558.6 R 1.17(ar as the C/C++ programmer')-.11 F 3.92(si)-.605
G(nterf)262.354 558.6 Q 1.17
(ace to Elk \(that is, the subject of this manual\) is)-.11 F .673
(concerned, there is not really a technical dif)72 573.6 R .673
(ference between Scheme)-.275 F F1 -.22(ex)3.423 G(tensions).22 E F0 .673
(on the one hand)3.423 F .373(\(such as the X11 e)72 588.6 R .373
(xtensions\), and Elk-based, e)-.165 F(xtensible)-.165 E F1(applications)3.123
E F0 .373(on the other hand.)3.123 F .373(Both are)5.873 F 1.287
(composed of an ef)72 603.6 R 1.287(\214cient, lo)-.275 F(w-le)-.275 E -.165
(ve)-.275 G 4.037(lC).165 G 1.287(/C++ core and, abo)243.028 603.6 R 1.617
-.165(ve t)-.165 H 1.287(hat, a higher).165 F(-le)-.22 E -.165(ve)-.275 G 4.036
(ll).165 G 1.286(ayer written in)437.276 603.6 R 4.551(Scheme. In)72 618.6 R
1.802(both cases, the C/C++ layer e)4.551 F 1.802
(xports a set of Scheme types and primiti)-.165 F -.165(ve)-.275 G 4.552(st)
.165 G 4.552(ot)480.506 618.6 S(he)493.616 618.6 Q 1.315
(Scheme layer \(that is, to the Scheme)72 633.6 R F1(pr)4.065 E -.11(og)-.495 G
-.165(ra).11 G(mmer).165 E F0 4.065(\)a)C 1.314
(nd thus needs to interact with the Scheme)311.793 633.6 R(interpreter)72 648.6
Q 7.841(.B)-.605 G 2.341(ecause of this analogy)135.138 648.6 R 5.091(,t)-.715
G 2.341(he rest of the manual will mostly drop the distinction)249.794 648.6 R
(between applications and e)72 663.6 Q(xtensions and concentrate on the interf)
-.165 E(ace between C/C++ and Elk.)-.11 E .437(The only note)97 682.2 R -.11
(wo)-.275 G(rth).11 E 3.187(yd)-.055 G(if)198.389 682.2 Q .436
(ference between applications and e)-.275 F .436
(xtensions is that the former tend)-.165 F .791(to ha)72 697.2 R 1.121 -.165
(ve t)-.22 H .791(heir o).165 F(wn)-.275 E F1(main\(\))3.541 E F0 .791
(function that g)3.541 F .791(ains control on startup, while Scheme e)-.055 F
.791(xtensions do not)-.165 F(ha)72 712.2 Q .372 -.165(ve a)-.22 H F1(main\(\))
2.957 E F0 .042(entry point\212the)2.792 F 2.792(ya)-.165 G .041
(re usually loaded into the interpreter \(or application\) during run-)220.435
712.2 R 4.631(time. This)72 727.2 R 1.881
(distinction will become important in the ne)4.631 F 1.882(xt chapter)-.165 F
4.632(,w)-.44 G 1.882(hen the dif)386.89 727.2 R 1.882(ferent w)-.275 F 1.882
(ays of)-.11 F EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5-)278.837 51 S
(joining Elk and C/C++ code will be discussed.)72 87 Q/F1 11/Times-Bold@0 SF
2.75(4. Linking)72 117 R -.275(Ap)2.75 G(plications and Extensions with Elk)
.275 E F0 .407(There are tw)97 135.6 R 3.157(od)-.11 G(if)167.444 135.6 Q .407
(ferent mechanisms for inte)-.275 F .407(grating compiled C/C++ code \(e)-.165
F .407(xtensions or an)-.165 F .718(application\) with Elk:)72 150.6 R/F2 11
/Times-Italic@0 SF .718(static linking)3.468 F F0(and)3.468 E F2 .718
(dynamic loading)3.468 F F0 6.218(.T)C .719(he object \214les that mak)343.57
150.6 R 3.469(eu)-.11 G 3.469(pa)462.236 150.6 S 3.469(nE)476.089 150.6 S(lk-)
491.779 150.6 Q .977(based application are usually link)72 165.6 R .976
(ed statically with the Scheme interpreter in the normal w)-.11 F .976(ay to)
-.11 F .042(produce an e)72 180.6 R -.165(xe)-.165 G .043(cutable program.).165
F .043(Compiled e)5.543 F .043
(xtensions, on the other hand, are usually dynamically)-.165 F .205
(loaded into the running Scheme interpreter as the)72 195.6 R 2.955(ya)-.165 G
.205(re needed.)303.21 195.6 R .205(These con)5.705 F -.165(ve)-.44 G .204
(ntions re\215ect the nor).165 F(-)-.22 E(mal case; Scheme e)72 210.6 Q
(xtensions may as well be link)-.165 E(ed statically with the interpreter)-.11
E 21.15<8374>72 229.2 S 5.741(op)100.058 229.2 S 2.991(roduce a `)116.799 229.2
R(`specialized')-.814 E 5.741('i)-.814 G 2.991
(nstance of the interpreter \(for e)233.792 229.2 R 2.991(xample, when de)-.165
F -.165(ve)-.275 G(loping).165 E .174(X11-based Scheme code, an e)97 244.2 R
.174(xtended v)-.165 F .173
(ersion of the interpreter may be produced by linking)-.165 F
(it statically with the X11 e)97 259.2 Q(xtensions\);)-.165 E 21.15<8369>72
277.8 S 4.261(fap)100.058 277.8 S 1.511(articular e)122.627 277.8 R 1.511
(xtension is required by an application from the be)-.165 F 1.512
(ginning \(an application)-.165 F .586(with an X-based user)97 292.8 R(-interf)
-.22 E .586(ace w)-.11 F .586(ould be link)-.11 F .585(ed with the X11 e)-.11 F
.585(xtensions statically)-.165 F 3.335(,a)-.715 G 3.335(sl)473.781 292.8 S
(oad-)484.453 292.8 Q(ing on-demand w)97 307.8 Q
(ould not be useful in this case\);)-.11 E 21.15<836f>72 326.4 S 3.646(nt)102.5
326.4 S .896(he \(fe)114.704 326.4 R .896
(w\) platforms where dynamic loading is not supported or where dynamic loading)
-.275 F(has a lar)97 341.4 Q(ge performance o)-.198 E -.165(ve)-.165 G(rhead.)
.165 E(Lik)97 360 Q -.275(ew)-.11 G 1.386(ise, dynamic loading is not only use\
ful for on-demand loading of reusable Scheme).275 F -.165(ex)72 375 S
(tensions;).165 E F2(applications)4.517 E F0 1.767(can bene\214t from this f)
4.517 F 1.767(acility as well.)-.11 F 3.527 -.88(To r)7.267 H 1.767
(educe the size of the \214nal).88 F -.165(exe)72 390 S .068
(cutable, parts of an application may loaded dynamically rather than link).165
F .067(ed statically if the)-.11 F 2.817(ya)-.165 G(re)495.453 390 Q .084
(used infrequently or if only a fe)72 405 R 2.835(wo)-.275 G 2.835(ft)227.812
405 S .085(hem are used at a time.)237.368 405 R .085
(Dynamic loading enables the author)5.585 F 1.354(of an e)72 420 R 1.354
(xtensible application to decompose it into an arbitrary number of indi)-.165 F
1.353(vidual parts as an)-.275 F(alternati)72 435 Q .778 -.165(ve t)-.275 H
3.198(oc).165 G .448(ombining them statically into a lar)137.829 435 R .448
(ge, monolithic e)-.198 F -.165(xe)-.165 G 3.198(cutable. An).165 F -.165(ex)
3.198 G .448(tensible ne).165 F(ws-)-.275 E .933(reader program, for e)72 450 R
.932(xample, may include a separate spelling check module that is dynamically)
-.165 F(loaded the \214rst time it is needed \(i.)72 465 Q(e. when a ne)1.833 E
(wly written ne)-.275 E(ws article is to be spell-check)-.275 E(ed\).)-.11 E
.14(The capability to dynamically load compiled C/C++ code into a running appl\
ication enables)97 483.6 R 1.404(users to write)72 498.6 R F2 1.404(hybrid e)
4.154 F(xtensions)-.22 E F0 1.403(which consist of a lo)4.154 F(w-le)-.275 E
-.165(ve)-.275 G 4.153(lC).165 G 1.403(/C++ part and a high-le)361.289 498.6 R
-.165(ve)-.275 G 4.153(lp).165 G(art)492.395 498.6 Q .297(written in Scheme.)72
513.6 R .297(As a result, e)5.797 F .297(xtensions can e)-.165 F -.165(xe)-.165
G .298(cute much f).165 F .298(aster \(e)-.11 F .298
(xtensions to the Emacs edi-)-.165 F(tor)72 528.6 Q 3.461(,f)-.44 G .711(or e)
93.655 528.6 R .71
(xample, must be entirely written in Emacs-Lisp and can therefore become slo)
-.165 F 3.46(wi)-.275 G 3.46(fs)473.931 528.6 S(uf)485.333 528.6 Q<8c2d>-.275 E
(ciently comple)72 543.6 Q(x\); and e)-.165 E
(xtensions can deal more easily with lo)-.165 E(w-le)-.275 E -.165(ve)-.275 G
(l, platform-speci\214c details.).165 E F1 2.75(5. Dynamic)72 573.6 R(Loading)
2.75 E F0 .808
(Object \214les \(compiled C/C++ code\) are loaded by means of the standard)97
592.2 R F2(load)3.558 E F0(primiti)3.558 E 1.138 -.165(ve o)-.275 H(f).165 E
.521(Scheme, just lik)72 607.2 R 3.271(eo)-.11 G .521(rdinary Scheme \214les.)
157.174 607.2 R .52(All you need to do is to compile your C or C++ source)6.021
F .858(\214le, apply the)72 622.2 R F2(mak)3.608 E(edl)-.11 E F0 .858
(script that comes with the Elk distrib)3.608 F .859
(ution to the resulting object \214le, and)-.22 F .01
(load it into the interpreter or application.)72 637.2 R F2(mak)5.509 E(edl)
-.11 E F0 .009(prepares object \214les for dynamic loading \(which)2.759 F
1.515(is a no-op on most platforms\) and combines se)72 652.2 R -.165(ve)-.275
G 1.516(ral object \214les into one to speed up loading;).165 F(ar)72 667.2 Q
.584(guments are the output \214le and one or more input \214les or additional\
 libraries \(input and output)-.198 F(\214le may be identical\):)72 681.2 Q EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-6-)278.837 51 S/F1 10/Courier-Bold@0 SF(%)100.346
86 Q/F2 10/Courier@0 SF(cc \255c \255I/usr/elk/include file.c)6 E F1(%)100.346
100 Q F2(/usr/elk/lib/makedl file.o file.o)6 E F1(%)100.346 114 Q F2(scheme)6 E
F1(>)100.346 128 Q F2(\(load 'file.o\))6 E F1(>)100.346 142 Q F0 1.571
(\(This e)72 164.5 R 1.571(xamples assumes that Elk has been installed under `)
-.165 F(`/usr/elk')-.814 E 4.321('o)-.814 G 4.321(ny)397.536 164.5 S 1.571
(our site.)412.857 164.5 R(Additional)7.072 E(ar)72 179.5 Q
(guments may be required for the call to)-.198 E/F3 11/Times-Italic@0 SF(cc)
2.75 E F0(.\))A .676(Elk does not attempt to discriminate object code and Sche\
me code based on the \214les' con-)97 198.1 R .346
(tents; the names of object \214les are required to end in `)72 213.1 R(`.o')
-.814 E .347(', the standard suf)-.814 F .347(\214x for object modules)-.275 F
.464(in UNIX.)72 228.1 R .463(Scheme \214les, on the other hand, end in `)5.964
F(`.scm')-.814 E 3.213('b)-.814 G 3.213(yc)339.424 228.1 S(on)353.021 228.1 Q
-.165(ve)-.44 G 3.213(ntion. This).165 F(con)3.213 E -.165(ve)-.44 G .463
(ntion is not).165 F .397(enforced by Elk\212e)72 243.1 R -.165(ve)-.275 G .398
(rything that is not an object \214le is considered to be a Scheme \214le.).165
F 3.148(Al)5.898 G .398(ist of)481.294 243.1 R .182
(object \214les may be passed to the)72 258.1 R F3(load)2.931 E F0(primiti)
2.931 E .511 -.165(ve w)-.275 H .181(hich may sa).165 F .511 -.165(ve t)-.22 H
.181(ime on platforms where a call to).165 F(the system link)72 273.1 Q
(er is in)-.11 E -.22(vo)-.44 G(lv).22 E(ed.)-.165 E .942
(Loading object \214les directly as sho)97 291.7 R .942(wn abo)-.275 F 1.272
-.165(ve i)-.165 H 3.692(su).165 G 3.692(ncommon. Instead,)318.409 291.7 R .942
(the Scheme part of a)3.692 F -.055(hy)72 306.7 S 2.765(brid e).055 F 2.765(xt\
ension usually loads its corresponding object \214le \(and all the other \214l\
es that are)-.165 F(required\) automatically)72 320.7 Q 2.75(,s)-.715 G 2.75
(ot)184.013 320.7 S(hat one can write, for e)195.321 320.7 Q(xample,)-.165 E F2
(\(require 'unix\))100.346 343.203 Q F0 1.102(to load the UNIX e)72 365.703 R
3.852(xtension. This)-.165 F -.165(ex)3.852 G 1.102(pression causes the \214le)
.165 F F3(unix.scm)3.852 E F0 1.102(to be loaded, which then)3.852 F 2.593
(loads the object \214le)72 380.703 R F3(unix.o)5.343 E F0 2.592
(\212the UNIX e)B(xtension')-.165 E 5.342(sl)-.605 G -.275(ow)318.519 380.703 S
(-le).275 E -.165(ve)-.275 G 5.342(lp).165 G 2.592
(art\212automatically on startup.)367.135 380.703 R(Additional)72 395.703 Q F3
(load-libr)3.291 E(aries)-.165 E F0 .541(\(as e)3.291 F .541
(xplained in the ne)-.165 F .541
(xt section\) may be set by the Scheme \214le imme-)-.165 F
(diately before loading the e)72 410.703 Q(xtension')-.165 E 2.75(so)-.605 G
(bject \214le.)245.063 410.703 Q 2.662
(When an object \214le is loaded, unresolv)97 429.303 R 2.662
(ed references are resolv)-.165 F 2.662(ed ag)-.165 F 2.662(ainst the symbols)
-.055 F -.165(ex)72 444.303 S 1.323(ported by the running interpreter or by th\
e combination of an application and the interpreter).165 F(\(the)72 459.303 Q
F3 .022(base pr)2.772 F -.11(og)-.495 G -.165(ra).11 G(m).165 E F0 2.772
(\). This)B .022(is an essential feature, as dynamically loaded e)2.772 F .021
(xtensions must be able to)-.165 F .254
(reference the elementary Scheme primiti)72 474.303 R -.165(ve)-.275 G 3.004
(sd).165 G .255(e\214ned by the interpreter core and all the other func-)
274.746 474.303 R 2.674(tions that are a)72 489.303 R -.275(va)-.22 G 2.674
(ilable to the e).275 F 2.674(xtension/application programmer)-.165 F 8.174(.I)
-.605 G 5.423(na)384.804 489.303 S 2.673(ddition, references are)400.611
489.303 R(resolv)72 504.303 Q .152(ed ag)-.165 F .152(ainst the symbols e)-.055
F .152(xported by all pre)-.165 F .152(viously loaded object \214les.)-.275 F
.152(The term)5.652 F F3(incr)2.903 E(emental)-.407 E(loading)72 519.303 Q F0
.326(is used for this style of dynamic loading, as it allo)3.077 F .326(ws b)
-.275 F .326(uilding comple)-.22 F 3.076(xa)-.165 G .326(pplications from)
431.261 519.303 R(small components incrementally)72 534.303 Q(.)-.715 E/F4 11
/Times-Bold@0 SF 2.75(5.1. Load)72 564.303 R(Libraries)2.75 E F0 2.474
(Dynamically loadable object \214les usually ha)97 582.903 R 2.804 -.165(ve u)
-.22 H(nresolv).165 E 2.474(ed references into one or more)-.165 F .748
(libraries, most lik)72 597.903 R .748
(ely at least into the standard C library)-.11 F 6.248(.T)-.715 G .747
(herefore, when loading an object \214le,)336.22 597.903 R .686
(references are resolv)72 612.903 R .686(ed not only ag)-.165 F .687
(ainst the base program and pre)-.055 F .687(viously loaded object \214les, b)
-.275 F(ut)-.22 E 1.004(also ag)72 627.903 R 1.003(ainst a number of user)-.055
F(-supplied)-.22 E F3 1.003(load libr)3.753 F(aries)-.165 E F0 6.503(.T)C 1.003
(he X11 e)327.064 627.903 R 1.003(xtensions of Elk, for instance,)-.165 F 1.411
(need to be link)72 642.903 R 1.411(ed ag)-.11 F 1.411(ainst the respecti)-.055
F 1.741 -.165(ve l)-.275 H 1.411(ibraries of the X windo).165 F 4.161(ws)-.275
G 1.412(ystem, such as)383.776 642.903 R F3(libX11)4.162 E F0(and)4.162 E F3
(libXt)72 657.903 Q F0 6.012(.T)C .511
(hese load libraries can be assigned to the Scheme v)108.878 657.903 R(ariable)
-.275 E F3(load-libr)3.261 E(aries)-.165 E F0 .511(which is bound)3.261 F 1.564
(in the top-le)72 672.903 R -.165(ve)-.275 G 4.314(le).165 G -.44(nv)150.491
672.903 S 1.564(ironment of Elk.).44 F -.88(Ty)7.064 G(pically).88 E(,)-.715 E
F3(load-libr)4.314 E(aries)-.165 E F0 1.565(is dynamically assigned a set of)
4.314 F .014(library names by means of)72 687.903 R F3(\215uid-let)2.764 E F0
.014(immediately before calling)2.764 F F3(load)2.764 E F0 5.514(.F)C .014
(or e)383.605 687.903 R .014(xample, the Xlib e)-.165 F(xten-)-.165 E(sion \()
72 701.903 Q F3(xlib)A(.scm)-.44 E F0 2.75(\)c)C(ontains code such as)143.962
701.903 Q EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-7-)278.837 51 S/F1 10/Courier@0 SF(\(fluid-let)
100.346 86 Q(\(\(load-libraries)112.346 100 Q
(\(string-append "\255L/usr/X11/lib \255lX11 " load-libraries\)\)\))130.346 114
Q(\(load 'xlib.o\)\))112.346 128 Q F0 .591(to load the accompan)72 150.5 R .591
(ying object \214le \()-.165 F/F2 11/Times-Italic@0 SF(xlib)A(.o)-.44 E F0 .592
(\), linking it ag)B .592(ainst the system')-.055 F 3.342(sXl)-.605 G .592
(ibrary in addition)426.432 150.5 R 1.881(to whate)72 165.5 R -.165(ve)-.275 G
4.63(rl).165 G 1.88(ibraries were already in use at that point.)132.752 165.5 R
1.88(The def)7.38 F 1.88(ault v)-.11 F 1.88(alue of)-.275 F F2(load-libr)4.63 E
(aries)-.165 E F0(is)4.63 E -.814(``)72 180.5 S(\255lc').814 E 3.036('\()-.814
G -.917(i. e.)105.869 180.5 R .286(the C library\), as e)3.036 F .286
(xtensions are lik)-.165 F .286
(ely to use functions from this library in addition to)-.11 F .286
(those C library functions that ha)72 195.5 R .616 -.165(ve a)-.22 H .286
(lready been link).165 F .286(ed into the base program or ha)-.11 F .615 -.165
(ve b)-.22 H .285(een pulled).165 F .642(in by pre)72 210.5 R .642
(viously loaded object \214les.)-.275 F .642(By using)6.142 F F2(string-append)
3.393 E F0 .643(in the e)3.393 F .643(xample abo)-.165 F -.165(ve)-.165 G 3.393
(,t).165 G .643(he speci\214ed)451.118 210.5 R .174
(libraries are added to the def)72 225.5 R .174(ault v)-.11 F .174(alue of)
-.275 F F2(load-libr)2.924 E(aries)-.165 E F0 .173(rather than o)2.924 F -.165
(ve)-.165 G .173(rwriting it.).165 F .173(The e)5.673 F .173(xact syn-)-.165 F
.177(tax of the load libraries is platform speci\214c.)72 240.5 R -.165(Fo)
5.677 G 2.927(ri).165 G .177(nstance, `)291.877 240.5 R(`\255L/usr/X11/lib')
-.814 E 2.927('a)-.814 G 2.928(su)417.477 240.5 S .178(sed abo)430.184 240.5 R
.508 -.165(ve i)-.165 H 2.928(sr).165 G(ec-)490.569 240.5 Q 1.064
(ognized by the system link)72 255.5 R 1.064(er of most UNIX v)-.11 F 1.064
(ariants as an option indicating in which directory)-.275 F .416
(the libraries reside on the system, b)72 270.5 R .416(ut dif)-.22 F .417
(ferent options or additional libraries are required on cer)-.275 F(-)-.22 E
(tain platforms \(as speci\214ed by the platform')72 285.5 Q 2.75(s`)-.605 G
(`con\214g/site')274.356 285.5 Q 2.75<278c>-.814 G(le in the Elk distrib)
339.234 285.5 Q(ution\).)-.22 E/F3 11/Times-Bold@0 SF 2.75(5.2. Extension)72
315.5 R(Initializers and Finalizers)2.75 E F0 .07
(When loading an object \214le, Elk scans the \214le')97 334.1 R 2.82(ss)-.605
G .07(ymbol table for the names of e)313.947 334.1 R .07(xtension ini-)-.165 F
2.171(tialization functions or)72 349.1 R F2 -.22(ex)4.921 G 2.172
(tension initializer).22 F F0 4.922(s. These)B -.165(ex)4.922 G 2.172
(tension initializers are the initial entry).165 F 1.224(points to the ne)72
364.1 R 1.223(wly loaded e)-.275 F 1.223(xtension; their names must ha)-.165 F
1.553 -.165(ve t)-.22 H 1.223(he pre\214x `).165 F(`elk_init_')-.814 E 3.973
('\()-.814 G 1.223(earlier the)458.491 364.1 R .592(pre\214x `)72 379.1 R
(`init_')-.814 E 3.342('w)-.814 G .592(as used; it w)145.377 379.1 R .592
(as changed in Elk 3.0 to a)-.11 F -.22(vo)-.22 G .593(id name con\215icts\).)
.22 F .593(Each e)6.093 F .593(xtension ini-)-.165 F .672
(tializer found in the object \214le is in)72 394.1 R -.22(vo)-.44 G -.11(ke)
.22 G 3.422(dt).11 G 3.421(op)263.595 394.1 S .671(ass control to the e)278.016
394.1 R 3.421(xtension. The)-.165 F .671(job of the e)3.421 F(xten-)-.165 E
.925(sion initializers is to re)72 409.1 R .925
(gister the Scheme types and primiti)-.165 F -.165(ve)-.275 G 3.675(sd).165 G
.926(e\214ned by the e)359.297 409.1 R .926(xtension with the)-.165 F
(interpreter and to perform an)72 424.1 Q 2.75(yd)-.165 G
(ynamic initializations.)212.657 424.1 Q .731(As each e)97 442.7 R .731
(xtension may ha)-.165 F 1.06 -.165(ve a)-.22 H 3.48(na).165 G .73
(rbitrary number of initialization functions rather than one)246.847 442.7 R
.58(single function with a \214x)72 457.7 R .58(ed name, e)-.165 F .581
(xtension writers can di)-.165 F .581(vide their e)-.275 F .581
(xtensions into a number of)-.165 F .265
(independent modules, each of which pro)72 472.7 R .265(vides its o)-.165 F
.265(wn initialization function.)-.275 F .264(The compiled mod-)5.764 F .93(ul\
es can then be combined into one dynamically loadable object \214le without ha)
72 487.7 R .93(ving to lump all)-.22 F
(initializations into a central initialization function.)72 502.7 Q .164
(In the same manner)97 521.3 R 2.914(,e)-.44 G .163
(xtension can de\214ne an arbitrary number of)193.884 521.3 R F2 -.22(ex)2.913
G .163(tension \214nalization func-).22 F(tions)72 536.3 Q F0 1.617
(which are called on termination of the Scheme interpreter or application.)
4.366 F 1.617(The names of)7.117 F .299(\214nalization functions be)72 551.3 R
.299(gin with `)-.165 F(`elk_\214nit_')-.814 E 3.049('. Extension)-.814 F .299
(\214nalization functions are typically used)3.049 F
(for clean-up operations such as remo)72 566.3 Q(ving temporary \214les.)-.165
E(The e)97 584.9 Q(xtension initializers \(as well as the \214nalizers\) are c\
alled in an unspeci\214ed order)-.165 E(.)-.605 E F3 2.75(5.3. C++)72 614.9 R
(Static Constructors and Destructors)2.75 E F0 .633(In addition to calling e)97
633.5 R .633(xtension initialization functions, the)-.165 F F2(load)3.384 E F0
(primiti)3.384 E -.165(ve)-.275 G 3.384(si).165 G -2.09 -.44(nv o)436.094 633.5
T -.11(ke).44 G 3.384(sa).11 G .634(ll C++)474.755 633.5 R .836(static constru\
ctors that are present in the dynamically loaded object \214le in case it cont\
ains com-)72 648.5 R 1.096(piled C++ code.)72 663.5 R(Lik)6.596 E -.275(ew)-.11
G 1.096(ise, C++ static destructors are called automatically on termination.)
.275 F(The)6.597 E 1.051
(constructors and destructors are called in an unspeci\214ed order)72 678.5 R
3.801(,b)-.44 G 1.051(ut all constructors \(destructors\))363.677 678.5 R .642
(are called before calling an)72 693.5 R 3.392(ye)-.165 G .642
(xtension initializers \(\214nalizers\).)207.133 693.5 R .643
(Elk recognizes the function name)6.142 F(pre\214x)72 708.5 Q 1.338(es of stat\
ic constructor and destructor functions used by all major UNIX C++ compilers;)
-.165 F(ne)72 723.5 Q 2.75(wp)-.275 G(re\214x)98.301 723.5 Q
(es can be added if required.)-.165 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-8-)278.837 51 S/F1 11/Times-Bold@0 SF 2.75
(6. Static)72 87 R(Linking)2.75 E F0 1.864(Linking user)97 105.6 R 1.865
(-supplied code with Elk statically can be used as an alternati)-.22 F 2.195
-.165(ve t)-.275 H 4.615(od).165 G(ynamic)471.616 105.6 Q .845
(loading on platforms that do not support it, for applications with their o)72
120.6 R(wn)-.275 E/F2 11/Times-Italic@0 SF(main\(\))3.594 E F0 3.594(,a)C .844
(nd to a)453.252 120.6 R -.22(vo)-.22 G(id).22 E .437(the o)72 135.6 R -.165
(ve)-.165 G .437(rhead of loading frequently used Elk e).165 F 3.187
(xtensions. Dynamic)-.165 F .438(loading and static linking may)3.187 F .287(b\
e used in combination\212 additional object \214les can be loaded in a running\
 e)72 150.6 R -.165(xe)-.165 G .287(cutable formed by).165 F
(linking the Scheme interpreter with e)72 165.6 Q
(xtensions or with an application \(or parts thereof\).)-.165 E .823
(When making the Scheme interpreter component of Elk, these e)97 184.2 R -.165
(xe)-.165 G .824(cutables and object \214les).165 F(get installed \(relati)72
199.2 Q .33 -.165(ve t)-.275 H 2.75(oy).165 G(our)183.991 199.2 Q F2
(install_dir)2.75 E F0(which usually is `)2.75 E(`/usr/elk')-.814 E 2.75('o)
-.814 G 2.75(r`)378.526 199.2 S(`/usr/local/elk')387.788 199.2 Q('\):)-.814 E
F2(bin/sc)97 217.8 Q(heme)-.165 E F0
(The freestanding, plain Scheme interpreter)122 232.8 Q(.)-.605 E F2
(lib/standalone)97 251.4 Q(.o)-.165 E F0 1.847
(The Scheme interpreter as a relocatable object \214le which can be link)122
266.4 R 1.846(ed with user)-.11 F(-)-.22 E .009
(supplied object \214les to form an e)122 281.4 R -.165(xe)-.165 G 2.76
(cutable. This).165 F .01(object \214le contains a)2.76 F F2(main\(\))2.76 E F0
(function;)2.76 E 2.84(thus the Scheme interpreter starts up in the normal w)
122 296.4 R 2.84(ay when the e)-.11 F -.165(xe)-.165 G 2.839(cutable is).165 F
(in)122 311.4 Q -.22(vo)-.44 G -.11(ke).22 G(d.).11 E F2(lib/module)97 330 Q
(.o)-.165 E F0(Lik)122 345 Q(e)-.11 E F2(standalone)3.341 E(.o)-.165 E F0 3.341
(,e)C .592(xcept that the object \214le does not e)212.568 345 R .592
(xport its o)-.165 F(wn)-.275 E F2(main\(\))3.342 E F0(function.)3.342 E
(Therefore, the object \214les link)122 360 Q(ed with it ha)-.11 E .33 -.165
(ve t)-.22 H 2.75(os).165 G(upply a)337.809 360 Q F2(main\(\))2.75 E F0(.)A
1.234(The object \214le)97 378.6 R F2(standalone)3.984 E(.o)-.165 E F0 1.234
(is typically link)3.984 F 1.234(ed with a number of Elk e)-.11 F 1.233
(xtensions \(e.)-.165 F 1.233(g. the)1.833 F 1.392(X11 e)72 393.6 R 1.392
(xtensions\), while)-.165 F F2(module)4.142 E(.o)-.165 E F0 1.392
(is used by Elk-based applications which contrib)4.142 F 1.393(ute their o)-.22
F(wn)-.275 E F2(main\(\))72 408.6 Q F0(and need to be `)2.75 E(`in control')
-.814 E 2.75('o)-.814 G 2.75(ns)234.415 408.6 S(tartup.)246.944 408.6 Q F1 2.75
(6.1. Linking)72 438.6 R(the Scheme Inter)2.75 E(pr)-.11 E
(eter with Extensions)-.198 E F0 3.545(As)97 457.2 S .795(hell script)112.766
457.2 R F2(linksc)3.544 E(heme)-.165 E F0 .794(\(installed as `)3.544 F
(`lib/linkscheme')-.814 E .794('\) simpli\214es combining the Scheme)-.814 F
1.271(interpreter with a number of\212user)72 472.2 R 1.271
(-supplied or prede\214ned\212e)-.22 F 1.271(xtensions statically)-.165 F 6.772
(.T)-.715 G 1.272(his script is)451.34 472.2 R .91
(called with the name of the output \214le \(the resulting e)72 487.2 R -.165
(xe)-.165 G .91(cutable\) and an).165 F 3.66(yn)-.165 G .91
(umber of object \214les)410.531 487.2 R .193(and libraries.)72 502.2 R .194
(It basically links the object \214les and libraries with `)5.693 F
(`standalone.o')-.814 E 2.944('a)-.814 G .194(nd supplies an)435.335 502.2 R(y)
-.165 E 1.128(additional libraries that may be required by the interpreter)72
517.2 R 6.628(.I)-.605 G 3.878(ng)348.242 517.2 S 1.128
(eneral, this can be done just as)363.12 517.2 R 1.026
(well by calling the link)72 532.2 R 1.026(er or compiler directly)-.11 F 3.776
(,b)-.715 G(ut)290.275 532.2 Q F2(linksc)3.777 E(heme)-.165 E F0 1.027
(also tak)3.777 F 1.027(es care of additional pro-)-.11 F(cessing that needs t\
o be performed on at least one platform \(currently AIX\).)72 547.2 Q 2.286
-.88(To c)97 565.8 T .526
(reate an instance of Elk including the Xlib, Xt, and Xa).88 F 3.275(we)-.165 G
(xtensions,)377.044 565.8 Q F2(linksc)3.275 E(heme)-.165 E F0 -.11(wo)3.275 G
(uld).11 E(be used as follo)72 579.8 Q(ws \(ag)-.275 E(ain assuming you ha)
-.055 E .33 -.165(ve i)-.22 H(nstalled the softw).165 E(are under `)-.11 E
(`/usr/elk')-.814 E('\):)-.814 E/F3 10/Courier-Bold@0 SF(%)100.346 602.303 Q/F4
10/Courier@0 SF(cd /usr/elk)6 E F3(%)100.346 616.303 Q F4
(lib/linkscheme x11scheme runtime/obj/xlib.o runtime/obj/xt.o \\)6 E(runtime/o\
bj/xaw/*.o \255lXaw \255lXmu \255lXt \255lSM \255lICE \255lX11 \255lXext)
130.346 630.303 Q F0 1.459(The e)97 656.403 R 1.46
(xact form of the libraries depends on your platform and X11 v)-.165 F 1.46
(ersion; for e)-.165 F(xample,)-.165 E 1.813(additional options may be require\
d if X11 is not installed in a standard location at your site.)72 671.403 R F2
(xlib)72 686.403 Q(.o)-.44 E F0 1.332(is the Xlib e)4.082 F(xtension,)-.165 E
F2(xt.o)4.082 E F0 1.332(is the X toolkit intrinsics \(Xt\) e)4.082 F 1.333
(xtension, and the subdirectory)-.165 F F2(xaw)72 701.403 Q F0 .165
(holds the object \214les for all the Athena widgets.)2.915 F .165(The e)5.665
F -.165(xe)-.165 G(cutable).165 E F2(x11sc)2.915 E(heme)-.165 E F0 .164(can no)
2.915 F 2.914(wb)-.275 G 2.914(eu)476.039 701.403 S(sed)489.337 701.403 Q .223
(to run arbitrary X11 applications using the Athena widgets without requiring \
an)72 716.403 R 2.974(yr)-.165 G .224(untime loading)437.468 716.403 R
(of object \214les belonging to the X11 e)72 730.403 Q(xtensions:)-.165 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-9-)278.837 50 S/F1 10/Courier-Bold@0 SF(%)100.346
86 Q/F2 10/Courier@0 SF(x11scheme)6 E F1(>)100.346 100 Q F2
(\(load '../examples/xaw/dialog.scm\))6 E([Autoloading xwidgets.scm])100.346
114 Q([Autoloading xt.scm])100.346 128 Q([Autoloading siteinfo.scm])100.346 142
Q(...)100.346 156 Q F0 .383(In the same w)97 182.1 R(ay)-.11 E(,)-.715 E/F3 11
/Times-Italic@0 SF(linksc)3.133 E(heme)-.165 E F0 .383
(can be used to link the Scheme interpreter with an)3.133 F 3.133(yn)-.165 G
-.275(ew)464.513 182.1 S 3.132(,u)-.44 G(ser)487.731 182.1 Q(-)-.22 E
(supplied e)72 197.1 Q
(xtensions, with parts of an Elk-based application, or with an)-.165 E 2.75(yc)
-.165 G(ombination thereof.)393.992 197.1 Q/F4 11/Times-Bold@0 SF 2.75
(6.1.1. A)72 227.1 R(utomatic Extension Initialization)-.55 E F0 .553
(When linking Elk with e)97 245.7 R .553(xtensions, it is)-.165 F F3(not)3.303
E F0 .553(necessary to add calls to the e)3.303 F .553(xtension initializ-)
-.165 F 1.12(ers to the Scheme interpreter')72 260.7 R(s)-.605 E F3(main\(\))
3.87 E F0 1.12(function and recompile the interpreter; all e)3.87 F 1.12
(xtensions are)-.165 F .146(initialized automatically on startup.)72 275.7 R
1.906 -.88(To a)5.646 H .147
(ccomplish this kind of automatic initialization, Elk scans).88 F .546(its o)72
290.7 R .546(wn symbol table on startup, in)-.275 F -.22(vo)-.44 G .546
(king an).22 F 3.295(y`)-.165 G(`elk_init_')281.924 290.7 Q 3.295('f)-.814 G
.545(unctions and C++ static constructors,)338.173 290.7 R 1.144(in the same w)
72 305.7 R 1.144(ay the symbol table of object \214les is scanned when the)-.11
F 3.895(ya)-.165 G 1.145(re dynamically loaded.)401.203 305.7 R .206
(Extension \214nalizers and C++ static destructors are sa)72 320.7 R -.165(ve)
-.22 G 2.955(df).165 G .205(or calling on e)328.845 320.7 R 2.955
(xit. Automatic)-.165 F -.165(ex)2.955 G(tension).165 E(initialization only w)
72 335.7 Q(orks if)-.11 E 21.15<8374>97 354.3 S(he e)125.058 354.3 Q -.165(xe)
-.165 G(cutable \214le has a symbol table \(i.).165 E
(e. you must not strip it\))1.833 E 21.15<8374>97 372.9 S(he e)125.058 372.9 Q
-.165(xe)-.165 G(cutable \214le can be opened for reading).165 E 21.15<8374>97
391.5 S 1.465(he interpreter can locate its e)125.058 391.5 R -.165(xe)-.165 G
1.465(cutable \214le by scanning the shell').165 F 4.215(sd)-.605 G 1.466
(irectory search)437.48 391.5 R(path.)122 406.5 Q 1.12(The performance o)97
425.1 R -.165(ve)-.165 G 1.12
(rhead caused by the initial scanning of the symbol is small; the pro-).165 F
(gram')72 440.1 Q 3.378(ss)-.605 G .628
(ymbol table can be read or mapped into memory ef)109.599 440.1 R .628
(\214ciently \(it it has not been automati-)-.275 F(cally mapped into the addr\
ess space by the operating system in the \214rst place\).)72 455.1 Q F4 2.75
(6.2. Linking)72 485.1 R(the Scheme Inter)2.75 E(pr)-.11 E(eter with an A)-.198
E(pplication)-.275 E F0 1.446(Elk-based applications that ha)97 503.7 R 1.776
-.165(ve t)-.22 H 1.446(heir o).165 F(wn)-.275 E F3(main\(\))4.196 E F0 1.445
(are link)4.196 F 1.445(ed with the Scheme interpreter)-.11 F .821
(installed as)72 518.7 R F3(module)3.571 E(.o)-.165 E F0 .821(which, unlik)
3.571 F(e)-.11 E F3(standalone)3.571 E(.o)-.165 E F0 3.571(,d)C .821(oes not e)
301.975 518.7 R .822(xport a)-.165 F F3(main\(\))3.572 E F0 3.572(function. No)
3.572 F(special)3.572 E F3(linksc)72 533.7 Q(heme)-.165 E F0 4.075
(script is required to link with)6.825 F F3(module)6.824 E(.o)-.165 E F0 6.824
(;a)C 4.074(pplication writers usually will add)337.378 533.7 R -.814(``)72
548.7 S(/usr/elk/lib/module.o').814 E 3.547('\()-.814 G .797(or whate)184.216
548.7 R -.165(ve)-.275 G 3.547(rt).165 G .798
(he correct path is\) to the list of object \214les in their Mak)243.406 548.7
R(e-)-.11 E 5.535(\214le. T)72 563.7 R 5.535(os)-.88 G 2.785
(implify linking with Elk, a tri)118.248 563.7 R 2.785(vial script)-.275 F F3
(ld\215a)5.535 E(gs)-.11 E F0 2.785(\(which li)5.535 F -.165(ve)-.275 G 5.535
(si).165 G 5.535(n`)413.255 563.7 S(`lib')427.139 563.7 Q 5.535('a)-.814 G
2.785(long with)459.349 563.7 R F3(linksc)72 578.7 Q(heme)-.165 E F0 4.415(\)i)
C 4.415(ss)131.844 578.7 S 1.665(upplied that just echoes an)144.817 578.7 R
4.415(ya)-.165 G 1.665(dditional libraries required by the Scheme inter)282.821
578.7 R(-)-.22 E(preter)72 593.7 Q 5.5(.A)-.605 G(pplication de)113.239 593.7 Q
-.165(ve)-.275 G(lopers may use).165 E F3(ld\215a)2.75 E(gs)-.11 E F0
(in their Mak)2.75 E(e\214les.)-.11 E(As)97 612.3 Q F3(module)3.665 E(.o)-.165
E F0 .915(does not ha)3.665 F 1.245 -.165(ve a)-.22 H F3(main\(\))3.83 E F0
.914(entry point, an application using it must initialize the)3.665 F
(interpreter from within its o)72 626.3 Q(wn)-.275 E F3(main\(\))2.75 E F0 5.5
(.T)C(his is done by calling .)254.424 626.3 Q F3(Elk_Init\(\))5.5 E F0(:)A F2
(void Elk_Init\(int argc, char **argv, int init_flag, char *filename\);)100.346
648.803 Q F3(Elk_Init\(\))97 674.903 Q F0 1.178(is only de\214ned by)3.927 F F3
(module)3.928 E(.o)-.165 E F0 1.178(and is essentially a `)3.928 F(`wrapper')
-.814 E 3.928('a)-.814 G 1.178(round the Scheme)422.213 674.903 R(interpreter')
72 689.903 Q(s)-.605 E F3(main\(\))4.135 E F0(.)A F3(ar)6.885 E(gc)-.407 E F0
(and)4.135 E F3(ar)4.134 E(gv)-.407 E F0 1.384(are the ar)4.134 F 1.384
(guments to be passed to the Scheme interpreter')-.198 F(s)-.605 E F3(main\(\))
72 704.903 Q F0 6.999(.T)C 1.499(hese may or may not be the calling program')
117.796 704.903 R 4.249(so)-.605 G 1.499(riginal ar)340.562 704.903 R 1.5
(guments; ho)-.198 F(we)-.275 E -.165(ve)-.275 G -.44(r,).165 G F3(ar)4.69 E
(gv[0])-.407 E F0 .044(must be that from the calling program in an)72 719.903 R
2.794(yc)-.165 G .044(ase \(because its address is used by Elk to determine)
276.622 719.903 R .466(the program')72 734.903 R 3.216(ss)-.605 G .466
(tack base\).)140.758 734.903 R(If)5.966 E F3(init_\215a)3.216 E(g)-.11 E F0
.466(is nonzero, the interpreter scans its symbol table to in)3.216 F -.22(vo)
-.44 G -.11(ke).22 G EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(0-)288 51 S -.165(ex)72 87 S
1.012(tension initializers as described in 6.1.1.).165 F 1.012
(C++ static constructors, ho)6.512 F(we)-.275 E -.165(ve)-.275 G 1.891 -.44
(r, a).165 H 1.011(re ne).44 F -.165(ve)-.275 G 3.761(ri).165 G -2.09 -.44
(nv o)472.386 87 T -.11(ke).44 G(d).11 E(by)72 102 Q/F1 11/Times-Italic@0 SF
(module)3.11 E(.o)-.165 E F0(\(re)3.11 E -.055(ga)-.165 G .36(rless of).055 F
F1(init_\215a)3.11 E(g)-.11 E F0 .36(\), because the)B 3.111(ya)-.165 G .361
(re already tak)298.393 102 R .361(en care of by the runtime startup)-.11 F
(in this case.)72 117 Q(If)5.5 E F1(\214lename)2.75 E F0
(is nonzero, it is the name of Scheme \214le to be loaded by)2.75 E F1
(Elk_Init\(\))2.75 E F0(.)A/F2 11/Times-Bold@0 SF 2.75(6.2.1. An)72 147 R
(Example `)2.75 E(`main\(\)')-.693 E 2.75('F)-.693 G(unction)217.266 147 Q F0
.225(Figure 1 sho)97 165.6 R .224(ws a realistic \(yet some)-.275 F .224
(what simpli\214ed\) e)-.275 F(xample)-.165 E F1(main\(\))2.974 E F0 .224
(function of an applica-)2.974 F(tion using Elk.)72 180.6 Q(__________________\
____________________________________________________________)75 208.1 Q/F3 10
/Courier@0 SF(char *directory;)72 227.6 Q(int main\(int ac, char **av\) {)72
250 Q(char **eav;)97 264 Q(int eac = 1, c;)97 278 Q(Set_App_Name\(av[0]\);)97
300.4 Q(eav = safe_malloc\(\(ac+2+1\) * sizeof\(char *\)\);)97 314.4 Q
(/* ac + -p xxx + 0 */)391 314.4 Q(eav[0] = av[0];)97 328.4 Q
(while \(\(c = getopt\(ac, av, "gh:o"\)\) != EOF\) switch \(c\) {)97 342.4 Q
(case 'o':)122 356.4 Q/F4 10/Times-Italic@0 SF(pr)147 370.4 Q(ocess option...)
-.45 E F3(case 'g':)122 384.4 Q(eav[eac++] = "-g"; break;)147 398.4 Q
(case 'h':)122 412.4 Q(eav[eac++] = "-h"; eav[eac++] = optarg; break;)147 426.4
Q(case '?':)122 440.4 Q(usage\(\); return 1;)147 454.4 Q(})97 468.4 Q
(if \(\(directory = getenv\("APP_DIR"\)\) == 0\))97 482.4 Q
(directory = DEFAULT_DIR;)122 496.4 Q(eav[eac++] = "-p";)97 510.4 Q
(eav[eac] = safe_malloc\(strlen\(directory\) + 11\);)97 524.4 Q
(sprintf\(eav[eac++], ".:%s/elk/scm", directory\);)97 538.4 Q(eav[eac] = 0;)97
552.4 Q(Elk_Init\(eac, eav, 0, 0\);)97 566.4 Q F4(initialize application')97
588.8 Q 2.5(sm)-.4 G(odules...)196.61 588.8 Q F3(boot_code\(\);)97 611.2 Q F4
(application')97 633.6 Q 2.5(sm)-.4 G(ain loop \(if written in C\))159.1 633.6
Q F3(...)97 647.6 Q/F5 10/Times-Bold@0 SF(Figur)152.97 665.4 Q 2.5(e1)-.18 G(:)
188.62 665.4 Q/F6 10/Times-Roman@0 SF(Example)5 E F4(main\(\))2.5 E F6
(of an Elk-based application \(simpli\214ed\))2.5 E F0(_______________________\
_______________________________________________________)75 684 Q 2.011
(The code sho)97 717.6 R 2.011(wn in the e)-.275 F 2.011
(xample must construct a ne)-.165 F 4.762(wa)-.275 G -.198(rg)359.575 717.6 S
2.012(ument v).198 F 2.012(ector to be passed to)-.165 F F1(Elk_Init\(\))72
732.6 Q F0 3.079(,b)C .328
(ecause the application has command line options of its o)126.097 732.6 R .328
(wn \(just)-.275 F F1<ad6f>3.078 E F0 .328(in the e)3.078 F(xample\).)-.165 E
EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(1-)288 51 S -1.1 -.88(Tw o)72
87 T .223(Elk-options \()3.853 F/F1 11/Times-Italic@0 SF<ad67>A F0(and)2.973 E
F1<ad68>2.973 E F0 2.973(\)a)C .223(re handed to)211.319 87 R F1(Elk_Init\(\))
2.973 E F0 .224(if present, so that a mixture of Elk-speci\214c)2.973 F .384
(and application-speci\214c options can be gi)72 102 R -.165(ve)-.275 G 3.134
(n\().165 G .384(see the manual page for the Scheme interpreter for)278.552 102
R .873(the meaning of Elk')72 117 R 3.623(so)-.605 G 3.623(ptions\). \()175.097
117 R F1(safe_malloc\(\))A F0 .874(is assumed to be a wrapper around)3.623 F F1
(malloc\(\))3.624 E F0(with)3.624 E .497(proper error)72 132 R(-checking.\))
-.22 E F1(Set_App_Name\(\))5.997 E F0 .497(is pro)3.247 F .496
(vided by Elk and is called with a name to be dis-)-.165 F
(played in front of f)72 147 Q(atal error messages by the interpreter)-.11 E(.)
-.605 E .604(When all the options ha)97 165.6 R .934 -.165(ve b)-.22 H .604
(een parsed, an additional option).165 F F1<ad70>3.354 E F0 .605
(is synthesized to pro)3.354 F .605(vide a)-.165 F .262(minimal initial)72
180.6 R F1(load-path)3.012 E F0 .262(for Elk.)3.012 F .261
(This load-path consists of the current directory and a subdirec-)5.762 F .541
(tory of the directory under which the application e)72 195.6 R .542
(xpects its \214les that are needed during runtime.)-.165 F .746(An en)72 210.6
R .746(vironment v)-.44 F .746(ariable can be used to set this directory)-.275
F 6.246(.D)-.715 G .746(e\214ning a load-path lik)345.649 210.6 R 3.495(et)-.11
G .745(his has the)456.068 210.6 R .273
(bene\214t that a minimal, self-contained Elk runtime en)72 225.6 R .273
(vironment \(e.)-.44 F .274(g. a tople)1.833 F -.165(ve)-.275 G 3.024(la).165 G
.274(nd the deb)429.136 225.6 R(ugger\))-.22 E .764
(can be shipped with binary distrib)72 240.6 R .763
(utions of the application so that users are not required to ha)-.22 F -.165
(ve)-.22 G(Elk installed at their sites.)72 255.6 Q 1.742
(When Elk has been initialized by calling)97 274.2 R F1(Elk_Init\(\))4.492 E F0
4.492(,t)C 1.743(he application may initialize all its)343.432 274.2 R .217
(other modules and \214nally load an initial Scheme \214le that `)72 289.2 R
(`boots')-.814 E 2.966('t)-.814 G .216(he Scheme part of the applica-)368.819
289.2 R .114(tion \(which may in)72 304.2 R -.22(vo)-.44 G(lv).22 E 2.864(el)
-.165 G .114(oading further Scheme \214les\).)185.294 304.2 R .114
(This initial Scheme \214le may be quite sim-)5.614 F .591
(ple and just de\214ne a fe)72 319.2 R 3.341(wf)-.275 G .59
(unctions used later)188.912 319.2 R 3.34(,o)-.44 G 3.34(ri)283.731 319.2 S
3.34(tm)293.792 319.2 S .59(ain contain the application')308.748 319.2 R 3.34
(se)-.605 G .59(ntire `)442.481 319.2 R(`dri)-.814 E(ving)-.275 E(logic')72
334.2 Q 3.649('o)-.814 G 3.649(ri)109.661 334.2 S(nteracti)120.031 334.2 Q
1.229 -.165(ve u)-.275 H(ser).165 E(-interf)-.22 E 3.649(ace. This)-.11 F .899
(is accomplished by a function)3.649 F F1(boot_code\(\))3.649 E F0 .899
(which may)3.649 F(as simple as this:)72 348.2 Q/F2 10/Courier@0 SF
(void boot_code\(void\) {)100.346 370.703 Q
(char *fn = safe_malloc\(strlen\(directory\) + 30\);)127.846 384.703 Q
(sprintf\(fn, "%s/scm/app.scm", directory\);)127.846 407.103 Q
(Set_Error_Tag\("initial load"\);)127.846 421.103 Q(Load_File\(fn\);)127.846
435.103 Q(free\(fn\);)127.846 449.103 Q(})100.346 463.103 Q F1(Load_F)97
489.203 Q(ile\(\))-.495 E F0 .175(is de\214ned by Elk and loads a Scheme \214l\
e whose name is supplied as a C string.)2.925 F F1(Set_Err)72 504.203 Q(or_T)
-.495 E -.11(ag)-1.012 G(\(\)).11 E F0 .78(may be used by e)3.53 F .78
(xtensions and applications to de\214ne the symbol that is passed)-.165 F .97
(as the \214rst ar)72 519.203 R .97(gument to the standard error handler when \
a Scheme error is signaled \(see section)-.198 F(12.5\).)72 534.203 Q/F3 11
/Times-Bold@0 SF 2.75(6.3. Who)72 564.203 R(is in Contr)2.75 E(ol?)-.198 E F0
.742(When an application')97 582.803 R 3.493(so)-.605 G .743
(bject \214les are loaded into the interpreter dynamically or are link)205.851
582.803 R(ed)-.11 E 1.024(with the interpreter using)72 597.803 R F1(linksc)
3.774 E(heme)-.165 E F0 3.774(,c)C 1.024
(ontrol initially rests in the interpreter)249.864 597.803 R 6.523(.I)-.605 G
3.773(nc)429.552 597.803 S 1.023(ontrast, when)443.709 597.803 R .155
(the application is link)72 612.803 R .155(ed using)-.11 F F1(module)2.905 E
(.o)-.165 E F0(and)2.905 E F1(Elk_Init\(\))2.905 E F0 .155(as sho)2.905 F .155
(wn in the pre)-.275 F .156(vious section, it de\214nes)-.275 F(its o)72
627.803 Q(wn)-.275 E F1(main\(\))2.75 E F0
(function, and hence the application is `)2.75 E(`in control')-.814 E 2.75('o)
-.814 G 2.75(ns)369.495 627.803 S(tartup.)382.024 627.803 Q .378
(From a technical point of vie)97 646.403 R 1.808 -.715(w, i)-.275 H 3.128(td)
.715 G .377(oes not really mak)253.866 646.403 R 3.127(ead)-.11 G(if)357.369
646.403 Q .377(ference whether control rests in)-.275 F .31
(the interpreter or in the application initially)72 661.403 R 5.81(.I)-.715 G
3.061(nt)275.404 661.403 S .311(he \214rst case, the main `)287.023 661.403 R
(`dri)-.814 E .311(ving logic')-.275 F 3.061('\()-.814 G .311(or `)463.264
661.403 R(`main)-.814 E(loop')72 676.403 Q .919
('\) of the application can simply be wrapped in a Scheme primiti)-.814 F 1.249
-.165(ve w)-.275 H .919(hich is then called by).165 F .933(the Scheme tople)72
691.403 R -.165(ve)-.275 G 3.683(lo).165 G 3.683(ns)171.819 691.403 S .934
(tartup to pass control back to the application, if this is desired.)185.281
691.403 R .934(In an)6.434 F(y)-.165 E .998(case, control usually changes freq\
uently between the Scheme interpreter and the actual applica-)72 706.403 R
1.021(tion an)72 721.403 R(yw)-.165 E 1.021(ay\212the Scheme interpreter in)
-.11 F -.22(vo)-.44 G -.11(ke).22 G 3.772(sc).11 G 1.022
(allback functions or Scheme primiti)285.325 721.403 R -.165(ve)-.275 G 3.772
(sp).165 G(ro)470.56 721.403 Q(vided)-.165 E EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(2-)288 51 S .259
(by the application, which may in turn in)72 87 R -.22(vo)-.44 G .478 -.11
(ke S).22 H .258(cheme procedures or load Scheme \214les, and so on.).11 F
1.251(The Tcl-lik)97 105.6 R 4.002(es)-.11 G 1.252
(tyle of use, where control rests in the C-part of the application most of the)
161.103 105.6 R .4(time, and where this C code `)72 120.6 R .399(`calls out')
-.814 F 3.149('t)-.814 G 3.149(ot)256.564 120.6 S .399
(he interpreter occasionally by passing it an e)268.271 120.6 R(xtension)-.165
E .286(language e)72 135.6 R .286
(xpression or a small script, is not typical for Elk.)-.165 F .287
(It is supported, though; Elk pro)5.787 F(vides)-.165 E 3.929(as)72 150.6 S
1.179(imple e)85.092 150.6 R 1.179(xtension to pass a Scheme e)-.165 F 1.179
(xpression to the interpreter as a C string and recei)-.165 F 1.508 -.165(ve t)
-.275 H(he).165 E 1.168(result in the same form, similar to what)72 165.6 R/F1
11/Times-Italic@0 SF(Tcl_Eval\(\))3.918 E F0 1.169
(does in Tcl \(see section 12.2\).)3.918 F 1.169(In a typical)6.669 F 1.491
(Elk-based application the e)72 180.6 R 1.49(xtension language serv)-.165 F
1.49(es as the `)-.165 F(`backbone')-.814 E 4.24('o)-.814 G 4.24(ft)408.791
180.6 S 1.49(he application: the)419.752 180.6 R(application')72 195.6 Q 3.051
(sd)-.605 G(ri)136.772 195.6 Q .302(ving logic or main loop is written entirel\
y in Scheme, and this Scheme code calls)-.275 F .802(out to the application')72
210.6 R 3.552(sCl)-.605 G(ayer)192.435 210.6 Q 3.552(,u)-.44 G .802
(sing the data types, primiti)222.728 210.6 R -.165(ve)-.275 G .802
(s, and other callbacks e).165 F .802(xported to)-.165 F .092(the e)72 225.6 R
.093(xtension language by the application.)-.165 F -.44(Wi)5.593 G .093
(th the help of the X11 e).44 F .093(xtensions, the entire \(graph-)-.165 F
.697(ical\) user interf)72 240.6 R .697(ace of an application can be written i\
n Scheme easily; control can then passed to)-.11 F .171(the application')72
255.6 R 2.921(sC)-.605 G .172(/C++ layer whene)154.842 255.6 R -.165(ve)-.275 G
2.922(ra).165 G 2.922(nX)255.601 255.6 S 2.922(tc)271.965 255.6 S .172
(allback is triggered.)282.829 255.6 R .172(In this case, the application')
5.672 F(s)-.605 E -.814(``)72 270.6 S 1.094(main loop').814 F 3.844('c)-.814 G
1.094(onsists of a call to the Scheme primiti)139.154 270.6 R 1.424 -.165(ve c)
-.275 H 1.094(orresponding to the X toolkit function).165 F F1
(XtAppMainLoop\(\))72 285.6 Q F0(\(the main e)2.75 E -.165(ve)-.275 G
(nt dispatch loop\).).165 E/F2 11/Times-Bold@0 SF 2.75(7. Notes)72 315.6 R
-.275(fo)2.75 G 2.75(rW).275 G(riting C/C++ Code Using Elk)142.29 315.6 Q F0
.704(This chapter describes general con)97 334.2 R -.165(ve)-.44 G .704
(ntions and usage notes for Elk-based C/C++ code and).165 F(introduces a fe)72
349.2 Q 2.75(wu)-.275 G(seful f)152.674 349.2 Q
(acilities that are not directly related to Scheme.)-.11 E F2 2.75(7.1. Elk)72
379.2 R(Include Files)2.75 E F0(Ev)97 397.8 Q .855
(ery C or C++ \214le using functions, macros, or v)-.165 F .854
(ariables de\214ned by Elk must include the)-.275 F(\214le)72 411.8 Q F1(sc)
2.75 E(heme)-.165 E(.h)-.165 E F0(:)A/F3 10/Courier@0 SF(#include <scheme.h>)
100.346 434.303 Q/F4 10/Times-Roman@0 SF(or:)250.346 434.303 Q F3
(#include "scheme.h")297.456 434.303 Q F0 2.231
(This include \214le resides in a subdirectory)97 460.403 R F1(include)4.981 E
F0 2.232(of the directory where Elk has been)4.981 F 1.372
(installed on your system.)72 475.403 R -1.21(Yo)6.872 G 4.122(um)1.21 G 1.372
(ust insert a suitable \255I option into your Mak)223.401 475.403 R 1.372
(e\214les to add this)-.11 F .15(directory to the C compiler')72 490.403 R 2.9
(ss)-.605 G .15(earch path.)206.268 490.403 R -.814(``)5.65 G(scheme.h').814 E
2.9('i)-.814 G .15(ncludes se)320.546 490.403 R -.165(ve)-.275 G .15
(ral other Elk-speci\214c include).165 F 3.063(\214les from the same directory\
 and, in addition, the standard C include \214les)72 505.403 R F1(<stdio.h>)
5.812 E F0(and)5.812 E F1(<signal.h>)72 520.403 Q F0(.)A F2 2.75(7.2. Standard)
72 550.403 R 2.75(Ca)2.75 G(nd Function Pr)156.953 550.403 Q(ototypes)-.198 E
F0 .866(All the e)97 569.003 R .866(xamples sho)-.165 F .866
(wn in this manual are written in ANSI/ISO C.)-.275 F .866
(This assumes that the)6.366 F .9(Elk include \214les ha)72 584.003 R 1.229
-.165(ve b)-.22 H .899(een installed with function prototypes enabled.).165 F
.899(Whether or not function)6.399 F .809(prototypes are enabled is controlled\
 by a de\214nition in the platform- and compiler)72 599.003 R .81
(-speci\214c `)-.22 F(`con-)-.814 E(\214g/system')72 614.003 Q 4.381<278c>-.814
G 1.631(le that has been selected for con\214guring Elk.)134.241 614.003 R(Ho)
7.131 E(we)-.275 E -.165(ve)-.275 G 2.511 -.44(r, i).165 H 4.381(ft).44 G 1.631
(he include \214les ha)409.37 614.003 R -.165(ve)-.22 G .485(function prototyp\
es disabled, prototypes are enable automatically if you are compiling your cod\
e)72 629.003 R 1.196(with a C compiler that de\214nes the symbol `)72 644.003 R
-1.834(`_ _STDC_ _')-.814 F 3.945('a)-.814 G 3.945(sn)341.752 644.003 S 1.195
(on-zero, or with a C++ compiler)355.476 644.003 R(that de\214nes `)72 659.003
Q -1.834(`_ _cplusplus')-.814 F(')-.814 E/F5 9/Times-Roman@0 SF(1)-3.6 I F0(.)
3.6 I .36 LW 76.5 681.2 72 681.2 DL 81 681.2 76.5 681.2 DL 85.5 681.2 81 681.2
DL 90 681.2 85.5 681.2 DL 94.5 681.2 90 681.2 DL 99 681.2 94.5 681.2 DL 103.5
681.2 99 681.2 DL 108 681.2 103.5 681.2 DL 112.5 681.2 108 681.2 DL 117 681.2
112.5 681.2 DL 121.5 681.2 117 681.2 DL 126 681.2 121.5 681.2 DL 130.5 681.2
126 681.2 DL 135 681.2 130.5 681.2 DL 139.5 681.2 135 681.2 DL 144 681.2 139.5
681.2 DL/F6 7/Times-Roman@0 SF(1)82 691.2 Q F5 .654
(Although the public include \214les pro)4.5 2.8 N .654
(vided by Elk can be used by C++ code, Elk itself cannot be com-)-.135 F
(piled with a C++ compiler)72 705 Q 4.5(.T)-.495 G
(he interpreter has been written in C to maximize portability)178.902 705 Q(.)
-.585 E EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(3-)288 51 S 2.125
(Elk include \214les that ha)97 87 R 2.455 -.165(ve b)-.22 H 2.125
(een installed with function prototypes disabled can also be).165 F -.814(``)72
102 S(upgraded').814 E 5.017('b)-.814 G 5.017(yd)136.472 102 S 2.267
(e\214ning the symbol `)152.489 102 R(`W)-.814 E(ANT_PR)-1.32 E -2.068 -.44
(OT OT)-.44 H(YPES').44 E 5.017('b)-.814 G 2.267(efore including `)372.801 102
R(`scheme.h')-.814 E('.)-.814 E(Similarly)72 117 Q 4.683(,i)-.715 G 1.932(nclu\
de \214les installed without function prototypes can be used with a non-ANSI C)
122.729 117 R(compiler by de\214ning the symbol `)72 132 Q(`NO_PR)-.814 E
-2.068 -.44(OT OT)-.44 H(YPES').44 E 2.75('b)-.814 G(efore including `)328.564
132 Q(`scheme.h')-.814 E('.)-.814 E/F1 11/Times-Bold@0 SF 2.75(7.3. Exter)72
162 R(nal Symbols De\214ned by Elk)-.165 E F0 .583(As e)97 180.6 R .584
(xtensions or applications are link)-.165 F .584(ed with Elk \(re)-.11 F -.055
(ga)-.165 G .584(rless of whether dynamic loading or).055 F 1.461
(static linking is used\), the)72 195.6 R 4.211(yc)-.165 G 1.461
(an in general reference all e)205.024 195.6 R 1.46(xternal symbols e)-.165 F
1.46(xported by Elk.)-.165 F(Of)6.96 E .328
(these, only the symbols described in this manual may be used safely)72 210.6 R
5.828(.U)-.715 G .328(se of other \(pri)391.434 210.6 R -.275(va)-.275 G .328
(te\) sym-).275 F 1.945(bols results in non-portable code, as the symbols may \
change their meaning or may e)72 225.6 R -.165(ve)-.275 G 4.694(nb).165 G(e)
499.116 225.6 Q(remo)72 240.6 Q -.165(ve)-.165 G 5.22(df).165 G 2.47
(rom future releases of Elk.)119.042 240.6 R 2.47
(The same restriction applies to the macros and types)7.97 F
(de\214ned by the include \214les of Elk.)72 255.6 Q .133
(In addition to the symbols de\214ned by the Scheme interpreter k)97 274.2 R
.133(ernel, those e)-.11 F .132(xported by other)-.165 F 1.061(Scheme e)72
289.2 R 1.061(xtensions that are present in the same e)-.165 F -.165(xe)-.165 G
1.062(cutable \(or ha).165 F 1.392 -.165(ve b)-.22 H 1.062
(een loaded earlier\) can be).165 F .261(referenced from within C/C++ code.)72
304.2 R .261(These e)5.761 F .26
(xtensions are not subject of this manual; you should)-.165 F
(refer to the rele)72 319.2 Q -.275(va)-.275 G
(nt documentation and the public include \214les that are part of the e).275 E
(xtensions.)-.165 E .809(If Elk is link)97 337.8 R .809
(ed with an application that has its o)-.11 F(wn)-.275 E/F2 11/Times-Italic@0
SF(main\(\))3.559 E F0 .81(function, none of the functions)3.559 F -.165(ex)72
352.8 S(ported by Elk must be used before the initial call to).165 E F2
(Elk_Init\(\))2.75 E F0(\(e)2.75 E(xcept)-.165 E F2(Set_App_Name\(\))2.75 E F0
(\).)A F1 2.75(7.4. Calling)72 382.8 R(Scheme Primiti)2.75 E -.11(ve)-.11 G(s)
.11 E F0 4.266(Al)97 401.4 S(ar)112.266 401.4 Q 1.515
(ge subset of the symbols e)-.198 F 1.515
(xported by the Scheme interpreter is the set of functions)-.165 F .736
(implementing the Scheme primiti)72 416.4 R -.165(ve)-.275 G 3.487(s. These)
.165 F .737(may be used safely by e)3.487 F .737(xtensions and applications.)
-.165 F 1.529(There e)72 431.4 R 1.528
(xists one C function for each Scheme primiti)-.165 F -.165(ve)-.275 G 7.028
(.I).165 G 1.528(ts name is that of the corresponding)337.796 431.4 R(primiti)
72 446.4 Q .33 -.165(ve w)-.275 H(ith the follo).165 E(wing con)-.275 E -.165
(ve)-.44 G(rsions applied:).165 E 21.15<8364>97 465 S .066
(ashes are replaced by underscores, and the initial letters of the resulting w)
127.5 465 R .067(ord compo-)-.11 F(nents are capitalized;)122 480 Q 21.15<8374>
97 498.6 S(he pre\214x `)125.058 498.6 Q(`P_')-.814 E 2.75('i)-.814 G 2.75(sp)
197.053 498.6 S(repended;)209.582 498.6 Q 21.15<8360>97 517.2 S(`)124.849 517.2
Q/F3 11/Symbol SF(-)A F0(>')A 2.75('i)-.814 G 2.75(sr)153.075 517.2 S
(eplaced by `)163.767 517.2 Q(`_T)-.814 E(o_')-.88 E 2.75('\()-.814 G(as in)
255.639 517.2 Q F2(vector)2.75 E F3(-)A F2(>list)A F0(\);)A 21.15<8361>97 535.8
S .285(trailing e)129.919 535.8 R .285(xclamation mark is deleted, e)-.165 F
.284(xcept for)-.165 F F2(append!)3.034 E F0(and)3.034 E F2 -2.101 -.407(re v)
3.034 H(er).407 E(se!)-.11 E F0 3.034(,w)C .284(here `)449.453 535.8 R(`_Set')
-.814 E(')-.814 E(is appended;)122 550.8 Q 21.15<8361>97 569.4 S .448
(trailing question mark is replaced by the letter `p' \(e)130.082 569.4 R .448
(xcept for)-.165 F F2 .449(eq?, eqv?, equal?)3.199 F F0(and)3.199 E
(the string and character comparison primiti)122 584.4 Q -.165(ve)-.275 G
(s, where it is deleted\);).165 E(The names of a fe)72 603 Q 2.75(wf)-.275 G
(unctions are deri)164.884 603 Q -.165(ve)-.275 G 2.75(dd).165 G(if)261.893 603
Q(ferently as sho)-.275 E(wn by this table:)-.275 E EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(4-)288 51 S .44 LW 312.545
76.75 97 76.75 DL(Scheme Primiti)102.5 89 Q 44.456 -.165(ve C)-.275 H(Function)
2.915 E 312.545 93.75 97 93.75 DL 52.443(<P)138.442 106 S(_Generic_Less\(\))
203.205 106 Q 52.443(>P)138.442 121 S(_Generic_Greater\(\))203.205 121 Q 52.443
(=P)138.442 136 S(_Generic_Equal\(\))203.205 136 Q 46.591
(<= P_Generic_Eq_Less\(\))135.34 151 R 46.591(>= P_Generic_Eq_Greater\(\))
135.34 166 R 46.943(1+ P_Inc\(\))135.692 181 R(1)116.211 196 Q/F1 11/Symbol SF
(-)A F0(and)2.75 E F1(-)2.75 E F0 27.462(1+ P_Dec\(\))B 52.443(+P)138.442 211 S
(_Generic_Plus\(\))203.205 211 Q F1(-)138.525 226 Q F0(P_Generic_Minus\(\))
197.089 226 Q 52.795(*P)138.794 241 S(_Generic_Multiply\(\))203.205 241 Q
54.016(/P)140.015 256 S(_Generic_Di)203.205 256 Q(vide\(\))-.275 E 44.545
(let* P_Letseq\(\))133.294 271 R 312.545 275.75 97 275.75 DL 312.545 76.75
312.545 275.75 DL 97 76.75 97 275.75 DL 2.798
(According to these rules, the primiti)97 295.6 R -.165(ve)-.275 G/F2 11
/Times-Italic@0 SF -.22(ex)5.712 G(act).22 E F1(-)A F2(>ine)A(xact)-.22 E F0
2.797(can be used from within C as)5.547 F F2(P_Exact_T)72 310.6 Q(o_Ine)-1.012
E(xact\(\))-.22 E F0 6.336(,t)C 3.586(he predicate)182.495 310.6 R F2(inte)
6.337 E -.11(ge)-.44 G(r?).11 E F0 3.587(is a)6.337 F -.275(va)-.22 G 3.587
(ilable as).275 F F2(P_Inte)6.337 E -.11(ge)-.44 G(rp\(\)).11 E F0 6.337(,e)C
6.337(tc. Authors)433.279 310.6 R(of)6.337 E 1.362(reusable Scheme e)72 325.6 R
1.362(xtensions are encouraged to follo)-.165 F 4.112(wt)-.275 G 1.362
(hese \(or similar\) naming con)322.731 325.6 R -.165(ve)-.44 G 1.361
(ntions in).165 F(their code.)72 340.6 Q 2.103
(All the functions implementing Scheme primiti)97 359.2 R -.165(ve)-.275 G
4.853(s\().165 G 2.103(as well as special forms, which are)338.339 359.2 R
1.957(treated as primiti)72 374.2 R -.165(ve)-.275 G 4.707(si).165 G 4.707(nE)
172.449 374.2 S 1.957(lk\) recei)189.377 374.2 R 2.287 -.165(ve S)-.275 H 1.957
(cheme objects or arrays thereof as their ar).165 F 1.957(guments and)-.198 F
.448(return Scheme objects as their v)72 389.2 R 3.199(alues. The)-.275 F .449
(underlying C type will be described in the ne)3.199 F .449(xt chap-)-.165 F
(ter)72 404.2 Q 6.432(.F)-.605 G .932
(or the semantics of the non-standard Scheme primiti)98.133 404.2 R -.165(ve)
-.275 G 3.682(sd).165 G .932(e\214ned by Elk refer to the Refer)358.116 404.2 R
(-)-.22 E(ence Manual for the interpreter)72 419.2 Q(.)-.605 E/F3 11
/Times-Bold@0 SF 2.75(7.5. P)72 449.2 R(ortable alloca\(\))-.22 E F0 .309
(Elk pro)97 467.8 R .31(vides a portable v)-.165 F .31(ariant of)-.275 F F2
(alloca\(\))3.06 E F0 .31(as a set of macros that can be used by e)3.06 F
(xtensions)-.165 E .681(and applications.)72 482.8 R F2(alloca\(\))6.18 E F0
3.43(,w)C .68(hich is supported by most modern UNIX systems and C compilers,)
202.356 482.8 R 1.952(allocates memory in the caller')72 497.8 R 4.703(ss)-.605
G 1.953(tack frame; the memory is automatically released when the)228.71 497.8
R 1.575(function returns.)72 512.8 R 1.575
(Elk simulates this functionality on the \(rare\) platforms where)7.075 F F2
(alloca\(\))4.324 E F0 1.574(is not)4.324 F -.22(av)72 527.8 S(ailable.)-.055 E
2.804 -.88(To a)97 546.4 T 1.044(llocate memory).88 F 3.794(,t)-.715 G 1.044
(he macro)195.689 546.4 R F2(Alloca\(\))3.794 E F0 1.044(is called with a v)
3.794 F 1.045(ariable to which the ne)-.275 F 1.045(wly allo-)-.275 F .879
(cated memory is assigned, the type of that v)72 561.4 R .878
(ariable, and the number of bytes that are requested.)-.275 F .102(The macro)72
576.4 R F2(Alloca_End)2.852 E F0 .103(must be called \(without an ar)2.852 F
.103(gument list\) before returning from a function)-.198 F 1.853
(or block that uses)72 591.4 R F2(Alloca\(\))4.602 E F0 4.602(;t)C 1.852
(his macro is empty on those platforms that support the ordinary)206.223 591.4
R F2(alloca\(\))72 606.4 Q F0 6.062(.F)C(inally)121.754 606.4 Q 3.312(,ac)-.715
G .562(all to the macro)165.239 606.4 R F2(Alloca_Be)3.312 E(gin)-.44 E F0 .563
(must be placed in the function')3.312 F 3.313(sd)-.605 G(eclarations.)453.598
606.4 Q F2(Alloca\(\))72 621.4 Q F0 1.637(usually is more ef)4.387 F 1.637
(\214cient than)-.275 F F2(malloc\(\))4.387 E F0(and)4.387 E F2(fr)4.387 E
(ee\(\))-.407 E F0 4.387(,a)C 1.636(nd the memory need not be freed)348.775
621.4 R(when the function is left prematurely because of an interrupt or by ca\
lling a continuation.)72 636.4 Q .206(As an e)72 655 R .206
(xample, here is the sk)-.165 F .207
(eleton of a function that is called with a \214lename pre\214x and a suf)-.11
F(\214x,)-.275 E
(concatenates them \(separated by a period\), and opens the resulting \214le:)
72 669 Q EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(5-)288 51 S/F1 10/Courier@0
SF(int some_function\(char *prefix, char *suffix\) {)100.346 86 Q(char *name;)
124.346 100 Q(int len, fd;)124.346 114 Q(Alloca_Begin;)124.346 128 Q
(len = strlen\(prefix\) + 1 + strlen\(suffix\) + 1;)124.346 150.4 Q
(Alloca\(name, char*, len\);)124.346 164.4 Q
(sprintf\(name, "%s.%s", prefix, suffix\);)124.346 178.4 Q
(fd = open\(name, ...\);)124.346 192.4 Q(...)124.346 206.4 Q(Alloca_End;)
124.346 220.4 Q(})100.346 234.4 Q/F2 11/Times-Bold@0 SF 2.75(7.6. Other)72
271.9 R(Useful Macr)2.75 E(os and Functions)-.198 E F0 .159
(The preprocessor symbols ELK_MAJOR and ELK_MINOR e)97 290.5 R .159
(xpand to the major and minor)-.165 F -.165(ve)72 305.5 S
(rsion number of the current release of Elk.).165 E(The)5.5 E 2.75(yd)-.165 G
(id not e)304.749 305.5 Q(xist in v)-.165 E(ersions older than Elk 3.0.)-.165 E
/F3 11/Times-Italic@0 SF(inde)97 324.1 Q(x\(\))-.22 E F0(,)A F3(bcopy\(\))3.396
E F0(,)A F3(bcmp\(\))3.396 E F0 3.396(,a)C(nd)216 324.1 Q F3(bzer)3.396 E
(o\(\))-.495 E F0 .647(are de\214ned as suitable macros on systems that do not)
3.396 F(ha)72 339.1 Q .367 -.165(ve t)-.22 H .037(hem in their C library; the)
.165 F 2.787(ym)-.165 G .037(ay be used by source \214les that include `)
229.669 339.1 R(`scheme.h')-.814 E .036(', re)-.814 F -.055(ga)-.165 G(rdless)
.055 E(of the actual platform.)72 354.1 Q(Code link)72 371.7 Q
(ed with Elk may use the tw)-.11 E 2.75(of)-.11 G(unctions)246.548 371.7 Q F1
(char *Safe_Malloc\(unsigned size\);)100.346 394.203 Q
(char *Safe_Realloc\(char *old_pointer, unsigned size\);)100.346 408.203 Q F0
.71(as alternati)72 430.703 R -.165(ve)-.275 G 3.46(st).165 G(o)141.411 430.703
Q F3(malloc\(\))3.46 E F0(and)3.46 E F3 -.407(re)3.46 G(alloc\(\)).407 E F0
6.21(.I)C 3.46(ft)261.148 430.703 S .711
(he request for memory cannot be satis\214ed, the stan-)271.329 430.703 R
(dard Elk error handler is called with a suitable error message.)72 445.703 Q
F2 2.75(8. The)72 475.703 R(Anatomy of Scheme Objects)2.75 E F0 .416
(All Scheme objects, re)97 494.303 R -.055(ga)-.165 G .416
(rless of their Scheme type, are represented as instances of the type).055 F F3
(Object)72 509.303 Q F0 .302(in C.)3.052 F F3(Object)5.802 E F0 .302
(is implemented as a small C)3.052 F F3(struct)3.052 E F0 .302(in ne)3.052 F
.303(wer Elk releases and w)-.275 F .303(as an inte)-.11 F(gral)-.165 E 1.873
(type earlier)72 524.303 R 7.373(.H)-.605 G -.275(ow)141.119 524.303 S -2.365
-.275(ev e).275 H 2.753 -.44(r, c).275 H 1.873
(ode using Elk should not assume a speci\214c representation, as it may).44 F
(change ag)72 539.303 Q(ain in future re)-.055 E 2.75(visions. An)-.275 F F3
(Object)2.75 E F0(consists of three components:)2.75 E 21.15<8374>97 557.903 S
1.272(he type of the corresponding Scheme object as a small inte)125.058
557.903 R 1.273(ger \(the `)-.165 F 1.273(`type \214eld')-.814 F 4.023('o)-.814
G(r)500.337 557.903 Q -.814(``)122 572.903 S(tag \214eld').814 E('\),)-.814 E
21.15<8374>97 591.503 S 1.311(he contents of the object, either directly \(for\
 small objects\) or as a pointer into the)125.058 591.503 R
(Scheme heap \(the `)122 606.503 Q(`pointer \214eld')-.814 E('\),)-.814 E 21.15
<8361>97 625.103 S -.814(``)130.259 625.103 S .625(const bit').814 F 3.375('w)
-.814 G .626
(hich, if set, indicates that the object is read-only and cannot be modi-)
192.812 625.103 R(\214ed by destructi)122 640.103 Q .33 -.165(ve S)-.275 H
(cheme primiti).165 E -.165(ve)-.275 G(s.).165 E .928(Elk de\214nes a fe)97
658.703 R 3.678(wm)-.275 G .928(acros to retrie)187.81 658.703 R 1.258 -.165
(ve a)-.275 H .927(nd modify the \214elds of an).165 F F3(Object)3.677 E F0
.927(independent of its)3.677 F(representation:)72 672.703 Q F1 54
(TYPE\(obj\) ISCONST\(obj\))100.346 695.206 R(SET\(obj,t,ptr\))328.346 695.206
Q 36(POINTER\(obj\) SETCONST\(obj\))100.346 709.206 R EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(6-)288 51 S/F1 11
/Times-Italic@0 SF(TYPE\(\))97 87 Q F0 .615
(returns the contents of the type \214eld of an)3.365 F F1(Object)3.365 E F0(;)
A F1(POINTER\(\))3.365 E F0 .616(returns the contents)3.366 F .436
(of the pointer \214eld as an)72 102 R F1 .436(unsigned long)3.186 F F0(\(dif)
3.186 E .436(ferent macros are pro)-.275 F .435(vided for types which ha)-.165
F .765 -.165(ve t)-.22 H(heir).165 E -.275(va)72 117 S .837
(lues stored directly in the).275 F F1(Object)3.588 E F0 .838
(rather than in the heap\);)3.588 F F1(ISCONST\(\))3.588 E F0 .838
(returns the v)3.588 F .838(alue of the)-.275 F 1.545(const bit; and)72 132 R
F1(SETCONST\(\))4.294 E F0 1.544
(sets the const bit to 1 \(it cannot be cleared once it has been set\).)4.294 F
F1(ISCONST\(\))72 147 Q F0(and)3.343 E F1(SETCONST\(\))3.343 E F0 .593
(may only be applied to)3.343 F F1(Objects)3.343 E F0 .593(that ha)3.343 F .923
-.165(ve t)-.22 H .593(heir v).165 F .593(alue stored on the)-.275 F 1.222
(heap \(such as v)72 162 R 1.222
(ectors, strings, etc.\); all other types of Scheme objects are)-.165 F F1
1.221(ipso facto)3.971 F F0(read-only)3.971 E(.)-.715 E(Another macro,)72 177 Q
F1(SET\(\))2.75 E F0 2.75(,c)C
(an be used to set both the type and pointer \214eld of a ne)179.833 177 Q 2.75
(wo)-.275 G(bject.)436.188 177 Q -1.1 -.88(Tw o)97 195.6 T .602
(objects can be compared by means of the macro)4.232 F F1(EQ\(\))3.352 E F0
3.353(,w)C .603(hich is also used as the basis)375.114 195.6 R
(for the Scheme predicate)72 209.6 Q F1(eq?)2.75 E F0(:)A/F2 10/Courier@0 SF
(EQ\(obj1,obj2\))100.346 232.103 Q F1(EQ\(\))72 254.603 Q F0 -.165(ex)3.733 G
.983(pands to a non-zero v).165 F .982
(alue if the type \214elds and the pointer \214elds of the tw)-.275 F 3.732(oo)
-.11 G .982(bjects are)461.174 254.603 R 1.035(identical, else zero \(re)72
269.603 R -.055(ga)-.165 G 1.035
(rdless of whether the pointer \214eld really holds a pointer or the object')
.055 F(s)-.605 E .609(actual v)72 284.603 R 3.359(alue\). As)-.275 F F1(EQ\(\))
3.359 E F0 .609(may e)3.359 F -.275(va)-.275 G .609(luate its ar).275 F .608
(guments twice, it should not be in)-.198 F -.22(vo)-.44 G -.11(ke).22 G 3.358
(dw).11 G .608(ith function)452.363 284.603 R(calls or comple)72 299.603 Q 2.75
(xe)-.165 G(xpressions.)152.014 299.603 Q/F3 11/Times-Bold@0 SF 2.75(8.1. T)72
329.603 R(ype-speci\214c Macr)-.814 E(os)-.198 E F0 -.165(Fo)97 348.203 S 4.157
(re).165 G 1.407(ach prede\214ned Scheme type, there e)121.155 348.203 R 1.407
(xists a preprocessor symbol that e)-.165 F 1.408(xpands to the)-.165 F(inte)72
363.203 Q 1.045(ger v)-.165 F 1.044(alue of that type \(the contents of the ty\
pe \214eld of members of the type\).)-.275 F 1.044(The name of)6.544 F
(each such symbol is the name of the type with the pre\214x `)72 377.203 Q
(`T_')-.814 E(':)-.814 E F2 24(T_Boolean T_Pair T_Vector)100.346 399.706 R/F4
10/Times-Roman@0 SF(etc...)328.346 399.706 Q F0 .587(These symbols are typical\
ly used as case labels in switch-statements to discriminate the possible)72
422.206 R(types of a gi)72 436.206 Q -.165(ve)-.275 G 2.75(no).165 G
(bject, or in if-statements to check whether a Scheme object is of a gi)149.77
436.206 Q -.165(ve)-.275 G 2.75(nt).165 G(ype:)471.63 436.206 Q F2
(if \(TYPE\(obj\) == T_Vector\))100.346 458.709 Q(...)127.846 472.709 Q F0 .3
(In addition, each type de\214nes a macro to e)72 495.209 R .3
(xtract the contents of an object of that type and to con-)-.165 F -.165(ve)72
509.209 S(rt it to the correct C type.).165 E -.165(Fo)5.5 G 2.75(re).165 G
(xample, the macro)221.204 509.209 Q F2(CHAR\(obj\))100.346 531.712 Q F0 .34
(is used to fetch the character v)72 554.212 R .341(alue \(a C)-.275 F F1(int)
3.091 E F0 3.091(\)f)C .341(rom members of the Scheme type)273.077 554.212 R F1
-.165(ch)3.091 G(ar).165 E(acter)-.165 E F0 3.091(,t)C .341(hat is,)477.38
554.212 R(from objects whose type \214eld contains the v)72 568.212 Q(alue)
-.275 E F1(T_Char)2.75 E(acter)-.165 E F0 5.5(.S)C(imilarly)357.846 568.212 Q
2.75(,t)-.715 G(he macro)400.526 568.212 Q F2(VECTOR\(obj\))100.346 590.715 Q
F0 .281(gets the heap pointer con)72 613.215 R -.165(vey)-.44 G .28
(ed in objects of the Scheme type).165 F F1(vector)3.03 E F0 5.78(.F)C .28
(or objects such as v)387.875 613.215 R(ectors,)-.165 E .341
(pairs, and procedures, the heap address is coerced to a pointer to a C)72
628.215 R F1(struct)3.091 E F0 .341(de\214ning the layout of)3.091 F .035
(the object.)72 643.215 R .035(There e)5.535 F .035(xists one structure type d\
eclaration for each such Scheme type; their names are)-.165 F 1
(that of the type with `)72 658.215 R(`S_')-.814 E 3.751('p)-.814 G 3.751
(repended. F)202.248 658.215 R 1.001(or e)-.165 F(xample,)-.165 E F1(VECT)3.751
E(OR\(\))-.198 E F0 1.001(returns a pointer to a structure)3.751 F 1.386
(with the components)72 673.215 R F1(size)4.136 E F0 1.386
(\(the number of elements in the v)4.136 F 1.386(ector\) and)-.165 F F1(data)
4.136 E F0 1.385(\(the elements as an)4.136 F(array of)72 687.215 Q F1(Objects)
2.75 E F0 2.75(\). These)B(can be used from within C code lik)2.75 E 2.75(et)
-.11 G(his:)348.661 687.215 Q EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(7-)288 51 S/F1 10/Courier@0
SF(int i, num = VECTOR\(obj\)->size;)100.346 86 Q(for \(i = 0; i < num; i++\))
100.346 108.4 Q(VECTOR\(obj\)->data[i] = ...;)127.846 122.4 Q F0(Similarly)72
143.9 Q 2.75(,t)-.715 G(he structure underlying the Scheme type)120.796 143.9 Q
/F2 11/Times-Italic@0 SF(pair)2.75 E F0(is de\214ned as:)2.75 E F1
(struct S_Pair { Object car, cdr; };)100.346 166.403 Q F0 .463(and the macro)72
188.903 R F2 -.99(PA)3.214 G(IR\(\)).99 E F0 .464
(returns a \(heap\) pointer to a member of the structure)3.214 F F2(S_P)3.214 E
(air)-.88 E F0 5.964(.M)C .464(acros such)457.413 188.903 R(as)72 203.903 Q F2
(VECT)3.45 E(OR\(\))-.198 E F0(and)3.45 E F2 -.99(PA)3.45 G(IR\(\)).99 E F0 .7
(just con)3.45 F -.165(ve)-.44 G .7
(rt the contents of the pointer \214eld to a pointer of the correct).165 F
(type:)72 217.903 Q F1(#define VECTOR\(obj\))100.346 240.406 Q
(\(\(struct S_Vector *\)POINTER\(obj\)\))232.346 240.406 Q(#define PAIR\(obj\))
100.346 254.406 Q(\(\(struct S_Pair)232.346 254.406 Q(*\)POINTER\(obj\)\))
340.346 254.406 Q F0 1.297(Authors of Scheme e)97 280.506 R 1.297
(xtensions and Elk-based applications are encouraged to follo)-.165 F 4.047(wt)
-.275 G(hese)484.453 280.506 Q(con)72 295.506 Q -.165(ve)-.44 G .285
(ntions in their code and, for each ne).165 F 3.035(wt)-.275 G(ype)271.048
295.506 Q F2(xyz)3.035 E F0 3.034(,s)C .284(tore the ne)314.077 295.506 R 3.034
(wt)-.275 G .284(ype v)374.835 295.506 R .284(alue \(which is allocated)-.275 F
.531(by the interpreter when the type is re)72 310.506 R .532
(gistered\) in a v)-.165 F(ariable)-.275 E F2(T_Xyz)3.282 E F0 3.282(,a)C .532
(nd de\214ne a structure or class)375.786 310.506 R F2(S_Xyz)72 325.506 Q F0
2.808(,a)C .058(nd a macro)109.326 325.506 R F2(XYZ\(\))2.808 E F0 .058
(that mak)2.808 F .058
(es a pointer to this structure from a member of the type.)-.11 F(Capi-)5.557 E
(talization may v)72 340.506 Q(ary according to personal preference.)-.275 E/F3
11/Times-Bold@0 SF 2.75(9. De\214ning)72 370.506 R(New Scheme Primiti)2.75 E
-.11(ve)-.11 G(s).11 E F0 1.047(In Elk, there e)97 389.106 R 1.048
(xists a one-to-one relationship between Scheme primiti)-.165 F -.165(ve)-.275
G 3.798(sa).165 G 1.048(nd C functions:)434.067 389.106 R .179
(each Scheme primiti)72 404.106 R -.165(ve)-.275 G .178
(\212whether prede\214ned or user).165 F .178
(-de\214ned\212is implemented by a corresponding)-.22 F 3.312(Cf)72 419.106 S
3.312(unction. This)86.312 419.106 R .562
(includes special forms, which are treated as a special kind of primiti)3.312 F
-.165(ve)-.275 G 3.313(si).165 G 3.313(nE)477.158 419.106 S(lk.)492.692 419.106
Q .649(Extensions and applications use the function)72 434.106 R F2
(De\214ne_Primitive\(\))3.399 E F0 .649(to re)3.399 F .649(gister a ne)-.165 F
3.398(wS)-.275 G .648(cheme primi-)444.392 434.106 R(ti)72 449.106 Q 1.777
-.165(ve w)-.275 H 1.447(ith the interpreter).165 F 4.197(,s)-.44 G 1.448
(upplying its name and the C function that implements it.)190.252 449.106 R
1.448(In case of)6.948 F 3.043(dynamically loadable e)72 464.106 R 3.042
(xtensions or application modules, the calls to)-.165 F F2
(De\214ne_Primitive\(\))5.792 E F0(are)5.792 E 1.233(placed in the e)72 479.106
R 1.233(xtension initialization functions that are called automatically as the\
 object \214le is)-.165 F(loaded.)72 493.106 Q F2(De\214ne_Primitive\(\))5.5 E
F0(is declared as)2.75 E F1
(void Define_Primitive\(\(Object \(*func\)\(\)\), const char *name,)100.346
515.609 Q(int minargs, int maxargs,)232.346 529.609 Q(enum discipline disc\);)
232.346 543.609 Q F0(The ar)72 566.109 Q(guments are:)-.198 E F2(func)97
584.709 Q F0 2.75(ap)6.058 G(ointer to the C function implementing the ne)
135.134 584.709 Q 2.75(wp)-.275 G(rimiti)346.906 584.709 Q -.165(ve)-.275 G(;)
.165 E F2(name)97 603.309 Q F0(the name of the primiti)1.174 E .33 -.165(ve a)
-.275 H 2.75(san).165 G(ull-terminated C string;)260.567 603.309 Q F2(minar)97
621.909 Q(gs)-.407 E F0(the minimum number of ar)122 636.909 Q
(guments accepted by the primiti)-.198 E -.165(ve)-.275 G(;).165 E F2(maxar)97
655.509 Q(gs)-.407 E F0(the maximum number of ar)122 670.509 Q
(guments \(identical to)-.198 E F2(minar)2.75 E(gs)-.407 E F0(in most cases\);)
2.75 E F2(disc)97 689.109 Q F0(the)7.279 E F2(calling discipline)2.75 E F0
(\(usually)2.75 E F2(EV)2.75 E(AL)-.66 E F0(\).)A F2(De\214ne_Primitive\(\))97
707.709 Q F0 .947(creates a Scheme v)3.697 F .946
(ariable of the speci\214ed name in the current \(i.)-.275 F .946(e. the)1.833
F(caller')72 722.709 Q 1.112(s\) le)-.605 F 1.112(xical en)-.165 F 1.112
(vironment and binds it to the ne)-.44 F 1.112(wly created procedure.)-.275 F
1.113(Each C function that)6.613 F EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(8-)288 51 S .659
(implements a primiti)72 87 R .989 -.165(ve h)-.275 H .659(as a return type of)
.165 F/F1 11/Times-Italic@0 SF(Object)3.409 E F0 .658
(and, for a calling discipline of)3.409 F F1(EV)3.408 E(AL)-.66 E F0 3.408(,z)C
.658(ero or)477.382 87 R .125(more ar)72 102 R .126(guments of type)-.198 F F1
(Object)2.876 E F0 .126(which are bound to the e)2.876 F -.275(va)-.275 G .126
(luated ar).275 F .126(guments passed to the Scheme)-.198 F(primiti)72 117 Q
.33 -.165(ve w)-.275 H(hen it is called.).165 E
(The calling discipline must be one of the follo)5.5 E(wing:)-.275 E F1(EV)97
135.6 Q(AL)-.66 E F0 1.685(The primiti)122 150.6 R 2.015 -.165(ve ex)-.275 H
1.684(pects a \214x).165 F 1.684(ed number of ar)-.165 F(guments;)-.198 E F1
(minar)4.434 E(gs)-.407 E F0(and)4.434 E F1(maxar)4.434 E(gs)-.407 E F0 1.684
(must be)4.434 F(identical)122 165.6 Q/F2 9/Times-Roman@0 SF(2)-3.6 I F0(.)3.6
I F1 -.66(VA)97 184.2 S(RARGS).66 E F0 1.16(The primiti)122 199.2 R 1.49 -.165
(ve h)-.275 H 1.16(as a v).165 F 1.16(ariable number of ar)-.275 F 1.159
(guments, and the underlying C function is)-.198 F .613(called with an ar)122
214.2 R .614(gument count and an array of ar)-.198 F 3.364(guments. De\214ning)
-.198 F(primiti)3.364 E -.165(ve)-.275 G 3.364(sw).165 G .614(ith a)484.136
214.2 R -.275(va)122 229.2 S(riable number of ar).275 E(guments will e)-.198 E
(xplained in more detail in section 9.2.)-.165 E F1(NOEV)97 247.8 Q(AL)-.66 E
F0 .396(The ar)122 262.8 R .395(guments are passed as a Scheme list of une)
-.198 F -.275(va)-.275 G .395(luated objects\212a single ar).275 F(gument)-.198
E .124(of the type)122 277.8 R F1(Object)2.874 E F0 5.624(.P)C(rimiti)215.985
277.8 Q -.165(ve)-.275 G 2.874(su).165 G .124
(sing this discipline will then use)263.035 277.8 R F1(Eval\(\))2.875 E F0 .125
(as described in)2.875 F 1.265(section 12.2 to e)122 292.8 R -.275(va)-.275 G
1.265(luate some or all of the ar).275 F(guments.)-.198 E F1(NOEV)6.764 E(AL)
-.66 E F0 1.264(is only rarely used)4.014 F 1.021(\(with the e)122 307.8 R
1.021(xception of the b)-.165 F 1.022(uilt-in special forms of Elk\); e)-.22 F
1.022(xtensions and applications)-.165 F(mostly use macros as a more con)122
322.8 Q -.165(ve)-.44 G(nient w).165 E(ay to de\214ned ne)-.11 E 2.75(ws)-.275
G(yntactical forms.)394.437 322.8 Q(Figure 2 sho)72 341.4 Q(ws a simple e)-.275
E(xample for de\214ning a ne)-.165 E 2.75(wS)-.275 G(cheme primiti)310.205
341.4 Q -.165(ve)-.275 G(.).165 E(____________________________________________\
__________________________________)75 368.9 Q/F3 10/Courier@0 SF
(#include "scheme.h")72 388.4 Q(Object p_vector_reverse\(Object vec\) {)72
410.8 Q(Object tmp, *s, *t;)99.5 424.8 Q(Check_Type\(vec, T_Vector\);)99.5
447.2 Q
(for \(s = VECTOR\(vec\)->data, t = s+VECTOR\(vec\)->size; --t > s; s++\))99.5
461.2 Q(tmp = *s, *s = *t, *t = tmp;)127 475.2 Q(return vec;)99.5 489.2 Q(})72
503.2 Q(void elk_init_vector\(void\) {)72 525.6 Q
(Define_Primitive\(p_vector_reverse, "vector-reverse!", 1, 1, EVAL\);)99.5
539.6 Q(})72 553.6 Q/F4 10/Times-Bold@0 SF(Figur)198.84 571.4 Q 2.5(e2)-.18 G
(:)234.49 571.4 Q/F5 10/Times-Roman@0 SF(De\214ning a ne)5 E 2.5(wS)-.25 G
(cheme Primiti)311.73 571.4 Q -.15(ve)-.25 G F0(______________________________\
________________________________________________)75 590 Q 1.05(The primiti)97
623.6 R -.165(ve)-.275 G F1(vector)3.965 E(-r)-.22 E -.165(ev)-.407 G(er).165 E
(se!)-.11 E F0 1.05(de\214ned by the e)3.8 F 1.05(xample e)-.165 F 1.049
(xtension re)-.165 F -.165(ve)-.275 G 1.049(rses the elements of a).165 F .868
(Scheme v)72 638.6 R .868(ector in place and returns its ar)-.165 F .868
(gument \(note the \214nal e)-.198 F .868(xclamation mark indicating the)-.165
F(destructi)72 653.6 Q 1.397 -.165(ve o)-.275 H(peration\).).165 E F1(Chec)
6.567 E(k_T)-.22 E(ype\(\))-.814 E F0 1.067
(is a simple macro that compares the type \214eld of the \214rst)3.817 F(ar)72
668.6 Q .532(gument \(an)-.198 F F1(Object)3.282 E F0 3.282(\)w)C .532
(ith the second ar)178.173 668.6 R .533(gument and signals and error if the)
-.198 F 3.283(yd)-.165 G 3.283(on)422.651 668.6 S .533(ot match.)436.934 668.6
R(This)6.033 E 1.748(macro is used primarily for type-checking the ar)72 683.6
R 1.748(guments to Scheme primiti)-.198 F -.165(ve)-.275 G 4.498(s. A).165 F
1.748(call to the)4.498 F .36 LW 76.5 694.6 72 694.6 DL 81 694.6 76.5 694.6 DL
85.5 694.6 81 694.6 DL 90 694.6 85.5 694.6 DL 94.5 694.6 90 694.6 DL 99 694.6
94.5 694.6 DL 103.5 694.6 99 694.6 DL 108 694.6 103.5 694.6 DL 112.5 694.6 108
694.6 DL 117 694.6 112.5 694.6 DL 121.5 694.6 117 694.6 DL 126 694.6 121.5
694.6 DL 130.5 694.6 126 694.6 DL 135 694.6 130.5 694.6 DL 139.5 694.6 135
694.6 DL 144 694.6 139.5 694.6 DL/F6 7/Times-Roman@0 SF(2)82 704.6 Q F2 1.228
(Because of a limitation in the C language, primiti)4.5 2.8 N -.135(ve)-.225 G
3.478(so).135 G 3.478(ft)297.18 707.4 S(ype)306.157 707.4 Q/F7 9/Times-Italic@0
SF(EV)3.478 E(AL)-.54 E F2 1.228(can only ha)3.478 F 1.499 -.135(ve a \214)-.18
H -.135(xe).135 G 3.479(dm).135 G(aximum)438.498 707.4 Q(number of ar)72 718.4
Q(guments \(currently 10\).)-.162 E(If more ar)4.5 E(guments are required,)
-.162 E F7 -.54(VA)2.25 G(RARGS).54 E F2(must be used instead.)2.25 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-1)276.087 51 S 2.75(9-)288 51 S(macro)72 87 Q/F1
11/Times-Italic@0 SF(Chec)3.215 E(k_Mutable\(\))-.22 E F0 .465(with the v)3.215
F .466(ector as an ar)-.165 F .466(gument could ha)-.198 F .796 -.165(ve b)-.22
H .466(een inserted before the loop).165 F .046(to check whether the v)72 102 R
.046
(ector is read-only and to automatically raise an error if this is the case.)
-.165 F(The)5.545 E -.165(ex)72 117 S .142(ample code forms a complete e).165 F
.143(xtension including an e)-.165 F .143
(xtension initialization function and could)-.165 F(be link)72 131 Q
(ed with the interpreter)-.11 E 2.75(,o)-.44 G 2.75(rl)210.149 131 S
(oaded dynamically into the interpreter as follo)219.62 131 Q(ws:)-.275 E/F2 10
/Courier-Bold@0 SF(%)100.346 153.503 Q/F3 10/Courier@0 SF
(cc \255c \255I/usr/elk/include vec.c; makedl vec.o vec.o)6 E F2(%)100.346
167.503 Q F3(scheme)6 E F2(>)100.346 181.503 Q F3(\(load 'vec.o\))6 E F2(>)
100.346 195.503 Q F3(\(define v '#\(hello word\)\))6 E F2(v)100.346 209.503 Q
(>)100.346 223.503 Q F3(\(vector-reverse! v\))6 E F2(#\(world hello\))100.346
237.503 Q(>)100.346 251.503 Q F3(v)6 E F2(#\(world hello\))100.346 265.503 Q(>)
100.346 279.503 Q/F4 11/Times-Bold@0 SF 2.75(9.1. Making)72 317.003 R
(Objects Kno)2.75 E(wn to the Garbage Collector)-.11 E F0 2.207
(Consider the non-destructi)97 335.603 R 2.537 -.165(ve ve)-.275 H 2.207
(rsion of the primiti).165 F -.165(ve)-.275 G F1(vector)5.122 E(-r)-.22 E -.165
(ev)-.407 G(er).165 E(se)-.11 E F0(sho)4.957 E 2.207(wn in Figure 3,)-.275 F
(which returns a ne)72 350.603 Q 2.75(wv)-.275 G
(ector instead of altering the contents of the original v)168.701 350.603 Q
(ector)-.165 E(.)-.605 E(_____________________________________________________\
_________________________)75 378.103 Q F3
(Object p_vector_reverse\(Object vec\) {)72 397.603 Q(Object ret;)99.5 411.603
Q(int i, j;)99.5 425.603 Q(Check_Type\(vec, T_Vector\);)99.5 448.003 Q
(ret = Make_Vector\(VECTOR\(vec\)->size, False\);)99.5 462.003 Q
(for \(i = 0, j = VECTOR\(vec\)->size; --j >= 0; i++\))99.5 476.003 Q
(VECTOR\(ret\)->data[i] = VECTOR\(vec\)->data[j];)127 490.003 Q(return ret;)
99.5 504.003 Q(})72 518.003 Q/F5 10/Times-Bold@0 SF(Figur)167.815 535.803 Q 2.5
(e3)-.18 G(:)203.465 535.803 Q/F6 10/Times-Roman@0 SF(Non-destructi)5 E .3 -.15
(ve S)-.25 H(cheme primiti).15 E -.15(ve)-.25 G/F7 10/Times-Italic@0 SF(vector)
2.65 E(-r)-.2 E -.15(ev)-.37 G(er).15 E(se)-.1 E F0(__________________________\
____________________________________________________)75 554.403 Q .37
(The code in Figure 3 is identical to that sho)97 588.003 R .371
(wn in Figure 2, e)-.275 F .371(xcept that a ne)-.165 F 3.121(wv)-.275 G .371
(ector is allo-)448.269 588.003 R .513
(cated, \214lled with the contents of the original v)72 603.003 R .513
(ector in re)-.165 F -.165(ve)-.275 G .513(rse order).165 F 3.263(,a)-.44 G
.513(nd returned as the result of)383.824 603.003 R(the primiti)72 617.003 Q
-.165(ve)-.275 G(.).165 E F1(Mak)5.5 E(e_V)-.11 E(ector\(\))-1.221 E F0
(is declared by Elk:)2.75 E F3(Object Make_Vector\(int size, Object fill\);)
100.346 639.506 Q F1(size)72 662.006 Q F0 1.035(is the length of the v)3.785 F
(ector)-.165 E 3.785(,a)-.44 G 1.035
(nd all elements are initialized to the Scheme object)220.397 662.006 R F1
(\214ll)3.785 E F0 6.535(.I)C 3.786(nt)481.272 662.006 S(he)493.616 662.006 Q
-.165(ex)72 677.006 S 2.325(ample, the prede\214ned global v).165 F(ariable)
-.275 E F1 -.825(Fa)5.075 G(lse).825 E F0 2.324(is used as the)5.075 F F1
(\214ll)5.074 E F0 2.324(object; it holds the boolean)5.074 F
(Scheme constant #f \(an)72 692.006 Q(y)-.165 E F1(Object)2.75 E F0(could ha)
2.75 E .33 -.165(ve b)-.22 H(een used here\).).165 E .789
(Although the C function may look right, there is a problem when it comes to g)
97 710.606 R .79(arbage col-)-.055 F 3.056(lection. T)72 725.606 R 3.056(ou)
-.88 G .305(nderstand the problem and its solution, it may be helpful to ha)
130.395 725.606 R .635 -.165(ve a b)-.22 H .305(rief look at ho).165 F(w)-.275
E EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(0-)288 51 S .627(the g)72 87
R .627(arbage collector)-.055 F/F1 9/Times-Roman@0 SF(3)-3.6 I F0 -.11(wo)3.377
3.6 O .627(rks \(the follo).11 F .627
(wing description presents a simpli\214ed vie)-.275 F .626(w; the real algo-)
-.275 F 2.402(rithm is more comple)72 102 R 5.153(x\). In)-.165 F 2.403
(Elk, a g)5.153 F 2.403(arbage collection is triggered automatically whene)
-.055 F -.165(ve)-.275 G 5.153(ra).165 G 1.444
(request for heap space cannot be satis\214ed because the heap is full, or e)72
117 R 1.444(xplicitly by calling the)-.165 F(primiti)72 132 Q -.165(ve)-.275 G
/F2 11/Times-Italic@0 SF(collect)3.42 E F0 .506(from within Scheme code.)3.255
F .506(The g)6.006 F .506(arbage collector traces all `)-.055 F(`li)-.814 E
-.165(ve)-.275 G 2.134 -.814('' o).165 H .506(bjects start-).814 F .002
(ing with a kno)72 147 R(wn)-.275 E F2 -.495(ro)2.752 G .002(ot set).495 F F0
.002(of pointers to reachable objects \(basically the interpreter')2.752 F
2.752(sg)-.605 G .002(lobal le)450.087 147 R(xical)-.165 E(en)72 162 Q 1.167
(vironment and its symbol table\).)-.44 F -.165(Fo)6.667 G(llo).165 E 1.168
(wing these pointers, all accessible Scheme objects are)-.275 F .368
(located and copied to a ne)72 177 R 3.118(wh)-.275 G .367
(eap space in memory \(`)204.679 177 R(`forw)-.814 E(arded')-.11 E .367
('\), thereby compacting the heap.)-.814 F(Whene)72 192 Q -.165(ve)-.275 G
3.115(ra).165 G 3.115(no)124.758 192 S .365
(bject is relocated in memory during g)138.873 192 R .365
(arbage collection, the contents of the pointer)-.055 F .673
(\214eld of the corresponding C)72 207 R F2(Object)3.423 E F0 .673
(is updated to point to the ne)3.423 F 3.423(wl)-.275 G 3.422(ocation. After)
374.702 207 R .672(that, an)3.422 F 3.422(yc)-.165 G(on-)489.337 207 Q
(stituent objects \(e.)72 222 Q(g. the elements of a v)1.833 E
(ector\) are forw)-.165 E(arded in the same w)-.11 E(ay)-.11 E(.)-.715 E .706
(As li)97 240.6 R 1.036 -.165(ve o)-.275 H .706(bjects are relocated in memory)
.165 F(,)-.715 E F2(all)3.457 E F0 .707
(pointers to an object need to be updated prop-)3.457 F .056
(erly when that object is forw)72 255.6 R .056(arded during g)-.11 F .056
(arbage collection.)-.055 F .056(If a pointer to a li)5.556 F .386 -.165(ve o)
-.275 H .056(bject were not).165 F 1.158
(in the root set \(that is, not reachable by the g)72 270.6 R 1.158
(arbage collector\), the object w)-.055 F 1.159(ould either become)-.11 F -.055
(ga)72 285.6 S .884(rbage erroneously during the ne).055 F .884(xt g)-.165 F
.884(arbage collection, or)-.055 F 3.634(,i)-.44 G 3.634(fi)344.128 285.6 S
3.634(th)354.483 285.6 S .883(ad been reached through some)366.675 285.6 R
1.055(other pointer)72 300.6 R 3.805(,t)-.44 G 1.055(he original pointer w)
138.746 300.6 R 1.054(ould no)-.11 F 3.804(wp)-.275 G 1.054(oint to an in)
285.093 300.6 R -.275(va)-.44 G 1.054(lid location.).275 F F1(4)-3.6 I F0 1.054
(This is e)3.804 3.6 N 1.054(xactly what)-.165 F(happens in the e)72 315.6 Q
(xample sho)-.165 E(wn in Figure 3.)-.275 E .178(The call to)97 334.2 R F2(Mak)
2.928 E(e_V)-.11 E(ector\(\))-1.221 E F0 .179(in the e)2.928 F .179
(xample triggers a g)-.165 F .179(arbage collection if the heap is too full)
-.055 F .201(to satisfy the request for heap space.)72 349.2 R .2(As the)5.701
F F2(Object)2.95 E F0 .2(pointer stored in the ar)2.95 F(gument)-.198 E F2(vec)
2.95 E F0 .2(is in)2.95 F(visible)-.44 E .685(to the g)72 364.2 R .685
(arbage collector)-.055 F 3.435(,i)-.44 G .686
(ts pointer \214eld cannot be updated when the v)186.357 364.2 R .686
(ector to which it points is)-.165 F(forw)72 379.2 Q .262(arded during the g)
-.11 F .261(arbage collection started inside)-.055 F F2(Mak)3.011 E(e_V)-.11 E
(ector\(\))-1.221 E F0 5.761(.A)C 3.011(sar)395.786 379.2 S .261
(esult, all further ref-)414.634 379.2 R 2.163(erences to)72 394.2 R F2(VECT)
4.913 E(OR\(vec\))-.198 E F0 2.163(will return an in)4.913 F -.275(va)-.44 G
2.164(lid address and may cause the program to crash).275 F .862
(\(immediately or)72 409.2 R 3.612(,w)-.44 G .862(orse, at a later point\).)
157.192 409.2 R .862(The solution is simple: the primiti)6.362 F 1.192 -.165
(ve j)-.275 H .862(ust needs to add).165 F F2(vec)72 423.2 Q F0
(to the set of initial pointers used by the g)2.75 E(arbage collector)-.055 E
5.5(.T)-.605 G(his is done by inserting the line)353.622 423.2 Q/F3 10
/Courier@0 SF(GC_Link\(vec\);)100.346 445.703 Q F0 .04(at the be)72 468.203 R
.041(ginning of the function before the call to)-.165 F F2(Mak)2.791 E(e_V)-.11
E(ector\(\))-1.221 E F0(.)A F2(GC_Link\(\))5.541 E F0 .041(is a macro.)2.791 F
(Another)5.541 E(macro,)72 483.203 Q F2(GC_Unlink)3.145 E F0 3.145(,m)C .395
(ust be called later \(e.)170.558 483.203 R .395
(g. at the end of the function\) without an ar)1.833 F .394(gument list)-.198 F
.996(to remo)72 498.203 R 1.326 -.165(ve t)-.165 H .996
(he object from the root set ag).165 F 3.746(ain. In)-.055 F .996
(addition, a call to)3.746 F F2(GC_Node)3.747 E F0(\(ag)3.747 E .997
(ain without an)-.055 F(ar)72 513.203 Q 1.389
(gument list\) must be placed in the declarations at the be)-.198 F 1.388
(ginning of the enclosing function or)-.165 F 2.75(block. Figure)72 528.203 R
2.75(4s)2.75 G(ho)148.692 528.203 Q(ws the re)-.275 E(vised, correct code.)
-.275 E .171(Appendix A lists the C functions which can trigger a g)97 546.803
R .172(arbage collection.)-.055 F(An)5.672 E 2.922(yl)-.165 G .172(ocal v)
447.596 546.803 R(ariable)-.275 E 1.038(or ar)72 561.803 R 1.038
(gument of type)-.198 F F2(Object)3.788 E F0 1.038
(must be protected in the manner sho)3.788 F 1.038(wn abo)-.275 F 1.367 -.165
(ve i)-.165 H 3.787(fo).165 G 1.037(ne of these func-)427.277 561.803 R 1.398
(tions is called during its lifetime.)72 576.803 R 1.398(This may sound more b)
6.898 F 1.399(urdensome than it really is, because)-.22 F 1.632(most of the `)
72 591.803 R(`dangerous')-.814 E 4.382('f)-.814 G 1.632
(unctions are rarely or ne)195.425 591.803 R -.165(ve)-.275 G 4.382(ru).165 G
1.631(sed from within C/C++ e)332.351 591.803 R 1.631(xtensions or)-.165 F .36
LW 76.5 602.803 72 602.803 DL 81 602.803 76.5 602.803 DL 85.5 602.803 81
602.803 DL 90 602.803 85.5 602.803 DL 94.5 602.803 90 602.803 DL 99 602.803
94.5 602.803 DL 103.5 602.803 99 602.803 DL 108 602.803 103.5 602.803 DL 112.5
602.803 108 602.803 DL 117 602.803 112.5 602.803 DL 121.5 602.803 117 602.803
DL 126 602.803 121.5 602.803 DL 130.5 602.803 126 602.803 DL 135 602.803 130.5
602.803 DL 139.5 602.803 135 602.803 DL 144 602.803 139.5 602.803 DL/F4 7
/Times-Roman@0 SF(3)82 612.803 Q F1 .507(Elk actually emplo)4.5 2.8 N .507
(ys tw)-.09 F 2.757(og)-.09 G .507
(arbage collectors, one based on the traditional stop-and-cop)190.299 615.603 R
2.758(ys)-.09 G(trate)418.969 615.603 Q(gy)-.135 E 2.758(,a)-.585 G .508(nd a)
452.246 615.603 R(generational, incremental g)72 626.603 Q
(arbage collector which is less disrupti)-.045 E .27 -.135(ve b)-.225 H
(ut not supported on all platforms.)-.045 E F4(4)82 636.603 Q F1 2.044
(The problem of managing an `)4.5 2.8 N(`e)-.666 E 2.045(xact root set')-.135 F
4.295('c)-.666 G 2.045(an be a)277.843 639.403 R -.18(vo)-.18 G 2.045
(ided by a technique called).18 F/F5 9/Times-Italic@0 SF(conservative)4.295 E
F1 -.045(ga)72 650.403 S .487(rbage collection.).045 F 2.737(Ac)4.987 G(onserv)
159.141 650.403 Q(ati)-.225 E .757 -.135(ve g)-.225 H .487
(arbage collector treats the data se).09 F .486(gment, stack, and re)-.135 F
.486(gisters of the run-)-.135 F .059(ning program as)72 661.403 R F5 .059
(ambiguous r)2.309 F(oots)-.405 E F1 4.559(.I)C 2.309(ft)202.633 661.403 S .059
(he set of ambiguous roots is a superset of the)210.441 661.403 R F5(actual)
2.31 E F1 .06(roots, then a point-)2.31 F .109(er that looks lik)72 672.403 R
2.359(eah)-.09 G .109(eap pointer can safely be considered as pointing to an a\
ccessible object that cannot be re-)145.697 672.403 R 2.508(claimed. At)72
683.403 R .259(the time Elk w)2.508 F .259(as designed, conserv)-.09 F(ati)
-.225 E .529 -.135(ve G)-.225 H 2.509(Cw).135 G .259(as still in its inf)
288.034 683.403 R(anc)-.09 E 2.509(ya)-.135 G .259(nd suf)367.854 683.403 R
.259(\214cient e)-.225 F .259(xperience did)-.135 F 1.178(not e)72 694.403 R
3.428(xist. F)-.135 F 1.177(or this reason, and because of the implied risks o\
n certain machine architectures, the inherent)-.135 F .502(portability problem\
s, and the inability to precisely determine the actual memory utilization, a t\
raditional GC)72 705.403 R(strate)72 716.403 Q(gy w)-.135 E(as chosen for Elk.)
-.09 E EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(1-)288 51 S(________________\
______________________________________________________________)75 99.5 Q/F1 10
/Courier@0 SF(Object p_vector_reverse\(Object vec\) {)72 119 Q(Object ret;)99.5
133 Q(int i, j;)99.5 147 Q(GC_Node;)99.5 161 Q(GC_Link\(vec\);)99.5 183.4 Q
(Check_Type\(vec, T_Vector\);)99.5 197.4 Q
(ret = Make_Vector\(VECTOR\(vec\)->size, False\);)99.5 211.4 Q
(for \(i = 0, j = VECTOR\(vec\)->size; --j >= 0; i++\))99.5 225.4 Q
(VECTOR\(ret\)->data[i] = VECTOR\(vec\)->data[j];)127 239.4 Q(GC_Unlink;)99.5
253.4 Q(return ret;)99.5 267.4 Q(})72 281.4 Q/F2 10/Times-Bold@0 SF(Figur)
130.82 299.2 Q 2.5(e4)-.18 G(:)166.47 299.2 Q/F3 10/Times-Roman@0 SF
(Non-destructi)5 E .3 -.15(ve S)-.25 H(cheme primiti).15 E -.15(ve)-.25 G/F4 10
/Times-Italic@0 SF(vector)2.65 E(-r)-.2 E -.15(ev)-.37 G(er).15 E(se)-.1 E F3
2.5(,c)C(orrected v)380.63 299.2 Q(ersion)-.15 E F0(__________________________\
____________________________________________________)75 317.8 Q .949
(applications in practice.)72 347.8 R .949(Most primiti)6.449 F -.165(ve)-.275
G 3.699(st).165 G .949(hat require calls to)262.381 347.8 R/F5 11
/Times-Italic@0 SF(GC_Link\(\))3.699 E F0 .95(use some function that)3.699 F
(creates a ne)72 362.8 Q 2.75(wS)-.275 G(cheme object, such as)139.837 362.8 Q
F5(Mak)2.75 E(e_V)-.11 E(ector\(\))-1.221 E F0(in the e)2.75 E(xample abo)-.165
E -.165(ve)-.165 G(.).165 E 3.091 -.88(To s)97 381.4 T 1.33
(implify GC protection of more than a single ar).88 F 1.33(gument or v)-.198 F
1.33(ariable, additional macros)-.275 F F5(GC_Link2\(\))72 396.4 Q F0(,)A F5
(GC_Link3\(\))3.149 E F0 3.149(,a)C .399(nd so on up to)195.008 396.4 R F5
(GC_Link7\(\))3.149 E F0 .4(are pro)3.149 F 3.15(vided. Each)-.165 F .4
(of these can be called)3.15 F .388(with as man)72 411.4 R 3.138(ya)-.165 G
-.198(rg)139.296 411.4 S .388(uments of type).198 F F5(Object)3.138 E F0 .387
(as is indicated by the digit \(separate macros are required,)3.138 F .778
(because macros with a v)72 426.4 R .778(ariable number of ar)-.275 F .779
(guments cannot be de\214ned in C\).)-.198 F 3.529(Ac)6.279 G(orresponding)
445.953 426.4 Q(macro)72 441.4 Q F5(GC_Node2)6.619 E F0(,)A F5(GC_Node3)6.618 E
F0 6.618(,a)C 3.868(nd so on, must be placed in the declarations.)228.728 441.4
R(Dif)9.368 E(ferent)-.275 E F5(GC_Link*\(\))72 456.4 Q F0 1.339
(calls cannot be mix)4.088 F 4.089(ed. All)-.165 F 1.339(local v)4.089 F 1.339
(ariables passed to one of the macros must ha)-.275 F -.165(ve)-.22 G 1.202
(been initialized.)72 471.4 R 1.201(GC protection is not required for `)6.702 F
(`pointer)-.814 E(-less')-.22 E 3.951('o)-.814 G 1.201
(bjects such as booleans and)378.218 471.4 R 2.165(small inte)72 486.4 R 2.165
(gers, and for the ar)-.165 F 2.165(guments of primiti)-.198 F -.165(ve)-.275 G
4.915(sw).165 G 2.165(ith a v)321.629 486.4 R 2.166(ariable number of ar)-.275
F 2.166(guments \(as)-.198 F .974(described in section 9.2\).)72 501.4 R .974
(Section 12.3 will describe ho)6.474 F 3.724(wg)-.275 G .973(lobal \(e)340.487
501.4 R(xternal\))-.165 E F5(Object)3.723 E F0 -.275(va)3.723 G .973
(riables can).275 F(be added to the root set.)72 516.4 Q .81(Here is ho)97 535
R 3.56(wt)-.275 G .81(he implementation of the primiti)158.115 535 R -.165(ve)
-.275 G F5(cons)3.725 E F0(uses)3.56 E F5(GC_Link2\(\))3.56 E F0 .81
(to protect its ar)3.56 F(gu-)-.198 E(ments \(the car and the cdr of the ne)72
549 Q 2.75(wp)-.275 G(air\):)243.094 549 Q F1
(Object P_Cons\(Object car, Object cdr\) {)100.346 571.503 Q(Object new_pair;)
127.846 585.503 Q(GC_Node2;)127.846 599.503 Q(GC_Link2\(car, cdr\);)127.846
621.903 Q(new_pair =)127.846 635.903 Q F4
(allocate heap space and initialize object)6 E F1(;)A(GC_Unlink;)127.846
649.903 Q(return new_pair;)127.846 663.903 Q(})100.346 677.903 Q F0 .303
(There are a fe)97 704.003 R 3.052(wp)-.275 G(itf)174.891 704.003 Q .302
(alls to be a)-.11 F -.11(wa)-.165 G .302(re of when using `).11 F(`dangerous')
-.814 E 3.052('f)-.814 G .302(unctions from within your)387.902 704.003 R .265
(C/C++ code.)72 719.003 R -.165(Fo)5.765 G 3.015(re).165 G .265
(xample, consider this code fragment which \214lls a Scheme v)157.286 719.003 R
.266(ector with the pro-)-.165 F(gram')72 733.003 Q 2.75(se)-.605 G -.44(nv)
109.576 733.003 S(ironment strings that are a).44 E -.275(va)-.22 G
(ilable through the null-terminated string array).275 E F5(en)2.75 E(vir)-.44 E
(on[])-.495 E F0(:)A EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 50 S 2.75(2-)288 50 S/F1 10/Courier@0
SF(Object vec =)100.346 86 Q/F2 10/Times-Italic@0 SF(ne)6 E 2.5(wv)-.15 G
(ector of the right size)201.246 86 Q F1(;)A(int i;)100.346 100 Q(GC_Node;)
100.346 114 Q(GC_Link\(vec\);)100.346 136.4 Q
(for \(i = 0; environ[i] != 0; i++\))100.346 150.4 Q
(VECTOR\(vec\)->data[i] = Make_String\(environ[i], strlen\(environ[i]\)\);)
127.846 164.4 Q F0(\()72 186.9 Q/F3 11/Times-Italic@0 SF(Mak)A(e_String\(\))
-.11 E F0 .395(creates and initializes a ne)3.145 F 3.145(wS)-.275 G .395
(cheme string.\))276.825 186.9 R .395(The body of the for)5.895 F .395
(-loop contains a)-.22 F .636(subtle b)72 201.9 R .636(ug: depending on the co\
mpiler used, the left hand side of the assignment \(the e)-.22 F(xpression)
-.165 E(in)72 216.9 Q -.22(vo)-.44 G(lving).22 E F3(vec)3.062 E F0 3.062(\)m)C
.312(ay be e)146.511 216.9 R -.275(va)-.275 G .312(luated before).275 F F3(Mak)
3.062 E(e_String\(\))-.11 E F0 .312(is in)3.062 F -.22(vo)-.44 G -.11(ke).22 G
3.062(d. As).11 F 3.062(ar)3.062 G .312(esult, a cop)396.852 216.9 R 3.062(yo)
-.11 G 3.062(ft)461.225 216.9 S .311(he con-)471.008 216.9 R 1.353(tents of)72
231.9 R F3(vec)4.103 E F0 1.353(might be, for instance, stored in a re)4.103 F
1.354(gister before a g)-.165 F 1.354(arbage collection is triggered)-.055 F
.861(while e)72 246.9 R -.275(va)-.275 G .861
(luating the right hand side of the assignment.).275 F .861(The g)6.361 F .861
(arbage collector w)-.055 F .861(ould then mo)-.11 F -.165(ve)-.165 G 1.987
(the v)72 261.9 R 1.987(ector object in memory)-.165 F 4.738(,u)-.715 G 1.988
(pdating the\212properly GC-protected\212v)216.093 261.9 R(ariable)-.275 E F3
(vec)4.738 E F0 4.738(,b)C 1.988(ut not the)458.466 261.9 R .011(temporary cop)
72 276.9 R 2.761(yi)-.11 G 2.761(nt)147.064 276.9 S .011(he re)158.383 276.9 R
(gister)-.165 E 2.761(,w)-.44 G .011(hich is no)217.365 276.9 R 2.761(wad)-.275
G .011(angling reference.)283.739 276.9 R 1.771 -.88(To a)5.511 H -.22(vo).66 G
.01(id this, the loop must be).22 F(modi\214ed along these lines:)72 290.9 Q F1
(for \(i = 0; environ[i]; i++\) {)100.346 313.403 Q
(Object temp = Make_String\(environ[i], strlen\(environ[i]\)\);)127.846 327.403
Q(VECTOR\(vec\)->data[i] = temp;)127.846 341.403 Q(})100.346 355.403 Q F0 2.75
(Ar)72 376.903 S(elated pitf)86.355 376.903 Q(all to w)-.11 E
(atch out for is e)-.11 E -.165(xe)-.165 G(mpli\214ed by this code fragment:)
.165 E F1(Object obj;)100.346 399.406 Q(...)100.346 413.406 Q(GC_Link\(obj\);)
100.346 427.406 Q(...)100.346 441.406 Q
(some_function\(obj, P_Cons\(car, cdr\)\);)100.346 455.406 Q F0 2.085
(Here, the call to)72 477.906 R F3(P_Cons\(\))4.836 E F0 2.086(\212just lik)B
(e)-.11 E F3(Mak)4.836 E(e_String\(\))-.11 E F0(abo)4.836 E -.165(ve)-.165 G
2.086(\212can trigger a g).165 F 2.086(arbage collection.)-.055 F .112
(Depending on the C compiler)72 492.906 R 2.861(,t)-.44 G .111
(he properly GC-protected object pointer)210.829 492.906 R F3(obj)2.861 E F0
.111(may be pushed on the)2.861 F(ar)72 507.906 Q .803(gument stack before)
-.198 F F3(P_Cons\(\))3.553 E F0 .803(is in)3.553 F -.22(vo)-.44 G -.11(ke).22
G .804(d, as the order in which function ar).11 F .804(guments\212just lik)
-.198 F(e)-.11 E 1.088(the operands of the assignment operator\212are e)72
522.906 R -.275(va)-.275 G 1.088(luated is unde\214ned in the C language.).275
F 1.088(In this)6.588 F .062(case, if a g)72 537.906 R .062
(arbage collection tak)-.055 F .062(es place and the heap object to which)-.11
F F3(obj)2.812 E F0 .062(points is mo)2.812 F -.165(ve)-.165 G(d,).165 E F3
(obj)2.813 E F0(will)2.813 E .181(be updated properly)72 552.906 R 2.931(,b)
-.715 G .181(ut the cop)170.586 552.906 R 2.931(yo)-.11 G 2.931(nt)228.153
552.906 S .181(he stack will not.)239.642 552.906 R(Ag)5.681 E .181
(ain, the problem can be a)-.055 F -.22(vo)-.22 G .181(ided easily).22 F .087
(by assigning the result of the nested function call to a temporary)72 567.906
R F3(Object)2.837 E F0 -.275(va)2.837 G .088(riable and use this v).275 F(ari-)
-.275 E(able in the enclosing function call:)72 581.906 Q F1
(temp = P_Cons\(car, cdr\);)100.346 604.409 Q(some_function\(obj, temp\);)
100.346 618.409 Q/F4 11/Times-Bold@0 SF 2.75(9.2. Primiti)72 655.909 R -.11(ve)
-.11 G 2.75(sw).11 G(ith V)152.74 655.909 Q(ariable-Length Ar)-1.012 E
(gument Lists)-.11 E F0(Primiti)97 674.509 Q -.165(ve)-.275 G 2.91(sw).165 G
.159(ith a v)152.644 674.509 R .159(ariable number of ar)-.275 F .159
(guments are re)-.198 F .159(gistered with the interpreter by calling)-.165 F
F3(De\214ne_Primitive\(\))72 689.509 Q F0 1.619(with the calling discipline)
4.369 F F3 -.66(VA)4.37 G(RARGS).66 E F0 1.62(and with dif)4.37 F 1.62
(ferent v)-.275 F 1.62(alues for)-.275 F F3(minar)4.37 E(gs)-.407 E F0(and)72
704.509 Q F3(maxar)3.329 E(gs)-.407 E F0 6.079(.T)C .579(he special symbol)
144.24 704.509 R F3(MANY)3.329 E F0 .578(can be gi)3.329 F -.165(ve)-.275 G
3.328(na).165 G 3.328(st)324.741 704.509 S .578(he maximum number of ar)335.406
704.509 R .578(guments to)-.198 F .945
(indicate that there is no upper limit on the primiti)72 719.509 R -.165(ve)
-.275 G 2.155 -.605('s n).165 H .945(umber of actual ar).605 F 3.695
(guments. The)-.198 F(C/C++)3.696 E 2.781(function implementing a primiti)72
734.509 R 3.11 -.165(ve w)-.275 H 2.78(ith a v).165 F 2.78
(ariable number of ar)-.275 F 2.78(guments is called with tw)-.198 F(o)-.11 E
EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(3-)288 51 S(ar)72 87 Q .514
(guments: an inte)-.198 F .514
(ger count that speci\214es the number of actual ar)-.165 F .515
(guments, and the Scheme ar)-.198 F(gu-)-.198 E 1.128(ments as an array of)72
102 R/F1 11/Times-Italic@0 SF(Objects)3.878 E F0 1.128(\(that is, a pointer to)
3.878 F F1(Object)3.878 E F0 3.877(\). The)B 1.127(objects passed as the ar)
3.877 F(gument)-.198 E -.165(ve)72 117 S 3.742(ctor of).165 F F1 -.66(VA)6.492
G(RARGS).66 E F0(primiti)6.492 E -.165(ve)-.275 G 6.492(sa).165 G 3.742
(re already re)229.902 117 R 3.743(gistered with the g)-.165 F 3.743
(arbage collector; calls to)-.055 F F1(GC_Link\(\))72 132 Q F0 1.503
(are not required.)4.253 F 1.503(As an e)7.003 F 1.502(xample for a primiti)
-.165 F 1.832 -.165(ve w)-.275 H 1.502(ith an arbitrary number of ar).165 F
(gu-)-.198 E 1.463(ments, here is the de\214nition of a simpli\214ed v)72 147 R
1.464(ariant of)-.275 F F1(append!)4.214 E F0 1.464
(\(which does not handle empty)6.964 F(lists\):)72 161 Q/F2 10/Courier@0 SF
(Object p_append_set \(int argc, Object *argv\); {)100.346 183.503 Q(int i;)
127.846 197.503 Q(for \(i = 0; i < argc-1; i++\))127.846 219.903 Q
(\(void\)P_Set_Cdr \(P_Last_Pair \(argv[i]\), argv[i+1]\);)155.346 233.903 Q
(return *argv;)127.846 247.903 Q(})100.346 261.903 Q F0
(The corresponding call to)72 283.403 Q F1(De\214ne_Primitive\(\))2.75 E F0
-.11(wo)2.75 G(uld read:).11 E F2
(Define_Primitive\(p_append_set, "append!", 0, MANY, VARARGS\);)100.346 305.906
Q F0 1.929(Besides implementing primiti)97 332.006 R -.165(ve)-.275 G 4.679(sw)
.165 G 1.928(ith an inde\214nite maximum number of ar)258.492 332.006 R 1.928
(guments, the)-.198 F F1 -.66(VA)72 347.006 S(RARGS).66 E F0 .359
(discipline is frequently used for primiti)3.109 F -.165(ve)-.275 G 3.109(sw)
.165 G .36(ith an optional ar)320.583 347.006 R 3.11(gument. F)-.198 F .36
(or e)-.165 F .36(xample, a)-.165 F(primiti)72 362.006 Q 1.171 -.165(ve e)-.275
H .841(ncapsulating the UNIX).165 F F1(open\(\))3.591 E F0 .84
(system call, which has tw)3.59 F 3.59<6f8c>-.11 G -.165(xe)391.176 362.006 S
3.59(da).165 G -.198(rg)415.369 362.006 S .84(uments \(\214lename,).198 F 1.271
(\215ags\) and an optional third ar)72 377.006 R 1.271
(gument \(the mode for ne)-.198 F 1.271(wly created \214les, i.)-.275 F 1.272
(e. calls with the \215ag)1.833 F F1(O_CREA)72 391.006 Q(T)-.407 E F0
(\), could be de\214ned as follo)A(ws:)-.275 E F2
(Object p_unix_open\(int argc, Object *argv\) {)100.346 413.509 Q
(char *name = get_file_name\(argv[0]\);)127.846 427.509 Q
(int flags = get_flags\(argv[1]\);)127.846 441.509 Q(mode_t mode;)127.846
455.509 Q(if \(flags & O_CREAT\) {)127.846 477.909 Q(if \(argc < 3\))155.346
491.909 Q/F3 10/Times-Italic@0 SF(err)182.846 505.909 Q(or)-.45 E(--too fe)-.2
E 2.5(wa)-.15 G -.37(rg)246.486 505.909 S(uments).37 E F2
(mode = get_mode\(argv[2]\);)155.346 519.909 Q(...)155.346 533.909 Q F0
(The call to)72 555.409 Q F1(De\214ne_Primitive\(\))2.75 E F0
(could then be written as:)2.75 E F2
(Define_Primitive\(p_unix_open, "unix-open", 2, 3, VARARGS\);)100.346 577.912 Q
/F4 11/Times-Bold@0 SF 2.75(10. Pr)72 615.412 R(ede\214ned Scheme T)-.198 E
(ypes)-.814 E F0 1.108
(This chapter introduces the Scheme types prede\214ned by Elk.)97 634.012 R
1.107(It be)6.607 F 1.107(gins with the `)-.165 F(`pointer)-.814 E(-)-.22 E
(less')72 649.012 Q 2.851('t)-.814 G .101(ypes such as boolean, whose v)100.921
649.012 R .102(alues are stored directly in the pointer \214eld of an)-.275 F
F1(Object)2.852 E F0 2.852(;f)C(ol-)491.779 649.012 Q(lo)72 664.012 Q
(wed by the types whose members are C)-.275 E F1(structs)2.75 E F0
(that reside on the Scheme heap.)2.75 E EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(4-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(10.1. Booleans)72 87 R(\(T_Boolean\))2.75 E/F2 11
/Times-Italic@0 SF(Objects)97 105.6 Q F0 .502(of type)3.252 F F2(T_Boolean)
3.252 E F0 .502(can hold the v)3.252 F .502(alues #t and #f.)-.275 F -1.1 -.88
(Tw o)6.002 H F2(Objects)4.132 E F0 .501(initialized to #t and)3.252 F
(#f, respecti)72 119.6 Q -.165(ve)-.275 G(ly).165 E 2.75(,a)-.715 G(re a)
149.044 119.6 Q -.275(va)-.22 G(ilable as the e).275 E(xternal C v)-.165 E
(ariables)-.275 E F2 -.605(Tr)2.75 G(ue).605 E F0(and)2.75 E F2 -.825(Fa)2.75 G
(lse).825 E F0 5.5(.T)C(he macro)400.845 119.6 Q/F3 10/Courier@0 SF
(Truep\(obj\))100.346 142.103 Q F0 .933
(can be used to check whether an arbitrary Scheme object is re)72 164.603 R
-.055(ga)-.165 G .933(rded as true.).055 F .933(Use of)6.433 F F2 -.605(Tr)
3.683 G(uep\(\)).605 E F0(is)3.683 E(not necessarily equi)72 178.603 Q -.275
(va)-.275 G(lent to).275 E F3(!EQ\(obj,False\))100.346 201.106 Q F0 1.236
(because the empty list may count as f)72 223.606 R 1.235
(alse in addition to #f if backw)-.11 F 1.235(ards compatibility to older)-.11
F .095(Scheme language v)72 238.606 R .095(ersions has been enabled.)-.165 F F2
-.605(Tr)5.595 G(uep\(\)).605 E F0 .095(may e)2.845 F -.275(va)-.275 G .096
(luate its ar).275 F .096(gument twice and should)-.198 F(therefore not be in)
72 253.606 Q -.22(vo)-.44 G -.11(ke).22 G 2.75(dw).11 G
(ith a function call or a comple)189.755 253.606 Q 2.75(xe)-.165 G(xpression.)
334.537 253.606 Q(The tw)72 271.206 Q 2.75(of)-.11 G(unctions)114.658 271.206 Q
F3(int Eqv\(Object, Object\);)100.346 293.709 Q(int Equal\(Object, Object\);)
100.346 307.709 Q F0 .921(are identical to the primiti)72 330.209 R -.165(ve)
-.275 G(s).165 E F2(P_Eqv\(\))3.67 E F0(and)3.67 E F2(P_Equal\(\))3.67 E F0
3.67(,e)C .92(xcept that the)324.684 330.209 R 3.67(yr)-.165 G .92
(eturn a C inte)398.46 330.209 R .92(ger rather)-.165 F
(than a Scheme boolean and therefore can be used more con)72 345.209 Q -.165
(ve)-.44 G(niently in C/C++.).165 E F1 2.75(10.2. Characters)72 375.209 R
(\(T_Character\))2.75 E F0(The character v)97 392.809 Q(alue stored in an)-.275
E F2(Object)2.75 E F0(of type)2.75 E F2(T_Char)2.75 E(acter)-.165 E F0
(can be obtained by the macro)2.75 E F3(CHAR\(char_obj\))100.346 415.312 Q F0
(as a non-ne)72 436.812 Q -.055(ga)-.165 G(ti).055 E -.165(ve)-.275 G F2(int)
2.915 E F0 5.5(.A)C(ne)181.626 436.812 Q 2.75(wc)-.275 G
(haracter object is created by calling the function)207.311 436.812 Q F3
(Object Make_Char\(int c\);)100.346 459.315 Q F0(The prede\214ned e)72 481.815
Q(xternal C v)-.165 E(ariable)-.275 E F2(Ne)2.75 E(wline)-.165 E F0
(holds the ne)2.75 E(wline character as a Scheme)-.275 E F2(Object)2.75 E F0(.)
A F1 2.75(10.3. Empty)72 511.815 R(List \(T_Null\))2.75 E F0 .319(The type)97
530.415 R F2(T_Null)3.069 E F0 .319(has e)3.069 F .32
(xactly one member\212the empty list; hence all)-.165 F F2(Objects)3.07 E F0
.32(of this type are)3.07 F 3.399(identical. The)72 545.415 R .648
(empty list is a)3.399 F -.275(va)-.22 G .648(ilable as the e).275 F .648
(xternal C v)-.165 F(ariable)-.275 E F2(Null)3.398 E F0 6.148(.T)C .648(his v)
392.31 545.415 R .648(ariable is often used)-.275 F .07(to initialize)72
560.415 R F2(Objects)2.82 E F0 .07(that will be assigned their real v)2.82 F
.07(alues later)-.275 F 2.82(,f)-.44 G .071(or e)355.569 560.415 R .071
(xample, as the \214ll element for)-.165 F(ne)72 575.415 Q 1.395(wly created v)
-.275 F 1.395(ectors or to initialize)-.165 F F2(Objects)4.145 E F0 1.395
(in order to)4.145 F F2(GC_Link\(\))4.144 E F0 4.144(them. A)4.144 F(macro)
4.144 E F2(Nullp\(\))4.144 E F0(is)4.144 E(pro)72 589.415 Q
(vided as a shorthand for checking if an)-.165 E F2(Object)2.75 E F0
(is the empty list:)2.75 E F3(#define Nullp\(obj\))100.346 611.918 Q
(\(TYPE\(obj\) == T_Null\))220.346 611.918 Q F0
(This macro is used frequently in the termination condition of for)72 633.418 Q
(-loops that scan a Scheme list:)-.22 E F3(Object tail;)100.346 655.921 Q(...)
100.346 669.921 Q(for \(tail = some_list; !Nullp\(tail\); tail = Cdr\(tail\)\))
100.346 683.921 Q(process_element\(Car\(tail\)\);)127.846 697.921 Q F0(\()72
720.421 Q F2(Car\(\))A F0(and)3.4 E F2(Cdr\(\))3.4 E F0 .65
(essentially are shorthands for)3.4 F F2(P_Car\(\))3.4 E F0(and)3.4 E F2
(P_Cdr\(\))3.4 E F0 .651(and will be re)3.4 F .651(visited in the)-.275 F EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(5-)288 51 S
(section on pairs\).)72 87 Q/F1 11/Times-Bold@0 SF 2.75(10.4. End)72 117 R
(of File \(T_End_Of_File\))2.75 E F0 .745(The type)97 135.6 R/F2 11
/Times-Italic@0 SF(T_End_Of_F)3.495 E(ile)-.495 E F0 .745
(has one member\212the end-of-\214le object\212and is only rarely used)3.495 F
.906(from within user)72 150.6 R .906(-supplied C/C++ code.)-.22 F .906(The e)
6.406 F .906(xternal C v)-.165 F(ariable)-.275 E F2(Eof)3.657 E F0 .907
(is initialized to the end-of-)3.657 F(\214le object.)72 165.6 Q F1 2.75
(10.5. Integers)72 195.6 R(\(T_Fixnum and T_Bignum\))2.75 E F0(Inte)97 214.2 Q
1.875(gers come in tw)-.165 F 4.624<6f8d>-.11 G -.22(avo)205.655 214.2 S(rs:)
.22 E F2(\214xnums)4.624 E F0(and)4.624 E F2(bignums)4.624 E F0 7.374(.T)C
1.874(he former ha)349.584 214.2 R 2.204 -.165(ve t)-.22 H 1.874(heir v).165 F
1.874(alue stored)-.275 F .493
(directly in the pointer \214eld and are wide enough to hold most C)72 229.2 R
F2(ints)3.243 E F0 5.993(.B)C .493(ignums can hold inte)392.389 229.2 R(gers)
-.165 E 1.481(of arbitrary size and are stored in the heap.)72 244.2 R -1.1
-.88(Tw o)6.981 H 1.481(macros are pro)5.111 F 1.481
(vided to test whether a gi)-.165 F -.165(ve)-.275 G(n).165 E
(signed \(or unsigned, respecti)72 258.2 Q -.165(ve)-.275 G(ly\) inte).165 E
(ger \214ts into a \214xnum:)-.165 E/F3 10/Courier@0 SF(FIXNUM_FITS\(integer\))
100.346 280.703 Q(UFIXNUM_FITS\(unsigned_integer\))100.346 294.703 Q F0 .001
(The former al)72 317.203 R -.11(wa)-.11 G .001(ys returns 1 in Elk 3.0, b).11
F .001(ut the range of inte)-.22 F .001(ger v)-.165 F .001
(alues that can be represented as a)-.275 F .555
(\214xnum may be restricted in future re)72 332.203 R 3.305(visions. It)-.275 F
.555(is guaranteed, ho)3.305 F(we)-.275 E -.165(ve)-.275 G 1.434 -.44(r, t).165
H .554(hat at least tw).44 F 3.304(ob)-.11 G .554(its less)473.801 332.203 R
(than the machine')72 347.203 Q 2.75(sw)-.605 G(ord size will be a)165.071
347.203 Q -.275(va)-.22 G(ilable for \214xnums in future v).275 E
(ersions of Elk.)-.165 E(The v)72 364.803 Q
(alue stored in a \214xnum can be obtained as a C)-.275 E F2(int)2.75 E F0
(by calling the macro)2.75 E F3(FIXNUM\(fixnum_obj\))100.346 387.306 Q F0 2.75
(Am)72 408.806 S(acro)91.25 408.806 Q F3(Check_Integer\(obj\))100.346 431.309 Q
F0 .082(can be used as a shorthand for checking whether an)72 453.809 R F2
(Object)2.832 E F0 .082(is a \214xnum or a bignum and raising an)2.832 F
(error otherwise.)72 468.809 Q(The follo)72 486.409 Q(wing functions are pro)
-.275 E(vided to con)-.165 E -.165(ve)-.44 G(rt C inte).165 E
(gers to Scheme inte)-.165 E(gers:)-.165 E F3(Object Make_Integer\(int\);)
100.346 508.912 Q(Object Make_Unsigned\(unsigned\);)100.346 522.912 Q
(Object Make_Long\(long\);)100.346 536.912 Q
(Object Make_Unsigned_Long\(unsigned long\);)100.346 550.912 Q F2(Mak)72
573.412 Q(e_Inte)-.11 E -.11(ge)-.44 G(r\(\)).11 E F0 .832
(returns a \214xnum object if)3.583 F F2(FIXNUM_FITS\(\))3.582 E F0 .832
(returns true for the ar)3.582 F .832(gument, other)-.198 F(-)-.22 E 2.369
(wise a bignum.)72 588.412 R(Lik)7.869 E -.275(ew)-.11 G(ise,).275 E F2(Mak)
5.119 E(e_Long\(\))-.11 E F0 2.369(usually returns a \214xnum b)5.119 F 2.37
(ut may ha)-.22 F 2.7 -.165(ve t)-.22 H 5.12(or).165 G 2.37(esort to)468.938
588.412 R 2.585(bignums on architectures where a C)72 603.412 R F2(long)5.335 E
F0 2.585(is wider than an)5.335 F F2(int)5.335 E F0(.)A F2(Mak)8.084 E
(e_Unsigned\(\))-.11 E F0 2.584(returns a)5.334 F 2.58
(bignum if the speci\214ed inte)72 618.412 R 2.58(ger is lar)-.165 F 2.581
(ger than the lar)-.198 F 2.581(gest positi)-.198 F -.165(ve)-.275 G F2(int)
5.496 E F0 2.581(that \214ts into a \214xnum)5.331 F(\()72 633.412 Q F2
(UFIXNUM_FITS\(\))A F0 .168(returns zero in this case\).)2.918 F .167
(Another set of functions con)5.667 F -.165(ve)-.44 G .167(rt a Scheme number)
.165 F(to a C inte)72 647.412 Q(ger:)-.165 E EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(6-)288 51 S/F1 10/Courier@0
SF(int Get_Integer\(Object\);)100.346 86 Q(int Get_Exact_Integer\(Object\);)
100.346 100 Q(unsigned Get_Unsigned\(Object\);)100.346 122.4 Q
(unsigned Get_Exact_Unsigned\(Object\);)100.346 136.4 Q
(long Get_Long\(Object\);)100.346 158.8 Q(long Get_Exact_Long\(Object\);)
100.346 172.8 Q(unsigned long Get_Unsigned_Long\(Object\);)100.346 195.2 Q
(unsigned long Get_Exact_Unsigned_Long\(Object\);)100.346 209.2 Q F0
(These functions signal an error if one of the follo)72 231.7 Q
(wing conditions is true:)-.275 E 21.15<8374>97 250.3 S 1.384(he ar)125.058
250.3 R 1.385(gument is neither a \214xnum, nor a bignum, nor a \215onum \(rea\
l number\) with a)-.198 F
(fractional part of zero \(more about \215onums in the ne)122 265.3 Q
(xt section\);)-.165 E 21.15<8374>97 283.9 S(he function is one of the `)
125.058 283.9 Q(`unsigned')-.814 E 2.75('v)-.814 G(ariants and the ar)295.151
283.9 Q(gument is a ne)-.198 E -.055(ga)-.165 G(ti).055 E .33 -.165(ve n)-.275
H(umber;).165 E 21.15<8374>97 302.5 S(he ar)125.058 302.5 Q
(gument is a bignum too lar)-.198 E(ge for the respecti)-.198 E .33 -.165(ve r)
-.275 H(eturn type;).165 E 21.15<8374>97 321.1 S .456
(he function is one of the `)125.058 321.1 R(`e)-.814 E(xact')-.165 E 3.205('v)
-.814 G .455(ariants and the ar)281.665 321.1 R .455
(gument is neither a \214xnum nor a)-.198 F(bignum;)122 336.1 Q 21.15<8374>97
354.7 S(he ar)125.058 354.7 Q
(gument is a \215onum that cannot be coerced to the respecti)-.198 E .33 -.165
(ve r)-.275 H(eturn type.).165 E .296(As all of the abo)72 373.3 R .627 -.165
(ve f)-.165 H .297(unctions include suitable type-checks, primiti).165 F -.165
(ve)-.275 G 3.047(sr).165 G(ecei)384.903 373.3 Q .297(ving inte)-.275 F .297
(ger ar)-.165 F(guments)-.198 E .974
(can be written in a simple and straightforw)72 388.3 R .974(ard w)-.11 F(ay)
-.11 E 6.474(.F)-.715 G .974(or e)317.652 388.3 R .974(xample, a primiti)-.165
F 1.304 -.165(ve e)-.275 H .974(ncapsulating the).165 F(UNIX)72 403.3 Q/F2 11
/Times-Italic@0 SF(dup)3.982 E F0 1.232(system call \(which returns an inte)
3.982 F 1.233(ger \214le descriptor pointing to the same \214le as the)-.165 F
(original one\) can be written as:)72 417.3 Q F1
(Object p_unix_dup\(Object fd\) {)100.346 439.803 Q
(return Make_Integer\(dup\(Get_Exact_Unsigned\(fd\)\)\);)124.346 453.803 Q F0
.875(Note that if)72 476.303 R F2(Get_Unsigned\(\))3.625 E F0(\(or)3.625 E F2
(Get_Inte)3.625 E -.11(ge)-.44 G(r\(\)).11 E F0 3.625(\)h)C .875
(ad been used here in place of the `)291.145 476.303 R(`e)-.814 E(xact')-.165 E
3.624('c)-.814 G(on-)489.337 476.303 Q -.165(ve)72 490.303 S
(rsion function, it w).165 E(ould be possible to write e)-.11 E
(xpressions such as:)-.165 E F1(\(define fd \(unix-dup \(truncate 1.2\)\)\))
100.346 512.806 Q/F3 11/Times-Bold@0 SF 2.75(10.6. Floating)72 550.306 R -.22
(Po)2.75 G(int Numbers \(T_Flonum\)).22 E F0 .795(Real and ine)97 568.906 R
.795(xact numbers are represented as)-.165 F F2(Objects)3.545 E F0 .796
(of type)3.545 F F2(T_Flonum)3.546 E F0 6.296(.E)C .796(ach such object)434.593
568.906 R .17(holds a pointer to a structure on the heap with a component)72
583.906 R F2(val)2.92 E F0 .17(of type)2.92 F F2(double)2.92 E F0 2.92(,s)C
2.92(ot)427.59 583.906 S .17(hat the e)439.068 583.906 R(xpres-)-.165 E(sion)72
597.906 Q F1(FLONUM\(flonum_obj\)->val)100.346 620.409 Q F0 .213
(can be used to obtain the)72 642.909 R F2(double)2.963 E F0 -.275(va)2.963 G
2.963(lue. T).275 F 2.963(oc)-.88 G(on)269.2 642.909 Q -.165(ve)-.44 G .213
(rt a Scheme number to a).165 F F2(double)2.963 E F0(re)2.963 E -.055(ga)-.165
G .214(rdless of its).055 F(type, the more general function)72 656.909 Q F1
(double Get_Double\(Object\);)100.346 679.412 Q F0 1.144(can be used.)72
701.912 R 1.144(It raises an error if the ar)6.644 F 1.144
(gument is not a \214xnum, bignum, or \215onum, or if it is a)-.198 F
(bignum too lar)72 716.912 Q(ge to \214t into a)-.198 E F2(double)2.75 E F0(.)A
EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(7-)288 51 S(The functions)72
86 Q/F1 10/Courier@0 SF(Object Make_Flonum\(double\);)100.346 108.503 Q
(Object Make_Reduced_Flonum\(double\);)100.346 122.503 Q F0(con)72 145.003 Q
-.165(ve)-.44 G .18(rt a C).165 F/F2 11/Times-Italic@0 SF(double)2.93 E F0 .181
(to a \215onum; the latter returns a \214xnum if the)2.93 F F2(double)2.931 E
F0 .181(is small enough to \214t into)2.931 F 2.75<618c>72 159.003 S
(xnum and has a fractional part of zero.)85.75 159.003 Q(The macro)5.5 E F1
(Check_Number\(obj\))100.346 181.506 Q F0 .493(checks whether the gi)72 204.006
R -.165(ve)-.275 G(n).165 E F2(Object)3.243 E F0 .493
(is a number \(that is, a \214xnum, bignum, or \215onum in the current)3.243 F
(re)72 219.006 Q(vision of Elk\) and raises an error otherwise.)-.275 E/F3 11
/Times-Bold@0 SF 2.75(10.7. P)72 249.006 R(airs \(T_P)-.11 E(air\))-.11 E F0
-.165(Pa)97 266.606 S(irs ha).165 E .33 -.165(ve t)-.22 H .22 -.11(wo c).165 H
(omponents of type).11 E F2(Object)2.75 E F0 2.75(,t)C(he car and the cdr)
291.26 266.606 Q 2.75(,t)-.44 G(hat can be accessed as:)377.566 266.606 Q F1
(PAIR\(pair_obj\)->car)100.346 289.109 Q(PAIR\(pair_obj\)->cdr)100.346 303.109
Q F0 -1.1 -.88(Tw o)72 325.609 T(macros)3.836 E F2(Car\(\))2.956 E F0(and)2.956
E F2(Cdr\(\))2.956 E F0 .206(are pro)2.956 F .207
(vided as shorthands for these e)-.165 F .207(xpressions, and another macro)
-.165 F F2(Cons\(\))72 339.609 Q F0(can be used in place of)2.75 E F2
(P_Cons\(\))2.75 E F0(to create a ne)2.75 E 2.75(wp)-.275 G(air)327.101 339.609
Q 5.5(.T)-.605 G(he macro)353.072 339.609 Q F1(Check_List\(obj\))100.346
362.112 Q F0 .932(checks whether the speci\214ed)72 384.612 R F2(Object)3.682 E
F0 .931(is either a pair or the empty list and signals an error other)3.682 F
(-)-.22 E 2.75(wise. The)72 398.612 R(prede\214ned function)2.75 E F1
(int Fast_Length\(Object list\);)100.346 421.115 Q F0 .634
(can be used to compute the length of the gi)72 443.615 R -.165(ve)-.275 G
3.385(nS).165 G .635(cheme list.)291.765 443.615 R .635
(This function is more ef)6.135 F .635(\214cient than)-.275 F 1.859
(the primiti)72 458.615 R -.165(ve)-.275 G F2(P_Length\(\))4.774 E F0 4.609(,b)
C 1.859(ecause it neither checks the type of the ar)197.521 458.615 R 1.858
(gument nor whether the)-.198 F(gi)72 472.615 Q -.165(ve)-.275 G 2.75(nl).165 G
(ist is proper)101.81 472.615 Q 2.75(,a)-.44 G(nd the result need not be con)
163.696 472.615 Q -.165(ve)-.44 G(rted to a Scheme number).165 E 5.5(.T)-.605 G
(he function)424.297 472.615 Q F1(Object Copy_List\(Object list\);)100.346
495.118 Q F0(returns a cop)72 517.618 Q 2.75(yo)-.11 G 2.75(ft)142.455 517.618
S(he speci\214ed list \(including all its sublists\).)151.926 517.618 Q .349
(As e)97 536.218 R .349(xplained in section 9.1, care must be tak)-.165 F .349
(en when mixing calls to these macros, because)-.11 F F2(Cons\(\))72 550.218 Q
F0(may trigger a g)2.75 E(arbage collection: an e)-.055 E(xpression such as)
-.165 E F1(Car\(x\) = Cons\(y, z\);)100.346 572.721 Q F0(is wrong, e)72 594.221
Q -.165(ve)-.275 G 2.75(ni).165 G(f)141.828 594.221 Q F2(x)2.75 E F0
(is properly `)2.75 E(`GC_Link)-.814 E(ed')-.11 E(', and should be replaced by)
-.814 E F1(tmp = Cons\(x, y\);)100.346 616.724 Q(Car\(x\) = tmp;)100.346
630.724 Q F0(or a similar sequence.)72 653.224 Q F3 2.75(10.8. Symbols)72
683.224 R(\(T_Symbol\))2.75 E F2(Objects)97 701.824 Q F0 1.564(of type)4.314 F
F2(T_Symbol)4.314 E F0(ha)4.314 E 1.894 -.165(ve o)-.22 H 1.564
(ne public component\212the symbol').165 F 4.314(sn)-.605 G 1.563
(ame as a Scheme)423.861 701.824 R(string \(that is, an)72 715.824 Q F2(Object)
2.75 E F0(of type)2.75 E F2(T_String)2.75 E F0(\):)A EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 50 S 2.75(8-)288 50 S/F1 10/Courier@0
SF(SYMBOL\(symbol_obj\)->name)100.346 86 Q F0 2.75(An)72 107.5 S .55 -.275
(ew s)88.192 107.5 T(ymbol can be created by calling one of the functions).275
E F1(Object Intern\(const char *\);)100.346 130.003 Q
(Object CI_Intern\(const char *\);)100.346 144.003 Q F0 2.465(with the ne)72
166.503 R 5.215(ws)-.275 G(ymbol')142.975 166.503 Q 5.215(sn)-.605 G 2.465
(ame as the ar)189.143 166.503 R(gument.)-.198 E/F2 11/Times-Italic@0 SF
(CI_Intern\(\))7.966 E F0 2.466(is the case-insensiti)5.216 F 2.796 -.165(ve v)
-.275 H 2.466(ariant of)-.11 F F2(Intern\(\))72 181.503 Q F0 3.039(;i)C 3.039
(tm)115.365 181.503 S .289(aps all upper case characters to lo)130.02 181.503 R
.289(wer case.)-.275 F F2(EQ\(\))5.788 E F0 .288(yields true for all)3.038 F F2
(Objects)3.038 E F0(returned)3.038 E .953(by calls to)72 196.503 R F2
(Intern\(\))3.703 E F0 .953(with strings with the same contents \(or calls to)
3.703 F F2(CI_Intern\(\))3.704 E F0 .954(with strings that)3.704 F 1.34
(are identical after case con)72 211.503 R -.165(ve)-.44 G 4.089(rsion\). This)
.165 F 1.339(is the main property that distinguishes symbols from)4.089 F
(strings in Scheme.)72 226.503 Q 3.4(As)97 245.103 S .651
(ymbol that is used by more than one function can be stored in a global v)
112.621 245.103 R .651(ariable to sa)-.275 F -.165(ve)-.22 G(calls to)72
259.103 Q F2(Intern\(\))2.75 E F0 5.5(.T)C(his can be done using the con)
155.402 259.103 Q -.165(ve)-.44 G(nience function).165 E F1
(void Define_Symbol\(Object *var, const char *name\);)100.346 281.606 Q F2
(De\214ne_Symbol\(\))72 304.106 Q F0 2.09(is called with the address of a v)
4.84 F 2.09(ariable where the ne)-.275 F 2.089(wly-interned symbol is)-.275 F
.117(stored and the name of the symbol to be handed to)72 319.106 R F2
(Intern\(\))2.867 E F0 5.617(.T)C .117(he function adds the ne)347.139 319.106
R 2.868(ws)-.275 G .118(ymbol to)464.458 319.106 R(the g)72 333.106 Q
(arbage collector')-.055 E 2.75(sr)-.605 G(oot set to mak)177.941 333.106 Q
2.75(ei)-.11 G 2.75(tr)250.552 333.106 S
(eachable \(as described in section 12.3.)260.023 333.106 Q(Example:)5.5 E F1
(static Object sym_else;)100.346 355.609 Q(...)100.346 369.609 Q
(void elk_init_example\(void\) {)100.346 383.609 Q
(Define_Symbol\(&sym_else, "else"\);)127.846 397.609 Q(...)127.846 411.609 Q(})
100.346 425.609 Q/F3 11/Times-Bold@0 SF 2.75(10.8.1. The)72 463.109 R
(Non-Printing Symbol)2.75 E F0 1.077(By con)97 481.709 R -.165(ve)-.44 G 1.077
(ntion, Scheme primiti).165 F -.165(ve)-.275 G 3.827(st).165 G 1.077
(hat do not ha)258.234 481.709 R 1.406 -.165(ve a u)-.22 H 1.076
(seful return v).165 F 1.076(alue \(for e)-.275 F 1.076(xample the)-.165 F .406
(output primiti)72 496.709 R -.165(ve)-.275 G .406(s\) return the `).165 F .407
(`non-printing symbol')-.814 F 3.157('i)-.814 G 3.157(nE)310.081 496.709 S
3.157(lk. The)325.459 496.709 R .407(name of this symbol consists of)3.157 F
.781(the empty string; it does not produce an)72 511.709 R 3.531(yo)-.165 G
.781(utput when it is printed, for e)266.293 511.709 R .78
(xample, by the tople)-.165 F -.165(ve)-.275 G(l).165 E(read-e)72 526.709 Q
-.275(va)-.275 G 1.642(l-print loop.).275 F 1.642
(In Scheme code, the non-printing symbol can be generated by using the)7.142 F
.096(reader syntax `)72 541.709 R(`#v')-.814 E 2.846('o)-.814 G 2.846(rb)
166.261 541.709 S 2.846(yc)178.27 541.709 S(alling)191.5 541.709 Q F2(string)
2.846 E/F4 11/Symbol SF(-)A F2(>symbol)A F0 .096(with the empty string.)2.846 F
.096(On the C language le)5.596 F -.165(ve)-.275 G(l,).165 E .131
(the non-printing symbol is a)72 556.709 R -.275(va)-.22 G .132
(ilable as the e).275 F .132(xternal v)-.165 F(ariable)-.275 E F2 -1.221(Vo)
2.882 G(id)1.221 E F0 2.882(,s)C 2.882(ot)367.82 556.709 S .132(hat primiti)
379.26 556.709 R -.165(ve)-.275 G 2.882(sl).165 G .132(acking a use-)445.7
556.709 R(ful return v)72 570.709 Q(alue can use)-.275 E F1(return Void;)
100.346 593.212 Q F3 2.75(10.9. Strings)72 630.712 R(\(T_String\))2.75 E F2
(Objects)97 649.312 Q F0 .627(of type string ha)3.377 F .957 -.165(ve t)-.22 H
.847 -.11(wo c).165 H .627
(omponents\212the length and the contents of the string as a).11 F(pointer to)
72 663.312 Q F2 -.165(ch)2.75 G(ar).165 E F0(:)A F1(STRING\(string_obj\)->size)
100.346 685.815 Q(STRING\(string_obj\)->data)100.346 699.815 Q F0(The)72
722.315 Q F2(data)3.854 E F0 1.105(component is not null-terminated, as a stri\
ng itself may contain a null-byte as a v)3.854 F(alid)-.275 E EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-2)276.087 51 S 2.75(9-)288 51 S
(character in Elk.)72 86 Q 2.75(AS)5.5 G
(cheme string is created by calling the function)166.699 86 Q/F1 10/Courier@0
SF(Object Make_String\(const char *init, int size\);)100.346 108.503 Q/F2 11
/Times-Italic@0 SF(size)72 131.003 Q F0 1.328(is the length of the ne)4.078 F
1.328(wly-created string.)-.275 F F2(init)6.828 E F0 1.327
(is either the null-pointer or a pointer to)4.078 F F2(size)4.077 E F0
(characters that are copied into the ne)72 145.003 Q 2.75(wS)-.275 G
(cheme string.)249.815 145.003 Q -.165(Fo)5.5 G 2.75(re).165 G
(xample, the sequence)337.166 145.003 Q F1(Object str;)100.346 167.506 Q(...)
100.346 181.506 Q(str = Make_String\(0, 100\);)100.346 195.506 Q
(bzero\(STRING\(str\)->data, 100\);)100.346 209.506 Q F0
(generates a string holding 100 null-bytes.)72 232.006 Q .136(Most primiti)97
250.606 R -.165(ve)-.275 G 2.886(st).165 G .136(hat recei)172.622 250.606 R
.466 -.165(ve a S)-.275 H .136(cheme string as one of their ar).165 F .137
(guments pass the string')-.198 F 2.887(sc)-.605 G(on-)489.337 250.606 Q .009
(tents to a C function \(for e)72 265.606 R .009
(xample a C library function\) that e)-.165 F .008(xpects an ordinary)-.165 F
2.758(,n)-.715 G .008(ull-terminated C)431.579 265.606 R 2.75(string. F)72
279.606 R(or this purpose Elk pro)-.165 E(vides a function)-.165 E F1
(char *Get_String\(Object\);)100.346 302.109 Q F0 .318
(that returns the contents of the Scheme string ar)72 324.609 R .318
(gument as a null-terminated C string.)-.198 F .319(An error is)5.818 F 1.376
(raised if the ar)72 339.609 R 1.376(gument is not a string.)-.198 F F2
(Get_String\(\))6.876 E F0 1.376(has to create a cop)4.126 F 4.126(yo)-.11 G
4.126(ft)411.123 339.609 S 1.376(he contents of the)421.97 339.609 R .528
(Scheme string in order to append the null-character)72 354.609 R 6.029(.T)
-.605 G 3.279(oa)315.464 354.609 S -.22(vo)328.907 354.609 S .529
(id requiring the caller to pro).22 F .529(vide and)-.165 F .858
(release space for the cop)72 369.609 R -.715(y,)-.11 G F2(Get_String\(\))4.323
E F0 .858(operates on and returns NUMSTRB)3.608 F .857(UFS internal, c)-.11 F
(ycli-)-.165 E .818(cally reused b)72 384.609 R(uf)-.22 E .818(fers \(the v)
-.275 F .818(alue of NUMSTRB)-.275 F .818(UFS is 3 in Elk 3.0\).)-.11 F
(Consequently)6.318 E 3.569(,n)-.715 G 3.569(om)449.815 384.609 S .819
(ore than)467.442 384.609 R(NUMSTRB)72 399.609 Q .266(UFS results of)-.11 F F2
(Get_String\(\))3.016 E F0 .265
(can be used simultaneously \(which is rarely a problem in)3.016 F 5.082
(practice\). As)72 414.609 R 2.332(an e)5.082 F 2.332(xample, a Scheme primiti)
-.165 F 2.663 -.165(ve t)-.275 H 2.333(hat calls the C library function).165 F
F2 -.11(ge)5.083 G(ten).11 E(v\(\))-.44 E F0(and)5.083 E
(returns #f on error can be written as)72 428.609 Q F1
(Object p_getenv\(Object name\) {)100.346 451.112 Q
(char *ret = getenv\(Get_String\(name\)\);)127.846 465.112 Q
(return ret ? Make_String\(ret, strlen\(ret\)\) : False;)127.846 479.112 Q(})
100.346 493.112 Q F0 1.488(If more strings are to be used simultaneously)97
519.212 R 4.237(,t)-.715 G 1.487(he macro)314.416 519.212 R F2(Get_String_Stac)
4.237 E(k\(\))-.22 E F0 1.487(can be used)4.237 F 3.163(instead. It)72 534.212
R .413(is called with the Scheme object and the name of a v)3.163 F .414
(ariable of type `)-.275 F(`char*')-.814 E 3.164('t)-.814 G 3.164(ow)468.452
534.212 S(hich)485.058 534.212 Q 2.674(the C string will be assigned.)72
549.212 R F2(Get_String_Stac)8.174 E(k\(\))-.22 E F0 2.673
(allocates space by means of)5.424 F F2(Alloca\(\))5.423 E F0(\(as)5.423 E
-.165(ex)72 564.212 S .783(plained in section 7.5\); hence a call to).165 F F2
(Alloca_Be)3.534 E(gin)-.44 E F0 .784
(must be placed in the declarations of the)3.534 F
(enclosing function or block, and)72 579.212 Q F2(Alloca_End)2.75 E F0
(must be called before returning from it.)2.75 E .97(An additional function)97
597.812 R F2(Get_Str)3.719 E(sym\(\))-.11 E F0 .969(and an additional macro)
3.719 F F2(Get_Str)3.719 E(sym_Stac)-.11 E(k\(\))-.22 E F0 .969(are pro-)3.719
F .333(vided by Elk; these are identical to)72 612.812 R F2(Get_String\(\))
3.083 E F0(and)3.084 E F2(Get_String_Stac)3.084 E(k\(\))-.22 E F0 3.084(,r)C
(especti)401.703 612.812 Q -.165(ve)-.275 G(ly).165 E 3.084(,e)-.715 G .334
(xcept that)460.59 612.812 R .198(the Scheme object may also be a symbol.)72
627.812 R .198(In this case, the symbol')5.698 F 2.948(sn)-.605 G .198
(ame is tak)380.715 627.812 R .197(en as the string to)-.11 F(be con)72 642.812
Q -.165(ve)-.44 G(rted.).165 E 1.193(As an e)97 661.412 R 1.193
(xample for the use of)-.165 F F2(Get_String_Stac)3.943 E(k\(\))-.22 E F0 3.944
(,h)C 1.194(ere is a simple Scheme primiti)331.308 661.412 R -.165(ve)-.275 G
F2 -.22(ex)4.109 G(ec).22 E F0 .759
(that is called with the name of a program and one more more ar)72 676.412 R
.758(guments and passes them to the)-.198 F F2 -.22(ex)72 690.412 S(ecv\(\)).22
E F0(system call:)2.75 E EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(0-)288 51 S/F1 10/Courier@0
SF(Object p_exec\(int argc, Object *argv\) {)100.346 86 Q(char **argp; int i;)
127.846 100 Q(Alloca_Begin;)127.846 114 Q
(Alloca\(argp, char**, argc*sizeof\(char *\)\);)127.846 136.4 Q
(for \(i = 1; i < argc; i++\))127.846 150.4 Q
(Get_String_Stack\(argv[i], argp[i-1]\);)155.346 164.4 Q(argp[i-1] = 0;)127.846
178.4 Q(execv\(Get_String\(*argv\), argp\);)127.846 192.4 Q
(/* must not return */)331.846 192.4 Q/F2 10/Times-Italic@0 SF(err)127.846
206.4 Q(or)-.45 E(...)-1.11 E F1(})100.346 220.4 Q(elk_init_example\(\) {)
100.346 242.8 Q(Define_Primitive\(p_exec, "exec", 2, MANY, VARARGS\);)127.846
256.8 Q(})100.346 270.8 Q F0(The primiti)72 292.3 Q .33 -.165(ve c)-.275 H
(an be used as follo).165 E(ws:)-.275 E F1(\(exec "/bin/ls" "ls" "-l"\))100.346
314.803 Q/F3 11/Times-Italic@0 SF(Get_String\(\))72 337.303 Q F0 1.507
(could not be used in this primiti)4.256 F -.165(ve)-.275 G 4.257(,b).165 G
1.507(ecause the number of string ar)303.305 337.303 R 1.507(guments may)-.198
F -.165(ex)72 352.303 S(ceed the number of static b).165 E(uf)-.22 E
(fers maintained by)-.275 E F3(Get_String\(\))2.75 E F0(.)A/F4 11/Times-Bold@0
SF 2.75(10.10. V)72 382.303 R(ectors \(T_V)-1.1 E(ector\))-1.1 E F0 .31
(The layout of)97 400.903 R F3(Objects)3.06 E F0 .31(of type v)3.06 F .31
(ector is identical to that of strings, e)-.165 F .31(xcept that the)-.165 F F3
(data)3.06 E F0(com-)3.059 E 2.465(ponent is an array of)72 415.903 R F3
(Objects)5.215 E F0 7.965(.A)C(function)234.972 415.903 Q F3(Mak)5.215 E(e_V)
-.11 E(ector\(\))-1.221 E F0 2.465(creates a ne)5.215 F 5.216(wv)-.275 G 2.466
(ector as has been)421.769 415.903 R -.165(ex)72 430.903 S
(plained in section 9.1 abo).165 E -.165(ve)-.165 G(.).165 E F4 2.75(10.11. P)
72 460.903 R(orts \(T_P)-.22 E(ort\))-.22 E F0 .848(The components of)97
479.503 R F3(Objects)3.598 E F0 .848(of type)3.598 F F3(T_P)3.598 E(ort)-.88 E
F0 .848(are not normally accessed directly from within)3.598 F(C/C++ code, e)72
493.503 Q(xcept for)-.165 E F1(PORT\(port_obj\)->closefun)100.346 516.006 Q F0
.099(which is a pointer to a function recei)72 538.506 R .099(ving an ar)-.275
F .1(gument of type `)-.198 F(`FILE*')-.814 E 2.85('\()-.814 G .1(for e)395.316
538.506 R .1(xample, a pointer to)-.165 F F3(fclose\(\))72 553.506 Q F0 1.967
(\), pro)B 1.967(vided that the port is a \214le port.)-.165 F 1.967
(It is called automatically whene)7.467 F -.165(ve)-.275 G 4.716(rt).165 G
1.966(he port is)459.126 553.506 R .194(closed, either because)72 568.506 R F3
(close-input-port)2.944 E F0(or)2.944 E F3(close-output-port)2.944 E F0 .195
(is applied to it or because the g)2.944 F(arbage)-.055 E
(collector has determined that the port is no longer reachable.)72 583.506 Q
2.75(An)72 601.106 S .55 -.275(ew \214)88.192 601.106 T
(le port is created by calling).275 E F1
(Object Make_Port\(int flags, FILE *f, Object name\);)100.346 623.609 Q F0 .037
(with a \214rst ar)72 646.109 R .037(gument of either zero \(output port\),)
-.198 F F3(P_INPUT)2.787 E F0 .036(\(input port\) or)2.787 F F3(P_BIDIR)2.786 E
F0(\(bidirectional)2.786 E(port\), the \214le pointer)72 660.109 Q 2.75(,a)-.44
G(nd the name of the \214le as a Scheme string.)172.991 660.109 Q(The macros)
5.5 E F1(Check_Input_Port\(obj\))100.346 682.612 Q(Check_Output_Port\(obj\))
100.346 696.612 Q F0 .278(check whether the speci\214ed port is open and is ca\
pable of input \(or output, respecti)72 719.112 R -.165(ve)-.275 G .279
(ly\); an error).165 F(is raised otherwise.)72 734.112 Q EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(1-)288 51 S 2.313 -.88(To a)
97 87 T .553(rrange for a ne).88 F .552
(wly-created port to be closed automatically when it becomes g)-.275 F .552
(arbage, it)-.055 F(must be passed to the function)72 101 Q/F1 11
/Times-Italic@0 SF(Re)2.75 E(gister_Object\(\))-.44 E F0(as follo)2.75 E(ws:)
-.275 E/F2 10/Courier@0 SF(Register_Object\(the_port, 0, Terminate_File, 0\);)
100.346 123.503 Q F1(Re)72 146.003 Q(gister_Object\(\))-.44 E F0 .559
(will be described in section 12.4.)3.309 F .56
(The current input and output port as well as)6.059 F .002
(ports pointing to the program')72 161.003 R 2.751(si)-.605 G .001
(nitial standard input and output are a)214.096 161.003 R -.275(va)-.22 G .001
(ilable as four e).275 F .001(xternal v)-.165 F(ari-)-.275 E(ables of type)72
175.003 Q F1(Object)2.75 E F0(:)A F2 30(Curr_Input_Port Standard_Input_Port)
100.346 197.506 R 24(Curr_Output_Port Standard_Output_Port)100.346 211.506 R F0
(The function)72 233.006 Q F2(void Reset_IO\(int destructive_flag\);)100.346
255.509 Q F0 .641(clears an)72 278.009 R 3.391(yi)-.165 G .641(nput queued at \
the current input port, then \215ushes the current output port \(if)123.211
278.009 R F1(destruc-)3.392 E(tive_\215a)72 293.009 Q(g)-.11 E F0 .259
(is zero\) or discards characters queued at the output port \(if)3.01 F F1
(destructive_\215a)3.009 E(g)-.11 E F0 .259(is non-zero\),)3.009 F 1.179(and \
\214nally resets the current input and current output port to their initial v)
72 308.009 R 1.179(alues \(the program')-.275 F(s)-.605 E .223
(standard input and standard output\).)72 323.009 R .223
(This function is typically used in error situations to reset the)5.723 F
(current ports to a de\214ned state.)72 338.009 Q 1.352
(In addition to the standard Scheme primiti)97 356.609 R -.165(ve)-.275 G 4.102
(sf).165 G 1.352(or output, e)312.868 356.609 R 1.352
(xtensions and applications can)-.165 F(use a function)72 370.609 Q F2
(void Printf\(Object port, char *fmt, ...\);)100.346 393.112 Q F0 .45
(to send output to a Scheme port using C)72 415.612 R F1(printf)3.2 E F0 5.95
(.T)C .45(he \214rst ar)294.674 415.612 R .449(gument to)-.198 F F1(Printf\(\))
3.199 E F0 .449(is the Scheme port)3.199 F .723(to which the output will be se\
nt \(it must be an output port\); the remaining ar)72 430.612 R .723
(guments are that of)-.198 F(the C library function)72 445.612 Q F1(printf\(\))
2.75 E F0(.)A 1.76 -.88(To o)72 463.212 T(utput a Scheme object, the follo).88
E(wing function can be used in addition to the usual primiti)-.275 E -.165(ve)
-.275 G(s:).165 E F2(void Print_Object\(Object obj, Object port, int raw_flag,)
100.346 485.715 Q(int print_depth, int print_length\);)167.346 499.715 Q F0
.538(The ar)72 522.215 R .538(guments to)-.198 F F1(Print_Object\(\))3.288 E F0
.538(are identical to the ar)3.288 F .538(guments of the `)-.198 F .538
(`print function')-.814 F 3.288('t)-.814 G .538(hat must)465.875 522.215 R
2.114(be supplied for each user)72 537.215 R 2.115
(-de\214ned Scheme type \(as described in section 11: the)-.22 F F1(Object)
4.865 E F0 2.115(to be)4.865 F .061(printed, the output port, a \215ag indicat\
ing that the object should be printed in human-readable form)72 552.215 R(\()72
567.215 Q F1(display)A F0 .108(sets the \215ag,)2.858 F F1(write)2.858 E F0
.108(does not\), and the `)2.858 F .109(`print depth')-.814 F 2.859('a)-.814 G
.109(nd `)343.779 567.215 R .109(`print length')-.814 F 2.859('f)-.814 G .109
(or that operation.)428.322 567.215 R -.165(Fo)72 581.215 S 2.75(rd).165 G(eb)
95.364 581.215 Q(ugging purposes, the macro)-.22 E F2(Print\(obj\);)100.346
603.718 Q F0(may be used to output an)72 626.218 Q F1(Object)2.75 E F0
(to the current output port.)2.75 E 2.75(Af)72 643.818 S(unction)86.355 643.818
Q F2(void Load_Source_Port\(Object port\);)100.346 666.321 Q F0 1.217
(can be used to load Scheme e)72 688.821 R 1.216
(xpressions from a \214le that has already been opened as a Scheme)-.165 F
(port.)72 703.821 Q EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(2-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(10.12. Miscellaneous)72 87 R -.814(Ty)2.75 G(pes).814 E
F0 .377(Other b)97 105.6 R .377(uilt-in Scheme types are le)-.22 F .377
(xical en)-.165 F .377(vironments, primiti)-.44 F .708 -.165(ve p)-.275 H .378
(rocedures, compound pro-).165 F 3.44
(cedures, macros, continuations \(also called `)72 120.6 R 3.439
(`control points')-.814 F 6.189('a)-.814 G 6.189(taf)369.087 120.6 S 3.989
-.275(ew p)393.07 120.6 T 3.439(laces in Elk\), and).275 F 3.695
(promises. These)72 135.6 R .946
(types are not normally created or manipulated from within C or C++ code.)3.695
F(If)6.446 E .544(you are writing a specialized e)72 150.6 R .543
(xtension that depends on the C representation of these types, refer)-.165 F
2.146(to the declarations in the public include \214le `)72 165.6 R(`object.h')
-.814 E 4.897('\()-.814 G 2.147(which is included automatically via)338.981
165.6 R -.814(``)72 180.6 S(scheme.h').814 E('\).)-.814 E(Le)97 199.2 Q .066
(xical en)-.165 F .066(vironments are identical to pairs e)-.44 F .066
(xcept that the type is)-.165 F/F2 11/Times-Italic@0 SF(T_En)2.816 E(vir)-.44 E
(onment)-.495 E F0 .066(rather than)2.816 F F2(T_P)72 214.2 Q(air)-.88 E F0
5.852(.T)C .352(he current en)117.617 214.2 R .353
(vironment and the initial \(gobal\) en)-.44 F .353(vironment are a)-.44 F
-.275(va)-.22 G .353(ilable as the e).275 F(xternal)-.165 E 3.026(Cv)72 229.2 S
(ariables)87.588 229.2 Q F2(The_En)3.026 E(vir)-.44 E(onment)-.495 E F0(and)
3.026 E F2(Global_En)3.026 E(vir)-.44 E(onment)-.495 E F0 5.776(.T)C .276
(he prede\214ned type constants for primi-)331.847 229.2 R(ti)72 244.2 Q -.165
(ve)-.275 G 2.968(s, compound procedures \(the results of e).165 F -.275(va)
-.275 G 2.969(luating lambda e).275 F 2.969(xpressions\), and macros are)-.165
F F2(T_Primitive)72 258.2 Q F0(,)A F2(T_Compound)2.75 E F0 2.75(,a)C(nd)200.337
258.2 Q F2(T_Macr)2.75 E(o)-.495 E F0 2.75(,r)C(especti)263.697 258.2 Q -.165
(ve)-.275 G(ly).165 E 5.5(.T)-.715 G(he function)327.002 258.2 Q/F3 10
/Courier@0 SF(void Check_Procedure\(Object\);)100.346 280.703 Q F0 .253(checks\
 whether the speci\214ed object is either a compound procedure or a primiti)72
303.203 R .582 -.165(ve p)-.275 H .252(rocedure with).165 F 3.43(ac)72 318.203
S .68(alling discipline dif)85.198 318.203 R .68(ferent from)-.275 F F2(NOEV)
3.43 E(AL)-.66 E F0 .68(and raises an error otherwise.)3.43 F .681
(The type constant for)6.18 F .806(continuations is)72 333.203 R F2(T_Contr)
3.556 E(ol)-.495 E F0 6.305(.`)C(`Promise')202.985 333.203 Q 3.555('i)-.814 G
3.555(st)255.831 333.203 S .805(he type of object returned by the special form)
266.723 333.203 R F2(delay)3.555 E F0(;)A
(the corresponding type constant is named)72 348.203 Q F2(T_Pr)2.75 E(omise)
-.495 E F0(.)A F1 2.75(11. De\214ning)72 378.203 R(New Scheme T)2.75 E(ypes)
-.814 E F0 3.916(An)97 396.803 S -.275(ew)114.358 396.803 S 3.916(,d)-.44 G
1.166(isjoint Scheme type is re)138.36 396.803 R 1.166
(gistered with Elk by calling the function)-.165 F F2(De\214ne_T)3.916 E
(ype\(\))-.814 E F0(,)A .193(similar to)72 411.803 R F2(De\214ne_Primitive\(\))
2.943 E F0 .193(for ne)2.943 F 2.942(wp)-.275 G(rimiti)244.685 411.803 Q -.165
(ve)-.275 G 2.942(s. Making).165 F 2.942(an)2.942 G .742 -.275(ew t)342.292
411.803 T .192(ype kno).275 F .192(wn to Elk in)-.275 F -.22(vo)-.44 G(lv).22 E
.192(es pass-)-.165 F 1.019(ing it information about the underlying C/C++ repr\
esentation of the type and a number of C or)72 426.803 R .223
(C++ functions that are `)72 441.803 R .223(`called back')-.814 F 2.973('b)
-.814 G 2.973(yt)246.016 441.803 S .223(he interpreter in v)257.547 441.803 R
.222(arious situations to pass control to the)-.275 F
(code that implements the type.)72 455.803 Q(The prototype of)5.5 E F2
(De\214ne_T)2.75 E(ype\(\))-.814 E F0(is:)2.75 E F3
(int Define_Type\(int zero, const char *name,)100.346 478.306 Q
(int \(*size\)\(Object\), int const_size,)127.846 492.306 Q
(int \(*eqv\)\(Object, Object\),)127.846 506.306 Q
(int \(*equal\)\(Object, Object\),)127.846 520.306 Q
(int \(*print\)\(Object, Object, int, int, int\),)127.846 534.306 Q
(int \(*visit\)\(Object*, int \(*\)\(Object*\)\)\);)127.846 548.306 Q F0
(The ar)72 570.806 Q(guments to)-.198 E F2(De\214ne_Primitive\(\))2.75 E F0
(are in detail:)2.75 E F2(zer)97 589.406 Q(o)-.495 E F0 1.588(The \214rst ar)
102.5 604.406 R 1.588(gument must be zero \(in early v)-.198 F 1.589
(ersions of Elk it could be used to request a)-.165 F<8c78>102.5 619.406 Q
(ed, prede\214ned type number for the ne)-.165 E 2.75(wt)-.275 G(ype\);)292.69
619.406 Q F2(name)97 638.006 Q F0(The name of the ne)102.5 653.006 Q 2.75(wt)
-.275 G(ype.)200.895 653.006 Q F2(size)97 671.606 Q 2.75(,c)-.11 G(onst_size)
123.774 671.606 Q F0 .09(The size of the corresponding C type \(usually a)102.5
686.606 R F2(struct)2.839 E F0 2.839(\)i)C 2.839(nb)349.025 686.606 S .089
(ytes, gi)362.864 686.606 R -.165(ve)-.275 G 2.839(na).165 G 2.839(so)417.899
686.606 S .089(ne of tw)430.517 686.606 R .089(o, mutu-)-.11 F(ally-e)102.5
701.606 Q(xclusi)-.165 E .444 -.165(ve a)-.275 H -.198(rg).165 G(uments:).198 E
F2(size)2.864 E F0 2.864(,ap)C .114
(ointer to a function called by the interpreter to determine)253.381 701.606 R
.059(the size of an object \(for types whose indi)102.5 716.606 R .059
(vidual members are of dif)-.275 F .059(ferent sizes, such as the)-.275 F F2
(vector)102.5 731.606 Q F0 .819(type\); and)3.569 F F2(const_size)3.569 E F0
3.569(,t)C .819(he size as a constant \(for all other types\).)236.841 731.606
R 3.57(An)6.319 G .82(ull-pointer is)446.651 731.606 R EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(3-)288 51 S(gi)102.5 87 Q
-.165(ve)-.275 G 2.75(nf).165 G(or)132.915 87 Q/F1 11/Times-Italic@0 SF
(const_size)2.75 E F0(if)2.75 E F1(size)2.75 E F0(is to be used instead.)2.75 E
F1(eqv)97 105.6 Q 2.75(,e)-.814 G(qual)121.838 105.6 Q F0 1.127
(Pointers to \(callback\) functions that are in)102.5 120.6 R -.22(vo)-.44 G
-.11(ke).22 G 3.877(db).11 G 3.876(yt)329.278 120.6 S 1.126
(he interpreter whene)341.712 120.6 R -.165(ve)-.275 G 3.876(rt).165 G 1.126
(he Scheme)454.914 120.6 R(predicate)102.5 135.6 Q F1(equal?)3.993 E F0 3.993
(,o)C(r)188.993 135.6 Q F1(eqv?)3.994 E F0(respecti)3.994 E -.165(ve)-.275 G
(ly).165 E 3.994(,i)-.715 G 3.994(sa)283.211 135.6 S 1.244
(pplied to members of the ne)296.368 135.6 R 1.244(wly de\214ned type.)-.275 F
.645(As an application-de\214ned type is opaque from the interpreter')102.5
150.6 R 3.395(sp)-.605 G .645(oint of vie)392.116 150.6 R 2.074 -.715(w, t)
-.275 H .644(he equality).715 F 1.435(predicates ha)102.5 165.6 R 1.765 -.165
(ve t)-.22 H 4.185(ob).165 G 4.185(es)194.09 165.6 S 1.435
(upplied by the application or e)207.438 165.6 R 4.185(xtension. Each)-.165 F
1.435(of these \(boolean\))4.185 F(functions is passed tw)102.5 180.6 Q 2.75
(oo)-.11 G(bjects of the ne)212.995 180.6 Q 2.75(wt)-.275 G(ype as ar)293.372
180.6 Q(guments when called back.)-.198 E F1(print)97 199.2 Q F0 2.889(Ap)102.5
214.2 S .139(ointer to a function that is used by the interpreter to print a m\
ember of this type.)118.831 214.2 R(When)5.638 E 1.994
(calling the print function, the interpreter passes as ar)102.5 229.2 R 1.995
(guments the Scheme object to be)-.198 F .164(printed, a Scheme)102.5 244.2 R
F1(port)2.913 E F0 .163
(to which the output is to be sent, a \215ag indicating whether output is)2.913
F 1.184(to be rendered in human-readable form \()102.5 259.2 R F1(display)A F0
1.185(Scheme primiti)3.935 F -.165(ve)-.275 G 3.935(\)o).165 G 3.935(rm)415.464
259.2 S(achine-readable,)431.62 259.2 Q(read-write-in)102.5 274.2 Q -.275(va)
-.44 G 1.946(riance preserving form \().275 F F1(write)A F0 1.946
(\), and \214nally the current remainders of the)B(maximum)102.5 289.2 Q F1
.814(print depth)3.564 F F0(and)3.564 E F1 .814(print length)3.564 F F0 6.314
(.T)C .814(he return v)291.337 289.2 R .814
(alue of this function is not used \(the)-.275 F(type is)102.5 304.2 Q F1(int)
2.75 E F0(for historical reasons\).)2.75 E F1(visit)97 322.8 Q F0 3.51(Ap)102.5
337.8 S .76(ointer to a `)119.452 337.8 R(`visit')-.814 E 3.51('f)-.814 G .76
(unction called by the g)208.237 337.8 R .759
(arbage collector when tracing the set of all)-.055 F 1.584
(currently accessible objects.)102.5 352.8 R 1.585
(This function is only required if other Scheme objects are)7.085 F .865
(reachable from objects of the ne)102.5 367.8 R .865
(wly de\214ned type \(a null pointer can be gi)-.275 F -.165(ve)-.275 G 3.615
(no).165 G(therwise\).)460.319 367.8 Q .569(It is in)102.5 382.8 R -.22(vo)-.44
G -.11(ke).22 G 3.32(dw).11 G .57(ith tw)169.131 382.8 R 3.32(oa)-.11 G -.198
(rg)208.661 382.8 S .57(uments: a pointer to the object being visited by the g)
.198 F .57(arbage col-)-.055 F(lector)102.5 397.8 Q 3.49(,a)-.44 G .74(nd a po\
inter to another function to be called once with the address of each object)
138.231 397.8 R 1.544(accessible through the original object.)102.5 412.8 R
-.165(Fo)7.044 G 4.294(re).165 G 1.544(xample, the implementation of pairs w)
306.959 412.8 R(ould)-.11 E .995(supply a visit function that in)102.5 427.8 R
-.22(vo)-.44 G -.11(ke).22 G 3.744(si).11 G .994(ts second ar)267.813 427.8 R
.994(gument twice\212once with the address of)-.198 F
(the car of the original object, and once with the address of the cdr)102.5
442.8 Q(.)-.605 E .82(The return v)97 461.4 R .82(alue of)-.275 F F1
(De\214ne_T)3.57 E(ype\(\))-.814 E F0 .821(is a small, unique inte)3.57 F .821
(ger identifying the type; it is usu-)-.165 F(ally stored in a `)72 476.4 Q
(`T_*')-.814 E 2.75('\()-.814 G(or `)176.984 476.4 Q(`t_*')-.814 E('\) v)-.814
E(ariable follo)-.275 E(wing the con)-.275 E -.165(ve)-.44 G
(ntion used for the b).165 E(uilt-in types.)-.22 E 1.422(In the current v)97
495 R 1.422(ersion of Elk,)-.165 F F1(De\214ne_T)4.172 E(ype\(\))-.814 E F0
1.421(cannot be used to de\214ne ne)4.172 F 4.171(w`)-.275 G(`pointer)442.719
495 Q(-less')-.22 E(')-.814 E(types resembling b)72 510 Q
(uilt-in types such as)-.22 E F1(\214xnum)2.75 E F0(or)2.75 E F1(boolean)2.75 E
F0(.)A .063(The \214rst component of the C structure implementing a user)97
528.6 R .063(-de\214ned Scheme type must be an)-.22 F F1(Object)72 543.6 Q F0
3.527(;i)C .777(ts space is used by the g)110.969 543.6 R .777
(arbage collector to store a special tag indicating that the object)-.055 F
1.023(has been forw)72 558.6 R 3.773(arded. If)-.11 F 1.023
(you are de\214ning a type that has se)3.773 F -.165(ve)-.275 G 1.024
(ral components one of which is an).165 F F1(Object)72 573.6 Q F0 3.18(,j)C .43
(ust mo)110.314 573.6 R .76 -.165(ve t)-.165 H(he).165 E F1(Object)3.18 E F0
.43(to the front of the)3.18 F F1(struct)3.179 E F0 3.179
(declaration. Otherwise)3.179 F .429(insert an additional)3.179 F F1(Object)72
588.6 Q F0(component.)2.75 E .173(The Scheme primiti)97 607.2 R .503 -.165
(ve t)-.275 H .174(hat instantiates a ne).165 F 2.924(wt)-.275 G .174
(ype can request heap space for the ne)301.286 607.2 R 2.924(wo)-.275 G(bject)
482.616 607.2 Q(by calling the function)72 621.2 Q F1(Alloc_Object\(\))2.75 E
F0(:)A/F2 10/Courier@0 SF
(Object Alloc_Object\(int size, int type, int const_flag\);)100.346 643.703 Q
F0 .401(The ar)72 666.203 R .401(guments to)-.198 F F1(Alloc_Object\(\))3.151 E
F0 .401(are the size of the object in bytes \(usually obtained by applying)
3.151 F F1(sizeof)72 681.203 Q F0 1.49(to the underlying)4.24 F F1(struct)4.24
E F0 1.49(\), the type of which the ne)B 4.24(wo)-.275 G 1.49
(bject is a member \(i.)350.256 681.203 R 1.491(e. the return)1.833 F -.275(va)
72 696.203 S 1.602(lue of).275 F F1(De\214ne_T)4.352 E(ype\(\))-.814 E F0 1.602
(\), and a \215ag indicating whether the ne)B 1.601
(wly created object is to be made)-.275 F(read-only)72 711.203 Q 5.5(.T)-.715 G
(he return v)128.408 711.203 Q(alue is a fully initialized)-.275 E F1(Object)
2.75 E F0(.)A EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(4-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(11.1. Example)72 87 R -.275(fo)2.75 G 2.75(raU).275 G
(ser)176.522 87 Q(-De\214ned Scheme T)-.407 E(ype)-.814 E F0 .608(Figure 5 sho)
97 105.6 R .608(ws the sk)-.275 F .609(eleton of an e)-.11 F .609
(xtension that pro)-.165 F .609(vides a simple Scheme interf)-.165 F .609
(ace to the)-.11 F(UNIX)72 120.6 Q/F2 11/Times-Italic@0 SF(ndbm)4.207 E F0
1.456(library; it can be loaded dynamically into the Scheme interpreter)4.207 F
4.206(,o)-.44 G 4.206(ri)441.277 120.6 S 1.456(nto an Elk-)452.204 120.6 R
1.894
(based application that needs access to a simple database from within the e)72
135.6 R 1.895(xtension language.)-.165 F 1.33(Please refer to your system')72
150.6 R 4.079(sd)-.605 G 1.329(ocumentation if you are not f)213.376 150.6 R
1.329(amiliar with)-.11 F F2(ndbm)4.079 E F0 6.829(.T)C 1.329(he e)447.539
150.6 R(xtension)-.165 E .718(de\214nes a ne)72 165.6 R 2.148 -.715(w, \214)
-.275 H .718(rst-class Scheme type).715 F F2(dbm-\214le)3.468 E F0 .718
(corresponding to the)3.468 F F2(DBM)3.469 E F0 .719(type de\214ned by the C)
3.469 F(library)72 180.6 Q 6.593(.A)-.715 G -.055(ga)117.896 180.6 S 1.093
(in, note the naming con).055 F -.165(ve)-.44 G 1.093(ntion to use lo).165 F
(wer)-.275 E 1.093(-case for ne)-.22 F 3.842(wi)-.275 G 1.092
(denti\214ers \(in contrast to)395.927 180.6 R(the prede\214ned ones\).)72
195.6 Q(______________________________________________________________________\
________)75 223.1 Q/F3 10/Courier@0 SF(#include <scheme.h>)72 242.6 Q
(#include <ndbm.h>)72 256.6 Q(int t_dbm;)72 279 Q(struct s_dbm {)72 301.4 Q
(Object unused;)99.5 315.4 Q(DBM *dbm;)99.5 329.4 Q(char alive;)99.5 343.4 Q
(/* 0: has been closed, else 1 */)183.5 343.4 Q(};)72 357.4 Q
(#define DBMF\(obj\) \(\(struct s_dbm *\)POINTER\(obj\)\))72 379.8 Q
(int dbm_equal\(Object a, Object b\) {)72 402.2 Q(return DBMF\(a\)->alive && D\
BMF\(b\)->alive && DBMF\(a\)->dbm == DBMF\(b\)->dbm;)99.5 416.2 Q(})72 430.2 Q
(int dbm_print\(Object d, Object port, int raw, int length, int depth\) {)72
452.6 Q(Printf\(port, "#[dbm-file %lu]", DBMF\(d\)->dbm\);)99.5 466.6 Q
(return 0;)99.5 480.6 Q(})72 494.6 Q(Object p_is_dbm\(Object d\) {)72 517 Q
(return TYPE\(d\) == t_dbm ? True : False;)99.5 531 Q(})72 545 Q
(void elk_init_dbm\(void\) {)72 567.4 Q
(t_dbm = Define_Type\(0, "dbm-file", 0, sizeof\(struct s_dbm\),)99.5 581.4 Q
(dbm_equal, dbm_equal, dbm_print, 0\);)127 595.4 Q 18
(Define_Primitive\(p_is_dbm, "dbm-file?",)99.5 617.8 R(1, 1, EVAL\);)6 E 6
(Define_Primitive\(p_dbm_open, "dbm-open", 2,)99.5 631.8 R(3, VARARGS\);)6 E
(Define_Primitive\(p_dbm_close, "dbm-close", 1, 1, EVAL\);)99.5 645.8 Q(})72
659.8 Q/F4 10/Times-Bold@0 SF(Figur)192.95 677.6 Q 2.5(e5)-.18 G(:)228.6 677.6
Q/F5 10/Times-Roman@0 SF(Sk)5 E(eleton of a UNIX ndbm e)-.1 E(xtension)-.15 E
F0(___________________________________________________________________________\
___)75 696.2 Q EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(5-)288 51 S 3.502
(The code sho)97 87 R 3.502(wn in Figure 5 declares a v)-.275 F(ariable)-.275 E
/F1 11/Times-Italic@0 SF(t_dbm)6.252 E F0 3.503(to hold the return v)6.253 F
3.503(alue of)-.275 F F1(De\214ne_Primitive\(\))72 102 Q F0 2.881(,a)C .131
(nd the C structure)164.993 102 R F1(s_dbm)2.881 E F0 .131
(that represents the ne)2.881 F 2.881(wt)-.275 G 2.881(ype. The)385.556 102 R
.131(structure is com-)2.881 F 3.427(posed of the required initial)72 117 R F1
(Object)6.177 E F0 6.177(,t)C(he)254.79 117 Q F1(DBM)6.177 E F0 3.427
(pointer returned by the C library function)6.177 F F1(dbm_open\(\))72 132 Q F0
2.997(,a)C .246(nd a \215ag indicating whether the database pointed to by this\
 object has already been)135.783 132 R .374
(closed \(in this case the \215ag is cleared\).)72 147 R .374(As a)5.874 F F1
(dbm-\214le)3.124 E F0 .375(Scheme object can still be passed to primi-)3.125 F
(ti)72 162 Q -.165(ve)-.275 G 4.321(sa).165 G 1.571(fter the)101.544 162 R F1
(DBM)4.321 E F0 1.571(handle has been closed by a call to)4.321 F F1
(dbm_close\(\))4.321 E F0 4.321(,t)C(he)399.301 162 Q F1(alive)4.321 E F0 1.571
(\215ag had to be)4.321 F .642(added to a)72 177 R -.22(vo)-.22 G .642
(id further use of a `).22 F(`stale')-.814 E 3.393('o)-.814 G .643
(bject: the `)255.294 177 R(`dbm')-.814 E 3.393('p)-.814 G(rimiti)341.439 177 Q
-.165(ve)-.275 G 3.393(si).165 G .643(nclude an initial check for)386.566 177 R
(the \215ag and raise an error if it is zero.)72 192 Q .245(The macro)97 210.6
R F1(DBMF)2.995 E F0 .244(is used to cast the pointer \214eld of an)2.995 F F1
(Object)2.994 E F0 .244(of type)2.994 F F1(t_dbm)2.994 E F0 .244
(to a pointer to)2.994 F 1.153(the correct structure type.)72 225.6 R F1
(dbm_equal\(\))6.653 E F0 1.153(implements both the)3.903 F F1(eqv?)3.903 E F0
1.153(and the)3.903 F F1(equal?)3.903 E F0 1.154(predicates; it)3.903 F .593
(returns true if the)72 240.6 R F1(Objects)3.343 E F0 .592
(compared point to an open database and contain identical)3.343 F F1(DBM)3.342
E F0(point-)3.342 E 3.245(ers. The)72 255.6 R .495
(print function just prints the numeric v)3.245 F .496(alue of the)-.275 F F1
(DBM)3.246 E F0 .496(pointer; this could be impro)3.246 F -.165(ve)-.165 G(d)
.165 E 1.089(by printing the name of the database \214le instead, which must t\
hen be included in each Scheme)72 270.6 R 3.203(object. The)72 285.6 R(primiti)
3.203 E -.165(ve)-.275 G F1(p_is_dbm\(\))3.368 E F0(pro)3.203 E .453
(vides the usual type predicate.)-.165 F(Finally)5.954 E 3.204(,a)-.715 G 3.204
(ne)420.757 285.6 S .454(xtension initial-)434.18 285.6 R .62(ization function\
 is supplied to enable dynamic loading of the compiled code; it re)72 300.6 R
.619(gisters the ne)-.165 F(w)-.275 E 2.709(type and three primiti)72 315.6 R
-.165(ve)-.275 G 5.459(so).165 G 2.709(perating on it.)200.327 315.6 R 2.71
(Note that a visit function \(the \214nal ar)8.209 F 2.71(gument to)-.198 F F1
(De\214ne_T)72 330.6 Q(ype\(\))-.814 E F0 4.221(\)i)C 4.221(sn)145.048 330.6 S
1.471(ot required here, as the ne)159.048 330.6 R 4.221(wt)-.275 G 1.471
(ype does not include an)294.979 330.6 R 4.221(yc)-.165 G 1.47
(omponents of type)419.176 330.6 R F1(Object)72 345.6 Q F0 .736(that the g)
3.486 F .736(arbage collector must kno)-.055 F 3.486(wo)-.275 G .736
(f\212the required initial)279.981 345.6 R F1(Object)3.486 E F0 .736
(is not used here and)3.486 F .193(therefore can be ne)72 360.6 R 2.942
(glected. The)-.165 F .192(type constructor primiti)2.942 F -.165(ve)-.275 G F1
(dbm-open)3.107 E F0 .192(and the primiti)2.942 F -.165(ve)-.275 G F1
(dbm-close)3.107 E F0(are sho)72 375.6 Q(wn in Figure 6.)-.275 E 1.136
(The primiti)97 397.8 R -.165(ve)-.275 G F1(dbm-open)4.051 E F0(sho)3.886 E
1.137(wn in Figure 6 is called with the name of the database \214le, a)-.275 F
1.281(symbol indicating the type of access \()72 412.8 R F1 -.407(re)C(ader)
.407 E F0 1.281(for read-only access,)4.031 F F1(writer)4.031 E F0 1.28
(for read/write access,)4.031 F(and)72 427.8 Q F1(cr)3.016 E(eate)-.407 E F0
.266(for creating a ne)3.016 F 3.016<778c>-.275 G .266
(le with read/write access\), and an optional third ar)210.37 427.8 R .266
(gument specify-)-.198 F .977(ing the \214le permissions for a ne)72 442.8 R
.976(wly-created database \214le.)-.275 F 3.726(Ad)6.476 G(ef)353.992 442.8 Q
.976(ault of 0666 is used for the \214le)-.11 F .342
(permissions if the primiti)72 457.8 R .672 -.165(ve i)-.275 H 3.092(si).165 G
-2.09 -.44(nv o)210.473 457.8 T -.11(ke).44 G 3.092(dw).11 G .342(ith just tw)
253.121 457.8 R 3.092(oa)-.11 G -.198(rg)311.182 457.8 S 3.092(uments. Section)
.198 F .343(12.1 will introduce a set)3.092 F 1.594(of functions that a)72
472.8 R -.22(vo)-.22 G 1.594(id clumsy if-cascades such as the one at the be)
.22 F 1.594(ginning of)-.165 F F1(p_dbm_open\(\))4.344 E F0(.)A F1
(Primitive_Err)72 487.8 Q(or\(\))-.495 E F0 1.869(is called with a `)4.619 F
1.87(`format string')-.814 F 4.62('a)-.814 G 1.87(nd zero or more ar)313.007
487.8 R 1.87(guments and signals a)-.198 F .347
(Scheme error \(see section 12.5\).)72 502.8 R F1(dbm-open)5.847 E F0 .346
(returns #f if the database \214le could not be opened, so)3.096 F
(that the caller can deal with the error)72 517.8 Q(.)-.605 E .885(Note that)97
536.4 R F1(dbm-close)3.635 E F0 .885(\214rst checks the)3.635 F F1(alive)3.635
E F0 .885(bit to raise an error if the database pointer is no)3.635 F 1.472
(longer v)72 551.4 R 1.472(alid because of an earlier call to)-.275 F F1
(dbm-close)4.222 E F0 6.972(.T)C 1.471(his check needs to be performed by all)
324.157 551.4 R(primiti)72 566.4 Q -.165(ve)-.275 G 4.924(sw).165 G 2.174
(orking on)128.932 566.4 R F1(dbm-\214le)4.925 E F0 2.175
(objects; it may be useful to wrap it in a separate function\212)4.925 F .258
(together with the initial type-check.)72 581.4 R(Ideally)5.757 E 3.007(,d)
-.715 G .257(atabase objects should be closed automatically dur)276.606 581.4 R
(-)-.22 E 1.266(ing g)72 596.4 R 1.266(arbage collection when the)-.055 F 4.016
(yb)-.165 G 1.267(ecome inaccessible; section 12.4 will introduce functions to)
232.385 596.4 R(accomplish this.)72 611.4 Q .359(At least tw)97 630 R 3.109(op)
-.11 G(rimiti)159.38 630 Q -.165(ve)-.275 G(s).165 E F1(dbm-stor)3.109 E(e)
-.407 E F0(and)3.108 E F1(dbm-fetc)3.108 E(h)-.165 E F0 .358
(need to be added to the database e)3.108 F(xtension)-.165 E 2.049(to mak)72
645 R 4.799(ei)-.11 G 4.799(tr)116.93 645 S 2.049
(eally useful; these are not sho)128.45 645 R 2.05
(wn here \(their implementation is f)-.275 F 2.05(airly simple and)-.11 F
(straightforw)72 660 Q 3.98(ard\). Using)-.11 F 1.23(these primiti)3.98 F -.165
(ve)-.275 G 1.229(s, the e).165 F 1.229
(xtension discussed in this section can be used to)-.165 F .001(write Scheme c\
ode such as this procedure \(which looks up an electronic mailbox name in the \
mail)72 675 R(alias database maintained on most UNIX systems\):)72 689 Q EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(6-)288 51 S(________________\
______________________________________________________________)75 99.5 Q/F1 10
/Courier@0 SF(Object p_dbm_open\(int argc, Object *argv\) {)72 119 Q(DBM *dp;)
99.5 133 Q(int flags = O_RDWR|O_CREAT;)99.5 147 Q(Object d, sym = argv[1];)99.5
161 Q(Check_Type\(sym, T_Symbol\);)99.5 183.4 Q
(if \(EQ\(sym, Intern\("reader"\)\)\))99.5 197.4 Q(flags = O_RDONLY;)127 211.4
Q(else if \(EQ\(sym, Intern\("writer"\)\)\))99.5 225.4 Q(flags = O_RDWR;)127
239.4 Q(else if \(!EQ\(sym, Intern\("create"\)\)\))99.5 253.4 Q
(Primitive_Error\("invalid argument: ~s", sym\);)127 267.4 Q
(if \(\(dp = dbm_open\(Get_String\(argv[0]\), flags,)99.5 281.4 Q
(argc == 3 ? Get_Integer\(argv[2]\) : 0666\)\) == 0\))154.5 295.4 Q
(return False;)127 309.4 Q 6(d=A)99.5 323.4 S
(lloc_Object\(sizeof\(struct s_dbm\), t_dbm, 0\);)129.5 323.4 Q
(DBMF\(d\)->dbm = dp;)99.5 337.4 Q(DBMF\(d\)->alive = 1;)99.5 351.4 Q
(return d;)99.5 365.4 Q(})72 379.4 Q(Object p_dbm_close\(Object d\) {)72 401.8
Q(Check_Type\(d, t_dbm\);)99.5 415.8 Q(if \(!DBMF\(d\)->alive\))99.5 429.8 Q
(Primitive_Error\("invalid dbm-file: ~s", d\);)127 443.8 Q
(DBMF\(d\)->alive = 0;)99.5 457.8 Q(dbm_close\(DBMF\(d\)->dbm\);)99.5 471.8 Q
(return Void;)99.5 485.8 Q(})72 499.8 Q/F2 10/Times-Bold@0 SF(Figur)177.415
517.6 Q 2.5(e6)-.18 G(:)213.065 517.6 Q/F3 10/Times-Roman@0 SF
(Implementation of)5 E/F4 10/Times-Italic@0 SF(dbm-open)2.5 E F3(and)2.5 E F4
(dbm-close)2.5 E F0(__________________________________________________________\
____________________)75 536.2 Q F1(\(define expand-mail-alias)100.346 565.2 Q
(\(lambda \(alias\))112.346 579.2 Q
(\(let \(\(d \(dbm-open "/etc/aliases" 'reader\)\)\))124.346 593.2 Q
(\(if \(not d\))136.346 607.2 Q
(\(error 'expand-mail-alias "cannot open database"\)\))160.346 621.2 Q
(\(unwind-protect)136.346 635.2 Q(\(dbm-fetch d alias\))148.346 649.2 Q
(\(dbm-close d\)\)\)\)\))148.346 663.2 Q
(\(define address-of-staff \(expand-mail-alias "staff"\)\))100.346 685.6 Q EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(7-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(12. Adv)72 87 R(anced T)-.11 E(opics)-1.012 E 2.75
(12.1. Con)72 117 R -.11(ve)-.44 G
(rting between Symbols, Integers, and Bitmasks).11 E F0 .594
(Symbols are frequently used as the ar)97 135.6 R .594
(guments to Scheme primiti)-.198 F -.165(ve)-.275 G 3.344(sw).165 G .594
(hich call an underly-)411.49 135.6 R .865(ing C or C++ function with some kin\
d of bitmask or with a prede\214ned enumeration constant or)72 150.6 R .905
(preprocessor symbol.)72 165.6 R -.165(Fo)6.405 G 3.655(re).165 G .905
(xample, the primiti)196.892 165.6 R -.165(ve)-.275 G/F2 11/Times-Italic@0 SF
(dbm-open)3.819 E F0(sho)3.654 E .904(wn in Figure 6 abo)-.275 F 1.234 -.165
(ve u)-.165 H .904(ses sym-).165 F 1.495
(bols to represent the symbolic constants passed to)72 180.6 R F2(dbm_open\(\))
4.245 E F0 6.995(.S)C(imilarly)374.786 180.6 Q 4.245(,aS)-.715 G 1.495
(cheme primiti)431.148 180.6 R -.165(ve)-.275 G 1.124
(corresponding to the UNIX system call)72 195.6 R F2(open\(\))3.874 E F0 1.124
(could recei)3.874 F 1.454 -.165(ve a l)-.275 H 1.124
(ist of symbols represending the).165 F(logical OR of the usual)72 209.6 Q F2
(open\(\))2.75 E F0(\215ags, so that one can write Scheme code such as:)2.75 E
/F3 10/Courier@0 SF(\(let \(\(tty-fd \(unix-open "/dev/ttya")100.346 232.103 Q
('\(read write exclusive\)\)\))340.346 232.103 Q
(\(tmp-fd \(unix-open "/tmp/somefile '\(write create\)\)\)\))136.346 246.103 Q
(...)127.846 260.103 Q F0 2.711 -.88(To f)97 286.203 T .952(acilitate con).77 F
-.165(ve)-.44 G .952(rsion of symbols to C inte).165 F .952
(gers or enumeration constants and vice v)-.165 F(ersa,)-.165 E(these tw)72
300.203 Q 2.75(of)-.11 G(unctions are pro)120.158 300.203 Q(vided:)-.165 E F3
(unsigned long Symbols_To_Bits\(Object syms, int mask_flag,)100.346 322.706 Q
(SYMDESCR *table\);)124.346 336.706 Q
(Object Bits_To_Symbols\(unsigned long bits, int mask_flag,)100.346 350.706 Q
(SYMDESCR *table\);)124.346 364.706 Q F0(The type)72 386.206 Q F2(SYMDESCR)2.75
E F0(is de\214ned as:)2.75 E F3(typedef struct {)100.346 408.709 Q(char *name;)
127.846 422.709 Q(unsigned long val;)127.846 436.709 Q 6(}S)100.346 450.709 S
(YMDESCR;)118.346 450.709 Q F2(Symbols_T)97 476.809 Q(o_Bits\(\))-1.012 E F0
(con)3.494 E -.165(ve)-.44 G .743(rts a symbol or a list of symbols to an inte)
.165 F(ger;)-.165 E F2(Bits_T)3.493 E(o_Symbols\(\))-1.012 E F0 .097(is the re)
72 491.809 R -.165(ve)-.275 G .097
(rse operation and is usually applied to the return v).165 F .097
(alue of a C/C++ function to con)-.275 F -.165(ve)-.44 G .097(rt it).165 F .964
(to a Scheme representation.)72 506.809 R .964(Both functions recei)6.464 F
1.294 -.165(ve a)-.275 H 3.714(st).165 G .964(he third ar)323.67 506.809 R .964
(gument a table specifying the)-.198 F 1.66(correspondence between symbols and\
 C constants; each table entry is a pair consisting of the)72 521.809 R F2
(name)72 536.809 Q F0 .316(of a symbol as a C string and an inte)3.066 F(ger)
-.165 E F2(val)3.066 E F0 .315(\(typically an enumeration constant or a)3.066 F
F2(#de\214ne)3.065 E F0 2.75(constant\). Each)72 550.809 R F2(SYMDESCR)2.75 E
F0(array is terminated by an entry with a zero)2.75 E F2(name)2.75 E F0
(component:)2.75 E F3(SYMDESCR lseek_syms[] = {)100.346 573.312 Q 6({")127.846
587.312 S 30(set", SEEK_SET)145.846 587.312 R(},)6 E 6({")127.846 601.312 S 6
(current", SEEK_CUR)145.846 601.312 R(},)6 E 6({")127.846 615.312 S 30
(end", SEEK_END)145.846 615.312 R(},)6 E 6({0)127.846 629.312 S 6(,0})145.846
629.312 S(};)100.346 643.312 Q F0 .794(The second ar)97 669.412 R .794
(gument to the con)-.198 F -.165(ve)-.44 G .795
(rsion functions controls whether a single symbol is con-).165 F -.165(ve)72
684.412 S .392(rted to an inte).165 F .392(ger or vice v)-.165 F .392(ersa \()
-.165 F F2(mask_\215a)A(g)-.11 E F0 .391
(is zero\), or whether a list of symbols is con)3.142 F -.165(ve)-.44 G .391
(rted to).165 F 3.44(the logical OR of a set of matching v)72 699.412 R 3.441
(alues or vice v)-.275 F 3.441(ersa \()-.165 F F2(mask_\215a)A(g)-.11 E F0
3.441(is non-zero\).)6.191 F F2(Sym-)8.941 E(bols_T)72 714.412 Q(o_Bits\(\))
-1.012 E F0 .652(signals an error if the symbol does not match an)3.402 F 3.401
(yo)-.165 G 3.401(ft)370.998 714.412 S .651(he names in the gi)381.12 714.412 R
-.165(ve)-.275 G 3.401(nt).165 G(able)485.674 714.412 Q(or)72 729.412 Q 5.325
(,i)-.44 G(f)91.856 729.412 Q F2(mask_\215a)5.325 E(g)-.11 E F0 2.575
(is non-zero, if an)5.325 F 5.325(yo)-.165 G 5.325(ft)249.085 729.412 S 2.575
(he list elements does not match.)261.131 729.412 R 2.576(The empty list is)
8.075 F EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(8-)288 51 S(con)72 87 Q -.165
(ve)-.44 G 1.02(rted to zero.).165 F(If)6.52 E/F1 11/Times-Italic@0 SF(Bits_T)
3.77 E(o_Symbols\(\))-1.012 E F0 1.02(is called with a non-zero)3.77 F F1
(mask_\215a)3.769 E(g)-.11 E F0 3.769(,i)C 3.769(tm)426.704 87 S 1.019
(atches the)442.089 87 R F1(val)3.769 E F0 6.198(components ag)72 102 R 6.198
(ainst the)-.055 F F1(bits)8.948 E F0(ar)8.948 E 6.198
(gument using logical AND.)-.198 F(Re)381.646 102 Q -.055(ga)-.165 G 6.199
(rdless of).055 F F1(mask_\215a)8.949 E(g)-.11 E F0(,)A F1(Bits_T)72 117 Q
(o_Symbols)-1.012 E F0 .606(returns the empty list if no match occurs.)3.356 F
.605(Figure 7 sho)6.105 F .605(ws an impro)-.275 F -.165(ve)-.165 G 3.355(dv)
.165 G(ersion)477.116 117 Q(of)72 132 Q F1(p_dbm_open\(\))2.75 E F0(using)2.75
E F1(Symbols_T)2.75 E(o_Bits\(\))-1.012 E F0(in place of nested if-statements.)
2.75 E(_______________________________________________________________________\
_______)75 159.5 Q/F2 10/Courier@0 SF(static SYMDESCR flag_syms[] = {)72 179 Q
6({")99.5 193 S(reader", O_RDONLY },)117.5 193 Q 6({")99.5 207 S
(writer", O_RDWR },)117.5 207 Q 6({")99.5 221 S(create", O_RDWR|O_CREAT },)
117.5 221 Q 6({0)99.5 235 S 6(,0})117.5 235 S(};)72 249 Q
(Object p_dbm_open\(int argc, Object *argv\) {)72 271.4 Q(DBM *dp;)99.5 285.4 Q
(Object d;)99.5 299.4 Q(dp = dbm_open\(Get_String\(argv[0]\),)99.5 321.8 Q
(Symbols_To_Bits\(argv[1], 0, flag_syms\),)123.5 335.8 Q
(argc == 3 ? Get_Integer\(argv[2]\) : 0666\);)123.5 349.8 Q(if \(dp == 0\))99.5
363.8 Q(return False;)127 377.8 Q 6(d=A)99.5 391.8 S
(lloc_Object\(sizeof\(struct s_dbm\), t_dbm, 0\);)129.5 391.8 Q
(DBMF\(d\)->dbm = dp;)99.5 405.8 Q(DBMF\(d\)->alive = 1;)99.5 419.8 Q
(return d;)99.5 433.8 Q(})72 447.8 Q/F3 10/Times-Bold@0 SF(Figur)153.235 465.6
Q 2.5(e7)-.18 G(:)188.885 465.6 Q/F4 10/Times-Roman@0 SF(Impro)5 E -.15(ve)-.15
G 2.5(dv).15 G(ersion of)243.145 465.6 Q/F5 10/Times-Italic@0 SF(dbm-open)2.5 E
F4(using)2.5 E F5(Symbols_T)2.5 E(o_Bits\(\))-.92 E F0(_______________________\
_______________________________________________________)75 484.2 Q 4.47(AS)97
517.8 S 1.72(cheme primiti)115.528 517.8 R 2.05 -.165(ve c)-.275 H 1.72
(alling the UNIX system call).165 F F1(access\(\))4.47 E F0 1.72(could use)4.47
F F1(Symbols_T)4.47 E(o_Bits\(\))-1.012 E F0(with a non-zero)72 531.8 Q F1
(mask_\215a)2.75 E(g)-.11 E F0(to construct a bitmask:)2.75 E F2
(Object p_access\(Object fn, Object mode\) {)100.346 554.303 Q
(access\(Get_String\(fn\), \(int\)Symbols_To_Bits\(mode, 1, access_syms\)\);)
127.846 568.303 Q(...)127.846 582.303 Q F0(where)72 603.803 Q F1(access_syms)
2.75 E F0(is de\214ned as:)2.75 E F2(static SYMDESCR access_syms[] = {)100.346
626.306 Q 6({")127.846 640.306 S 36(read", R_OK)145.846 640.306 R(},)6 E 6({")
127.846 654.306 S 30(write", W_OK)145.846 654.306 R(},)6 E 6({")127.846 668.306
S 18(execute", X_OK)145.846 668.306 R(},)6 E 6({0)127.846 682.306 S 6(,0})
145.846 682.306 S(};)100.346 696.306 Q F0 .471(Note that in this e)72 718.806 R
.471(xample the empty list can be passed as the)-.165 F F1(mode)3.221 E F0(ar)
3.221 E .471(gument to test for e)-.198 F(xistence)-.165 E
(of the \214le, because in this case)72 733.806 Q F1(Symbols_T)2.75 E
(o_Bits\(\))-1.012 E F0(returns zero \(the v)2.75 E(alue of)-.275 E F1(F_OK)
2.75 E F0(\).)A EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-3)276.087 51 S 2.75(9-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(12.2. Calling)72 87 R(Scheme Pr)2.75 E(ocedur)-.198 E
(es, Ev)-.198 E(aluating Scheme Code)-.11 E F0 2.75(AS)97 104.6 S
(cheme procedure can be called from within C or C++ code using the function)
113.808 104.6 Q/F2 10/Courier@0 SF
(Object Funcall\(Object fun, Object argl, int eval_flag\);)100.346 127.103 Q F0
2.092(The \214rst ar)72 149.603 R 2.092
(gument is the Scheme procedure\212either a primiti)-.198 F 2.423 -.165(ve p)
-.275 H 2.093(rocedure \().165 F/F3 11/Times-Italic@0 SF(T_Primitive)A F0 4.843
(\)o)C 4.843(ra)490.61 149.603 S .525(compound procedure \()72 164.603 R F3
(T_Compound)A F0 3.275(\). The)B .525(second ar)3.275 F .524
(gument is the list of ar)-.198 F .524(guments to be passed)-.198 F .679
(to the procedure, as a Scheme list.)72 179.603 R .68(The third ar)6.18 F .68
(gument, if non-zero, speci\214es that the ar)-.198 F(guments)-.198 E .315
(need to be e)72 194.603 R -.275(va)-.275 G .315
(luated before calling the Scheme procedure.).275 F .314
(This is usually not the case \(e)5.815 F .314(xcept in)-.165 F
(some special forms\).)72 209.603 Q(The return v)5.5 E(alue of)-.275 E F3
(Funcall\(\))2.75 E F0(is the result of the Scheme procedure.)2.75 E F3
(Funcall\(\))97 228.203 Q F0 .339
(is frequently used from within C callback functions that can be re)3.089 F .34
(gistered for cer)-.165 F(-)-.22 E .862(tain e)72 243.203 R -.165(ve)-.275 G
.862(nts, such as the user).165 F .862(-supplied X11 error handlers, X11 e)-.22
F -.165(ve)-.275 G .862(nt handlers, timeout handlers,).165 F .34(the C++)72
258.203 R F3(ne)3.09 E(w)-.165 E F0(handler)3.09 E 3.09(,e)-.44 G 3.09
(tc. Here,)175.286 258.203 R .34(use of)3.09 F F3(Funcall\(\))3.09 E F0(allo)
3.09 E .34(ws to re)-.275 F .34(gister a user)-.165 F .34
(-de\214ned Scheme proce-)-.22 F .916(dure for this e)72 273.203 R -.165(ve)
-.275 G .916(nt from within a Scheme program.).165 F .915(As an e)6.416 F .915
(xample, Figure 8 sho)-.165 F .915(ws the generic)-.275 F
(signal handler that is associated with v)72 288.203 Q
(arious UNIX signals by the UNIX e)-.275 E(xtension.)-.165 E(_________________\
_____________________________________________________________)75 315.703 Q F2
(void scheme_signal_handler\(int sig\) {)72 335.203 Q(Object fun, args;)99.5
349.203 Q(Set_Error_Tag\("signal-handler"\);)99.5 371.603 Q(Reset_IO\(1\);)99.5
385.603 Q(args = Bits_To_Symbols\(\(unsigned long\)sig, 0, signal_syms\);)99.5
399.603 Q(args = Cons\(args, Null\);)99.5 413.603 Q
(fun = VECTOR\(handlers\)->data[sig];)99.5 427.603 Q
(if \(TYPE\(fun\) != T_Compound\))99.5 441.603 Q
(Fatal_Error\("no handler for signal %d", sig\);)127 455.603 Q
(\(void\)Funcall\(fun, args, 0\);)99.5 469.603 Q
(Printf\(Curr_Output_Port, "\\n\\7Signal!\\n"\);)99.5 483.603 Q
(\(void\)P_Reset\(\);)99.5 497.603 Q(/*NOTREACHED*/)99.5 511.603 Q(})72 525.603
Q/F4 10/Times-Bold@0 SF(Figur)178.53 543.403 Q 2.5(e8)-.18 G(:)214.18 543.403 Q
/F5 10/Times-Roman@0 SF(Using)5 E/F6 10/Times-Italic@0 SF(Funcall\(\))2.5 E F5
(to call a Scheme procedure)2.5 E F0(_________________________________________\
_____________________________________)75 562.003 Q 1.669
(The signal handler sho)97 595.603 R 1.67
(wn in Figure 8 uses the signal number supplied by the system to)-.275 F(inde)
72 610.603 Q 5.904(xav)-.165 G 3.154(ector of user)118.304 610.603 R 3.154
(-de\214ned Scheme procedures \(that is,)-.22 F F3(Objects)5.904 E F0 3.154
(of type)5.904 F F3(T_Compound)5.904 E F0(\).)A F3(Reset_IO\(\))72 625.603 Q F0
.559(is used here to ensure that the current input and output port are in de\
\214ned state when)3.308 F .343(the Scheme signal handler starts e)72 640.603 R
-.165(xe)-.165 G 3.092(cuting. The).165 F(ar)3.092 E .342
(gument list is constructed by calling)-.198 F F3(Cons\(\))3.092 E F0 3.092(;i)
C(t)500.942 640.603 Q .427
(consists of a single element\212the signal number as a Scheme symbol.)72
655.603 R F3(signal_syms)5.928 E F0 .428(is an array of)3.178 F F3(SYMDESCR)72
670.603 Q F0 1.68(records that maps the UNIX signal names \()4.43 F F3(sighup)A
F0(,)A F3(sigint)4.43 E F0 4.43(,e)C 4.43(tc.\) to)406.546 670.603 R
(corresponding)4.43 E .184(Scheme symbols of the same names.)72 685.603 R .185
(The Scheme procedure called from the signal handler is not)5.684 F .296
(supposed to return \(it usually in)72 700.603 R -.22(vo)-.44 G -.11(ke).22 G
3.045(sac).11 G .295(ontinuation\); therefore the result of)253.863 700.603 R
F3(Funcall\(\))3.045 E F0 .295(is ignored.)3.045 F .541
(In case the Scheme handler \(and thus the call to)72 715.603 R F3(Funcall\(\))
3.291 E F0 3.292(\)d)C .542(oes return, a message is printed and)344.031
715.603 R(the primiti)72 730.603 Q -.165(ve)-.275 G F3 -.407(re)2.915 G(set)
.407 E F0(is called to return to the application')2.75 E 2.75(st)-.605 G(ople)
323.526 730.603 Q -.165(ve)-.275 G 2.75(lo).165 G 2.75(rs)363.72 730.603 S
(tandard Scheme tople)374.412 730.603 Q -.165(ve)-.275 G(l.).165 E EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(0-)288 51 S(An S-e)97 86 Q
(xpression can be e)-.165 E -.275(va)-.275 G(luated by calling the function)
.275 E/F1 10/Courier@0 SF(Object Eval\(Object expr\);)100.346 108.503 Q F0 .692
(which is identical to the primiti)72 131.003 R -.165(ve)-.275 G/F2 11
/Times-Italic@0 SF -.165(ev)3.606 G(al).165 E F0(\()3.441 E F2(P_Eval\(\))A F0
.691(in C\), e)3.441 F .691(xcept that no optional en)-.165 F .691
(vironment can)-.44 F .447(be supplied.)72 146.003 R F2(Eval\(\))5.947 E F0
.447(is v)3.197 F .447(ery rarely used by e)-.165 F .448
(xtensions or applications, mainly by implementations)-.165 F .797(of ne)72
161.003 R 3.547(ws)-.275 G .797(pecial forms.)110.587 161.003 R(Both)6.297 E F2
(Eval\(\))3.547 E F0(and)3.547 E F2(Funcall\(\))3.547 E F0 .797
(can trigger a g)3.547 F .797(arbage collection; all local v)-.055 F(ari-)-.275
E 1.216(ables holding Scheme)72 176.003 R F2(Objects)3.966 E F0 1.217
(with heap pointers must be properly re)3.966 F 1.217(gistered with the g)-.165
F(arbage)-.055 E(collector to survi)72 191.003 Q .33 -.165(ve c)-.275 H
(alls to these functions.).165 E 1.084(Occasionally an S-e)97 209.603 R 1.084
(xpression needs to be e)-.165 F -.275(va)-.275 G 1.084(luated that e).275 F
1.083(xists as a C string, for e)-.165 F(xample,)-.165 E .02(when a Scheme e)72
224.603 R .02(xpression has been entered through a `)-.165 F(`te)-.814 E .02
(xt widget')-.165 F 2.771('i)-.814 G 2.771(nag)382.157 224.603 S .021
(raphical user interf)403.583 224.603 R(ace.)-.11 E .719(Here, e)72 239.603 R
-.275(va)-.275 G .718
(luation requires calling the Scheme reader to parse the e).275 F .718
(xpression; therefore a straight-)-.165 F(forw)72 254.603 Q .659
(ard solution is to create a string port holding the string and then just `)
-.11 F(`load')-.814 E 3.41('t)-.814 G .66(he contents of)440.97 254.603 R
(the port:)72 268.603 Q F1(void eval_string\(char *expr\) {)100.346 291.106 Q
(Object port; GC_Node;)127.846 305.106 Q
(port = P_Open_Input_String\(Make_String\(expr, strlen\(expr\)\)\);)127.846
327.506 Q(GC_Link\(port\);)127.846 341.506 Q(Load_Source_Port\(port\);)127.846
355.506 Q(GC_Unlink;)127.846 369.506 Q(\(void\)P_Close_Input_Port\(port\);)
127.846 383.506 Q(})100.346 397.506 Q F0 .192
(If a more sophisticated function is required, the)72 420.006 R F2 -.165(ev)
2.941 G(al-string).165 E F0 -.165(ex)2.941 G .191
(tension included in the Elk distrib).165 F(u-)-.22 E(tion can be used \(`)72
434.006 Q(`lib/misc/elk-e)-.814 E -.275(va)-.275 G(l.c').275 E 2.75('\). This)
-.814 F -.165(ex)2.75 G(tension pro).165 E(vides a function)-.165 E F1
(char *Elk_Eval\(char *expr\);)100.346 456.509 Q F0 .005(that con)72 479.009 R
-.165(ve)-.44 G .006(rts the result of e).165 F -.275(va)-.275 G .006
(luating the stringized e).275 F .006
(xpression back to a C string and returns it as a)-.165 F 2.75(result. A)72
494.009 R(null pointer is returned if an error occurs during e)2.75 E -.275(va)
-.275 G(luation.).275 E .166
(Applications should not use this function as the primary interf)97 512.609 R
.166(ace to the e)-.11 F .165(xtension language.)-.165 F .327(In contrast to l\
anguages such as Tcl, the semantic concepts and data structures of Scheme are \
not)72 527.609 R 3.38(centered around strings, and strings are not a practicab\
le representation for S-e)72 542.609 R(xpressions.)-.165 E .345
(Instead, applications should pass control to the e)72 557.609 R .346
(xtension language by calling Scheme procedures)-.165 F(\(using)72 572.609 Q F2
(Funcall\(\))3.257 E F0 3.257(\)o)C 3.257(rb)156.724 572.609 S 3.257(yl)169.144
572.609 S .507(oading \214les containing Scheme code.)180.959 572.609 R .506
(The e)6.006 F .506(xtension language then calls)-.165 F .718
(back into the application')72 587.609 R 3.469(sC)-.605 G .719
(/C++ layer by in)200.757 587.609 R -.22(vo)-.44 G .719
(king application-supplied Scheme primiti).22 F -.165(ve)-.275 G 3.469(sa).165
G(nd)493 587.609 Q(other forms of callbacks as e)72 602.609 Q
(xplained in section 6.3.)-.165 E/F3 11/Times-Bold@0 SF 2.75(12.3. GC-Pr)72
632.609 R(otecting Global Objects)-.198 E F0 .043(Section 9.1 e)97 651.209 R
.043(xplained when\212and ho)-.165 F .043(w\212to re)-.275 F .043
(gister with the g)-.165 F .043(arbage collector function-local)-.055 F F2
(Object)72 666.209 Q F0 -.275(va)3.551 G .801(riables holding heap pointers.)
.275 F(Similarly)6.301 E 3.551(,g)-.715 G .801(lobal v)305.881 666.209 R .801
(ariables must usually be added to the)-.275 F 1.048
(set of reachable objects as well if the)72 681.209 R 3.798(ya)-.165 G 1.048
(re to survi)255.559 681.209 R 1.377 -.165(ve g)-.275 H 1.047
(arbage collections \(a useful e).11 F 1.047(xception to)-.165 F 1.239
(this rule will be introduced in section 12.4\).)72 696.209 R 1.239
(In contrast to local v)6.739 F 1.239(ariables, global v)-.275 F 1.24
(ariables are)-.275 F .99(only made kno)72 711.209 R .99(wn to the g)-.275 F
.99
(arbage collector once\212after initialization\212as their lifetime is that of)
-.055 F(the entire program.)72 725.209 Q 1.76 -.88(To a)5.5 H(dd a global v).88
E(ariable to the g)-.275 E(arbage collector')-.055 E 2.75(sr)-.605 G
(oot set, the macro)387.271 725.209 Q EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 50 S 2.75(1-)288 50 S/F1 10/Courier@0
SF(Global_GC_Link\(obj\))100.346 86 Q F0 .455
(must be called with the properly initialized v)72 108.5 R .455
(ariable of type)-.275 F/F2 11/Times-Italic@0 SF(Object)3.205 E F0 5.955(.T)C
.455(he macro tak)384.378 108.5 R .456(es the address)-.11 F
(of the speci\214ed object.)72 122.5 Q(If that is a problem, an equi)5.5 E
-.275(va)-.275 G(lent functional interf).275 E(ace can be used:)-.11 E F1
(void Func_Global_GC_Link\(Object *obj_ptr\);)100.346 145.003 Q F0 .07
(This function must be supplied the address of the global v)72 167.503 R .07
(ariable to be re)-.275 F .07(gistered with the g)-.165 F(arbage)-.055 E
(collector)72 182.503 Q(.)-.605 E 3.04(When writing e)97 201.103 R 3.041
(xtensions that maintain global)-.165 F F2(Object)5.791 E F0 -.275(va)5.791 G
(riables,).275 E F2(Global_GC_Link\(\))5.791 E F0(\(or)5.791 E F2
(Func_Global_GC_Link\(\))72 216.103 Q F0 3.313(\)i)C 3.313(su)193.86 216.103 S
.563(sually called from within the e)206.952 216.103 R .563
(xtension initialization function right)-.165 F .483(after each v)72 231.103 R
.483(ariable is assigned a v)-.275 F 3.233(alue. F)-.275 F .483
(or instance, the global Scheme v)-.165 F(ector)-.165 E F2(handler)3.233 E(s)
-.11 E F0 .484(that w)3.233 F(as)-.11 E .102(used in Figure 8 to associate pro\
cedures with UNIX signals is initialized and GC-protected as fol-)72 246.103 R
(lo)72 260.103 Q(ws:)-.275 E F1(void elk_init_unix_signal\(void\) {)100.346
282.606 Q(handlers = Make_Vector\(NSIG, False\);)127.846 296.606 Q
(Global_GC_Link\(handlers\);)127.846 310.606 Q(...)127.846 324.606 Q(})100.346
338.606 Q F2(NSIG)72 361.106 Q F0 .521
(is the number of UNIX signal types as de\214ned by the system include \214le.)
3.27 F .521(The signal han-)6.021 F 1.43
(dling Scheme procedures that are inserted into the v)72 376.106 R 1.43
(ector later need not be re)-.165 F 1.429(gistered with the)-.165 F -.055(ga)72
391.106 S 1.159(rbage collector).055 F 3.909(,b)-.44 G 1.159(ecause the)160.877
391.106 R 3.909(ya)-.165 G 1.159(re no)221.671 391.106 R 3.909(wr)-.275 G 1.159
(eachable through another object which itself is reach-)260.366 391.106 R
(able.)72 406.106 Q/F3 11/Times-Bold@0 SF 2.75(12.3.1. Dynamic)72 436.106 R
2.75(CD)2.75 G(ata Structur)171.297 436.106 Q(es)-.198 E F0 .318
(Dynamic data structures, such as the nodes of a link)97 454.706 R .318
(ed list containing Scheme)-.11 F F2(Objects)3.068 E F0 3.068(,c)C(an-)489.953
454.706 Q 1.189(not be easily re)72 469.706 R 1.189(gistered with the g)-.165 F
1.189(arbage collector)-.055 F 6.689(.T)-.605 G 1.189
(he simplest solution is to b)314.69 469.706 R 1.19(uild these data)-.22 F
1.626(structures in Scheme rather than in C or C++ in the \214rst place.)72
484.706 R -.165(Fo)7.126 G 4.376(re).165 G 1.626(xample, a link)396.472 484.706
R 1.626(ed list of)-.11 F 1.132(Scheme objects can be b)72 499.706 R 1.132
(uilt from Scheme pairs much more naturally and more straightforw)-.22 F(ard)
-.11 E .425(than from C structures or the lik)72 514.706 R .424
(e, in particular if the list will be tra)-.11 F -.165(ve)-.22 G .424
(rsed and manipulated using).165 F 1.13(Scheme primiti)72 529.706 R -.165(ve)
-.275 G 3.88(sa).165 G -.165(ny)163.646 529.706 S -.11(wa).165 G 5.31 -.715
(y. B).11 H 1.131
(esides, data structures programmed in Scheme bene\214t from auto-).715 F 1.497
(matic memory management, whereas use of)72 544.706 R F2(malloc\(\))4.247 E F0
(and)4.247 E F2(fr)4.247 E(ee\(\))-.407 E F0 1.496
(in C frequently is a source of)4.246 F(memory leaks and related errors.)72
559.706 Q 2.288(If for some reason a dynamic data structure must be b)97
578.306 R 2.288(uilt in C or C++ rather than in)-.22 F 3.113
(Scheme, reachability problems can be a)72 593.306 R -.22(vo)-.22 G 3.113
(ided by inserting all).22 F F2(Objects)5.863 E F0 3.112(into a global, GC-)
5.863 F 1.497(protected v)72 608.306 R 1.497(ector \(such as)-.165 F F2
(handler)4.247 E(s)-.11 E F0 1.497
(in Figure 8\) and then use the corresponding v)4.247 F 1.498(ector inde)-.165
F -.165(xe)-.165 G(s).165 E .339(rather than the actual)72 623.306 R F2
(Objects)3.089 E F0 5.839(.T)C .339(his sounds more dif)217.575 623.306 R .339
(\214cult than it really is; Appendix B sho)-.275 F .338(ws the)-.275 F 1.632
(complete source code of a small module to re)72 638.306 R(gister)-.165 E F2
(Objects)4.382 E F0 1.632(in a Scheme v)4.382 F(ector)-.165 E 7.133(.T)-.605 G
1.633(he module)456.233 638.306 R -.165(ex)72 653.306 S .185
(ports three functions:).165 F F2 -.407(re)2.935 G(gister_object\(\))-.033 E F0
.185(inserts an)2.935 F F2(Object)2.935 E F0 .184(into the v)2.934 F .184
(ector and returns the inde)-.165 F 2.934(xa)-.165 G(s)499.721 653.306 Q(an)72
668.306 Q F2(int)2.855 E F0(;)A F2(der)2.855 E -.44(eg)-.407 G
(ister_object\(\)).44 E F0(remo)2.855 E -.165(ve)-.165 G 2.855(sa).165 G(n)
233.768 668.306 Q F2(Object)2.855 E F0 .105(with a gi)2.855 F -.165(ve)-.275 G
2.855(ni).165 G(nde)334.371 668.306 Q 2.855(xf)-.165 G .105(rom the v)362.108
668.306 R .105(ector; and)-.165 F F2 -.11(ge)2.856 G(t_object\(\)).11 E F0 .688
(returns the)72 683.306 R F2(Object)3.438 E F0 .688(stored under a gi)3.438 F
-.165(ve)-.275 G 3.438(ni).165 G(nde)253.256 683.306 Q(x.)-.165 E F2 -.407(re)
6.188 G(gister_object\(\))-.033 E F0 .687(dynamically gro)3.438 F .687
(ws the v)-.275 F .687(ector to)-.165 F -.22(avo)72 698.306 S
(id arti\214cial limits.).22 E 4.45(Ad)97 716.906 S 1.7
(ynamic data structure \(e.)114.892 716.906 R 1.701(g. link)1.833 F 1.701
(ed list\) implementation using this module w)-.11 F 1.701(ould call)-.11 F F2
-.407(re)72 731.906 S(gister_object\(\))-.033 E F0 .29(when inserting a ne)3.04
F(w)-.275 E F2(Object)3.039 E F0 .289(into the list and then use the inte)3.039
F .289(ger return v)-.165 F .289(alue in)-.275 F EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(2-)288 51 S .066
(place of the)72 87 R/F1 11/Times-Italic@0 SF(Object)2.816 E F0 2.816
(itself. Similarly)2.816 F 2.816(,i)-.715 G 2.817(tw)237.583 87 S .067
(ould call)251.29 87 R F1(der)2.817 E -.44(eg)-.407 G(ister_object\(\)).44 E F0
(whene)2.817 E -.165(ve)-.275 G 2.817(ran).165 G .067(ode is remo)436.986 87 R
-.165(ve)-.165 G(d).165 E .948(from the list.)72 102 R F1 -.11(ge)6.448 G
(t_object\(\)).11 E F0 -.11(wo)3.698 G .948(uld be used to retrie).11 F 1.278
-.165(ve t)-.275 H(he).165 E F1(Object)3.698 E F0 .948(associated with a gi)
3.698 F -.165(ve)-.275 G 3.697(nl).165 G .947(ist ele-)473.419 102 R 3.026
(ment. Note)72 117 R .276(that with these functions the same)3.026 F F1(Object)
3.026 E F0 .276(can be re)3.026 F .277(gistered multiple times \(each time)
-.165 F .971(under a ne)72 132 R 3.72(wi)-.275 G(nde)134.202 132 Q .97
(x\) without ha)-.165 F .97(ving to maintain reference counts: the g)-.22 F .97
(arbage collector does not)-.055 F 1.479(care ho)72 147 R 4.229(wo)-.275 G
1.479(ften a particular)122.94 147 R F1(Object)4.229 E F0 1.479(is tra)4.229 F
-.165(ve)-.22 G 1.479(rsed during g).165 F 1.48
(arbage collection, as long as it will be)-.055 F(reached at least once.)72 162
Q/F2 11/Times-Bold@0 SF 2.75(12.4. W)72 192 R(eak P)-.715 E
(ointers and Object T)-.22 E(ermination)-1.012 E F0 4.753(Ad)97 210.6 S 2.003
(ata structure implementation may deliberately use)115.195 210.6 R F1(Objects)
4.753 E F0 2.003(that are not added to the)4.753 F .313
(global set of reachable pointers \(as described in the pre)72 225.6 R .314
(vious section\) and are thus in)-.275 F .314(visible to the)-.44 F -.055(ga)72
240.6 S .862(rbage collector).055 F 6.362(.I)-.605 G 3.612(nt)161.031 240.6 S
.862(his case, it becomes possible to determine whether or not g)173.201 240.6
R .861(arbage collec-)-.055 F .516(tion has found an)72 255.6 R(y)-.165 E F1
(other)3.267 E F0 .517(pointers to the same Scheme objects.)3.267 F .517
(This property can be e)6.017 F .517(xploited in)-.165 F(se)72 270.6 Q -.165
(ve)-.275 G(ral w).165 E(ays by e)-.11 E(xtensions or applications using Elk.)
-.165 E .099(Pointers that are not included in the g)97 289.2 R .099
(arbage collector')-.055 F 2.849(sr)-.605 G .099
(eachability search are called `)346.821 289.2 R(`weak)-.814 E(pointers')72
304.2 Q 3.858('. The)-.814 F 1.108
(memory occupied by a Scheme object that is only referenced by weak pointers)
3.858 F 1.08(will be reclaimed.)72 319.2 R 1.079(The term)6.58 F F1(weak)3.829
E F0 -.165(ex)3.829 G 1.079
(presses the notion that the pointer is not strong enough to).165 F(pre)72
334.2 Q -.165(ve)-.275 G .665(nt the object it points to from being g).165 F
.666(arbage collected.)-.055 F .666(Code using weak pointers can scan)6.166 F
1.317(the pointers immediately after each g)72 349.2 R 1.316
(arbage collection and check whether the tar)-.055 F 1.316(get object has)-.198
F .166(been visited by the just-\214nished g)72 364.2 R .166
(arbage collection.)-.055 F .166
(If this is the case, normal \(strong\) pointers to)5.666 F .234
(the object must e)72 379.2 R .234(xist \(which can therefore be considered `)
-.165 F(`li)-.814 E -.165(ve)-.275 G -.814('').165 G .233
(\), and the weak pointer is updated).814 F .472
(manually to point to the object')72 394.2 R 3.223(sn)-.605 G 1.023 -.275(ew l)
225.172 394.2 T 3.223(ocation. On).275 F .473
(the other hand, if the object has not been vis-)3.223 F
(ited, no more \(normal\) references to it e)72 409.2 Q
(xist and the memory occupied by it has been reclaimed.)-.165 E -.88(We)97
427.8 S 1.508(ak pointers are useful in implementing certain types of data str\
uctures where the sole).88 F -.165(ex)72 442.8 S 1.622(istence of a \(weak\) p\
ointer to an object from within this data structure should not k).165 F 1.623
(eep the)-.11 F .093(object ali)72 457.8 R .423 -.165(ve \()-.275 H F1 .093
(weak sets).165 F F0(,)A F1(populations)2.842 E F0 2.842(,c)C .092
(ertain kinds of hash tables, etc.\).)239.146 457.8 R .092
(Objects that are not reach-)5.592 F .556
(able through strong pointers are then remo)72 472.8 R -.165(ve)-.165 G 3.306
(df).165 G .556(rom the weak data structure after g)284.826 472.8 R .557
(arbage collec-)-.055 F 3.207(tion. In)72 487.8 R .456
(this case, it is frequently useful to in)3.207 F -.22(vo)-.44 G .676 -.11
(ke a `).22 H .456(`termination function')-.704 F 3.206('f)-.814 G .456
(or each such object,)415.27 487.8 R -.917(e. g.)72 502.8 R .853
(for objects that contain resources of which only a \214nite amount is a)3.603
F -.275(va)-.22 G .854(ilable, such as UNIX).275 F .844
(\214le descriptors \(or FILE structures\), X displays and windo)72 517.8 R
.844(ws, etc.)-.275 F .844(The termination function for)6.344 F .848(Scheme po\
rts closes the \214le pointer encapsulated in a port object if it is still ope\
n; lik)72 532.8 R -.275(ew)-.11 G .849(ise, the).275 F .703
(termination function for X windo)72 547.8 R .703(ws closes the windo)-.275 F
3.453(wa)-.275 G .703(nd thereby remo)327.599 547.8 R -.165(ve)-.165 G 3.453
(si).165 G 3.453(tf)421.943 547.8 S .703(rom the display)432.117 547.8 R(,)
-.715 E 1.019(and so on.)72 562.8 R 1.019(Thus, should an object holding some \
kind of resource go inaccessible before it w)6.519 F(as)-.11 E .146
(terminated `)72 577.8 R(`properly')-.814 E 2.895('b)-.814 G 2.895(yc)180.63
577.8 S .145(alling the respecti)193.909 577.8 R .475 -.165(ve S)-.275 H .145
(cheme primiti).165 F .475 -.165(ve \()-.275 H F1(close-input-port).165 E F0(,)
A F1(close-output-)2.895 E(port)72 592.8 Q F0(,)A F1(destr)2.75 E(oy-window)
-.495 E F0 2.75(,e)C(tc.\), then resource will be reclaimed after the ne)
176.005 592.8 Q(xt g)-.165 E(arbage collection run.)-.055 E F2 2.75
(12.4.1. Using)72 622.8 R -.715(We)2.75 G(ak P).715 E(ointers)-.22 E F0 .189
(Code using weak pointers must scan the pointers immediately after each g)97
641.4 R .189(arbage collection,)-.055 F -.22(bu)72 656.4 S(t).22 E F1(befor)
3.133 E(e)-.407 E F0 .382(the interpreter resumes normal operation, because th\
e memory referenced by the weak)3.133 F .29(pointers can be reused the ne)72
671.4 R .291(xt time heap space is requested.)-.165 F .291
(This can be accomplished by re)5.791 F(gis-)-.165 E 2.165
(tering a so-called `)72 686.4 R(`after)-.814 E 2.165(-GC function.)-.22 F
(Elk')7.665 E 4.915(sg)-.605 G 2.165(arbage collector in)287.357 686.4 R -.22
(vo)-.44 G -.11(ke).22 G 4.914(sa).11 G 2.164(ll after)408.24 686.4 R 2.164
(-GC functions)-.22 F(\(without ar)72 700.4 Q(guments\) upon completion.)-.198
E 1.76 -.88(To r)5.5 H -.165(eg).88 G(ister an after).165 E
(-GC functions, the function)-.22 E EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(3-)288 51 S/F1 10/Courier@0
SF(void Register_After_GC\(\(void \(*func\)\(void\)\)\);)100.346 86 Q F0 1.32
(is used, typically in an e)72 108.5 R 1.321(xtension initializer)-.165 F 6.821
(.S)-.605 G(imilarly)283.357 108.5 Q 4.071(,e)-.715 G 1.321
(xtensions and applications can re)329.019 108.5 R(gister)-.165 E -.814(``)72
122.5 S(before-GC functions').814 E 2.75('u)-.814 G(sing)184.002 122.5 Q F1
(void Register_Before_GC\(\(void \(*func\)\(void\)\)\);)100.346 145.003 Q F0
2.077(These functions are called immediately before each g)72 167.503 R 2.077
(arbage collection and may be used, for)-.055 F 1.64
(instance, to change the application')72 182.503 R 4.39(sc)-.605 G 1.641
(ursor to an hour)247.004 182.503 R 1.641(glass symbol.)-.198 F(After)7.141 E
1.641(-GC and before-GC)-.22 F(functions must not trigger another g)72 197.503
Q(arbage collection.)-.055 E 2.606(An after)97 216.103 R 2.606
(-GC function scanning a set of weak pointers mak)-.22 F 2.605
(es use of the three macros)-.11 F/F2 11/Times-Italic@0 SF(IS_ALIVE\(\))72
231.103 Q F0(,)A F2 -.66(WA)4.908 G(S_FOR).66 E -.66(WA)-.198 G(RDED\(\)).66 E
F0 4.908(,a)C(nd)243.417 231.103 Q F2(UPD)4.908 E -.407(AT)-.385 G(E_OBJ\(\))
.407 E F0 7.658(.F)C 2.158(or e)349.428 231.103 R 2.159(xample, an after)-.165
F 2.159(-GC function)-.22 F 1.302(scanning a table of elements holding)72
246.103 R F2(Objects)4.052 E F0 1.301
(with weak pointers could be written as sho)4.052 F 1.301(wn in)-.275 F
(Figure 9.)72 261.103 Q(______________________________________________________\
________________________)75 288.603 Q F1(void scan_weak_table\(void\) {)72
308.103 Q(int i;)99.5 322.103 Q(for \(i = 0; i < table_size; i++\) {)99.5
344.503 Q(Object obj = table[i].obj;)127 358.503 Q(if \(IS_ALIVE\(obj\)\) {)127
372.503 Q(/* object is still reachable */)319 372.503 Q
(if \(WAS_FORWARDED\(obj\)\))154.5 386.503 Q(UPDATE_OBJ\(obj\);)182 400.503 Q 6
(}e)127 414.503 S(lse {)145 414.503 Q 6(terminate_object\(obj\); /*)154.5
428.503 R(object is dead; finalize... */)6 E(table[i] = 0;)154.5 442.503 Q
(/* and remove it from the table */)298.5 442.503 Q(})127 456.503 Q(})99.5
470.503 Q(})72 484.503 Q/F3 10/Times-Bold@0 SF(Figur)142.245 502.303 Q 2.5(e9)
-.18 G(:)177.895 502.303 Q/F4 10/Times-Roman@0 SF(After)5 E
(-GC function that scans a table containing weak pointers)-.2 E F0(___________\
___________________________________________________________________)75 520.903
Q 1.303(The function)97 554.503 R F2(scan_weak_table\(\))4.053 E F0(sho)4.053 E
1.303(wn in Figure 9 can then be re)-.275 F 1.303(gistered as an after)-.165 F
(-GC)-.22 E(function by in)72 568.503 Q -.22(vo)-.44 G(king).22 E F1
(Register_After_GC\(scan_weak_table\);)100.346 591.006 Q F0 2.534
(The then-part of the if-statement in)97 617.106 R F2(scan_weak_table\(\))5.284
E F0 2.534(is entered if the just-completed)5.284 F -.055(ga)72 632.106 S 1.012
(rbage collection has encountered an).055 F 3.762(yp)-.165 G 1.013
(ointers to the Scheme object pointed to by)258.593 632.106 R F2(obj)3.763 E F0
3.763(;i)C 3.763(nt)478.842 632.106 S(his)491.163 632.106 Q .069
(case the pointer con)72 647.106 R -.165(vey)-.44 G .069(ed in).165 F F2(obj)
2.819 E F0 .069(is updated manually using)2.819 F F2(UPD)2.819 E -.407(AT)-.385
G(E_OBJ\(\)).407 E F0 .069(\(when using the gen-)2.819 F .993(erational g)72
662.106 R .993(arbage collector included in Elk, reachability of an object doe\
s not necessarily imply)-.055 F .481(that it w)72 677.106 R .48(as forw)-.11 F
.48(arded, hence the additional call to)-.11 F F2 -.66(WA)3.23 G(S_FOR).66 E
-.66(WA)-.198 G(RDED\(\)).66 E F0 3.23(\). If)B F2(IS_ALIVE\(\))3.23 E F0
(returns)3.23 E -.11(fa)72 692.106 S .719
(lse, no more strong pointers to the object e).11 F .72
(xist and it can be terminated and remo)-.165 F -.165(ve)-.165 G 3.47(df).165 G
.72(rom the)469.367 692.106 R .539(weak data structure.)72 707.106 R F2
(terminate_object\(\))6.039 E F0 .539(typically w)3.289 F .539(ould release an)
-.11 F 3.288(ye)-.165 G .538(xternal resources contained)382.573 707.106 R .322
(in the Scheme object, b)72 722.106 R .322(ut it must neither create an)-.22 F
3.072(yn)-.165 G .872 -.275(ew o)308.552 722.106 T .322
(bjects nor attempt to `).275 F(`re)-.814 E(vi)-.275 E -.165(ve)-.275 G 1.95
-.814('' t).165 H .323(he dead).814 F EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(4-)288 51 S(object in an)72
87 Q 2.75(yw)-.165 G(ay \(e.)139.243 87 Q(g. create a ne)1.833 E 2.75(ws)-.275
G(trong pointer to it by inserting it into another)238.228 87 Q 2.75(,l)-.44 G
-2.365 -.275(iv e)443.125 87 T(object\).)3.025 E/F1 11/Times-Bold@0 SF 2.75
(12.4.2. Functions)72 117 R -.275(fo)2.75 G 2.75(rA).275 G(utomatic Object T)
180.867 117 Q(ermination)-1.012 E F0 1.614
(As automatic termination of Scheme objects using user)97 135.6 R 1.613
(-supplied termination functions is)-.22 F .171
(the most frequent use of weak pointers, Elk of)72 150.6 R .172
(fers a set of con)-.275 F -.165(ve)-.44 G .172
(nience functions for this purpose.).165 F 1.464
(Extensions and applications can insert)72 165.6 R/F2 11/Times-Italic@0 SF
(Objects)4.214 E F0 1.463(into a weak list maintained by Elk and remo)4.214 F
-.165(ve)-.165 G(them from the list using the tw)72 179.6 Q 2.75(of)-.11 G
(unctions)218.861 179.6 Q/F3 10/Courier@0 SF
(void Register_Object\(Object obj, char *group,)100.346 202.103 Q
(\(Object \(*term\)\(Object\)\), int leader_flag\);)226.346 216.103 Q
(void Deregister_Object\(Object obj\);)100.346 230.103 Q F2(term)97 256.203 Q
F0 2.705(is the termination function that is called automatically with)5.455 F
F2(obj)5.455 E F0 2.706(when the object)5.455 F .001
(becomes unreachable \(its result is not used\);)72 271.203 R F2(gr)2.751 E
(oup)-.495 E F0(is an opaque `)2.751 E(`cookie')-.814 E 2.75('a)-.814 G
(ssociated with)405.924 271.203 Q F2(obj)2.75 E F0(and)2.75 E 3.098
(can be used to e)72 286.203 R 3.098
(xplicitly terminate all objects with the same v)-.165 F 3.098(alue for)-.275 F
F2(gr)5.848 E(oup)-.495 E F0 5.849(;an)C(on-zero)470.406 286.203 Q F2
(leader_\215a)72 301.203 Q(g)-.11 E F0 .82(indicates that)3.57 F F2(obj)3.57 E
F0 .82(is the `)3.57 F(`leader')-.814 E 3.57('o)-.814 G 3.57(ft)282.824 301.203
S .82(he speci\214ed)293.115 301.203 R F2(gr)3.569 E(oup)-.495 E F0 6.319(.E)C
.819(lk automatically re)391.317 301.203 R(gisters)-.165 E .433(an after)72
316.203 R .433(-GC function to scan the weak list maintained by these tw)-.22 F
3.184(of)-.11 G .434(unctions and to call the)376.87 316.203 R F2(term)3.184 E
F0 .791(function for all objects that could be pro)72 331.203 R -.165(ve)-.165
G 3.54(nu).165 G .79(nreachable by the g)279.02 331.203 R .79(arbage collector)
-.055 F 3.54(,s)-.44 G .79(imilar to the)448.641 331.203 R(function sho)72
346.203 Q(wn in Figure 9.)-.275 E 3.254(Object termination tak)97 364.803 R
3.254(es place in tw)-.11 F 6.004(op)-.11 G 3.254
(hases: \214rst all objects re)289.224 364.803 R 3.255(gistered with a zero)
-.165 F F2(leader_\215a)72 379.803 Q(g)-.11 E F0 1.104
(are terminated, after that the termination functions of the leaders are in)
3.854 F -.22(vo)-.44 G -.11(ke).22 G 3.854(d. This).11 F 1.201
(group and leader notion is used, for e)72 394.803 R 1.202
(xample, by the Xlib e)-.165 F 1.202(xtension to associate windo)-.165 F 1.202
(ws \(and)-.275 F .898
(other resources\) with an X display: the ID of the display to which a windo)72
409.803 R 3.648(wb)-.275 G .898(elongs is used as)427.672 409.803 R .978
(the windo)72 424.803 R(w')-.275 E 3.728(sg)-.605 G .979
(roup, and the display is mark)140.902 424.803 R .979(ed as the group leader)
-.11 F 6.479(.T)-.605 G .979(hus, if a display becomes)389.182 424.803 R .916
(unreachable or is closed by the program, all its windo)72 439.803 R .915
(ws are closed before the display is \214nally)-.275 F(destro)72 454.803 Q(yed)
-.11 E/F4 9/Times-Roman@0 SF(5)-3.6 I F0(.)3.6 I -1.1 -.88(Tw o)72 472.403 T
(additional functions are pro)3.63 E(vided for e)-.165 E
(xplicitly calling the termination functions:)-.165 E F3
(void Terminate_Type\(int type\);)100.346 494.906 Q
(void Terminate_Group\(char *group\);)100.346 508.906 Q F2 -1.012(Te)72 531.406
S(rminate_T)1.012 E(ype\(\))-.814 E F0(in)4.464 E -.22(vo)-.44 G -.11(ke).22 G
4.464(st).11 G 1.714(he termination function \(if an)195.042 531.406 R 1.713
(y\) for all objects of a gi)-.165 F -.165(ve)-.275 G 4.463(nt).165 G 1.713
(ype and)467.769 531.406 R .63(deletes them from the weak list.)72 546.406 R
-.165(Fo)6.131 G 3.381(re).165 G .631
(xample, to close all ports currently held open by Elk \(and)245.031 546.406 R
(thus apply)72 560.406 Q F2(fclose\(\))2.75 E F0
(to the FILE pointers embedded in them\), one w)2.75 E(ould call)-.11 E F3
(Terminate_Type\(T_Port\))100.346 582.909 Q F2 -1.012(Te)72 605.409 S
(rminate_Gr)1.012 E(oup\(\))-.495 E F0 .075(calls the termination functions of\
 all non-leader objects belonging to the spec-)2.825 F(i\214ed)72 620.409 Q F2
(gr)2.75 E(oup)-.495 E F0(.)A(Finally)72 638.009 Q 2.75(,a)-.715 G
(nother function,)112.843 638.009 Q F2 -.495(Fi)2.75 G(nd_Object\(\)).495 E F0
2.75(,l)C(ocates an object in the weak list:)256.855 638.009 Q .36 LW 76.5
681.2 72 681.2 DL 81 681.2 76.5 681.2 DL 85.5 681.2 81 681.2 DL 90 681.2 85.5
681.2 DL 94.5 681.2 90 681.2 DL 99 681.2 94.5 681.2 DL 103.5 681.2 99 681.2 DL
108 681.2 103.5 681.2 DL 112.5 681.2 108 681.2 DL 117 681.2 112.5 681.2 DL
121.5 681.2 117 681.2 DL 126 681.2 121.5 681.2 DL 130.5 681.2 126 681.2 DL 135
681.2 130.5 681.2 DL 139.5 681.2 135 681.2 DL 144 681.2 139.5 681.2 DL/F5 7
/Times-Roman@0 SF(5)82 691.2 Q F4 .437(This interf)4.5 2.8 N .437(ace has e)
-.09 F -.18(vo)-.225 G(lv).18 E .437(ed in a slightly)-.135 F/F6 9
/Times-Italic@0 SF .438(ad hoc)2.688 F F4 -.09(wa)2.688 G .438(y; the tw).09 F
.438(o-stage relationship e)-.09 F .438(xpressed by groups and)-.135 F
(group leaders may not be suf)72 705 Q(\214cient for more comple)-.225 E 2.25
(xh)-.135 G(ierarchies than those used in X.)271.854 705 Q EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(5-)288 51 S/F1 10/Courier@0
SF(Object Find_Object\(int type, char *group,)100.346 86 Q
(\(int \(*match_func\)\(Object, ...\)\), ...\);)173.346 100 Q F0(Ar)72 122.5 Q
.895(guments are a Scheme type, a group, and a match function called once for \
each object in the)-.198 F .558
(weak list that has the speci\214ed type and group.)72 137.5 R .557
(The match function is passed the)6.058 F/F2 11/Times-Italic@0 SF(Object)3.307
E F0 .557(and the)3.307 F 1.249(remaining ar)72 152.5 R 1.249(guments to)-.198
F F2 -.495(Fi)3.999 G(nd_Object\(\)).495 E F0 3.999(,i)C 3.999(fa)255.031 152.5
S -.165(ny)267.577 152.5 S 6.749(.I)-.55 G 3.999(ft)290.859 152.5 S 1.249
(he match function returns true for an object,)301.579 152.5 R
(this object becomes the return v)72 167.5 Q(alue of)-.275 E F2 -.495(Fi)2.75 G
(nd_Object\(\)).495 E F0 2.75(;o)C(therwise it returns)318.686 167.5 Q F2(Null)
2.75 E F0(.)A .087(Complicated as it may seem,)97 186.1 R F2 -.495(Fi)2.836 G
(nd_Object\(\)).495 E F0 .086(is quite useful\212e)2.836 F .086
(xtensions can check whether a)-.165 F .096
(Scheme object with certain properties has already been re)72 201.1 R .096
(gistered with the weak list earlier and, if)-.165 F 1.923
(this is the case, return)72 216.1 R F2(this)4.672 E F0 1.922
(object instead of creating a ne)4.672 F 4.672(wo)-.275 G 4.672(ne. This)
359.662 216.1 R 1.922(is critical for Scheme)4.672 F 2.033
(objects encapsulating some kind of e)72 231.1 R 2.033
(xternal resource, such as \214le descriptors or X windo)-.165 F(ws.)-.275 E
(Consider)72 246.1 Q 3.049(,f)-.44 G .299(or e)120.743 246.1 R .299
(xample, a Scheme primiti)-.165 F .629 -.165(ve t)-.275 H .299
(hat obtains the topmost windo).165 F 3.049(wo)-.275 G 3.049(nag)417.697 246.1
S -2.365 -.275(iv e)439.679 246.1 T 3.049(nXd).275 G(isplay)477.721 246.1 Q
1.784(and returns it as a Scheme)72 261.1 R F2(window)4.534 E F0 4.534
(object. If)4.534 F 1.784(the primiti)4.534 F 2.114 -.165(ve j)-.275 H 1.784
(ust were to instantiate a Scheme).165 F .488
(object encapsulating the corresponding X windo)72 276.1 R 3.238(wI)-.275 G
3.238(Df)301.946 276.1 S .488(or each call, it w)316.789 276.1 R .487
(ould become possible for)-.11 F(tw)72 291.1 Q 3.773(oo)-.11 G 3.773(rm)97.663
291.1 S 1.023(ore distinct Scheme)113.657 291.1 R F2(window)3.773 E F0 1.024
(objects to reference the same real X windo)3.773 F 5.204 -.715(w. T)-.275 H
1.024(his is not).715 F .643(acceptable, because tw)72 306.1 R 3.393(oS)-.11 G
.642(cheme objects pointing to the same X object should certainly be equal)
188.67 306.1 R .7(in the sense of)72 321.1 R F2(eq?)3.45 E F0 3.451(,n)C .701
(ot to mention the problems that w)168.374 321.1 R .701
(ould ensue if one of the Scheme)-.11 F F2(window)3.451 E F0 .597
(objects were closed \(thereby destro)72 336.1 R .597
(ying the underlying X windo)-.11 F .597(w\) and the second one were still)
-.275 F 1.279(be operated on afterw)72 351.1 R 4.029(ards. Example)-.11 F 1.28
(uses of)4.03 F F2 -.495(Fi)4.03 G(nd_Object\(\)).495 E F0 1.28
(can be found in the Xlib e)4.03 F(xtension)-.165 E(and in the Xt e)72 366.1 Q
(xtension that are included in the Elk distrib)-.165 E(ution.)-.22 E/F3 11
/Times-Bold@0 SF 2.75(12.5. Err)72 396.1 R(ors)-.198 E F0(User)97 414.7 Q .131
(-supplied code can signal an error by calling)-.22 F F2(Primitive_Err)2.881 E
(or\(\))-.495 E F0 .131(with a format string and)2.881 F(as man)72 428.7 Q 2.75
(ya)-.165 G(dditional ar)115.824 428.7 Q(guments \()-.198 E F2(Objects)A F0
2.75(\)a)C 2.75(st)254.633 428.7 S
(here are format speci\214ers in the format string:)264.72 428.7 Q F1
(void Primitive_Error\(char *fmt, ...\);)100.346 451.203 Q F2(Primitive_Err)72
473.703 Q(or\(\))-.495 E F0 .232(calls the def)2.982 F .232(ault or user)-.11 F
.233(-de\214ned error handler as described in the Elk Reference)-.22 F 1.106
(Manual, passing it an `)72 488.703 R 1.106(`error tag')-.814 F 3.855('i)-.814
G 1.105(dentifying the source of the error)231.887 488.703 R 3.855(,t)-.44 G
1.105(he format string, and the)391.736 488.703 R 1.53(remaining ar)72 503.703
R 4.28(guments. A)-.198 F 1.53(special format speci\214er `)4.28 F(`~E')-.814 E
4.28('c)-.814 G 1.531(an be used to interpolate the standard)331.068 503.703 R
1.18(error message te)72 518.703 R 1.179
(xt corresponding to the UNIX error number)-.165 F F2(errno)3.929 E F0 3.929
(;t)C 1.179(his is useful for primiti)384.224 518.703 R -.165(ve)-.275 G(s).165
E .143(that in)72 533.703 R -.22(vo)-.44 G .363 -.11(ke U).22 H .143
(NIX system calls or certain C library functions \(if `).11 F(`~e')-.814 E
2.894('i)-.814 G 2.894(su)382.313 533.703 S .144(sed, the \214rst character of)
394.986 533.703 R 1.357(the te)72 548.703 R 1.357(xt is con)-.165 F -.165(ve)
-.44 G 1.357(rted to lo).165 F 1.357(wer case\).)-.275 F 1.357
(If this format speci\214er is used, the current)6.857 F F2(errno)4.106 E F0
1.356(must be)4.106 F 1.573(assigned to a v)72 563.703 R(ariable)-.275 E F2
(Saved_Errno)4.323 E F0 1.574(prior to calling)4.323 F F2(Primitive_Err)4.324 E
(or\(\))-.495 E F0 1.574(to pre)4.324 F -.165(ve)-.275 G 1.574
(nt it from being).165 F -.165(ove)72 578.703 S(rwritten by the ne).165 E
(xt system call or C library function.)-.165 E F2(Primitive_Err)5.5 E(or\(\))
-.495 E F0(does not return.)2.75 E .138
(Applications that need to supply their o)97 597.303 R .137
(wn error handler by rede\214ning)-.275 F F2(err)2.887 E(or)-.495 E(-handler)
-.22 E F0(usually)2.887 E(do so in Scheme, typically at the be)72 612.303 Q
(ginning of the initial Scheme \214le loaded in)-.165 E F2(main\(\))2.75 E F0
(.)A(If)97 630.903 Q F2(Primitive_Err)3.012 E(or\(\))-.495 E F0 .262
(is called from within a C function that implements a Scheme primiti)3.012 F
-.165(ve)-.275 G(,).165 E 1.231
(an error tag is supplied by Elk \(the name of the primiti)72 645.903 R -.165
(ve)-.275 G 3.98(\). Applications).165 F 1.23(may set the error tag)3.98 F
-.165(ex)72 660.903 S .578(plicitly at the be).165 F .578
(ginning of sections of C/C++ code that reside outside of primiti)-.165 F -.165
(ve)-.275 G .579(s, for e).165 F(xam-)-.165 E .41
(ple, before loading an initial Scheme \214le in the application')72 675.903 R
(s)-.605 E F2(main\(\))3.16 E F0 5.91(.T)C .63 -.11(wo f)387.876 675.903 T .41
(unctions are pro).11 F(vided)-.165 E(to set and query the current error tag:)
72 689.903 Q EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(6-)288 51 S/F1 10/Courier@0
SF(void Set_Error_Tag\(const char *tag\);)100.346 86 Q
(char *Get_Error_Tag\(void\);)100.346 100 Q F0 .924(The follo)72 122.5 R .924
(wing three functions can be used by primiti)-.275 F -.165(ve)-.275 G 3.675(st)
.165 G 3.675(os)331.658 122.5 S .925(ignal errors with standardized mes-)
345.112 122.5 R(sages in certain situations:)72 136.5 Q F1
(void Range_Error\(Object offending_obj\);)100.346 159.003 Q
(void Wrong_Type\(Object offending_obj, int expected_type\);)100.346 173.003 Q
(void Wrong_Type_Combination\(Object offending_obj, char *expected_type\);)
100.346 187.003 Q/F2 11/Times-Italic@0 SF(Rang)72 209.503 Q(e_Err)-.11 E
(or\(\))-.495 E F0 .499(can be used when an ar)3.249 F .498
(gument to a primiti)-.198 F .828 -.165(ve i)-.275 H 3.248(so).165 G .498
(ut of range \(typically some kind)360.666 209.503 R .292(of inde)72 224.503 R
(x\).)-.165 E F2(Wr)5.792 E(ong_T)-.495 E(ype\(\))-.814 E F0 .292(signals a f)
3.042 F .292(ailed type-check for the gi)-.11 F -.165(ve)-.275 G(n).165 E F2
(Object)3.042 E F0 3.042(;t)C .292(he second ar)405.256 224.503 R .293
(gument is)-.198 F 4.15(the e)72 239.503 R 4.15(xpected type of the)-.165 F F2
(Object)6.899 E F0 9.649(.T)C 4.149(his function is used, for e)248.863 239.503
R 4.149(xample, by)-.165 F F2(Chec)6.899 E(k_T)-.22 E(ype\(\))-.814 E F0(.)A F2
(Wr)72 254.503 Q(ong_T)-.495 E(ype_Combination\(\))-.814 E F0 .103
(is similar to)2.853 F F2(Wr)2.853 E(ong_T)-.495 E(ype\(\))-.814 E F0 2.853(;t)
C .103(he e)327.473 254.503 R .104(xpected type is speci\214ed as a string.)
-.165 F .937(This is useful if an)72 269.503 R F2(Object)3.687 E F0 .937
(can be a member of one out of tw)3.687 F 3.686(oo)-.11 G 3.686(rm)364.253
269.503 S .936(ore types, e.)380.16 269.503 R .936(g. a string or a)1.833 F
(symbol.)72 284.503 Q -.165(Fa)72 302.103 S
(tal errors can be signaled using the functions).165 E F1
(void Fatal_Error\(char *fmt, ...\);)100.346 324.606 Q
(void Panic\(char *msg\);)100.346 338.606 Q F2 -.825(Fa)72 361.106 S(tal_Err)
.825 E(or\(\))-.495 E F0 .257(passes its ar)3.007 F .257(guments to)-.198 F F2
(printf\(\))3.007 E F0 .258(and then terminates the program.)3.007 F F2 -.88
(Pa)5.758 G(nic\(\)).88 E F0 .258(is used in)3.008 F .134(situations that `)72
376.106 R .134(`cannot happen')-.814 F 2.884('\()-.814 G -.11(fa)219.991
376.106 S .134(iled consistenc).11 F 2.884(yc)-.165 G .133(hecks or f)306.741
376.106 R .133(ailed assertions\); it prints the spec-)-.11 F
(i\214ed message and terminates the program with a core dump.)72 391.106 Q/F3
11/Times-Bold@0 SF 2.75(12.6. Exceptions)72 421.106 R F0 .132(As e)97 439.706 R
.132(xplained in the Elk Reference Manual, a user)-.165 F .132
(-supplied Scheme procedure is called each)-.22 F .653(time an)72 454.706 R F2
-.22(ex)3.403 G(ception).22 E F0 .653(is raised.)3.403 F(Currently)6.152 E
3.402(,t)-.715 G .652
(he set of UNIX signals that are caught by the interpreter)250.651 454.706 R
1.754(or an e)72 469.706 R 1.754(xtension \(at least)-.165 F F2(interrupt)4.504
E F0(and)4.505 E F2(alarm)4.505 E F0 4.505(\)a)C 1.755(re used as e)291.174
469.706 R 4.505(xceptions. As)-.165 F 1.755(signals occur asyn-)4.505 F
(chronously)72 484.706 Q 2.901(,e)-.715 G .151(xtensions and applications must\
 be able to protect non-reentrant or otherwise critical)130.539 484.706 R .113
(code sections from the deli)72 499.706 R -.165(ve)-.275 G .113(ry of signals.)
.165 F .113(In particular)5.613 F 2.864(,c)-.44 G .114(alls to e)328.141
499.706 R .114(xternal library functions are fre-)-.165 F
(quently not reentrant)72 514.706 Q/F4 9/Times-Roman@0 SF(6)-3.6 I F0
(and need to be protected from being disrupted.)2.75 3.6 M 1.486
(Extensions may call the macros)97 533.306 R F2(Disable_Interrupts)4.236 E F0
(and)4.236 E F2(Enable_Interrupts)4.236 E F0 1.487(\(without ar)4.237 F(gu-)
-.198 E .624(ments\) to enclose code fragments that must be protected from e)72
548.306 R 3.373(xceptions. Calls)-.165 F .623(to these macros)3.373 F 1.247
(can be nested, and the)72 563.306 R 3.997(ya)-.165 G 1.247(re also a)188.037
563.306 R -.275(va)-.22 G 1.248(ilable as Scheme primiti).275 F -.165(ve)-.275
G 3.998(so).165 G 3.998(nt)371.171 563.306 S 1.248(he Scheme-language le)
383.727 563.306 R -.165(ve)-.275 G(l.).165 E .037(As all modern UNIX v)72
578.306 R .036(ersions pro)-.165 F .036(vide a f)-.165 F .036
(acility to temporarily block the deli)-.11 F -.165(ve)-.275 G .036
(ry of signals, a sig-).165 F 1.527(nal that occurs after a call to)72 593.306
R F2(Disable_Interrupts)4.277 E F0 1.527
(will be delayed until the outermost matching)4.277 F F2(Enable_Interrupts)72
608.306 Q F0 7.569(is e)162.983 608.306 R -.165(xe)-.165 G 10.319(cuted. T).165
F 7.789 -.11(wo a)-.88 H 7.569(dditional macros,).11 F F2 -1.155(Fo)363.87
608.306 S -.407(rc)1.155 G(e_Disable_Interrupts).407 E F0(and)488.116 608.306 Q
F2 -1.155(Fo)72 623.306 S -.407(rc)1.155 G(e_Enable_Interrupts).407 E F0 .056
(can be used to enable and disable signal deli)2.806 F -.165(ve)-.275 G .057
(ry re).165 F -.055(ga)-.165 G .057(rless of the current).055 F .129
(nesting le)72 638.306 R -.165(ve)-.275 G 2.879(l. Extensions).165 F .129
(that use additional signals \(such as the)2.879 F F2(alarm)2.878 E F0 .128
(signal\) must re)2.878 F .128(gister these)-.165 F .574
(with the interpreter core to mak)72 653.306 R 3.324(es)-.11 G .574(ure the)
226.243 653.306 R 3.324(ya)-.165 G .574(re included in the)270.599 653.306 R F2
(mask)3.325 E F0 .575(of signals that is maintained)3.325 F(by)72 668.306 Q F2
(Disable_Interrupts)4.246 E F0(and)4.246 E F2(Enable_Interrupts)4.246 E F0
1.496(\(the interf)4.246 F 1.496(ace for re)-.11 F 1.495
(gistering signals is still being)-.165 F(re)72 683.306 Q
(vised; refer to the source code of the UNIX e)-.275 E(xtension for an e)-.165
E(xample\).)-.165 E .36 LW 76.5 694.306 72 694.306 DL 81 694.306 76.5 694.306
DL 85.5 694.306 81 694.306 DL 90 694.306 85.5 694.306 DL 94.5 694.306 90
694.306 DL 99 694.306 94.5 694.306 DL 103.5 694.306 99 694.306 DL 108 694.306
103.5 694.306 DL 112.5 694.306 108 694.306 DL 117 694.306 112.5 694.306 DL
121.5 694.306 117 694.306 DL 126 694.306 121.5 694.306 DL 130.5 694.306 126
694.306 DL 135 694.306 130.5 694.306 DL 139.5 694.306 135 694.306 DL 144
694.306 139.5 694.306 DL/F5 7/Times-Roman@0 SF(6)82 704.306 Q F4 -.135(Fo)4.5
2.8 O(rtunately).135 E 2.667(,w)-.585 G .417(ith the adv)142.194 707.106 R .417
(ent of multithreading, v)-.135 F .417(endors are no)-.135 F 2.667(wb)-.225 G
-.135(eg)329.76 707.106 S .417(inning to pro).135 F .416(vide reentrant v)-.135
F(ersions)-.135 E(of their system libraries.)72 718.106 Q EP
%%Page: 47 47
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(7-)288 51 S 1.484
(The ability to protect code from e)97 87 R 1.484
(xceptions is particularly useful for primiti)-.165 F -.165(ve)-.275 G 4.235
(st).165 G 1.485(hat tem-)466.16 87 R 1.244(porarily open a \214le or allocate\
 some other kind of resource that must subsequently be released)72 102 R(ag)72
117 Q 5.642(ain. If)-.055 F 2.892(the rele)5.642 F -.275(va)-.275 G 2.893
(nt code fragment were not enclosed by calls to).275 F/F1 11/Times-Italic@0 SF
(Disable_Interrupts)5.643 E F0(and)5.643 E F1(Enable_Interrupts)72 132 Q F0
2.931(,a)C 2.931(ne)163.228 132 S .181(xception handler could abandon e)176.378
132 R -.165(xe)-.165 G .181(cution of the code section by calling a).165 F .687
(continuation, thus causing the \214le to remain open fore)72 147 R -.165(ve)
-.275 G 4.648 -.605(r. W).165 H .688(hile situations lik).605 F 3.438(et)-.11 G
.688(his can be han-)435.65 147 R .248(dled by)72 162 R F1(dynamic-wind)2.998 E
F0 .248(on the Scheme le)2.998 F -.165(ve)-.275 G .247(l, some form of).165 F
F1(try/catc)2.997 E(h)-.165 E F0 -.11(fa)2.997 G .247(cility is not a).11 F
-.275(va)-.22 G .247(ilable on the).275 F 1.073(C-language le)72 177 R -.165
(ve)-.275 G 1.073(l, and using the C function implementing the).165 F F1
(dynamic-wind)3.823 E F0(primiti)3.823 E 1.404 -.165(ve w)-.275 H 1.074
(ould be).055 F(cumbersome.)72 192 Q(The function)72 209.6 Q/F2 10/Courier@0 SF
(void Signal_Exit\(int signal_number\);)100.346 232.103 Q F0 .162(may be used \
as the handler for signals that must terminate the application; it ensures tha\
t the tem-)72 254.603 R 1.126(porary \214les maintained by Elk are remo)72
269.603 R -.165(ve)-.165 G 3.876(da).165 G 1.127(nd calls the e)277.816 269.603
R 1.127(xtension \214nalization functions in the)-.165 F(normal w)72 284.603 Q
(ay)-.11 E(.)-.715 E/F3 11/Times-Bold@0 SF 2.75(12.7. De\214ning)72 314.603 R
(Scheme V)2.75 E(ariables)-1.012 E F0(User)97 333.203 Q .288
(-supplied C/C++ code can de\214ne global Scheme v)-.22 F .288
(ariables that are maintained as corre-)-.275 F(sponding)72 348.203 Q F1
(Object)4.439 E F0 4.439(Cv)4.439 G 4.439(ariables. The)167.542 348.203 R 1.689
(Scheme interpreter itself de\214nes se)4.439 F -.165(ve)-.275 G 1.689
(ral such v).165 F 1.69(ariables, for)-.275 F -.165(ex)72 363.203 S 2.631
(ample, the v).165 F(ariable)-.275 E F1(load-path)5.381 E F0 2.63
(\(see section 5\) which can be modi\214ed and read both from)5.381 F 1.592
(Scheme and from C.)72 378.203 R 1.592(The function)7.092 F F1(De\214ne_V)4.342
E(ariable\(\))-1.221 E F0 1.593(is used to de\214ne a Scheme v)4.342 F 1.593
(ariable and)-.275 F(bind an initial v)72 392.203 Q(alue to it:)-.275 E F2
(void Define_Variable\(Object *var, const char *name, Object init\);)100.346
414.706 Q F1(var)72 437.206 Q F0 .425(is the address of the C v)3.175 F .424
(ariable corresponding to the ne)-.275 F .424(wly-created Scheme v)-.275 F
(ariable,)-.275 E F1(name)3.174 E F0(is)3.174 E .892(the name of the Scheme v)
72 452.206 R .892(ariable, and)-.275 F F1(init)3.642 E F0 .892
(is its initial v)3.642 F(alue.)-.275 E F1(De\214ne_V)6.393 E(ariable\(\))
-1.221 E F0(calls)3.643 E F1(Intern\(\))3.643 E F0(to)3.643 E 1.27
(create the v)72 467.206 R 1.269(ariable name included in the ne)-.275 F 4.019
(wb)-.275 G 1.269(inding and)286.272 467.206 R F1(Func_Global_GC_Link\(\))4.019
E F0 1.269(to properly)4.019 F(re)72 482.206 Q(gister the C v)-.165 E
(ariable with the g)-.275 E(arbage collector)-.055 E(.)-.605 E
(The C side of a Scheme v)72 499.806 Q
(ariable cannot be accessed directly; the functions)-.275 E F2
(Var_Set\(Object variable, Object value\);)100.346 522.309 Q
(Var_Get\(Object variable\))100.346 536.309 Q(Var_Is_True\(Object variable\))
100.346 550.309 Q F0 .521(must be used instead to assign a v)72 572.809 R .521
(alue to the v)-.275 F .521(ariable and to read its current v)-.275 F .521
(alue; the \214rst ar)-.275 F(gu-)-.198 E 5.332(ment to each function is the)72
587.809 R F1(Object)8.082 E F0 5.332(whose address w)8.082 F 5.332
(as passed to)-.11 F F1(De\214ne_V)8.082 E(ariable\(\))-1.221 E F0(.)A F1
-1.221(Va)72 602.809 S(r_Is_T)1.221 E(rue\(\))-.605 E F0 .258(is con)3.008 F
-.165(ve)-.44 G .258(nient for boolean v).165 F .258
(ariables and tests whether the contents of the v)-.275 F .259(ariable is)-.275
F 1.418(true in the sense of)72 617.809 R F1 -.605(Tr)4.168 G(uep\(\)).605 E F0
6.918(.A)C 4.168(sa)215.544 617.809 S 4.168(ne)228.875 617.809 S 1.417
(xample, Figure 10 sho)243.262 617.809 R 1.417(ws ho)-.275 F 4.167(wt)-.275 G
1.417(he Xt e)387.903 617.809 R 1.417(xtension de\214nes a)-.165 F 2.031
(Scheme v)72 632.809 R 2.031(ariable that is associated with the user)-.275 F
2.031(-de\214ned `)-.22 F(`w)-.814 E 2.032(arning handler')-.11 F 4.782('c)
-.814 G 2.032(alled by the Xt)432.828 632.809 R(library to output w)72 647.809
Q(arning messages.)-.11 E 1.498(In the e)97 666.409 R 1.498
(xample in Figure 10, the function)-.165 F F1(Xt_W)4.248 E(arning\(\))-1.012 E
F0 1.497(is re)4.247 F 1.497(gistered as the Xt `)-.165 F(`w)-.814 E(arning)
-.11 E(handler')72 681.409 Q 3.75('b)-.814 G 3.75(yp)120.751 681.409 S 1
(assing it to)135.501 681.409 R F1(XtSetW)3.75 E(arningHandler\(\))-1.012 E F0
6.5(.I)C 3.75(ti)306.536 681.409 S 3.75(si)316.402 681.409 S -2.09 -.44(nv o)
327.489 681.409 T -.11(ke).44 G 3.75(db).11 G 3.75(yX)368.353 681.409 S 3.75
(tw)385.545 681.409 S 1(ith a w)400.295 681.409 R 1(arning message.)-.11 F .239
(The message is con)72 696.409 R -.165(ve)-.44 G .239
(rted to a Scheme string, and, if the Scheme v).165 F(ariable)-.275 E F1
(xt-warning-handler)2.988 E F0(has)2.988 E .154
(been assigned a procedure, this procedure is called with the string using)72
711.409 R F1(Funcall\(\))2.905 E F0 5.655(.O)C .155(therwise the)450.385
711.409 R 2.393(string is just sent to the current output port.)72 726.409 R
2.393(The call to)7.893 F F1(De\214ne_V)5.142 E(ariable\(\))-1.221 E F0 2.392
(in the e)5.142 F(xtension)-.165 E EP
%%Page: 48 48
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(8-)288 51 S(________________\
______________________________________________________________)75 99.5 Q/F1 10
/Courier@0 SF(Object V_Xt_Warning_Handler;)72 119 Q
(void Xt_Warning\(char *msg\) {)72 141.4 Q(Object args, fun;)99.5 155.4 Q
(args = Cons\(Make_String\(msg, strlen\(msg\)\), Null\);)99.5 177.8 Q
(fun = Var_Get\(V_Xt_Warning_Handler\);)99.5 191.8 Q
(if \(TYPE\(fun\) == T_Compound\))99.5 205.8 Q
(\(void\)Funcall\(fun, args, 0\);)127 219.8 Q(else)99.5 233.8 Q
(Printf\(Curr_Output_Port, "%s\\n", msg\);)127 247.8 Q(})72 261.8 Q
(void elk_init_xt_error\(void\) {)72 284.2 Q
(Define_Variable\(&V_Xt_Warning_Handler, "xt-warning-handler", Null\);)99.5
298.2 Q(XtSetWarningHandler\(Xt_Warning\);)99.5 312.2 Q(})72 326.2 Q/F2 10
/Times-Bold@0 SF(Figur)116.2 344 Q 2.5(e1)-.18 G(0:)151.85 344 Q/F3 10
/Times-Roman@0 SF(The Xt e)5 E(xtension de\214nes a Scheme v)-.15 E
(ariable holding a `)-.25 E(`w)-.74 E(arning handler')-.1 E(')-.74 E F0(______\
________________________________________________________________________)75
362.6 Q 2.315(initialization function associates the Scheme v)72 392.6 R
(ariable)-.275 E/F4 11/Times-Italic@0 SF(xt-warning-handler)5.065 E F0 2.316
(with the C v)5.065 F(ariable)-.275 E F4(V_Xt_W)72 407.6 Q(arning_Handler)
-1.012 E F0(\(as a con)2.75 E -.165(ve)-.44 G(ntion, Elk uses the pre\214x `)
.165 E(`V_')-.814 E 2.75('f)-.814 G(or v)376.095 407.6 Q
(ariables of this kind\).)-.275 E/F5 11/Times-Bold@0 SF 2.75(12.8. De\214ning)
72 437.6 R(Readers)2.75 E F0 .449(In addition or as an alternati)97 456.2 R
.779 -.165(ve t)-.275 H 3.199(ot).165 G .449(he constructor primiti)250.931
456.2 R .779 -.165(ve f)-.275 H .449(or a ne).165 F 3.198(wS)-.275 G .448
(cheme type, applica-)411.771 456.2 R .271(tions and e)72 471.2 R .272
(xtensions may de\214ne a)-.165 F F4 -.407(re)3.022 G(ader).407 E F0 .272
(function for each ne)3.022 F 3.022(wt)-.275 G 3.022(ype. The)359.175 471.2 R
.272(bitstring e)3.022 F .272(xtension, for)-.165 F -.165(ex)72 486.2 S .751
(ample, de\214nes a reader to allo).165 F 3.501(wi)-.275 G .751
(nput of bitstring literals using the)232.167 486.2 R F4(#*10110001)3.501 E F0
3.5(syntax. Each)3.501 F(user)72 501.2 Q .571
(-de\214ned read syntax is introduced by the `#' symbol follo)-.22 F .571
(wed by one more character)-.275 F 3.321(,i)-.44 G(denti-)478.337 501.2 Q .922
(fying the type of the object.)72 516.2 R 2.682 -.88(To d)6.422 H .922
(e\214ne a reader).88 F 3.672(,t)-.44 G .922(he follo)295.269 516.2 R .921
(wing function is called \(typically from)-.275 F(within an e)72 530.2 Q
(xtension initialization function\):)-.165 E F1(void Define_Reader\(int c,)
100.346 552.703 Q
(\(Object \(*func\)\(Object port, int c, int const_flag\)\)\);)124.346 566.703
Q F0 .282(The ar)97 592.803 R .282(guments to)-.198 F F4(De\214ne_Reader\(\))
3.032 E F0 .282(are the as yet unused character identifying the type \(e.)3.032
F(g.)1.833 E .735(`*' for bitstrings\) and a pointer to a)72 607.803 R F4 -.407
(re)3.485 G .735(ader function).407 F F0 .735(that is in)3.485 F -.22(vo)-.44 G
-.11(ke).22 G 3.485(db).11 G 3.485(yt)381.932 607.803 S .734
(he Scheme parser when-)393.975 607.803 R -2.365 -.275(ev e)72 622.803 T 3.023
(rt).275 G .273(he ne)96.572 622.803 R .273
(wly de\214ned syntax is encountered.)-.275 F .274
(This reader function is passed a Scheme input port)5.773 F .52
(from which it reads the ne)72 637.803 R .52(xt tok)-.165 F .52
(en, the character follo)-.11 F .519(wing the `#' symbol \(to f)-.275 F .519
(acilitate using the)-.11 F 3.055(same reader for dif)72 652.803 R 3.055
(ferent types\), and a \215ag indicating whether the ne)-.275 F 3.056
(wly-created object is)-.275 F -.165(ex)72 667.803 S .521
(pected to be made read-only \(this is true when e).165 F .521
(xpressions are loaded from a \214le\).)-.165 F .52(The reader)6.021 F
(function must return a ne)72 682.803 Q 2.75(wo)-.275 G(bject of the gi)198.511
682.803 Q -.165(ve)-.275 G 2.75(nt).165 G(ype.)280.56 682.803 Q -1.21(Yo)97
701.403 S 4.678(um)1.21 G 1.928(ay w)127.968 701.403 R 1.928
(ant to refer to the bitstring e)-.11 F 1.929
(xtension included in the Elk distrib)-.165 F 1.929(ution for an)-.22 F -.165
(ex)72 716.403 S 1.292(ample de\214nition of a reader function \(`).165 F
(`lib/misc/bitstring.c')-.814 E 1.292('\), and for the macros that can be)-.814
F(used by reader functions to ef)72 731.403 Q
(\214ciently read characters from a port.)-.275 E EP
%%Page: 49 49
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-4)276.087 51 S 2.75(9-)288 51 S/F1 11
/Times-Bold@0 SF 2.75(12.9. F)72 87 R(ork Handlers)-.275 E F0 .711
(Extensions may need to be noti\214ed when a cop)97 105.6 R 3.461(yo)-.11 G
3.461(ft)324.18 105.6 S .711(he running interpreter \(or application\))334.362
105.6 R 1.624(is created by means of the)72 120.6 R/F2 11/Times-Italic@0 SF
(fork\(\))4.374 E F0 1.623(UNIX system call.)4.373 F -.165(Fo)7.123 G 4.373(re)
.165 G 1.623(xample, consider an e)345.224 120.6 R 1.623(xtension that)-.165 F
1.549(stores information in a temporary \214le and remo)72 135.6 R -.165(ve)
-.165 G 4.299(st).165 G 1.55(his \214le on termination of the program.)312.587
135.6 R(If)7.05 E 1.485(another e)72 150.6 R 1.485(xtension created a cop)-.165
F 4.235(yo)-.11 G 4.235(ft)231.577 150.6 S 1.485
(he running interpreter by calling)242.533 150.6 R F2(fork\(\))4.235 E F0 4.234
(,t)C 1.484(he child process)430.159 150.6 R -.11(wo)72 165.6 S .589(uld remo)
.11 F .919 -.165(ve t)-.165 H .589(he temporary \214le on e).165 F .589
(xit\212the \214le w)-.165 F .59(ould not be a)-.11 F -.275(va)-.22 G .59
(ilable to the original instance).275 F .906(of the interpreter \(i.)72 180.6 R
.906(e. the parent process\) an)1.833 F 3.656(yl)-.165 G(onger)284.966 180.6 Q
6.406(.T)-.605 G 3.656(op)324.405 180.6 S(re)339.061 180.6 Q -.165(ve)-.275 G
.906(nt premature remo).165 F -.275(va)-.165 G 3.655(lo).275 G 3.655(ft)462.777
180.6 S .905(he \214le,)473.153 180.6 R .168(the e)72 195.6 R .169
(xtension that o)-.165 F .169(wns it can de\214ne a)-.275 F F2 .169
(fork handler)2.919 F F0 .169(by calling)2.919 F F2(Re)2.919 E
(gister_Onfork\(\))-.44 E F0 .169(with a pointer to)2.919 F 2.75(aCf)72 209.6 S
(unction:)93.384 209.6 Q/F3 10/Courier@0 SF
(void Register_Onfork\(\(void \(*func\)\(void\)\)\);)100.346 232.103 Q F0 .493
(The function could create an additional link to the \214le, so that a child p\
rocess w)72 254.603 R .492(ould just remo)-.11 F -.165(ve)-.165 G
(this link on e)72 269.603 Q(xit, lea)-.165 E(ving the original link intact.)
-.22 E 1.138(Extensions that use)97 288.203 R F2(fork\(\))3.888 E F0 1.139
(without e)3.889 F -.165(xe)-.165 G 1.139(cuting a ne).165 F 3.889(wp)-.275 G
1.139(rogram in the child process \(e.)337.087 288.203 R 1.139(g. the)1.833 F
4.839(UNIX e)72 303.203 R 4.839(xtension which de\214nes a)-.165 F F2
(unix-fork)7.589 E F0(primiti)7.589 E -.165(ve)-.275 G 7.589(\)a).165 G 4.839
(re required to call the function)346.311 303.203 R F2(Call_Onfork\(\))72
317.203 Q F0(in the ne)2.75 E(wly created child process to in)-.275 E -.22(vo)
-.44 G .22 -.11(ke a).22 H(ll currently de\214ned fork handlers:).11 E F3
(void Call_Onfork\(void\);)100.346 339.706 Q F1 -.275(Ap)72 377.206 S
(pendix A: Functions that can T).275 E(rigger a Garbage Collection)-.814 E F0
1.854(This appendix lists the functions e)97 395.806 R 1.854
(xported by Elk that may trigger a g)-.165 F 1.854(arbage collection.)-.055 F
-.44(Wi)72 410.806 S .262
(thin C/C++ code, local Scheme objects must be protected as sho).44 F .261
(wn in section 9.1 when one of)-.275 F
(these functions is called during the objects' lifetime.)72 425.806 Q .229
(The C functions corresponding to the follo)97 444.406 R .229
(wing Scheme primiti)-.275 F -.165(ve)-.275 G 2.979(sc).165 G .23(an cause a g)
400.516 444.406 R .23(arbage col-)-.055 F(lection:)72 458.406 Q EP
%%Page: 50 50
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(0-)288 51 S/F1 10/Courier@0
SF 102(append load)100.346 86 R(read-string)388.346 86 Q 108(apply macro-body)
100.346 100 R(require)388.346 100 Q 90(autoload macro-expand)100.346 114 R
(reverse)388.346 114 Q 54(backtrace-list make-list)100.346 128 R(string)388.346
128 Q 18(call-with-input-file make-string)100.346 142 R(string->list)388.346
142 Q 12(call-with-output-file make-vector)100.346 156 R(string->number)388.346
156 Q 96(call/cc map)100.346 170 R(string->symbol)388.346 170 Q 36
(command-line-args oblist)100.346 184 R(string-append)388.346 184 Q 114
(cons open-input-file)100.346 198 R(string-copy)388.346 198 Q 114
(dump open-input-output-file)100.346 212 R(substring)388.346 212 Q 66
(dynamic-wind open-input-string)100.346 226 R(symbol-plist)388.346 226 Q 114
(eval open-output-file)100.346 240 R(tilde-expand)388.346 240 Q 90
(for-each open-output-string)100.346 254 R(type)388.346 254 Q 108
(force port-line-number)100.346 268 R(vector)388.346 268 Q 36
(get-output-string procedure-lambda)100.346 282 R(vector->list)388.346 282 Q
114(list provide)100.346 296 R(vector-copy)388.346 296 Q 66(list->string put)
100.346 310 R(with-input-from-file)388.346 310 Q 66(list->vector read)100.346
324 R(with-output-to-file)388.346 324 Q/F2 10/Times-Italic@0 SF
(all special forms)100.346 346.4 Q(all mathematical primitives e)100.346 360.4
Q(xcept pr)-.2 E(edicates)-.37 E
(all output primitives if output is sent to a string port)100.346 374.4 Q F0
.444(In practice, most of these functions, in particular the special forms, ar\
e rarely or ne)97 400.5 R -.165(ve)-.275 G 3.193(ru).165 G(sed)489.337 400.5 Q
.158(in e)72 415.5 R .159(xtensions or Elk-based applications.)-.165 F .159
(In addition to these primiti)5.659 F -.165(ve)-.275 G .159(s, the follo).165 F
.159(wing C functions)-.275 F(can trigger a g)72 429.5 Q(arbage collection:)
-.055 E F1 54(Alloc_Object\(\) Make_Reduced_Flonum\(\))100.346 452.003 R
(Make_String\(\))388.346 452.003 Q 72(Make_Port\(\) Make_Flonum\(\))100.346
466.003 R(Make_Const_String\(\))388.346 466.003 Q 30
(Load_Source_Port\(\) Define_Primitive\(\) Intern\(\))100.346 480.003 R 72
(Load_File\(\) Printf\(\))100.346 494.003 R(CI_Intern\(\))388.346 494.003 Q 72
(Copy_List\(\) Print_Object\(\))100.346 508.003 R(Define_Variable\(\))388.346
508.003 Q 66(Const_Cons\(\) General_Print_Object\(\))100.346 522.003 R
(Define_Symbol\(\))388.346 522.003 Q 54(Make_Integer\(\) Format\(\))100.346
536.003 R(Bits_To_Symbols\(\))388.346 536.003 Q 48(Make_Unsigned\(\) Eval\(\))
100.346 550.003 R(Make_Vector\(\))388.346 550.003 Q 72
(Make_Long\(\) Funcall\(\))100.346 564.003 R(Make_Const_Vector\(\))388.346
564.003 Q(Make_Unsigned_Long\(\))100.346 578.003 Q F0(Note:)72 604.103 Q/F3 11
/Times-Italic@0 SF(Mak)4.82 E(e_Inte)-.11 E -.11(ge)-.44 G(r\(\)).11 E F0(,)A
F3(Mak)4.819 E(e_Unsigned\(\))-.11 E F0(,)A F3(Mak)4.819 E(e_Long\(\))-.11 E F0
4.819(,a)C(nd)336.291 604.103 Q F3(Mak)4.819 E(e_Unsigned_Long\(\))-.11 E F0
2.069(can only)4.819 F .33(trigger a g)72 619.103 R .331(arbage collection if)
-.055 F F3(FIXNUM_FITS\(\))3.081 E F0(\(or)3.081 E F3(UFIXNUM_FITS\(\))3.081 E
F0 3.081(,r)C(especti)395.648 619.103 Q -.165(ve)-.275 G .331
(ly\) returns zero).165 F(for the gi)72 634.103 Q -.165(ve)-.275 G 2.75(na).165
G -.198(rg)135.404 634.103 S(ument.).198 E/F4 11/Times-Bold@0 SF -.275(Ap)72
664.103 S(pendix B: Con).275 E -.11(ve)-.44 G(nience Functions f).11 E
(or GC-Safe Data Structur)-.275 E(es)-.198 E F0 .12(Figure 11 sho)97 682.703 R
.12
(ws the source code for a set of functions to insert Scheme objects into a v)
-.275 F(ector)-.165 E 2.144(that has been re)72 697.703 R 2.144
(gistered with the g)-.165 F 2.144(arbage collector)-.055 F 4.894(,t)-.44 G
4.894(od)317.908 697.703 S 2.144(elete objects from the v)333.802 697.703 R
(ector)-.165 E 4.894(,a)-.44 G 2.145(nd to)479.547 697.703 R(retrie)72 712.703
Q .565 -.165(ve t)-.275 H .235(he object stored under a gi).165 F -.165(ve)
-.275 G 2.985(nv).165 G .235(ector inde)252.527 712.703 R 2.985(x. These)-.165
F .234(functions help b)2.985 F .234(uilding dynamic data)-.22 F 2.475
(structures \(such as link)72 727.703 R 2.476
(ed lists or hash tables\) containing Scheme objects.)-.11 F 2.476
(There is nothing)7.976 F EP
%%Page: 51 51
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(1-)288 51 S .117(application\
-speci\214c in the code; if you \214nd it useful, you can directly include it \
in your Elk e)72 87 R(xten-)-.165 E(sion or Elk-based application without an)72
102 Q 2.75(yc)-.165 G 2.75(hanges. See)263.092 102 R
(section 12.3 for a detailed description.)2.75 E EP
%%Page: 52 52
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(2-)288 51 S(________________\
______________________________________________________________)75 99.5 Q/F1 10
/Courier@0 SF(static int max_objects = 32;)72 119 Q(/* initial size */)270 119
Q(static int num_objects;)72 133 Q(static Object objects;)72 147 Q
(static int inx;)72 161 Q(int register_object\(Object x\) {)72 183.4 Q
(Object v;)99.5 197.4 Q(int n;)99.5 211.4 Q(GC_Node;)99.5 225.4 Q
(if \(num_objects == max_objects\) {)99.5 247.8 Q(max_objects *= 2;)127 261.8 Q
(GC_Link\(x\);)127 275.8 Q 6(v=M)127 289.8 S(ake_Vector\(max_objects, Null\);)
157 289.8 Q(GC_Unlink;)127 303.8 Q
(memcpy\(VECTOR\(v\)->data, VECTOR\(objects\)->data,)127 317.8 Q
(num_objects * sizeof\(Object\)\);)154.5 331.8 Q(objects = v;)127 345.8 Q
(inx = num_objects;)127 359.8 Q(})99.5 373.8 Q
(for \(n = 0; !Nullp\(VECTOR\(objects\)->data[inx]\);)99.5 387.8 Q
(inx++, inx %= max_objects\) {)154.5 401.8 Q(n++;)127 415.8 Q
(assert\(n < max_objects\);)127 429.8 Q(})99.5 443.8 Q
(VECTOR\(objects\)->data[inx] = x;)99.5 457.8 Q(num_objects++;)99.5 471.8 Q
(return inx;)99.5 485.8 Q(})72 499.8 Q(void deregister_object\(int i\) {)72
522.2 Q(VECTOR\(objects\)->data[i] = Null;)99.5 536.2 Q(--num_objects;)99.5
550.2 Q(assert\(num_objects >= 0\);)99.5 564.2 Q(})72 578.2 Q
(Object get_object\(int i\) {)72 600.6 Q(return VECTOR\(objects\)->data[i];)
99.5 614.6 Q(})72 628.6 Q(void elk_init_gcroot\(void\) {)72 651 Q
(objects = Make_Vector\(max_objects, Null\);)99.5 665 Q
(Global_GC_Link\(objects\);)99.5 679 Q(})72 693 Q/F2 10/Times-Bold@0 SF(Figur)
130.695 710.8 Q 2.5(e1)-.18 G(1:)166.345 710.8 Q/F3 10/Times-Roman@0 SF
(Functions to map Scheme objects to inde)5 E -.15(xe)-.15 G 2.5(si).15 G
(nto a GC-safe v)362.425 710.8 Q(ector)-.15 E F0(_____________________________\
_________________________________________________)75 729.4 Q EP
%%Page: 53 53
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(3-)288 51 S/F1 11
/Times-Bold@0 SF -.275(Ap)72 87 S(pendix C: Summary of Functions, Macr).275 E
(os, T)-.198 E(ypes, and V)-.814 E(ariables)-1.012 E F0 .475(This appendix pro)
97 105.6 R .475(vides a quick o)-.165 F -.165(ve)-.165 G(rvie).165 E 3.225(wo)
-.275 G 3.226(ft)289.105 105.6 S .476(he functions and other de\214nitions e)
299.052 105.6 R .476(xported by)-.165 F .859(the Elk k)72 120.6 R 3.609
(ernel. The)-.11 F .859(list is di)3.609 F .858
(vided in groups of de\214nitions with related functionality; the entries)-.275
F .491(are presented in roughly the same order in which the)72 135.6 R 3.241
(ya)-.165 G .492(re introduced in the abo)321.132 135.6 R .822 -.165(ve c)-.165
H 3.242(hapters. Full).165 F 1.071(function prototypes are gi)72 150.6 R -.165
(ve)-.275 G 3.821(nf).165 G 1.071(or functions; in some prototypes, ar)211.485
150.6 R 1.071(guments are gi)-.198 F -.165(ve)-.275 G 3.821(nn).165 G 1.071
(ames for)464.748 150.6 R 3.851(clari\214cation. The)72 165.6 R 1.101
(initial k)3.851 F -.165(ey)-.11 G -.11(wo).165 G(rds).11 E F1(function)3.851 E
F0(,)A F1(macr)3.851 E(o)-.198 E F0(,)A F1(typedef)3.852 E F0 3.852(,a)C(nd)
358.977 165.6 Q F1 -.11(va)3.852 G(riable).11 E F0 1.102(indicate the type of)
3.852 F .737(each entry \(function, preprocessor symbol with or without ar)72
180.6 R .736(guments, type de\214nition, and e)-.198 F(xter)-.165 E(-)-.22 E
.479(nal v)72 195.6 R .479(ariable de\214ned by Elk, respecti)-.275 F -.165(ve)
-.275 G 3.229(ly\). The).165 F .479(functions corresponding to Scheme primiti)
3.229 F -.165(ve)-.275 G 3.23(s\().165 G(as)494.837 195.6 Q
(described in section 7.4\) ha)72 210.6 Q .33 -.165(ve b)-.22 H
(een omitted from the list.).165 E F1(Accessing the Scheme Object Repr)72 240.6
Q(esentation)-.198 E/F2 10/Times-Bold@0 SF(typedef)100.346 266.703 Q/F3 10
/Courier@0 SF(Object)6 E F2(macr)100.346 289.103 Q(o)-.18 E F3(TYPE\(obj\))6 E
F2(macr)100.346 303.103 Q(o)-.18 E F3(POINTER\(obj\))6 E F2(macr)100.346
317.103 Q(o)-.18 E F3(ISCONST\(obj\))6 E F2(macr)100.346 331.103 Q(o)-.18 E F3
(SETCONST\(obj\))6 E F2(macr)100.346 345.103 Q(o)-.18 E F3
(SET\(obj, type, ptr\))6 E F2(macr)100.346 359.103 Q(o)-.18 E F3
(EQ\(obj1, obj2\))6 E F1(De\214ning Scheme Primiti)72 389.103 Q -.11(ve)-.11 G
(s).11 E F2(function)100.346 415.206 Q F3
(void Define_Primitive\(\(Object \(*func\)\(\)\), const char *name,)6 E
(int minargs, int maxargs, enum discipline disc\);)190.346 429.206 Q F1
(Making Objects Kno)72 459.206 Q(wn to the Garbage Collector)-.11 E F2(macr)
100.346 485.309 Q(o)-.18 E F3(GC_Node, GC_Node2, ...)6 E F2(macr)100.346
499.309 Q(o)-.18 E F3(GC_Link\(obj\), GC_Link2\(obj1, obj2\), ...)6 E F2(macr)
100.346 513.309 Q(o)-.18 E F3(GC_Unlink)6 E F2(macr)100.346 527.309 Q(o)-.18 E
F3(Global_GC_Link\(obj\))6 E F2(function)100.346 541.309 Q F3
(void Func_Global_GC_Link\(obj_ptr\);)6 E F1(Booleans)72 571.309 Q F2(macr)
100.346 597.412 Q(o)-.18 E F3(T_Boolean)6 E F2(macr)100.346 611.412 Q(o)-.18 E
F3(Truep\(obj\))6 E F2 -.1(va)100.346 633.812 S(riable).1 E F3(Object True)6 E
F2 -.1(va)100.346 647.812 S(riable).1 E F3(Object False)6 E F2(function)100.346
670.212 Q F3(int Eqv\(Object, Object\);)6 E F2(function)100.346 684.212 Q F3
(int Equal\(Object, Object\);)6 E EP
%%Page: 54 54
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(4-)288 51 S/F1 11
/Times-Bold@0 SF(Characters)72 87 Q/F2 10/Times-Bold@0 SF(macr)100.346 113.103
Q(o)-.18 E/F3 10/Courier@0 SF(T_Character)6 E F2(macr)100.346 127.103 Q(o)-.18
E F3(CHAR\(char_obj\))6 E F2(function)100.346 141.103 Q F3
(Object Make_Char\(int\);)6 E F2 -.1(va)100.346 155.103 S(riable).1 E F3
(Object Newline)6 E F1 -.11(Pa)72 185.103 S(irs and Lists).11 E F2(macr)100.346
211.206 Q(o)-.18 E F3(T_Null)6 E F2(macr)100.346 225.206 Q(o)-.18 E F3
(Nullp\(obj\))6 E F2 -.1(va)100.346 239.206 S(riable).1 E F3(Null)6 E F2(macr)
100.346 261.606 Q(o)-.18 E F3(T_Pair)6 E F2(macr)100.346 275.606 Q(o)-.18 E F3
(PAIR\(pair_obj\))6 E F2(macr)100.346 289.606 Q(o)-.18 E F3(Car\(obj\))6 E F2
(macr)100.346 303.606 Q(o)-.18 E F3(Cdr\(obj\))6 E F2(macr)100.346 317.606 Q(o)
-.18 E F3(Cons\(obj1, obj2\))6 E F2(macr)100.346 340.006 Q(o)-.18 E F3
(Check_List\(obj\))6 E F2(function)100.346 354.006 Q F3
(int Fast_Length\(Object\);)6 E F2(function)100.346 368.006 Q F3
(Object Copy_List\(Object\);)6 E F1(Integers \(Fixnums and Bignums\))72 398.006
Q F2(macr)100.346 424.109 Q(o)-.18 E F3(T_Fixnum)6 E F2(macr)100.346 438.109 Q
(o)-.18 E F3(T_Bignum)6 E F2(macr)100.346 452.109 Q(o)-.18 E F3
(FIXNUM_FITS\(integer\))6 E F2(macr)100.346 466.109 Q(o)-.18 E F3
(UFIXNUM_FITS\(unsigned_integer\))6 E F2(macr)100.346 480.109 Q(o)-.18 E F3
(FIXNUM\(fixnum_obj\))6 E F2(macr)100.346 494.109 Q(o)-.18 E F3
(BIGNUM\(bignum_obj\))6 E F2(macr)100.346 516.509 Q(o)-.18 E F3
(Check_Integer\(obj\))6 E F2(macr)100.346 530.509 Q(o)-.18 E F3
(Check_Number\(obj\))6 E F2(function)100.346 552.909 Q F3
(Object Make_Integer\(int\);)6 E F2(function)100.346 566.909 Q F3
(Object Make_Unsigned\(unsigned\);)6 E F2(function)100.346 580.909 Q F3
(Object Make_Long\(long\);)6 E F2(function)100.346 594.909 Q F3
(Object Make_Unsigned_Long\(unsigned long\);)6 E F2(function)100.346 617.309 Q
F3(int Get_Integer\(Object\);)6 E F2(function)100.346 631.309 Q F3
(unsigned Get_Unsigned\(Object\);)6 E F2(function)100.346 645.309 Q F3
(long Get_Long\(Object\);)6 E F2(function)100.346 659.309 Q F3
(unsigned long Get_Unsigned_Long\(Object\);)6 E F2(function)100.346 681.709 Q
F3(int Get_Exact_Integer\(Object\);)6 E F2(function)100.346 695.709 Q F3
(unsigned Get_Exact_Unsigned\(Object\);)6 E F2(function)100.346 709.709 Q F3
(long Get_Exact_Long\(Object\);)6 E F2(function)100.346 723.709 Q F3
(unsigned long Get_Exact_Unsigned_Long\(Object\);)6 E EP
%%Page: 55 55
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 50 S 2.75(5-)288 50 S/F1 11
/Times-Bold@0 SF(Floating P)72 87 Q(oint Numbers \(Reals\))-.22 E/F2 10
/Times-Bold@0 SF(macr)100.346 113.103 Q(o)-.18 E/F3 10/Courier@0 SF(T_Flonum)6
E F2(macr)100.346 127.103 Q(o)-.18 E F3(FLONUM\(flonum_obj\))6 E F2(function)
100.346 141.103 Q F3(Object Make_Flonum\(double\);)6 E F2(function)100.346
155.103 Q F3(Object Make_Reduced_Flonum\(double\);)6 E F2(function)100.346
169.103 Q F3(double Get_Double\(Object\);)6 E F1(Symbols)72 199.103 Q F2(macr)
100.346 225.206 Q(o)-.18 E F3(T_Symbol)6 E F2(macr)100.346 239.206 Q(o)-.18 E
F3(SYMBOL\(symbol_obj\))6 E F2(function)100.346 253.206 Q F3
(Object Intern\(const char *\);)6 E F2(function)100.346 267.206 Q F3
(Object CI_Intern\(const char *\);)6 E F2(function)100.346 281.206 Q F3
(void Define_Symbol\(Object *var, const char *name\);)6 E F2 -.1(va)100.346
295.206 S(riable).1 E F3(Object Void)6 E F2(typedef)100.346 317.606 Q F3
(SYMDESCR)6 E F2(function)100.346 331.606 Q F3
(unsigned long Symbols_To_Bits\(Object syms, int mask_flag,)6 E
(SYMDESCR *table\);)190.346 345.606 Q F2(function)100.346 359.606 Q F3
(Object Bits_To_Symbols\(unsigned long bits, int mask_flag,)6 E
(SYMDESCR *table\);)190.346 373.606 Q F1(Strings)72 403.606 Q F2(macr)100.346
429.709 Q(o)-.18 E F3(T_String)6 E F2(macr)100.346 443.709 Q(o)-.18 E F3
(STRING\(string_obj\))6 E F2(function)100.346 457.709 Q F3
(Object Make_String\(const char *init, int size\);)6 E F2(function)100.346
471.709 Q F3(char *Get_String\(Object\);)6 E F2(function)100.346 485.709 Q F3
(char *Get_Strsym\(Object\);)6 E F2(macr)100.346 499.709 Q(o)-.18 E F3
(Get_String_Stack\(obj, char_ptr\))6 E F2(macr)100.346 513.709 Q(o)-.18 E F3
(Get_Strsym_Stack\(obj, char_ptr\))6 E F1 -1.1(Ve)72 543.709 S(ctors)1.1 E F2
(macr)100.346 569.812 Q(o)-.18 E F3(T_Vector)6 E F2(macr)100.346 583.812 Q(o)
-.18 E F3(VECTOR\(vector_obj\))6 E F2(function)100.346 597.812 Q F3
(Object Make_Vector\(int size, Object fill\);)6 E F1 -.22(Po)72 627.812 S(rts)
.22 E F2(macr)100.346 653.915 Q(o)-.18 E F3(T_Port)6 E F2(macr)100.346 667.915
Q(o)-.18 E F3(PORT\(port_obj\))6 E F2(function)100.346 681.915 Q F3
(Object Make_Port\(int flags, FILE *f, Object name\);)6 E F2(function)100.346
695.915 Q F3(Object Terminate_File\(Object port\);)6 E F2(macr)100.346 709.915
Q(o)-.18 E F3(Check_Input_Port\(obj\))6 E F2(macr)100.346 723.915 Q(o)-.18 E F3
(Check_Output_Port\(obj\))6 E EP
%%Page: 56 56
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 50 S 2.75(6-)288 50 S/F1 10
/Times-Bold@0 SF -.1(va)100.346 86 S(riable).1 E/F2 10/Courier@0 SF
(Object Curr_Input_Port, Curr_Output_Port)6 E F1 -.1(va)100.346 100 S(riable).1
E F2(Object Standard_Input_Port, Standard_Output_Port)6 E F1(function)100.346
114 Q F2(void Reset_IO\(int destructive_flag\);)6 E F1(function)100.346 128 Q
F2(void Printf\(Object port, char *fmt, ...\);)6 E F1(function)100.346 142 Q F2
(void Print_Object\(Object obj, Object port, int raw_flag,)6 E
(int print_depth, int print_length\);)190.346 156 Q F1(macr)100.346 170 Q(o)
-.18 E F2(Print\(obj\))6 E F1(function)100.346 184 Q F2
(void Load_Source_Port\(Object port\);)6 E F1(function)100.346 198 Q F2
(void Load_File\(char *filename\);)6 E/F3 11/Times-Bold@0 SF(Miscellaneous T)72
228 Q(ypes)-.814 E F1(macr)100.346 254.103 Q(o)-.18 E F2(T_End_Of_File)6 E F1
-.1(va)100.346 268.103 S(riable).1 E F2(Object Eof)6 E F1(macr)100.346 290.503
Q(o)-.18 E F2(T_Environment)6 E F1 -.1(va)100.346 304.503 S(riable).1 E F2
(Object The_Environment, Global_Environment)6 E F1(macr)100.346 326.903 Q(o)
-.18 E F2(T_Primitive)6 E F1(macr)100.346 340.903 Q(o)-.18 E F2(T_Compound)6 E
F1(function)100.346 354.903 Q F2(void Check_Procedure\(Object\);)6 E F1(macr)
100.346 377.303 Q(o)-.18 E F2(T_Control_Point)6 E F1(macr)100.346 391.303 Q(o)
-.18 E F2(T_Promise)6 E F1(macr)100.346 405.303 Q(o)-.18 E F2(T_Macro)6 E F3
(De\214ning Scheme T)72 435.303 Q(ypes and Allocating Objects)-.814 E F1
(function)100.346 461.406 Q F2(int Define_Type\(int zero, const char *name,)6 E
(int \(*size\)\(Object\), int const_size,)190.346 475.406 Q
(int \(*eqv\)\(Object, Object\),)190.346 489.406 Q
(int \(*equal\)\(Object, Object\),)190.346 503.406 Q
(int \(*print\)\(Object, Object, int, int, int\),)190.346 517.406 Q
(int \(*visit\)\(Object*, int \(*\)\(Object*\)\)\);)190.346 531.406 Q F1
(function)100.346 545.406 Q F2
(Object Alloc_Object\(int size, int type, int const_flag\);)6 E F3
(Calling Scheme Pr)72 575.406 Q(ocedur)-.198 E(es and Ev)-.198 E
(aluating Scheme Code)-.11 E F1(function)100.346 601.509 Q F2
(Object Funcall\(Object fun, Object argl, int eval_flag\);)6 E F1(function)
100.346 615.509 Q F2(Object Eval\(Object expr\);)6 E F1(function)100.346
629.509 Q F2(char *String_Eval\(char *expr\);)6 E F3 -.715(We)72 659.509 S
(ak P).715 E(ointers and Object T)-.22 E(ermination)-1.012 E F1(function)
100.346 685.612 Q F2(void Register_Before_GC\(\(void \(*func\)\(void\)\)\);)6 E
F1(function)100.346 699.612 Q F2
(void Register_After_GC\(\(void \(*func\)\(void\)\)\);)6 E F1(macr)100.346
722.012 Q(o)-.18 E F2(IS_ALIVE\(obj\))6 E EP
%%Page: 57 57
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 50 S 2.75(7-)288 50 S/F1 10
/Times-Bold@0 SF(macr)100.346 86 Q(o)-.18 E/F2 10/Courier@0 SF
(WAS_FORWARDED\(obj\))6 E F1(macr)100.346 100 Q(o)-.18 E F2(UPDATE_OBJ\(obj\))6
E F1(function)100.346 122.4 Q F2
(void Register_Object\(Object obj, char *group,)6 E
(\(Object \(*term\)\(Object\)\), int leader_flag\);)190.346 136.4 Q F1
(function)100.346 150.4 Q F2(void Deregister_Object\(Object obj\);)6 E F1
(function)100.346 164.4 Q F2(void Terminate_Type\(int type\);)6 E F1(function)
100.346 178.4 Q F2(void Terminate_Group\(char *group\);)6 E F1(function)100.346
192.4 Q F2(Object Find_Object\(int type, char *group,)6 E
(\(int \(*match_func\)\(Object, ...\)\), ...\);)190.346 206.4 Q/F3 11
/Times-Bold@0 SF(Signaling Err)72 236.4 Q(ors)-.198 E F1(function)100.346
262.503 Q F2(void Primitive_Error\(char *fmt, ...\);)6 E F1(function)100.346
276.503 Q F2(void Set_Error_Tag\(const char *tag\);)6 E F1(function)100.346
290.503 Q F2(char *Get_Error_Tag\(void\);)6 E F1(function)100.346 304.503 Q F2
(void Set_App_Name\(char *name\);)6 E F1(function)100.346 318.503 Q F2
(void Range_Error\(Object offending_obj\);)6 E F1(function)100.346 332.503 Q F2
(void Wrong_Type\(Object offending_obj, int expected_type\);)6 E F1(function)
100.346 346.503 Q F2(void Wrong_Type_Combination\(Object offending_obj,)6 E
(char *expected_type\);)169.846 360.503 Q F1(function)100.346 374.503 Q F2
(void Fatal_Error\(char *fmt, ...\);)6 E F1(function)100.346 388.503 Q F2
(void Panic\(char *msg\);)6 E F1 -.1(va)100.346 402.503 S(riable).1 E F2
(int Saved_Errno)6 E F3(Exceptions \(Signals\))72 432.503 Q F1(macr)100.346
458.606 Q(o)-.18 E F2(Disable_Interrupts, Enable_Interrupts)6 E F1(macr)100.346
472.606 Q(o)-.18 E F2(Force_Disable_Interrupts, Force_Enable_Interrupts)6 E F1
(function)100.346 486.606 Q F2(void Signal_Exit\(int signal_number\);)6 E F3
(De\214ning and Using Scheme V)72 516.606 Q(ariables)-1.012 E F1(function)
100.346 542.709 Q F2
(void Define_Variable\(Object *var, const char *name, Object init\);)6 E F1
(function)100.346 556.709 Q F2(void Var_Set\(Object var, Object val\);)6 E F1
(function)100.346 570.709 Q F2(Object Var_Get\(Object var\);)6 E F1(function)
100.346 584.709 Q F2(int Var_Is_True\(Object var\);)6 E F3
(De\214ning Reader Functions)72 614.709 Q F1(function)100.346 640.812 Q F2
(void Define_Reader\(int c,)6 E
(\(Object \(*func\)\(Object port, int c, int const_flag\)\)\);)190.346 654.812
Q F3 -.275(Fo)72 684.812 S(rk Handlers).275 E F1(function)100.346 710.915 Q F2
(void Register_Onfork\(\(void \(*func\)\(void\)\)\);)6 E F1(function)100.346
724.915 Q F2(void Call_Onfork\(void\);)6 E EP
%%Page: 58 58
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 50 S 2.75(8-)288 50 S/F1 11
/Times-Bold@0 SF(Allocating Memory)72 87 Q/F2 10/Times-Bold@0 SF(function)
100.346 113.103 Q/F3 10/Courier@0 SF(char *Safe_Malloc\(unsigned size\);)6 E F2
(function)100.346 127.103 Q F3
(char *Safe_Realloc\(char *old_pointer, unsigned size\);)6 E F2(macr)100.346
149.503 Q(o)-.18 E F3(Alloca_Begin, Alloca_End)6 E F2(macr)100.346 163.503 Q(o)
-.18 E F3(Alloca\(char_ptr, type, size\))6 E F1(Initializing Elk fr)72 193.503
Q(om an A)-.198 E(pplication')-.275 E 2.75(sm)-.407 G(ain\(\))259.671 193.503 Q
F2(function)100.346 219.606 Q F3
(void Elk_Init\(int argc, char **argv, int init_flag,)6 E(char *filename\);)
169.846 233.606 Q F1(Miscellaneous Macr)72 263.606 Q(os)-.198 E F2(macr)100.346
289.709 Q(o)-.18 E F3(ELK_MAJOR, ELK_MINOR)6 E F2(macr)100.346 303.709 Q(o)-.18
E F3(NO_PROTOTYPES, WANT_PROTOTYPES)6 E EP
%%Page: 59 59
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-5)276.087 51 S 2.75(9-)288 51 S/F1 13
/Times-Bold@0 SF(Index)272.108 123 Q(<)72 174 Q F0(<signal.h>, 12)72 204 Q
(<stdio.h>, 12)72 219 Q F1(A)72 249 Q F0(after)72 279 Q(-GC function, 42, 44)
-.22 E(Alloca\(\), 14)72 294 Q(alloca\(\), 14)72 309 Q(Alloca\(\), 29)72 324 Q
(Alloca_Be)72 339 Q(gin, 14, 29)-.165 E(Alloca_End, 14, 29)72 354 Q
(Alloc_Object\(\), 33)72 369 Q(ANSI/ISO C, 12)72 384 Q(append!, 23)72 399 Q
(application architecture, 2)72 414 Q(ar)72 429 Q(gv[0], 9)-.198 E
(Athena widgets, 8)72 444 Q F1(B)72 474 Q F0(bcmp\(\), 15)72 504 Q(bcop)72 519
Q(y\(\), 15)-.11 E(before-GC function, 43)72 534 Q(bignums, 25)72 549 Q
(bitmask, 37)72 564 Q(bitstring e)72 579 Q(xtension, 4, 48)-.165 E(Bits_T)72
594 Q(o_Symbols\(\), 37)-.88 E(bzero\(\), 15)72 609 Q F1(C)72 639 Q F0 2.75(Cc)
72 669 S(ompiler)86.971 669 Q 2.75(,1)-.44 G(2)131.752 669 Q 2.75(Cl)72 684 S
(ibrary)85.145 684 Q 2.75(,6)-.715 G(C++ compiler)72 699 Q 2.75(,7)-.44 G 2.75
(,1)144.16 699 S(2)155.16 699 Q(C++ static constructor)72 714 Q 2.75(,7)-.44 G
2.75(,9)180.515 714 S 2.75(,1)191.515 714 S(0)202.515 714 Q
(C++ static destructor)72 729 Q 2.75(,7)-.44 G 2.75(,9)175.015 729 S
(calling discipline, 17, 22)302.4 174 Q(Call_Onfork\(\), 49)302.4 189 Q(car)
302.4 204 Q 2.75(,2)-.44 G(1, 27)326.391 204 Q(Car\(\), 27)302.4 219 Q(cdr)
302.4 234 Q 2.75(,2)-.44 G(1, 27)327.007 234 Q(Cdr\(\), 27)302.4 249 Q
(CHAR\(\), 16, 24)302.4 264 Q(Check_Input_Port\(\), 30)302.4 279 Q(Check_Inte)
302.4 294 Q(ger\(\), 25)-.165 E(Check_List\(\), 27)302.4 309 Q
(Check_Mutable\(\), 19)302.4 324 Q(Check_Number\(\), 27)302.4 339 Q
(Check_Output_Port\(\), 30)302.4 354 Q(Check_Procedure\(\), 32)302.4 369 Q
(Check_T)302.4 384 Q(ype\(\), 18, 46)-.88 E(CI_Intern\(\), 28)302.4 399 Q
(collect, 20)302.4 414 Q(cons, 21)302.4 429 Q(Cons\(\), 27, 39)302.4 444 Q
(const bit, 15)302.4 459 Q(continuation, 14)302.4 474 Q(Cop)302.4 489 Q
(y_List\(\), 27)-.11 E(Curr_Input_Port, 31)302.4 504 Q(Curr_Output_Port, 31)
302.4 519 Q F1(D)302.4 549 Q F0(De\214ne_Primiti)302.4 579 Q -.165(ve)-.275 G
(\(\), 17, 22).165 E(De\214ne_Reader\(\), 48)302.4 594 Q
(De\214ne_Symbol\(\), 28)302.4 609 Q(De\214ne_T)302.4 624 Q(ype\(\), 32)-.88 E
(De\214ne_V)302.4 639 Q(ariable\(\), 47)-1.221 E(Dere)302.4 654 Q
(gister_Object\(\), 44)-.165 E(Disable_Interrupts, 46)302.4 669 Q EP
%%Page: 60 60
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-6)276.087 51 S 2.75(0-)288 51 S
(dynamic loading, 5, 35)72 87 Q/F1 13/Times-Bold@0 SF(E)72 117 Q F0(Elk_Ev)72
147 Q(al\(\), 40)-.275 E(elk_\214nit_, 7)72 162 Q(Elk_Init\(\), 9, 11, 13)72
177 Q(elk_init_, 7, 9)72 192 Q(ELK_MAJOR, 15)72 207 Q(ELK_MINOR, 15)72 222 Q
(Enable_Interrupts, 46)72 237 Q(end-of-\214le object, 25)72 252 Q(Eof, 25)72
267 Q(EQ\(\), 16)72 282 Q(eq?, 16)72 297 Q(Equal\(\), 24)72 312 Q(Eqv\(\), 24)
72 327 Q(errno, 45)72 342 Q(error handler)72 357 Q 2.75(,1)-.44 G(1, 45)139.672
357 Q(error tag, 45)72 372 Q(EV)72 387 Q(AL, 18)-1.485 E(Ev)72 402 Q
(al\(\), 40)-.275 E -.165(ex)72 417 S(ception, 46).165 E -.165(ex)72 432 S
(tensible application, 2).165 E -.165(ex)72 447 S
(tension \214nalization function, 7).165 E -.165(ex)72 462 S
(tension \214nalization functions, 47).165 E(Extension \214nalizer)72 477 Q
2.75(,9)-.44 G -.165(ex)72 492 S 3.015
(tension initialization function, 7, 17, 19,).165 F(35, 41, 48)72 507 Q -.165
(ex)72 522 S(tension initializer).165 E 2.75(,7)-.44 G 2.75(,9)169.471 522 S
2.75(,4)180.471 522 S(3)191.471 522 Q -.165(ex)72 537 S(tension language, 2)
.165 E F1(F)72 567 Q F0 -.165(Fa)72 597 S(lse, 19).165 E -.165(Fa)72 612 S
(st_Length\(\), 27).165 E -.165(Fa)72 627 S(tal_Error\(\), 46).165 E
(Find_Object\(\), 44)72 642 Q(FIXNUM\(\), 25)72 657 Q(\214xnums, 25)72 672 Q
(FIXNUM_FITS\(\), 25)72 687 Q(FLONUM\(\), 26)72 702 Q(\215onums, 26)72 717 Q
(\215uid-let, 6)72 732 Q -.165(Fo)302.4 87 S(rce_Disable_Interrupts, 46).165 E
-.165(Fo)302.4 102 S(rce_Enable_Interrupts, 46).165 E(fork handler)302.4 117 Q
2.75(,4)-.44 G(9)367.025 117 Q(format speci\214er)302.4 132 Q 2.75(,4)-.44 G(5)
382.304 132 Q(format string, 35, 45)302.4 147 Q(Funcall\(\), 39, 40, 47)302.4
162 Q(function prototypes, 12)302.4 177 Q(Func_Global_GC_Link\(\), 41, 47)302.4
192 Q F1(G)302.4 222 Q F0 -.055(ga)302.4 252 S
(rbage collection, 20, 35, 40, 42, 49).055 E -.055(ga)302.4 267 S
(rbage collector).055 E 2.75(,1)-.44 G(9, 33, 40, 42)388.959 267 Q
(GC_Link\(\), 20)302.4 282 Q(GC_Link2\(\), 21)302.4 297 Q(GC_Link3\(\), 21)
302.4 312 Q(GC_Node, 20)302.4 327 Q(GC_Node2, 21)302.4 342 Q(GC_Node3, 21)302.4
357 Q(GC_Unlink, 20)302.4 372 Q(Get_Double\(\), 26)302.4 387 Q(Get_Error_T)
302.4 402 Q(ag\(\), 45)-.88 E(Get_Exact_Inte)302.4 417 Q(ger\(\), 25)-.165 E
(Get_Exact_Long\(\), 25)302.4 432 Q(Get_Exact_Unsigned\(\), 25)302.4 447 Q
(Get_Exact_Unsigned_Long\(\), 25)302.4 462 Q(Get_Inte)302.4 477 Q(ger\(\), 25)
-.165 E(Get_Long\(\), 25)302.4 492 Q(Get_String\(\), 29)302.4 507 Q
(Get_String_Stack\(\), 29)302.4 522 Q(Get_Strsym\(\), 29)302.4 537 Q
(Get_Strsym_Stack\(\), 29)302.4 552 Q(Get_Unsigned\(\), 25)302.4 567 Q
(Get_Unsigned_Long\(\), 25)302.4 582 Q(global v)302.4 597 Q(ariable, 40)-.275 E
(Global_En)302.4 612 Q(vironment, 32)-.44 E(Global_GC_Link\(\), 41)302.4 627 Q
F1(H)302.4 657 Q F0(heap, 15, 20)302.4 687 Q(hooks, 4)302.4 702 Q -.055(hy)
302.4 717 S(brid application, 2).055 E EP
%%Page: 61 61
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-6)276.087 51 S 2.75(1-)288 51 S -.055(hy)72 87 S
(brid e).055 E(xtension, 5, 6)-.165 E/F1 13/Times-Bold@0 SF(I)72 117 Q F0
(implementation language, 2)72 147 Q(include \214les, 12)72 162 Q
(incremental loading, 6)72 177 Q(inde)72 192 Q(x\(\), 15)-.165 E(ine)72 207 Q
(xact number)-.165 E 2.75(,2)-.44 G(6)150.518 207 Q(Intern\(\), 28, 47)72 222 Q
(ISCONST\(\), 15)72 237 Q(IS_ALIVE\(\), 43)72 252 Q F1(L)72 282 Q F0
(ld\215ags, 9)72 312 Q(linkscheme, 8, 11)72 327 Q(load libraries, 6)72 342 Q
(load primiti)72 357 Q -.165(ve)-.275 G 2.75(,5).165 G(load-path, 11, 47)72 372
Q(Load_File\(\), 11)72 387 Q(Load_Source_Port\(\), 31)72 402 Q(local v)72 417 Q
(ariable, 20, 21, 40)-.275 E F1(M)72 447 Q F0(main\(\), 4, 8)72 477 Q(mak)72
492 Q(edl script, 5)-.11 E(Mak)72 507 Q(e_Char\(\), 24)-.11 E(Mak)72 522 Q
(e_Flonum\(\), 27)-.11 E(Mak)72 537 Q(e_Inte)-.11 E(ger\(\), 25)-.165 E(Mak)72
552 Q(e_Long\(\), 25)-.11 E(Mak)72 567 Q(e_Port\(\), 30)-.11 E(Mak)72 582 Q
(e_Reduced_Flonum\(\), 27)-.11 E(Mak)72 597 Q(e_String\(\), 22, 29)-.11 E(Mak)
72 612 Q(e_Unsigned\(\), 25)-.11 E(Mak)72 627 Q(e_Unsigned_Long\(\), 25)-.11 E
(Mak)72 642 Q(e_V)-.11 E(ector\(\), 19, 30)-1.221 E(MANY)72 657 Q 2.75(,2)
-1.419 G(2)115.186 657 Q(module.o, 8, 11)302.4 87 Q F1(N)302.4 117 Q F0(Ne)
302.4 147 Q(wline, 24)-.275 E(NOEV)302.4 162 Q(AL, 18)-1.485 E
(non-printing symbol, 28)302.4 177 Q(NO_PR)302.4 192 Q -2.068 -.44(OT OT)-.44 H
(YPES, 13).44 E(Null, 24)302.4 207 Q(Nullp\(\), 24)302.4 222 Q(NUMSTRB)302.4
237 Q(UFS, 29)-.11 E F1(O)302.4 267 Q F0(Object, 15)302.4 297 Q F1(P)302.4 327
Q F0(pair)302.4 357 Q 2.75(,1)-.44 G(7)330.065 357 Q -1.012(PA)302.4 372 S
(IR\(\), 27)1.012 E -.165(Pa)302.4 387 S(nic\(\), 46).165 E
(pointer \214eld, 15, 20)302.4 402 Q(POINTER\(\), 15)302.4 417 Q(Primiti)302.4
432 Q -.165(ve)-.275 G(_Error\(\), 35, 45).165 E(Print\(\), 31)302.4 447 Q
(Printf\(\), 31)302.4 462 Q(Print_Object\(\), 31)302.4 477 Q
(P_Cons\(\), 22, 27)302.4 492 Q F1(R)302.4 522 Q F0(Range_Error\(\), 46)302.4
552 Q(rapid prototyping, 4)302.4 567 Q(reader function, 48)302.4 582 Q
(real numbers, 26)302.4 597 Q(record e)302.4 612 Q(xtension, 4)-.165 E(Re)302.4
627 Q(gister_After_GC\(\), 42)-.165 E(Re)302.4 642 Q(gister_Before_GC\(\), 43)
-.165 E(Re)302.4 657 Q(gister_Object\(\), 31, 44)-.165 E(Re)302.4 672 Q
(gister_Onfork\(\), 49)-.165 E(Reset_IO\(\), 31, 39)302.4 687 Q
(root set, 20, 28)302.4 702 Q EP
%%Page: 62 62
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-6)276.087 51 S 2.75(2-)288 51 S(R)72 87 Q/F1 9
/Times-Roman@0 SF(4)79.337 81.5 Q F0(RS, 1)83.837 87 Q/F2 13/Times-Bold@0 SF(S)
72 117 Q F0(Safe_Malloc\(\), 15)72 147 Q(Safe_Realloc\(\), 15)72 162 Q(Sa)72
177 Q -.165(ve)-.22 G(d_Errno, 45).165 E(Scheme e)72 192 Q(xtensions, 4, 13)
-.165 E(Scheme primiti)72 207 Q -.165(ve)-.275 G(s, 13, 17).165 E(scheme.h, 12)
72 222 Q(SET\(\), 15)72 237 Q(SETCONST\(\), 15)72 252 Q(Set_App_Name\(\), 11)72
267 Q(Set_Error_T)72 282 Q(ag\(\), 11, 45)-.88 E(signals, 46)72 297 Q
(Signal_Exit\(\), 47)72 312 Q(special forms, 17, 18)72 327 Q(standalone.o, 8)72
342 Q(Standard_Input_Port, 31)72 357 Q(Standard_Output_Port, 31)72 372 Q
(static linking, 5, 8)72 387 Q(string port, 40)72 402 Q(strong pointers, 42)72
417 Q(SYMBOL, 28)72 432 Q(Symbols_T)72 447 Q(o_Bits\(\), 37)-.88 E
(SYMDESCR, 37, 39)72 462 Q F2(T)72 492 Q F0(tag \214eld, 15)72 522 Q
(Tcl, 12, 40)72 537 Q -.77(Te)72 552 S(rminate_File\(\), 31).77 E -.77(Te)72
567 S(rminate_Group\(\), 44).77 E -.77(Te)72 582 S(rminate_T).77 E(ype\(\), 44)
-.88 E(termination function, 42, 44)72 597 Q(The_En)72 612 Q(vironment, 32)-.44
E -.385(Tr)72 627 S(uep\(\), 24).385 E(type \214eld, 15)72 642 Q
(type predicate, 35)72 657 Q(TYPE\(\), 15)72 672 Q(T_Bignum, 25)72 687 Q
(T_Boolean, 24)72 702 Q(T_Character)72 717 Q 2.75(,2)-.44 G(4)137.538 717 Q
(T_Compound, 32)72 732 Q(T_Control, 32)302.4 87 Q(T_End_Of_File, 25)302.4 102 Q
(T_En)302.4 117 Q(vironment, 32)-.44 E(T_Fixnum, 25)302.4 132 Q(T_Flonum, 26)
302.4 147 Q(T_Macro, 32)302.4 162 Q(T_Null, 24)302.4 177 Q(T_P)302.4 192 Q(air)
-.165 E 2.75(,2)-.44 G(7)342.737 192 Q(T_Port, 30, 44)302.4 207 Q(T_Primiti)
302.4 222 Q -.165(ve)-.275 G 2.75(,3).165 G(2)366.134 222 Q(T_Promise, 32)302.4
237 Q(T_String, 28)302.4 252 Q(T_Symbol, 27)302.4 267 Q(T_V)302.4 282 Q(ector)
-1.221 E 2.75(,3)-.44 G(0)353.891 282 Q F2(U)302.4 312 Q F0
(UFIXNUM_FITS\(\), 25)302.4 342 Q(UNIX e)302.4 357 Q(xtension, 6, 49)-.165 E
(unresolv)302.4 372 Q(ed reference, 6)-.165 E(unrof)302.4 387 Q(f, 1)-.275 E
(UPD)302.4 402 Q -1.221(AT)-.44 G(E_OBJ\(\), 43)1.221 E F2(V)302.4 432 Q F0
-1.485(VA)302.4 462 S(RARGS, 18, 22)1.485 E -1.221(Va)302.4 477 S
(r_Get\(\), 47)1.221 E -1.221(Va)302.4 492 S(r_Set\(\), 47)1.221 E -.165(ve)
302.4 507 S(ctor).165 E 2.75(,1)-.44 G(6, 18)340.284 507 Q(VECT)302.4 522 Q
(OR\(\), 16)-.198 E -.165(ve)302.4 537 S(ctor).165 E(-re)-.22 E -.165(ve)-.275
G(rse!, 18).165 E -.165(ve)302.4 552 S(ctor).165 E(-re)-.22 E -.165(ve)-.275 G
(rse, 19).165 E(visit function, 33, 35)302.4 567 Q -1.419(Vo)302.4 582 S
(id, 28)1.419 E F2(W)302.4 612 Q F0 -1.32(WA)302.4 642 S(NT_PR)1.32 E -2.068
-.44(OT OT)-.44 H(YPES, 13).44 E -1.32(WA)302.4 657 S(S_FOR)1.32 E -1.32(WA)
-.605 G(RDED\(\), 43)1.32 E(weak data structure, 42)302.4 672 Q(weak list, 44)
302.4 687 Q(weak pointers, 42, 44)302.4 702 Q(Wrong_T)302.4 717 Q(ype\(\), 46)
-.88 E EP
%%Page: 63 63
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 2.75(-6)276.087 51 S 2.75(3-)288 51 S(Wrong_T)72 87 Q
(ype_Combination\(\), 46)-.88 E/F1 13/Times-Bold@0 SF(X)72 117 Q F0 2.75(Xw)72
147 S(indo)90.634 147 Q 2.75(ws)-.275 G(ystem, 6)124.888 147 Q(X11 e)72 162 Q
(xtension, 4, 6, 8, 12)-.165 E(Xlib e)72 177 Q(xtension, 6, 8, 44, 45)-.165 E
(Xt e)72 192 Q(xtension, 45, 47)-.165 E F1(_)72 222 Q F0 .916(__)72 252 S
(cplusplus, 12)-.916 E .916(__)72 267 S -1.834(STDC_ _,)-.916 F(12)2.75 E EP
%%Page: 64 64
%%BeginPageSetup
BP
%%EndPageSetup
/F0 13/Times-Bold@0 SF -1.196(Ta)239.127 123 S(ble of Contents)1.196 E/F1 11
/Times-Roman@0 SF(1. Additional Documentation)72 177.6 Q 19.25(...............\
..............................................................................\
...... 1)3.616 F(2. Introduction)72 196.2 Q 19.25(............................\
..............................................................................\
................ 2)3.616 F(3. The Architecture of Extensible Applications)72
214.8 Q 19.25
(....................................................................... 2)
3.341 F(3.1. Scheme Extensions)83 233.4 Q 19.25(..............................\
......................................................................... 4)
5.145 F(3.2. Applications v)83 252 Q(ersus Extensions)-.165 E 19.25(..........\
.......................................................................... 4)
5.31 F(4. Linking Applications and Extensions with Elk)72 270.6 Q 19.25
(................................................................... 5)5.442 F
(5. Dynamic Loading)72 289.2 Q 19.25(.........................................\
........................................................................ 5)
3.011 F(5.1. Load Libraries)83 307.8 Q 19.25(.................................\
..............................................................................\
 6)3.935 F(5.2. Extension Initializers and Finalizers)83 326.4 Q 19.25(.......\
...................................................................... 7)3.935
F(5.3. C++ Static Constructors and Destructors)83 345 Q 19.25
(...................................................................... 7)3.132
F(6. Static Linking)72 363.6 Q 19.25(.........................................\
..............................................................................\
 8)3.605 F(6.1. Linking the Scheme Interpreter with Extensions)83 382.2 Q 19.25
(.......................................................... 8)3.638 F
(6.1.1. Automatic Extension Initialization)94 400.8 Q 19.25
(........................................................................ 9)
4.837 F(6.2. Linking the Scheme Interpreter with an Application)83 419.4 Q
19.25(.................................................... 9)3.341 F
(6.2.1. An Example `)94 438 Q(`main\(\)')-.814 E 2.75('F)-.814 G .987(unction \
............................................................................)
230.763 438 R(10)493 438 Q(6.3. Who is in Control?)83 456.6 Q 13.75(..........\
..............................................................................\
............... 11)6.971 F(7. Notes for Writing C/C++ Code Using Elk)72 475.2 Q
13.75(........................................................................\
... 12)3.121 F(7.1. Elk Include Files)83 493.8 Q 13.75(.......................\
..............................................................................\
...... 12)4.837 F(7.2. Standard C and Function Prototypes)83 512.4 Q 13.75(...\
.......................................................................... 12)3
F(7.3. External Symbols De\214ned by Elk)83 531 Q 13.75(......................\
........................................................... 13)3.616 F
(7.4. Calling Scheme Primiti)83 549.6 Q -.165(ve)-.275 G 3.737(s.).165 G 13.75
(.............................................................................\
.............. 13)226.25 549.6 R(7.5. Portable alloca\(\))83 568.2 Q 13.75(...\
..............................................................................\
........................... 14)4.243 F(7.6. Other Useful Macros and Functions)
83 586.8 Q 13.75(.............................................................\
................ 15)4.859 F(8. The Anatomy of Scheme Objects)72 605.4 Q 13.75(\
..............................................................................\
.......... 15)4.859 F(8.1. T)83 624 Q(ype-speci\214c Macros)-.88 E 13.75(.....\
..............................................................................\
................. 16)4.518 F(9. De\214ning Ne)72 642.6 Q 2.75(wS)-.275 G
(cheme Primiti)153.609 642.6 Q -.165(ve)-.275 G 4.639(s.).165 G 13.75(........\
..............................................................................\
. 17)237.25 642.6 R(9.1. Making Objects Kno)83 661.2 Q
(wn to the Garbage Collector)-.275 E 13.75
(........................................................ 19)3.616 F
(9.2. Primiti)83 679.8 Q -.165(ve)-.275 G 2.75(sw).165 G(ith V)157.734 679.8 Q
(ariable-Length Ar)-1.221 E(gument Lists)-.198 E 13.75
(......................................................... 22)4.87 F
(10. Prede\214ned Scheme T)72 698.4 Q 2.373(ypes .............................\
.....................................................................)-.88 F
(23)493 698.4 Q(10.1. Booleans \(T_Boolean\))83 717 Q 13.75(..................\
..............................................................................\
 24)4.848 F EP
%%Page: 65 65
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(10.2. Characters \(T_Character\))83 87 Q 13.75(.......\
..............................................................................\
....... 24)3.66 F(10.3. Empty List \(T_Null\))83 105.6 Q 13.75(...............\
..............................................................................\
...... 24)5.442 F(10.4. End of File \(T_End_Of_File\))83 124.2 Q 13.75(.......\
..............................................................................\
. 25)3.011 F(10.5. Inte)83 142.8 Q(gers \(T_Fixnum and T_Bignum\))-.165 E 13.75
(.......................................................................... 25)
4.397 F(10.6. Floating Point Numbers \(T_Flonum\))83 161.4 Q 13.75
(.......................................................................... 26)
2.989 F(10.7. P)83 180 Q(airs \(T_P)-.165 E 1.812(air\) ......................\
..............................................................................\
..........)-.165 F(27)493 180 Q(10.8. Symbols \(T_Symbol\))83 198.6 Q 13.75(..\
..............................................................................\
.................. 27)4.21 F(10.8.1. The Non-Printing Symbol)94 217.2 Q 13.75(\
..............................................................................\
...... 28)3.605 F(10.9. Strings \(T_String\))83 235.8 Q 13.75(................\
..............................................................................\
......... 28)5.134 F(10.10. V)83 254.4 Q(ectors \(T_V)-1.221 E 1.504(ector\) .\
..............................................................................\
.....................)-1.221 F(30)493 254.4 Q(10.11. Ports \(T_Port\))83 273 Q
13.75(........................................................................\
.................................... 30)3 F(10.12. Miscellaneous T)83 291.6 Q
1.449(ypes ...................................................................\
..............................)-.88 F(32)493 291.6 Q(11. De\214ning Ne)72 310.2
Q 2.75(wS)-.275 G(cheme T)159.109 310.2 Q 1.427(ypes .........................\
....................................................................)-.88 F(32)
493 310.2 Q(11.1. Example for a User)83 328.8 Q(-De\214ned Scheme T)-.22 E
1.097(ype .................................................................)
-.88 F(34)493 328.8 Q(12. Adv)72 347.4 Q(anced T)-.275 E 1.119(opics .........\
..............................................................................\
.........................)-.88 F(37)493 347.4 Q(12.1. Con)83 366 Q -.165(ve)
-.44 G(rting between Symbols, Inte).165 E(gers, and Bitmasks)-.165 E 13.75
(............................................... 37)4.089 F
(12.2. Calling Scheme Procedures, Ev)83 384.6 Q(aluating Scheme Code)-.275 E
13.75(.............................................. 39)4.221 F
(12.3. GC-Protecting Global Objects)83 403.2 Q 13.75(.........................\
........................................................... 40)4.54 F
(12.3.1. Dynamic C Data Structures)94 421.8 Q 13.75(..........................\
....................................................... 41)5.464 F(12.4. W)83
440.4 Q(eak Pointers and Object T)-.88 E .096(ermination .....................\
..................................................)-.77 F(42)493 440.4 Q
(12.4.1. Using W)94 459 Q(eak Pointers)-.88 E 13.75(..........................\
.................................................................. 42)3.891 F
(12.4.2. Functions for Automatic Object T)94 477.6 Q 1.647
(ermination ......................................................)-.77 F(44)
493 477.6 Q(12.5. Errors)83 496.2 Q 13.75(....................................\
..............................................................................\
......... 45)3.011 F(12.6. Exceptions)83 514.8 Q 13.75(.......................\
..............................................................................\
.............. 46)3.616 F(12.7. De\214ning Scheme V)83 533.4 Q 1.493(ariables \
..............................................................................\
...........)-1.221 F(47)493 533.4 Q(12.8. De\214ning Readers)83 552 Q 13.75(..\
..............................................................................\
......................... 48)3.319 F(12.9. F)83 570.6 Q(ork Handlers)-.165 E
13.75(........................................................................\
...................................... 49)3.176 F
(Appendix A: Functions that can T)72 589.2 Q(rigger a Garbage Collection)-.385
E 13.75(............................................... 49)3.121 F
(Appendix B: Con)72 607.8 Q -.165(ve)-.44 G
(nience Functions for GC-Safe Data Structures).165 E 13.75
(........................................ 50)4.562 F
(Appendix C: Summary of Functions, Macros, T)72 626.4 Q(ypes, and V)-.88 E
2.076(ariables ......................................)-1.221 F(53)493 626.4 Q
(Inde)72 645 Q 2.868(x.)-.165 G 13.75(........................................\
..............................................................................\
.................. 59)102.5 645 R EP
%%Trailer
end
%%EOF
