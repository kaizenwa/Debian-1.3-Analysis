%!PS-Adobe-3.0
%%Creator: groff version 1.06
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font ZapfDingbats
%%+ font Courier
%%DocumentSuppliedResources: file logo.eps
%%+ procset grops 1.06 0
%%Pages: 24
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.06 0

/setpacking where {
	pop
	currentpacking
	true setpacking
} if

/grops 120 dict dup begin 

% The ASCII code of the space character.
/SC 32 def

/A /show load def
/B { 0 SC 3 -1 roll widthshow } bind def
/C { 0 exch ashow } bind def
/D { 0 exch 0 SC 5 2 roll awidthshow } bind def
/E { 0 rmoveto show } bind def
/F { 0 rmoveto 0 SC 3 -1 roll widthshow } bind def
/G { 0 rmoveto 0 exch ashow } bind def
/H { 0 rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/I { 0 exch rmoveto show } bind def
/J { 0 exch rmoveto 0 SC 3 -1 roll widthshow } bind def
/K { 0 exch rmoveto 0 exch ashow } bind def
/L { 0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/M { rmoveto show } bind def
/N { rmoveto 0 SC 3 -1 roll widthshow } bind def
/O { rmoveto 0 exch ashow } bind def
/P { rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/Q { moveto show } bind def 
/R { moveto 0 SC 3 -1 roll widthshow } bind def
/S { moveto 0 exch ashow } bind def
/T { moveto 0 exch 0 SC 5 2 roll awidthshow } bind def

% name size font SF -

/SF {
	findfont exch
	[ exch dup 0 exch 0 exch neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

% name a c d font MF -

/MF {
	findfont
	[ 5 2 roll
	0 3 1 roll % b
	neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def

% Guess the page length.
% This assumes that the imageable area is vertically centered on the page.
% PLG - length

/PLG {
	gsave newpath clippath pathbbox grestore
	exch pop add exch pop
} bind def

% BP -

/BP {
	/level0 save def
	1 setlinecap
	1 setlinejoin
	72 RES div dup scale
	LS {
		90 rotate
	} {
		0 PL translate
	} ifelse
	1 -1 scale
} bind def

/EP {
	level0 restore
	showpage
} bind def


% centerx centery radius startangle endangle DA -

/DA {
	newpath arcn stroke
} bind def

% x y SN - x' y'
% round a position to nearest (pixel + (.25,.25))

/SN {
	transform 
	.25 sub exch .25 sub exch
	round .25 add exch round .25 add exch
	itransform
} bind def
	
% endx endy startx starty DL -
% we round the endpoints of the line, so that parallel horizontal
% and vertical lines will appear even

/DL {
	SN
	moveto
	SN
	lineto stroke
} bind def

% centerx centery radius DC -

/DC {
	newpath 0 360 arc closepath
} bind def


/TM matrix def

%  width height centerx centery DE -

/DE {
	TM currentmatrix pop
	translate scale newpath 0 0 .5 0 360 arc closepath
	TM setmatrix
} bind def

% these are for splines

/RC /rcurveto load def
/RL /rlineto load def
/ST /stroke load def
/MT /moveto load def
/CL /closepath load def

% fill the last path

% amount FL -

/FL {
	currentgray exch setgray fill setgray
} bind def

% fill with the ``current color''

/BL /fill load def

/LW /setlinewidth load def
% new_font_name encoding_vector old_font_name RE -

/RE {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def

/DEFS 0 def

% hpos vpos EBEGIN -

/EBEGIN {
	moveto
	DEFS begin
} bind def

/EEND /end load def

/CNT 0 def
/level1 0 def

% llx lly newwid wid newht ht newllx newlly PBEGIN -

/PBEGIN {
	/level1 save def
	translate
	div 3 1 roll div exch scale
	neg exch neg exch translate
	% set the graphics state to default values
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {
		pop
		false setstrokeadjust
	} if
	/setoverprint where {
		pop
		false setoverprint
	} if
	newpath
	/CNT countdictstack def
	userdict begin
	/showpage {} def
} bind def

/PEND {
	clear
	countdictstack CNT sub { end } repeat
	level1 restore
} bind def

end def

/setpacking where {
	pop
	setpacking
} if
%%EndResource
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
%%IncludeResource: font ZapfDingbats
%%IncludeResource: font Courier
grops begin/DEFS 52 dict def DEFS begin/u{.001 mul}bind def
/Version { (Release 1.1.18		) } bind def
end/RES 72 def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron
/Zcaron/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent/ampersand
/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash/zero
/one/two/three/four/five/six/seven/eight/nine/colon/semicolon/less/equal
/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z
/bracketleft/backslash/bracketright/circumflex/underscore/quoteleft/a/b/c/d/e/f
/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/tilde/.notdef
/quotesinglbase/guillemotleft/guillemotright/bullet/florin/fraction/perthousand
/dagger/daggerdbl/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave
/hungarumlaut/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe
/lslash/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft/logicalnot
/minus/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guilsinglright
/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde
/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]def/Courier@0 ENC0/Courier RE/Courier@0 ENC0
/Courier RE/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic
RE/Times-Bold@0 ENC0/Times-Bold RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
77.833 84 EBEGIN
gsave 3 dup scale -230 30 translate
EEND 80.333 84 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND 82.833 84 EBEGIN
grestore
EEND 511.2 356.4 14.4 DC 0.6000 FL 108 356.4 14.4 DC 0.6000 FL 108 435.6 14.4
DC 0.6000 FL 511.2 435.6 14.4 DC 0.6000 FL 525.6 356.4 MT -432 0 RL 0 79.2 RL
432 0 RL CL 0.6000 FL 511.2 342 MT -403.2 0 RL 0 108 RL 403.2 0 RL CL 0.6000 FL
.4 LW 108 435.6 14.4 -180.0000 90.0000 DA 108 356.4 14.4 -90.0000 180.0000 DA
511.2 356.4 14.4 -0.0000 -90.0000 DA 511.2 435.6 14.4 90.0000 0.0000 DA 93.6
356.4 93.6 435.6 DL 511.2 342 108 342 DL 525.6 435.6 525.6 356.4 DL 108 450
511.2 450 DL 504 363.6 14.4 DC 1.0000 FL 100.8 363.6 14.4 DC 1.0000 FL 100.8
442.8 14.4 DC 1.0000 FL 504 442.8 14.4 DC 1.0000 FL 518.4 363.6 MT -432 0 RL 0
79.2 RL 432 0 RL CL 1.0000 FL 504 349.2 MT -403.2 0 RL 0 108 RL 403.2 0 RL CL
1.0000 FL 100.8 442.8 14.4 -180.0000 90.0000 DA 100.8 363.6 14.4 -90.0000
180.0000 DA 504 363.6 14.4 -0.0000 -90.0000 DA 504 442.8 14.4 90.0000 0.0000 DA
86.4 363.6 86.4 442.8 DL 504 349.2 100.8 349.2 DL 518.4 442.8 518.4 363.6 DL
100.8 457.2 504 457.2 DL/F0 30/Times-Bold@0 SF(Using)251.325 375.6 Q(DLL T)
141.69 405.6 Q(ools W)228.12 405.6 Q(ith Linux)-.54 E/F1 30/Times-Italic@0 SF
-3.33(Ve)188 441.6 S -.3(rs)3.33 G(ion 2.12).3 E/F2 15/Times-Roman@0 SF
(Written by Da)138.172 525.6 Q(vid Engel, on or about 12 Dec 1992)-.3 E(Re)
145.792 549.6 Q(written by Eric Y)-.375 E(oungdale \(eric)-1.65 E(y@cais.com\))
-.225 E(to co)207.405 568.8 Q -.225(ve)-.225 G 3.75(rD).225 G(LL, 30 Jan 1993)
270.27 568.8 Q EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)476.95 48 T(2)3.3 E/F1 10
/Times-Bold@0 SF(1. Intr)72 72 Q(oduction)-.18 E/F2 10/Times-Roman@0 SF .743
(The most dif)72 87.6 R .743(\214cult task of b)-.25 F .743(uilding a jump tab\
le library for Linux has been the handling of global data. Since)-.2 F 1.389
(data is referenced directly)72 99.6 R 3.889(,i)-.65 G 1.389
(ts location must not change from v)188.256 99.6 R 1.39(ersion to v)-.15 F 1.39
(ersion. Historically)-.15 F 3.89(,t)-.65 G 1.39(his has been)466.74 99.6 R
.094(accomplished by manually identifying all global data and mo)72 111.6 R
.093(ving it to separate \214les. V)-.15 F .093(ery messy! Additionally)-1.11 F
(,)-.65 E .944(the resulting source changes are v)72 123.6 R .945
(ery Linux-speci\214c and, as such, are unlik)-.15 F .945(ely to be inte)-.1 F
.945(grated back into the)-.15 F 1.598(standard distrib)72 135.6 R 1.598
(utions. This w)-.2 F 1.598(ould mak)-.1 F 4.098(ek)-.1 G 1.597
(eeping the Linux sources for a library in sync with the standard)247.82 135.6
R .712(sources a v)72 147.6 R .712
(ery daunting task. This is the reason there ha)-.15 F -.15(ve)-.2 G(n').15 E
3.212(tb)-.18 G .712(een jump table v)330.212 147.6 R .712
(ersions of the X libs. That is,)-.15 F(until no)72 159.6 Q(w!)-.25 E .04
(The programs in this kit greatly simplify the generation of a jump table lib)
72 183.6 R 2.539(.I)-.4 G 2.539(nf)377.967 183.6 S .039
(act, after a little initial setup, the)388.736 183.6 R .397
(entire process can be easily run from a Mak)72 195.6 R .397
(e\214le without an)-.1 F 2.897(yf)-.15 G .397(urther interv)324.115 195.6 R
2.897(ention. These)-.15 F .397(programs were made)2.897 F .775
(possible by an idea from Eric Y)72 207.6 R .774(oungdale \(eric)-1.1 F .774
(y@cais.com\), and the tools ha)-.15 F 1.074 -.15(ve u)-.2 H(nder).15 E .774
(gone a lot of re\214nement)-.18 F 1.494
(since then. The original tools were primarily designed to deal with just a re)
72 219.6 R 1.494(gular jump table library)-.15 F 3.994(,b)-.65 G 1.494(ut it)
501.066 219.6 R(became clear that there w)72 231.6 Q
(as a need for some form of dynamic linking, and this w)-.1 E
(as incorporated as well.)-.1 E 1.096
(This \214le contains a step by step description of ho)72 255.6 R 3.596(wt)-.25
G 3.596(ob)291.03 255.6 S 1.095
(uild a DLL jump table library for Linux. In case of)304.426 255.6 R 1.285
(trouble, see the troubleshooting section. W)72 267.6 R 1.285
(ithin this document bordered displays highlight important points.)-.4 F(An)72
279.6 Q 2.772(yl)-.15 G .272(ine be)94.622 279.6 R .272(gining with a)-.15 F F1
(%)2.772 E F2 .272(character should be e)2.772 F -.15(xe)-.15 G .272
(cuted by the user and the rest is feedback generated by the).15 F(respecti)72
291.6 Q .3 -.15(ve p)-.25 H(rograms.).15 E F1(2. Pr)72 315.6 Q(eparation)-.18 E
F2 .018(First of all you need to con\214gure the tools a little bit, and this \
is done by editing the Mak)99.5 331.2 R .018(e\214le in the tools)-.1 F
(directory)72 343.2 Q 2.5(.T)-.65 G
(here are a couple of de\214nes that you might wish to add:)118.56 343.2 Q
(-DLONG_FILEN)72 370.8 Q 23.42(AMES Use)-.35 F 1.901(this if you will be b)
4.401 F 1.901(uilding the library on a \214lessytem with a \214lename)-.2 F
.383(length limit >> 14. Extfs or e)197 382.8 R .384(xt2 \214t into this cate)
-.15 F(gory)-.15 E 2.884(.D)-.65 G 2.884(ON)424.608 382.8 S 1.184 -.4(OT D)
441.932 382.8 T .384(EFINE THIS).4 F 2.174(IF Y)197 394.8 R 2.174
(OU ARE GOING T)-.3 F 4.673(OU)-.18 G 2.173(SE THE T)323.199 394.8 R 2.173
(OOLS ON A LIBRAR)-.18 F 4.673(YT)-.65 G(HA)485.397 394.8 Q 4.673(TI)-1.11 G(S)
512.84 394.8 Q(ST)197 406.8 Q .322(ORED ON A MINIX FILESYSTEM. The k)-.18 F
.622 -.15(ey d)-.1 H .322(irectory for which it matters).15 F 1.779
(what \214lesystem that you are going to be using is the one pointed to by the)
197 418.8 R 1.142(JUMP_DIR en)197 430.8 R 1.142(vironment v)-.4 F 1.142
(ariable. This does not need to be located an)-.25 F(ywhere)-.15 E 1.235(near \
the actual library source, so in principle the library could be on a minix)197
442.8 R 2.364(\214lesystem and the JUMP_DIR could be an e)197 454.8 R 2.365
(xt2 \214lesystem, and you could)-.15 F(le)197 466.8 Q
(gitimately de\214ne this before you b)-.15 E(uild.)-.2 E(-DIMPLIED_IMPOR)72
482.4 Q 31.72(T\()-.6 G 1.61(THIS SWITCH DOES NO)200.33 482.4 R 4.11(TW)-.4 G
1.61(ORK WELL.)332.92 482.4 R 1.61(PLEASE CONSTR)6.61 F 1.61(UCT THE)-.4 F
1.376(jump.import FILE A)197 494.4 R 1.376(CCORDING T)-.4 F 3.876(OT)-.18 G
1.376(HE INSTR)361.644 494.4 R 1.376(UCTIONS LA)-.4 F 1.377(TER ON IN)-1.11 F
2.072(THIS DOCUMENT)197 506.4 R 7.072(.I)-.74 G 4.572(TM)292.614 506.4 S 4.172
-1.05(AY B)312.186 506.4 T 4.572(EF)1.05 G 2.072(IXED A)353.06 506.4 R 4.572
(TAL)-1.11 G -1.11(AT)416.206 506.4 S 2.072(ER D)1.11 F -1.11(AT)-.4 G 4.571
(E\). Use)1.11 F(this)4.571 E 1.496(de\214ne if you do not wish to put togethe\
r a jump.import \214le. This \214le w)197 518.4 R(ould)-.1 E .132
(contain a list of all v)197 530.4 R .131
(ariables that we are importing from other sharable libraries,)-.25 F .556
(and the usual trick is to simply cat together jump.v)197 542.4 R .556
(ars \214les from those libraries)-.25 F 5.451
(to get jump.import. This can be a little bit of a nuisance, so the)197 554.4 R
(IMPLIED_IMPOR)197 566.4 Q 4.312(Ts)-.6 G 1.812
(witch basically tells the tools that all symbols that are)287.932 566.4 R
1.168(*not* in jump.v)197 578.4 R 1.168
(ars, jump.funcs or jump.ignore are being imported from other)-.25 F 1.915
(sharable libraries. Unfortunately this means that the \214rst time you b)197
590.4 R 1.916(uild the)-.2 F 1.05(library \(before you ha)197 602.4 R 1.349
-.15(ve t)-.2 H 1.049(hese \214les\) the).15 F/F3 10/Courier@0 SF(jumpas)3.549
E F2 1.049(program has to w)3.549 F 1.049(ork harder)-.1 F(re)197 614.4 Q 1.18
(writing assembly code, and if there is a b)-.25 F 1.18(ug in the)-.2 F F3
(jumpas)3.68 E F2 1.18(assembly code)3.68 F(re)197 626.4 Q 1.479
(writing, then you are more lik)-.25 F 1.479
(ely to encounter it with IMPLIED_IMPOR)-.1 F -.74(T.)-.6 G 2.578(Once you ha)
197 638.4 R 2.878 -.15(ve t)-.2 H 2.578
(he jump.* \214les, there should not be that much dif).15 F(ference)-.25 E .059
(between using this switch and not using it. The adv)197 650.4 R .059
(antage of using this switch is)-.25 F(ob)197 662.4 Q
(viously that you do not need to put together the jump.import \214le.)-.15 E
1.548(There is no free lunch with the -DIMPLIED_IMPOR)197 686.4 R 4.048(Ts)-.6
G 1.548(witch, ho)434.304 686.4 R(we)-.25 E -.15(ve)-.25 G 2.648 -.55(r. T).15
H(he).55 E F3(jumpas)197 698.4 Q F2 .808(program has no w)3.308 F .808
(ay of kno)-.1 F .807(wing if an imported symbol is a function)-.25 F .941
(or a v)197 710.4 R .941(ariable. W)-.25 F 3.441(ea)-.8 G .942
(re only interested in v)275.514 710.4 R .942(ariables, b)-.25 F .942
(ut sometimes functions are)-.2 F .758(referenced in such a w)197 722.4 R .758
(ay that it is impossible for)-.1 F F3(jumpas)3.258 E F2 .758
(to tell whether it is)3.258 F(DLL tools 2.12)72 768 Q EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(3)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF .405(looking at a function or a v)197 84 R .405
(ariable. The only w)-.25 F .405(ay that)-.1 F/F2 10/Courier@0 SF(jumpas)2.905
E F1 .405(can resolv)2.905 F 2.905(et)-.15 G(his)506.73 84 Q 1.172
(is to assume that it must be a v)197 96 R 1.171(ariable, b)-.25 F 1.171
(ut this means that an)-.2 F 3.671(yf)-.15 G 1.171(unctions that)465.839 96 R
1.435(accidentally get identi\214ed will be referenced via a __GO)197 108 R
1.435(T__ v)-.4 F 1.435(ariable \(which)-.25 F 2.309(does not e)197 120 R 2.309
(xist for functions\). Thus functions lik)-.15 F 4.808(et)-.1 G 2.308
(his need to be added to)414.93 120 R 1.222(jump.ignore. I am not really con)
197 132 R 1.222(vinced that this is an)-.4 F 3.722(ye)-.15 G(asier)431.98 132 Q
3.722(,s)-.4 G 3.722(of)460.572 132 S 1.223(or the time)472.624 132 R
(being I recommend that people generate the jump.import \214le manually)197 144
Q(.)-.65 E(Ne)97 171.6 Q .577(xt you compile the tools, and the Mak)-.15 F .577
(e\214le is set up so that you can simply type)-.1 F F2(make)3.077 E F1 .577
(and all of the)3.077 F .728(programs will be properly compiled and link)72
183.6 R .728(ed. T)-.1 F 3.228(oi)-.8 G .728(nstall, type)286.624 183.6 R F2
.728(make install)3.228 F F1 .729(as root, and all of the \214les)3.228 F 1.123
(will be mo)72 195.6 R -.15(ve)-.15 G 3.622(dt).15 G 3.622(ot)137.568 195.6 S
1.122(he correct locations. If you wish to install manually)148.97 195.6 R
3.622(,j)-.65 G 1.122(ust e)372.008 195.6 R 1.122(xamine the install tar)-.15 F
1.122(get in the)-.18 F(Mak)72 207.6 Q(e\214le.)-.1 E(No)72 231.6 Q 2.619(wy)
-.25 G .119(ou can turn your attention to the library that you wish to b)98.809
231.6 R 2.619(uild. Y)-.2 F .119(ou can start by b)-1.1 F .119
(uilding a static v)-.2 F(ersion)-.15 E 1.364(of the library \(it')72 243.6 R
3.864(su)-.55 G 1.364(sually a good idea to start with a w)155.226 243.6 R
1.364(orking v)-.1 F 1.364(ersion :\). Sa)-.15 F 1.664 -.15(ve a c)-.2 H(op).15
E 3.863(yo)-.1 G 3.863(ft)440.531 243.6 S 1.363(he Mak)450.504 243.6 R 1.363
(e\214le. It')-.1 F(s)-.55 E .891(probably possible to ha)72 255.6 R 1.191 -.15
(ve a s)-.2 H .891(ingle Mak).15 F .891(e\214le control the b)-.1 F .891
(uilding of both static and jump table v)-.2 F .892(ersions, b)-.15 F .892
(ut I)-.2 F(ha)72 267.6 Q -.15(ve)-.2 G(n').15 E 2.5(ta)-.18 G
(ddressed that problem yet.)108.4 267.6 Q(Mak)72 291.6 Q 3.097(eas)-.1 G .596(\
ubdirectory \(I usually call it jump\) to hold the intermediate \214les. Add a\
 v)109.194 291.6 R .596(ariable, called JUMP_DIR,)-.25 F 1.569(to your en)72
303.6 R 1.569(vironment which contains the name of the jump directory)-.4 F
4.07(.A)-.65 G 1.57(lso, if your library is spread across)370.95 303.6 R(se)72
315.6 Q -.15(ve)-.25 G .177(ral subdirectories and b).15 F .177
(uilt with recursi)-.2 F .476 -.15(ve m)-.25 H(ak).15 E .176
(es, the JUMP_DIR v)-.1 F .176(ariable must be an absolute path. If you)-.25 F
.832(are using GNU)72 327.6 R F2(make)3.332 E F1 3.332(,y)C .832
(ou can sometimes add JUMP_DIR to your top-le)172.368 327.6 R -.15(ve)-.25 G
3.333(lM).15 G(ak)398.058 327.6 Q .833(e\214le and mak)-.1 F 3.333(ew)-.1 G
.833(ill usually)477.837 327.6 R .989(automatically e)72 339.6 R .989
(xport it to the en)-.15 F .989(vironment for you. This sometimes does not w)
-.4 F .988(ork, so you should be careful)-.1 F .36(when you try this with a ne)
72 351.6 R 2.86(wl)-.25 G .36(ibrary for the \214rst time. It is al)195.65
351.6 R -.1(wa)-.1 G .36(ys much safer to set the en).1 F .36(vironment v)-.4 F
(ariables)-.25 E(in a script which then calls mak)72 363.6 Q(e.)-.1 E 1.592
(If you f)72 387.6 R 1.592(ail to set JUMP_DIR, then the current w)-.1 F 1.591
(orking directory is used to store the v)-.1 F 1.591(arious \214les that are)
-.25 F(generated, and the tools generate w)72 399.6 Q(arning messages.)-.1 E
1.012(Add another en)72 423.6 R 1.012(vironment v)-.4 F 1.012
(ariable, called JUMP_LIB, to contain the basename of your tar)-.25 F 1.012
(get library)-.18 F 3.512(.E)-.65 G 1.012(g., if)498.778 423.6 R .821
(you are b)72 435.6 R .821
(uilding libedit.a, JUMP_LIB should contain "libedit". Ag)-.2 F .82
(ain, if you are using GNU)-.05 F F2(make)3.32 E F1 3.32(,y)C .82(ou can)491.2
435.6 R .242(simply add JUMP_LIB to your top-le)72 447.6 R -.15(ve)-.25 G 2.742
(lM).15 G(ak)246.94 447.6 Q .242
(e\214le. If you are combining multiple libraries to be combined into)-.1 F 2.5
(as)72 459.6 S(ingle shared image, you must mak)82.83 459.6 Q 2.5(es)-.1 G
(ure JUMP_LIB is set indi)230.77 459.6 Q(vidually for each library)-.25 E(.)
-.65 E .497(If you are b)72 483.6 R .497
(uilding multiple libraries, or you are combining se)-.2 F -.15(ve)-.25 G .497
(ral libraries into one sharable image, you will).15 F .635(need to ha)72 495.6
R .935 -.15(ve a s)-.2 H .635
(eparate jump directory for each sharable image that you are b).15 F .636
(uilding. F)-.2 F .636(or e)-.15 F .636(xample, let us say)-.15 F .029
(that are b)72 507.6 R .028(uilding libX11, libXold and libXt and you plan to \
combine libXt and libXold into one sharable image,)-.2 F 1.221
(and you wish to generate a separate sharable image from libX11. Y)72 519.6 R
1.221(ou can create tw)-1.1 F 3.722(oj)-.1 G 1.222(ump directories, call)
434.026 519.6 R 1.328(them jump-X and jump-Xt, and then set the JUMP_DIR en)72
531.6 R 1.328(vironment v)-.4 F 1.328(ariable to point to either jump-X or)-.25
F .818(jump-Xt. Since you are putting libXold in with libXt, you set JUMP_DIR \
to point to jump-Xt while you are)72 543.6 R -.2(bu)72 555.6 S .478
(ilding libXold. In all cases, the JUMP_LIB en).2 F .478(vironment v)-.4 F .477
(ariable should be just the name of the library you)-.25 F
(are in the process of b)72 567.6 Q(uilding.)-.2 E 1.603(Modify your Mak)72
591.6 R 1.603(e\214le\(s\) so)-.1 F F2(gcc)4.103 E F1 1.603(is in)4.103 F -.2
(vo)-.4 G -.1(ke).2 G 4.103(dw).1 G 1.603(ith the)267.351 591.6 R F2
(-B/usr/dll/jump/)4.103 E F1 1.604(option. Adding a "CC = gcc)4.103 F .162
(-B/usr/dll/jump/" should be suf)72 603.6 R 2.662(\214cient. Ho)-.25 F(we)-.25
E -.15(ve)-.25 G .962 -.4(r, i).15 H 2.662(fy).4 G .162(ou are using recursi)
283.802 603.6 R .462 -.15(ve M)-.25 H(ak).15 E .162(e\214les, you')-.1 F .162
(ll need to mak)-.1 F 2.662(es)-.1 G(ure)505.63 603.6 Q 1.333(it isn')72 615.6
R 3.833(to)-.18 G -.15(ve)107.676 615.6 S 1.333(rridden by lo).15 F 1.333
(wer le)-.25 F -.15(ve)-.25 G 3.833(lM).15 G(ak)221.628 615.6 Q 1.333
(e\214les. THE TRAILING '/' IS ESSENTIAL -)-.1 F F2(gcc)3.833 E F1 1.334
(WILL NO)3.833 F 3.834(TR)-.4 G(UN)503.96 615.6 Q F2(jumpas)72 627.6 Q F1
(WITHOUT IT)2.5 E(.)-.74 E .424(If you are b)72 651.6 R .424
(uilding X libraries \(or an)-.2 F .424(ything where you use)-.15 F F2(imake)
2.924 E F1 .423(to generate a Mak)2.924 F .423(e\214le for that matter\), you)
-.1 F(can add the line:)72 663.6 Q(CCOPTIONS = -B/usr/dll/jump/)242.37 693.6 Q
(to the Imak)72 711.6 Q(e\214le. Similarily)-.1 E 2.5(,i)-.65 G 2.5(nar)186.81
711.6 S -.15(eg)204.58 711.6 S(ular Mak).15 E
(e\214le, you can add something lik)-.1 E(e:)-.1 E(DLL tools 2.12)72 768 Q EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)476.95 48 T(4)3.3 E/F1 10
/Times-Roman@0 SF(CC = gcc -B/usr/dll/jump/)255.29 84 Q(or)72 102 Q(CFLA)251.18
120 Q(GS = -B/usr/dll/jump/)-.4 E(which will do the trick. Remember to mak)72
138 Q 2.5(es)-.1 G(ure certain that this is not o)252.16 138 Q -.15(ve)-.15 G
(rridden by lo).15 E(wer le)-.25 E -.15(ve)-.25 G 2.5(lM).15 G(ak)469.51 138 Q
(e\214les.)-.1 E/F2 10/Times-Bold@0 SF
(3. Generating The DLL Descriptor Files - New Libraries)72 162 Q F1 2.049 -.8
(To b)97 177.6 T .449(uild a DLL library you need to ha).6 F .749 -.15(ve a l)
-.2 H .449(ist of the functions and v).15 F .449
(ariables that this library is going to)-.25 F -.15(ex)72 189.6 S .055
(port, and a list of the global v).15 F .055(ariables that this library import\
s from other sharable libraries. These are used to)-.25 F .396
(generate the jump table, to mak)72 201.6 R 2.897(es)-.1 G .397
(ure that global v)211.199 201.6 R .397
(ariables remain at the same address from one v)-.25 F .397(ersion to the)-.15
F(ne)72 213.6 Q .34(xt of your library)-.15 F 2.84(,a)-.65 G .339(nd to genera\
te the correct symbols and pointers that are used for dynamic linking. If you)
160.04 213.6 R .223(already ha)72 225.6 R .523 -.15(ve t)-.2 H .223
(hese \214les \(jump.v).15 F .224
(ars, jump.funcs, jump.import and jump.ignore\), then you may go on to the ne)
-.25 F(xt)-.15 E(section of this manual.)72 237.6 Q .421(If you ha)72 261.6 R
.721 -.15(ve n)-.2 H -2.15 -.25(ev e).15 H 2.921(rb).25 G .421
(uilt this library before, you can create these data \214les by simply b)
150.484 261.6 R .42(uilding your library)-.2 F 2.92(.T)-.65 G(his)506.73 261.6
Q 1.192(should create a \214le called jump.log in the directory pointed to by \
JUMP_DIR. Whene)72 273.6 R -.15(ve)-.25 G 3.692(ry).15 G 1.192(ou compile with)
451.016 273.6 R/F3 10/Courier@0 SF(-B/usr/dll/jump/)72 285.6 Q F1 6.11(,a)C
3.91 -.15(ny g)181.05 285.6 T 3.609
(lobal symbols that are not listed in the \214les jump.v).15 F 3.609
(ars, jump.funcs, or)-.25 F .805(jump.ignore will ha)72 297.6 R 1.105 -.15
(ve t)-.2 H .805(heir names written to jump.log. Since this is the \214rst com\
pile, all global symbols that).15 F
(are de\214ned in the library should appear in this \214le.)72 309.6 Q .256(Th\
ere will be one line for each symbol. The \214rst \214eld will be all zeroes. \
More on that later)72 333.6 R 2.756(.T)-.55 G .255(he second \214eld is)448.474
333.6 R .52(the symbol type: T=function, K=constant \(in te)72 345.6 R .52
(xt section\), C=common area, D=re)-.15 F .52(gular data. The third \214eld is)
-.15 F 1.376(the name of the symbol. The fourth \214eld is the library the sym\
bol belongs to. \(Do a global substitution of)72 357.6 R .34
("libxyzzy" in the fourth column to the name of your library)72 369.6 R 2.84
(.\) And)-.65 F .34(the \214fth \214eld is the module the symbol w)2.84 F(as)
-.1 E(de\214ned in.)72 381.6 Q(No)72 393.6 Q 2.5(wy)-.25 G(ou')98.69 393.6 Q
(re ready to create the symbol \214les.)-.5 E F3(cd)2.5 E F1
(to the JUMP_DIR directory and run the follo)2.5 E(wing commands:)-.25 E .4 LW
86.4 454.8 14.4 -180.0000 90.0000 DA 86.4 426 14.4 -90.0000 180.0000 DA 504 426
14.4 -0.0000 -90.0000 DA 504 454.8 14.4 90.0000 0.0000 DA 72 426 72 454.8 DL
504 411.6 86.4 411.6 DL 518.4 454.8 518.4 426 DL 86.4 469.2 504 469.2 DL 2.5
(%g)97 429.6 S(etv)112.83 429.6 Q(ars)-.25 E 2.5(%g)97 441.6 S(etfuncs)112.83
441.6 Q 2.5(%r)97 453.6 S 2.5(mj)111.16 453.6 S(ump.log)124.22 453.6 Q .809
(The programs)72 483.6 R F3(getvars)3.309 E F1(and)3.309 E F3(getfuncs)3.309 E
F1 .809(will check if the v)3.309 F .809(ariable JUMP_DIR is set and create tw)
-.25 F 3.308<6f8c>-.1 G .808(les in)496.202 483.6 R .922(the directory pointed\
 to by it. The \214le jump.funcs contains the functions to be e)72 495.6 R .923
(xported from the library and)-.15 F(jump.v)72 507.6 Q 1.098
(ars contains the v)-.25 F 1.098(ariables to be e)-.25 F 1.098
(xported from the library)-.15 F 6.097(.U)-.65 G 1.097(sing your f)350.798
507.6 R -.2(avo)-.1 G 1.097(rite editor).2 F 3.597(,d)-.4 G 1.097
(elete the lines)461.216 507.6 R .43(from jump.funcs and jump.v)72 519.6 R .43
(ars for an)-.25 F 2.93(ys)-.15 G .43(ymbols that you do NO)237.49 519.6 R
2.931(Tw)-.4 G .431(ant to e)348.861 519.6 R .431
(xport and add them to a \214le called)-.15 F(jump.ignore.)72 531.6 Q 2.679(Af)
97 547.2 S .179(ourth \214le should be created if you are b)110.229 547.2 R
.179(uilding a DLL library)-.2 F 2.679(,a)-.65 G .179
(nd this \214le is called jump.import. This)364.537 547.2 R 1.06(is a list of \
all symbols imported from other sharable libraries. The libc library does not \
import an)72 559.2 R 3.56(ys)-.15 G(ymbols)488.95 559.2 Q .735(since it is sel\
f contained. The X libraries do import symbols from libc, so when you b)72
571.2 R .734(uild the X libraries, all)-.2 F -.25(va)72 583.2 S .09(riables im\
ported from libc into the X libraries should appear in jump.import. The easies\
t w).25 F .09(ay to generate this)-.1 F .58(\214le is to simply cop)72 595.2 R
3.08(yt)-.1 G .58(he jump.v)163.98 595.2 R .58
(ars \214les from the libraries that your sharable library will be link)-.25 F
.58(ed to and put)-.1 F .422
(this information into jump.import. If your library is link)72 607.2 R .423
(ed to more than one other sharable library)-.1 F 2.923(,y)-.65 G .423
(ou should)478.807 607.2 R .66(obtain the jump.v)72 619.2 R .659
(ars \214les from *both* of these other libraries, and these should be)-.25 F
F3(cat)3.159 E F1 .659('ed together and used)B(for jump.import.)72 631.2 Q .739
(If you do not ha)72 655.2 R 1.039 -.15(ve r)-.2 H .739(eady access to the jum\
p.* \214les from the libraries that you are linking to, you can use the).15 F
(follo)72 667.2 Q 1.044(wing commands to generate the appropriate data for a j\
ump.import \214le \(in this case, assuming that you)-.25 F
(will be linking to libc and to libX11\).)72 679.2 Q(DLL tools 2.12)72 768 Q EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(5)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E .4 LW 86.4 112.8 14.4 -180.0000 90.0000 DA 86.4 98.4 14.4 -90.0000
180.0000 DA 504 98.4 14.4 -0.0000 -90.0000 DA 504 112.8 14.4 90.0000 0.0000 DA
72 98.4 72 112.8 DL 504 84 86.4 84 DL 518.4 112.8 518.4 98.4 DL 86.4 127.2 504
127.2 DL/F1 10/Times-Roman@0 SF 2.5(%n)97 102 S 2.5(m-)112.83 102 S
(-no-cplus -o /usr/lib/libc.sa | grep __GO)126.44 102 Q(T_ | sed ')-.4 E
(s/ __GO)-.55 E(T__/ _/' > jump.import)-.4 E 2.5(%n)97 114 S 2.5(m-)112.83 114
S(-no-cplus -o /usr/lib/libX11.sa | grep __GO)126.44 114 Q(T_ | sed ')-.4 E
(s/ __GO)-.55 E(T__/ _/' >> jump.import)-.4 E .42(The jump.import \214le that \
is generated by this procedure will list each symbol with a v)72 144 R .42
(ariable type of "A".)-.25 F(Do)5.42 E(not w)72 156 Q
(orry about this, it is OK.)-.1 E
(In this \214le the only important \214eld is the symbol name.)5 E(Mo)72 180 Q
.381(ving the symbols that you don')-.15 F 2.881(tw)-.18 G .381(ant to e)
224.418 180 R .381(xport to jump.ignore will pre)-.15 F -.15(ve)-.25 G .381
(nt them from sho).15 F .381(wing up ag)-.25 F .381(ain in)-.05 F 1.73
(jump.log whene)72 192 R -.15(ve)-.25 G 4.23(ry).15 G 1.73(ou recompile.)159.77
192 R -1.1(Yo)6.73 G 4.231(us)1.1 G 1.731
(hould periodically check jump.log to see if an)247.461 192 R 4.231(yu)-.15 G
1.731(naccounted for)456.969 192 R .9(symbols are detected. Sometimes to b)72
204 R .9(uild a library)-.2 F 3.4(,as)-.65 G .9
(hort program must be compiled and run to generate a)297.84 204 R .973
(header \214le of some kind or another)72 216 R 3.473(.I)-.55 G 3.473(ft)
226.561 216 S .974(his program is compiled with)236.144 216 R/F2 10/Courier@0
SF(-B/usr/dll/jump/)3.474 E F1 .974(then all of the)3.474 F 1.419
(global symbols from this program will sho)72 228 R 3.919(wu)-.25 G 3.919(pi)
266.963 228 S 3.919(nj)278.662 228 S 1.419
(ump.log, and you should place all of these symbols in)290.361 228 R
(jump.ignore.)72 240 Q/F3 10/Times-Bold@0 SF
(4. Generating The DLL Descriptor Files - Old Libraries)72 264 Q F1 .72
(Let us say that you ha)97 279.6 R 1.02 -.15(ve p)-.2 H(re).15 E .72
(viously generated a DLL library and you ha)-.25 F 1.02 -.15(ve a n)-.2 H 1.22
-.25(ew v).15 H .72(ersion of the source).1 F 1.009
(code. This section describes ho)72 291.6 R 3.508(wt)-.25 G 3.508(og)213.994
291.6 S 1.008(enerate a binary compatible v)227.502 291.6 R 1.008
(ersion of the library with the ne)-.15 F 3.508(ws)-.25 G(ource)496.19 291.6 Q
(code.)72 303.6 Q -1.1(Yo)72 319.2 S 3.967(us)1.1 G 1.467
(tart in much the same w)95.977 319.2 R 1.467
(ay as when generating a DLL the \214rst time through. Ho)-.1 F(we)-.25 E -.15
(ve)-.25 G 3.968(rt).15 G 1.468(here are tw)466.144 319.2 R(o)-.1 E(scenarios.)
72 331.2 Q/F4 15/Times-Roman@0 SF<83>72 346.8 Q F0 -.92(Yo)97 346.8 S 2.5(uh)
.92 G(ave access to jump.ignor)119.14 346.8 Q 2.5(ea)-.37 G
(nd jump.funcs \214les.)230.14 346.8 Q F1 .428(If you ha)86.4 358.8 R .728 -.15
(ve t)-.2 H .427(he jump.funcs and jump.ignore already set up from a pre).15 F
.427(vious b)-.25 F .427(uild, then when you mak)-.2 F 2.927(et)-.1 G(he)508.96
358.8 Q .868(library the \214le jump.log will contain an)86.4 370.8 R 3.369(yn)
-.15 G 1.369 -.25(ew g)261.769 370.8 T .869(lobal v).25 F .869
(ariables and functions that ha)-.25 F 1.169 -.15(ve a)-.2 H .869
(ppeared since the).15 F(pre)86.4 382.8 Q .759(vious v)-.25 F .759(ersion. Y)
-.15 F .759(ou should di)-1.1 F .759(vide up the symbols as before, b)-.25 F
.759(ut the)-.2 F 3.259(ys)-.15 G .759(hould be added to the end of the)384.498
382.8 R -.15(ex)86.4 394.8 S .311(isting jump.funcs and jump.v).15 F .311
(ars. If you change the order of an)-.25 F 2.811(yo)-.15 G 2.811(ft)360.891
394.8 S .311(he old entries you will not be able to)369.812 394.8 R .728
(generate a ne)86.4 406.8 R 3.228(wb)-.25 G .728(inary compatible v)155.804
406.8 R .728(ersion. If you need to remo)-.15 F 1.027 -.15(ve a s)-.15 H .727
(ymbol from jump.funcs or jump.v).15 F(ars)-.25 E .03
(\(because that symbol is no longer pro)86.4 418.8 R .031
(vided by the library\) you should be careful because this will mean that)-.15
F 2.679(old programs that used these symbols will not be binary compatible. Y)
86.4 430.8 R 2.678(ou can add entries with the)-1.1 F -.25(va)86.4 442.8 S
1.325(riable/function name __DUMMY__ to hold the place if you do remo).25 F
1.626 -.15(ve a f)-.15 H 1.326(unction or a v).15 F 1.326(ariable from)-.25 F
(jump.v)86.4 454.8 Q .213(ars or jump.funcs.)-.25 F .212(If you ha)5.212 F .512
-.15(ve a)-.2 H 2.712(ne).15 G .212
(mpty slot in jump.funcs you need to \214ll, you can also add entries)256.976
454.8 R .555(with a data type of 'U' to reserv)86.4 466.8 R 3.055(eas)-.15 G
.555
(pot in the jump table - this will insert a call to a special function that)
237.035 466.8 R(will print an error message and then call e)86.4 478.8 Q
(xit\(\).)-.15 E F4<83>72 494.4 Q F0(Attempt to b)97 494.4 Q
(uild a compatable DLL libr)-.2 E(ary without any jump.* \214les.)-.15 E F1
.889(It is possible if you ha)86.4 506.4 R 1.189 -.15(ve t)-.2 H .889
(he stub of an old DLL library and ha).15 F 1.188 -.15(ve o)-.2 H .888
(btained ne).15 F 3.388(ws)-.25 G .888(ources to the library)422.458 506.4 R
3.388(,t)-.65 G(o)513.4 506.4 Q -.2(bu)86.4 518.4 S 1.042
(ild a compatable drop in for the library without an).2 F 3.542(yk)-.15 G(no)
319.22 518.4 Q 1.042(wledge of the jump.* \214les. The process is the)-.25 F
.501(same as the one described abo)86.4 530.4 R -.15(ve)-.15 G 3.001(,b).15 G
.5
(ut the stub and the jump.log \214le produced from a \214rst pass compile are)
229.146 530.4 R(compared for ne)86.4 542.4 Q 2.5(wa)-.25 G(nd/or lost v)165.84
542.4 Q(ariables and functions.)-.25 E(See)5 E F0(Appendix A6)2.5 E F1
(for an e)2.5 E(xample.)-.15 E F3(5. Compiling The Library - 2nd P)72 566.4 Q
(ass)-.1 E F2(cd)97 582 Q F1 .118(back to your main directory and reb)2.618 F
.118(uild your library \(i.e.)-.2 F .118(recompile e)5.118 F -.15(ve)-.25 G
.118(rything\). Y).15 F .119(ou may need to do)-1.1 F(a)72 594 Q F2 .206
(make clean)2.706 F F1 .206(or something lik)2.706 F 2.706(ei)-.1 G 2.706(tt)
217.856 594 S 2.706(oa)226.122 594 S .205
(ccomplish this. The JUMP_DIR directory should no)238.268 594 R 2.705(wc)-.25 G
.205(ontain se)462.775 594 R -.15(ve)-.25 G(ral).15 E .742(\(maybe man)72 606 R
3.243(ym)-.15 G .743(ore\) ne)138.325 606 R 3.243<778c>-.25 G .743
(les. These ne)182.881 606 R 3.243<778c>-.25 G .743
(les contain the source that w)252.07 606 R .743(as di)-.1 F -.15(ve)-.25 G
.743(rted from the normal compile).15 F(path.)72 618 Q 1.56(These ne)97 633.6 R
4.06<778c>-.25 G 1.56(les are of the form _GV)150.97 633.6 R 1.56
(AR_nnnnn.s and _GCMN_nnnnn.s. These contain the assembly)-1.35 F .191
(code required to de\214ne all of the global v)72 645.6 R .192
(ariables that you are e)-.25 F .192(xporting from this library)-.15 F 2.692
(.\()-.65 G .192(See the appendix on)437.004 645.6 R F2(jumpas)72 657.6 Q F1
1.06(for more details about wh)3.56 F 3.56(yt)-.05 G 1.06
(hese \214les are created and what the)229.85 657.6 R 3.559(yc)-.15 G 1.059
(ontain\). If you are not using the)385.676 657.6 R(LONG_FILEN)72 669.6 Q 1.29
(AMES option, it is especially important that you not change the order of an)
-.35 F 3.791(yo)-.15 G 3.791(ft)464.807 669.6 S 1.291(he lines in)474.708 669.6
R(jump.v)72 681.6 Q .63(ars after you ha)-.25 F .93 -.15(ve b)-.2 H -.15(eg).15
G .63(un to compile the library).15 F 5.63(.I)-.65 G 3.13(fy)302.34 681.6 S
.629(ou must change the order of the entries in this \214le)313.8 681.6 R .012
(\(and you are not using LONG_FILEN)72 693.6 R .013(AMES\), you may ha)-.35 F
.313 -.15(ve t)-.2 H 2.513(or).15 G .013
(ecompile the library before you will be able to)332.776 693.6 R(succesfully b)
72 705.6 Q(uild the sharable image.)-.2 E(DLL tools 2.12)72 768 Q EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)476.95 48 T(6)3.3 E/F1 10
/Times-Roman@0 SF .845(The ne)97 84 R .845(xt step is to determine ho)-.15 F
3.345(wm)-.25 G .844(uch space to allocate for each global v)248.335 84 R .844
(ariable. The general idea is)-.25 F .267
(that we need to alter the \214rst \214eld for each entry in jump.v)72 96 R
.268(ars to correspond to the amount of space we wish to)-.25 F(reserv)72 108 Q
4.238(ef)-.15 G 1.738(or that v)108.288 108 R 1.738(ariable. It w)-.25 F 1.737
(ould be rather tedious to do this by hand, so the)-.1 F/F2 10/Courier@0 SF
(getsize)4.237 E F1 1.737(utility has been)4.237 F(pro)72 120 Q 1.6
(vided to automate this procedure. T)-.15 F 4.1(or)-.8 G(un)247.01 120 Q F2
(getsize)4.101 E F1(,)A F2(cd)4.101 E F1 1.601
(to the directory pointed to by the JUMP_DIR)4.101 F(en)72 132 Q(vironment v)
-.4 E(ariable, and use the command:)-.25 E .4 LW 86.4 164.4 14.4 -180.0000
90.0000 DA 86.4 164.4 14.4 -90.0000 180.0000 DA 504 164.4 14.4 -0.0000 -90.0000
DA 504 164.4 14.4 90.0000 0.0000 DA 72 164.4 72 164.4 DL 504 150 86.4 150 DL
518.4 164.4 518.4 164.4 DL 86.4 178.8 504 178.8 DL 2.5(%g)97 168 S
(etsize > jump.v)112.83 168 Q(ars-ne)-.25 E(w)-.25 E F2(getsize)97 201.6 Q F1
.251(will essentially read all of the data \214les, and generate a ne)2.752 F
2.751(wc)-.25 G(op)389.735 201.6 Q 2.751(yo)-.1 G 2.751(fj)412.386 201.6 S
(ump.v)421.247 201.6 Q .251(ars where the \214rst)-.25 F
(\214eld has been \214lled in with the actual size of all of the v)72 213.6 Q
(ariables.)-.25 E 1.166
(In principle this can be used as a replacement for jump.v)72 237.6 R 1.167
(ars. Ho)-.25 F(we)-.25 E -.15(ve)-.25 G 1.967 -.4(r, y).15 H 1.167
(ou should add e).4 F 1.167(xtra space to some)-.15 F -.25(va)72 249.6 S .463
(riables to allo).25 F 2.963(wf)-.25 G .463(or future e)149.819 249.6 R .462
(xpansion. This is especially critical for v)-.15 F .462
(ariables that are structures - it w)-.25 F .462(ould be)-.1 F .04
(pointless to pad v)72 261.6 R .04(ariables that are simple inte)-.25 F .04
(gers. In general, it is a good idea to mak)-.15 F 2.54(es)-.1 G .04
(ure that each v)423.52 261.6 R .04(ariable is)-.25 F
(allocated a multiple of 4 bytes for storage - this tends to impro)72 273.6 Q
.3 -.15(ve p)-.15 H(erformance.).15 E .993(The main adv)72 297.6 R .993
(antage of the)-.25 F F2(getsize)3.493 E F1 .993(utility is that it sho)3.493 F
.993(ws you ho)-.25 F 3.493(wl)-.25 G(ar)366.429 297.6 Q .993(ge the v)-.18 F
.992(ariables already are \(which)-.25 F 1.015
(comes in handy if there are some lar)72 309.6 R 1.016
(ge structs lying around, and you are not too swift with he)-.18 F 3.516(xa)
-.15 G(rithmetic\).)476.46 309.6 Q F2(getsize)72 321.6 Q F1 .679(also w)3.179 F
.679(arns you if a v)-.1 F .679(ariable has gro)-.25 F .679
(wn to a point where it is lar)-.25 F .679
(ger than the allocation speci\214ed in)-.18 F(jump.v)72 333.6 Q .281
(ars which could happen when you upgrade to a ne)-.25 F 2.781(wv)-.25 G .281
(ersion of a library)317.17 333.6 R 2.781(.T)-.65 G(ypically)399.324 333.6 Q
2.781(,y)-.65 G .282(ou could start from)441.175 333.6 R .338
(this output and add space for those v)72 345.6 R .337
(ariables that need it. Note that)-.25 F F2(getsize)2.837 E F1(sho)2.837 E .337
(ws the actual allocation, and)-.25 F(does not re\215ect an)72 357.6 Q 2.5(yp)
-.15 G(adding that is already speci\214ed in jump.v)157.39 357.6 Q(ars.)-.25 E
/F3 10/Times-Bold@0 SF(6. Building Stub Library And Image)72 381.6 Q F1 .316
(OK, no)97 397.2 R 2.816(wy)-.25 G .317(ou are nearly done. If e)141.542 397.2
R -.15(ve)-.25 G .317(rything has w).15 F(ork)-.1 E .317(ed correctly)-.1 F
2.817(,y)-.65 G .317(ou just need to do a fe)370.574 397.2 R 2.817(wm)-.25 G
.317(ore things)478.363 397.2 R(before you will be done.)72 409.2 Q(No)72 424.8
Q 2.5(wc)-.25 G(hoose v)98.13 424.8 Q(alues for the follo)-.25 E 268.43 427.3
72 427.3 DL(wing parameters:)199.28 424.8 Q/F4 15/ZapfDingbats SF(+)72 452.4 Q
F1 .18(Load address: the location where the shared image will be loaded into e\
ach process' address space. It must)2.681 F 1.107
(be >= 0x60000000 and be on a page boundary)72 464.4 R 3.607(.A)-.65 G 1.107
(lso the end of the image must be < 0xc0000000 \(the user)279.223 464.4 R .745
(stack starts at address 0xbf)72 476.4 R 1.245 -.25(ffffff a)-.25 H .745
(nd gro).25 F .745(ws do)-.25 F(wnw)-.25 E .745(ard\) and the image must not o)
-.1 F -.15(ve)-.15 G .744(rlap with an).15 F 3.244(yo)-.15 G .744(ther shared)
473.506 476.4 R .466(images that might be used by the same process. Currently \
part of this range is reserv)72 488.4 R .467(ed for other libraries \(see)-.15
F F2 .787(Table 1)72 500.4 R F1(belo)3.287 E .787
(w\). If you are going to distrib)-.25 F .787(ute a library)-.2 F 3.287(,i)-.65
G 3.287(tw)315.417 500.4 S .787(ould be a v)328.604 500.4 R .786
(ery wise idea to re)-.15 F .786(gister the virtual)-.15 F .098(address space \
so that no-one else uses it for something else. The load address is speci\214e\
d with the)72 512.4 R F2(-a)2.598 E F1 .098(switch to)2.598 F F2(mkimage)72
524.4 Q F1(and)2.5 E F2(mkstubs)2.5 E F1(.)A F4(+)72 548.4 Q F1 1.906
(Starting address for the data se)4.406 F 1.906
(gment: If not speci\214ed, the global v)-.15 F 1.906
(ariables will be stored in the te)-.25 F(xt)-.15 E(se)72 560.4 Q .833(gment a\
fter the jump table \(this does not create problems because code pages for sha\
rable libraries are not)-.15 F(mark)72 572.4 Q 1.637(ed read-only\). If this i\
s speci\214ed, you can specify the actual starting address where the data se)
-.1 F(gment)-.15 E 2.277(should start. I added this switch mainly because I w)
72 584.4 R 2.277(anted to generate a v)-.1 F 2.278(ersion of libc that w)-.15 F
2.278(as binary)-.1 F 1.658(compatible with the e)72 596.4 R 1.658
(xisting libc, and this seemed lik)-.15 F 4.158(et)-.1 G 1.658(he best w)
309.442 596.4 R 1.658(ay of doing it. Unless you are trying to)-.1 F 1.001
(maintain binary compatibility with an older library)72 608.4 R 3.502(,i)-.65 G
3.502(tm)289.458 608.4 S 1.002(ight be best to a)303.52 608.4 R -.2(vo)-.2 G
1.002(id this switch. The address of the).2 F(data se)72 620.4 Q
(gment is speci\214ed by the)-.15 E F2(-d)2.5 E F1(switch to)2.5 E F2(mkimage)
2.5 E F1(and)2.5 E F2(mkstubs)2.5 E F1(.)A F4(+)72 644.4 Q F1 .677(Image name:\
 the name of shared image \214le \(the one that goes in /lib\). Don')3.177 F
3.177(tf)-.18 G(or)408.627 644.4 Q .677(get to lea)-.18 F .977 -.15(ve r)-.2 H
.676(oom for the).15 F 1.247
(".so.X.Y" part. That means you only get 7 characters to w)72 656.4 R 1.248
(ork with because of the 14 character limit in the)-.1 F
(Minix \214lesystem. The image name is speci\214ed by the)72 668.4 Q F2(-l)2.5
E F1(switch to)2.5 E F2(mkimage)2.5 E F1(and)2.5 E F2(mkstubs)2.5 E F1(.)A F4
(+)72 692.4 Q F1 1.471(Image v)3.971 F 1.471(ersion: the v)-.15 F 1.471
(ersion number for the shared image.)-.15 F 1.471(It must be tw)6.471 F 3.971
(od)-.1 G 1.47(ecimal numbers, major and)405.119 692.4 R(minor)72 704.4 Q 2.862
(,s)-.4 G .362(eparated by a period. This can be follo)104.742 704.4 R .362
(wed by an optional patchle)-.25 F -.15(ve)-.25 G 2.863(lw).15 G .363
(hich can be from 0 to 99. V)391.989 704.4 R(alid)-1.11 E -.15(ve)72 716.4 S
1.519(rsion numbers look lik).15 F 1.518(e: 4.3, 4.3.1, 3.0, 3.0.3, etc. The v)
-.1 F 1.518(ersion number is speci\214ed by the)-.15 F F2(-v)4.018 E F1 1.518
(switch to)4.018 F F2(mkimage)72 728.4 Q F1(and)2.5 E F2(mkstubs)2.5 E F1(.)A
(DLL tools 2.12)72 768 Q EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(7)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E .4 LW 490.7 82.5 99.7 82.5 DL 488.7 84.5 101.7 84.5 DL/F1 10
/Times-Bold@0 SF 58.335(Library Start)144.755 94 R(Addr)2.5 E 27.665(.S)-1 G
(top Addr)321.145 94 Q 48.72(.M)-1 G(aintainer)419.975 94 Q 488.7 98.5 101.7
98.5 DL 488.7 100.5 101.7 100.5 DL 488.7 102.5 101.7 102.5 DL/F2 10/Courier@0
SF 81(libc.so 0x60000000)104.7 112 R 9(0x601fffff Hongjiu)308.7 112 R(Lu)6 E
488.7 116.5 101.7 116.5 DL 69(libX11.so 0x60200000)104.7 126 R 9
(0x6029ffff Orest)308.7 126 R(Zborowski)6 E 75(libXt.so 0x602a0000)104.7 138 R
9(0x602fffff Orest)308.7 138 R(Zborowski)6 E 488.7 142.5 101.7 142.5 DL 69
(libXaw.so 0x60300000)104.7 152 R 9(0x603fffff Orest)308.7 152 R(Zorbowski)6 E
488.7 156.5 101.7 156.5 DL 75(librl.so 0x60400000)104.7 166 R 9(0x604fffff Rob)
308.7 166 R(Hooft)6 E 75(libgr.so 0x60500000)104.7 178 R 9(0x605fffff Rob)308.7
178 R(Hooft)6 E 69(libf2c.so 0x60600000)104.7 190 R 9(0x606fffff Rob)308.7 190
R(Hooft)6 E 488.7 194.5 101.7 194.5 DL 69(libXpm.so 0x60700000)104.7 204 R 9
(0x607fffff Mitchum)308.7 204 R(DSouza)6 E 488.7 208.5 101.7 208.5 DL 69
(libnsl.so 0x60800000)104.7 218 R 9(0x608fffff Peter)308.7 218 R(Eriksson)6 E
488.7 222.5 101.7 222.5 DL 63(libolgx.so 0x60880000)104.7 232 R 9
(0x608affff Kenneth)308.7 232 R(Osterberg)6 E 57(libxview.so 0x608b0000)104.7
244 R 9(0x609bffff Kenneth)308.7 244 R(Osterberg)6 E 57(libsspkg.so 0x609c0000)
104.7 256 R 9(0x609fffff Kenneth)308.7 256 R(Osterberg)6 E 69
(libUIT.so 0x60a00000)104.7 268 R 9(0x60afffff Kenneth)308.7 268 R(Osterberg)6
E 488.7 272.5 101.7 272.5 DL 69(libPEX.so 0x60b00000)104.7 282 R 9
(0x60bfffff Orest)308.7 282 R(Zorbowski)6 E 488.7 286.5 101.7 286.5 DL 69
(libtcl.so 0x60c00000)104.7 296 R 9(0x60cfffff Jay)308.7 296 R(Carlson)6 E 75
(libtk.so 0x60d00000)104.7 308 R 9(0x60dfffff Jay)308.7 308 R(Carlson)6 E 488.7
312.5 101.7 312.5 DL 75(libWc.so 0x60e00000)104.7 322 R 9(0x60efffff Niku)308.7
322 R(Kaitaniemi)6 E 75(libXp.so 0x60e00000)104.7 334 R 9(0x60efffff Niku)308.7
334 R(Kaitaniemi)6 E 488.7 338.5 101.7 338.5 DL 75(libIV.so 0x61000000)104.7
348 R 9(0x613fffff Peter)308.7 348 R(MacDonald)6 E 45(libUnidraw.so 0x61400000)
104.7 360 R 9(0x617fffff Peter)308.7 360 R(MacDonald)6 E 488.7 364.5 101.7
364.5 DL 75(libXm.so 0x62000000)104.7 374 R 9(0x621fffff Metro)308.7 374 R
(Link, Inc.)6 E 488.7 378.5 101.7 378.5 DL 63(libsrgp.so 0x62200000)104.7 388 R
9(0x62214fff Rob)308.7 388 R(Kooper)6 E 63(libsuit.so 0x62215000)104.7 400 R 9
(0x622fffff Rob)308.7 400 R(Kooper)6 E 488.7 404.5 101.7 404.5 DL 75
(libOI.so 0x62300000)104.7 414 R 9(0x629fffff Warner)308.7 414 R(Losh)6 E 69
(libOIrg.a 0x62300000)104.7 426 R 9(0x629fffff Warner)308.7 426 R(Losh)6 E
488.7 430.5 101.7 430.5 DL 75(libld.so 0x62a00000)104.7 440 R 9
(0x62ffffff David)308.7 440 R(Engel)6 E 488.7 444.5 101.7 444.5 DL 63
(libarma.so 0x63000000)104.7 454 R 9(0x631fffff Richard)308.7 454 R(Gooch)6 E
39(libkarmaX11.so 0x63200000)104.7 466 R 9(0x6323ffff Richard)308.7 466 R
(Gooch)6 E 45(libkarmaXt.so 0x63240000)104.7 478 R 9(0x6325ffff Richard)308.7
478 R(Gooch)6 E 9(libkarmagraphics.so 0x63260000 0x632dffff Richard)104.7 490 R
(Gooch)6 E 15(libkarmawidgets.so 0x632e0000)104.7 502 R 9(0x6335ffff Richard)
308.7 502 R(Gooch)6 E 27(libkarmaxview.so 0x63360000)104.7 514 R 9
(0x6337ffff Richard)308.7 514 R(Gooch)6 E 488.7 518.5 101.7 518.5 DL 57
(libwxwin.so 0x63400000)104.7 528 R 9(0x634fffff Andreas)308.7 528 R(Mengel)6 E
488.7 532.5 101.7 532.5 DL 51(libandrew.so 0x63500000)104.7 542 R 9
(0x637fffff Michael)308.7 542 R(Oreilly)6 E 488.7 546.5 101.7 546.5 DL 69
(libUil.so 0x63800000)104.7 556 R 9(0x638fffff Harald)308.7 556 R(Koenig)6 E 69
(libUil.so 0x63900000)104.7 568 R 9(0x639fffff Harald)308.7 568 R(Koenig)6 E
488.7 572.5 101.7 572.5 DL 87(libBLT 0x63a00000)104.7 582 R 9(0x63a3ffff David)
308.7 582 R(Engel)6 E 488.7 586.5 101.7 586.5 DL 87(libvga 0x63b00000)104.7 596
R 9(0x63bfffff Harm)308.7 596 R(Hanemaaijer)6 E 488.7 600.5 101.7 600.5 DL 93
(libmh 0x63c00000)104.7 610 R 9(0x63cfffff Brandon)308.7 610 R(Allbery)6 E
488.7 614.5 101.7 614.5 DL 75(libisode 0x63d00000)104.7 624 R 9
(0x641fffff Mike)308.7 624 R(Jagdis)6 E 488.7 628.5 101.7 628.5 DL 69
(libkhoros 0x64200000)104.7 638 R 9(0x647fffff Wolfram)308.7 638 R(Gloger)6 E
488.7 642.5 101.7 642.5 DL 81(libitcl 0x6a340000)104.7 652 R 9
(0x6a37ffff David)308.7 652 R(Engel)6 E 488.7 656.5 101.7 656.5 DL 376.2 84.5
376.2 656.5 DL 301.2 84.5 301.2 656.5 DL 226.2 84.5 226.2 656.5 DL 488.7 84.5
488.7 656.5 DL 101.7 84.5 101.7 656.5 DL 490.7 658.5 99.7 658.5 DL 99.7 82.5
99.7 658.5 DL 490.7 82.5 490.7 658.5 DL F1 -.92(Ta)279.685 672 S(ble 1).92 E/F3
15/ZapfDingbats SF(+)72 696 Q/F4 10/Times-Roman@0 SF .437
(Jump table size: the amount of room to reserv)2.936 F 2.937(ef)-.15 G .437
(or the jump table. It must be > 0 and be a multiple of the)286.382 696 R .487
(page size. Mak)72 708 R 2.987(es)-.1 G .487(ure to lea)144.451 708 R .787 -.15
(ve e)-.2 H .486(nough room for future gro).15 F .486
(wth \(each jump table entry tak)-.25 F .486(es 8 bytes\). The jump)-.1 F
(table size is speci\214ed by the)72 720 Q/F5 10/Courier@0 SF(-j)2.5 E F4
(switch to)2.5 E F5(mkimage)2.5 E F4(and)2.5 E F5(mkstubs)2.5 E F4(.)A
(DLL tools 2.12)72 768 Q EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)476.95 48 T(8)3.3 E/F1 15
/ZapfDingbats SF(+)72 84 Q/F2 10/Times-Roman@0 SF .574
(The size of the Global Of)3.074 F .574(fset T)-.25 F .574(able \(or GO)-.8 F
.574(T\): This is only used when b)-.4 F .575
(uilding a DLL, and is used in the)-.2 F 1.213
(dynamic linking libraries. It must be used if you w)72 96 R 1.213
(ant your library to be dynamicaly linkable - an ordinary)-.1 F .056
(jump-table library will be generated if you f)72 108 R .056
(ail to supply this parameter)-.1 F 2.557(.T)-.55 G .057(he size of the GO)
367.814 108 R 2.557(Ti)-.4 G 2.557(ss)449.069 108 S .057(peci\214ed by the)
459.406 108 R/F3 10/Courier@0 SF(-g)72 120 Q F2(switch to)2.5 E F3(mkimage)2.5
E F2(and)2.5 E F3(mkstubs)2.5 E F2(.)A -1.1(Yo)97 147.6 S(u')1.1 E .084(re no)
-.5 F 2.584(wr)-.25 G .084(eady to b)149.188 147.6 R .084
(uild the shared image and stub libraries. The parameters listed abo)-.2 F .383
-.15(ve c)-.15 H .083(orrespond to).15 F(the)72 159.6 Q F3(-a -d -l -v -j)2.5 E
F2(and)2.5 E F3(-g)2.5 E F2(switches for the)2.5 E F3(mkimage)2.5 E F2(and)2.5
E F3(mkstubs)2.5 E F2(programs.)2.5 E 1.831(Once you ha)72 183.6 R 2.131 -.15
(ve s)-.2 H 1.831(elected v).15 F 1.831(alues for the abo)-.25 F 2.131 -.15
(ve p)-.15 H 1.831(arameters, you are ready to run).15 F F3(mkimage)4.332 E F2
4.332(.T)C 1.832(he remaining)464.078 183.6 R .514(parameters for)72 195.6 R F3
(mkimage)3.014 E F2 .514(are the object \214les to be link)3.014 F .514
(ed together)-.1 F 3.014(,a)-.4 G 3.014(sw)349.654 195.6 S .514(ell as an)
363.778 195.6 R 3.014(yo)-.15 G .514(ther link)410.44 195.6 R .513(er directi)
-.1 F -.15(ve)-.25 G 3.013(s\().15 G(such)500.07 195.6 Q 1.082
(as -ltermcap and -lc\) required to link the image. Note: you should be)72
207.6 R 1.082(gin the object \214le list with)-.15 F F3(--)3.582 E F2 1.082
(to k)3.582 F(eep)-.1 E F3(getopt)72 219.6 Q F2(\(used by)2.5 E F3(mkimage)2.5
E F2 2.5(\)f)C(rom rearranging the parameters.)198.32 219.6 Q(The)72 243.6 Q F3
(mkimage)2.509 E F2(and)2.509 E F3(mkstubs)2.509 E F2 .009
(programs must be passed the same options for them to w)2.509 F .009
(ork correctly)-.1 F 2.509(.T)-.65 G .008(here is a)485.064 243.6 R 2.153(\214\
le jump.params which contains the parameters used the last time around, and bo\
th programs check the)72 255.6 R 2.089(parameters passed on the command line w\
ith the parameters in the \214le. If there are an)72 267.6 R 4.589(yd)-.15 G
(if)459.921 267.6 Q 2.089(ferences, the)-.25 F .785
(programs print a message and die. The)72 279.6 R F3(-f)3.285 E F2 .785
(switch forces the tools to accept the ne)3.285 F 3.286(wp)-.25 G .786
(arameters as the "true")425.412 279.6 R -.25(va)72 291.6 S .233(lues, and the\
se are written back to the \214le. This is useful if you decide to change v).25
F .232(ersion numbers on/or start)-.15 F(addresses of the data se)72 303.6 Q
(gment.)-.15 E 2.405(The remaining parameters for)72 327.6 R F3(mkstubs)4.905 E
F2 2.405(are the names of all the stub libraries to create. Eg. to create)4.905
F 1.168(libedit.sa, you should use libedit. Currently)72 339.6 R 3.668(,t)-.65
G 1.168(he symbols are grouped together the same w)258.918 339.6 R 1.167
(ay the)-.1 F 3.667(ya)-.15 G 1.167(re in the)483.296 339.6 R .842
(static libs. Y)72 351.6 R .842(ou should al)-1.1 F -.1(wa)-.1 G .842(ys run).1
F F3(mkimage)3.342 E F2 .842(before you run)3.342 F F3(mkstubs)3.342 E F2 .843
(for reasons that are about to become)3.342 F(clear)72 363.6 Q 7.03(.Y)-.55 G
2.03(ou may also specify other options to)106.53 363.6 R F3(ld)4.53 E F2 2.029
(after the)4.53 F F3(--)4.529 E F2 2.029
(switch, such as path names to X libraries)4.529 F(\(-L/usr/X386/lib\) etc.)72
375.6 Q .559(There is one further wrinkle that you need to be a)72 399.6 R -.1
(wa)-.15 G .56(re of. If you link your sharable library to libc, and a user).1
F .021(links their program to your library)72 411.6 R 2.521(,i)-.65 G 2.521(ti)
216.186 411.6 S 2.521(sp)224.267 411.6 S .021
(ossible \(especially if the program is quite simple\), that there will be no)
235.678 411.6 R -.15(ex)72 423.6 S .186(plicit need for libc in your program a\
nd thus it is theoretically possible that the user').15 F 2.687(sp)-.55 G .187
(rogram will need libc)432.019 423.6 R 1.81
(\(due to your sharable library\), b)72 435.6 R 1.81(ut it will not ha)-.2 F
2.11 -.15(ve i)-.2 H 1.81(nstructions to e).15 F 1.81
(xplicitly load libc. These concerns are)-.15 F 1.303
(addressed by a form of handshaking between)72 447.6 R F3(mkimage)3.804 E F2
(and)3.804 E F3(mkstubs)3.804 E F2(-)3.804 E F3(mkimage)3.804 E F2 1.304
(determines what other)3.804 F .491
(sharable libraries must be loaded for your library to w)72 459.6 R 2.991
(ork. This)-.1 F .49(list is printed out by)2.99 F F3(mkimage)2.99 E F2 2.99
(,a)C .49(nd it is also)471.09 459.6 R 1.288
(stored in the \214le jump.undefs which is read by)72 471.6 R F3(mkstubs)3.788
E F2(whene)3.788 E -.15(ve)-.25 G 3.788(ri).15 G 3.788(ti)362.178 471.6 S 3.788
(sr)371.526 471.6 S(un.)382.534 471.6 Q F3(mkstubs)3.788 E F2 1.289
(will automatically)3.789 F .643(insert the appropriate symbol references in t\
he stub libraries to force the link)72 483.6 R .642
(er to add the instructions to load)-.1 F
(all of the sharable libraries that are required by your library)72 495.6 Q
.626(There is a hack \(for lack of a better w)72 519.6 R .627(ord\) that allo)
-.1 F .627(ws you to o)-.25 F -.15(ve)-.15 G .627(rride the e).15 F .627
(xternal dependencies on a case by)-.15 F(case basis.)72 531.6 Q
(Basically you specify something lik)5 E(e:)-.1 E .4 LW 86.4 576 14.4 -180.0000
90.0000 DA 86.4 576 14.4 -90.0000 180.0000 DA 504 576 14.4 -0.0000 -90.0000 DA
504 576 14.4 90.0000 0.0000 DA 72 576 72 576 DL 504 561.6 86.4 561.6 DL 518.4
576 518.4 576 DL 86.4 590.4 504 590.4 DL(00000080 K _v)97 579.6 Q 12.5
(ersion_string libedit)-.15 F -.15(ve)271.85 579.6 S 43.36
(rsion libbar_4:libc_4).15 F .13(In this e)72 621.6 R .13(xample, it will o)
-.15 F -.15(ve)-.15 G .13(rride the e).15 F .129
(xternal dependencies for the \214le v)-.15 F .129
(ersion.o in libedit, and instead substitute)-.15 F 2.815
(an unde\214ned reference that will ef)72 633.6 R(fecti)-.25 E -.15(ve)-.25 G
2.815(ly force the libraries libbar).15 F 2.816(.so.4 and libc.so.4 to be link)
-.55 F 2.816(ed in.)-.1 F 1.696(Generally you will not need to mak)72 645.6 R
4.195(eu)-.1 G 1.695(se of this feature, b)237.36 645.6 R 1.695
(ut there are special cases e)-.2 F -.15(ve)-.25 G 1.695(ry so often where).15
F(indi)72 657.6 Q 1.115(vidual object \214les within a particular shared libra\
ry are basically self contained and may not require the)-.25 F .939
(other shared libraries that w)72 669.6 R .939(ould otherwise be required.)-.1
F .938(The point of ha)5.938 F .938(ving this \215e)-.2 F .938
(xibility is that it may be)-.15 F(easier to add something at this le)72 681.6
Q -.15(ve)-.25 G 2.5(lr).15 G(ather than be forced to mak)220.75 681.6 Q 2.5
(ec)-.1 G(ustom patches to a Mak)341.72 681.6 Q(e\214le some)-.1 E(where.)-.25
E .117(There is one further switch to)72 705.6 R F3(mkstubs)2.617 E F2 2.617
(-t)2.617 G(he)246.576 705.6 Q F3(-u)2.617 E F2 .117
(switch can be used to force e)2.617 F .117(xtra, unde\214ned symbols into the)
-.15 F 2.519(stub libraries. In general this is no longer required since the l\
oading of other sharable libraries is no)72 717.6 R(w)-.25 E(automatic, b)72
729.6 Q(ut the switch is still there in case you \214nd a need for it.)-.2 E
(DLL tools 2.12)72 768 Q EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(9)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF(An e)72 84 Q(xample of proper usage w)-.15 E
(ould be)-.1 E .4 LW 86.4 174 14.4 -180.0000 90.0000 DA 86.4 116.4 14.4
-90.0000 180.0000 DA 504 116.4 14.4 -0.0000 -90.0000 DA 504 174 14.4 90.0000
0.0000 DA 72 116.4 72 174 DL 504 102 86.4 102 DL 518.4 174 518.4 116.4 DL 86.4
188.4 504 188.4 DL 2.5(%m)97 120 S
(kstubs -l /lib/libc -v 4.3 -a 0x60000000 -d 0x60090000 -g 4096 -j 0x4000 \\)
115.61 120 Q(-- libc libcurses libgcc libtermcap libdbm libgmon)122 132 Q 2.5
(%m)97 156 S(kimage -l /lib/libc -v 4.3 -a 0x60000000 -d 0x60090000 -j 0x4000)
115.61 156 Q(-g 4096 \\)5 E
(-- compat/libcompat.a libtermcap.a libdbm.a libcurses.a libgmon.a \\)122 168 Q
(gcc/libgcc.a libc.a)122 180 Q(The)97 213.6 Q/F2 10/Courier@0 SF(mkstubs)3.258
E F1 .758(command will generate the \214les libc.sa, libcurses.sa, libgcc.sa, \
libtermcap.sa, libdbm.sa)3.258 F(and libgmon.sa.)72 225.6 Q(The)97 253.2 Q F2
(mkimage)3.373 E F1 .872
(command actually performs the linking to generate libc.so.4.3. Y)3.373 F .872
(ou will notice that the)-1.1 F F2 .653(-a, -d, -j)72 265.2 R F1(and)3.153 E F2
(-g)3.153 E F1 .654(switches specify the same v)3.153 F .654(alues as in the)
-.25 F F2(mkstubs)3.154 E F1 .654(command - it is *required* that)3.154 F .394
(these be the same. After the)72 277.2 R F2(--)2.894 E F1 .394
(you basically list whate)2.894 F -.15(ve)-.25 G 2.894(ri).15 G 2.894(tt)
316.224 277.2 S(ak)324.678 277.2 Q .394(es for the link)-.1 F .394
(er to resolv)-.1 F 2.893(ea)-.15 G .393(ll of the symbols.)447.771 277.2 R
.766(In this case libc does not depend upon an)72 289.2 R 3.266(ye)-.15 G .767
(xternal shared libraries, so we are merely linking to the libraries)254.954
289.2 R(that were generated by the b)72 301.2 Q(uild in the libc distrib)-.2 E
(ution.)-.2 E -.4(Wi)97 316.8 S(th).4 E F2(mkstubs)2.56 E F1 2.56(,y)C .06
(ou mak)171.22 316.8 R 2.56(et)-.1 G .06(he stub libraries as before, ho)210.68
316.8 R(we)-.25 E -.15(ve)-.25 G 2.56(ry).15 G .06(ou ha)360.07 316.8 R .36
-.15(ve t)-.2 H .06(he ability to specify additional).15 F .024
(unde\214ned symbols that the stub library will add to each stub .o \214le. Y)
72 328.8 R .024(ou used to ha)-1.1 F .324 -.15(ve t)-.2 H 2.524(os).15 G .024
(pecify these manually)428.742 328.8 R(,)-.65 E -.2(bu)72 340.8 S 2.5(tt).2 G
(his is no)89.86 340.8 Q 2.5(wh)-.25 G(andled more or less automatically)137.67
340.8 Q(.)-.65 E .49(An e)74.5 352.8 R .49(xample is in order here \(tak)-.15 F
.49(en from the e)-.1 F .49(xample directory in this distrib)-.15 F .49
(ution\). The)-.2 F F2(mkimage)2.99 E F1(command)2.99 E
(used with the editlib \(and the output\) looks lik)72 364.8 Q(e.)-.1 E
(First the command line)72 380.4 Q 86.4 427.2 14.4 -180.0000 90.0000 DA 86.4
412.8 14.4 -90.0000 180.0000 DA 504 412.8 14.4 -0.0000 -90.0000 DA 504 427.2
14.4 90.0000 0.0000 DA 72 412.8 72 427.2 DL 504 398.4 86.4 398.4 DL 518.4 427.2
518.4 412.8 DL 86.4 441.6 504 441.6 DL 2.5(%m)97 416.4 S
(kimage -l libedit -v 0.2 -a 0x80000000 -j 0x4000 -g 0x2000 -- editline.o \\)
115.61 416.4 Q(complete.o sysunix.o -ltermcap -lc)122 428.4 Q(Ne)72 458.4 Q(xt)
-.15 E F2(mkimage)4.631 E F1 2.131(identi\214es the v)4.631 F 2.132
(ersion number)-.15 F 4.632(,a)-.4 G 2.132
(nd it tells you the directory from which it is reading its)276.348 458.4 R
(con\214guration \214les \(via the JUMP_DIR symbol\))72 470.4 Q 86.4 517.2 14.4
-180.0000 90.0000 DA 86.4 502.8 14.4 -90.0000 180.0000 DA 504 502.8 14.4
-0.0000 -90.0000 DA 504 517.2 14.4 90.0000 0.0000 DA 72 502.8 72 517.2 DL 504
488.4 86.4 488.4 DL 518.4 517.2 518.4 502.8 DL 86.4 531.6 504 531.6 DL
(mkimage v2.10)97 506.4 Q(Reading con\214guration \214les from jump/)97 518.4 Q
F2(mkimage)72 548.4 Q F1(no)2.5 E 2.5(ws)-.25 G(ho)139.86 548.4 Q(ws you the e)
-.25 E(xact command line that it will pass to the link)-.15 E(er)-.1 E 86.4
595.2 14.4 -180.0000 90.0000 DA 86.4 580.8 14.4 -90.0000 180.0000 DA 504 580.8
14.4 -0.0000 -90.0000 DA 504 595.2 14.4 90.0000 0.0000 DA 72 580.8 72 595.2 DL
504 566.4 86.4 566.4 DL 518.4 595.2 518.4 580.8 DL 86.4 609.6 504 609.6 DL -.15
(exe)97 584.4 S
(cuting:ld -x -T 80000000 -o libedit.so.0.2 __jump.o editline.o complete.o \\)
.15 E(sysunix.o -ltermcap -lc)122 596.4 Q(Ne)72 626.4 Q 1.568
(xt comes some information from the link)-.15 F(er)-.1 E 4.067(.Y)-.55 G 1.567
(ou can use these numbers to k)276.603 626.4 R 1.567
(eep track of what range of)-.1 F(virtual address your library tak)72 638.4 Q
(es up.)-.1 E 86.4 685.2 14.4 -180.0000 90.0000 DA 86.4 670.8 14.4 -90.0000
180.0000 DA 504 670.8 14.4 -0.0000 -90.0000 DA 504 685.2 14.4 90.0000 0.0000 DA
72 670.8 72 685.2 DL 504 656.4 86.4 656.4 DL 518.4 685.2 518.4 670.8 DL 86.4
699.6 504 699.6 DL(te)97 674.4 Q(xt_start: 0x80000000)-.15 E(te)7.65 E
(xt_size: 0x0000a000)-.15 E(data_start: 0x8000a000)97 686.4 Q -.05(ga)6.4 G
(p: 0x00000000).05 E(DLL tools 2.12)72 768 Q EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(10)3.3 E/F1 10
/Times-Roman@0 SF(No)72 84 Q(w)-.25 E/F2 10/Courier@0 SF(mkimage)2.5 E F1(sho)
2.5 E(ws you the sharable libraries that were link)-.25 E(ed into the ne)-.1 E
2.5(wl)-.25 G(ibrary)390.05 84 Q .4 LW 86.4 130.8 14.4 -180.0000 90.0000 DA
86.4 116.4 14.4 -90.0000 180.0000 DA 504 116.4 14.4 -0.0000 -90.0000 DA 504
130.8 14.4 90.0000 0.0000 DA 72 116.4 72 130.8 DL 504 102 86.4 102 DL 518.4
130.8 518.4 116.4 DL 86.4 145.2 504 145.2 DL
(This library requires that the follo)97 120 Q
(wing shared libraries also be loaded:)-.25 E(8000a1ac D __NEEDS_SHRLIB_libc_4)
97 132 Q(No)72 162 Q 2.959(ww)-.25 G 2.959(ec)101.369 162 S(all)113.208 162 Q
F2(mkstubs)2.959 E F1 .459(to generate the stub libraries.)2.959 F .46
(Note that we are using the same parameters for a lot of)5.459 F
(the numbers here.)72 174 Q 86.4 278.4 14.4 -180.0000 90.0000 DA 86.4 206.4
14.4 -90.0000 180.0000 DA 504 206.4 14.4 -0.0000 -90.0000 DA 504 278.4 14.4
90.0000 0.0000 DA 72 206.4 72 278.4 DL 504 192 86.4 192 DL 518.4 278.4 518.4
206.4 DL 86.4 292.8 504 292.8 DL 2.5(%m)97 210 S
(kstubs -l libedit -v 0.2 -a 0x80000000 -j 0x4000)115.61 210 Q
(-g 0x2000 -- libedit)5 E(mkstubs v2.10)97 222 Q
(Reading con\214guration \214les from jump/)97 234 Q
(Automatically adding __NEEDS_SHRLIB_libc_4 as an unde\214ned symbol to the)97
246 Q(stub libraries.)99.5 258 Q
(libedit.sa: ___libedit_0_200, editline, complete, sysunix, v)97 270 Q(ersion,)
-.15 E(sequencing, done)122 282 Q .655(If e)97 315.6 R -.15(ve)-.25 G .655
(rything w).15 F .655(as set up properly)-.1 F 3.155(,t)-.65 G .654
(hen you should get the stub libraries and the sharable image in your)240.03
315.6 R(current directory)72 327.6 Q(.)-.65 E .517(There are other e)97 343.2 R
.518(xamples in the form of scripts that also appear in the doc directory of t\
his distrib)-.15 F(ution.)-.2 E(Man)72 355.2 Q 3.692(yl)-.15 G 1.192(ines ha)
101.652 355.2 R 1.492 -.15(ve b)-.2 H 1.192(een commented out in v).15 F 1.192
(arious places - the people who use these simply uncomment that)-.25 F
(which the)72 367.2 Q 2.5(yn)-.15 G(eed, and lea)123.51 367.2 Q .3 -.15(ve t)
-.2 H(he rest commented out.).15 E .692(Once you ha)97 382.8 R .992 -.15(ve b)
-.2 H .692(uilt the library)-.05 F 3.192(,y)-.65 G .692
(ou can install it with the follo)234.652 382.8 R .692(wing simple steps.)-.25
F .692(First of all, you can)5.692 F(cop)72 394.8 Q 3.415(yt)-.1 G .915
(he image itself to /lib)97.535 394.8 R 5.914(.I)-.4 G 3.414(fy)197.538 394.8 S
.914(ou speci\214ed /lib/libtest.so as the library name, and 0.1 as the v)
209.282 394.8 R .914(ersion, there)-.15 F .465
(should be a \214le libtest.so.0.1 in your current directory)72 406.8 R 2.965
(,a)-.65 G .465(nd this should be copied to /lib)299.675 406.8 R 5.465(.N)-.4 G
-.15(ex)440.59 406.8 S 2.965(ty).15 G .465(ou will need a)460.625 406.8 R 1.131
(symbolic link /lib/libtest.so.0 that points to /lib/libtest.so.0.1, and this \
is because libraries are generally only)72 418.8 R(look)72 430.8 Q .608
(ed up by the major number only)-.1 F 5.608(.T)-.65 G .608(his mak)235.216
430.8 R .608(es it easy when a ne)-.1 F 3.108(wm)-.25 G .608(inor v)367.712
430.8 R .608(ersion of the library is released)-.15 F .768
(because you just install the ne)72 442.8 R 3.268(wi)-.25 G .767
(mage \214le and change the symbolic link, and all binaries that were link)
208.568 442.8 R .767(ed to)-.1 F .504(the old v)72 454.8 R .504
(ersion of the library will no)-.15 F 3.004(wl)-.25 G .504(oad the ne)232.842
454.8 R 3.004(wv)-.25 G .504(ersion when the)289.774 454.8 R 3.004(yr)-.15 G
3.004(un. Finally)365.286 454.8 R 3.004(,y)-.65 G .504(ou should cop)421.484
454.8 R 3.004(yt)-.1 G .504(he \214les)489.286 454.8 R(lib*.sa to /usr/lib so \
that you can link your programs to them by specifying the)72 466.8 Q F2(-l)2.5
E F1(switch to)2.5 E F2(gcc)2.5 E F1(.)A .709(There is one further option to)97
482.4 R F2(mkimage)3.209 E F1(,)A F2(-G)3.209 E F1 3.209(,w)C .709
(hich causes an e)293.872 482.4 R .709
(xtra bit of code to be inserted for each)-.15 F .996
(function that has an entry in the jumptable.)72 494.4 R .996(This e)5.996 F
.997(xtra bit of code will print the name of the function being)-.15 F .133
(called to stderr)72 506.4 R 2.633(.Y)-.55 G .133(ou can use this f)142.399
506.4 R .133(acility for deb)-.1 F .133(ugging if you are ha)-.2 F .132
(ving trouble \214guring out where a particular)-.2 F(program is dying.)72
518.4 Q/F3 10/Times-Bold@0 SF(7. V)72 542.4 Q(eri\214cation)-1 E F1 1.038
(It is al)97 558 R -.1(wa)-.1 G 1.038(ys a good idea to v).1 F 1.038
(erify the stub libraries and the image after you ha)-.15 F 1.338 -.15(ve b)-.2
H 1.038(uilt them. This is a)-.05 F .014(good w)72 570 R .014
(ay to catch all kinds of stupid errors of so man)-.1 F 2.513(yd)-.15 G(if)
299.666 570 Q .013(ferent kinds that is is almost impossible to enumerate)-.25
F(them all.)72 582 Q 1.6 -.8(To v)72 597.6 T(erify).65 E 2.5(,u)-.65 G(se the)
117.89 597.6 Q F2(verify-shlib)2.5 E F1
(utility supplied in the tools directory)2.5 E 5(.I)-.65 G 2.5(ti)373.96 597.6
S 2.5(si)382.02 597.6 S -1.9 -.4(nv o)391.19 597.6 T -.1(ke).4 G 2.5(dw).1 G
(ith a command lik)429.65 597.6 Q(e:)-.1 E 86.4 630 14.4 -180.0000 90.0000 DA
86.4 630 14.4 -90.0000 180.0000 DA 504 630 14.4 -0.0000 -90.0000 DA 504 630
14.4 90.0000 0.0000 DA 72 630 72 630 DL 504 615.6 86.4 615.6 DL 518.4 630 518.4
630 DL 86.4 644.4 504 644.4 DL 2.5(%v)97 633.6 S
(erify-shlib -l libc.so.4.3 libc.sa libtermcap.sa libcurses.sa libgdbm.sa)
112.68 633.6 Q -1.1(Yo)72 663.6 S 3.737(um)1.1 G 1.237
(ust specify an image \214le with the)99.637 663.6 R F2(-l)3.738 E F1(ar)3.738
E 1.238(gument for)-.18 F F2(verify-shlib)3.738 E F1 1.238(to w)3.738 F 1.238
(ork, and you must specify)-.1 F .964(*all* of the stub libraries that were ge\
nerated as part of the sharable library)72 675.6 R 3.463(.T)-.65 G(he)396.154
675.6 Q F2(verify-shlib)3.463 E F1(program)3.463 E .44
(has one main task - to mak)72 687.6 R 2.94(es)-.1 G .44(ure that the absolute\
 addresses for each symbol in the stub libraries are identical)193.02 687.6 R
1.726(to the absolute addresses that were assigned by the link)72 699.6 R 1.726
(er when linking the shared image. The)-.1 F F2(verify-)4.226 E(shlib)72 711.6
Q F1 .897(utility basically calls)3.397 F F2(nm)3.397 E F1 .898
(to obtain the symbol table, and then does minor editing to remo)3.397 F 1.198
-.15(ve s)-.15 H(ymbols).15 E(that)72 723.6 Q F2(verify-shlib)2.829 E F1 -.1
(wo)2.829 G .329(uld e).1 F .328
(xpect to only be in the stubs or the sharable image. It then calls)-.15 F F2
(diff)2.828 E F1 .328(to obtain)2.828 F(DLL tools 2.12)72 768 Q EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(11)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF 1.1(the dif)72 84 R 1.1
(ferences between these lists and if e)-.25 F -.15(ve)-.25 G 1.101(rything w)
.15 F(ork)-.1 E 1.101(ed correctly there should be no dif)-.1 F 1.101
(ferences. V)-.25 F(erify)-1.11 E .079(determines whether or not the dif)72 96
R .079(fs are null or not, and gi)-.25 F -.15(ve)-.25 G 2.579(sy).15 G .079
(ou a message telling you what happened. If there)321.978 96 R(are dif)72 108 Q
(ferences, the)-.25 E/F2 10/Courier@0 SF(diff)2.5 E F1
(output is left in a \214le for you to e)2.5 E(xamine.)-.15 E/F3 10
/Times-Bold@0 SF 1.314(IT IS ESSENTIAL THA)72 120 R 3.814(TA)-.95 G 1.314
(LL DIFFERENCES BE RECONCILED BEFORE Y)198.006 120 R 1.314(OU TR)-.35 F 3.815
(YA)-.35 G 1.315(ND USE)480.695 120 R(THE LIBRAR)72 132 Q -.92(Y.)-.35 G F1
1.932(In principle there w)97 147.6 R 1.932(ould be tw)-.1 F 4.431(od)-.1 G(if)
241.7 147.6 Q 1.931(ferent types of dif)-.25 F 1.931(ferences. One w)-.25 F
1.931(ould be where a symbol only)-.1 F 1.548(appears in either the stubs or t\
he image, and this actually does come up under some circumstances and is)72
159.6 R .677(considered normal. An e)72 171.6 R .676(xample of this is in libc\
, where there are indirect symbols in the stub libraries which)-.15 F .873
(tell the link)72 183.6 R .873(er to resolv)-.1 F 3.373(e_)-.15 G .873
(read with a call to ___read. The)178.605 183.6 R F2(verify-shlib)3.373 E F1
.873(program is f)3.373 F .874(airly simpleminded)-.1 F
(and is not able to account for these types of symbols so the)72 195.6 Q 2.5
(ys)-.15 G(ho)318.77 195.6 Q 2.5(wu)-.25 G 2.5(pa)343.24 195.6 S 2.5(sd)355.18
195.6 S(if)366.57 195.6 Q(ferences.)-.25 E .998(Another case w)97 211.2 R .998
(ould be where the same symbol sho)-.1 F .997(ws up with dif)-.25 F .997
(ferent addresses in the stub libraries)-.25 F(and the sharable image.)72 223.2
Q F3 3.078(THIS INDICA)72 235.2 R 3.078(TES A B)-.95 F 3.078
(UG AND MUST BE FIXED BEFORE THE LIBRARIES WILL W)-.1 F(ORK)-.1 E(RELIABL)72
247.2 Q -.92(Y.)-.92 G F1 .167(In general,)72 262.8 R F2(mkimage)2.667 E F1
(and)2.666 E F2(mkstubs)2.666 E F1 .166(should write the same addresses, b)
2.666 F .166(ut it is possible that a b)-.2 F .166(ug e)-.2 F .166(xists which)
-.15 F(allo)72 274.8 Q 2.604(ws there to be dif)-.25 F 2.604
(ferences. It could also be some strange construct that w)-.25 F 2.604
(as found in jump.v)-.1 F 2.605(ars or)-.25 F(jump.funcs.)72 286.8 Q .973
(If you get a list where virtually e)97 302.4 R -.15(ve)-.25 G .973
(ry symbol is dif).15 F .973
(ferent, then this almost certainly indicates that you)-.25 F(ha)72 314.4 Q
1.271 -.15(ve u)-.2 H .971(sed dif).15 F .971(ferent addresses parameters for)
-.25 F F2(mkimage)3.471 E F1(and)3.471 E F2(mkstubs)3.471 E F1 3.472(.I)C 3.472
(ti)372.4 314.4 S 3.472(sE)381.432 314.4 S .972(SSENTIAL that the follo)394.904
314.4 R(wing)-.25 E .49(parameters be *identical* for all calls to)72 326.4 R
F2(mkimage)2.99 E F1(and)2.989 E F2(mkstubs)2.989 E F1 .489
(that are used to generate components for a)2.989 F
(particular sharable library:)72 338.4 Q(a\) Starting te)195.775 356.4 Q
(xt address)-.15 E(b\) Jump table size)195.775 368.4 Q(c\) GO)195.775 380.4 Q
2.5(Ts)-.4 G(ize.)232.585 380.4 Q
(d\) Starting data address \(if used\). If used for one it must)195.775 392.4 Q
(be used for all.)203.275 404.4 Q(Finally)97 426 Q 3.519(,t)-.65 G(he)133.489
426 Q F2(verify-shlib)3.519 E F1 1.019
(utility reads the image header from the sharable image to determine the)3.519
F(address range that it will be mapped to, and this is printed to the screen.)
72 438 Q F3 3.177(IT IS ALSO ESSENTIAL THA)72 450 R 5.676(TN)-.95 G 5.676(OT)
238.362 450 S 3.376 -.1(WO L)258.488 450 T 3.176(IBRARIES O).1 F 3.176
(VERLAP IN ANY W)-.5 F 5.176 -1(AY O)-1.2 H 5.676(RY)1 G(OUR)496.18 450 Q(PR)72
462 Q(OGRAMS WILL PR)-.3 E(OB)-.3 E(ABL)-.3 E 2.5(YC)-.92 G(RASH.)226.02 462 Q
(8. T)72 486 Q -.18(ro)-.74 G(ubleshooting).18 E F1 .656(There are a lot of th\
ings that can go wrong, and if something strange happens in the)72 501.6 R F2
(mkimage)3.156 E F1(or)3.156 E F2(mkstubs)3.156 E F1
(command, the \214rst thing you should do is check to mak)72 513.6 Q 2.5(es)-.1
G(ure that:)304.67 513.6 Q 14.17(1\) The)72 529.2 R(en)2.654 E .154
(vironment v)-.4 F .154(ariable JUMP_DIR w)-.25 F .153
(as properly set when compiling all of the modules of the library)-.1 F(.)-.65
E(The)97 541.2 Q F2(mkimage)2.5 E F1(and)2.5 E F2(mkstubs)2.5 E F1
(programs print out the path the)2.5 E 2.5(ya)-.15 G(re using - mak)356.38
541.2 Q 2.5(es)-.1 G(ure this is correct.)424.6 541.2 Q 14.17(2\) The)72 556.8
R(switch)2.958 E F2(-B/usr/dll/jump/)2.958 E F1 -.1(wa)2.958 G 2.958(sg).1 G
-2.15 -.25(iv e)266.942 556.8 T 2.958(nt).25 G(o)289.5 556.8 Q F2(gcc)2.958 E
F1 .458(for e)2.958 F -.15(ve)-.25 G .458(ry source \214le that w).15 F .458
(as compiled to go into)-.1 F .896(the library)97 568.8 R 5.896(.I)-.65 G 3.396
(ft)150.352 568.8 S .896(his w)159.858 568.8 R .895(as not done, then)-.1 F F2
(mkimage)3.395 E F1(or)3.395 E F2(getsize)3.395 E F1 .895
(will complain about "no source \214le for)3.395 F 1.358
(symbol %s" for a particular v)97 580.8 R 1.358
(ariable. \(See #5 as well\). Mak)-.25 F 3.858(es)-.1 G 1.358
(ure that there is a trailing slash in the)359.776 580.8 R(switch.)97 592.8 Q
14.17(3\) Mak)72 608.4 R 3.067(es)-.1 G .566(ure you do not ha)126.627 608.4 R
.866 -.15(ve m)-.2 H .566(ultiple copies of the same line in jump.v).15 F .566
(ars or jump.funcs. A symptom of)-.25 F .287(this is that when you run)97 620.4
R F2(mkimage)2.787 E F1(,)A F2(as)2.787 E F1 .287
(will complain about multiple de\214nitions of the same v)2.787 F .288
(ariable in)-.25 F(__jump.s.)97 632.4 Q 14.17(4\) Check)72 648 R .469
(to see if some program w)2.969 F .468
(as compiled and run during the library compilation procedure. If so, all)-.1 F
-.25(va)97 660 S .297(riables and functions for this program should be mo).25 F
-.15(ve)-.15 G 2.797(dt).15 G 2.797(oj)335.481 660 S .297
(ump.ignore. A symptom of this problem is)346.058 660 R(unresolv)97 672 Q
(ed symbols when)-.15 E F2(mkimage)2.5 E F1
(is trying to link the sharable library)2.5 E(.)-.65 E 14.17(5\) If)72 687.6 R
.026(you are not using the LONG_FILEN)2.526 F .025
(AME option, then you must mak)-.35 F 2.525(es)-.1 G .025(ure that you reb)
395.995 687.6 R .025(uild the library)-.2 F 1.148
(after you modify \(or create\) jump.v)97 699.6 R 1.149
(ars. A symptom of this is that)-.25 F F2(mkimage)3.649 E F1 1.149
(will complain about "no)3.649 F 5.862
(source \214le for symbol %s". This essentially means that there is no _GV)97
711.6 R 5.861(AR_nnnnn.s or)-1.35 F(_GCMN_mmmmm.s \214le for that v)97 723.6 Q
(ariable.)-.25 E(DLL tools 2.12)72 768 Q EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(12)3.3 E/F1 10
/Times-Roman@0 SF(If a program link)72 84 Q
(ed to your sharable library crashes, please check the follo)-.1 E(wing items:)
-.25 E 14.17(1\) Mak)72 99.6 R 3.466(es)-.1 G .966(ure you speci\214ed the sam\
e parameters \(virtual address, jumptable size, and GO)127.026 99.6 R 3.466(Ts)
-.4 G .966(ize\) for both)467.038 99.6 R/F2 10/Courier@0 SF(mkimage)97 111.6 Q
F1(and)4.828 E F2(mkstubs)4.828 E F1 7.328(.T)C 2.328(ypical symptoms: se)
220.234 111.6 R 2.328(gmentation f)-.15 F 2.327
(ault when running a program - often)-.1 F
(before you reach the main\(\) entry point.)97 123.6 Q 14.17(2\) Check)72 139.2
R .186(to see if one \(or more\) of your libraries o)2.686 F -.15(ve)-.15 G
.187(rlaps in virtual memory with some other library).15 F 2.687(.M)-.65 G(ak)
504.62 139.2 Q(e)-.1 E .206(100% sure that this is not the case. The link)97
151.2 R .205(er prints out memory usage after b)-.1 F .205
(uilding the sharable image)-.2 F 2.64(-e)97 163.2 S .14
(xamine these numbers and see. T)107.26 163.2 R .141(ypical symptoms: se)-.8 F
.141(gmentation f)-.15 F .141(ault when running a program - often)-.1 F 1.147
(before you reach the main\(\) entry point, in the __dynamic_resolv)97 175.2 R
3.647(ef)-.15 G 1.147(unction, although it could happen)379.652 175.2 R(an)97
187.2 Q(ywhere.)-.15 E 14.17(3\) Addresses)72 202.8 R .258
(in stub library do not match those in the image. Check with)2.758 F F2
(verify-shlib)2.758 E F1 .259(utility \(in tools)2.758 F 2.219(directory\). An)
97 214.8 R 4.719(yd)-.15 G(iscrepanc)170.438 214.8 Q 4.719(ym)-.15 G 2.219
(ust be resolv)225.547 214.8 R 2.219(ed before the library can be e)-.15 F
2.218(xpected to w)-.15 F 4.718(ork. T)-.1 F(ypical)-.8 E(symptoms: Se)97 226.8
Q(gmentation f)-.15 E(ault)-.1 E 14.17(4\) Mak)72 242.4 R 2.545(es)-.1 G .045(\
ure that all of the shared libraries that your program needs are automatically\
 loaded \(i.e. check the)126.105 242.4 R F2(ldd)97 254.4 Q F1 .522
(output, and see if it mak)3.022 F .522(es sense\). In general there should ne)
-.1 F -.15(ve)-.25 G 3.021(rb).15 G 3.021(ead)385.394 254.4 S(iscrepanc)405.316
254.4 Q 3.021(yh)-.15 G .521(ere, b)455.947 254.4 R .521(ut if there)-.2 F
1.052(is, it may indicate a silly b)97 266.4 R 1.052(ug some)-.2 F 1.052
(where in one of the tools.)-.25 F 1.053
(If some library is not being loaded that)6.053 F .281
(should be, you can use the)97 278.4 R F2(-u)2.781 E F1 .281(switch to)2.781 F
F2(mkstubs)2.781 E F1 .28(to force the link)2.781 F .28
(er to load the appropriate modules at)-.1 F .743(link time. Hint: If you ha)97
290.4 R 1.043 -.15(ve t)-.2 H 3.243(os).15 G .743(pecify a library to)227.961
290.4 R F2(mkimage)3.244 E F1 .744(in order to link the library)3.244 F 3.244
(,t)-.65 G .744(hen it should)465.242 290.4 R(sho)97 302.4 Q 2.5(wu)-.25 G 2.5
(pw)125.36 302.4 S(ith)140.08 302.4 Q F2(ldd)2.5 E F1
(if you selected a sharable library)2.5 E 5(.T)-.65 G(ypical symptoms: Se)
316.04 302.4 Q(gmentation f)-.15 E(ault)-.1 E/F3 10/Times-Bold@0 SF
(********** Message fr)72 330 Q(om)-.18 E F2(gcc)2.5 E F3
(about not being able to \214nd ___main)2.5 E F1 .657
(This symbol is de\214ned in libgcc.a, which generally comes with gcc.)97 357.6
R .656(The reason that this entry point is)5.656 F .893(needed is that it call\
s the constructors for all of the global objects \(for modules written in C++\
\).)72 369.6 R -.4(Wi)5.893 G .893(th older).4 F -.15(ve)72 381.6 S .616
(rsions of gcc, this library w).15 F .616(as in /usr/lib, b)-.1 F .616
(ut with ne)-.2 F .616(wer v)-.25 F .616
(ersions of gcc it appears in the same directory as)-.15 F
(the compiler sources.)72 393.6 Q
(Usually at the end of the mkimage command you should ha)5 E .3 -.15(ve s)-.2 H
(omething lik).15 E(e:)-.1 E(mkimage ....)97 417.6 Q(-lc `gcc --print` -lc)5 E
1.623(The gcc --print will actually print out the correct path for libgcc.a, s\
o this will w)72 441.6 R 1.624(ork as long as you ha)-.1 F -.15(ve)-.2 G
(correctly installed gcc.)72 453.6 Q F3(********** Message fr)72 481.2 Q(om)
-.18 E F2(gcc)2.5 E F3(about not using /usr/dll/jump.)2.5 E F1 .676
(There are se)97 508.8 R -.15(ve)-.25 G .676(ral possibilities. Check the).15 F
F2(gcc)3.175 E F1 .675(command line, and if)3.175 F F2(-B/usr/dll/jump/)3.175 E
F1 -.1(wa)3.175 G 3.175(sl).1 G(isted)499.51 508.8 Q .469(twice, this could e)
72 520.8 R .47(xplain the message, and the message can be ignored. If this is \
not the case, then you should)-.15 F(mak)72 532.8 Q 3.36(es)-.1 G .859
(ure that you did not omit the trailing '/' in the)100.81 532.8 R F2(-B)3.359 E
F1 3.359(switch. Finally)3.359 F 3.359(,y)-.65 G .859(ou should mak)383.356
532.8 R 3.359(es)-.1 G .859(ure that the \214le)455.553 532.8 R
(/usr/dll/jump/as e)72 544.8 Q
(xists and it is the binary generated by compiling jumpas.c.)-.15 E F3
(********** Message about symbol ha)72 568.8 Q(ving the wr)-.25 E
(ong type, or being in the wr)-.18 E(ong \214le.)-.18 E F1 -1.1(Yo)97 584.4 S
2.504(us)1.1 G .004(hould only ha)119.514 584.4 R .304 -.15(ve v)-.2 H .004
(ariables in jump.v)-.1 F .005
(ars, and there should only be functions in jump.funcs. These are)-.25 F .305
(identi\214ed by the symbol type code, "DCKT". If you ha)72 596.4 R .605 -.15
(ve t)-.2 H .305(hese mix).15 F .305(ed up, the tools will reject them.)-.15 F
-1.1(Yo)5.304 G 2.804(uh)1.1 G -2.25 -.2(av e)504.87 596.4 T 1.172(to decide w\
hether the symbol is misidenti\214ed, or whether the symbol is in the wrong \
\214le. Here is what the)72 608.4 R -.25(va)72 620.4 S(rious codes mean:).25 E
(DLL tools 2.12)72 768 Q EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(13)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF 2.5(T-f)150.28 84 S(unction.)168.05 84 Q 2.5(C-c)
150.28 96 S(ommon v)169.72 96 Q(ariable \(i.e. uninitialized, or bss\).)-.25 E
2.5(D-i)150.28 108 S(nitialized v)168.61 108 Q(ariable.)-.25 E 2.5(K-c)150.28
120 S(onstant v)170.27 120 Q(ariable \(initialized data in the te)-.25 E
(xt section\).)-.15 E 2.5(t-S)150.28 132 S(ame as T)166.95 132 Q 2.5(,e)-.74 G
(xcept that entry will not be added to stub library)211.6 132 Q(.)-.65 E 2.5
(U-U)150.28 144 S
(nde\214ned - used as a placeholder when generating the lite C library)173.05
144 Q(.)-.65 E 2.5(Aj)160.28 156 S(ump to a w)172.78 156 Q
(arning function is inserted in the jump slot of the jump)-.1 E(table.)160.28
168 Q/F2 10/Times-Bold@0 SF(********** Message fr)72 186 Q(om)-.18 E/F3 10
/Courier@0 SF(as)2.5 E F2(about operands not matching a kno)2.5 E
(wn instruction)-.1 E F1(This indicates a b)97 201.6 Q(ug in)-.2 E F3(jumpas)
2.5 E F1 2.5(.G)C(enerate the assembly code, \(i.e. mak)238.07 201.6 Q 2.5(ef)
-.1 G(oo.s\), and then do:)393.2 201.6 Q(/usr/dll/jump/as -k foo.s -o foo.o)
230.2 219.6 Q(The)72 237.6 Q F3(-k)3.439 E F1 .939(switch will lea)3.439 F
1.239 -.15(ve t)-.2 H .939(he modi\214ed assembly code in the \214le jumpas.tm\
p, and you can try and \214gure out).15 F
(from there what the problem is and \214x it.)72 249.6 Q F2
(********** Unde\214ned symbols fr)72 273.6 Q(om link)-.18 E(er while running)
-.1 E F3(mkimage)2.5 E F2(:)A F1 14.17(1\) First)72 289.2 R .033
(check and see if the symbols themselv)2.533 F .034
(es are in one of the libraries. If the)-.15 F 2.534(ya)-.15 G .034
(re, you probably need to)420.784 289.2 R(run)97 301.2 Q F3(ranlib)2.618 E F1
2.618(.N)C .118(ote that there is a b)161.286 301.2 R .118(ug in)-.2 F F3(ar)
2.618 E F1 .118(where sometimes)2.618 F F3(ranlib)2.618 E F1 .117
(does not generate a correct table,)2.618 F(and this can be w)97 313.2 Q(ork)
-.1 E(ed around with the commands:)-.1 E(ar -dv libc.a __.SYMDEF)255.9 331.2 Q
(ranlib libc.a)255.9 343.2 Q 14.17(2\) If)72 364.8 R .103
(the unde\214ned symbol is not in an)2.603 F 2.603(yo)-.15 G 2.603(ft)252.114
364.8 S .104
(he libraries, check to see what source \214le it came from \(i.e. look)260.827
364.8 R .895(in jump.v)97 376.8 R .895
(ars and jump.funcs\). Check to see if that \214le is in the library)-.25 F
3.395(.C)-.65 G .895(heck to see if that source \214le)398.61 376.8 R -.1(wa)97
388.8 S 2.5(sc).1 G(ompiled properly \(i.e. not a compiler error\).)119.39
388.8 Q 14.17(3\) If)72 404.4 R .843
(the symbol has a __LOCAL__ at the end of it, see if a v)3.343 F .844
(ersion without a __LOCAL__ is de\214ned in)-.15 F 1.73
(one of the libraries. If it is, then)97 416.4 R F3(jumpas)4.23 E F1 1.73
(did not run correctly)4.23 F 4.23(.C)-.65 G 1.73(heck to mak)379.81 416.4 R
4.23(es)-.1 G 1.73(ure that you used)444.61 416.4 R F3(-B/usr/dll/jump/)97
428.4 Q F1 2.532(,a)C .032(nd mak)202.472 428.4 R 2.533(es)-.1 G .033
(ure that JUMP_DIR w)242.987 428.4 R .033(as correctly set.)-.1 F(Mak)5.033 E
2.533(es)-.1 G .033(ure that this symbol is)429.928 428.4 R .627
(really supposed to be e)97 440.4 R .626
(xported from the library in the \214rst place \(i.e. w)-.15 F .626
(as there some program e)-.1 F -.15(xe)-.15 G(cuted).15 E(when b)97 452.4 Q
(uilding the library to generate a header \214le of some kind or another??\))
-.2 E F2(********** Err)72 468 Q(or message: no sour)-.18 E(ce \214le f)-.18 E
(or symbol '%s')-.25 E F1 .431(This indicates that you ha)97 483.6 R .731 -.15
(ve a g)-.2 H .431(lobal v).15 F .431(ariable speci\214ed in jump.v)-.25 F .431
(ars, b)-.25 F .432(ut there is no _GV)-.2 F .432(AR_nnnnn.s or)-1.35 F .262
(_GCMD_mmmmm.s \214le an)72 495.6 R .262
(ywhere to be found. First, \214nd out which source module it w)-.15 F .261
(as de\214ned in and then)-.1 F .448
(see if this source \214le is in the library)72 507.6 R 2.949(.I)-.65 G 2.949
(fn)229.255 507.6 S .449(ot, then \214gure out wh)240.534 507.6 R 1.749 -.65
(y. I)-.05 H 2.949(ft).65 G .449(his source \214le is in the library)350.298
507.6 R 2.949(,t)-.65 G .449(hen mak)479.451 507.6 R(e)-.1 E 5.713
(sure that the JUMP_DIR en)72 519.6 R 5.713(vironment v)-.4 F 5.713
(ariable is set properly and mak)-.25 F 8.213(es)-.1 G 5.712
(ure that the switch)427.663 519.6 R F3(-B/usr/dll/jump/)72 531.6 Q F1 -.1(wa)
2.5 G 2.5(ss).1 G(peci\214ed when this module w)192.34 531.6 Q(as compiled.)-.1
E F2(********** Err)72 555.6 Q
(or message: symbol '%s' should not appear in '%s')-.18 E F1 .379
(This indicates that a function with a name lik)97 571.2 R 2.879(e_)-.1 G
(_GLOB)292.791 571.2 Q .38(AL_$[I,D]$* appears in one of the jump.* \214les.)
-.35 F .497(This should ne)72 583.2 R -.15(ve)-.25 G 2.997(ro).15 G(ccur)
152.251 583.2 Q 2.997(,s)-.4 G .497
(ince these entry points are generated internally by)178.448 583.2 R F3(g++)
2.996 E F1 2.996(,a)C .496(nd the tools generally will)411.976 583.2 R 1.291
(\214lter these out.)72 595.2 R 1.291(If you inadv)6.291 F 1.292(ertently add \
a symbol of this form to one of the jump.* \214les you will get this)-.15 F
(message, and you should remo)72 607.2 Q .3 -.15(ve t)-.15 H
(his line from the jump.* \214le and proceed.).15 E F2(***********)72 631.2 Q
F3(nm)2.5 E F2(crashes.)2.5 E F1 .371(The no-cplus switch should be speci\214e\
d because some of the names that are used internally can confuse)97 646.8 R F3
(nm)72 658.8 Q F1(and mak)2.5 E 2.5(ei)-.1 G 2.5(tt)130.28 658.8 S
(hink that the symbol is a C++ symbol which needs to be demangled.)138.34 658.8
Q F2(*********** A)72 682.8 Q(pplication link)-.25 E
(ed to sharable library crashes when run.)-.1 E F1 .079
(First of all, try and use)97 698.4 R F3(gdb)2.579 E F1 .08(to establish that \
the problem is not in the application. If the problem is in the)2.579 F
(library)72 710.4 Q 2.97(,t)-.65 G .469(here are typically tw)106.26 710.4 R
2.969(ow)-.1 G .469(ays that it will f)204.576 710.4 R .469(ail. It might f)-.1
F .469(ail at startup before the main entry point is e)-.1 F -.15(ve)-.25 G(n)
.15 E .329(reached, and it might f)72 722.4 R .329(ail in some library routine\
 for some reason. Note that just because it crashes in a library)-.1 F
(DLL tools 2.12)72 768 Q EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(14)3.3 E/F1 10
/Times-Roman@0 SF 1.775
(routine this does not mean that there is automatically a b)72 84 R 1.775
(ug in the library - it could still be a b)-.2 F 1.775(ug in the)-.2 F
(application.)72 96 Q 1.6 -.8(To t)72 111.6 T(ry and isolate a b).8 E
(ug in a sharable library)-.2 E 2.5(,s)-.65 G(tart with the follo)256.15 111.6
Q(wing:)-.25 E(Mak)72 127.2 Q 3.926(es)-.1 G 1.426
(ure that the same addresses were speci\214ed to)102.486 127.2 R/F2 10
/Courier@0 SF(mkimage)3.927 E F1(and)3.927 E F2(mkstubs)3.927 E F1 3.927(-u)
3.927 G 1.427(se the)417.996 127.2 R F2(verify-shlib)3.927 E F1 1.594
(utility for this purpose.)72 139.2 R(If)6.594 E F2(verify-shlib)4.094 E F1
1.594(indicates some discrepanc)4.094 F 2.893 -.65(y, t)-.15 H 1.593
(his means one of se).65 F -.15(ve)-.25 G 1.593(ral things.).15 F .514
(There might be an error in one of the data \214les jump.as or jump.v)72 151.2
R .514(ars, or there could be a b)-.25 F .514(ug in)-.2 F F2(mkimage)3.015 E F1
(or)3.015 E F2(mkstubs)72 163.2 Q F1(.)A .814(If this indicates that e)97 178.8
R -.15(ve)-.25 G .813(rything is normal, then you will ha).15 F 1.113 -.15
(ve t)-.2 H 3.313(ot).15 G .813(ry and deb)365.159 178.8 R .813
(ug the library itself. If you)-.2 F(ha)72 190.8 Q .778 -.15(ve n)-.2 H .479
(ot stripped the sharable library).15 F 2.979(,y)-.65 G .479(ou can get)232.453
190.8 R F2(gdb)2.979 E F1 .479(to load the deb)2.979 F .479
(ugging information from the \214le with a)-.2 F(command lik)72 202.8 Q 2.5(e')
-.1 G(symbol-\214le /lib/foo.so.m.n'.)134.12 202.8 Q -.25(Ke)72 214.8 S 1.979
(ep in mind that).25 F F2(jumpas)4.478 E F1(re)4.478 E 1.978
(writes some of the machine instructions to add indirections for an)-.25 F
4.478(yg)-.15 G(lobal)498.4 214.8 Q -.25(va)72 226.8 S .473
(riables that are either e).25 F .474
(xported or imported. It is possible that there is a b)-.15 F .474(ug in)-.2 F
F2(jumpas)2.974 E F1 .474(that could lead to a)2.974 F .38(program b)72 238.8 R
.38(ug. If you suspect a b)-.2 F .379(ug in a particular function, then look i\
n the \214le /tmp/jumpas.log. This contains)-.2 F 3.963(ac)72 250.8 S 1.463
(omplete log of all substitutions that)84.843 250.8 R F2(jumpas)3.964 E F1
1.464(has made, and you can see if an)3.964 F 3.964(yo)-.15 G 3.964(ft)428.178
250.8 S 1.464(he substitutions are)438.252 250.8 R(incorrect.)72 262.8 Q 1.6
-.8(To d)97 278.4 T(eb).8 E
(ug a running program in assembly code, you can use the follo)-.2 E
(wing commands to)-.25 E F2(gdb)2.5 E F1(:)A(1\) display/i $pc)157.66 296.4 Q
2.5(#d)232.66 296.4 S(isplay ne)245.16 296.4 Q(xt machine instruction to be e)
-.15 E -.15(xe)-.15 G(cuted.).15 E(2\) si)157.66 308.4 Q 2.5(#s)232.66 308.4 S
(tep-instruction)244.05 308.4 Q(3\) info re)157.66 320.4 Q 32.94(g#)-.15 G(sho)
240.16 320.4 Q(ws all machine re)-.25 E(gisters.)-.15 E(4\) disassemble)157.66
332.4 Q 2.5(#s)257.66 332.4 S(ho)269.05 332.4 Q
(ws disassembly of entire contents of)-.25 E 2.5(#c)232.66 344.4 S
(urrent function.)244.6 344.4 Q 1.129(If the application crashes before it e)72
362.4 R -.15(ve)-.25 G 3.629(ng).15 G 1.128
(ets to main\(\), it indicates a problem that could be in an)244.733 362.4 R
3.628(yo)-.15 G 1.128(ne of a)488.934 362.4 R .453(number of places.)72 374.4 R
2.053 -.8(To d)5.453 H(eb).8 E .453(ug this you ha)-.2 F .753 -.15(ve t)-.2 H
2.953(ou).15 G .453(nderstand what happens at start time before you ha)262.757
374.4 R .754 -.15(ve a)-.2 H .754 -.15(ny h).15 H(ope).15 E .273
(of \214xing it. Y)72 386.4 R .273(ou will be able to set breakpoints in __loa\
d.c and step through to \214gure out e)-1.1 F .272(xactly what is going)-.15 F
(wrong.)72 398.4 Q 1.033(The \214rst thing that happens is that all of the sha\
rable libraries are loaded. This usually should happen)97 414 R .228
(without an)72 426 R 2.728(yp)-.15 G .228(roblems coming up. Secondly)127.306
426 R 2.728<2c8c>-.65 G .227
(xups are applied. These are essentially changes to the pointers in)257.568 426
R .404(the jump table and the global of)72 438 R .405(fset table to re\215ect \
your usage \(i.e. this is the dynamic linking\). If the pointers)-.25 F 1.66
(that are handed to the program are incorrect then this will f)72 450 R 1.66
(ail with a se)-.1 F 1.66(gmentation f)-.15 F 1.66(ault of some kind or)-.1 F
(another)72 462 Q 2.5(.T)-.55 G(his will probably indicate a b)112.55 462 Q
(ug in the link)-.2 E(er of some kind or another)-.1 E(.)-.55 E(Finally)97
477.6 Q 4.3(,b)-.65 G 1.801(uiltin \214xups are done. These \214xups are to pl\
aces in the image where a pointer v)136.29 477.6 R 1.801(ariable is)-.25 F .08
(initialized to the address of a global v)72 489.6 R .079
(ariable that is being e)-.25 F .079
(xported. The \214xup tables are generated by)-.15 F F2(jumpas)2.579 E F1(,)A
-.2(bu)72 501.6 S 2.689(tal).2 G .189
(ist of all of the tables is assembled by the link)97.178 501.6 R(er)-.1 E 2.69
(.Ap)-.55 G .19(roblem here indicates either a b)309.06 501.6 R .19
(ug in the link)-.2 F .19(er or in)-.1 F F2(jumpas)72 513.6 Q F1(.)A .592(Some\
times the \214xup lists become corrupt, and for this reason a magic number is \
inserted in the header)97 529.2 R(.)-.55 E .46
(The dynamic linking routines will check this number as the)72 541.2 R 2.96(yg)
-.15 G 2.96(oa)326.43 541.2 S .46(bout their b)338.83 541.2 R .46
(usiness and you will get an error)-.2 F .29(message if the)72 553.2 R 2.79(ya)
-.15 G .29(re passed data that does not correspond to an)141.87 553.2 R .29
(ything that the)-.15 F 2.79(ys)-.15 G .29(hould be looking at.)392.78 553.2 R
.29(If you get)5.29 F(this message, it indicates a b)72 565.2 Q
(ug that needs to be \214x)-.2 E(ed.)-.15 E(DLL tools 2.12)72 768 Q EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(15)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Bold@0 SF(A1. A)72 84 Q(ppendix - Ho)-.25 E 2.5(wT)-.1 G
(he J)168.05 84 Q(umpas Pr)-.15 E(ogram W)-.18 E(orks)-.75 E/F2 10
/Times-Roman@0 SF 2.129
(The most critical tool that is used to generate the sharable libraries is the)
97 99.6 R/F3 10/Courier@0 SF(jumpas)4.629 E F2 2.129(program. This)4.629 F(ef)
72 111.6 Q(fecti)-.25 E -.15(ve)-.25 G .215(ly looks lik).15 F 2.715(et)-.1 G
.215(he as assembler in terms of the inputs that it tak)161.605 111.6 R .214
(es, and it does some minor editing of the)-.1 F .731(assembler source code, a\
nd then writes it to a temporary \214le. The real system assembler is called t\
o generate)72 123.6 R .763
(the \214nal .o \214le, and then the temporary \214les are cleaned up. The)72
135.6 R F3(jumpas)3.263 E F2 .763(program must be run on all of the)3.263 F
3.214(assembly code that is destined for the sharable library)72 147.6 R 5.714
(,a)-.65 G 3.214(nd we do this by placing the e)324.676 147.6 R -.15(xe)-.15 G
3.215(cutable in).15 F 2.333(/usr/dll/jump/as, and then calling)72 159.6 R F3
(gcc)4.833 E F2 2.333(with the)4.833 F F3(-B/usr/dll/jump/)4.833 E F2 2.333
(switch. This mak)4.833 F(es)-.1 E F3(gcc)4.833 E F2 2.333(look in)4.833 F .578
(/usr/dll/jump for v)72 171.6 R .579(arious binaries, and it will \214nd what \
it thinks is the assembler there. The)-.25 F F3(jumpas)3.079 E F2(program)3.079
E(tak)72 183.6 Q(es o)-.1 E -.15(ve)-.15 G 2.5(rf).15 G
(rom here, and actually mak)118.25 183.6 Q
(es sure that the \214le is assembled after it has done its w)-.1 E(ork.)-.1 E
.188(There are se)97 199.2 R -.15(ve)-.25 G .188(ral things that the).15 F F3
(jumpas)2.687 E F2 .187
(program does to the input \214les, and these are controlled by the)2.687 F
1.01(input \214les jump.v)72 211.2 R 1.011
(ars, jump.funcs, jumpas.import and jump.ignore. The substitutions that)-.25 F
F3(jumpas)3.511 E F2 1.011(will mak)3.511 F(e)-.1 E(are:)72 223.2 Q 14.17
(1\) F)72 238.8 R .067(or each global v)-.15 F .067
(ariable declaration where the global v)-.25 F .067(ariable appears in jump.v)
-.25 F .066(ars, the initializer will be)-.25 F(di)97 250.8 Q -.15(ve)-.25 G
2.38(rted from the assembly \214le and written into a separate \214le in the d\
irectory pointed to by the).15 F 2.81(JUMP_DIR en)97 262.8 R 2.81(vironment v)
-.4 F 2.809(ariable \(which is also where the jump.v)-.25 F 2.809
(ars \214le is located\). Thus when)-.25 F F3(jumpas)97 274.8 Q F2 1.408(gets \
through, the source \214le that is passed to the assembler will simply contain\
 an e)3.908 F(xternal)-.15 E(reference to the global v)97 286.8 Q
(ariables that ha)-.25 E .3 -.15(ve b)-.2 H(een di).15 E -.15(ve)-.25 G
(rted. Here is an e).15 E(xample:)-.15 E(.data)298.255 304.8 Q(.globl _foo)
298.255 316.8 Q(_foo:)298.255 328.8 Q(.long 4)298.255 340.8 Q -.1(wo)97 358.8 S
(uld be the assembly language declaration for the v).1 E(ariable foo, equi)-.25
E -.25(va)-.25 G(lent to the C declaration:).25 E(int foo = 4;)297.795 376.8 Q
(The)97 394.8 Q F3(jumpas)2.5 E F2(\214lter con)2.5 E -.15(ve)-.4 G
(rts this to something lik).15 E(e:)-.1 E(.data)292.285 412.8 Q(.comm _foo,0)
292.285 424.8 Q(which is equi)97 442.8 Q -.25(va)-.25 G
(lent to the C-style declaration:).25 E -.15(ex)291.945 460.8 S(tern int foo;)
.15 E(The)97 478.8 Q F3(jumpas)2.807 E F2 .307(program writes out a \214le _GV)
2.807 F .306(AR_nnnnn.s in the JUMP_DIR directory which contains the)-1.35 F
(te)97 490.8 Q(xt:)-.15 E(.globl _foo)298.255 508.8 Q(_foo:)298.255 520.8 Q
(.long 4)298.255 532.8 Q(No)97 550.8 Q 3.605(ww)-.25 G 1.105(hat ha)127.015
550.8 R 1.406 -.15(ve w)-.2 H 3.606(ea).15 G 1.106
(ccomplished by doing this?? First of all we ha)184.682 550.8 R 1.406 -.15
(ve m)-.2 H 1.106(ade foo an unde\214ned symbol).15 F .511
(with respect to the library - it will not be de\214ned an)97 562.8 R .511
(ywhere. The)-.15 F F3(mkimage)3.011 E F2 .511(program will tak)3.011 F 3.011
(ea)-.1 G .511(ll of the)486.268 562.8 R(_GV)97 574.8 Q .28
(AR_nnnnn.s \214les and string them together with appropriate .or)-1.35 F 2.781
(gd)-.18 G(irecti)381.024 574.8 Q -.15(ve)-.25 G 2.781(sa).15 G .281
(nd by doing this we can)421.725 574.8 R(al)97 586.8 Q -.1(wa)-.1 G .613
(ys precisely control the address at which each v).1 F .613
(ariable will be placed. This is v)-.25 F .613(ery important if we)-.15 F
(are to ha)97 598.8 Q .3 -.15(ve b)-.2 H(inary compatibility from one v).15 E
(ersion of the sharable library to the ne)-.15 E(xt.)-.15 E 1.789(There will a\
lso be some \214les _GCMN_mmmmm.s. These are the declarations for v)97 622.8 R
1.79(ariables that are)-.25 F(declared as such:)97 634.8 Q(int foo;)305.615
652.8 Q .324(without an initializer)97 670.8 R 2.824(.I)-.55 G 2.824(ti)189.082
670.8 S 2.824(si)197.466 670.8 S .323(mportant that we k)206.96 670.8 R .323
(eep these separate from the _GV)-.1 F .323(AR_nnnnn.s \214les because)-1.35 F
.617(it is possible \(and bad programming practice\) for v)97 682.8 R .617
(ariables to be declared both w)-.25 F .617(ays in dif)-.1 F .617
(ferent source)-.25 F(modules. In such cases the initialized v)97 694.8 Q
(ersion tak)-.15 E(es precedence.)-.1 E .852(There are tw)97 718.8 R 3.352(of)
-.1 G .852(undementally dif)160.816 718.8 R .851(ferent modes of operation for)
-.25 F F3(jumpas)3.351 E F2 .851(with respect to the \214le naming)3.351 F(con)
97 730.8 Q -.15(ve)-.4 G .507(ntions. If you are not using the minix \214lesys\
tem, then you can de\214ne LONG_FILEN).15 F .508(AMES in the)-.35 F
(DLL tools 2.12)72 768 Q EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(16)3.3 E/F1 10
/Times-Roman@0 SF(Mak)97 84 Q .873(e\214le before you compile the tools, and t\
his will mean that nnnnn will be the library name and the)-.1 F -.25(va)97 96 S
.246(riable name. If you are using the minix \214lesystem, then you cannot de\
\214ne this symbol and the number).25 F .146(nnnnn in _GV)97 108 R .145
(AR_nnnnn.s is simply the line number on which the v)-1.35 F .145
(ariable in question appears in the \214le)-.25 F(jump.v)97 120 Q .558
(ars. If you are using the minix \214lesystem, this is the main reason wh)-.25
F 3.058(yi)-.05 G 3.058(ti)415.33 120 S 3.058(si)423.948 120 S .558
(mportant that you be)433.676 120 R -.15(ve)97 132 S .756
(ry careful when you edit jump.v).15 F .755(ars - the data \214les w)-.25 F
.755(ould get scrambled up and)-.1 F/F2 10/Courier@0 SF(mkimage)3.255 E F1 -.1
(wo)3.255 G .755(uld try).1 F 1.085(and pull in one \214le thinking that it w)
97 144 R 1.086(as the initalizer for _foo, and instead it pulls in _bar \()-.1
F F2(mkimage)A F1
(actually checks for this and complains if there is a mismatch\).)97 156 Q
14.17(2\) All)72 171.6 R 3.29(functions that appear in jump.funcs will ha)5.79
F 3.589 -.15(ve t)-.2 H 3.289(heir entry points renamed to something lik).15 F
(e)-.1 E .913(foo__LOCAL__. All other references to these functions will be le\
ft alone. By making this change, we)97 183.6 R .281(ensure that all usages of \
the function will go through the jump table, and thus if the startup code deci\
des)97 195.6 R 1.408(that the user is replacing a particular function we simpl\
y change the jump instruction to point to the)97 207.6 R(user')97 219.6 Q 3.429
(sf)-.55 G .929(unction and all usage of the function will go to the users fun\
ction. The library function is only)127.089 219.6 R .968(referred to through t\
he original jump instruction in the jump table, and thus we can guarantee that\
 the)97 231.6 R(library function will ne)97 243.6 Q -.15(ve)-.25 G 2.5(rg).15 G
(et called if the user supplies a replacement function.)209.36 243.6 Q 14.17
(3\) \(DLL)72 259.2 R -.15(ve)3.586 G 1.086
(rsion only\) All references to global v).15 F 1.085
(ariables that appear in jump.v)-.25 F 1.085(ars or jump.import will be)-.25 F
(re)97 271.2 Q 2.09(written to add an indirection to the lookup. The re)-.25 F
2.091(written code is written to look at the v)-.25 F(ariable)-.25 E(__GO)97
283.2 Q 1.54(T__foo to \214nd the actual address of the v)-.4 F 1.539
(ariable foo. The actual table is constructed when the)-.25 F .107
(sharable image is being created - this is an e)97 295.2 R .107
(xternal symbol as f)-.15 F .107(ar as the assembler is concerned when we)-.1 F
(get through with it. Let us say that we had the follo)97 307.2 Q
(wing machine instruction:)-.25 E(mo)283.34 325.2 Q(vl %eax,_errno)-.15 E
(this gets re)97 343.2 Q(written as:)-.25 E(mo)263.73 361.2 Q(vl %ebx,__REG_SA)
-.15 E(VE_)-1.35 E(mo)263.73 373.2 Q(vl __GO)-.15 E(T__errno,%ebx)-.4 E(mo)
263.73 385.2 Q(vl %eax,\(%ebx\))-.15 E(mo)263.73 397.2 Q(vl __REG_SA)-.15 E
(VE,%ebx)-1.35 E .288(The special v)97 415.2 R .287(ariable __GO)-.25 F .287
(T__errno is assumed to contain a pointer to the v)-.4 F .287
(ariable errno that we wish to)-.25 F .545
(use. If the user links a program to the library that supplies a v)97 427.2 R
.545(ariable errno, all we need to do is modify)-.25 F .291(this pointer and a\
ll references to _errno will use the storage location in the user')97 439.2 R
2.79(sp)-.55 G .29(rogram. \(F)431.58 439.2 R .29(or the time)-.15 F
(being, an entry is created in the \214le /tmp/jumpas.log, which sho)97 451.2 Q
(ws all substitutions that it has made\).)-.25 E 14.17(4\) \(DLL)72 466.8 R
-.15(ve)3.344 G .844(rsion only\) All .long pseudo-ops that ha).15 F 1.144 -.15
(ve a g)-.2 H .844(lobal v).15 F .845(ariable listed as the ar)-.25 F .845
(gument, and where)-.18 F .746(the global v)97 478.8 R .746
(ariable appears in jump.v)-.25 F .746(ars or jump.import, will ha)-.25 F 1.046
-.15(ve s)-.2 H .746(ome e).15 F .746(xtra stabs directi)-.15 F -.15(ve)-.25 G
3.246(sa).15 G .746(dded to)487.934 478.8 R .269
(the stream which are used by the link)97 490.8 R .269
(er to generate what are called b)-.1 F .27
(uiltin \214xups. Let us say that we had)-.2 F(the follo)97 502.8 Q(wing:)-.25
E(.globl _foo)295.76 520.8 Q(_foo:)295.76 532.8 Q(.long _errno)295.76 544.8 Q
1.314(we cannot \214x this through the indirect v)97 562.8 R 1.314
(ariable __GO)-.25 F 3.814(T__errno. Instead)-.4 F 1.313
(we add an entry to a special)3.814 F(table that tells the startup code to cop)
97 574.8 Q 2.5(yt)-.1 G(he address stored in __GO)256.33 574.8 Q
(T__errno at the location _foo.)-.4 E 14.17(5\) All)72 590.4 R 1.339(global v)
3.839 F 1.339(ariables/functions that do not appear in an)-.25 F 3.839(yo)-.15
G 3.839(fj)336.681 590.4 S 1.34(ump.funcs, jump.v)346.63 590.4 R 1.34
(ars or jump.ignore will)-.25 F(ha)97 602.4 Q 1.037 -.15(ve a)-.2 H 3.237(ne)
.15 G .736(ntry added to jump.log. Nothing will be done to an)135.884 602.4 R
3.236(yr)-.15 G .736(eferences to these v)356.974 602.4 R .736(ariables, b)-.25
F .736(ut the log)-.2 F .834
(\214le is created as an aide to help you \214nd functions that perhaps ha)97
614.4 R 1.134 -.15(ve a)-.2 H .834(ppeared in a ne).15 F 3.334(wv)-.25 G .834
(ersion of the)466.742 614.4 R
(library that you might wish to add to jump.funcs or jump.v)97 626.4 Q(ars.)
-.25 E/F3 10/Times-Bold@0 SF(A2. A)72 650.4 Q(ppendix - Ho)-.25 E 2.5(wT)-.1 G
(he Mkimage Pr)168.05 650.4 Q(ogram W)-.18 E(orks)-.75 E F1(The)97 666 Q F2
(mkimage)2.793 E F1 .293(program in man)2.793 F 2.793(yw)-.15 G .293
(ays is just a front end to the link)239.365 666 R(er)-.1 E 5.293(.T)-.55 G
.292(he idea is that it does a little bit)391.062 666 R
(of preparation and then it calls the link)72 678 Q(er to do the real w)-.1 E
(ork.)-.1 E .16(The \214rst job of)97 693.6 R F2(mkimage)2.66 E F1 .16
(is to create the jump table itself.)2.66 F .16
(This is just written as the assembly language)5.16 F
(\214le __jump.s, which contains entries lik)72 705.6 Q(e:)-.1 E
(DLL tools 2.12)72 768 Q EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(17)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF(.globl _foo)262.84 84 Q(_foo:)262.84 96 Q
(jmp _foo__LOCAL__)262.84 108 Q(.align 3)262.84 120 Q .191
(There will be one of these jump instructions for e)72 138 R -.15(ve)-.25 G .19
(ry function listed in jump.funcs. The adv).15 F .19(antage of ha)-.25 F .19
(ving a)-.2 F .316
(jump table is that it is easy to control the placement of an indi)72 150 R
.316(vidual function')-.25 F 2.816(se)-.55 G .316
(ntry point and thus it is tri)397.854 150 R(vial)-.25 E .024(to mak)72 162 R
2.524(es)-.1 G .024(ure that the same function has the same absolute address e\
ntry point from one v)110.278 162 R .024(ersion to the ne)-.15 F .024(xt. The)
-.15 F .559(jump table is padded with e)72 174 R .559
(xtra space at the end, and this is done to allo)-.15 F 3.059(wf)-.25 G .559
(or future e)380.784 174 R .559(xpansion - you can add)-.15 F
(more functions to the end of the jump table without mo)72 186 Q(ving an)-.15 E
(ything else in memory around.)-.15 E .424(After the jump table comes the GO)97
201.6 R 2.924(To)-.4 G 2.924(rG)253.708 201.6 S .424(lobal Of)267.182 201.6 R
.424(fset T)-.25 F .424(able. This simply consists of a series of pointers)-.8
F(that look lik)72 213.6 Q(e:)-.1 E(.globl __GO)268.46 231.6 Q(T__bar)-.4 E
(__GO)268.46 243.6 Q(T__bar:)-.4 E(.long _bar)268.46 255.6 Q .263
(In the section on)72 273.6 R/F2 10/Courier@0 SF(jumpas)2.763 E F1 2.763(,y)C
.264(ou will see that it is assumed that there will be v)188.195 273.6 R .264
(ariables of the form __GO)-.25 F(T__bar)-.4 E .821
(which contain pointers to _bar)72 285.6 R 3.321(.T)-.55 G .821
(his is where the)208.315 285.6 R 3.321(ya)-.15 G .821(re de\214ned. Once ag)
285.879 285.6 R .821(ain, we need to specify a size for the)-.05 F(GO)72 297.6
Q 2.705(Ts)-.4 G .205(ince we w)98.745 297.6 R .205(ant to mak)-.1 F 2.705(es)
-.1 G .205(ure that there is room for future e)193.16 297.6 R .205
(xpansion. The entries in the GO)-.15 F 2.706(Ta)-.4 G .206(re written in)
469.108 297.6 R(the order that the v)72 309.6 Q(ariables appear in jump.v)-.25
E(ars.)-.25 E(Finally)97 325.2 Q 3.522(,a)-.65 G 1.022(fter the GO)135.152
325.2 R 2.502 -.74(T, c)-.4 H 1.022(ome the actual global v).74 F 1.021
(ariables. The)-.25 F F2(jumpas)3.521 E F1 1.021(program has di)3.521 F -.15
(ve)-.25 G 1.021(rted assembly).15 F .827(code into \214les __GV)72 337.2 R
.827(AR_nnnnn.s, and no)-1.35 F(w)-.25 E F2(mkimage)3.327 E F1 .828
(sucks these in one by one, looking at the v)3.328 F .828(ariable size)-.25 F
.759(speci\214ed in jump.v)72 349.2 R .759(ars and adding .or)-.25 F 3.259(g\()
-.18 G .758(i.e. set origin\) directi)234.994 349.2 R -.15(ve)-.25 G 3.258(st)
.15 G 3.258(om)339.836 349.2 S(ak)355.874 349.2 Q 3.258(es)-.1 G .758
(ure that e)376.802 349.2 R .758(xactly this much space is)-.15 F(allo)72 361.2
Q(wed for each v)-.25 E(ariable. The global v)-.25 E
(ariables are de\214ned in the order that the)-.25 E 2.5(ya)-.15 G
(ppear in jump.v)398.51 361.2 Q(ars.)-.25 E(Ev)97 376.8 Q .925
(erything up to this point has been arranged in such a w)-.15 F .925
(ay that we can guarantee that the address of)-.1 F .052
(each object will remain \214x)72 388.8 R .052(ed from one v)-.15 F .052
(ersion to the ne)-.15 F .052(xt. After the global v)-.15 F .052
(ariables come a fe)-.25 F 2.552(wm)-.25 G .052(inor things -)469.406 388.8 R
.577(\214rst of all there is a b)72 400.8 R .577
(uiltin \214xup table. This is a list of the places that the address of a v)-.2
F .578(ariable appears in the)-.25 F .325(global data \(i.e. .long _bar\), acc\
ompanied by the address of the corresponding __GO)72 412.8 R .324(T__ v)-.4 F
.324(ariable. This is used)-.25 F .674(at runtime to mak)72 424.8 R 3.174(es)
-.1 G .675(ure that the pointers in the global data all point to the correct l\
ocations. Finally a special)156.256 424.8 R .285(symbol is inserted which will\
 contain the address of the \214xup table. This will be used at run time to ma\
k)72 436.8 R 2.784(es)-.1 G(ure)505.63 436.8 Q
(that all of the initialization is performed correctly)72 448.8 Q(.)-.65 E .376
(Once this \214le is complete,)97 464.4 R F2(mkimage)2.876 E F1 .377
(assembles it, and then it basically calls the link)2.876 F(er)-.1 E 2.877(.T)
-.55 G .377(he link)459.526 464.4 R .377(er tak)-.1 F(es)-.1 E -.15(ove)72
476.4 S 3.66(ra).15 G 1.16(nd \214nishes construction of the sharable library)
97.57 476.4 R 3.66(.Y)-.65 G 1.16(ou can e)301.69 476.4 R 1.16
(xamine the \214le __jump.s if you wish to see)-.15 F(what this looks lik)72
488.4 Q(e.)-.1 E/F3 10/Times-Bold@0 SF(A3. A)72 512.4 Q(ppendix - Ho)-.25 E 2.5
(wT)-.1 G(he Getsize Pr)168.05 512.4 Q(ogram W)-.18 E(orks)-.75 E F1(The)97 528
Q F2(getsize)2.781 E F1 .281(program is a close cousin to)2.781 F F2(mkimage)
2.781 E F1 2.782(.I)C .282(ts job is to \214gure out ho)326.84 528 R 2.782(wl)
-.25 G(ar)436.074 528 Q .282(ge each v)-.18 F .282(ariable is)-.25 F .445
(so that you kno)72 540 R 2.945(wh)-.25 G .944 -.25(ow m)149.64 540 T .444
(uch to allocate for it. In general, you can use the allocations that).25 F F2
(getsize)2.944 E F1(pro)2.944 E(vides,)-.15 E -.2(bu)72 552 S 2.512(ti).2 G
2.512(ti)89.872 552 S 2.512(sag)97.944 552 S .012(ood idea to increase the siz\
e of the allocation for some structures and arrays to allo)116.298 552 R 2.513
(wr)-.25 G .013(oom for future)460.054 552 R -.15(ex)72 564 S 3.648
(pansion. The).15 F F2(getsize)3.648 E F1 1.148(program has no w)3.648 F 1.148
(ay of kno)-.1 F 1.147(wing ho)-.25 F 3.647(wm)-.25 G 1.147(uch padding w)
353.028 564 R 1.147(ould be appropriate, so it)-.1 F(simply reports the f)72
576 Q(acts, and it is your job to \214gure out ho)-.1 E 2.5(wm)-.25 G
(uch space you actually w)319.42 576 Q(ant to allocate.)-.1 E(The)97 591.6 Q F2
(getsize)5.56 E F1 3.06(program w)5.56 F 3.06
(orks by collecting all of the data from the _GV)-.1 F 3.06
(AR_nnnnn.s \214les and)-1.35 F .228
(appending them together in the order that the)72 603.6 R 2.727(ya)-.15 G .227
(ppear in jump.v)265.86 603.6 R .227
(ars. It then calls the system assembler and uses)-.25 F F2(nm)72 615.6 Q F1
.188(to obtain a listing of the starting address of each v)2.688 F(ariable.)
-.25 E F2(getsize)5.188 E F1 .188(then reads in the output from)2.688 F F2(nm)
2.688 E F1 2.688(,a)C(nd)508.4 615.6 Q(uses the starting address of each v)72
627.6 Q(ariable to calculate the actual size of each v)-.25 E(ariable.)-.25 E
F3(A4. A)72 651.6 Q(ppendix - Ho)-.25 E 2.5(wT)-.1 G(he Mkstubs Pr)168.05 651.6
Q(ogram W)-.18 E(orks)-.75 E F1(The)97 667.2 Q F2(mkstubs)3.179 E F1 .679
(program essentially generates a "library" that can be link)3.179 F .678
(ed with a user program so that)-.1 F .638
(the user program will use the sharable library)72 679.2 R 3.138(.I)-.65 G
3.138(ti)266.134 679.2 S 3.138(sc)274.832 679.2 S .639
(alled a stub library because each symbol does not ha)286.3 679.2 R .939 -.15
(ve a)-.2 H .914(traditional de\214nition in the usual sense, b)72 691.2 R .913
(ut it has a special de\214nition which essentially tells the link)-.2 F .913
(er that a)-.1 F .435(particular symbol is at a particular absolute address. P)
72 703.2 R .435(art of the stub library is a de\214nition of each symbol that)
-.15 F(is being e)72 715.2 Q
(xported from the sharable library and the corresponding virtual address.)-.15
E(DLL tools 2.12)72 768 Q EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(18)3.3 E/F1 10
/Times-Roman@0 SF .495(There is another function that each stub library has to\
 perform. When your program \214rst starts up, none)97 84 R 1.293(of the shara\
ble libraries are mapped to your virtual address space. Before your program re\
aches the main\(\))72 96 R .062(entry point, a special series of functions are\
 called, and one of them is passed a list that the link)72 108 R .062
(er has generated)-.1 F .876(which essentially describes which sharable librar\
ies should be loaded. The startup code then uses the system)72 120 R .538
(call uselib\(\), which tells the k)72 132 R .538(ernel to add a particular li\
brary to your virtual address space. It is the job of the)-.1 F .196
(stub library to de\214ne a special symbol that is called a set v)72 144 R .196
(ector \(essentially the link)-.15 F .196(er simply collects all of the)-.1 F
.959(set v)72 156 R .959
(ectors by the same name and puts them in a list\) - and this set v)-.15 F .959
(ector is the v)-.15 F .958(ector that is passed to the)-.15 F
(startup code telling it which libraries need to be loaded.)72 168 Q(Finally)97
183.6 Q 3.017(,t)-.65 G .518(he stub library must de\214ne some special symbol\
s - it must supply de\214nitions for the __GO)132.987 183.6 R(T__)-.4 E .737
(symbols, plus it adds symbols lik)72 195.6 R 3.237(e_)-.1 G(_PL)221.062 195.6
Q(T__bar)-.92 E 3.237(.T)-.55 G .737(hese are pro)276.989 195.6 R .737
(vided so that the link)-.15 F .736(er realizes that the user is)-.1 F .861
(rede\214ning a particular v)72 207.6 R .861(ariable, and so that the link)-.25
F .862(er can mak)-.1 F 3.362(ean)-.1 G .862
(ote of the memory locations that must be)348.766 207.6 R 1.3(updated with ne)
72 219.6 R 3.8(wi)-.25 G 1.3
(nformation before the program can be run. The __PL)152.03 219.6 R 1.299
(T__ symbols are added so that the)-.92 F(link)72 231.6 Q .884(er can identify\
 a particular address as being the address of a jump instruction in a jump tab\
le - when we)-.1 F 1.641
(modify the address in a jump table it is done a little dif)72 243.6 R 1.64
(ferently from when we modify the address in the)-.25 F(__GO)72 255.6 Q .968(T\
__. In one case we are modifying a machine instruction, and in the other we ar\
e simply modifying a)-.4 F(pointer)72 267.6 Q(.)-.55 E/F2 10/Times-Bold@0 SF
(A5. A)72 291.6 Q(ppendix - Explanation Of Ho)-.25 E 2.5(wA)-.1 G(nd Wh)236.95
291.6 Q 2.5(yD)-.15 G(ynamic Linking Is Implemented)280.7 291.6 Q F1 .667
(The \214rst question that comes up is "Wh)72 307.2 R 3.166(yd)-.05 G .666
(ynamic linking - what does it do for me". The best w)248.022 307.2 R .666
(ay to answer)-.1 F(this is to look at a simple e)72 319.2 Q(xample:)-.15 E .4
LW 86.4 445.2 14.4 -180.0000 90.0000 DA 86.4 351.6 14.4 -90.0000 180.0000 DA
504 351.6 14.4 -0.0000 -90.0000 DA 504 445.2 14.4 90.0000 0.0000 DA 72 351.6 72
445.2 DL 504 337.2 86.4 337.2 DL 518.4 445.2 518.4 351.6 DL 86.4 459.6 504
459.6 DL(#include <stdio.h>)97 355.2 Q(int errno;)97 379.2 Q(FILE * foo;)97
391.2 Q(main\(\){)97 415.2 Q(foo = fopen\("/usr/bin/foo","w"\);)122 427.2 Q
(printf\("foo: %x errno: %d\\n",foo, errno\);)122 439.2 Q(})97 451.2 Q .387
(Assume this program is run by a non-root user)72 481.2 R 2.887(.N)-.55 G .387
(ormally you w)273.243 481.2 R .387(ould e)-.1 F .388
(xpect that the open will f)-.15 F .388(ail because the)-.1 F 1.295
(user does not ha)72 493.2 R 1.595 -.15(ve p)-.2 H 1.294
(ermission to write to /usr/bin - this means that fopen\(\) w).15 F 1.294
(ould return NULL, and errno)-.1 F -.1(wo)72 505.2 S .047
(uld contain 13, which means EA).1 F .047
(CCES - Permission denied. If you link this to a normal jump table library)-.4
F 2.548(,i)-.65 G(t)515.62 505.2 Q(prints)72 517.2 Q 86.4 549.6 14.4 -180.0000
90.0000 DA 86.4 549.6 14.4 -90.0000 180.0000 DA 504 549.6 14.4 -0.0000 -90.0000
DA 504 549.6 14.4 90.0000 0.0000 DA 72 549.6 72 549.6 DL 504 535.2 86.4 535.2
DL 518.4 549.6 518.4 549.6 DL 86.4 564 504 564 DL(foo: 0)97 553.2 Q(errno: 0)5
E(DLL tools 2.12)72 768 Q EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(19)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF(No)72 84 Q 2.5(wc)-.25 G(onsider the follo)98.13
84 Q(wing nearly identical program:)-.25 E .4 LW 86.4 210 14.4 -180.0000
90.0000 DA 86.4 116.4 14.4 -90.0000 180.0000 DA 504 116.4 14.4 -0.0000 -90.0000
DA 504 210 14.4 90.0000 0.0000 DA 72 116.4 72 210 DL 504 102 86.4 102 DL 518.4
210 518.4 116.4 DL 86.4 224.4 504 224.4 DL(#include <stdio.h>)97 120 Q -.15(ex)
97 144 S(tern int errno;).15 E(FILE * foo;)97 156 Q(main\(\){)97 180 Q
(foo = fopen\("/usr/bin/foo","w"\);)122 192 Q
(printf\("foo: %x errno: %d\\n",foo, errno\);)122 204 Q(})97 216 Q
(The results for this program are:)72 246 Q 86.4 278.4 14.4 -180.0000 90.0000
DA 86.4 278.4 14.4 -90.0000 180.0000 DA 504 278.4 14.4 -0.0000 -90.0000 DA 504
278.4 14.4 90.0000 0.0000 DA 72 278.4 72 278.4 DL 504 264 86.4 264 DL 518.4
278.4 518.4 278.4 DL 86.4 292.8 504 292.8 DL(foo: 0)97 282 Q(errno: 13)5 E(Wh)
72 312 Q 3.071(yd)-.05 G .571(oes this happen???. First of all you must realiz\
e that in the \214rst program errno is not declared e)99.461 312 R(xternal,)
-.15 E .112(and thus storage will be allocated in the data se)72 324 R .113
(gment for the v)-.15 F .113(ariable. Unfortunately there is no w)-.25 F .113
(ay to tell libc)-.1 F .61(this, and libc has its o)72 336 R .61
(wn storage for errno.)-.25 F .61
(Thus libc writes the result in one location and you are looking in)5.61 F .266
(the other)72 348 R 2.766(.I)-.55 G 2.766(nt)115.582 348 S .267
(he second program errno is declared e)126.128 348 R .267
(xtern, and thus no storage will be allocated. The link)-.15 F .267(er will)-.1
F .276(see the need for a de\214nition of errno, and it will \214nd one in lib\
c. Thus in the second e)72 360 R .275(xample the user program)-.15 F
(is reading the same memory location that the library stored the answer in.)72
372 Q 1.248(This is of course a simple e)72 396 R 1.248
(xample. There are more complicated e)-.15 F 1.248(xamples in)-.15 F -.2(vo)-.4
G 1.248(lving programs that w).2 F 1.249(ant to)-.1 F
(rede\214ne a library function and these can lead to quite bizarre beha)72 408
Q(vior which is dif)-.2 E(\214cult to deb)-.25 E(ug.)-.2 E .563
(The idea behind dynamic linking is that in the \214rst program the link)72 432
R .562(er will see that we are de\214ning a v)-.1 F(ariable)-.25 E .229
(that is also de\214ned in libc. The link)72 444 R .23(er will essentially mod\
ify libc so that it stores errno in the storage allocated)-.1 F(in the user pr\
ogram, and once this happens then the test program will generate the correct r\
esult.)72 456 Q/F2 10/Times-Bold@0 SF(A5.1. Theory of operation:)72 480 Q F1
(Basically)97 495.6 Q 3.157(,t)-.65 G 3.157(oi)142.007 495.6 S .657(mplement d\
ynamic linking we need to route all function calls to global functions through)
152.944 495.6 R 1.162(the jump table. W)72 507.6 R 3.662(ea)-.8 G 1.162
(lso need to mak)158.888 507.6 R 3.663(es)-.1 G 1.163
(ure that all global data is accessed indirectly through a pointer)237.317
507.6 R 3.663(.T)-.55 G(he)508.96 507.6 Q .229
(actual libraries do not really look v)72 519.6 R .229(ery much dif)-.15 F .229
(ferent from the actual jump table libraries that we are currently)-.25 F .643
(using, b)72 531.6 R .643(ut there are additional pointers to the global data \
in the sharable image that are used internally by the)-.2 F 1.013(library to a\
ccess all global data. There are also additional symbols in the stub library t\
hat are de\214ned as the)72 543.6 R .193(address of the v)72 555.6 R .193
(arious pointers, and are used by the link)-.25 F .194
(er to help determine whether there is a pointer or a jmp)-.1 F
(instruction that needs to be \214x)72 567.6 Q(ed up.)-.15 E .182
(In principle we could use)97 583.2 R/F3 10/Courier@0 SF(-fPIC)2.682 E F1(with)
2.682 E F3(gcc)2.682 E F1 .182(to generate the additional indirections, b)2.682
F .181(ut this has a number)-.2 F 1.14(of nasty side ef)72 595.2 R 1.14
(fects, and I decided to fore)-.25 F 1.141(go PIC. Instead the)-.15 F F3
(jumpas)3.641 E F1 1.141(program automatically con)3.641 F -.15(ve)-.4 G 1.141
(rts an).15 F(y)-.15 E 1.855(references in the code and adds the required indi\
rections. The indirections are al)72 607.2 R -.1(wa)-.1 G 1.855
(ys referred to through).1 F -.25(va)72 619.2 S .212(riables lik).25 F 2.712
(e_)-.1 G(_GO)133.174 619.2 Q .213
(T__foo, which are simply pointers to _foo. The)-.4 F F3(mkimage)2.713 E F1
.213(tool will automatically generate)2.713 F 1.524
(the table of pointers and position it properly so that all e)72 631.2 R 1.523
(xternals will be properly resolv)-.15 F 4.023(ed. Similarily)-.15 F(the)4.023
E F3(mkstubs)72 643.2 Q F1 .74(tool will generate a stub library with all of t\
he symbols properly de\214ned to point to the analagous)3.24 F
(objects in the sharable image.)72 655.2 Q .541(The link)97 670.8 R .541
(er does something else important, ho)-.1 F(we)-.25 E -.15(ve)-.25 G 1.641 -.55
(r. I).15 H 3.041(tw).55 G .54
(atches for duplicate de\214nitions of symbols, and)326.008 670.8 R .753
(if the old symbol is at an absolute address, it mak)72 682.8 R .754
(es a note of it as a con\215ict that needs to be resolv)-.1 F .754(ed at run)
-.15 F 1.581(time. The link)72 694.8 R 1.581
(er puts a list of all of these con\215icts into a table and mak)-.1 F 1.581
(es it a)-.1 F -.25(va)-.2 G 1.581(ilable to crt0 through the).25 F -.25(va)72
706.8 S .405(riable __SHARABLE_CONFLICTS_. The link).25 F .405
(er assumes that an)-.1 F 2.905(ys)-.15 G .406
(ymbol in the sharable library that starts)359.315 706.8 R .463(with a __GO)72
718.8 R .463(T_ is a pointer to the same v)-.4 F .462(ariable without the __GO)
-.25 F .462(T_. It is also assumed that a symbol with a)-.4 F(__PL)72 730.8 Q
.026
(T_ in front of it indicates that there is a jmp instruction there. The link)
-.92 F .026(er goes through each of the symbols)-.1 F(DLL tools 2.12)72 768 Q
EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(20)3.3 E/F1 10
/Times-Roman@0 SF .11(that are locally de\214ned and looks for __GO)72 84 R .11
(T_ and __PL)-.4 F .109(T_ v)-.92 F .109
(ariants of the same symbol name, and an)-.25 F 2.609(yo)-.15 G 2.609(ft)
491.911 84 S(hese)500.63 84 Q -.1(wo)72 96 S .544(uld indicate that there is a\
 pointer or a jump instruction in the sharable library that needs to be \214x)
.1 F .545(ed at run)-.15 F(time.)72 108 Q .224
(At run time, crt0 \(through the function __dynamic_resolv)97 123.6 R .224
(e\) will go through and \214x up all of the pointers)-.15 F 1.614
(that need to be \214x)72 135.6 R 4.114(ed. The)-.15 F 1.614
(\214xup essentially just consists of cop)4.114 F 1.615(ying one long inte)-.1
F 1.615(ger from one address to)-.15 F(another)72 147.6 Q 3.02(,s)-.4 G 3.02
(ot)111 147.6 S .52(he actual runtime o)121.8 147.6 R -.15(ve)-.15 G .52
(rhead should be ne).15 F .52
(gligible. Note that when a sharable image is link)-.15 F .52(ed, a list)-.1 F
.743(of \214xups will be made in that image as well, and those \214xups need t\
o be run as well as the ones in the main)72 159.6 R(user program.)72 171.6 Q/F2
10/Times-Bold@0 SF(A6. A)72 195.6 Q(ppendix - Example of b)-.25 E
(uilding compatable DLL libraries)-.2 E F1 .923(Here is an e)97 211.2 R .923
(xample of b)-.15 F .922(uilding a compatable DLL library if you ha)-.2 F 1.222
-.15(ve n)-.2 H 3.422(oj).15 G .922(ump.* \214les. Let')404.712 211.2 R 3.422
(sc)-.55 G .922(hoose to)483.868 211.2 R -.2(bu)72 223.2 S .15(ild a Xa).2 F
2.65(wc)-.15 G .15(ompatible library with Xa)127.92 223.2 R .15
(w3d source. Firstly you must ha)-.15 F .451 -.15(ve t)-.2 H .151
(he stub of the library you are trying).15 F(to be compatible with. Ob)72 235.2
Q(viously libXa)-.15 E -.65(w.)-.15 G(sa.).65 E .4 LW 86.4 267.6 14.4 -180.0000
90.0000 DA 86.4 267.6 14.4 -90.0000 180.0000 DA 504 267.6 14.4 -0.0000 -90.0000
DA 504 267.6 14.4 90.0000 0.0000 DA 72 267.6 72 267.6 DL 504 253.2 86.4 253.2
DL 518.4 267.6 518.4 267.6 DL 86.4 282 504 282 DL 2.5(%l)97 271.2 S
(ibinfo /usr/X386/lib/libXa)110.61 271.2 Q -.65(w.)-.15 G(sa).65 E -1.1(Yo)72
304.8 S 2.5(us)1.1 G(hould get something lik)94.51 304.8 Q 2.5(et)-.1 G
(his returned)198.86 304.8 Q 86.4 445.2 14.4 -180.0000 90.0000 DA 86.4 337.2
14.4 -90.0000 180.0000 DA 504 337.2 14.4 -0.0000 -90.0000 DA 504 445.2 14.4
90.0000 0.0000 DA 72 337.2 72 445.2 DL 504 322.8 86.4 322.8 DL 518.4 445.2
518.4 337.2 DL 86.4 459.6 504 459.6 DL(Library requires libX11.so.3)97 340.8 Q
(Library requires libXt.so.3)97 352.8 Q(Library requires libc.so.4)97 364.8 Q
(Library requires libXa)97 376.8 Q -.65(w.)-.15 G(so.3).65 E(Library v)97 388.8
Q(ersion is 3.0pl2)-.15 E(Start address of table is 0x60300000)97 400.8 Q
(Looks lik)97 412.8 Q 2.5(et)-.1 G(his is part of libXa)144.68 412.8 Q -.65(w.)
-.15 G(so).65 E(Currently GO)97 424.8 Q 2.5(Ts)-.4 G(ize is 0x1000 \(4096\))
164.37 424.8 Q(Jump table size is 0x4000 \(16384\))97 436.8 Q
(Encountered 84 PL)97 448.8 Q(T')-.92 E 2.5(sa)-.55 G(nd 73 GO)193.01 448.8 Q
(T')-.4 E 2.5(si)-.55 G 2.5(ns)250.11 448.8 S(tub)261.5 448.8 Q(Ok so no)72
478.8 Q 2.5(wy)-.25 G(ou ha)122.58 478.8 Q .3 -.15(ve t)-.2 H(he).15 E/F3 10
/Courier@0 SF(-a, -j, -g)2.5 E F1(and)2.5 E F3(-v)2.5 E F1(\215ags for)2.5 E F3
(mkimage)2.5 E F1(and)2.5 E F3(mkstubs)2.5 E F1(.)A/F4 15/ZapfDingbats SF(+)72
490.8 Q F2 -.65(Wa)3.448 G -.15(rn).65 G(ing).15 E F1 3.448(:D)C .948
(LL libraries b)140.521 490.8 R .948(uilt with tools prior to v)-.2 F .947
(ersion 2.4 may gi)-.15 F 1.247 -.15(ve i)-.25 H .947(ncorrect v).15 F .947
(alues for the GO)-.25 F 3.447(Ta)-.4 G(nd)508.4 490.8 Q .141
(Jump table size. Y)72 502.8 R .141(ou will get a w)-1.1 F .141
(arning to this ef)-.1 F .142
(fect. Generally if the stub you are inspecting is part of a lar)-.25 F(ger)
-.18 E 1.136(library mer)72 514.8 R 1.136(ged with v)-.18 F 1.136
(arious smaller libraries, \(e.g. libX11.sa\), then you should, for e)-.25 F
1.136(xample, run the libinfo)-.15 F
(command on libX11.sa instead of libXmu.sa.)72 526.8 Q(No)72 542.4 Q 4.577(wd)
-.25 G 4.577(oa\214)100.767 542.4 S 2.077(rst pass compile with fresh source t\
o produce a jump.log \214le in the directory pointed to by)124.921 542.4 R
(JUMP_DIR. Generate the jump.v)72 554.4 Q(ars \214le with the)-.25 E F3(-v)2.5
E F1(\215ag to mkcompat:)2.5 E 86.4 601.2 14.4 -180.0000 90.0000 DA 86.4 586.8
14.4 -90.0000 180.0000 DA 504 586.8 14.4 -0.0000 -90.0000 DA 504 601.2 14.4
90.0000 0.0000 DA 72 586.8 72 601.2 DL 504 572.4 86.4 572.4 DL 518.4 601.2
518.4 586.8 DL 86.4 615.6 504 615.6 DL 2.5(%m)97 590.4 S
(kcompat -v /usr/X386/lib/libXa)115.61 590.4 Q -.65(w.)-.15 G(sa > j.v).65 E
-.15(Fo)97 602.4 S(und 13 ne).15 E 2.5(wg)-.25 G(lobal\(s\))161.32 602.4 Q
(And no)72 632.4 Q 2.5(wg)-.25 G(et the jump.funcs \214le via the)116.19 632.4
Q F3(-f)2.5 E F1(\215ag.)2.5 E 86.4 679.2 14.4 -180.0000 90.0000 DA 86.4 664.8
14.4 -90.0000 180.0000 DA 504 664.8 14.4 -0.0000 -90.0000 DA 504 679.2 14.4
90.0000 0.0000 DA 72 664.8 72 679.2 DL 504 650.4 86.4 650.4 DL 518.4 679.2
518.4 664.8 DL 86.4 693.6 504 693.6 DL 2.5(%m)97 668.4 S
(kcompat -f /usr/X386/lib/libXa)115.61 668.4 Q -.65(w.)-.15 G(sa > j.f).65 E
(Mo)97 680.4 Q -.15(ve)-.15 G 2.5(d1).15 G 2.5(7n)132.53 680.4 S .5 -.25(ew f)
145.03 680.4 T(unction\(s\) to the bottom.).25 E .42(This shuf)72 710.4 R .42(\
\215es the ordering of the globals to be compatable with the old stub, and add\
s the reserv)-.25 F .419(ed sizes found)-.15 F .073(in the GO)72 722.4 R 2.573
(Tf)-.4 G .073(or all the jump.v)123.199 722.4 R .073(ars it kno)-.25 F .073
(ws about. If in the ne)-.25 F 2.573(ws)-.25 G .073(ource you lost some v)
324.622 722.4 R .073(ars/functions, automatic U)-.25 F(DLL tools 2.12)72 768 Q
EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(21)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF(or __DUMMY__ de\214nitions will be placed in the\
 address space and a message lik)72 84 Q(e)-.1 E .4 LW 86.4 116.4 14.4
-180.0000 90.0000 DA 86.4 116.4 14.4 -90.0000 180.0000 DA 504 116.4 14.4
-0.0000 -90.0000 DA 504 116.4 14.4 90.0000 0.0000 DA 72 116.4 72 116.4 DL 504
102 86.4 102 DL 518.4 116.4 518.4 116.4 DL 86.4 130.8 504 130.8 DL
(Used 2 placeholder\(s\) for lost function\(s\))97 120 Q
(will be output to stderr)72 150 Q(.)-.55 E .154
(Theoretically you can redirect the output straight to jump.funcs/v)72 165.6 R
2.654(ars. Ho)-.25 F(we)-.25 E -.15(ve)-.25 G 2.654(ra).15 G -.1(lwa)396.19
165.6 S .153(ys check to see if an).1 F 2.653(yl)-.15 G(ines)502.29 165.6 Q
1.432(were tak)72 177.6 R 1.432(en out or inserted as a result of a b)-.1 F
1.433(ug in the program. When you are satis\214ed mo)-.2 F 1.733 -.15(ve t)-.15
H 1.433(he \214le j.f to).15 F 1.372(jump.funcs and j.v to jump.v)72 189.6 R
1.371(ars. It is also possible to e)-.25 F 1.371
(xtract a jump.import \214le by looking at the "Library)-.15 F
(requires foo.so" lines produced by libinfo.)72 201.6 Q .583
(There is a problem when attempting to get the reserv)72 217.2 R .583
(ed size of the last global as it has the rest of the GO)-.15 F 3.084(Tt)-.4 G
(o)513.4 217.2 Q .875(play with. In theory)72 229.2 R 3.375(,e)-.65 G -.15(ve)
162.92 229.2 S 3.375(nw).15 G .875(hen b)187.805 229.2 R .874(uilding DLL libr\
aries with the standard tools, you are justi\214ed in using the)-.2 F(*e)72
241.2 Q .967(xact* v)-.15 F .967(alue determined by)-.25 F/F2 10/Courier@0 SF
(getsize)3.467 E F1 .967(for the *last* global. Y)3.467 F .968(ou only ha)-1.1
F 1.268 -.15(ve t)-.2 H 3.468(ot).15 G .968(hink hard about appropriate)404.686
241.2 R .304(padding when ne)72 253.2 R 2.804(ws)-.25 G .304
(ymbols get added and the last global becomes an intermideate one. F)154.592
253.2 R .304(or this reason the \214le)-.15 F(generated by the command ")72
265.2 Q F0(mkcompat -v)A F1 2.5("w)C(ill ha)251.78 265.2 Q .3 -.15(ve t)-.2 H
(he lines).15 E 86.4 333.6 14.4 -180.0000 90.0000 DA 86.4 297.6 14.4 -90.0000
180.0000 DA 504 297.6 14.4 -0.0000 -90.0000 DA 504 333.6 14.4 90.0000 0.0000 DA
72 297.6 72 333.6 DL 504 283.2 86.4 283.2 DL 518.4 333.6 518.4 297.6 DL 86.4
348 504 348 DL 2.5(#T)97 301.2 S(he follo)110.61 301.2 Q(wing symbol w)-.25 E
(as found in the old stub b)-.1 E(ut its size)-.2 E 2.5(#c)97 313.2 S
(ould not be determined as it is the last symbol in the table.)108.94 313.2 Q
2.5(#P)97 325.2 S(lease use getsize to determine its size.)110.06 325.2 Q
(00000000 D _vie)97 337.2 Q(wportW)-.25 E(idgetClass libXa)-.4 E 22.5(wV)-.15 G
(ie)301.14 337.2 Q(wport)-.25 E -1.1(Yo)72 367.2 S 2.5(um)1.1 G(ay also ha)98.4
367.2 Q .3 -.15(ve t)-.2 H(he follo).15 E(wing lines if ne)-.25 E 2.5(wg)-.25 G
(lobals are found.)259.75 367.2 Q 86.4 486 14.4 -180.0000 90.0000 DA 86.4 399.6
14.4 -90.0000 180.0000 DA 504 399.6 14.4 -0.0000 -90.0000 DA 504 486 14.4
90.0000 0.0000 DA 72 399.6 72 486 DL 504 385.2 86.4 385.2 DL 518.4 486 518.4
399.6 DL 86.4 500.4 504 500.4 DL 2.5(#A)97 403.2 S -.15(ny)111.72 403.2 S
(thing belo).15 E 2.5(wt)-.25 G(his line is ne)174.1 403.2 Q 2.5(wt)-.25 G 2.5
(ot)236.63 403.2 S(he old library)246.91 403.2 Q 2.5(#N)97 415.2 S
(ote: It is possible that some/all of these could be mo)111.72 415.2 Q -.15(ve)
-.15 G 2.5(dt).15 G 2.5(oj)338.91 415.2 S(ump.ignore)349.19 415.2 Q
(00000000 D _layoutClassRec)97 427.2 Q(libXa)231.44 427.2 Q 22.5(wL)-.15 G
(ayout)289.34 427.2 Q(00000000 D _layoutW)97 439.2 Q 5(idgetClass libXa)-.4 F
22.5(wL)-.15 G(ayout)295.33 439.2 Q(00000000 D _smeThreeDClassRec)97 451.2 Q
(libXa)7.5 E 22.5(wS)-.15 G(meThreeD)302.94 451.2 Q
(00000000 D _smeThreeDObjectClass libXa)97 463.2 Q 22.5(wS)-.15 G(meThreeD)
309.05 463.2 Q(00000000 D _threeDClassRec)97 475.2 Q(libXa)233.65 475.2 Q 22.5
(wT)-.15 G(hreeD)291.55 475.2 Q(....[more deleted].....)97 487.2 Q .795
(This is where you decide whether to create a jump.ignore \214le or lea)72
520.8 R 1.095 -.15(ve t)-.2 H .795(hem in jump.v).15 F .795(ars as ne)-.25 F
3.295(ws)-.25 G .795(ymbols. A)475.935 520.8 R 1.67
(similar procedure must be carried out for jump.funcs if ne)72 532.8 R 4.17(wf)
-.25 G 1.67(unctions are detected. If you decide all ne)333.12 532.8 R(w)-.25 E
2.404(globals should remain then you need do nothing else as the)72 544.8 R F2
(mkstubs)4.904 E F1(and)4.904 E F2(mkimage)4.904 E F1 2.404(programs accept)
4.904 F(comments in the jump.v)72 556.8 Q(ars and jump.funcs \214les.)-.25 E
(No)72 572.4 Q 4.089(wr)-.25 G 1.589(e-compile for the second pass. Use)98.609
572.4 R F2(getsize)4.088 E F1 1.588
(as usual to determine the size of the last and/or ne)4.088 F(w)-.25 E 2.679
(globals. Then do the standard)72 584.4 R F2(mkimage)5.179 E F1(/)A F2(mkstubs)
A F1 2.679(commands with the information you obtained from)5.179 F .995
(running libinfo abo)72 596.4 R -.15(ve)-.15 G 5.995(.A).15 G 3.495(si)176.065
596.4 S 3.495(sa)186.23 596.4 S -.1(lwa)198.055 596.4 S .995
(ys good practise, use).1 F F2(verify-shlib)3.495 E F1 .995(to v)3.495 F .995
(erify the ne)-.15 F 3.495(wl)-.25 G(ibrary)454.49 596.4 Q 3.495(.E)-.65 G
3.495(tv)489.825 596.4 S(oila,)500.9 596.4 Q(drop in your ne)72 608.4 Q 2.5(ws)
-.25 G(hared library if all is OK.)146.74 608.4 Q(DLL tools 2.12)72 768 Q EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)471.95 48 T(22)3.3 E/F1 10
/Times-Bold@0 SF(A7. A)72 84 Q(ppendix - Short Summary Of Pr)-.25 E(ograms)-.18
E/F2 10/Times-Roman@0 SF(Program: jumpas)72 102 Q(Input \214les:)97 126 Q
(jump.v)122 138 Q 8.03(ars Global)-.25 F(data to be e)2.5 E(xported.)-.15 E
6.67(jump.func Global)122 150 R(functions to be e)2.5 E(xported.)-.15 E -1.11
(jump.ignore Globals)122 162 R(not to be e)2.5 E(xported)-.15 E -2.23
(jump.import Globals)122 174 R(imported from another library)2.5 E(.)-.65 E
(Output \214le:)97 198 Q 11.66(jump.log All)122 210 R
(globals not listed in one of the)2.5 E(abo)172 222 Q .3 -.15(ve 3 \214)-.15 H
(les.).15 E(_GV)122 234 Q 4.13(AR_nnnnn.s Declaration)-1.35 F
(for initialized v)2.5 E(ariable.)-.25 E 1.11(_GCMN_nnnnn.s Declaration)122 246
R(for common v)2.5 E(ariable.)-.25 E
(/tmp/jumpas.log Listing of all of the assembly code re)122 258 Q(writes)-.25 E
(that are performed in order to add indirections)172 270 Q(to the global v)172
282 Q(ariables being imported)-.25 E(or e)172 294 Q(xported.)-.15 E 3.173
(The input and output \214les are in the current w)97 315.6 R 3.174
(orking directory unless the en)-.1 F 3.174(vironment v)-.4 F(ariable)-.25 E
1.454(JUMP_DIR is set. If JUMP_DIR is set, it is assumed to be a pre\214x to b\
e prepended in front of all of the)72 327.6 R .494(\214lenames. F)72 339.6 R
.494(or e)-.15 F .495(xample, if you set it to /tmp/ then all of the temporary\
 \214les will go into /tmp. The form of the)-.15 F(GV)72 351.6 Q
(AR and GCMN names depends upon whether the LONG_FILEN)-1.35 E
(AMES option is speci\214ed.)-.35 E(Program: mkimage, mkstubs)72 369.6 Q
(Command line options:)97 393.6 Q(-j nn)122 405.6 Q(Memory to reserv)158.11
405.6 Q 2.5(ef)-.15 G(or jump table in bytes.)239.88 405.6 Q(-g nn)122 417.6 Q
(Memory to reserv)160.33 417.6 Q 2.5(ef)-.15 G(or GO)242.1 417.6 Q 2.5(Ti)-.4 G
2.5(nb)278.36 417.6 S(ytes.)290.86 417.6 Q(-v v)122 429.6 Q 2.5(ersion V)-.15 F
(ersion number to store in jump table.)-1.11 E(This)5 E
(should be in the format M.N or M.N.P)157 441.6 Q(-a of)122 453.6 Q 5
(fset Memory)-.25 F(address for sharable library)2.5 E(-d of)122 465.6 Q 5
(fset Memory)-.25 F(address for data section in sharable)2.5 E
(library \(only used with libc\).)157 477.6 Q(-l outlib)122 489.6 Q
(Speci\214cation of output library name.)7.5 E(It should)5 E
(look something lik)157 501.6 Q 2.5(e")-.1 G 2.5(/lib/libfoo". shr)242.93 501.6
R(-b)-.2 E(uild)-.2 E(will append the .so.<major> automatically)157 513.6 Q(.)
-.65 E(-u symbol)122 525.6 Q(\(mkstubs only\).)7.5 E(Add an e)5 E
(xternal reference)-.15 E(to symbol in each module in the stub library)157
537.6 Q(.)-.65 E 21.95(-G \(mkimage)122 549.6 R(only\) Generate a v)2.5 E
(ersion of the library)-.15 E
(that will print the name of each function on stderr)157 561.6 Q
(as it is being entered.)157 573.6 Q(Useful for deb)5 E(ugging.)-.2 E 25.84
(-f F)122 585.6 R(orce changes in parameters.)-.15 E 25.84(-- Indicates)122
609.6 R(the end of the options for shr)2.5 E(-b)-.2 E(uild.)-.2 E(An)157 621.6
Q(ything after this will be passed to the link)-.15 E(er)-.1 E
(when creating the sharable image.)157 633.6 Q(<link)122 645.6 Q 5(opt> Y)-.1 F
(ou must specify whate)-1.1 E -.15(ve)-.25 G 2.5(rl).15 G(ibraries and object)
282.5 645.6 Q(\214les are needed in order to link the sharable)157 657.6 Q
(image.)157 669.6 Q(DLL tools 2.12)72 768 Q EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)72 48 T(23)3.3 E 288 48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF(Using DLL T)389.34 48 Q(ools W)-.92 E(ith Linux)
-.55 E/F1 10/Times-Roman@0 SF(Input-\214les \(in cwd or JUMP_DIR\):)97 84 Q
(jump.v)122 96 Q 8.03(ars Global)-.25 F(data to be e)2.5 E(xported.)-.15 E 2.78
(jump.funcs Global)122 108 R(functions to be e)2.5 E(xported.)-.15 E 1.67
(jump.undef \(mkstubs\))122 120 R(List of other libraries which need)2.5 E
(to be loaded with this one is loaded.)172 132 Q(_GV)122 144 Q 4.13
(AR_nnnnn.s Declaration)-1.35 F(for initialized v)2.5 E(ariable number n.)-.25
E 1.11(_GCMN_nnnnn.s Declaration)122 156 R(for common v)2.5 E
(ariable number n.)-.25 E(Output \214les:)97 192 Q 10.55(__jump.s Jump)122 204
R(table and global data for jump library)2.5 E(.)-.65 E 1.67
(jump.undef \(mkimage\))122 216 R F0(Example:)72 240 Q F1
(mkimage -l /lib/libtest -a 70000000 -v 3.2 -j 4096 \\)5 E(-- my\214le.o mylib)
122 252 Q(.a -lc `gcc --print` -lc)-.4 E .7(This will b)72 270 R .7(uild the s\
tub library libtest.a and the sharable jump-table library libtest.so.3, both o\
f which will be)-.2 F(left in the current w)72 282 Q(orking directory)-.1 E(.)
-.65 E/F2 10/Times-Bold@0 SF(A8. A)72 306 Q 2.5(ppendix -)-.25 F
(General Rules f)2.5 E(or editing jump.*:)-.25 E F1 14.17(1\) If)72 321.6 R .25
(you are not using the LONG_FILEN)2.75 F .25(AMES option to the tools, you ha)
-.35 F .55 -.15(ve t)-.2 H 2.75(ob).15 G 2.75(ev)418.39 321.6 S .25
(ery careful about ho)430.43 321.6 R(w)-.25 E .322
(you change the \214le jump.v)97 333.6 R .322(ars. *An)-.25 F .322
(y* change other than modifying the sizes in jump.v)-.15 F .321
(ars will mean that)-.25 F .298(you will ha)97 345.6 R .598 -.15(ve t)-.2 H
2.798(or).15 G .298(ecompile the library)168.392 345.6 R 2.798(.A)-.65 G 2.798
(ne)261.396 345.6 S .299
(xception is if you are adding a second library to the original,)273.484 345.6
R(and you add symbols to the *end* of jump.v)97 357.6 Q(ars and jump.funcs.)
-.25 E 14.17(2\) If)72 373.2 R .914
(you change the order of the entries at all \(with the e)3.414 F .914
(xception of adding ne)-.15 F 3.414(we)-.25 G .914(ntries at the end\), you)
427.814 373.2 R(should delete all of the _G*.s \214les and then reb)97 385.2 Q
(uild the library)-.2 E(.)-.65 E 14.17(3\) If)72 400.8 R .105
(you only change an of)2.605 F .106(fset for a v)-.25 F .106
(ariable, \(without changing the order of an)-.25 F 2.606(yl)-.15 G .106
(ines, deleting an)415.636 400.8 R 2.606(yl)-.15 G .106(ines or)491.354 400.8 R
1.283(adding an)97 412.8 R 3.783(yl)-.15 G 1.283(ines\), you can just run)
148.856 412.8 R/F3 10/Courier@0 SF(mkimage)3.782 E F1(or)3.782 E F3(mkstubs)
3.782 E F1(ag)3.782 E 1.282(ain. Y)-.05 F 1.282
(ou do not need to recompile the)-1.1 F(library)97 424.8 Q(.)-.65 E 14.17
(4\) T)72 440.4 R .845 -.1(wo d)-.8 H(if).1 E .645(ferent data items cannot o)
-.25 F -.15(ve)-.15 G .645(rlap in memory).15 F 3.145(.T)-.65 G .645
(his means that you must specify a size that is the)317.52 440.4 R .096
(same size or lar)97 452.4 R .096(ger than the actual size of the v)-.18 F .095
(ariable. The assembler will crash if you attempt to do this.)-.25 F .09
(If you are using the LONG_FILEN)97 468 R .09(AMES option, then you ha)-.35 F
.391 -.15(ve a l)-.2 H .091(ot more \215e).15 F(xibility)-.15 E 2.591(.T)-.65 G
.091(he only time you)450.627 468 R
(will need to recompile the library is if the library source code changes.)72
480 Q(DLL tools 2.12)72 768 Q EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Italic@0 SF(Using DLL T)72 48 Q(ools W)-.92 E(ith Linux)-.55 E 288
48 EBEGIN
%%BeginDocument: logo.eps
%%BoundingBox: (atend)
% A Proposed Logo for Linux...
gsave
% ps-hack by
%   Jeff Moore (jbm@sbi.com) 13 Aug 92
%
% based on logo design by
%   James P. Callison (callison@uokmax.ecn.uoknor.edu)


% Tweakables:

/llTriangleTopRGB { 0.96 0.95 1.0 } def	% These are guesses because...
/llTriangleBottomRGB { 0.4 0.3 0.75 } def% ...I'm not sure about my test...
/llBarRGB { 0.8 0.0 0.5 } def		% ...output device.

/llTextRGB { 0.0 0.0 0.0 } def		% Think I have this right.

/llFontFamily /Times-Italic findfont def

/llDoGradient false def			% Do funky shading of triangle?
/llTriangleSolidRGB { 0.8 0.7 1.0 } def	% If not, use this.
/llBarLineCap 0 def

% More tweakable relationships.  Silly hack to avoid calculating
%  constants which depend on llHeight more than once per logo call.
/llFigureDependantConstants {		% --
  /llWidth llHeight 1.17 mul def

  /llBarLineWidth llHeight 19 div def
  /llBarYDelta llHeight -0.48 mul def

  /llBigLPoints llHeight 0.63 mul def	% ...height of char < "points"...
  /llInuxPoints llBigLPoints 0.415 mul def
  /llRelTextPoints llBigLPoints 0.165 mul def
} def


/llFont {				% points --
  llFontFamily exch scalefont setfont
} def


% some rgb-triple handlers (can this be necessary?)

/rgbadd {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  add					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll add				% -- b1 b0 rsum gsum
  4 2 roll add				% -- rsum gsum bsum
} def

/rgbsub {				% r1 g1 b1 r0 g0 b0 -- rsum gsum bsum
  6 -1 roll				% -- g1 b1 r0 g0 b0 r1
  4 -1 roll				% -- g1 b1 g0 b0 r1 r0
  sub					% -- g1 b1 g0 b0 rsum
  5 -1 roll				% -- b1 g0 b0 rsum g1
  4 -1 roll sub				% -- b1 b0 rsum gsum
  4 2 roll sub				% -- rsum gsum bsum
} def

/rgbdiv {				% r g b d -- r/d g/d b/d
  4 -1 roll 1 index div			% -- g b d r/d
  4 -1 roll 2 index div			% -- b d r/d g/d
  4 2 roll div				% -- r/d g/d b/d
} def

/rgbdup {				% r g b -- r g b r g b
  3 copy
} def

/rgb1index {				% rgb1 rgb0 -- rgb1 rgb0 rgb1
  6 3 roll 3 copy 9 3 roll
} def

/rgbpop {				% r g b --
  pop pop pop
} def


% subfunctions which render assume starting at UL of logo...

/llDrawTriangle {			% --
  llDoGradient {
    % Never tried this color stuff before.  This may be stupidly
    %  complicated and expensive for the job...  We're trying to
    %  tromp "linearly" through RGB color-space between the
    %  supplied endpoints.  If hue changes, this seems to cause
    %  color-banding with the previewers I've tried; and successive
    %  FP additions result in errors by end...

    % (keep some variables in lieu of stack machismo:)
    /lltYStep 0 1 idtransform exch pop def % device Y unit in user coords
    /lltXStep lltYStep neg llWidth mul llHeight div 2 div def
    /lltSliceWidth llWidth def
    lltYStep neg setlinewidth 0 setlinecap
    
    llTriangleTopRGB llTriangleBottomRGB rgbsub % rgbdelta
    llHeight lltYStep div		% rgbdelta -- rgbdelta numdivs
    rgbdiv				% rgbdelta numdivs -- rgbstep
    
    llTriangleTopRGB			% rgbstep -- rgbstep toprgb
    0 lltYStep neg llHeight {
      pop
      gsave
	rgbdup setrgbcolor		% rgbstep thisrgb
	/lltSliceWidth lltSliceWidth dup 0 rlineto stroke lltXStep dup add sub def
      grestore
      lltXStep lltYStep rmoveto
      rgb1index rgbadd			% rgbstep thisrgb -- rgbstep nextrgb
    } for
    rgbpop rgbpop
  } {
    % Just punt with a single color
    llWidth 0 rlineto
    llWidth -2 div llHeight neg rlineto
    closepath
    llTriangleSolidRGB setrgbcolor fill
  } ifelse
} def

/llDrawBar {				% --
  llBarLineCap setlinecap
  0 llBarYDelta rmoveto
  llBarRGB setrgbcolor llBarLineWidth setlinewidth
  llWidth 0 rlineto stroke
} def

/llDrawLogo {				% llx lly height reltext --

  /llReleaseText exch def		% llx lly height reltext -- llx lly height
  /llHeight exch def			% llx lly height -- llx lly
  moveto				% llx lly --

  llFigureDependantConstants

  gsave llDrawTriangle grestore
  gsave llDrawBar grestore
  
  % big fat "L"
  llWidth 0.13 mul llBarYDelta llBigLPoints 0.190 mul sub rmoveto
  llBigLPoints llFont
  llTextRGB setrgbcolor
  (L) show

  % scribble in release text
  gsave
    llRelTextPoints dup llFont
    dup -0.09 mul exch 0.1 mul rmoveto	% nestle against L; raise baseline a hair...
    llReleaseText show
  grestore
  
  % "INUX" (sorry, I like it better when it doesn't dangle outside triangle...)
  llBigLPoints -0.32 mul llBigLPoints 0.25 mul rmoveto
  llInuxPoints llFont
  (INUX) show

} def


% Do it!
%%200 700 190.9 (RELEASE 0.99p5) llDrawLogo % approx size, pos as supplied by callison

[1 0 0 -1 300 10] concat

0 0 50 Version llDrawLogo % approx size, pos as supplied by callison

%% 40 675 450 (RELEASE 0.97) llDrawLogo	% big 'un
%% 270 250 80 (RELEASE 1.0) llDrawLogo	% A Goal
%%BoundingBox: 250 650 311 700 
grestore
%%EndDocument
EEND/F0 10/Times-Italic@0 SF -1 -.8(Pa g e)476.95 48 T(1)3.3 E/F1 12
/Times-Bold@0 SF -1.104(Ta)250.086 84 S(ble of Contents)1.104 E/F2 10
/Times-Roman@0 SF 26(1. Introduction)72 123.6 R -2.5 10
(........................... 2)8.46 H 26(2. Preparation)72 139.2 R -2.5 10
(........................... 2)165.9 139.2 T 26(3. Generating)72 154.8 R
(The DLL Descriptor Files - Ne)2.5 E 2.5(wL)-.25 G 1.26(ibraries .)294.65 154.8
R -2.5 10(............. 4)340.9 154.8 T 26(4. Generating)72 170.4 R
(The DLL Descriptor Files - Old Libraries)2.5 E -2.5 10(.............. 5)7.39 H
26(5. Compiling)72 186 R(The Library - 2nd P)2.5 E 6.11(ass .)-.15 F -2.5 10
(................... 5)265.9 186 T 26(6. Building)72 201.6 R
(Stub Library And Image)2.5 E -2.5 10(.................... 6)9.85 H 26(7. V)72
217.2 R 8.74(eri\214cation .)-1.11 F -7.5 10(.......................... 1)178.4
217.2 T(0)513.4 217.2 Q 26(8. T)72 232.8 R 2.14(roubleshooting .)-.35 F -7.5 10
(......................... 1)190.9 232.8 T(1)513.4 232.8 Q 18.78(A1. Appendix)
72 248.4 R 2.5(-H)2.5 G .5 -.25(ow T)162.99 248.4 T(he Jumpas Program W).25 E
10.09(orks .)-.8 F -7.5 10(............... 1)315.9 248.4 T(5)513.4 248.4 Q
18.78(A2. Appendix)72 264 R 2.5(-H)2.5 G .5 -.25(ow T)162.99 264 T
(he Mkimage Program W).25 E 1.76(orks .)-.8 F -7.5 10(............... 1)315.9
264 T(6)513.4 264 Q 18.78(A3. Appendix)72 279.6 R 2.5(-H)2.5 G .5 -.25(ow T)
162.99 279.6 T(he Getsize Program W).25 E 10.1(orks .)-.8 F -7.5 10
(............... 1)315.9 279.6 T(7)513.4 279.6 Q 18.78(A4. Appendix)72 295.2 R
2.5(-H)2.5 G .5 -.25(ow T)162.99 295.2 T(he Mkstubs Program W).25 E 5.64
(orks .)-.8 F -7.5 10(............... 1)315.9 295.2 T(7)513.4 295.2 Q 18.78
(A5. Appendix)72 310.8 R 2.5(-E)2.5 G(xplanation Of Ho)161.88 310.8 Q 2.5(wA)
-.25 G(nd Wh)248.56 310.8 Q 2.5(yD)-.05 G(ynamic Linking Is Implemented)290.17
310.8 Q -7.5 10(...... 1)9.63 H(8)513.4 310.8 Q 11.28(A5.1. Theory)72 326.4 R
(of operation:)2.5 E -7.5 10(........................ 1)203.4 326.4 T(9)513.4
326.4 Q 18.78(A6. Appendix)72 342 R 2.5(-E)2.5 G(xample of b)161.88 342 Q
(uilding compatable DLL libraries)-.2 E -7.5 10(............ 2)9.8 H(0)513.4
342 Q 18.78(A7. Appendix)72 357.6 R 2.5(-S)2.5 G(hort Summary Of Programs)
161.33 357.6 Q -7.5 10(.................. 2)5.69 H(2)513.4 357.6 Q 18.78
(A8. Appendix)72 373.2 R 2.5(-G)5 G(eneral Rules for editing jump.*:)165.49
373.2 Q -7.5 10(................ 2)303.4 373.2 T(3)513.4 373.2 Q
(DLL tools 2.12)72 768 Q EP
%%Trailer
end
%%EOF
