%{
%}

#  Declaration Syntax
#
#      declarations
#
%{
#define Globdcl(x)	if (!nocode) treeprt(x); treefree(x)
#define Linkdcl(x)	if (!nocode) treeprt(x); treefree(x)
#define Procdcl(x)	if (!nocode) treeprt(x); treefree(x)
#define Recdcl(x)	if (!nocode) treeprt(x); treefree(x)
#define Invocdcl(x)	if (!nocode) treeprt(x); treefree(x)
%}

#
#      syntax subsidiary to declarations
#
Arglist1()	""
Arglist2(x)	x
Arglist3(x,y,z)	x	y	z
Global0(x)	""
Global1(x,y,z)	x	" "	z	"\n"
Initial1()	""
Initial2(x,y,z)	x	" "	y	z	"\n"
Invocable(x,y)		x 	" "	y	"\n"
Invoclist(x,y,z)	x	y	z
Invocop1(x)		x
Invocop2(x)		quote(x, "\"")
Invocop3(x,y,z)		quote(x, "\"")	y	z
Link(x,y)	x	" "	y	"\n"
Lnkfile1(x)	x
Lnkfile2(x)	quote(x, "\"")
Lnklist(x,y,z)	x	y	z
Local(x)	x	" "
Locals1()	""
Locals2(w,x,y,z)	w	x	y	z	"\n"
Proc1(u,v,w,x,y,z)	u	v	"\n"	w	x	y	z	"\n"
Procbody1()	""
Procbody2(x,y,z)	x	y	"\n"	z
Prochead1(x,y)	""
Prochead2(u,v,w,x,y,z)	u	" "	v	x	y	z
Record1(x,y)	""
Record2(u,v,w,x,y,z)	u	" "	v	x	y	z	"\n"
Static(x)	x	" "

#
#  Expression Syntax
#
#      elements
#
Cliter(x)	quote(x, "'")
Ident(x)	x
Idlist(x,y,z)	x	y	z
Iliter(x)	x
Keyword(x,y)	x	y
Kfail(x,y)	x	y
Nexpr()	""
Rliter(x)	x
Sliter(x)	quote(x, "\"")
Var(x)	x

#
#      reserved-word syntax
#
Break(x,y)	x	" "	y
Case(u,v,w,x,y,z)	u	" "	v	" "	w	x	"\n"	y	"\n"	z
Caselist(x,y,z)	x	y	"\n"	z
Cclause0(x,y,z)	x	y	z
Cclause1(x,y,z)	x	y	z
Create(x,y)	x	" "	y
Every0(x,y)	x	" "	y
Every1(w,x,y,z)	w	" "	x	" "	y	" "	z
Fail(x)	x
If0(w,x,y,z)	w	" "	x	" "	y	" "	z
If1(u,v,w,x,y,z)	u	" "	v	" "	w	" "	x	" "	y	" "	z
Next(x)	x	" "
Repeat(x,y)	x	" "	y
Return(x,y)	x	" "	y
Suspend0(x,y)	x	" "	y
Suspend1(w,x,y,z)	w	" "	x	" "	y	" "	z
To0(x,y,z)	x	" "	y	" "	z
To1(v,w,x,y,z)	v	" "	w	" "	x	" "	y	" "	z
Unot(x,y)	x	" "	y
Until0(x,y)	x	" "	y
Until1(w,x,y,z)	w	" "	x	" "	y	" "	z
While0(x,y)	x	" "	y
While1(w,x,y,z)	w	" "	x	" "	y	" "	z

#
#      operator syntax
#
#      binary operators
#
<bop>(x,y,z)	x	" "	y	" "	z
<aop>(x,y,z)	x	" "	y	" "	z
<bcs>(x,y,z)	x	" "	y	" "	z

#
#      unary operators
#
<uop>(x,y)	x	y
<ucs>(x,y)	x	y

#
#      miscellaneous expressions
#
Apply(x,y,z)	x	y	z
Array(w,x,y,z)	w	x	y	z
Brace(x,y,z)	x	"\n"	y	"\n"	z
Brack(x,y,z)	x	y	z
Colon(x)	x
Compound(x,y,z)	x	y	"\n"	z
Elst0(x)	x
Elst1(x,y,z)	x	y	z
Field(x,y,z)	x	y	z
Invoke(w,x,y,z)	w	x	y	z
Mcolon(x)	x
Paren(x,y,z)	x	y	z
Pcolon(x)	x
Pdco0(x,y,z)	x	y	z
Pdco1(w,x,y,z)	w	x	y	z
Pdcolist0(x)	x
Pdcolist1(x,y,z)	x	y	z
Progend(x,y)	""
Section(u,v,w,x,y,z)	u	v	w	x	y	z
Subscript(w,x,y,z)	w	x	y	z
