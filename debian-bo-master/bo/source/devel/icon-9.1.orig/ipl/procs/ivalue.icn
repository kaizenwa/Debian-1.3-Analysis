############################################################################
#
#	File:     ivalue.icn
#
#	Subject:  Procedures to convert string to Icon value
#
#	Author:   Ralph E. Griswold
#
#	Date:     May 28, 1994
#
############################################################################
#
#  This procedure turns a string into the corresponding Icon value.
#  It can handle all literals, most keywords, and non-local variables.
#  For example, ivalue("upto") produces the function upto().
#  (Warning:  The local identifier s___ gets exported.)
#
############################################################################

link escape

invocable all

procedure ivalue(s___)

   return (
      numeric(s___) |					# integer or real
      (s___ ? {
         2(="\"", escape(tab(-1)), ="\"") |		# string literal
         2(="'", cset(escape(tab(-1))), ="'") |		# cset literal
         (pos(0) & &null) |				# empty string = &null
         (="&" & case tab(0) of {			# possible keyword
            "ascii":       &ascii
            "clock":       &clock
            "collections": &collections
            "cset":        &cset
            "date":        &date
            "dateline":    &dateline
            "e":           &e
            "errout":      &errout
            "file":        &file
            "host":        &host
            "input":       &input
            "lcase":       &lcase
            "letters":     &letters
            "level":       &level
            "null":        &null
            "output":      &output
            "phi":         &phi
            "pi":          &pi
            "time":        &time
            "ucase":       &ucase
            "version":     &version
            default:       fail				# need other keywords
            })
         }
      ) |
      variable(s___) |					# variable?
      {
         s___ ?:= {					# image of procedure?
            =("function " | "procedure " | "record contructor ") &
            tab(0)
            }
         proc(s___, 2 | 1 | 3)				# name of procedure?
         }
   )							# fail if none

end
