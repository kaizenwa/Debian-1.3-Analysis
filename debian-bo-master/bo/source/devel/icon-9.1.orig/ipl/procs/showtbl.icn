############################################################################
#
#	File:     showtbl.icn
#
#	Subject:  Procedure to show contents of a table
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 21, 1994
#
############################################################################
#
#
#  showtbl(title, tbl, sort_type, limit, sort_order, posit,
#    w1, w2, gutter, f1, f2) displays tbl according to the arguments given.
#
#  The arguments are:
#
#	name		meaning			default/alternative
#
#	title		heading title		""
#	sort_type	type of sorting		"ref"/"val"
#	limit		lines of table output	essentially infinite
#	sort_order	increasing/decreasing	"incr"/"decr"
#	posit		first column		"val"/"ref"
#	w1		width of 1st column	8
#	w2		width of 2nd column	60
#	gutter		width between columns	3
#	f1		function of 1st column	right
#	f2		function of 2nd column	left
#
#
#  showtbl() returns a record with the first element being a count of
#  the size of the table and the second element the number of lines
#  written.
############################################################################
#
#  This procedure just grew.  It needs rewriting.
#
############################################################################
#
#  Deficiencies:  Several features are not yet implemented.  sort_order
#                 and posit have no effect.  In the case of sort_type
#                 "val", the sorting order is decreasing.
#
############################################################################

procedure showtbl(title, tbl, sort_type, limit, sort_order, posit, w1, w2,
   gutter, f1, f2)
      local count, lst, i, number

   /title := ""
   if type(tbl) ~== "table" then
      stop("*** invalid table argument to showtbl()")
   sort_type := case sort_type of {
      "ref" | &null:  3
      "val": 4
      default:  stop("*** invalid sort type in showtbl()")
      }
   /limit := 2 ^ 30			# essentially infinite
   sort_order := case sort_order of {
      "incr" | &null:  "incr"
      "decr":  "decr"
      default:  stop("*** invalid sort order in showtbl()")
      }
   posit := case posit of {
      "val" | &null:   "val"
      "ref":  "ref"
      default:  stop("*** invalid column position in showtbl()")
      }
   /w1 := 8
   /w2 := 60
   /gutter := repl(" ", 3)
   /f1 := right
   /f2 := left

   number := 0

   count := 0
   every count +:= !tbl

   write("\n", title, ":\n")

   lst := sort(tbl, sort_type)

   if sort_type = 3 then {
      every i := 1 to *lst - 1 by 2 do {
         number +:= 1
         if number > limit then break
         else  write(f1(lst[i + 1], w1), gutter, trim(f2(lst[i], w2)))
         }
      }
   else {
      every i := *lst to 1 by -2 do {
         number +:= 1
         if number > limit then break
         else write(f1(lst[i], w1), gutter, trim(f2(lst[i - 1], w2)))
         }
      }

   return [count, number]

end
