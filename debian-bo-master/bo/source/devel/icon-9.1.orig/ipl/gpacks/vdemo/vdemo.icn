###########################################################################
#
#	File:     vdemo.icn
#
#	Subject:  Program to demonstrate vidgets
#
#	Author:   Jon Lipp
#
#	Date:     June 21, 1994
#
###########################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################
#
#  Links:  dialog, options, vidgets, vdialog, vmenu, vradio, vbuttons,
#	   vtest, vscroll
#
############################################################################

link dialog, options, vidgets, vdialog, vmenu, vradio, vbuttons, vtext
link vscroll

global dialog

procedure main(args)
   local opts, font, win, ht, title, wid, row, pad, root, cv, i, ti, scb
   local tm, s, max, rb1, rb2, rb3
   local FontTypeSubMenu, FontSubMenu, CompMemSubMenu, ExecMemSubMenu 
   local FileMenu, OptionsMenu

   opts := options(args, "f:wh")
   font := \opts["f"]
   wid := \opts["w"]
   ht := \opts["h"]
   title := "All the vidgets."



   win:= WOpen("label=" || title,
      "size=" || (\wid | 550) || "," || (\ht | 550)) |
         stop("*** can't open window")

   pad := WAttrib(win, "fheight")+10
   row := []
   every i := 0 to 9 do put(row, i*pad)

   root := Vroot_frame(win)

## Vdialog
   dialog:= Vdialog(win)
   
   VRegister(dialog, Vtext(win, "Button Text: ", ,1), 0, row[1])
   VRegister(dialog, Vtext(win, "Button Id  : ", ,2), 0, row[2])
   VRegister(dialog, Vtext(win, "Callback   : ", ,3), 0, row[3])
   VRegister(dialog, Vtext(win, "X: ", ,4,3, &digits), 10, row[5])
   VRegister(dialog, Vtext(win, "Y: ", ,5,3, &digits), 10, row[6])
   VRegister(dialog, Vtext(win, "W: ", ,6,3, &digits), 100, row[5])
   VRegister(dialog, Vtext(win, "H: ", ,7,3, &digits), 100, row[6])
   VRegister(dialog, Vradio_buttons(win, ["solid", "dashed"] , ,8), 200, row[5])
#
#  Attach a slider to a textual input device.
#
   cv := Vcoupler()
   VAddClient(cv, ti := Vtext(win, , cv, 9, 3, &digits))
   VAddClient(cv, scb := Vvert_scrollbar(win, cv, 10, 75, , 0, 100, 1))
   VInsert(dialog, scb, 275, row[5])
   VRegister(dialog, ti, 300, row[5])
#
#  Control buttons.
#
   Vbutton(dialog, 100, row[8], win, " Ok ", ,V_OK)
   Vbutton(dialog, 200, row[8], win, "Cancel", ,V_CANCEL)

   VFormat(dialog)

   Vmessage(root, 10, 0.5, win, "Press mouse button to open a dialog.")

## Vsub_menu, Vmenu_bar
#
# Have to create the menu system bottom-up, so... start at the deepest leaves.
#
# Use Vsub_menu to build sub-menus. 
#
# Once the sub-menus have been built, use Vmain_menu to make the menu bar.
#
   FileMenu := Vsub_menu(win, 
	"New", m_cb,
	"Open", m_cb,
	"Close", m_cb,
	"Save", m_cb,
	"Save As", m_cb,
	"Print", m_cb,
	"--------", ,
	"Quit", my_exit
	)

   FontTypeSubMenu := Vsub_menu(win,
	"Normal", m_cb,
	"Bold", m_cb,
	"Italic", m_cb,
	"Underline", m_cb,
	)

   FontSubMenu := Vsub_menu(win, 
	"Times", FontTypeSubMenu,
	"Courier", FontTypeSubMenu,
	"Palatino", FontTypeSubMenu,
	"Schoolbook", FontTypeSubMenu,
	"Helvetica", FontTypeSubMenu,
	"Symbol", m_cb,
	"Arial", FontTypeSubMenu,
	"Sans Serif", FontTypeSubMenu,
	)

   CompMemSubMenu := Vsub_menu(win, 
	"Constant Table Size", m_cb,
	"Field Table Size", m_cb,
	"Global Symbol Table Size", m_cb,
	"Identifier Table Size", m_cb,
	"Local Symbol Table Size", m_cb,
	"Line Number Space", m_cb,
	"String Space", m_cb,
	"File Name Table Size", m_cb,
	)

   ExecMemSubMenu := Vsub_menu(win, 
	"Block Region", m_cb,
	"String Region", m_cb,
	"Evaluation Stack", m_cb,
	"Co-expression Blocks", m_cb,
	"Qualifier Pointer Region", m_cb,
	)

   OptionsMenu := Vsub_menu(win, 
	"Font", FontSubMenu,
	"Font Size", m_cb,
	"--------", ,
	"Parameter String", m_cb,
	"Library Folders", m_cb,
	"Compiler Memory", CompMemSubMenu,
	"Execution Memory", ExecMemSubMenu
	)

   tm := Vmenu_bar(root, 0, 0, win, 
	"File", FileMenu,
	"Options", OptionsMenu
	)

## Vline
   VInsert(root, Vline(win, , tm.ah, , tm.ah))

   Vbutton(root, 10, 40, win, "Push Me", popup, "This is a notice button.")

## Vpull_down_pick_menu
   s := ["Times", "Helvetica", "NewCentury", "Symbol", "Palatino",
         "Zapf Chancery"]
   max := 0
   every i := !s do max <:= *\i
   Vpull_down_pick_menu(root, 200, 40, win, s, pd_cb, "pull-down", max+1)

## Vradio_buttons
   rb1:= Vhoriz_radio_buttons(root, 10, 0.70, win,
      ["Here", "is", "a", "list", "of", "radio", "buttons"],
      rb_cb, 1)
   rb3:= Vradio_buttons(root, -10, -10, win,
      ["Here", "is", "a", "list", "of", "radio", "buttons"],
      rb_cb, 2, V_CIRCLE)

   VSet(rb1, "list")

   VResize(root)
   GetEvents(root, PopUpDialog)
end

procedure PopUpDialog(e)
   local i, nl
   static data
   initial data := ["one", "", "nothing", 23, 67, 12, 23, "solid", 17]

   if e === "q" then stop()
   if e === (&lpress |& mpress | &rpress) then {
      nl := VOpenDialog(dialog, &x, &y, data, " Ok ")
      every i := !nl do write(i)
      data := nl
      }
end

procedure pd_cb(vid, val)
   Notice(vid.win, "Chose: " || val)
end

procedure rb_cb(vid, val)
   write(vid.id, ": ", val)
end

procedure m_cb(vid, val)
   write("\nmenu bar: ", vid.s) 
   writes("choice  : ")
   every writes(!val, " ")
end

procedure popup(vid)
   Notice(vid.win, vid.id)
end

procedure my_exit()
   exit()			# built-in not allowed directly
end
