############################################################################
#
#	File:     evdefs.icn
#
#	Subject:  Definitions for event codes
#
#	Author:   Ralph E. Griswold
#
#	Date:     November 9, 1995
#
############################################################################
#
#  This file contains definitions for event codes.
#
#  This file is intended for use with event monitors running under
#  MT Icon.
#
############################################################################
#
#  This file is generated automatically from monitor.h.
#
############################################################################

$define T_Coexpr       19
$define T_Cset         5
$define T_External     20
$define T_File         6
$define T_Integer      2
$define T_Kywdevent    26
$define T_Kywdint      21
$define T_Kywdpos      22
$define T_Kywdstr      25
$define T_Kywdsubj     23
$define T_Kywdwin      24
$define T_Lelem        10
$define T_List         9
$define T_Lrgint       3
$define T_Null         1
$define T_Proc         7
$define T_Real         4
$define T_Record       8
$define T_Refresh      18
$define T_Selem        12
$define T_Set          11
$define T_Slots        16
$define T_String       0
$define T_Table        13
$define T_Telem        14
$define T_Tvsubs       17
$define T_Tvtbl        15
$define C_LastContext  7
$define E_Aconv        "I"		# Conversion attempt 
$define E_Alien        "z"		# Alien allocation 
$define E_Assign       "\347"		# Assignment 
$define E_Base         "<"		# Base address of storage region 
$define E_BlkDeAlc     "-"		# Block deallocation 
$define E_Bsusp        "b"		# Suspension from operation 
$define E_Coact        "A"		# Co-expression activation 
$define E_Coexpr       "x"		# Co-expression allocation 
$define E_Cofail       "D"		# Co-expression failure 
$define E_Collect      "G"		# Garbage collection 
$define E_Comment      "#"		# Comment 
$define E_Coret        "B"		# Co-expression return 
$define E_Cset         "e"		# Cset allocation 
$define E_Ecall        "c"		# Call of operation 
$define E_Efail        "f"		# Failure from expression 
$define E_EndCollect   "\360"		# End of garbage collection 
$define E_Erem         "v"		# Removal of a suspended generator 
$define E_Eresum       "u"		# Resumption of expression 
$define E_Eret         "r"		# Return from expression 
$define E_Error        "E"		# Run-time error 
$define E_Esusp        "a"		# Suspension from alternation 
$define E_Exit         "X"		# Program exit 
$define E_External     "j"		# External allocation 
$define E_Fcall        ":"		# Function call 
$define E_Fconv        "J"		# Conversion failure 
$define E_Ffail        "M"		# Function failure 
$define E_File         "g"		# File allocation 
$define E_Free         "Z"		# Free region 
$define E_Frem         "["		# Function suspension removal 
$define E_Fresum       "Y"		# Function resumption 
$define E_Fret         "P"		# Function return 
$define E_Fsusp        "W"		# Function suspension 
$define E_Highlight    "H"		# Allocation highlight 
$define E_Intcall      "\351"		# interpreter call 
$define E_Integer      "@"		# Integer value pseudo-event 
$define E_Intret       "\352"		# interpreter return 
$define E_Kywdint      "^"		# Integer keyword value pseudo-event 
$define E_Kywdpos      "&"		# Position value pseudo-event 
$define E_Kywdsubj     "*"		# Subject value pseudo-event 
$define E_Lbang        "\301"		# List generation 
$define E_Lcreate      "\302"		# List creation 
$define E_Lelem        "m"		# List element allocation 
$define E_Lget         "\356"		# List get
$define E_Line	       "\355"		# Line change
$define E_List         "k"		# List allocation 
$define E_Loc          "|"		# Location change 
$define E_Lpop         "\303"		# List pop 
$define E_Lpull        "\304"		# List pull 
$define E_Lpush        "\305"		# List push 
$define E_Lput         "\306"		# List put 
$define E_Lrand        "\307"		# List random reference 
$define E_Lref         "\310"		# List reference 
$define E_Lrgint       "L"		# Large integer allocation 
$define E_Lsub         "\311"		# List subscript 
$define E_Lsusp        "l"		# Suspension from limitation 
$define E_MXevent      "\370"		# monitor input event 
$define E_Nconv        "N"		# Conversion not needed 
$define E_Null         "$"		# Null value value pseudo-event 
$define E_Ocall        "\\"		# Operator call 
$define E_Ofail        "]"		# Operator failure 
$define E_Offset       "+"		# Address offset 
$define E_Opcode       "O"		# Virtual-machine instruction 
$define E_Orem         "\177"		# Operator suspension removal 
$define E_Oresum       "}"		# Operator resumption 
$define E_Oret         "`"		# Operator return 
$define E_Osusp        "{"		# Operator suspension 
$define E_Pause        ";"		# memory monitoring comment 
$define E_Pcall        "C"		# Procedure call 
$define E_Pfail        "F"		# Procedure failure 
$define E_Pid          "."		# Symbol name 
$define E_Prem         "V"		# Suspended procedure removal 
$define E_Presum       "U"		# Procedure resumption 
$define E_Pret         "R"		# Procedure return 
$define E_Proc         "%"		# Procedure value pseudo-event 
$define E_Psusp        "S"		# Procedure suspension 
$define E_Rbang        "\312"		# Record generation 
$define E_Rcreate      "\313"		# Record creation 
$define E_Real         "d"		# Real allocation 
$define E_Record       "h"		# Record allocation 
$define E_Refresh      "y"		# Refresh allocation 
$define E_Region       "?"		# Region 
$define E_Rrand        "\314"		# Record random reference 
$define E_Rref         "\315"		# Record reference 
$define E_Rsub         "\316"		# Record subscript 
$define E_Sbang        "\317"		# Set generation 
$define E_Sconv        "Q"		# Conversion success 
$define E_Screate      "\320"		# Set creation 
$define E_Sdelete      "\321"		# Set deletion 
$define E_Selem        "t"		# Set element allocation 
$define E_Set          "q"		# Set allocation 
$define E_Sfail        "\341"		# Scanning failure 
$define E_Sinsert      "\322"		# Set insertion 
$define E_Size         ">"		# Region size 
$define E_Slots        "w"		# Hash header allocation 
$define E_Smember      "\323"		# Set membership 
$define E_Snew         "\340"		# Scanning environment creation 
$define E_Spos         "\346"		# Scanning position 
$define E_Srand        "\336"		# Set random reference 
$define E_Srem         "\344"		# Scanning environment removal 
$define E_Sresum       "\343"		# Scanning resumption 
$define E_Ssasgn       "\354"		# Sub-string assignment 
$define E_Ssusp        "\342"		# Scanning suspension 
$define E_Stack        "\353"		# stack depth 
$define E_StrDeAlc     "~"		# String deallocation 
$define E_String       "s"		# String allocation 
$define E_Sval         "\324"		# Set value 
$define E_Sym          "T"		# Symbol table entry 
$define E_Table        "n"		# Table allocation 
$define E_Tbang        "\325"		# Table generation 
$define E_Tconv        "K"		# Conversion target 
$define E_Tcreate      "\326"		# Table creation 
$define E_Tdelete      "\327"		# Table deletion 
$define E_Telem        "o"		# Table element allocation 
$define E_TenureBlock  "\362"		# Tenure a block region 
$define E_TenureString "\361"		# Tenure a string region 
$define E_Tick         "."		# Clock tick 
$define E_Tinsert      "\330"		# Table insertion 
$define E_Tkey         "\331"		# Table key generation 
$define E_Tmember      "\332"		# Table membership 
$define E_Trand        "\337"		# Table random reference 
$define E_Tref         "\333"		# Table reference 
$define E_Tsub         "\334"		# Table subscript 
$define E_Tval         "\335"		# Table value 
$define E_Tvsubs       "i"		# Substring tv allocation 
$define E_Tvtbl        "p"		# Table-element tv allocation 

$define E_Used         "="		# Space used 
$define E_Value        "\350"		# Value assigned 
$define E_Disable 1000000
$define E_Enable 1000001
$define E_ALoc 2000000
$define E_Spoof 1728345
$define AllocMask cset(E_List || E_Lelem || E_File || E_Lrgint || E_Real || E_Record || E_Selem || E_Set || E_Slots || E_Table || E_Telem || E_Tvsubs || E_Tvtbl || E_Cset || E_Refresh || E_String || E_Coexpr)
$define AssignMask cset(E_Assign || E_Value)
$define TypeMask AllocMask ++ (E_Integer || E_Null || E_Proc)
$define ConvMask cset(E_Aconv || E_Tconv || E_Sconv || E_Nconv || E_Fconv)
$define ProcMask cset(E_Pcall || E_Pfail || E_Pret || E_Psusp || E_Presum || E_Prem)
$define FncMask cset(E_Fcall || E_Ffail || E_Fret || E_Fsusp || E_Fresum || E_Frem)
$define OperMask cset(E_Ocall || E_Ofail || E_Oret || E_Osusp || E_Oresum || E_Orem)
$define ListMask cset(E_Lbang || E_Lcreate || E_Lpop || E_Lget || E_Lpull || E_Lpush || E_Lput || E_Lrand || E_Lref || E_Lsub)
$define RecordMask cset(E_Rbang || E_Rcreate || E_Rrand || E_Rref || E_Rsub)
$define ScanMask cset(E_Snew || E_Sfail || E_Spos || E_Ssusp || E_Sresum || E_Srem)
$define SetMask cset(E_Sbang || E_Screate || E_Sdelete || E_Sinsert || E_Smember || E_Sval)
$define TableMask cset(E_Tbang || E_Tcreate || E_Tdelete || E_Tinsert || E_Tkey || E_Tmember || E_Trand || E_Tref || E_Tsub || E_Tval)
$define StructMask ListMask ++ RecordMask ++ SetMask ++TableMask
