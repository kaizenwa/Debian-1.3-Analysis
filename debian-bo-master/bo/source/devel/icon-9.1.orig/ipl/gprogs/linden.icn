############################################################################
#
#	File:     linden.icn
#
#	Subject:  Program to generate sentences in 0L-systems
#
#	Author:   Ralph E. Griswold
#
#	Date:     June 11, 1994
#
############################################################################
#
#  This program reads in a 0L-system (Lindenmayer system) consisting of
#  rewriting rules in which a string is rewritten with every character
#  replaced simultaneously (conceptually) by a specified string of
#  symbols.
#
#  Rules have the form
#
#	S->SSS...
#
#  where S is a character.
#
#  In addition to rules, there are keywords that describe the system and how
#  to draw it.  These include the "axiom" on which rewriting is started and
#  optionally the angle in degrees between successive lines (default 90).
#  The keyword "name" is the first line of the 0L-system.  Other keywords
#  may be present, but are ignored.
#
#  Keywords are followed by a colon.
#
#    An example 0L-system is:
#
#	name:dragon
#	X->-FX++FY-
#	Y->+FX--FY+
#	F->
#	-->-
#	+->+
#	axiom:FX
#	angle:45.0
#
#  Here, the initial string is "FX" and angular increment is 45 degrees.
#  Note that "-" is a legal character in a 0L-system -- context determines
#  whether it's 0L character or part of the "->" that stands for "is
#  replced by".
#
#  If no rule is provided for a character, the character is not changed
#  by rewriting. Thus, the example above can be expressed more concisely
#  as
#
#	name:dragon
#	X->-FX++FY-
#	Y->+FX--FY+
#	F->
#	axiom:FX
#	angle:45.0
#
#  As pure-production systems, the characters are symbolic and have no
#  meaning.  When interpreted for drawing, the characters have the
#  following meaning:
#
#	F	move forward by length
#	f	move backward by length
#	+	turn right by angle
#	-	turn left by angle
#	[	save current state
#	]	restore current state
#
#  The file containing the 0L-systems is read from standard input.
#
#  The command-line options are:
#
#	-n s	name of 0L-system, default first one
#	-g i	number of generations, default 3
#	-l i	length of line segments, default 5
#	-a s	axiom (overrides axiom given in the grammar)
#	-d i	angular increment in degrees (overrides angle given in
#		  the grammar)
#	-w i	window width
#	-h i	window height
#	-x i	initial x position, default mid-window
#	-y i	initial y position, default mid-window
#	-W	write out string instead of drawing.
#
#  References:
#
#     Formal Languages, Arto Salomaa, Academic Press, 1973. pp. 234-252.
#
#     The Algorithmic Beauty of Plants, Przemyslaw Prusinkiewicz and
#     Aristid Lindenmayer, Springer Verlag, 1990.
#
#     Lindenmayer Systems, Fractals, and Plants, Przemyslaw Prusinkiewicz and
#     James Hanan, Springer Verlag, 1989.
#
############################################################################
#
#  See linden.dat for an example of input data.
#
############################################################################
#
#  Requires:  graphics if drawing
#
############################################################################
#
#  Links: linddraw, options, win
#
############################################################################

link linddraw
link options
link win

procedure main(args)
   local line, gener, axiom, angle, opts, i, s, c, symbol, rewrite
   local allchars, rhs, value, spec, x, y, length, w, h

   rewrite := table()
   allchars := ''			# cset of all rhs characters
 
   opts := options(args,"n:g+l+a:d+w+h+x+y+W")

   if name := \opts["n"] then {
      while line := read() | stop("*** 0L-system not found") do
         line ? {
            if ="name:" & =name & pos(0) then break
            }
      }
   else {
      read() ? {			# no name specified; discard name line
         ="name:"
         } 
      } | stop("*** malformed file")

   while line := read() do
      line ? {
         if symbol := move(1) & ="->" then {
            rhs := tab(0)
            rewrite[symbol] := rhs
            allchars ++:= rhs			# keep track of all characters
            }
         else if spec := tab(upto(':')) then {
            move(1)
            value := tab(0)
            case spec of {
               "axiom":  {
                  axiom := value
                  allchars ++:= rhs		# axiom might have strays
                  }
               "angle":  angle := value
               "name":   break			# new 0L-system
               }				# ignore others
            }
         else write(&errout, "malformed input: ", tab(0))
         }

#  At this point, we have the table to map characters, but it may lack
#  mappings for characters that "go into themselves" by default.  For
#  efficiency in rewriting, these mappings are added.

   every c := !allchars do
     /rewrite[c] := c

   axiom := \opts["a"]
   angle := \opts["d"]
   /angle := 90				# if not specified otherwise
   length := \opts["l"] | 5
   gener := \opts["g"] | 3
   h := \opts["h"] | 400
   w := \opts["w"] | 400
   x := \opts["x"] | (h / 2)		# if none, handled by linddraw()
   y := \opts["y"] | (w / 2)

   if /opts["W"] then {
      win(w, h)
      linddraw(x, y, axiom, rewrite, length, angle, gener)
      Event()
      }
   else {
      every writes(lindgen(!axiom, rewrite, gener))
      write()
      }

end
