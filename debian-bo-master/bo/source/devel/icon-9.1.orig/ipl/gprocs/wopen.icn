############################################################################
#
#	File:     wopen.icn
#
#	Subject:  Procedures for graphics input/output
#
#	Authors:  Gregg M. Townsend and Ralph E. Griswold
#
#	Date:     November 14, 1994
#
############################################################################
#
#  WOpen(attrib, ...) -- open and return window
#  WRead(w) -- read line from window
#  WReads(w, i) -- read i characters from window
#  WWrite(w, s, ...) -- write line to window
#  WWrites(w, s, ...) -- write partial line to window
#  WDelay(w, n) -- flush window and then delay n milliseconds
#  WClose(w) -- close window; if w === &window, set &window null
#
#  These procedures provide window input and output using "W" names as
#  substitutes for standard input and output functions.  WOpen() opens
#  and returns a window; the result is also assigned to &window if
#  &window is null.  All other routines use &window if the first
#  argument is not a window.
#
############################################################################
#
#  WDone(), WQuit(), QuitCheck(), and QuitEvents() incorporate knowledge
#  of the Icon standard set of "quit" events, currently the letters
#  "q" or "Q".  The procedures themselves are trivial.
#  WQuit() consumes unread window events and succeeds if a quit event
#  is seen.  It does not wait.  WDone() waits until a quit event is read,
#  then exits the program.  QuitCheck(ev) calls exit() if its parameter
#  is a quit event; QuitCheck can be used with the vidget package as a
#  default event handler.  QuitEvents() generates the standard set of
#  quit events.
#
############################################################################
#
#  ZDone() is a zooming version of WDone().  If the window is resized
#  while waiting for a quit event, its contents are zoomed to fill the
#  new size.  Zooming to a multiple of the original size can also be
#  accomplished by typing a nonzero digit into the window.
#
############################################################################
#
#  Requires:  Version 9 graphics
#
############################################################################

link gpxop


procedure WOpen(args[])
   push(args, "g")
   push(args, "")
   if /&window then
      return &window := open ! args
   else
      return open ! args
end


procedure WRead(window)
   if /window then
      window := \&window | runerr(140, &window)
   return read(window)
end


procedure WReads(window, i)
   if /window then
      window := \&window | runerr(140, &window)
   else if type(window) ~== "window" then {
      i := window
      window := \&window | runerr(140, &window)
      }
   return reads(window, i)
end


procedure WWrite(args[])
   if not (type(args[1]) == "window") then
      push(args, \&window) | runerr(140, &window)
   return write ! args
end


procedure WWrites(args[])
   if not (type(args[1]) == "window") then
      push(args, \&window) | runerr(140, &window)
   return writes ! args
end


procedure WDelay(window, n)
   if /window then
      window := \&window | runerr(140, &window)
   else if type(window) ~== "window" then {
      n := window
      window := \&window | runerr(140, &window)
      }
   integer(n) | runerr(101, n)
   WFlush(window)
   delay(n)
   return window
end


procedure WClose(window)
   if /window then
      window := \&window | runerr(140, &window)
   if window === &window then
      &window := &null
   return close(window)
end


procedure QuitEvents()
   suspend !"qQ"
end


procedure QuitCheck(ev)
   if ev === QuitEvents() then
      exit()
   return
end


procedure WQuit(win)
   /win := &window
   while *Pending(win) > 0 do
      if Event(win) === QuitEvents() then
         return win
   fail
end


procedure WDone(win)
   /win := &window
   until Event(win) === QuitEvents()
   exit()
end


#  ZDone(win) -- like WDone(), but zoom window if resized while waiting

procedure ZDone(win)
   local org, e, w, h, ww, hh, x0, y0

   /win := &window
   x0 := -WAttrib(win, "dx")
   y0 := -WAttrib(win, "dy")
   w := WAttrib(win, "width")
   h := WAttrib(win, "height")
   org := WOpen("width=" || w, "height=" || h, "canvas=hidden") | WDone()
   CopyArea(win, org, x0, y0)
   while e := Event(win) do case e of {
      QuitEvents(win):
         exit()
      &resize:
         Zoom(org, win, , , , , x0, y0)
      !"123456789": {
         ww := e * w
         hh := e * h
         WAttrib(win, "width=" || ww, "height=" || hh)
         Zoom(org, win, , , , , x0, y0, ww, hh)
         }
      }
end
