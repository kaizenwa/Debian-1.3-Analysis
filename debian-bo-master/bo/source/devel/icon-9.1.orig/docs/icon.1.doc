


ICON(1)                                                               ICON(1)



NAME
  icon - interpret or compile Icon programs

SYNOPSIS
  icont [ option ... ] file ... [ -x arg ... ]
  iconc [ option ... ] file ... [ -x arg ... ]

DESCRIPTION
  icont and iconc each convert an Icon source program into executable form.
  icont translates quickly and provides interpretive execution.  iconc takes
  longer to compile but produces programs that execute faster.  icont and
  iconc for the most part can be used interchangeably.

  This manual page describes both icont and iconc. Where there there are
  differences in usage between icont and iconc, these are noted.

  FFiillee NNaammeess:: Files whose names end in .icn are assumed to be Icon source
  files. The .icn suffix may be omitted; if it is not present, it is sup-
  plied. The character - can be used to indicate an Icon source file given in
  standard input.  Several source files can be given on the same command
  line; if so, they are combined to produce a single program.

  The name of the executable file is the base name of the first input file,
  formed by deleting the suffix, if present. stdin is used for source pro-
  grams given in standard input.

  PPrroocceessssiinngg:: As noted in the synopsis above, icont and iconc accept options
  followed by file names, optionally followed by -x and arguments. If -x is
  given, the program is executed automatically and any following arguments
  are passed to it.

  icont: The processing performed by icont consists of two phases: _t_r_a_n_s_l_a_-
  _t_i_o_n and _l_i_n_k_i_n_g. During translation, each Icon source file is translated
  into an intermediate language called _u_c_o_d_e. Two ucode files are produced
  for each source file, with base names from the source file and suffixes .u1
  and .u2.  During linking, the one or more pairs of ucode files are combined
  to produce a single _i_c_o_d_e file.  The ucode files are deleted after the
  icode file is created.

  Processing by icont can be terminated after translation by the -c option.
  In this case, the ucode files are not deleted.  The names of .u1 files from
  previous translations can be given on the icont command line.  These files
  and the corresponding .u2 files are included in the linking phase after the
  translation of any source files.  The suffix .u can be used in place of
  .u1; in this case the 1 is supplied automatically.  Ucode files that are
  explicitly named are not deleted.

  iconc: The processing performed by iconc consists of two phases: _c_o_d_e _g_e_n_-
  _e_r_a_t_i_o_n and _c_o_m_p_i_l_a_t_i_o_n _a_n_d _l_i_n_k_i_n_g. The code generation phase produces C
  code, consisting of a .c and a .h file, with the base name of the first
  source file. These files are then compiled and linked to produce an execut-
  able binary file.  The C files normally are deleted after compilation and
  linking.

  Processing by iconc can be terminated after code generation by the -c
  option. In this case, the C files are not deleted.



OPTIONS
  The following options are recognized by icont and iconc:

  -c  Stop after producing intermediate files and do not delete them.

  -e _f_i_l_e
      Redirect standard error output to _f_i_l_e.

  -f s
      Enable full string invocation.

  -o _n_a_m_e
      Name the output file _n_a_m_e.

  -s  Suppress informative messages.  Normally, both informative messages and
      error messages are sent to standard error output.

  -t  Arrange for &trace to have an initial value of -1 when the program is
      executed and for iconc enable debugging features.

  -u  Issue warning messages for undeclared identifiers in the program.

  -v _i
      Set verbosity level of informative messages to _i

  -_E  Direct the results of preprocessing to standard output and inhibit
      further processing.

  The following additional options are recognized by iconc:

  -f _s_t_r_i_n_g
      Enable features as indicated by the letters in _s_t_r_i_n_g:

        a all, equivalent to delns

        d enable debugging features: display(), name(), variable(), error
          trace back, and the effect of -f n (see below)

        e enable error conversion

        l enable large-integer arithmetic

        n produce code that keeps track of line numbers and file names in the
          source code

        s enable full string invocation

  -n _s_t_r_i_n_g
      Disable specific optimizations. These are indicated by the letters in
      _s_t_r_i_n_g:

        a all, equivalent to cest

        c control flow optimizations other than switch statement optimiza-
          tions

        e expand operations in-line when reasonable (keywords are always put
          in-line)

        s optimize switch statements associated with operation invocations

        t type inference

  -p _a_r_g
      Pass _a_r_g on to the C compiler used by iconc

  -r _p_a_t_h
      Use the run-time system at _p_a_t_h, which must end with a slash.

  When an Icon program is executed, several environment variables are exam-
  ined to determine certain execution parameters.  Values in parentheses are
  the default values.

  BLKSIZE (500000)
      The initial size of the allocated block region, in bytes.

  COEXPSIZE (2000)
      The size, in words, of each co-expression block.

  DBLIST
      The location of data bases for iconc to search before the standard one.
      The value of DBLIST should be a blank-separated string of the form
      _p_1 _p_2 ...  _p_n where the _p_i name directories.

  ICONCORE
      If set, a core dump is produced for error termination.

  ICONX
      The location of iconx, the executor for icode files, is built into an
      icode file when it is produced. This location can be overridden by set-
      ting the environment variable ICONX.  If ICONX is set, its value is
      used in place of the location built into the icode file.

  IPATH
      The location of ucode files specified in link declarations for icont.
      IPATH is a blank-separated list of directories.  The current directory
      is always searched first, regardless of the value of IPATH.

  LPATH
      The location of source files specified in preprocessor $include direc-
      tives and in link declarations for iconc.  LPATH is otherwise similar
      to IPATH.

  MSTKSIZE (10000)
      The size, in words, of the main interpreter stack for icont.

  NOERRBUF
      By default, &errout is buffered.  If this variable is set, &errout is
      not buffered.

  QLSIZE (5000)
      The size, in bytes, of the region used for pointers to strings during
      garbage collection.

  STRSIZE (500000)
      The initial size of the string space, in bytes.

  TRACE
      The initial value of &trace.  If this variable has a value, it over-
      rides the translation-time -t option.

FILES
  icont     Icon translator
  iconc     Icon compiler
  iconx     Icon executor

SEE ALSO
  _T_h_e _I_c_o_n _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Ralph E. Griswold and Madge T. Griswold,
  Prentice-Hall Inc., Englewood Cliffs, New Jersey, Second Edition, 1990.

  _V_e_r_s_i_o_n _9._1 _o_f _I_c_o_n, Ralph E. Griswold, Clinton L. Jeffery, and Gregg M.
  Townsend, IPD267, Department of Computer Science, The University of
  Arizona, 1995.

  _V_e_r_s_i_o_n _9 _o_f _t_h_e _I_c_o_n _C_o_m_p_i_l_e_r, Ralph E. Griswold, IPD237, Department of
  Computer Science, The University of Arizona, 1995.

  icon_vt(1)

LIMITATIONS AND BUGS

  The icode files for the interpreter do not stand alone; the Icon run-time
  system (iconx) must be present.

  Stack overflow is checked using a heuristic that is not always effective.





















































