%!PS-Adobe-3.0
%%Title: IPD263 - MTS (PM 6.0)
%%Creator: PageMaker 6.0
%%CreationDate:  11-13-1995, 7:58:40
%%For: 
%%Pages: (atend)
%%PageOrder: Special
%%BoundingBox: 0 0 612 792
%%ALDBoundingBox: 0 0 612 792
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%CMYKCustomColor: (atend)
%%DocumentCustomColors: (atend)
%%DocumentProcessColors: (atend)
%ADBDocumentInks: (atend)
%ADBDocumentMultiInkColors: (atend)
%ALDOriginalFile: Bubba:Icon Documents:Project Documents:IPD263 -- MTS:IPD263 - MTS (PM 6.0)
%%EndComments
%%BeginProlog
%%BeginResource: procset P6PS_PS 1.0 1
%%Copyright: (C) Copyright 1995 Adobe Systems, Inc.  All Rights Reserved.
%%Version: 1.0 1 %%%
/setpacking where{pop currentpacking true setpacking}if userdict/P6PS 423 dict
dup begin userdict/P6PS known{/$MetalHead P6PS def}{/$MetalHead currentdict
def}ifelse/P6PS currentdict def put/bdef{bind def}bind def/xdef{exch def}bdef
/ldef{load def}bdef/ndef{1 index where{pop pop pop}{dup xcheck{bind}if def}
ifelse}bdef/MakeReadOnlyArray{/packedarray where{pop packedarray}{array astore
readonly}ifelse}bdef/T true def/F false def/q`6[currenttransfer]cvx def
/PSScreen[currentscreen]cvx def/PSsetgray systemdict/setgray get def/_PSdef
matrix def/_WCmtx matrix def/_LPmtx matrix def/bse^6{0 0 transform round exch
round exch itransform translate}bdef/j`6{_PSdef currentmatrix pop}bdef/ps$6{
gsave scale _WCmtx currentmatrix pop grestore scale}bdef/k`6{_LPmtx
currentmatrix pop}bdef/l`6{_LPmtx setmatrix}bdef/m`6{{90 rotate pop 0 exch neg
translate}{-90 rotate neg 0 translate pop}ifelse}bdef/L2L6{1 dict begin
/PageSize[currentpagedevice/PageSize get aload pop exch]def currentdict end
setpagedevice gsave 90 rotate neg 0 exch translate pop j`6 grestore}bdef/p`6{
dup length 2 add array cvx dup 3 -1 roll 2 exch putinterval dup 0 4 -1 roll
put dup 1/exec load put}bdef/db6{exch dup length 2 add array cvx dup 3 -1 roll
2 exch putinterval dup 0 4 -1 roll put dup 1/exec load put}bdef/setcmykcolor{1
sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat systemdict
/setrgbcolor get exec pop}ndef/setcustomcolor{exch aload pop pop 4{4 index mul
4 1 roll}repeat setcmykcolor pop}ndef/setprocesscolor{exch aload pop pop 4{4
index mul 4 1 roll}repeat setcmykcolor pop}ndef/sethificolor{exch aload length
4 sub{pop}repeat 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndef
/findcmykcustomcolor{5 MakeReadOnlyArray}ndef/findcmykprocesscolor{5
MakeReadOnlyArray}ndef/findhificolor{exch dup dup 4 2 roll 2 mul 7 add 2 roll
mark exch 2 mul 7 add 1 roll{1 index type/stringtype ne{exit}if 2
MakeReadOnlyArray counttomark 1 add 1 roll counttomark 3 add mark exch 1 roll
counttomark 1 add -1 roll pop}loop counttomark 1 add 4 roll counttomark 1 add
-1 roll pop exch 5 add MakeReadOnlyArray}ndef/newcmykcustomcolor{6
MakeReadOnlyArray}ndef/setoverprint{pop}ndef/currentoverprint{false}ndef
/setseparationgray{PSsetgray}ndef/colorexists false def/proc1 null def/proc2
null def/newproc null def/level2/languagelevel where{pop languagelevel 1 ne}{
false}ifelse def/addprocs{P6PS begin/packedarray where{pop dup type
/packedarraytype eq 2 index type/packedarraytype eq or}{false}ifelse{/proc2
exch cvlit def/proc1 exch cvlit def proc1 aload pop proc2 aload pop proc1
length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1 exch
cvlit def/newproc proc1 length proc2 length add array def newproc 0 proc1
putinterval newproc proc1 length proc2 putinterval newproc cvx}ifelse end}bdef
/v2`6{/colorexists xdef}def/j2`6{setcustomcolor}bdef/k2`6{setprocesscolor}bdef
/y2`6{sethificolor}bdef/l2`6{F setoverprint 1 exch sub setseparationgray pop}
bdef/m2`6{pop pop}bdef/n2`6{null eq{pop pop/m2`6 load def false def}{null eq{
pop/l2`6 load def}{dup _process eq{pop/k2`6 load def}{_spot eq{/j2`6 load def}
{/y2`6 load def}ifelse}ifelse}ifelse true def}ifelse}bdef/r36{dup _process eq{
pop findcmykprocesscolor}{_spot eq{findcmykcustomcolor}{findhificolor}ifelse}
ifelse}bdef/_ft null def/_fc null def/_f? false def/_fo false def/o2`6 null
def/p2`6 null def/_fpat null def/_fpatn null def/_st null def/_sc null def/_s?
false def/_so false def/q2`6 null def/r2`6 null def/Q`6 null def/P`6 null def
/u2`6 null def/_trt null def/_trc null def/_tr? false def/hh`6/HonorPMTraps
where{pop HonorPMTraps}{T}ifelse def/w2`6 null def/TrapStroke null def/trMTX
matrix def/_LBOmtx matrix def/_LBOgsave matrix def/_MLgsave matrix def/_x1
null def/_y1 null def/_x2 null def/_y2 null def/_rdp null def/_LLx null def
/_LLy null def/_URx null def/_URy null def/_th null def/_hthk null def/_rd
null def/_wp null def/_hp null def/_diam null def/_w null def/_h null def
/_dshlen null def/_rem null def/_spclen null def/_undo? false def/_dch(X)def
/xfont null def/_ch null def/_spot 1 def/_process 2 def/_hifi 3 def/_paper 4
def/_registration 5 def/_ctype null def/_trctype null def/@m6{moveto}bdef/@l6{
lineto}bdef/@c6{curveto}bdef/@cp6{closepath}bdef/b`6{/_ctype xdef/_ft xdef dup
null ne{_ctype r36}if/_fc xdef/_f?/o2`6 _ctype _fc _ft n2`6 atlanta^6}bdef
/atlanta^6{_f?{/p2`6{_fo setoverprint _fc _ft o2`6 _fpat null eq{fill}{_fpat
j1`6}ifelse}def}{/p2`6{newpath}def}ifelse}bdef/c`6{/_fpatn xdef _fpatn null eq
{/_fpat null def}{/_fpat _fpatn findfont def}ifelse}bdef/e`6{/_fo xdef}bdef
/a`6{/_ctype xdef/_st xdef dup null ne{_ctype r36}if/_sc xdef/_s?/q2`6 _ctype
_sc _st n2`6 seattle^6}bdef/seattle^6{_s?{/r2`6{_so setoverprint _sc _st q2`6
stroke}def/Q`6{_so setoverprint _sc _st q2`6 fill}def/P`6/Q`6 load def/u2`6{
_so setoverprint _sc _st q2`6 show}def}{/r2`6{newpath}def/Q`6{newpath}def/P`6{
newpath}def/u2`6{pop}def}ifelse}bdef/f`6{/_so xdef}bdef/h`6{/_trctype xdef
/_trt xdef dup null ne{_trctype r36}if/_trc xdef/_tr?/w2`6 _trctype _trc _trt
n2`6 lopez^6}bdef/lopez^6{_tr? hh`6 and{/x2`6{T setoverprint _trc _trt w2`6
stroke}def/TShowTrap{T setoverprint _trc _trt w2`6{currentlinewidth newpath 3
index 3 index _uPosition add 1 index 5 -1 roll add 1 index moveto lineto
_uThickness setlinewidth strokepath setlinewidth stroke}{pop}ifelse newpath
moveto/tsLSX xdef/tsWSX xdef/tsSTR(s)def gsave 0 0 moveto<20>show currentpoint
pop/spwid xdef grestore{dup 32 eq{pop tsWSX spwid add 0.0 rmoveto}{
currentpoint/oldy xdef/oldx xdef tsSTR 0 2 index put tsSTR false charpath
currentpoint stroke newpath moveto pop}ifelse tsLSX 0 rmoveto}forall}def}{
/x2`6{newpath}def/TShowTrap{7{pop}repeat}def}ifelse}bdef/@fp6{gsave p2`6
grestore}bdef/arct{arcto pop pop pop pop}ndef/EllipsePath{_LBOgsave
currentmatrix pop translate scale 1 0 moveto 0 0 1 360 0 arcn closepath
_LBOgsave setmatrix}bdef/RectPath{moveto 1 index 0 rlineto 0 exch rlineto neg
0 rlineto closepath}bdef/RoundRectPath{/_y2 xdef/_x2 xdef/_y1 xdef/_x1 xdef
/_rdp xdef _x1 _y1 _rdp add moveto _x1 _y2 _x2 _y2 _rdp arct _x2 _y2 _x2 _y1
_rdp arct _x2 _y1 _x1 _y1 _rdp arct _x1 _y1 _x1 _y2 _rdp arct closepath}bdef
/bell^6{{_LBOmtx astore concat}if}bdef/south^6{/_URy xdef/_URx xdef/_LLy xdef
/_LLx xdef}bdef/lpd^6{_MLgsave currentmatrix pop gsave translate rotate}bdef
/jp^6{grestore}bdef/jbd^6{gsave bell^6 moveto lineto setlinewidth r2`6
grestore}bdef/ald^6{gsave bell^6 samson^6 setlinewidth r2`6 grestore}bdef/ws^6
{gsave bell^6 xfont exch scalefont setfont F roswell^6 grestore}bdef/samson^6{
translate rotate 0 0 moveto/_dshlen xdef/_rem xdef/_spclen xdef 1 1 3 -1 roll{
pop _dshlen 0 rlineto _spclen _rem 0 gt{1 add/_rem _rem 1 sub def}if 0 rmoveto
}for _dshlen 0 rlineto}bdef/roswell^6{gsave/_undo? xdef translate rotate _dch
0 3 -1 roll put 0 moveto/_rem xdef/_spclen xdef 1 1 3 -1 roll{pop gsave _undo?
{_LBOmtx setmatrix}if _dch u2`6 grestore _spclen _rem 0 gt{1 add/_rem _rem 1
sub def}if 0 rmoveto}for _undo?{_LBOmtx setmatrix}if _dch u2`6 grestore}bdef
/yy`6{gsave bell^6 newpath}bdef/yyq6{grestore}bdef/yy^6{/_ns xdef _ns{lineto}
repeat}bdef/yQ6{/_th xdef 2 copy moveto lineto 1 setlinecap _th setlinewidth
r2`6}bdef/Qy6{dup setlinejoin 0 eq{setmiterlimit}if setlinecap setlinewidth}
bdef 8 dict begin/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[
-500 -500 500 500]def/Encoding 256 array def 0 1 255{Encoding exch/.nodef put}
for Encoding 97/circle put/CharProcs 2 dict def CharProcs begin/.nodef{}def
/circle{0 0 500 0 360 arc closepath fill}bind def end/BuildGlyph{1000 0 -500
-500 500 500 setcachedevice exch/CharProcs get exch 2 copy known not{pop
/.nodef}if get exec}bind def/BuildChar{1 index/Encoding get exch get 1 index
/BuildGlyph get exec}bind def currentdict end/_xfont exch definefont/xfont
exch def/_thumbStr 10 string def/_irad null def/_orad null def/_dx null def
/_dy null def/_ld2 null def/_sz null def/_th null def/_lblsave null def/LFont
null def/T`6{gsave 0.05 0.05 scale translate 2 copy 2 copy 8 -2 roll dup 3 -1
roll{neg}if exch RectPath .5 setseparationgray fill 0 0 RectPath gsave 1
setseparationgray fill grestore 0 setseparationgray 20 setlinewidth stroke
/Helvetica findfont 180 scalefont setfont 100 add 100 exch moveto pop
_thumbStr cvs show grestore}bdef/q3`6{_th _orad sub dup _dx _dy EllipsePath
stroke _dx _ld2 sub _dy moveto _dx _ld2 add _dy lineto stroke _dx _dy _ld2 sub
moveto _dx _dy _ld2 add lineto stroke}bdef/V`6{/_irad xdef/_orad xdef/_dy xdef
/_dx xdef/_th xdef/_ld2 xdef/_hthk 2.5 wcu^6 round dup 2 le{pop 2}if def gsave
0 setlinecap 1 setseparationgray _th _hthk 2 mul add setlinewidth q3`6 _hthk
_irad add dup _dx _dy EllipsePath fill 0 setseparationgray _th setlinewidth
q3`6 _irad dup _dx _dy EllipsePath fill 1 setseparationgray _dx _irad sub _dy
moveto _dx _irad add _dy lineto stroke _dx _dy _irad sub moveto _dx _dy _irad
add lineto stroke grestore}bdef/f1a`6{1 exch sub 0 0 0 setcmykcolor}bdef/f1b`6
{1 exch sub 0 exch 0 0 setcmykcolor}bdef/f1c`6{1 exch sub 0 0 3 -1 roll 0
setcmykcolor}bdef/f1d`6{1 exch sub 0 0 0 4 -1 roll setcmykcolor}bdef/f1e`6{
setseparationgray}bdef/W`6{gsave F setoverprint/_dy xdef/_dx xdef/_sz xdef/_th
xdef _dx _dy translate{-90 rotate}if/XPaint exch ldef 0.35 XPaint 11 _sz mul
_sz 0 0 RectPath fill/_dx _th def/_sz _sz 2 _th mul sub def 0 1 10{10 div
XPaint _sz dup _dx _th RectPath fill/_dx _dx _sz 2 _th mul add add def}for
grestore}bdef/calBarArray[0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 1 0 0 0
0 1 0 0 .5 0 0 .5 0 0 .5 0 0 0 0 0 0 .5]def/X`6{gsave/_dy xdef/_dx xdef/_sz
xdef/_th xdef _dx _dy translate{-90 rotate}if 0.35 setseparationgray 11 _sz
mul _sz 0 0 RectPath fill/_dx _th def/_sz _sz 2 _th mul sub def
currentoverprint false setoverprint 0 1 10{calBarArray exch 4 mul 4
getinterval aload pop setcmykcolor _sz dup _dx _th RectPath fill/_dx _dx _sz 2
_th mul add add def}for setoverprint grestore}bdef/pw$6{gsave/_hthk 2.5 wcu^6
round dup 2 le{pop 2}if def 5 copy 1 setseparationgray 0 setlinecap moveto
rlineto _hthk 2 mul add setlinewidth stroke 0 setseparationgray moveto rlineto
setlinewidth stroke grestore}bdef/Y`6{/_lblsave save def[exch 0 0 2 index neg
0 0]LFont exch makefont setfont}bdef/a1`6{0 setseparationgray moveto show}bdef
/Z`6{_lblsave restore}bdef/f1`6{/LFont/|_______Helvetica T/Helvetica aldus^6
def}bdef/_xbft null def/_xbfc null def/_xbx? F def/XPaint null def/XFill null
def/XStroke null def/b1`6{gsave bell^6 south^6/_th xdef currentoverprint T
setoverprint}bdef/d1`6{setoverprint grestore}bdef/c1`6{beams^6 bapco^6}bdef
/bapco^6{_URx _LLx sub abs _th sub _URy _LLy sub abs _th sub _LLx _th 2 div
add _LLy _th 2 div add 4 copy RectPath gsave XFill grestore _th setlinewidth
XStroke 4 copy moveto rlineto exch 3 index add exch moveto exch neg exch
rlineto XStroke}bdef/beams^6{/_ctype xdef/_xbft xdef dup null ne{_ctype r36}if
/_xbfc xdef/_xbx?/XPaint _ctype _xbfc _xbft n2`6 psquare^6}bdef/psquare^6{
_xbx?{/XFill{_xbfc 0 XPaint fill}def/XStroke{_xbfc 1 XPaint stroke}def}{/XFill
{newpath}def/XStroke{newpath}def}ifelse}bdef/e1`6{/__$jk where{pop/junk save
def bell^6 south^6/_th xdef _URx _LLx sub abs _th sub _URy _LLy sub abs _th
sub _LLx _th 2 div add _LLy _th 2 div add RectPath gsave .9 setseparationgray
fill grestore 0 setseparationgray _th setlinewidth stroke _LLx _LLy _URy add 2
div moveto/Helvetica findfont[180 180 J2`6 neg 0 0 3 -1 roll 0 0]makefont
setfont show junk restore}{{6{pop}repeat}if 6{pop}repeat}ifelse}bdef/s`6{gsave
clippath 1 setseparationgray fill grestore}bdef/r`6{PSScreen exch pop exch pop
dup type/dicttype eq{dup/HalftoneType get 1 eq{begin/Angle exch def/Frequency
exch def 60 0 currentdict end}if}if}bdef/t`6{{1 exch sub}}bdef/PPDSetup{
countdictstack mark}bdef/PPDCleanup{stopped cleartomark countdictstack exch
sub dup 0 gt{{end}repeat}{pop}ifelse}bdef/AskFont{save/sv exch def/str(fonts\
                                                       )def/st2 128 string def
st2 cvs dup FontDirectory exch known{pop(Y R)}{/filenameforall where{pop str
exch st2 cvs dup length/len exch def 6 exch putinterval str 0 len 6 add
getinterval mark exch{}st2 filenameforall counttomark 0 gt{cleartomark(Y H)}{
cleartomark(NnN)}ifelse}{pop(NnN)}ifelse}ifelse = flush sv restore}bdef
/AskFreeVM{vmstatus exch sub == pop flush}bdef/AskSpooler{0 == flush}bdef
/_PATgsave matrix def/_PATmtx matrix def/gl^6{7 dict begin/FontDict 9 dict def
FontDict begin/cache exch def/key exch def/proc exch cvx def/mtx exch matrix
invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def
/ptm matrix identmatrix def/str(12345678901234567890123456789012)def end
/FontBBox[0 0 FontDict/width get FontDict/height get]def/FontMatrix FontDict
/mtx get def/Encoding StandardEncoding def/FontType 3 def/BuildChar{pop begin
FontDict begin width 0 cache{0 0 width height setcachedevice}{setcharwidth}
ifelse 0 0 moveto width 0 lineto width height lineto 0 height lineto closepath
clip newpath gsave proc grestore end end}def FontDict/key get currentdict
definefont end}bdef/hj^6{dup type/dicttype eq{begin FontDict/ctm get setmatrix
}{exch begin FontDict/ctm get setmatrix concat}ifelse currentdict setfont
FontDict begin FontMatrix concat width 0 dtransform round width div exch round
width div exch 0 height dtransform round height div exch round height div exch
0 0 transform round exch round exch ptm astore setmatrix pathbbox height div
ceiling height mul 4 1 roll width div ceiling width mul 4 1 roll height div
floor height mul 4 1 roll width div floor width mul 4 1 roll 2 index sub
height div ceiling cvi exch 3 index sub width div ceiling cvi exch 4 2 roll
moveto FontMatrix ptm invertmatrix pop{gsave ptm concat dup str length idiv{
str show}repeat dup str length mod str exch 0 exch getinterval show grestore 0
height rmoveto}repeat pop end end}bdef/i1`6{gsave clip hj^6 grestore newpath}
bdef/j1`6{gsave 0 0 0 0 setcmykcolor fill grestore i1`6}bdef/k1`6{_PATgsave
currentmatrix pop _PATmtx defaultmatrix setmatrix rotate 3.36 3.36[1 0 0 -1 0
0]{2 setlinecap 0 1.68 moveto 1.68 0 lineto 1.68 3.36 moveto 3.36 1.68 lineto
0.675 setlinewidth stroke}/l1`6 true gl^6 pop 5.28 5.28[1 0 0 -1 0 0]{2
setlinecap 0 2.64 moveto 2.64 0 lineto 2.64 5.28 moveto 5.28 2.64 lineto 0.675
setlinewidth stroke}/m1`6 true gl^6 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap 0
1.92 moveto 3.84 1.92 lineto 0.675 setlinewidth stroke}/n1`6 true gl^6 pop
7.68 7.68[1 0 0 -1 0 0]{2 setlinecap 0 3.84 moveto 7.68 3.84 lineto 0.675
setlinewidth stroke}/o1`6 true gl^6 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap
1.92 0 moveto 1.92 3.84 lineto 0.675 setlinewidth stroke}/p1`6 true gl^6 pop
7.68 7.68[1 0 0 -1 0 0]{2 setlinecap 3.84 0 moveto 3.84 7.68 lineto 0.675
setlinewidth stroke}/q1`6 true gl^6 pop 3.84 3.84[1 0 0 -1 0 0]{2 setlinecap
1.92 0 moveto 1.92 3.84 lineto 0 1.92 moveto 3.84 1.92 lineto 0.675
setlinewidth stroke}/r1`6 true gl^6 pop 7.68 7.68[1 0 0 -1 0 0]{2 setlinecap
3.84 0 moveto 3.84 7.68 lineto 0 3.84 moveto 7.68 3.84 lineto 0.675
setlinewidth stroke}/s1`6 true gl^6 pop _PATgsave setmatrix}bdef
/_OutlineSmearFrac 10 def/_OutlineWeight 0.012 def/_OutlineFillColor 0 0 0 1()
findcmykprocesscolor def/_ShadowReverseColor 0 0 0 1()findcmykprocesscolor def
/_BoldFactorX 0.015 def/_BoldFactorY 0.015 def/_ShadowFactorX 0.06 def
/_ShadowFactorY 0.06 def/_ObliqueFactor -0.21 def/_ShadowTintFactor 0.2 def
/_BFontUOThick 1 0/Helvetica findfont/FontMatrix get dtransform dup mul exch
dup mul add sqrt _OutlineWeight mul def/_TXmtx matrix def/_TXctmx matrix def
/_txgsave matrix def/_BaseMatrix[1 0 0 -1 0 0]def/_ItalicMatrix[1 0
_ObliqueFactor 1 0 0]def/tempDict null def userdict/FCDict userdict put
/isWinPS false def/_xSize 12 def/_ySize 12 def/_dots 1440 def/_fDict null def
/_uScale null def/_uPosition null def/_uThickness null def/_uOThickness null
def/_dUPosition -100 def/_dUThickness 50 def/_dFontScale -0.001 def/_runLen
null def/_txc null def/_txt null def/_txo F def/_tx? F def/_ctc null def/_ctt
null def/_cto F def/_cPaint null def/_outxc null def/_outxt null def/_outxo T
def/_shdc null def/_shdt null def/_shdo T def/K2`6 null def/k3`6 null def/m3`6
null def/j3`6 null def/l3`6 null def/FTextPaint null def/STextPaint null def
/_gMTX matrix def/macvec 256 array def macvec dup dup 0/Times-Roman findfont
/Encoding get 0 128 getinterval putinterval 39/quotesingle put 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave
/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex
/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve
/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger
/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright
/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal
/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine
/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical
/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/blank/Agrave
/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft
/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft
/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase
/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute
/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute
/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring
/cedilla/hungarumlaut/ogonek/caron macvec 128 128 getinterval astore pop
/winvec 256 array def winvec dup dup 0/Times-Roman findfont/Encoding get 0 128
getinterval putinterval 39/quotesingle put 96/grave put/grave/acute/circumflex
/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron
/dotlessi winvec 0 14 getinterval astore pop/bullet/bullet/bullet
/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex
/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet/bullet/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/bullet/bullet/Ydieresis/space/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth
/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis winvec 127 129 getinterval astore pop/M1`6{{
_TXmtx astore concat}if _TXctmx currentmatrix pop}bdef/N1`6{_txgsave
currentmatrix pop}bdef/O1`6{_txgsave setmatrix}bdef/NN2`6{_LBOgsave
currentmatrix pop O1`6 gsave}bdef/NN3`6{clip newpath _LBOgsave setmatrix}bdef
/P1`6{O1`6}bdef/Q1`6{_TXctmx setmatrix}bdef/v1`6{userdict begin dict/FCDict
exch def end}bdef/fontdef{FCDict 3 1 roll put}bdef/fontget{FCDict exch get}
bdef/x1`6{aldus^6 _BaseMatrix makefont fontdef}bdef/p3`6{dup length 1 add dict
/tempDict exch def{1 index/FID ne 2 index/UniqueID ne and{tempDict 3 1 roll
put}{pop pop}ifelse}forall tempDict}bdef/aldus^6{findfont exch isWinPS{pop dup
/Encoding get dup 161 get exch 162 get/cent eq exch/exclamdown eq and}if{p3`6
dup/Encoding isWinPS{winvec}{macvec}ifelse put definefont}{exch pop}ifelse}
bdef/I1`6{findfont p3`6 dup/Encoding get 256 array copy dup dup 3 index
/Encoding 3 2 roll put}bdef/J1`6{put dup}bdef/K1`6{pop pop definefont
_BaseMatrix makefont fontdef}bdef/y1`6{gsi^6 fontdef}bdef/z1`6{fontget
_ItalicMatrix makefont fontdef}bdef/gsi^6{fontget dup maxlength 2 add dict
/tempDict exch def{1 index/FID ne 2 index/UniqueID ne and{tempDict 3 1 roll
put}{pop pop}ifelse}forall tempDict begin/PaintType 2 def/StrokeWidth 1 0
FontMatrix dtransform dup mul exch dup mul add sqrt _OutlineWeight exch div
def end tempDict definefont}bdef/auckland^6{/_ySize xdef/_xSize xdef fontget[
_xSize 0 0 _ySize 0 0]makefont setfont}bdef/wcu^6{_dots mul}bdef/n`6{1440 div
/_dots xdef}bdef/J2`6{wcu^6 exch wcu^6 exch}bdef/w1`6{J2`6 auckland^6}bdef
/K2`6{}bdef/A1`6{isWinPS{O2`6}{pop pop pop}ifelse 5 3 roll K2`6}bdef/K3`6{3
index 10 2 roll isWinPS{O2`6}{pop pop pop}ifelse 5 3 roll 7 -2 roll exch
TShowTrap}bdef/L2`6{/_x1 _xSize _BoldFactorX mul def/_y1 _ySize _BoldFactorY
mul def 5 copy _y1 add exch _x1 add exch K2`6 5 copy _y1 add exch _x1 sub exch
K2`6 5 copy _y1 sub exch _x1 add exch K2`6 5 copy _y1 sub exch _x1 sub exch
K2`6 K2`6}bdef/B1`6{O2`6 5 3 roll L2`6}bdef/C1`6{O2`6 6 3 roll 6 copy U2`6 3 1
roll _ySize _ShadowFactorY mul add exch _xSize _ShadowFactorX mul add exch 3
-1 roll{L2`6}{K2`6}ifelse V2`6{L2`6}{K2`6}ifelse}bdef/D1`6{O2`6 5 3 roll gsave
6 index not{7 index _xSize _ySize auckland^6}if 5 copy _ySize _ShadowFactorY
mul add exch _xSize _ShadowFactorX mul add exch 11 -1 roll{L2`6}{K2`6}ifelse
grestore 6 -1 roll{M2`6}{6 -1 roll N2`6}ifelse}bdef/M2`6{/_x1
_OutlineSmearFrac wcu^6 def/_y1 _OutlineSmearFrac wcu^6 def 5 copy _y1 neg add
exch _x1 neg add exch K2`6 5 copy _y1 neg add exch _x1 add exch K2`6 5 copy
_y1 add exch _x1 neg add exch K2`6 5 copy _y1 add exch _x1 add exch K2`6 m3`6}
bdef/E1`6{O2`6 5 3 roll M2`6}bdef/N2`6{gsave _xSize _ySize auckland^6 5 copy
m3`6 grestore K2`6}bdef/F1`6{O2`6 6 3 roll N2`6}bdef version cvr 47.0 ge{
/strwth{stringwidth pop}bdef}{/strwth{gsave newpath 0 0 moveto 0 0 lineto
closepath clip stringwidth grestore pop}bdef}ifelse/O2`6{dup 0 gt{dup 4 1 roll
4 index mul exch 5 index mul add 5 index strwth add sub exch div add}{pop pop
pop}ifelse}bdef/G1`6{fontget/_fDict xdef wcu^6 _fDict/FontInfo known{isWinPS
_fDict/FontType get 3 eq and{_dFontScale}{_fDict/FontMatrix get 3 get}ifelse
mul/_uScale xdef _fDict/FontInfo get dup/UnderlinePosition known{dup
/UnderlinePosition get _uScale mul/_uPosition xdef}{/_uPosition _dUPosition
_uScale mul def}ifelse dup/UnderlineThickness known{dup/UnderlineThickness get
_uScale mul/_uThickness xdef}{/_uThickness _dUThickness _uScale mul def}ifelse
pop}{_dFontScale mul/_uScale xdef/_uPosition _dUPosition _uScale mul def
/_uThickness _dUThickness _uScale mul def}ifelse/_uOThickness _BFontUOThick
_uScale mul def _fDict/PaintType known{_fDict/PaintType get 2 eq{_fDict
/StrokeWidth known{/_uOThickness _fDict/StrokeWidth get _uScale mul def}{1 0
_fDict/FontMatrix get dtransform dup mul exch dup mul add sqrt _OutlineWeight
mul _uScale mul/_uOThickness xdef}ifelse}if}if}bdef/H1`6{gsave/_runLen xdef
/_y1 xdef/_x1 xdef/_y1 _y1 _uPosition add def{dup not{U2`6}if/_y2 _ySize
_ShadowFactorY mul _y1 add def/_x2 _xSize _ShadowFactorX mul _x1 add def
_uThickness _x2 _y2 _x2 _runLen add _y2 P2`6 dup not{V2`6}if}if{_uOThickness
_x1 _y1 _uThickness 2 div add _x1 _runLen add _y1 _uThickness 2 div sub Q2`6}{
_uThickness _x1 _y1 _x1 _runLen add _y1 P2`6}ifelse grestore}bdef/mm$6{gsave
_ySize 3 div sub/_y1 xdef _y1 _y1 3 1 roll _ySize 16 div 5 1 roll P2`6
grestore}bdef/P2`6{gsave moveto lineto setlinewidth k3`6 grestore}bdef/Q2`6{
gsave south^6/_th xdef _URx _LLx sub abs _th sub _URy _LLy sub abs _th sub
_LLx _th 2 div add _LLy _th 2 div add RectPath gsave j3`6 grestore _th
setlinewidth k3`6 grestore}bdef/d`6{/_ctype xdef/_txt xdef dup null ne{_ctype
r36}if/_txc xdef SetOutColor SetShadColor/_tx?/l3`6 _ctype _txc _txt n2`6 S2`6
}bdef/s36{_hifi eq{dup length 0 3 1 roll 0 1 3 -1 roll 1 sub{exch dup 3 -1
roll get dup type/arraytype eq exch dup type/packedarraytype eq 3 -1 roll or{1
get 3 -1 roll add exch}{pop}ifelse}for pop}{aload pop pop add add add}ifelse 0
eq}bdef/SetOutColor{_txt null eq{/_outxc null def/_outxt null def}{_txc null
eq{_txt 0 eq{/_outxt 1 def _ctype _paper eq{/_outxc _OutlineFillColor def}{
/_outxc null def}ifelse}{/_outxt 0 def/_outxc null def}ifelse}{_txc _ctype s36
{/_outxt 1 def/_outxc _OutlineFillColor def}{/_outxt 0 def/_outxc null def}
ifelse}ifelse}ifelse/_cjc?/FTextPaint _ctype _outxc _outxt n2`6}bdef
/SetShadColor{_txt null eq{/_shdc null def/_shdt null def}{/_shdo _txo def
_txc null eq{_txt 0 eq{/_shdt 1 def}{/_shdt T2`6 def}ifelse _ctype _paper eq{
/_shdc _ShadowReverseColor def/_shdo T def}{/_shdc null def}ifelse}{_txc
_ctype s36{/_shdt 1 def/_shdc _ShadowReverseColor def/_shdo T def}{/_shdt T2`6
def/_shdc _txc def}ifelse}ifelse}ifelse/_cjc?/STextPaint _ctype _shdc _shdt
n2`6}bdef/S2`6{_tx?{/K2`6{_txo setoverprint _txc _txt l3`6 moveto 0 4 2 roll 0
32 6 3 roll awidthshow}def/k3`6{_txo setoverprint _txc _txt l3`6 stroke}def
/m3`6{_outxo setoverprint _outxc _outxt FTextPaint moveto 0 4 2 roll 0 32 6 3
roll awidthshow}def/j3`6{_outxo setoverprint _outxc _outxt FTextPaint fill}def
}{/K2`6{5{pop}repeat}def/k3`6{newpath}def/m3`6{5{pop}repeat}def/j3`6{newpath}
def}ifelse}bdef/T2`6{_txt _ShadowTintFactor mul}bdef/U2`6{/_ctc _txc def/_ctt
_txt def/_cto _txo def/_cPaint/l3`6 ldef/_txc _shdc def/_txt _shdt def/_txo
_shdo def/l3`6/STextPaint ldef}bdef/V2`6{/_txc _ctc def/_txt _ctt def/_txo
_cto def/l3`6/_cPaint ldef}bdef/g`6{/_txo xdef}bdef/SaveHook{}ndef/RestoreHook
{}ndef/W2`6{SaveHook _dots _LPmtx aload _PSdef aload _WCmtx aload _txgsave
aload _TXctmx aload _gMTX currentmatrix aload}bdef/X2`6{astore setmatrix
astore pop astore pop astore pop astore pop astore pop/_dots xdef RestoreHook}
bdef/bmt^6{save def}bdef/tsi^6{mark W2`6 counttomark 2 add -2 roll pop restore
X2`6 o`6}bdef/seni^6{restore}bdef/o`6{/_fo F def/_so F def/_txo F def}bdef
/_GRPHmtx matrix def/_imagesave null def/_imc null def/_imt null def/ImPaint
null def/cjc^6{/_imagesave save def _WCmtx setmatrix}bdef/tvs^6{_PSdef
setmatrix}bdef/dsd^6{_imagesave restore}bdef/espresso 4 dict def espresso
begin/setgray{setgray}def/setcmykcolor{setcmykcolor}def/setrgbcolor{
setrgbcolor}def/sethsbcolor{sethsbcolor}def end/o3`6{espresso begin userdict
begin}bdef/vm$6{/OSdict xdef end end end}bdef/b2a`6{/_imagesave save def{
_GRPHmtx astore concat}if translate dup scale newpath 0 0 RectPath clip
newpath userdict begin/showpage{}def 0 setgray 0 setlinecap 1 setlinewidth 0
setlinejoin 10 setmiterlimit[]0 setdash newpath F setoverprint mark}bdef/a2`6{
OSdict begin}bdef/b2`6{end V1`6}bdef/kHu$6{/_imagesave save def{_GRPHmtx
astore concat}if translate scale translate newpath RectPath clip newpath
userdict begin/showpage{}def 0 setgray 0 setlinecap 1 setlinewidth 0
setlinejoin 10 setmiterlimit[]0 setdash newpath F setoverprint mark}bdef/V1`6{
cleartomark end _imagesave restore}bdef/_ortnt null def/_orclr null def/_gop
false def/_cjc? false def/*setcmyk null def/*setrgb null def/*sethsb null def
/*setgry null def/*setsepgray null def/*setcustomclr null def/*setprocessclr
null def/*sethificlr null def/*setop null def/*zimage null def/$gate_1 T def
/$clrOverride F def/Y2`6{P6PS begin/*setcmyk/setcmykcolor ldef/*setrgb
/setrgbcolor ldef/*sethsb/sethsbcolor ldef/*setgry/setgray ldef/*setcustomclr
/setcustomcolor ldef/*setprocessclr/setprocesscolor ldef/*sethificlr
/sethificolor ldef/*setop/setoverprint ldef/*setsepgray/setseparationgray ldef
/*zimage/image ldef end}bdef/X1`6{P6PS begin/setcmykcolor/*setcmyk ldef
/setrgbcolor/*setrgb ldef/sethsbcolor/*sethsb ldef/setgray/*setgry ldef
/setcustomcolor/*setcustomclr ldef/setprocesscolor/*setprocessclr ldef
/sethificolor/*sethificlr ldef/setoverprint/*setop ldef/setseparationgray
/*setsepgray ldef/image/*zimage ldef end}bdef/$curgry systemdict/currentgray
get def/$setrgb systemdict/setrgbcolor get def/$sethsb systemdict/sethsbcolor
get def/$setcmyk systemdict/setcmykcolor known{systemdict/setcmykcolor get}{{1
sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat systemdict
/setrgbcolor get exec pop}}ifelse def/a3`6{P6PS begin/setcmykcolor{gsave
$setcmyk 1 $curgry sub grestore c3`6}def/setrgbcolor{gsave $setrgb 1 $curgry
sub grestore c3`6}def/sethsbcolor{gsave $sethsb 1 $curgry sub grestore c3`6}
def/setgray{1 exch sub c3`6}def/setseparationgray{1 exch sub c3`6}def _spotOR?
{/setcustomcolor/i3`6 ldef}{/setcustomcolor/b3`6 ldef}ifelse/setprocesscolor{
gsave exch aload pop pop 4{4 index mul 4 1 roll}repeat $setcmyk pop 1 $curgry
sub grestore c3`6}def/sethificolor{gsave exch aload length 4 sub{pop}repeat 4{
4 index mul 4 1 roll}repeat $setcmyk pop 1 $curgry sub grestore c3`6}def
/setoverprint{d3`6}def/image{ORimage}def end}bdef/b3`6{gsave exch aload pop
pop 4{4 index mul 4 1 roll}repeat $setcmyk pop 1 $curgry sub grestore c3`6}
bdef/c3`6{$gate_1 $clrOverride and{P6PS begin/$gate_1 F def _ortnt null ne{
_ortnt mul}{null}ifelse _orclr exch X1`6 SetORColorProc a3`6/$gate_1 T def end
}{P6PS begin $MetalHead begin c3`6 end end}ifelse}bdef/d3`6{$gate_1
$clrOverride and{P6PS begin/$gate_1 F def pop _gop X1`6 setoverprint a3`6
/$gate_1 T def end}{P6PS begin $MetalHead begin setoverprint end end}ifelse}
bdef/ORimage{$gate_1 $clrOverride and{P6PS begin/$gate_1 F def X1`6 _orclr
null eq{separationimage}{_orclr _ctype _hifi eq{hificolorimage}{
customcolorimage}ifelse}ifelse a3`6/$gate_1 T def end}{P6PS begin $MetalHead
begin image end end}ifelse}bdef/W1`6{P6PS begin/_ctype xdef/_ortnt xdef dup
null ne{_ctype r36}if/_orclr xdef/_cjc?/SetORColorProc _ctype _orclr _ortnt
n2`6 false setoverprint/_gop false def/_spotOR? F def Y2`6 a3`6/$clrOverride T
def end}bdef/Y1`6{P6PS begin/_gop xdef end}bdef/*findcmykcustomclr null def
/*newcmykcustomclr null def/epsdict null def/typedict null def/*$setcustomclr
null def/_spotOR? F def/$spotOverride F def/$gate_2 T def/clrAdjust? F def
/_fhbool F def/f2`6{P6PS begin dup dict/epsdict xdef dict/typedict xdef
/clrAdjust? T def end}bdef/g2`6{/_ctype xdef cvn _ctype _hifi eq{3 index 2 mul
8 add}{7}ifelse 1 roll _ctype exch 2 MakeReadOnlyArray 1 index cvn exch
typedict 3 1 roll put _ctype _hifi eq{findhificolor}if _ctype _spot eq{
findcmykcustomcolor}if _ctype _process eq{findcmykprocesscolor}if epsdict 3 1
roll put}bdef/h2`6{_registration exch 2 array astore exch cvn exch typedict 3
1 roll put}bdef/i2`6{P6PS begin clrAdjust?{/_spotOR? T def e3`6 g3`6
/$spotOverride T def}if end}bdef/e3`6{P6PS begin/*findcmykcustomclr
/findcmykcustomcolor ldef/*newcmykcustomclr/newcmykcustomcolor ldef
/*$setcustomclr/setcustomcolor ldef end}bdef/f3`6{P6PS begin
/findcmykcustomcolor/*findcmykcustomclr ldef/newcmykcustomcolor
/*newcmykcustomclr ldef/setcustomcolor/*$setcustomclr ldef end}bdef/g3`6{P6PS
begin/findcmykcustomcolor/h3`6 ldef/newcmykcustomcolor/n3`6 ldef
/setcustomcolor/i3`6 ldef end}bdef/h3`6{$gate_2 $spotOverride and{P6PS begin
/$gate_2 F def f3`6 dup cvn epsdict exch known{5 1 roll 4{pop}repeat cvn
epsdict exch get}{findcmykcustomcolor}ifelse g3`6/$gate_2 T def end}{P6PS
begin $MetalHead begin findcmykcustomcolor end end}ifelse}bdef/n3`6{$gate_2
$spotOverride and{P6PS begin/$gate_2 F def/_fhbool xdef dup cvn epsdict exch
known{5 1 roll 4{pop}repeat cvn epsdict exch get aload pop}if dup cvn typedict
exch known{dup cvn typedict exch get aload pop pop _hifi eq{{1 index type dup
/arraytype eq exch/packedarraytype eq or{exch pop}{exit}ifelse}loop}if}if
_fhbool f3`6 newcmykcustomcolor g3`6/$gate_2 T def end}{P6PS begin $MetalHead
begin newcmykcustomcolor end end}ifelse}bdef/i3`6{$gate_2 $spotOverride and{
P6PS begin/$gate_2 F def 1 index dup length 1 sub get cvn dup typedict exch
known{typedict exch get aload pop 1 index _registration eq{exch pop mul 1 exch
sub exch pop f3`6 setseparationgray g3`6}{1 index _process eq{f3`6 exch pop
mul setprocesscolor g3`6}{1 index _spot eq{f3`6 exch pop mul setcustomcolor
g3`6}{exch _hifi eq{f3`6 mul sethificolor g3`6}if}ifelse}ifelse}ifelse}{pop
f3`6 setcustomcolor g3`6}ifelse/$gate_2 T def end}{P6PS begin $MetalHead begin
setcustomcolor end end}ifelse}bdef/BMT 2 dict def BMT begin/*def/def load def
/def{1 index/fcheckload eq{pop{pop pop}}if *def}bdef end/t1`6{BMT begin
userdict begin}bdef/u1`6{end end}bdef/u1a`6{findfont pop}bdef end/setpacking
where{pop setpacking}if
%%EndResource

%%BeginResource: procset P6IMAGE_PS 1.0 1
%%Copyright: (C) Copyright 1993,1995 Adobe Systems, Inc. All Rights Reserved.
%%Version:1.0 1
/AdobeIMLIBDict_4.0.50 75 dict def AdobeIMLIBDict_4.0.50 begin/bdef{bind def}
bind def/xdef{exch def}def/_spot 1 def/_process 2 def/_hifi 3 def/_paper 4 def
/_registration 5 def/_ctype null def/_aldimtint 1 def/_localxfer{}def/_curxfer
{}def/iAE^6{{}}def/iAF^6{pop}def/prev_image/image where pop/image get dup type
/arraytype eq{bdef}{def}ifelse/prev_imagemask/imagemask where pop/imagemask
get dup type/arraytype eq{bdef}{def}ifelse/_image systemdict/image get def
/_setgray systemdict/setgray get def/_currentgray systemdict/currentgray get
def/_settransfer systemdict/settransfer get def/_currenttransfer systemdict
/currenttransfer get def/_imagemask systemdict/imagemask get def/IMndef{1
index where{pop pop pop}{def}ifelse}bdef/iA^6{/packedarray where{pop
packedarray}{array astore readonly}ifelse}bdef/iB^6{/packedarray where{pop dup
type/packedarraytype eq 2 index type/packedarraytype eq or}{false}ifelse{
/proc2 exch cvlit def/proc1 exch cvlit def proc1 aload pop proc2 aload pop
proc1 length proc2 length add packedarray cvx}{/proc2 exch cvlit def/proc1
exch cvlit def/newproc proc1 length proc2 length add array def newproc 0 proc1
putinterval newproc proc1 length proc2 putinterval newproc cvx}ifelse}bdef
/iC^6{aload pop/_ik xdef/_iy xdef/_im xdef/_ic xdef}bdef/iD^6{_ic .3 mul _im
.59 mul _iy .11 mul _ik add add add dup 1 gt{pop 1}if/_imcmykdarkness xdef}def
/level2 systemdict/languagelevel known{languagelevel 2 ge}{false}ifelse def
/hascolor/deviceinfo where{pop deviceinfo/Colors known{deviceinfo/Colors get
exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict/processcolors known{
statusdict/processcolors get exec 1 gt}{false}ifelse}{false}ifelse}ifelse def
/iG^6{0 1 2 index length 1 sub{dup 2 index exch get 255 exch sub 2 index 3 1
roll put}for}bdef/iO^6{gsave newpath setgray 0 0 moveto 0 1 lineto 1 1 lineto
1 0 lineto closepath fill grestore}def/IMapplytint{/_tint xdef aload length
/len xdef/ix len def 4{ix -1 roll _tint mul ix 1 roll/ix ix 1 sub def}repeat
len iA^6}def/iAB^6 level2{{/cname xdef 4 iA^6 iC^6 _iy 0.0 eq _im 0.0 eq and
_ic 0.0 eq and hascolor not or{iD^6{_imcmykdarkness mul 1 _imcmykdarkness sub
add}currenttransfer iB^6 settransfer _image}{_ctype _spot eq{/_ctype _process
def}if _ctype _hifi eq{}if _ctype _process eq{}if _ctype _spot eq version cvr
2012 ge and{[/Separation cname/DeviceCMYK{dup _ic mul exch dup _im mul exch
dup _iy mul exch _ik mul}]setcolorspace currenttransfer settransfer 12 dict
begin/ImageType 1 def/Width cols def/Height rows def/BitsPerComponent bits def
/Decode[1 0]def/ImageMatrix mx def/DataSource/readproc load def currentdict
end _image}{[/Indexed/DeviceCMYK 255{255 div _localxfer 1 exch sub dup dup dup
_ic mul 4 -1 roll _im mul 4 -1 roll _iy mul 4 -1 roll _ik mul}]setcolorspace
dup type/dicttype eq{begin/Decode[0 255]def currentdict end}{12 dict begin
/ImageType 1 def/DataSource xdef/ImageMatrix xdef/BitsPerComponent xdef/Height
xdef/Width xdef/Decode[0 255]def currentdict end}ifelse _image}ifelse}ifelse}
IMndef}{{pop 4 iA^6 iC^6 _iy 0.0 eq _im 0.0 eq and _ic 0.0 eq and hascolor not
or{iD^6{_imcmykdarkness mul 1 _imcmykdarkness sub add}currenttransfer iB^6
settransfer _image}{iAE^6 dup dup dup{_ic mul _ic sub 1 add}iB^6/_cproc xdef{
_im mul _im sub 1 add}iB^6/_mproc xdef{_iy mul _iy sub 1 add}iB^6/_yproc xdef{
_ik mul _ik sub 1 add}iB^6/_kproc xdef currentcolortransfer/_kproc load exch
iB^6 4 1 roll/_yproc load exch iB^6 4 1 roll/_mproc load exch iB^6 4 1 roll
/_cproc load exch iB^6 4 1 roll setcolortransfer/_mbuf 0 string def/_ybuf 0
string def/_kbuf 0 string def{iG^6 dup length _mbuf length ne{dup length dup
dup/_mbuf exch string def/_ybuf exch string def/_kbuf exch string def}if dup
_mbuf copy _ybuf copy _kbuf copy pop}iB^6{_mbuf}{_ybuf}{_kbuf}true 4
colorimage}ifelse}IMndef}ifelse/separationimage{_image}IMndef
/tintedseparationimage{/_aldimtint xdef{_aldimtint mul 1 _aldimtint sub add}
currenttransfer iB^6 settransfer separationimage}IMndef/customcolorimage{aload
pop iAB^6}IMndef/tintedcolorimage{IMapplytint customcolorimage}IMndef
/hificolorimage{aload pop/cname xdef{dup type dup/arraytype ne exch
/packedarraytype ne and{exit}{pop}ifelse}loop/_ctype _process def cname
findcmykprocesscolor customcolorimage}IMndef/iW^6{abs exch abs 2 copy add 1 gt
{1 sub dup mul exch 1 sub dup mul add 1 sub}{dup mul exch dup mul add 1 exch
sub}ifelse}def/iX^6{exch pop abs 1 exch sub}def/iAG^6{currentscreen pop/iW^6
load setscreen}def/iP^6{currentscreen 3 -1 roll pop setscreen}def/iQ^6{
currentscreen exch pop 2 index exch setscreen pop}def/iR^6{currentscreen pop 2
index setscreen pop}def/iT^6{dup length 2 sub/_lutlen xdef/_lut xdef{_lutlen
mul AdobeIMLIBDict_4.0.50/_index 3 -1 roll put AdobeIMLIBDict_4.0.50/_low
_index floor put AdobeIMLIBDict_4.0.50/_high _low 1 add put _index _low sub
_lut _high cvi get mul _high _index sub _lut _low cvi get mul add}iAE^6 iB^6
iAF^6}def/_IMpreinvert{{1 exch sub}iAE^6 iB^6 iAF^6}def/iV^6{concat}def
/IMdictinfo{(vmstatus:)== vmstatus = = =(length of current dict:)==
currentdict length = flush}def/iH^6{dup _process eq{pop findcmykprocesscolor}{
_spot eq{findcmykcustomcolor}{findhificolor}ifelse}ifelse}def
/IMapplytinttostackcolor{_hifi eq{/colorname xdef/ninks xdef/depth ninks 2 mul
def ninks{_aldimtint mul depth 1 roll depth 1 roll}repeat/depth depth 4 add
def 4{depth -1 roll _aldimtint mul depth 1 roll/depth depth 1 sub def}repeat
ninks colorname}{5 1 roll 4{_aldimtint mul 5 1 roll}repeat}ifelse}def/iI^6{
/_ctype xdef/_aldimtint xdef dup null eq{/_imc xdef}{_ctype _hifi eq{1 index 2
mul 6 add}{5}ifelse copy _ctype iH^6/_imc xdef _ctype IMapplytinttostackcolor
_ctype iH^6/_imc_tinted xdef}ifelse _imc null eq{1 _aldimtint sub
setseparationgray}{_ctype _process eq{_imc _aldimtint setprocesscolor}{_ctype
_spot eq{_imc _aldimtint setcustomcolor}{_imc _aldimtint sethificolor}ifelse}
ifelse}ifelse}def/iJ^6{setoverprint}def/iK^6{false iJ^6 0.0 0.0 0.0 1.0(Black\
)1.0 _process iI^6}def/iL^6{/dr1 xdef/dr0 xdef{255 mul dup dr0 lt{pop 0.0}{dup
dr1 gt{pop 1.0}{dr0 sub dr1 dr0 sub div}ifelse}ifelse}currenttransfer iB^6
settransfer}def/iM^6{_imc null eq _ctype _registration eq or _ctype _paper eq
or{true iJ^6 _aldimtint tintedseparationimage}{_ctype _spot eq{_imc _aldimtint
tintedcolorimage}{_ctype _process eq{_imc_tinted customcolorimage}if _ctype
_hifi eq{_imc_tinted hificolorimage}if}ifelse}ifelse}def/iN^6{_image}def/iS^6{
/_invertthemask? xdef}def/OPIimage{dup type/dicttype eq{iN^6}{iM^6}ifelse}def
/imagemask{/_invertthemask? where{pop dup type/dicttype eq{}{3 -1 roll
_invertthemask?{not}if 3 1 roll}ifelse}if _imagemask}def/foureq{4 index eq 8 1
roll 4 index eq 8 1 roll 4 index eq 8 1 roll 4 index eq 8 1 roll pop pop pop
pop and and and}def/iY^6{/blank 0 _currenttransfer exec 1 _currenttransfer
exec eq def/negative blank{0 _currenttransfer exec 0.5 lt}{0 _currenttransfer
exec 1 _currenttransfer exec gt}ifelse def/inverted? negative def hascolor{
/band 0 def}{/band 5 def}ifelse/setcmykcolor where{pop 1 0 0 0 setcmykcolor
_currentgray 1 exch sub 0 1 0 0 setcmykcolor _currentgray 1 exch sub 0 0 1 0
setcmykcolor _currentgray 1 exch sub 0 0 0 1 setcmykcolor _currentgray 1 exch
sub 4{4 copy}repeat 1 0 0 0 foureq{/band 1 store}if 0 1 0 0 foureq{/band 2
store}if 0 0 1 0 foureq{/band 3 store}if 0 0 0 1 foureq{/band 4 store}if 0 0 0
0 foureq{/band 6 store}if}if blank{/band 6 store}if gsave newpath 0 0 moveto 0
1 lineto 1 1 lineto 1 0 lineto 0 0 lineto clip newpath 1 setlinewidth
/setcmykcolor where{pop 1 1 1 1 setcmykcolor 100 100 moveto 101 101 lineto
stroke}if grestore}def/iZ^6{/binary? xdef binary?{/readdata{currentfile exch
readstring pop}def}{/readdata{currentfile exch readhexstring pop}def}ifelse
/rows xdef/cols xdef/picstr1 cols string def/picstr2 cols string def/picstr3
cols string def/picstr4 cols string def/picstr5 cols string def 12 dict begin
/ImageType 1 def/Width cols def/Height rows def/ImageMatrix[cols 0 0 rows neg
0 rows]def/BitsPerComponent 8 def band 0 eq{/Decode[0 1 0 1 0 1 0 1]def}{
/Decode[0 1]def}ifelse band 0 eq{/MultipleDataSources true def/DataSource[{
picstr1 readdata}{picstr2 readdata}{picstr3 readdata}{picstr4 readdata picstr5
readdata pop}]def}if band 1 eq{/DataSource{picstr1 readdata picstr2 readdata
pop picstr3 readdata pop picstr4 readdata pop picstr5 readdata pop}def}if band
2 eq{/DataSource{picstr1 readdata pop picstr2 readdata picstr3 readdata pop
picstr4 readdata pop picstr5 readdata pop}def}if band 3 eq{/DataSource{picstr1
readdata pop picstr2 readdata pop picstr3 readdata picstr4 readdata pop
picstr5 readdata pop}def}if band 4 eq{/DataSource{picstr1 readdata pop picstr2
readdata pop picstr3 readdata pop picstr4 readdata picstr5 readdata pop}def}if
band 5 ge{/DataSource{picstr1 readdata pop picstr2 readdata pop picstr3
readdata pop picstr4 readdata pop picstr5 readdata}def}if currentdict end}def
/image2 level2{/image load def}{{begin Width Height BitsPerComponent
ImageMatrix Decode length 2 eq{/DataSource load image}if Decode length 6 eq{
DataSource 0 get DataSource 1 get DataSource 2 get true 3 colorimage}if Decode
length 8 eq{DataSource 0 get DataSource 1 get DataSource 2 get DataSource 3
get true 4 colorimage}if end}def}ifelse/_image2 level2{/_image load def}{{
begin Width Height BitsPerComponent ImageMatrix/DataSource load _image end}def
}ifelse/IMcmykimage{level2{band 0 eq{/DeviceCMYK}{/DeviceGray}ifelse
setcolorspace}if band 0 eq band 5 eq or{image2}if band 1 ge band 4 le and{{1
exch sub dummy exec}dup 3 _currenttransfer put _settransfer _image2}if band 6
eq{negative{{pop 0}}{{pop 1}}ifelse _settransfer _image2}if}def/iAC^6{
/ADBIMTMP_1 where{pop ADBIMTMP_1 begin}{/ADBIMTMP_1 40 dict def ADBIMTMP_1
begin/_curxfer currenttransfer def/currenttransfer{{}}def/_localxfer{}def
/prev_settransfer/settransfer load def/settransfer{/_localxfer load exch iB^6
/_curxfer load iB^6 _settransfer}def/iAE^6{/_localxfer load}def/iAF^6{
/_localxfer exch def}def}ifelse}def/iAD^6{end}def end
%%EndResource
%%EndProlog
%%BeginSetup
AdobeIMLIBDict_4.0.50 begin 
P6PS begin
PPDSetup{
(; document: IPD263 - MTS \(PM 6.0\)) statusdict /jobname 3 -1 roll put
}PPDCleanup
PPDSetup{
%%BeginFeature:
/#copies 1 def
%%EndFeature
}PPDCleanup
PPDSetup{
%%BeginFeature: *ManualFeed False
statusdict /manualfeed false put
%%EndFeature
}PPDCleanup
PPDSetup{
%%BeginFeature: *PageRegion Letter
letter
%%EndFeature
}PPDCleanup
/isWinPS false def
0 k1`6
f1`6
32 v1`6
F v2`6
%%EndSetup
%%Page: 1 1
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$0 bmt^6
o`6
N1`6
N1`6
F M1`6
$0 tsi^6
/$0 bmt^6
%%IncludeResource: font Palatino-Roman
/AA /|______Palatino-Roman T /Palatino-Roman x1`6
/$1 bmt^6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-104 1555 (- 1 -) 0.046585 0 76 2 4 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
$1 tsi^6
/$1 bmt^6
%%IncludeResource: font Palatino-Bold
/AB /|______Palatino-Bold T /Palatino-Bold x1`6
/$2 bmt^6
/AB 280 280 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-688 -1258 (Building Source-Code Processors for Icon Programs) -0.015793 0 1376 5 48 A1`6
/AA 240 240 w1`6
-204 -1129 (Ralph E. Griswold) 0.015457 0 408 2 16 A1`6
/AA 220 220 w1`6
-615 -1049 (Department of Computer Science, The University of Arizona) -0.002609 0 1230 7 56 A1`6
-825 -891 (There are many situations in which processing an Icon source-language program is useful.) -2.621063 0 1800 12 87 A1`6
-975 -837 (Many of these fall into the category of preprocessing to change the form of a program, as in) 6.029282 0 1950 17 91 A1`6
-975 -783 (modeling string scanning [1]. In this case, all string scanning expressions are recast in terms of) 3.019806 0 1950 15 97 A1`6
-975 -729 (procedure calls:) 0.096436 0 321 1 15 A1`6
$2 tsi^6
/$2 bmt^6
%%IncludeResource: font Helvetica-Oblique
/AC /|______Helvetica-Oblique T /Helvetica-Oblique x1`6
/$3 bmt^6
/AC 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-750 -629 (expr1) 0 0 115 0 4 A1`6
$3 tsi^6
/$3 bmt^6
%%IncludeResource: font Helvetica
/AD /|______Helvetica T /Helvetica x1`6
/$4 bmt^6
/AD 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-635 -629 ( ? ) -0.077988 0 51 2 2 A1`6
/AC 220 220 w1`6
-585 -629 (expr2) 0 0 115 0 4 A1`6
/AD 220 220 w1`6
-470 -629 ( ) -0.077988 3.666656 16 1 0 A1`6
$4 tsi^6
/$4 bmt^6
%%IncludeResource: font ZapfDingbats
/AE /|______ZapfDingbats /ZapfDingbats I1`6
128 /a89 J1`6
129 /a90 J1`6
130 /a93 J1`6
131 /a94 J1`6
132 /a91 J1`6
133 /a92 J1`6
134 /a205 J1`6
135 /a85 J1`6
136 /a206 J1`6
137 /a86 J1`6
138 /a87 J1`6
139 /a88 J1`6
140 /a95 J1`6
141 /a96 J1`6
K1`6
/$5 bmt^6
/AE 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-454 -629 (\333) 0 0 42 0 0 A1`6
/AD 220 220 w1`6
-411 -629 ( Escan\(Bscan\() -0.077988 0 298 1 12 A1`6
/AC 220 220 w1`6
-114 -629 (expr1) 0 0 115 0 4 A1`6
/AD 220 220 w1`6
1 -629 (\), ) -0.077988 0 41 1 2 A1`6
/AC 220 220 w1`6
42 -629 (expr2) 0 0 115 0 4 A1`6
/AD 220 220 w1`6
156 -629 (\)) 0 0 15 0 0 A1`6
/AA 220 220 w1`6
-825 -549 (Preprocessors to do these kinds of things often are written by hand, an approach that often) -2.489227 0 1800 15 90 A1`6
-975 -495 (produces unsatisfactory results. Hand-crafted preprocessors rarely treat source-language code) 5.097076 0 1950 8 92 A1`6
-975 -441 (with complete generality. For example, a hand-crafted preprocessor for modeling string scanning) -1.918304 0 1950 11 94 A1`6
-975 -387 (might not properly handle a string literal such as) 0.010223 0 991 8 49 A1`6
/AD 220 220 w1`6
-750 -312 (write\("The form is s ? e"\)) -0.020752 0 501 5 25 A1`6
/AA 220 220 w1`6
-975 -233 (and instead change the literal. Similarly, hand-crafted preprocessors often assume that programs) -0.823761 0 1950 11 95 A1`6
-975 -179 (are laid out in reasonable ways, and may not handle something like this:) 0.000443 0 1467 12 71 A1`6
/AD 220 220 w1`6
-750 -99 (s) 0 0 23 0 0 A1`6
-727 -99 ( ?) -0.099289 0 38 1 1 A1`6
-750 -45 (while) 0 -0.017593 104 0 4 A1`6
-750 9 (move) 0 -0.012009 112 0 3 A1`6
-638 9 (\() 0 0 15 0 0 A1`6
-750 63 (1) 0 0 25 0 0 A1`6
-750 117 (\)) 0 0 15 0 0 A1`6
-750 171 (do) 0 0.061035 51 0 1 A1`6
-750 226 (write\() 0 0.010254 112 0 5 A1`6
-750 280 (move\() 0 -0.012009 127 0 4 A1`6
-750 334 (1) 0 0 25 0 0 A1`6
-750 388 (\)) 0 0 15 0 0 A1`6
-750 442 (\)) 0 0 15 0 0 A1`6
/AA 220 220 w1`6
-975 521 (And few hand-crafted preprocessors correctly handle programs that contain syntax errors.) -0.007935 0 1832 10 87 A1`6
-825 601 (The reason for such problems is obvious: A correct and robust preprocessor must correctly) -2.662155 0 1800 13 88 A1`6
-975 655 (parse all source-language programs. This is a major undertaking that usually is short-circuited) 3.258179 0 1950 12 94 A1`6
-975 709 (because of the effort and technical skill that is required.) 0.009491 0 1119 9 58 A1`6
-825 788 (Icon\325s variant translator system [2] was developed to mitigate these problems. It uses the) 0.262604 0 1800 13 89 A1`6
-975 842 (parser contained in the implementation of Icon together with a system for describing code) 9.655838 0 1950 13 88 A1`6
-975 896 (generation. Variant translators take care of the parsing part of the problem and do it in a way that) -1.429657 0 1950 18 99 A1`6
-975 951 (is as correct and robust as the Icon compiler.) 0.01236 0 899 8 45 A1`6
-825 1030 (By taking care of the parsing part of the problem, variant translators make it relatively easy) -3.088974 0 1800 15 93 A1`6
-975 1084 (to create some kinds of processors. A preprocessor for modeling string scanning can be created by) -2.312363 0 1950 15 96 A1`6
-975 1138 (making a few simple changes to the standard code-generation specifications.) -0.002579 0 1553 9 74 A1`6
-825 1217 (Part of the problem with using with variant translators is having to learn how to specify) 1.28537 0 1800 15 88 A1`6
-975 1271 (code-generators and dealing with a somewhat awkward syntax. A more serious problem is that) 0.941788 0 1950 13 89 A1`6
-975 1326 (supplementary and often tricky C code is needed in many cases.) -0.007812 0 1302 10 61 A1`6
-825 1405 (This report describes a ) -4.486221 0 452 4 23 A1`6
$5 tsi^6
/$5 bmt^6
%%IncludeResource: font Palatino-Italic
/AF /|______Palatino-Italic T /Palatino-Italic x1`6
/$6 bmt^6
/AF 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-373 1405 (meta-translator) 0 0 288 0 14 A1`6
/AA 220 220 w1`6
-85 1405 ( system for Icon. This term is used because a translator) -4.486069 0 1060 10 55 A1`6
O1`6
$6 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 2 2
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$6 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-119 1545 (- 2 -) 0.046585 0 76 2 4 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
/AA 220 220 w1`6
-975 -1389 (converts an Icon source-language program into an Icon procedure that, when called, produces a) -0.161499 0 1941 13 92 A1`6
-975 -1335 (translation of the original program:) 0.019119 0 715 4 35 A1`6
P1`6
$5 tsi^6
/$5 bmt^6
483 -160 0 174 0 -14 3.861284 -3.66875 -937 -671 F kHu$6
i2`6

%%BeginDocument:
%!PS-Adobe-2.0 EPSF-2.0
%%DocumentFonts: Palatino-Roman
%%+ Helvetica
%%BoundingBox: 0 0 484 176
%%Title:mt.ps
%%Creator:
%%CreationDate:
%%EndComments
%%BeginProcSet: BeachHead 2 3 
%%BeachHead - v2.3 Copyright 1991-1993 Silicon Beach Software, inc. 
userdict /BeachHead known userdict begin /BeachHead 140 dict def BeachHead end begin /ta exch def /BeachHead_version 2 def /isWinPS false def /c 75 string def /sa 75 string def /f false def /g false def /h false def /i false def
/n true def /k  0.015 def /oldmatrix 6 array def
/newmatrix 6 array def /_doTexturePat false def /_strtxtmatrix null def /nulld { counttomark {null def} repeat pop } bind def mark
/l /m /o /q /r /u /v /w /_cwidths /wa
/x /y /z /A /B /D /E/F /G /H /I /J /K /M /N /O /P /Q /R /S /T /V /W /X /Y /ba /ca /da /ea /fa /ga
/ha /ia /ja /ka ta not{/la /ma}if /_strtxtmatrix nulld /ra 256 array def
ra dup dup 0 /Times-Roman findfont /Encoding get 0 128 getinterval putinterval
39 /quotesingle put 96 /grave put /Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve
/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent
/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute
/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff
/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown
/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright
/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright
/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft
/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron 
ra 128 128 getinterval astore pop /va 256 array def ra va copy pop va 15{dup}repeat  161 /ring put 178 /Scaron put 182 /eth put 184 /Thorn put 185 /thorn put 195 /scaron put 198 /Eth put 222 /hyphen put 223 /twosuperior put 225 /threesuperior put 240 /onequarter put 249 /onehalf put 250 /periodcentered put 252 /cedilla put 253 /multiply put 254 /Yacute put version cvr 51 ge { va 245 /onesuperior put va 251 /threequarters put va 255 /yacute put } if /d { 0 1 74 { c exch 0 put } for dup c cvs pop c } bind def /qa { 0 1 74 { sa exch 0 put } for dup sa cvs pop sa 74 1 put } bind def /e { d 74 2 put } bind def /addoblique { /g true def } bind def /addheavy { /f true def } bind def /adduline { /h true def } bind def /findshadowfont { findoutlinefont  BeachHead /i true put  BeachHead /n true put } bind def /findoutlinefont { findbeachheadfont gof /n true def } bind def /findbeachheadfont { /f false def /g false def 
/h false def /i false def dup findfont  dup /FontType get 0 ne {  /Encoding get dup  161 get  exch 162 get  /cent eq exch /exclamdown eq and  { userdict /BeachHead get begin qa  FontDirectory sa known  { pop sa findfont  } { findfont  dup length 1 add  dict /o exch def  {  1 index /FID ne  2 index /UniqueID ne and  { o  3 1 roll put } { pop pop } ifelse 
} forall /FontName sa dup length string copy def
o /Encoding isWinPS {va}{ra} ifelse put sa o definefont  } ifelse end }{ findfont } ifelse }{  exch pop  } ifelse } bind def /gof { userdict /BeachHead get begin dup /FontName get e  FontDirectory c known  { pop pop c findfont  } {  exch  dup /FontType get 0 eq  { dup maxlength 2 add dict begin  { 1 index /FID ne 2 index /UniqueID ne and {def} {pop pop} ifelse }forall  currentdict  end dup   dup /FDepVector get [ exch {gof} forall ]  /FDepVector exch put  exch    e  pop  c  exch definefont } { 12 dict begin dup  /l exch def   /FontType 3 def /FontMatrix [1 0 0 1 0 0] def /FontBBox [0 0 1 1] def /Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for dup  exch maxlength 2 add dict begin { 1 index /FID ne 2 index /UniqueID ne and {def} {pop pop} ifelse }forall  /PaintType 2 def  /StrokeWidth  1 0 FontMatrix dtransform  dup mul exch dup mul add sqrt  .012 exch div def currentdict  end  /_dummy exch definefont  /r exch  def  /m 1 string def  /FontType 3 def /BuildChar { exch begin  m 0 3 -1 roll put  r setfont m stringwidth  setcharwidth  l setfont i  { .05 -.05 moveto m show } if n  { reversecolor 0 0 moveto m show reversecolor } if r setfont 0 0 moveto m show end } bind def currentdict  end  exch    e  pop  c exch definefont }  ifelse } ifelse end } bind def /EPSBegin { save userdict /BeachHead get begin /la exch def count /ma exch def end userdict /showpage {} put 0 setgray 0 setlinecap 1 setlinewidth 
0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def /EPSEnd { userdict /BeachHead get begin count ma sub dup 0 gt {{pop}repeat} {pop}ifelse la end restore } bind def /cimage { userdict /BeachHead get begin { {readstring} } { {readhexstring} } ifelse /u exch def /colorimage where {  pop  4 index  dup string /v exch def  dup string /w exch def  dup string /x exch def  dup string /y exch def  string /z exch def  { currentfile v u pop }  { currentfile w u pop }  { currentfile x u pop }  { currentfile y u pop   currentfile z u pop pop }  5 -1 roll  { true 4 A }  { true 4 /colorimage load exec }  ifelse } {  4 index  dup string /z exch def  4 mul string /B exch def  { currentfile B u pop pop  currentfile z u pop }  exch  { transimage }  { /image load exec }  ifelse } ifelse end } bind def /bhshow  { userdict /BeachHead get begin h { gsave dup stringwidth pop (_) stringwidth pop div 1 scale currentpoint (_) show moveto grestore } if gsave 
g { [1 0 .17 1 0 0] concat  } if f { /_x1 12 k mul def  /_y1 12 k mul def  currentpoint 3 copy   _y1 add exch _x1 add exch moveto show 3 copy _y1 add exch _x1 sub exch moveto show 3 copy _y1 sub exch _x1 add exch moveto show 3 copy  _y1 sub exch _x1 sub exch moveto show  moveto } if show grestore end } bind def /C { D  { gsave E F  3 index  idtransform translate  G 1  4 index  4 index  {H}  /image load exec  grestore /I 0 def  /G 0 def /D false def  } if } bind def /transimage { userdict /BeachHead get begin 2 index  8 ne  { /image load exec }  {  4 index cvi  string  /H exch def  /J 0 string def  /K 0 def  /D false def  /I 0 def  /G 0 def  0 1 5 index 1 sub  { /F exch def  0 1 6 index 1 sub  { K  J length ge { 1 index dup type  /stringtype ne  { exec } if  /J exch def  /K 0 def  } if J K get  /K K 1 add def  dup 255 eq  {  pop pop  C } {  H I  3 -1 roll put /I I 1 add def  /G G 1 add def D not  { /E exch def /G 1 def /D true def } { pop  } ifelse } ifelse } for  C  } for  5{pop}repeat  } ifelse end } bind def 
/L { D  { gsave E F  8 index  idtransform translate  I 1  8  9 index  {M}  {N}  {O}  {P}  true  4  /colorimage load exec  grestore /I 0 def  /D false def  } if } bind def /A { 9 index cvi  dup string /M exch def  dup string /N exch def  dup string /O exch def  string /P exch def  /Q 0 string def  /K 0 def  /D false def  /I 0 def  /G 0 def  0 1 10 index 1 sub  { /F exch def  0 1 11 index 1 sub  { K  Q length ge { 6 index exec /R exch def  5 index exec /S exch def  4 index exec /T exch def  3 index exec /Q exch def  /K 0 def  } if R K get  S K get  T K get  Q K get  /K K 1 add def  dup 0 eq  2 index 0 eq and 3 index 0 eq and 4 index 0 eq and {  5{pop}repeat  L } {  M I  6 -1 roll put N I  5 -1 roll put O I  4 -1 roll put P I  3 -1 roll put /I I 1 add def  D not  { /E exch def  /D true def  } { pop  } ifelse } ifelse } for  L  } for 
10{pop}repeat  } bind def /bps 8 string def  /bpm [8 0 0 8 0 0] def  /bpp { bps } def  /overlaybackpat { userdict /BeachHead get begin gsave setrgbcolor  bps copy pop  dup 0 get  8 div floor cvi 8 mul  1 index 2 get  8 div floor cvi 8 mul  2 index 1 get  8 div floor cvi 8 mul  8  4 index 3 get  8 div floor cvi 8 mul  {  2 index  8  3 index  {  1 index  gsave  translate  8 8 scale 8 8 false bpm /bpp load imagemask grestore } for  pop  } for  pop pop pop  grestore end } bind def /U { userdict /BeachHead get begin /V exch def /W exch def countdictstack  save  V 2 add 2 roll  count V sub /X exch def  /W load  end  { exec } stopped  userdict /BeachHead get begin
/Y exch def  count X sub { pop } repeat  Y 3 1 roll  restore  countdictstack exch sub { end } repeat  end  } bind def /Z ( ) def  /aa { moveto  { ba setfont  Z  end  gsave  0 setgray  stringwidth  grestore userdict /BeachHead get begin  rmoveto  /ca load null ne  { /da da 1 add def da ea length 1 sub le { fa ea da get ca } if } { ax ay rmoveto fa ga eq { cx cy rmoveto } if } ifelse } stopped 
currentdict userdict /BeachHead get ne { userdict /BeachHead get begin }if } bind def /filltextpath2 { userdict /BeachHead get begin /p exch def /s exch def /ea exch def /fillProc exch def /ia exch def currentpoint ia i and { ea s p krnshow } if moveto i /i false def currentpoint /m 1 string def  /ya 0 def /t 0 def /za 0 def ea { m 0 3 -1 roll put newpath  t za moveto  m true  charpath fillProc
t s ya get add /t exch def ya 1 add /ya exch def za s ya get add /za exch def ya 1 add /ya exch def } forall moveto /i exch def ia { n i /n false def /i false def ea s p krnshow /i exch def /n exch def } if end } bind def /filltextpath { userdict /BeachHead get begin /ea exch def 
dup type dup /integertype eq exch /realtype eq or  { /ay exch def /ax exch def /ga exch def /cy exch def /cx exch def /ca null def  } { /wa 0 def  /ca exch def } ifelse /ha exch def /ia exch def ia { i get { gsave 0 setgray /ca load null ne  { /ca load ea kshow  /wa 0 def } { cx cy ga ax ay ea awidthshow  } ifelse grestore } if } if gsave currentfont ia { begin  r FontMatrix makefont l FontMatrix makefont end  } { null exch } ifelse /ja exch def /ka exch def /ba currentfont def _doTexturePat { systemdict /makepattern known } { false }ifelse { matrix currentmatrix _strtxtmatrix null ne { _strtxtmatrix setmatrix } if 1 -1 scale txTrnsX txTrnsY translate settexturepat  setmatrix /da 0 def ea { /fa exch def Z 0 fa put ja setfont currentpoint Z show aa {exit} if } forall } { 10 setlinewidth  /da 0 def  currentpoint  newpath  0 dup dup dup moveto lineto closepath moveto  ea { /fa exch def Z 0 fa put  currentpoint  ja setfont  count 1 add dup 1 roll  Z true { charpath } stopped  count count -1 roll sub { pop } repeat  currentpoint  {ha} 0 U pop  
newpath  0 dup dup dup moveto lineto closepath moveto  aa {exit} if } forall } ifelse grestore ka null ne { /wa 0 def gsave 0 setgray /da 0 def ea { /fa exch def Z 0 fa put ka setfont currentpoint Z show aa {exit} if } forall grestore } if /_doTexturePat false def /_strtxtmatrix null def end } bind def /reversecolor { 1 currentrgbcolor  1 index eq 3 1 roll eq and { currentgray sub  } if setgray } bind def /ftpkproc { pop  Z 0 3 -1 roll put  Z stringwidth  neg exch neg exch  rmoveto  userdict /BeachHead get begin _cwidths wa get  /wa wa 1 add def  _cwidths wa get  /wa wa 1 add def  rmoveto  end } bind def /xa { userdict /BeachHead get begin pop pop  Z 0 3 -1 roll put  currentpoint  Z bhshow  moveto  _cwidths pa get  /pa pa 1 add def  _cwidths pa get  /pa pa 1 add def  rmoveto  end } bind def  /na[256{0}repeat]def mark 161 176 173 185 176 165 177 177 178 163 179 179 181 109 182 182 183 229 184 213 185 112 186 242 189 87 195 214 197 187 198 68 214 184 215 224 240 240
counttomark 2 div cvi {na 3 1 roll put} repeat pop /krnshow
{ dup type dup /integertype ne exch /realtype ne and {12} if /Symbol findfont exch scalefont /oa exch def /ua currentfont def /pa 0 def  systemdict /cshow known currentfont /FontType get 0 eq and { /_cwidths exch def /xa load cshow } { exch  userdict /BeachHead get begin h { /h false def gsave dup stringwidth pop (_) stringwidth pop div 1 scale currentpoint (_) show moveto grestore } if end { dup  na exch get  dup 0 eq  isWinPS or  {  pop  Z 0 3 -1 roll put  currentpoint  Z  userdict begin  bhshow  end  moveto  } {  oa setfont  Z 0 3 -1 roll put  currentpoint  Z bhshow  moveto  ua setfont  pop  } ifelse dup pa get  /pa pa 1 add def  1 index pa get  /pa pa 1 add def  rmoveto } forall pop  } ifelse } bind def /setcmykcolor where {  pop  /bhsetcmykcolor/setcmykcolor load def } {  /bhsetcmykcolor { 4 1 roll  3{ 3 index add  neg 1 add  dup 0 lt {pop 0}if  3 1 roll }repeat  setrgbcolor  pop }bind def }ifelse  end 
%%EndProcSet
%%BeginProcSet: gr_id 2 0 
% gr_id - v2 - Copyright 1993 Silicon Beach Software, Inc. 
userdict /gr_id known not { userdict begin /gr_id 100 dict def /gr_idb {gr_id begin} bind def  /gr_e {end end} bind def gr_idb 
/nulld { counttomark {null def} repeat pop } bind def mark 
/a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /A /B /C /D /E /F /G /H /I /J /K /L /M nulld
/bd {bind def} bind def /g_ea [] def /g_mg 60 def /g_xg 250 def /setcmykcolor where {  pop  /bhsetcmykcolor/setcmykcolor load def } {  /bhsetcmykcolor { 4 1 roll  3{ 3 index add  neg 1 add  dup 0 lt {pop 0}if  3 1 roll }repeat  setrgbcolor  pop }bind def }ifelse  /g_ss { currentscreen /scrnproc exch def /scrnangle exch def
/scrnfreq exch def /scrnproc load type dup /arraytype eq exch /packedarraytype eq or
{ /g_ng 72 scrnfreq div dup matrix defaultmatrix dtransform mul abs def g_ng g_mg lt {
/scrnfreq scrnfreq g_mg g_ng div sqrt div def
scrnfreq scrnangle /scrnproc load setscreen /g_ng g_mg def } if g_ng g_xg gt { /g_ng g_xg def } if } { /g_ng g_xg def
} ifelse g_ea 0 setdash } bd /g_lf { gsave /noeoclip exch def dup /y1b exch def /y2b exch def dup /x2t exch def /x2b exch def dup /y1t exch def /y2t exch def dup /x1t exch def /x1b exch def /filloff exch def /filldir exch def /colorlist exch def noeoclip { clip } { eoclip } ifelse
newpath g_ss filldir 0 eq { filloff 0 lt { x1t filloff add /x1t exch def x2b filloff sub /x2b exch def } { x1b filloff sub /x1b exch def x2t filloff add /x2t exch def } ifelse /x1start x1t def /y1start y1t def /x2start x1b def /y2start y1b def /xdist x2t x1t sub def /ydist 0 def } { filloff 0 lt { y2t filloff add /y2t exch def y1b filloff sub /y1b exch def } { y1t filloff sub /y1t exch def y2b filloff add /y2b exch def } ifelse /x1start x1t def /y1start y1t def /x2start x2t def /y2start y2t def /xdist 0 def
/ydist y1b y1t sub def } ifelse colorlist { /colorrec exch def colorrec 0 get /cmykStart exch def colorrec 1 get /cmykEnd exch def
colorrec 2 get /ramppercent exch def /cStart cmykStart 0 get def /mStart cmykStart 1 get def /yStart cmykStart 2 get def
/kStart cmykStart 3 get def /cInc cmykEnd 0 get cStart sub g_ng div def
/mInc cmykEnd 1 get mStart sub g_ng div def
/yInc cmykEnd 2 get yStart sub g_ng div def
/kInc cmykEnd 3 get kStart sub g_ng div def /xinc xdist ramppercent mul g_ng div def
/yinc ydist ramppercent mul g_ng div def xinc yinc gt {xinc}{yinc}ifelse setlinewidth
newpath 0 1 g_ng { pop cStart mStart yStart kStart bhsetcmykcolor newpath x1start y1start moveto x2start y2start lineto stroke cStart cInc add /cStart exch def mStart mInc add /mStart exch def yStart yInc add /yStart exch def
kStart kInc add /kStart exch def x1start xinc add /x1start exch def y1start yinc add /y1start exch def x2start xinc add /x2start exch def
y2start yinc add /y2start exch def } for } forall grestore } bd /g_bf { true g_f } bd /g_cf { false g_f } bd /g_f { gsave /doBoxFill exch def /noeoclip exch def /y2 exch def /x2 exch def /y1 exch def /x1 exch def /yoff exch def /xoff exch def /colorlist exch def noeoclip { clip } { eoclip } ifelse
newpath g_ss /centerX x2 x1 add 2 div xoff add def
/centerY y2 y1 add 2 div yoff add def /boxRadX  centerX dup x1  exch sub abs  exch  x2  exch sub abs
2 copy  lt {exch} if  pop def /boxRadY  centerY  dup y1 exch sub abs  exch y2  exch sub abs
2 copy  lt {exch} if  pop def centerX  dup boxRadX sub /x1 exch def  boxRadX add /x2 exch def centerY  dup boxRadY sub /y1 exch def 
boxRadY add /y2 exch def colorlist { /colorrec exch def colorrec 0 get /cmykStart exch def colorrec 1 get /cmykEnd exch def
colorrec 2 get /ramppercent exch def /cStart cmykStart 0 get def /mStart cmykStart 1 get def /yStart cmykStart 2 get def
/kStart cmykStart 3 get def /cInc cmykEnd 0 get cStart sub g_ng div def
/mInc cmykEnd 1 get mStart sub g_ng div def
/yInc cmykEnd 2 get yStart sub g_ng div def
/kInc cmykEnd 3 get kStart sub g_ng div def /brwidthY boxRadY ramppercent mul g_ng div def
/brwidthX boxRadX ramppercent mul g_ng div def 0 1 g_ng { pop cStart mStart yStart kStart bhsetcmykcolor doBoxFill  { newpath x1 y1 moveto x2 y1 lineto x2 y2 lineto x1 y2 lineto closepath fill } { gsave newpath centerX  centerY  translate x2 centerX sub y2 centerY sub 
scale 0 0 1.4142 0 360 arc fill grestore } ifelse cStart cInc add /cStart exch def mStart mInc add /mStart exch def yStart yInc add /yStart exch def
kStart kInc add /kStart exch def x1 brwidthX add /x1 exch def y1 brwidthY add /y1 exch def x2 brwidthX sub /x2 exch def
y2 brwidthY sub /y2 exch def } for } forall grestore } bd /g_cvf { gsave /noeoclip exch def pop pop pop pop pop /dist exch def /colorlist exch def noeoclip { clip } { eoclip
} ifelse g_ss g_c dist mul 72 div dup g_ng gt {pop}{/g_ng exch def} ifelse
/g_ng g_ng round def /lwidth dist 2 mul def colorlist length 1 sub -1 0 { colorlist exch get /colorrec exch def colorrec 0 get /cmykEnd exch def colorrec 1 get /cmykStart exch def
colorrec 2 get /ramppercent exch def /cStart cmykStart 0 get def /mStart cmykStart 1 get def /yStart cmykStart 2 get def
/kStart cmykStart 3 get def /cInc cmykEnd 0 get cStart sub g_ng div def
/mInc cmykEnd 1 get mStart sub g_ng div def
/yInc cmykEnd 2 get yStart sub g_ng div def
/kInc cmykEnd 3 get kStart sub g_ng div def /ldec dist ramppercent mul g_ng div 2 mul def 0 1 g_ng { pop cStart mStart yStart kStart bhsetcmykcolor lwidth setlinewidth gsave
firstfill {fill /firstfill false def}{stroke} ifelse
grestore cStart cInc add /cStart exch def mStart mInc add /mStart exch def yStart yInc add /yStart exch def
kStart kInc add /kStart exch def /lwidth lwidth ldec sub def
lwidth 0.001 le { /lwidth 0.001 def } if } for } for grestore } bd gr_e } if
%%EndProcSet
BeachHead begin/isWinPS false def end
1 setflat

gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-250.012 -219.718 moveto
-178.731 -219.718 lineto
-178.731 -178.988 lineto
-250.012 -178.988 lineto
-250.012 -219.718 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 4.00003 77.9203] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
8.43887 9.64453 moveto
[1 0 0 -1 0 0] concat
(program) 

[7.20 0

4.73 0

6.54 0

6.66 0

4.73 0

5.98 0

10.58 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-63.6097 -220.228 moveto
31.0944 -220.228 lineto
31.0944 -184.589 lineto
-63.6097 -184.589 lineto
-63.6097 -220.228 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -0.999985 190.402 78.43] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
1.01555 9.64453 moveto
[1 0 0 -1 0 0] concat
(meta-procedure) 

[10.58 0

5.73 0

3.90 0

5.98 0

3.98 0

7.20 0

4.73 0

6.54 0

5.31 0

5.73 0

7.32 0

7.22 0

4.73 0

5.73 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-70.7042 -209.886 moveto
-110.459 -209.886 lineto
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.5 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-68.7042 -209.886 moveto
-74.7042 -213.886 lineto
-74.0376 -212.552 -73.7042 -211.219 -73.7042 -209.886 curveto
-73.7042 -208.552 -74.0376 -207.219 -74.7042 -205.886 curveto
-68.7042 -209.886 lineto
-68.7042 -209.886 lineto
closepath
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-147.666 -237.173 moveto
-101.839 -237.173 lineto
-101.839 -183.198 lineto
-147.666 -183.198 lineto
-147.666 -237.173 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.25 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-137.482 -218.336 moveto
-108.973 -218.336 lineto
-108.973 -190.846 lineto
-137.482 -190.846 lineto
-137.482 -218.336 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Helvetica 

userdict begin BeachHead end begin
[1 0 0 -0.999985 116.53 76.5379] concat

/Helvetica findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0 9.02344 moveto
[1 0 0 -1 0 0] concat
(imt) 

[2.65 0

9.98 0

3.32 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-173.635 -170.382 moveto
-76.8934 -170.382 lineto
-76.8934 -137.798 lineto
-173.635 -137.798 lineto
-173.635 -170.382 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 80.3772 28.5835] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.786438 9.64453 moveto
[1 0 0 -1 0 0] concat
(meta-translation) 

[10.58 0

5.73 0

3.90 0

5.98 0

3.98 0

3.90 0

4.73 0

5.98 0

6.97 0

5.07 0

3.48 0

5.98 0

3.90 0

3.48 0

6.54 0

6.97 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-149.666 -209.79 moveto
-182.292 -209.79 lineto
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.5 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

-147.666 -209.79 moveto
-153.666 -213.79 lineto
-153 -212.457 -152.666 -211.123 -152.666 -209.79 curveto
-152.666 -208.457 -153 -207.123 -153.666 -205.79 curveto
-147.666 -209.79 lineto
-147.666 -209.79 lineto
closepath
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

76.4601 -237.283 moveto
141.637 -237.283 lineto
141.637 -182.291 lineto
76.4601 -182.291 lineto
76.4601 -237.283 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.25 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

83.5916 -218.957 moveto
137.559 -218.957 lineto
137.559 -187.393 lineto
83.5916 -187.393 lineto
83.5916 -218.957 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Helvetica 

userdict begin BeachHead end begin
[1 0 0 -1 337.604 77.1586] concat

/Helvetica findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0 9.02344 moveto
[1 0 0 -1 0 0] concat
(icont \320x) 

[2.65 0

5.98 0

6.66 0

6.66 0

3.32 0

4.20 0

6.66 0

5.98 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

74.3798 -209.79 moveto
34.6255 -209.79 lineto
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.5 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

76.3798 -209.79 moveto
70.3798 -213.79 lineto
71.0465 -212.457 71.3798 -211.123 71.3798 -209.79 curveto
71.3798 -208.457 71.0465 -207.123 70.3798 -205.79 curveto
76.3798 -209.79 lineto
76.3798 -209.79 lineto
closepath
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

60.598 -313.665 moveto
167.524 -313.665 lineto
167.524 -259.695 lineto
60.598 -259.695 lineto
60.598 -313.665 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 314.61 171.867] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
6.68216 9.64453 moveto
[1 0 0 -1 0 0] concat
(code-generation) 

[5.31 0

6.54 0

7.32 0

5.73 0

3.98 0

6.66 0

5.73 0

6.97 0

5.73 0

4.73 0

5.98 0

3.90 0

3.48 0

6.54 0

6.97 0

]

 12.00 krnshow

end
grestore
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 314.61 171.867] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
19.677 21.5963 moveto
[1 0 0 -1 0 0] concat
(procedures) 

[7.20 0

4.73 0

6.54 0

5.31 0

5.73 0

7.32 0

7.22 0

4.73 0

5.73 0

5.07 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

110.496 -239.289 moveto
110.496 -283.115 lineto
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.5 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

110.496 -237.289 moveto
114.496 -243.288 lineto
113.163 -242.622 111.83 -242.289 110.496 -242.289 curveto
109.163 -242.289 107.83 -242.622 106.496 -243.289 curveto
110.496 -237.289 lineto
110.496 -237.289 lineto
closepath
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

181.32 -209.79 moveto
141.565 -209.79 lineto
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
0.5 setlinewidth 0 setlinecap 0 setlinejoin
stroke
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

183.32 -209.79 moveto
177.32 -213.79 lineto
177.986 -212.457 178.32 -211.123 178.32 -209.79 curveto
178.32 -208.457 177.986 -207.123 177.32 -205.79 curveto
183.32 -209.79 lineto
183.32 -209.79 lineto
closepath
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

184.844 -220.482 moveto
233.209 -220.482 lineto
233.209 -179.243 lineto
184.844 -179.243 lineto
184.844 -220.482 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 438.856 78.6839] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
5.11902 9.64453 moveto
[1 0 0 -1 0 0] concat
(result) 

[4.73 0

5.73 0

5.07 0

7.22 0

3.48 0

3.90 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

60.0886 -170.382 moveto
156.83 -170.382 lineto
156.83 -137.798 lineto
60.0886 -137.798 lineto
60.0886 -170.382 lineto
closepath
userdict begin BeachHead end begin
0 0 0 0 bhsetcmykcolor
 end
gsave eofill grestore
grestore
gsave
gsave
 

%IncludeFont: Palatino-Roman 

userdict begin BeachHead end begin
[1 0 0 -1 314.101 28.5835] concat

/Palatino-Roman findbeachheadfont 12.00 scalefont setfont
userdict begin BeachHead end begin
0 0 0 1 bhsetcmykcolor
 end
15.8741 9.64453 moveto
[1 0 0 -1 0 0] concat
(translation) 

[3.90 0

4.73 0

5.98 0

6.97 0

5.07 0

3.48 0

5.98 0

3.90 0

3.48 0

6.54 0

6.97 0

]

 12.00 krnshow

end
grestore
grestore
gsave
newpath
[1 0 0 -1 250.012 -137.798] concat

grestore

%%EndDocument

V1`6
Q1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-975 -551 (The result usually is another Icon program, such as one in which all string scanning expressions) 0.012207 0 1941 15 95 A1`6
-975 -497 (have been replaced by procedure calls. But the result can be something entirely different, as shown) -4.071213 0 1941 15 98 A1`6
-975 -443 (in an example later in this report.) -0.013565 0 673 6 34 A1`6
-825 -364 (The program ) -1.513885 0 274 2 11 A1`6
/AD 220 220 w1`6
-551 -364 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
-490 -364 ( is itself a variant translator. It handles only parsing and does not have to) -1.513885 0 1455 14 76 A1`6
-975 -310 (be changed to effect different meta-translations.) 0.014236 0 967 5 48 A1`6
-825 -231 (As an example of meta-translation, consider the simple program) 0.004471 0 1304 8 61 A1`6
/AD 220 220 w1`6
-750 -151 (procedure main\(\)) -0.028488 0 349 1 15 A1`6
-750 -97 (  while line := read\(\) do) 0.010788 0 465 6 24 A1`6
-750 -43 (      line ? process\(\)) 0.009262 0 390 8 21 A1`6
-750 11 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 90 (The output of ) -0.006027 0 289 3 13 A1`6
/AD 220 220 w1`6
-686 90 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
-625 90 ( for this program is a procedure) -0.006027 0 644 6 31 A1`6
/AD 220 220 w1`6
19 90 ( Mp\(\) ) -0.006699 0 120 2 5 A1`6
/AA 220 220 w1`6
138 90 (\(for meta-procedure\):) -0.006027 0 436 1 20 A1`6
/AD 220 220 w1`6
-750 169 (procedure Mp\(\)) 0.019531 0 313 1 13 A1`6
-750 224 (Proc\("main",\);) 0 -0.002563 282 0 13 A1`6
-750 278 (Body\(WhileDo\(Asgnop\(":=",Var\("line"\),) 0 -0.001663 782 0 36 A1`6
-750 332 (Invoke\(Var\("read"\),Null\(\)\)\),Scan\(Var\("line"\),) 0 -0.002243 880 0 44 A1`6
-750 386 (Invoke\(Var\("process"\),Null\(\)\)\)\),\);) 0 0.001511 654 0 33 A1`6
-750 440 (End\(\);) 0 -0.00383 125 0 5 A1`6
-750 494 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 574 (The procedure calls in ) -0.629532 0 458 4 22 A1`6
/AD 220 220 w1`6
-517 574 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
-423 574 ( correspond to the syntactic components of the original program. For) -0.629517 0 1388 10 67 A1`6
-975 628 (example, ) -1.559799 0 193 1 8 A1`6
/AD 220 220 w1`6
-782 628 (Proc\(\)) 0 0 125 0 5 A1`6
/AA 220 220 w1`6
-657 628 ( is a procedure that corresponds to a procedure declaration header in the original) -1.559845 0 1623 13 81 A1`6
-975 682 (program, and ) -3.540573 0 282 2 12 A1`6
/AD 220 220 w1`6
-692 682 (WhileDo\(\)) 0 0 204 0 8 A1`6
/AA 220 220 w1`6
-489 682 ( is a procedure corresponding to the ) -3.540771 0 719 7 36 A1`6
/AD 220 220 w1`6
230 682 (while\320do) 0 0 181 0 7 A1`6
/AA 220 220 w1`6
411 682 ( loop. The procedure ) -3.540741 0 419 4 20 A1`6
/AD 220 220 w1`6
831 682 (Body\() 0 0 120 0 4 A1`6
/AA 220 220 w1`6
950 682 (\)) 0 0 15 0 0 A1`6
-975 736 (writes the code for the procedure body.) -0.00264 0 800 6 38 A1`6
-825 815 (The simplest of all translations is an identity translation in which the result is semantically) -2.578964 0 1791 14 94 A1`6
-975 869 (equivalent to the original program. ) -1.277008 0 716 5 35 A1`6
-259 869 (These code-generation procedures  are listed in the appendix) -1.277008 0 1225 8 59 A1`6
-975 924 (to this report and are contained in the library file ) -2.462982 0 975 10 52 A1`6
/AD 220 220 w1`6
0 924 (identgen.icn) 0 0 247 0 11 A1`6
/AA 220 220 w1`6
247 924 (. The code-generation procedure for) -2.463058 0 719 4 34 A1`6
-975 978 (the identity translation of ) -0.034912 0 527 4 27 A1`6
/AD 220 220 w1`6
-448 978 (while\320do) 0 0 181 0 7 A1`6
/AA 220 220 w1`6
-267 978 ( is) -0.034912 0 44 1 2 A1`6
/AD 220 220 w1`6
-750 1057 (procedure WhileDo\(e1, e2\)) -0.030106 0 550 2 24 A1`6
-750 1111 (   return code_gen\("while ", e1, " do ", e2\)) -0.003052 0 840 10 43 A1`6
-750 1165 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 1244 (The procedure ) -5.164307 0 298 2 13 A1`6
/AD 220 220 w1`6
-677 1244 (code_gen\(\)) 0 0 232 0 9 A1`6
/AA 220 220 w1`6
-445 1244 ( produces the concatenation of its arguments. It can be changed for other) -5.16449 0 1411 12 72 A1`6
-975 1299 (translations.) 0 -0.002472 249 0 12 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 3 3
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-104 1555 (- 3 -) 0.046585 0 76 2 4 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
/AA 220 220 w1`6
-825 -1389 (The result of linking ) -1.128342 0 418 4 21 A1`6
/AD 220 220 w1`6
-407 -1389 (identgen.icn) 0 0 247 0 11 A1`6
/AA 220 220 w1`6
-160 -1389 ( with the procedure ) -1.128342 0 407 4 19 A1`6
/AD 220 220 w1`6
247 -1389 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
341 -1389 ( produced by ) -1.128357 0 279 3 12 A1`6
/AD 220 220 w1`6
620 -1389 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
681 -1389 ( and executing) -1.128281 0 294 2 13 A1`6
-975 -1335 (the result is:) -0.044357 0 246 2 13 A1`6
/AD 220 220 w1`6
-750 -1256 (procedure main\(\)) -0.028488 0 349 1 15 A1`6
-750 -1201 (while \(line := read\(\)\) do \(line ? process\(\)\)) 0.014297 0 827 7 43 A1`6
-750 -1147 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 -1068 (This is functionally equivalent to the original program; only the layout is different.) 0.006577 0 1671 12 85 A1`6
-825 -989 (To see how other translations can be done, consider the string-scanning transformation) 3.431198 0 1800 11 85 A1`6
-975 -935 (given at the beginning of this article. The identify translation for string scanning is) 0.002823 0 1665 13 86 A1`6
/AD 220 220 w1`6
-750 -860 (procedure Scan\(e1, e2\)) -0.041306 0 481 2 21 A1`6
-750 -806 (   return code_gen\("\(", e1 , " ? ", e2, "\)"\)) -0.007874 0 798 11 43 A1`6
-750 -751 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 -672 (To get a translation for modeling string scanning, it\325s only necessary to change this procedure to) 0.00618 0 1947 15 97 A1`6
/AD 220 220 w1`6
-750 -597 (procedure Scan\(e1, e2\)) -0.041306 0 481 2 21 A1`6
-750 -543 (   return code_gen\("Escan\(Bscan\(", e1,  "\),",  e2,  "\)") -0.006393 0 1055 11 54 A1`6
-750 -489 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 -410 (For completeness, augmented string scanning should be translated in a similar manner. See) 8.258026 0 1950 12 88 A1`6
/AD 220 220 w1`6
-975 -356 (Augscan\(\)) 0 0 209 0 8 A1`6
/AA 220 220 w1`6
-766 -356 ( in the appendix.) 0.014923 0 341 3 16 A1`6
-825 -276 (As another example, consider converting calls of ) -4.955307 0 961 7 48 A1`6
/AD 220 220 w1`6
136 -276 (map\(\)) 0 0 120 0 4 A1`6
/AA 220 220 w1`6
256 -276 ( to calls of ) -4.955307 0 196 4 12 A1`6
/AD 220 220 w1`6
451 -276 (Map\(\)) 0 0 120 0 4 A1`6
/AA 220 220 w1`6
571 -276 ( so that mapping can) -4.955307 0 404 4 19 A1`6
-975 -221 (be traced. The declaration for ) -0.027313 0 605 5 30 A1`6
/AD 220 220 w1`6
-370 -221 (Map\(\)) 0 0 120 0 4 A1`6
/AA 220 220 w1`6
-250 -221 ( might be) -0.027313 0 191 2 8 A1`6
/AD 220 220 w1`6
-750 -146 (procedure Map\(s1, s2, s3\)) 0.013016 0 535 3 24 A1`6
-750 -91 (   return map\(s1, s2, s3\)) -0.008469 0 486 6 24 A1`6
-750 -37 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 42 (The meta-translation can be accomplished by adding the line) -0.010635 0 1233 8 58 A1`6
/AD 220 220 w1`6
-750 117 (if e == "map" then e := "Map") 0.011154 0 589 7 28 A1`6
75 117 (# check procedure name) -0.027527 0 504 3 21 A1`6
/AA 220 220 w1`6
-975 196 (at the beginning of the procedure ) 0.00415 0 688 6 33 A1`6
/AD 220 220 w1`6
-287 196 (Invoke\(\)) 0 0 166 0 7 A1`6
/AA 220 220 w1`6
-122 196 ( shown in the appendix.) 0.00415 0 489 4 22 A1`6
-825 275 (A procedure declaration for ) -2.769669 0 565 4 27 A1`6
/AD 220 220 w1`6
-260 275 (Map\(\)) 0 0 120 0 4 A1`6
/AA 220 220 w1`6
-140 275 ( must be included in the final program. This can be done) -2.769714 0 1115 11 55 A1`6
-975 329 (by adding the following lines to the beginning or end of) -1.383255 0 1119 10 55 A1`6
/AD 220 220 w1`6
144 329 ( main\(\) ) -1.537247 0 152 2 7 A1`6
/AA 220 220 w1`6
296 329 (in the code-generator procedures:) -1.383194 0 679 3 32 A1`6
/AD 220 220 w1`6
-750 404 (write\("procedure Map\(s1, s2, s3\)"\)) -0.001358 0 695 3 33 A1`6
-750 459 (write\("   return map\(s1, s2, s3\)"\)) -0.015671 0 646 6 33 A1`6
-750 513 (write\("end"\)) 0 -0.005066 236 0 11 A1`6
/AA 220 220 w1`6
-825 592 (An alternative approach, which is more desirable in the case of elaborate translations, is to) -1.941299 0 1800 14 92 A1`6
-975 646 (add) 0 0.024002 79 0 2 A1`6
/AD 220 220 w1`6
-750 721 (write\("link ) 0.021164 0 210 1 11 A1`6
/AC 220 220 w1`6
-540 721 (libe) 0 0 71 0 3 A1`6
/AD 220 220 w1`6
-469 721 ("\)) 0 0 31 0 1 A1`6
/AA 220 220 w1`6
-975 800 (at the beginning or end of ) -5.082382 0 505 6 26 A1`6
/AD 220 220 w1`6
-470 800 (main\(\)) 0 0 130 0 5 A1`6
/AA 220 220 w1`6
-340 800 ( and provide the code to be linked with the final program in ) -5.08223 0 1161 13 60 A1`6
/AC 220 220 w1`6
821 800 (libe) 0 0 71 0 3 A1`6
/AD 220 220 w1`6
892 800 (.icn) 0 0 71 0 3 A1`6
/AA 220 220 w1`6
964 800 (.) 0 0 11 0 0 A1`6
-825 879 (Incidentally, to trace a generator, ) 2.09938 0 690 5 35 A1`6
/AD 220 220 w1`6
-135 879 (suspend) 0 0 173 0 6 A1`6
/AA 220 220 w1`6
38 879 ( must be used instead of ) 2.09938 0 516 6 24 A1`6
/AD 220 220 w1`6
554 879 (return) 0 0 120 0 5 A1`6
/AA 220 220 w1`6
673 879 (; otherwise the) 2.099304 0 302 2 14 A1`6
-975 934 (procedure won\325t produce all the results produced by the generator. For example, for ) 2.805527 0 1756 13 83 A1`6
/AD 220 220 w1`6
781 934 (seq\(\)) 0 0 104 0 4 A1`6
/AA 220 220 w1`6
886 934 (, the) 2.805435 0 89 1 4 A1`6
-975 988 (procedure would be) -0.0354 0 411 2 17 A1`6
/AD 220 220 w1`6
-750 1063 (procedure Seq\(i1, i2\)) -0.046188 0 428 2 20 A1`6
-750 1117 (   suspend seq\(i1, i2\)) -0.008224 0 425 5 21 A1`6
-750 1171 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 1250 (In fact, it doesn\325t hurt to use ) 0.002914 0 581 7 31 A1`6
/AD 220 220 w1`6
-394 1250 (suspend) 0 0 173 0 6 A1`6
/AA 220 220 w1`6
-221 1250 ( for functions that aren\325t generators.) 0.002914 0 728 5 37 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 4 4
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-119 1545 (- 4 -) 0.046585 0 76 2 4 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
$5 tsi^6
/$5 bmt^6
%%IncludeResource: font Helvetica-Bold
/AF /|______Helvetica-Bold T /Helvetica-Bold x1`6
/$6 bmt^6
/AF 240 240 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-975 -1386 (Other Kinds of Translations) -0.021698 0 658 3 26 A1`6
/AA 220 220 w1`6
-825 -1288 (As shown in the examples above, code generators for meta-translation typically produce) 0.717239 0 1800 11 85 A1`6
-975 -1234 (Icon source-language code. They can, however, do other things. An example is the static analysis) -0.672821 0 1950 14 95 A1`6
-975 -1179 (of Icon programs to produce a tabulation of the syntactic tokens that occur in them.) -0.00563 0 1686 14 83 A1`6
-825 -1100 (Since ) 1.332382 0 119 1 5 A1`6
/AD 220 220 w1`6
-706 -1100 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
-612 -1100 ( describes the syntactic structure of a program with a procedure call for every) 1.332428 0 1587 13 78 A1`6
-975 -1046 (token, the code-generation procedure it calls can count the number of times they are called instead) -2.861389 0 1950 15 98 A1`6
-975 -992 (of producing source code. Consider, for example, string scanning expressions. As shown above, the) -4.892242 0 1950 13 96 A1`6
-975 -938 (procedure for identity translation for string scanning is) 0.007202 0 1115 7 56 A1`6
/AD 220 220 w1`6
-750 -863 (procedure Scan\(e1, e2\)) -0.041306 0 481 2 21 A1`6
-750 -809 (   return code_gen\("\(", e1 , " ? ", e2, "\)"\)) -0.007874 0 798 11 43 A1`6
-750 -754 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-825 -675 (To count the number of string scanning expressions in a program, all that\325s needed is to) 1.715042 0 1800 15 87 A1`6
-975 -621 (replace this procedure by) -0.021286 0 514 3 24 A1`6
/AD 220 220 w1`6
-750 -546 (procedure Scan\(e1, e2\)) -0.041306 0 481 2 21 A1`6
-750 -492 (   token["e1 ? e2"] +:= 1) 0.009537 0 479 7 24 A1`6
-750 -438 (end) 0 -0.006302 76 0 2 A1`6
/AA 220 220 w1`6
-975 -359 (where ) -2.112686 0 136 1 5 A1`6
/AD 220 220 w1`6
-839 -359 (token) 0 0 112 0 4 A1`6
/AA 220 220 w1`6
-727 -359 ( is a table created by the main procedure before ) -2.112747 0 950 10 48 A1`6
/AD 220 220 w1`6
223 -359 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
317 -359 ( is called. When ) -2.112686 0 323 4 16 A1`6
/AD 220 220 w1`6
640 -359 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
734 -359 ( returns, the) -2.112686 0 241 2 12 A1`6
-975 -304 (tabulation of tokens can be written out. \(Table subscripts like ) -3.34201 0 1213 10 63 A1`6
/AD 220 220 w1`6
238 -304 ("e1 ? e2" ) -3.714172 0 187 3 9 A1`6
/AA 220 220 w1`6
425 -304 (are used to make the results) -3.34201 0 550 5 27 A1`6
-975 -250 (easy to read.\)) 0.024612 0 270 2 13 A1`6
-825 -171 (There are may possible variations on this approach. For example, when tabulating all the) -0.02832 0 1800 13 87 A1`6
-975 -117 (tokens in a program, it may be better to use several tables to segregate operators, controls structures,) -5.295303 0 1950 16 103 A1`6
-975 -63 (and so forth. See Reference 3 for the description of such a token tabulator.) -0.001968 0 1491 13 75 A1`6
-825 16 (Many simpler but useful translations are trivially easy to write. For example, to just count) -1.047745 0 1800 14 91 A1`6
-975 71 (the number of string-scanning expressions in a program and ignore all other kinds of tokens, all the) -4.070053 0 1950 16 99 A1`6
-975 125 (code-generations procedures except) 0.767166 0 730 2 33 A1`6
/AD 220 220 w1`6
-245 125 ( Scan\(\) ) 0.852539 0 162 2 7 A1`6
/AA 220 220 w1`6
-83 125 (and ) 0.767166 0 90 1 3 A1`6
/AD 220 220 w1`6
7 125 (Augscan\(\) ) 0.852539 0 222 1 9 A1`6
/AA 220 220 w1`6
230 125 (can be simply do nothing; no code is) 0.767166 0 745 7 35 A1`6
-975 179 (required for them. \(A collection of procedure wrappers for the code-generations procedures is) 3.826981 0 1950 12 92 A1`6
-975 233 (contained in ) -0.023193 0 263 2 12 A1`6
/AD 220 220 w1`6
-712 233 (emptygen.icn) 0 0 273 0 11 A1`6
/AA 220 220 w1`6
-440 233 (.\)) 0 0 27 0 1 A1`6
/AF 240 240 w1`6
-975 339 (Conclusions) 0 -0.002441 300 0 10 A1`6
/AA 220 220 w1`6
-825 437 (Meta-translators allow translators for Icon programs to be written entirely in Icon. This) 3.23851 0 1800 12 88 A1`6
-975 492 (provides the power of a high-level language and one that is likely to be familiar to persons writing) -2.570831 0 1950 17 99 A1`6
-975 546 (source-code processors for Icon. In many cases, the necessary changes to the code-generation) 5.831772 0 1950 12 91 A1`6
-975 600 (procedures are obvious and easily accomplished. If every code-generation procedure needs to be) -0.904312 0 1950 12 93 A1`6
-975 654 (changed, as in the case of a complete token tabulator, the amount of clerical work can be significant.) -4.170273 0 1950 17 101 A1`6
-975 708 (For some kinds of translations, it may be necessary to understand the Yacc grammar for Icon.) 4.108917 0 1950 15 91 A1`6
-975 762 (Consult the source code for ) 0.007492 0 567 5 27 A1`6
/AD 220 220 w1`6
-408 762 (icont) 0 0 97 0 4 A1`6
/AA 220 220 w1`6
-311 762 ( for this.) 0.007492 0 167 2 9 A1`6
-825 842 (A potential problem with meta-translation is the amount of memory required to build the) -1.223022 0 1800 13 86 A1`6
-975 896 (Icon program that produces the final translation. As illustrated above, the output of ) 10.06752 0 1835 13 85 A1`6
/AD 220 220 w1`6
860 896 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
921 896 ( is) 10.0672 0 54 1 2 A1`6
-975 950 (considerably larger than the input to ) -1.785202 0 743 6 37 A1`6
/AD 220 220 w1`6
-232 950 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
-171 950 (. If the input to ) -1.785187 0 304 5 17 A1`6
/AD 220 220 w1`6
133 950 (imt) 0 0 61 0 2 A1`6
/AA 220 220 w1`6
194 950 ( is a large program, the procedure ) -1.785217 0 686 7 34 A1`6
/AD 220 220 w1`6
881 950 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
-975 1004 (that describes it is huge. It\325s also necessary to link the) -5.674866 0 1021 10 57 A1`6
/AD 220 220 w1`6
46 1004 ( ) -6.307007 0 6 1 0 A1`6
/AA 220 220 w1`6
53 1004 (code-generation procedures with ) -5.675003 0 666 3 31 A1`6
/AD 220 220 w1`6
719 1004 (Mp\(\)) 0 0 94 0 3 A1`6
/AA 220 220 w1`6
813 1004 (, adding) -5.675003 0 162 1 7 A1`6
-975 1058 (to the size of the intermediate program. The memory needed usually is not a problem on platforms) -3.46582 0 1950 16 95 A1`6
-975 1112 (in the workstation class, but it can be on personal computers.) -0.001907 0 1236 10 61 A1`6
O1`6
$6 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 5 5
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$6 bmt^6
o`6
N1`6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-104 1555 (- 5 -) 0.046585 0 76 2 4 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
/AF 240 240 w1`6
-975 -1386 (Getting the Meta-Translator System) -0.00705 0 845 3 33 A1`6
/AA 220 220 w1`6
-825 -1288 (The meta-translator system is available by anonymous FTP to ) -4.790359 0 1216 9 59 A1`6
/AD 220 220 w1`6
391 -1288 (cs.arizona.edu) 0 0 298 0 13 A1`6
/AA 220 220 w1`6
690 -1288 (; ) -4.790268 0 18 1 1 A1`6
/AD 220 220 w1`6
708 -1288 (cd /icon/meta) -5.323883 0 267 1 12 A1`6
/AA 220 220 w1`6
-975 -1234 (and ) -0.024338 0 89 1 3 A1`6
/AD 220 220 w1`6
-886 -1234 (get READ.ME) -0.027039 0 285 1 10 A1`6
/AA 220 220 w1`6
-601 -1234 ( to see what to do next.) -0.024323 0 466 6 23 A1`6
/AF 240 240 w1`6
-975 -1127 (References) 0 -0.00235 270 0 9 A1`6
/AA 220 220 w1`6
-975 -1029 (1.\312\322Modeling String Scanning\323,) 0.028076 0 632 2 29 A1`6
$6 tsi^6
/$6 bmt^6
%%IncludeResource: font Palatino-Italic
/AG /|______Palatino-Italic T /Palatino-Italic x1`6
/$7 bmt^6
/AG 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-343 -1029 ( Icon Analyst ) 0.028076 0 262 3 13 A1`6
/AA 220 220 w1`6
-81 -1029 (6, pp. 1-2.) 0.028076 0 196 2 10 A1`6
-975 -950 (2.\312) 0 0 46 0 2 A1`6
/AG 220 220 w1`6
-929 -950 (Variant Translators for Version 9 of Icon) 7.147583 0 802 6 40 A1`6
/AA 220 220 w1`6
-127 -950 (, Ralph E. Griswold, Icon Project Document IPD245,) 7.147751 0 1102 7 49 A1`6
-975 -896 (Department of Computer Science, The University of Arizona, 1995.) -0.002289 0 1356 8 63 A1`6
-975 -817 (3.\312\322Static Analysis of Icon Programs\323,) 0.021881 0 761 4 37 A1`6
/AG 220 220 w1`6
-214 -817 ( Icon Analyst ) 0.021881 0 262 3 13 A1`6
/AA 220 220 w1`6
48 -817 (27, pp. 5-11.) 0.021881 0 242 2 12 A1`6
O1`6
$7 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 6 6
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$7 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-119 1545 (- 6 -) 0.046585 0 76 2 4 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
/AB 240 240 w1`6
-732 -1333 (Appendix  Code-Generation Procedures for Identity Translation) 0.004883 0 1464 6 60 A1`6
/AD 220 220 w1`6
-975 -1170 (link cat) 0.061035 0 143 1 7 A1`6
-75 -1170 (code_gen\(s1, s2, ...\)) 0.045166 0 418 2 20 A1`6
-975 -1062 (global code_gen) 0.048828 0 336 1 14 A1`6
-975 -966 (procedure main\(\)) -0.028488 0 349 1 15 A1`6
-975 -891 (   code_gen := cat) -0.006912 0 366 5 17 A1`6
-75 -891 (# so these procedures can be changed easily) -0.011688 0 922 7 42 A1`6
-975 -816 (   Mp\(\)) 0.03418 0 132 3 6 A1`6
-75 -816 (# call meta\320procedure) 0.021164 0 454 2 20 A1`6
-975 -741 (end) 0 -0.006302 76 0 2 A1`6
-975 -633 (procedure Alt\(e1, e2\)) 0.032349 0 431 2 20 A1`6
-75 -633 (# e1 | e2) -0.019806 0 177 3 8 A1`6
-975 -558 (   return code_gen\("\(", e1, "|", e2, "\)"\)) 0.00412 0 746 8 40 A1`6
-975 -483 (end) 0 -0.006302 76 0 2 A1`6
-975 -374 (procedure Apply\(e1, e2\)) -0.028488 0 492 2 22 A1`6
-75 -374 (# e1 ! e2) -0.018036 0 178 3 8 A1`6
-975 -299 (   return code_gen\("\(", e1, "!", e2, "\)"\)) 0.004776 0 747 8 40 A1`6
-975 -224 (end) 0 -0.006302 76 0 2 A1`6
-975 -116 (procedure Arg\(e\)) 0.000412 0 346 1 15 A1`6
-75 -116 (# procedure argument \(parameter\)) 0.001358 0 703 3 31 A1`6
-975 -41 (   return e) 0.0233 0 196 4 10 A1`6
-975 34 (end) 0 -0.006302 76 0 2 A1`6
-975 142 (procedure Asgnop\(op, e1, e2\)) -0.003937 0 609 3 27 A1`6
-75 142 (# e1 op e2) 0.010849 0 217 3 9 A1`6
-975 217 (   return code_gen\("\(", e1, " ", op, " ", | e2, "\)"\)) 0.006378 0 919 13 51 A1`6
-975 292 (end) 0 -0.006302 76 0 2 A1`6
-975 401 (procedure Augscan\(e1, e2\)) -0.010788 0 555 2 24 A1`6
-75 401 (# e1 ?:= e2) -0.006241 0 231 3 10 A1`6
-975 476 (   return code_gen\("\(", e1, " ?:= ", e2, "\)"\)) 0.002243 0 825 10 44 A1`6
-975 551 (end) 0 -0.006302 76 0 2 A1`6
-975 659 (procedure Bamper\(e1, e2\)) -0.028488 0 537 2 23 A1`6
-75 659 (# e1 & e2) 0.008682 0 196 3 8 A1`6
-975 734 (   return code_gen\("\(", e1, " & ", e2, "\)"\)) 0.006714 0 791 10 42 A1`6
-975 809 (end) 0 -0.006302 76 0 2 A1`6
-975 917 (procedure Binop\(op, e1, e2\)) 0.02916 0 571 3 26 A1`6
-75 917 (# e1 op e2) 0.010849 0 217 3 9 A1`6
-975 992 (   return code_gen\("\(", e1, " ",  op, " ",  e2, "\)"\)) 0.006302 0 920 14 51 A1`6
-975 1067 (end) 0 -0.006302 76 0 2 A1`6
-975 1176 (procedure Body\(es[) -0.069992 0 400 1 17 A1`6
-564 1176 (]\)) -0.069992 0 28 0 1 A1`6
-75 1176 (# procedure body) -0.031738 0 357 2 15 A1`6
-975 1255 (   every write\(!es\)) 0.002441 0 351 4 18 A1`6
-975 1334 (   return) -0.005295 0 158 3 8 A1`6
O1`6
$7 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 7 7
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$7 bmt^6
o`6
N1`6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-104 1555 (- 7 -) 0.046585 0 76 2 4 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
/AD 220 220 w1`6
-975 -1364 (end) 0 -0.006302 76 0 2 A1`6
-975 -1256 (procedure Break\(e\)) -0.073242 0 395 1 17 A1`6
-75 -1256 (# break e) -0.028687 0 191 2 8 A1`6
-975 -1181 (   return code_gen\("break ", e\)) -0.01506 0 613 6 30 A1`6
-975 -1106 (end) 0 -0.006302 76 0 2 A1`6
-975 -997 (procedure Case\(e, clist\)) -0.036621 0 486 2 23 A1`6
-75 -997 (# case e of { caselist }) -0.005768 0 446 6 23 A1`6
-975 -922 (   return code_gen\("case ", e, " of {", clist, "}"\)) -0.009323 0 910 11 50 A1`6
-975 -847 (end) 0 -0.006302 76 0 2 A1`6
-975 -739 (procedure Cclause\(e1, e2\)) 0.024414 0 543 2 24 A1`6
-75 -739 (# e1 : e2) -0.018036 0 178 3 8 A1`6
-975 -664 (   return code_gen\(e1, " : ", e2, "\\n"\)) 0.009766 0 722 9 38 A1`6
-975 -589 (end) 0 -0.006302 76 0 2 A1`6
-975 -481 (procedure Clist\(cclause1, cclause2\)) 0.013229 0 726 2 34 A1`6
-75 -481 (# cclause1; cclause2) -0.031738 0 425 2 19 A1`6
-975 -406 (   return code_gen\(cclause1, ";", cclause2\)) 0.014374 0 861 6 42 A1`6
-975 -331 (end) 0 -0.006302 76 0 2 A1`6
-975 -222 (procedure Clit\(c\)) -0.009354 0 339 1 16 A1`6
-75 -222 (# 'c') -0.100098 0 79 1 4 A1`6
-975 -147 (   return image\(c\)) 0.004074 0 349 4 17 A1`6
-975 -72 (end) 0 -0.006302 76 0 2 A1`6
-975 36 (procedure Compound\(es[]\)) -0.031326 0 548 1 23 A1`6
-75 36 (# { e1; e2; ... }) 0.002029 0 285 5 16 A1`6
-975 90 (   local result) 0.004074 0 257 4 14 A1`6
-975 165 (   if ) -0.018585 0 74 4 5 A1`6
$3 tsi^6
/$3 bmt^6
%%IncludeResource: font Symbol
/AD /|______Symbol F /Symbol x1`6
/$4 bmt^6
/AD 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-901 165 (*) 0 0 23 0 0 A1`6
$4 tsi^6
/$4 bmt^6
%%IncludeResource: font Helvetica
/AE /|______Helvetica T /Helvetica x1`6
/$5 bmt^6
/AE 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-878 165 (es = 0 then return "{}\\n") -0.018585 0 475 5 24 A1`6
-975 240 (   result := "{\\n") -0.013672 0 301 5 17 A1`6
-975 294 (   every result ||:= !es || "\\n") -0.00676 0 545 8 31 A1`6
-975 369 (   return code_gen\(result, "}\\n"\)) 0.018478 0 626 5 32 A1`6
-975 444 (end) 0 -0.006302 76 0 2 A1`6
-975 553 (procedure Create\(e\)) 0.006912 0 413 1 18 A1`6
-75 553 (# create e) -0.041504 0 204 2 9 A1`6
-975 628 (   return code_gen\("create ", e\)) 0.015396 0 626 6 31 A1`6
-975 703 (end) 0 -0.006302 76 0 2 A1`6
-975 811 (procedure Default\(e\)) 0.061447 0 420 1 19 A1`6
-75 811 (# default: e) 0.040283 0 227 2 11 A1`6
-975 886 (   return code_gen\("default: ", e\)) 0.007935 0 649 6 33 A1`6
-975 961 (end) 0 -0.006302 76 0 2 A1`6
-975 1069 (procedure End\(\)) 0.054932 0 331 1 14 A1`6
-75 1069 (# end) 0.096436 0 115 1 4 A1`6
-975 1144 (   write\("end"\)) 0.025223 0 275 3 14 A1`6
-975 1219 (   return) -0.005295 0 158 3 8 A1`6
-975 1299 (end) 0 -0.006302 76 0 2 A1`6
-975 1407 (procedure Every\(e\)) 0.000412 0 392 1 17 A1`6
-75 1407 (# every e) 0.008133 0 189 2 8 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 8 8
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-119 1545 (- 8 -) 0.046585 0 76 2 4 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
/AE 220 220 w1`6
-975 -1368 (   return code_gen\("every ", e\)) -0.002777 0 611 6 30 A1`6
-975 -1293 (end) 0 -0.006302 76 0 2 A1`6
-975 -1185 (procedure EveryDo\(e1, e2\)) 0.048416 0 553 2 24 A1`6
-75 -1185 (# every e1 do e2) 0.003357 0 341 4 15 A1`6
-975 -1106 (   return code_gen\("every ", e1, " do ", e2\)) 0.004639 0 847 10 43 A1`6
-975 -1031 (end) 0 -0.006302 76 0 2 A1`6
-975 -922 (procedure Fail\(\)) 0.045166 0 324 1 15 A1`6
-75 -922 (# fail) 0.061035 0 97 1 5 A1`6
-975 -843 (   return "fail") 0.01973 0 262 4 15 A1`6
-975 -768 (end) 0 -0.006302 76 0 2 A1`6
-975 -660 (procedure Field\(e, f\)) 0.014648 0 413 2 20 A1`6
-75 -660 (# e . f) -0.022385 0 115 3 6 A1`6
-975 -585 (   return code_gen\("\(", e, ".", f, "\)"\)) 0.003159 0 684 8 38 A1`6
-975 -476 (end) 0 -0.006302 76 0 2 A1`6
-975 -401 (procedure Global\(vs[]\)) -0.098877 0 453 1 21 A1`6
-75 -401 (# global v1, v2, ...) -0.017502 0 359 4 19 A1`6
-975 -347 (   local result) 0.004074 0 257 4 14 A1`6
-975 -272 (   result := "") -0.015625 0 248 5 14 A1`6
-975 -218 (   every result ||:= !vs || ", ") 0.007507 0 530 9 31 A1`6
-975 -143 (   write\("global ", result[1:\3202]\)) 0.02034 0 585 5 32 A1`6
-975 -68 (   return) -0.005295 0 158 3 8 A1`6
-975 7 (end) 0 -0.006302 76 0 2 A1`6
-975 115 (procedure If\(e1, e2\)) -0.020554 0 402 2 19 A1`6
-75 115 (# if e1 then e2) -0.023087 0 290 4 14 A1`6
-975 190 (   return code_gen\("if ", e1, " then ", e2\)) -0.005936 0 796 10 42 A1`6
-975 269 (end) 0 -0.006302 76 0 2 A1`6
-975 378 (procedure IfElse\(e1, e2, e3\)) -0.00827 0 568 3 27 A1`6
-75 378 (# if e1 then e2 else e3) 0.000671 0 451 6 22 A1`6
-975 453 (   return code_gen\("if ", e1, " then ", e2, " else ", e3\)) 0.007355 0 1040 14 56 A1`6
-975 532 (end) 0 -0.006302 76 0 2 A1`6
-975 640 (procedure Ilit\(i\)) -0.034988 0 306 1 16 A1`6
-75 640 (# i) -0.073654 0 48 1 2 A1`6
-975 719 (   return i) -0.003967 0 181 4 10 A1`6
-975 799 (end) 0 -0.006302 76 0 2 A1`6
-975 907 (procedure Initial\(e\)) -0.047607 0 382 1 19 A1`6
-75 907 (# initial e) -0.030319 0 181 2 10 A1`6
-975 986 (   write\("initial ", e\)) 0.015137 0 366 5 22 A1`6
-975 1065 (   return) -0.005295 0 158 3 8 A1`6
-975 1144 (end) 0 -0.006302 76 0 2 A1`6
-975 1253 (procedure Invocable\(ss[) -0.063477 0 489 1 22 A1`6
-474 1253 (]\)) -0.063477 0 28 0 1 A1`6
-75 1253 (# invocable ... \(mt doesn't handle general case\)) 0.00563 0 962 7 47 A1`6
-975 1332 (   if \\es then write\("invocable all"\)) -0.010635 0 662 7 36 A1`6
-975 1386 (   else write\("invocable ", ss\)) -0.006027 0 572 6 30 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 9 9
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-104 1555 (- 9 -) 0.046585 0 76 2 4 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
/AE 220 220 w1`6
-966 -1411 (   return) -0.005295 0 158 3 8 A1`6
-966 -1332 (end) 0 -0.006302 76 0 2 A1`6
-966 -1223 (procedure Invoke\(e, es[) 0.033981 0 482 2 22 A1`6
-472 -1223 (]\)) 0.033981 0 28 0 1 A1`6
-66 -1223 (# e\(e1, e2, ...\)) 0.025772 0 285 3 15 A1`6
-966 -1169 (   local result) 0.004074 0 257 4 14 A1`6
-966 -1090 (   if ) -0.0103 0 74 4 5 A1`6
/AD 220 220 w1`6
-892 -1090 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-869 -1090 (es = 0 then return code_gen\(e, "\(\)"\)) -0.0103 0 719 6 35 A1`6
-966 -1011 (   result := "") -0.015625 0 248 5 14 A1`6
-966 -957 (   every result ||:= !es || ", ") -0.000671 0 532 9 31 A1`6
-966 -882 (   return code_gen\(e, "\(", result[1:\3202], "\)"\)) 0.012085 0 827 7 44 A1`6
-966 -807 (end) 0 -0.006302 76 0 2 A1`6
-966 -698 (procedure Key\(s\)) -0.079758 0 351 1 15 A1`6
-66 -698 (# &s) -0.044754 0 92 1 3 A1`6
-966 -623 (   return code_gen\("&", s\)) -0.015549 0 514 5 25 A1`6
-966 -544 (end) 0 -0.006302 76 0 2 A1`6
-966 -436 (procedure Limit\(e1, e2\)) -0.046188 0 474 2 22 A1`6
-66 -436 (# e1 \\ e2) -0.018036 0 178 3 8 A1`6
-966 -361 (   return code_gen\("\(", e1, "\\\\", e2, "\)"\)) 0.001572 0 760 8 41 A1`6
-966 -282 (end) 0 -0.006302 76 0 2 A1`6
-966 -173 (procedure Link\(vs[) -0.025223 0 377 1 17 A1`6
-577 -173 (]\)) -0.025223 0 28 0 1 A1`6
-66 -173 (# link "v1, v2, ...") -0.024307 0 338 4 19 A1`6
-966 -119 (   local result) 0.004074 0 257 4 14 A1`6
-966 -40 (   result := "") -0.015625 0 248 5 14 A1`6
-966 14 (   every result ||:= !vs || ", ") 0.007507 0 530 9 31 A1`6
-966 93 (   write\("link ", result[1:\3202]\)) -0.018799 0 532 5 30 A1`6
-966 172 (   return) -0.005295 0 158 3 8 A1`6
-966 252 (end) 0 -0.006302 76 0 2 A1`6
-966 360 (procedure List\(es[) -0.050858 0 367 1 17 A1`6
-587 360 (]\)) -0.050858 0 28 0 1 A1`6
-66 360 (# [e1, e2, ... ]) -0.006302 0 267 4 15 A1`6
-966 414 (   local result) 0.004074 0 257 4 14 A1`6
-966 489 (   if ) -0.014328 0 74 4 5 A1`6
/AD 220 220 w1`6
-892 489 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-869 489 (es = 0 then return "[) -0.014328 0 402 5 20 A1`6
-455 489 (]") -0.014328 0 29 0 1 A1`6
-966 568 (   result := "") -0.015625 0 248 5 14 A1`6
-966 622 (   every result ||:= !es || ", ") -0.000671 0 532 9 31 A1`6
-966 702 (   return code_gen\("[", result[1:\3202], "]"\)) 0.009827 0 771 6 41 A1`6
-966 781 (end) 0 -0.006302 76 0 2 A1`6
-966 889 (procedure Local\(vs[) -0.098877 0 402 1 18 A1`6
-552 889 (]\)) -0.098877 0 28 0 1 A1`6
-66 889 (# local v1, v2, ...) 0.019333 0 331 4 18 A1`6
-966 943 (   local result) 0.004074 0 257 4 14 A1`6
-966 1022 (   result := "") -0.015625 0 248 5 14 A1`6
-966 1077 (   every result ||:= !vs || ", ") 0.007507 0 530 9 31 A1`6
-966 1156 (   write\("local ", result[1:\3202]\)) 0.008133 0 557 5 31 A1`6
-966 1235 (   return) -0.005295 0 158 3 8 A1`6
-966 1314 (end) 0 -0.006302 76 0 2 A1`6
-966 1422 (procedure Next\(\)) 0.074051 0 344 1 15 A1`6
-66 1422 (# next) -0.063889 0 125 1 5 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 10 10
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-130 1545 (- 10 -) 0.046585 0 99 2 5 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
/AE 220 220 w1`6
-975 -1364 (   return "next") -0.01149 0 290 4 15 A1`6
-975 -1285 (end) 0 -0.006302 76 0 2 A1`6
-975 -1176 (procedure Not\(e\)) 0.000412 0 346 1 15 A1`6
-75 -1176 (# not e) 0.022583 0 140 2 6 A1`6
-975 -1097 (   return code_gen\("not\(", e, "\)"\)) 0.00766 0 638 6 33 A1`6
-975 -989 (end) 0 -0.006302 76 0 2 A1`6
-975 -910 (procedure Null\(\)) -0.057373 0 329 1 15 A1`6
-75 -910 (# &null) 0.067551 0 140 1 6 A1`6
-975 -831 (   return "") -0.02034 0 203 4 11 A1`6
-975 -751 (end) 0 -0.006302 76 0 2 A1`6
-975 -643 (procedure Paren\(es[) 0.010178 0 418 1 18 A1`6
-546 -643 (]\)) 0.010178 0 28 0 1 A1`6
-75 -643 (# \(e1, e2, ... \)) -0.020752 0 272 4 15 A1`6
-975 -589 (   local result) 0.004074 0 257 4 14 A1`6
-975 -510 (   if ) -0.020752 0 74 4 5 A1`6
/AD 220 220 w1`6
-901 -510 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-878 -510 (es = 0 then return "\(\)") -0.020752 0 436 5 22 A1`6
-975 -431 (   result := "") -0.015625 0 248 5 14 A1`6
-975 -376 (   every result ||:= !es || ", ") -0.000671 0 532 9 31 A1`6
-975 -297 (   return code_gen\("\(", result[1:\3202], "\)"\)) 0.000198 0 776 6 41 A1`6
-975 -218 (end) 0 -0.006302 76 0 2 A1`6
-975 -110 (procedure Pdco\(e, es[) 0.006714 0 451 2 20 A1`6
-512 -110 (]\)) 0.006714 0 28 0 1 A1`6
-75 -110 (# e{e1, e2, ... }) -0.00946 0 298 4 16 A1`6
-975 -56 (   local result) 0.004074 0 257 4 14 A1`6
-975 19 (   if ) -0.019241 0 74 4 5 A1`6
/AD 220 220 w1`6
-901 19 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-878 19 (es = 0 then return code_gen\(e, "{}"\)) -0.019241 0 719 6 35 A1`6
-975 94 (   result := "") -0.015625 0 248 5 14 A1`6
-975 149 (   every result ||:= !es || ", ") -0.000671 0 532 9 31 A1`6
-975 224 (   return code_gen\(e, "{", result[1:\3202], "}"\)) -0.000702 0 827 7 44 A1`6
-975 299 (end) 0 -0.006302 76 0 2 A1`6
-975 407 (procedure Proc\(n, vs[) -0.051071 0 438 2 20 A1`6
-525 407 (]\)) -0.051071 0 28 0 1 A1`6
-75 407 (# procedure n\(v1, v2, ...\)) 0.016174 0 499 4 25 A1`6
-975 461 (   local result, v) -0.007004 0 306 5 17 A1`6
-975 540 (   if ) -0.010101 0 74 4 5 A1`6
/AD 220 220 w1`6
-901 540 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-878 540 (vs = 0 then write\("procedure ", n, "\(\)"\)) -0.010101 0 757 7 39 A1`6
-975 619 (   result := "") -0.015625 0 248 5 14 A1`6
-975 674 (   every v := !vs do) -0.007736 0 373 7 19 A1`6
-975 728 (      if \\v == "[) -0.003586 0 256 9 16 A1`6
-708 728 (]" then result[\3202:0] := v || ", ") -0.003586 0 566 7 32 A1`6
-975 782 (      else result ||:= \(\\v | ""\) || ", ") 0.003433 0 617 14 39 A1`6
-975 861 (   write\("procedure ", n, "\(", result[1:\3202], "\)"\)) 0.000351 0 867 8 48 A1`6
-975 940 (   return) -0.005295 0 158 3 8 A1`6
-975 1019 (end) 0 -0.006302 76 0 2 A1`6
-975 1128 (procedure Record\(n, fs[) -0.047806 0 481 2 22 A1`6
-482 1128 (]\)) -0.047806 0 28 0 1 A1`6
-75 1128 (# record n\(f1, f2, ...\)) 0.006516 0 402 4 22 A1`6
-975 1182 (   local result, field) 0.01033 0 367 5 21 A1`6
-975 1261 (   if ) -0.011276 0 74 4 5 A1`6
/AD 220 220 w1`6
-901 1261 (*) 0 0 23 0 0 A1`6
/AE 220 220 w1`6
-878 1261 (fs = 0 then write\("record ", n, "\(\)"\)) -0.011276 0 670 7 36 A1`6
-975 1340 (   result := "") -0.015625 0 248 5 14 A1`6
-975 1394 (   every field := !fs do) 0.000992 0 424 7 23 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 11 11
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-966 1555 (IPD263a) 0 -0.009216 170 0 6 A1`6
-115 1555 (- 11 -) 0.046585 0 99 2 5 A1`6
586 1555 (November 13, 1995) 0.01973 0 389 2 16 A1`6
O1`6
N1`6
F M1`6
/AE 220 220 w1`6
-975 -1389 (      result ||:= \(\\field | ""\) || ", ") 0.005661 0 582 13 38 A1`6
-975 -1310 (   write\("record ", n, "\(", result[1:\3202], "\)"\)) 0.001938 0 790 8 45 A1`6
-975 -1235 (   return) -0.005295 0 158 3 8 A1`6
-975 -1156 (end) 0 -0.006302 76 0 2 A1`6
-975 -1047 (procedure Repeat\(e\)) -0.012207 0 423 1 18 A1`6
-75 -1047 (# repeat e) 0.025833 0 206 2 9 A1`6
-975 -968 (   return code_gen\("repeat ", e\)) 0.003113 0 629 6 31 A1`6
-975 -889 (end) 0 -0.006302 76 0 2 A1`6
-975 -781 (procedure Return\(e\)) 0.006912 0 413 1 18 A1`6
-75 -781 (# return e) 0.0354 0 196 2 9 A1`6
-975 -701 (   return code_gen\("return ", e\)) 0.006302 0 619 6 31 A1`6
-975 -622 (end) 0 -0.006302 76 0 2 A1`6
-975 -514 (procedure Rlit\(r\)) -0.063889 0 331 1 16 A1`6
-75 -514 (# r) 0.05452 0 54 1 2 A1`6
-975 -435 (   return r) -0.024002 0 186 4 10 A1`6
-975 -356 (end) 0 -0.006302 76 0 2 A1`6
-975 -247 (procedure Scan\(e1, e2\)) -0.041306 0 481 2 21 A1`6
-75 -247 (# e1 ? e2) -0.034042 0 191 3 8 A1`6
-975 -168 (   return code_gen\("\(", e1 , " ? ", e2, "\)"\)) -0.007874 0 798 11 43 A1`6
-975 -89 (end) 0 -0.006302 76 0 2 A1`6
-975 19 (procedure Section\(op, e1, e2, e3\)) 0.017899 0 683 4 32 A1`6
-75 19 (# e1[e2 op  e3]) 0.004166 0 306 4 14 A1`6
-975 99 (   return code_gen\(e1, "[", e2, op, e3, "]"\)) 0.00267 0 824 9 43 A1`6
-975 178 (end) 0 -0.006302 76 0 2 A1`6
-975 286 (procedure Slit\(s\)) 0.019531 0 336 1 16 A1`6
-75 286 (# "s") 0.069168 0 94 1 4 A1`6
-975 365 (   return image\(s\)) 0.004074 0 349 4 17 A1`6
-975 444 (end) 0 -0.006302 76 0 2 A1`6
-975 553 (procedure Static\(vs[) 0.051682 0 408 1 19 A1`6
-556 553 (]\)) 0.051682 0 28 0 1 A1`6
-75 553 (# static v1, v2, ...) 0.018509 0 344 4 19 A1`6
-975 607 (   local result) 0.004074 0 257 4 14 A1`6
-975 682 (   result := "") -0.015625 0 248 5 14 A1`6
-975 736 (   every result ||:= !vs || ", ") 0.007507 0 530 9 31 A1`6
-975 815 (   write\("static ", result[1:\3202]\)) 0.007492 0 570 5 32 A1`6
-975 894 (   return) -0.005295 0 158 3 8 A1`6
-975 974 (end) 0 -0.006302 76 0 2 A1`6
-975 1082 (procedure Subscript\(e1, e2\)) -0.001221 0 568 2 26 A1`6
-75 1082 (# e1[e2]) -0.028488 0 166 1 7 A1`6
-975 1161 (   return code_gen\(e1, "[", e2, "]"\)) 0.000641 0 671 7 35 A1`6
-975 1240 (end) 0 -0.006302 76 0 2 A1`6
-975 1349 (procedure Suspend\(e\)) -0.031326 0 456 1 19 A1`6
-75 1349 (# suspend e) 0.029099 0 250 2 10 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Page: 12 12
%%PageProcessColors: (atend)
%%PageCustomColors: (atend)
%%BeginPageSetup 
j`6
%%EndPageSetup 
0.05 -0.05 scale
6120 -7920 translate
0 0 translate
bse^6
4.8 4.8 1 1 ps$6
300 n`6
/$5 bmt^6
o`6
N1`6
0 0 0 1 (Black) 0 _process b`6
F yy`6
1 0 2 Qy6
-712.5 -1213.958 @m6
-712.5 -1152.917 -548.542 -1152.917 -548.542 -1213.958  3 yy^6
@cp6
@fp6
r2`6 
yyq6
N1`6
F M1`6
/AA 220 220 w1`6
T g`6
0 0 0 1 (Black) 1 _process d`6
-981 1545 (November 13, 1995) 0.01973 0 389 2 16 A1`6
-130 1545 (- 12 -) 0.046585 0 99 2 5 A1`6
790 1545 (IPD263a) 0 -0.009216 170 0 6 A1`6
O1`6
N1`6
F M1`6
/AE 220 220 w1`6
-975 -1389 (   return code_gen\("suspend ", e\)) 0.004196 0 672 6 32 A1`6
-975 -1310 (end) 0 -0.006302 76 0 2 A1`6
-975 -1201 (procedure SuspendDo\(e1, e2\)) 0.032547 0 617 2 26 A1`6
-75 -1201 (# suspend e1 do e2) 0.01384 0 403 4 17 A1`6
-975 -1122 (   return code_gen\("suspend ", e1, " do ", e2\)) 0.008835 0 909 10 45 A1`6
-975 -1043 (end) 0 -0.006302 76 0 2 A1`6
-975 -935 (procedure To\(e1, e2\)) 0.032349 0 431 2 19 A1`6
-75 -935 (# e1 to e2) 0.026855 0 204 3 9 A1`6
-975 -856 (   return code_gen\("\(", e1, " to ", e2, "\)"\)) -0.008667 0 798 10 43 A1`6
-975 -776 (end) 0 -0.006302 76 0 2 A1`6
-975 -668 (procedure ToBy\(e1, e2, e3\)) -0.026443 0 560 3 25 A1`6
-75 -668 (# e1 to e2 by e3) 0.003342 0 329 5 15 A1`6
-975 -589 (   return code_gen\("\(", e1, " to ", e2, " by ", e3, "\)"\)) -0.006042 0 1006 14 55 A1`6
-975 -510 (end) 0 -0.006302 76 0 2 A1`6
-975 -401 (procedure Repalt\(e\)) 0.087082 0 408 1 18 A1`6
-75 -401 (# |e) 0.004471 0 76 1 3 A1`6
-975 -322 (   return code_gen\("\(|", e, "\)"\)) -0.003387 0 586 6 31 A1`6
-975 -243 (end) 0 -0.006302 76 0 2 A1`6
-975 -135 (procedure Unop\(op, e\)) 0.048416 0 461 2 20 A1`6
-75 -135 (# op e) 0.0354 0 127 2 5 A1`6
-975 -56 (   return code_gen\("\(", op, e, "\)"\)) 0.002899 0 651 7 34 A1`6
-975 24 (end) 0 -0.006302 76 0 2 A1`6
-975 132 (procedure Until\(e\)) 0.051682 0 367 1 17 A1`6
-75 132 (# until e) 0.048218 0 161 2 8 A1`6
-975 211 (   return code_gen\("until ", e\)) 0.010574 0 583 6 30 A1`6
-975 290 (end) 0 -0.006302 76 0 2 A1`6
-975 399 (procedure UntilDo\(e1, e2\)) -0.030106 0 527 2 24 A1`6
-75 399 (# until e1 do e2) 0.023392 0 314 4 15 A1`6
-975 478 (   return code_gen\("until ", e1, " do ", e2\)) -0.008179 0 819 10 43 A1`6
-975 557 (end) 0 -0.006302 76 0 2 A1`6
-975 665 (procedure Var\(v\)) 0.074051 0 344 1 15 A1`6
-75 665 (# v) -0.099289 0 61 1 2 A1`6
-975 744 (   return v) -0.010376 0 194 4 10 A1`6
-975 824 (end) 0 -0.006302 76 0 2 A1`6
-975 932 (procedure While\(e\)) 0.051682 0 390 1 17 A1`6
-75 932 (# while e) -0.030319 0 181 2 8 A1`6
-975 1011 (   return code_gen\("while ", e\)) -0.015594 0 603 6 30 A1`6
-975 1090 (end) 0 -0.006302 76 0 2 A1`6
-975 1199 (procedure WhileDo\(e1, e2\)) -0.030106 0 550 2 24 A1`6
-75 1199 (# while e1 do e2) -0.015869 0 334 4 15 A1`6
-975 1278 (   return code_gen\("while ", e1, " do ", e2\)) -0.003052 0 840 10 43 A1`6
-975 1357 (end) 0 -0.006302 76 0 2 A1`6
O1`6
$5 tsi^6
showpage
%%PageTrailer
%%PageProcessColors: Black
%%PageCustomColors: 
%ADBPageMultiInkColors: 
%%Trailer
end
end
%%Pages: 12
%%DocumentSuppliedResources: procset P6PS_PS 6.0 1
%%+ procset P6IMAGE_PS 6.0 1
%%DocumentNeededResources: font Times-Roman
%%+ font Helvetica
%%+ font Palatino-Roman
%%+ font Palatino-Bold
%%+ font Helvetica-Oblique
%%+ font ZapfDingbats
%%+ font Palatino-Italic
%%+ font Helvetica-Bold
%%+ font Symbol
%%DocumentProcessColors: Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%ADBDocumentInks: 
%ADBDocumentMultiInkColors: 
%%EOF
