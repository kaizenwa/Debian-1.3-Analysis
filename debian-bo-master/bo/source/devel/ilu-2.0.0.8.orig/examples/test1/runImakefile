/*
Copyright (c) 1991-1996 Xerox Corporation.  All Rights Reserved.  

Unlimited use, reproduction, and distribution of this software is
permitted.  Any copy of this software must include both the above
copyright notice of Xerox Corporation and this paragraph.  Any
distribution of this software must comply with all applicable United
States export control laws.  This software is made available AS IS,
and XEROX CORPORATION DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE, AND NOTWITHSTANDING ANY OTHER
PROVISION CONTAINED HEREIN, ANY LIABILITY FOR DAMAGES RESULTING FROM
THE SOFTWARE OR ITS USE IS EXPRESSLY DISCLAIMED, WHETHER ARISING IN
CONTRACT, TORT (INCLUDING NEGLIGENCE) OR STRICT LIABILITY, EVEN IF
XEROX CORPORATION IS ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

$Id: runImakefile,v 1.13 1996/04/03 23:06:57 spreitze Exp $
*/
/* Last edited by Mike Spreitzer April 3, 1996 3:00 pm PST */

/* Note:  These following 2 variables may need to be set differently in
your environment.  They are used to tailor the directories in which
things are found so that developers can test private versions.

ILUCINCLUDES = -I/jilu/src/runtime/c -I/jilu/src/runtime/kernel
ILUCLIBS = /jilu/src/runtime/c/libilu-c.a /jilu/src/runtime/kernel/libilu.a

/* You shouldn't need to change anything below this (or above this,
if you're not a developer. */

NormalObjectRule()

InterfaceTarget(Test1.isl)
InterfaceTarget(Test2.isl)
InterfaceTarget(Test3.isl)

#####################################################
#
# C
#

ILUCTarget(Test1.h Test1-true.c Test1-surrogate.c Test1-common.c, Test1.isl)
ObjectTarget(Test1-common.o)
ObjectTarget(Test1-surrogate.o)
ObjectTarget(Test1-true.o)

ILUCTarget(Test2.h Test2-true.c Test2-surrogate.c Test2-common.c, Test2.isl)
ObjectTarget(Test2-common.o)
ObjectTarget(Test2-surrogate.o)
ObjectTarget(Test2-true.o)

ILUCTarget(Test3.h Test3-true.c Test3-surrogate.c Test3-common.c, Test3.isl)
ObjectTarget(Test3-common.o)
ObjectTarget(Test3-surrogate.o)
ObjectTarget(Test3-true.o)

ObjectTarget(clnt.o)
ObjectTarget(clntu.o)
ObjectTarget(srvr.o)
ObjectTarget(srvru.o)

clnt.o : Test1.h Test2.h Test3.h clnt.c
srvr.o : Test1.h Test2.h Test3.h srvr.c

ILUCProgramTarget(server, srvru.o srvr.o Test1-common.o Test1-true.o Test2-common.o Test3-common.o Test3-true.o,,)

ILUCProgramTarget(client, clntu.o clnt.o Test1-surrogate.o Test1-common.o Test2-surrogate.o Test2-common.o Test3-surrogate.o Test3-common.o,,)


#####################################################
#
# C++
#

#ifdef ADD_CPLUSPLUS_LANGUAGE

ILUCPlusPlusTarget(Test1.hh Test1.cc Test1-server-stubs.cc, Test1.isl)
ObjectTarget(Test1.o)
ObjectTarget(Test1-server-stubs.o)

ILUCPlusPlusTarget(Test2.hh Test2.cc Test2-server-stubs.cc, Test2.isl)
ObjectTarget(Test2.o)
ObjectTarget(Test2-server-stubs.o)

ILUCPlusPlusTarget(Test3.hh Test3.cc Test3-server-stubs.cc, Test3.isl)
ObjectTarget(Test3.o)
ObjectTarget(Test3-server-stubs.o)

ObjectTarget(cppclnt.o)
ObjectTarget(cppsrvr.o)

cppclnt.o : Test1.hh Test2.hh Test3.hh cppclnt.cc
cppsrvr.o : Test1.hh Test2.hh Test3.hh cppsrvr.cc

ILUCPlusPlusProgramTarget(cppclient, cppclnt.o Test1.o Test2.o Test3.o,,)

ILUCPlusPlusProgramTarget(cppserver, cppsrvr.o Test1.o Test2.o Test3.o Test1-server-stubs.o Test2-server-stubs.o Test3-server-stubs.o,,)

#endif


#####################################################
#
# M3
#

#ifdef ADD_MODULA3_LANGUAGE

LOCALM3FLAGS = -D$(ILUHOME)/include -L$(ILUHOME)/lib

ILUM3Target(IluM3Files(Test1), Test1.isl)
ILUM3Target(IluM3Files(Test2), Test2.isl)
ILUM3Target(IluM3Files(Test3), Test3.isl)
M3LibraryTarget(libtest.a, IluM3Files(Test1) IluM3Files(Test2) IluM3Files(Test3), -lilu-m3)
M3ProgramTarget(TestM3Server, TestServer.m3 libtest.a, -lilu-m3 -lilu)
M3ProgramTarget(TestM3Client, TestClient.m3 libtest.a, -lilu-m3 -lilu)

#endif


#####################################################
#
# Python
#

#ifdef ADD_PYTHON_LANGUAGE

ILUPythonTarget(Test1.py Test1__skel.py, Test1.isl)
ILUPythonTarget(Test2.py Test2__skel.py, Test2.isl)
ILUPythonTarget(Test3.py Test3__skel.py, Test3.isl)

all:: Test1.py Test1__skel.py
all:: Test2.py Test2__skel.py
all:: Test3.py Test3__skel.py

#endif

#####################################################
#
# Common Lisp
#

#ifdef ADD_COMMONLISP_LANGUAGE

all:: lisp-server lisp-client

ILULispTarget(test1-basics.lisp test1-server-procs.lisp test1-sysdcl.lisp, Test1.isl)
ILULispTarget(test2-basics.lisp test2-server-procs.lisp test2-sysdcl.lisp, Test2.isl)
ILULispTarget(test3-basics.lisp test3-server-procs.lisp test3-sysdcl.lisp, Test3.isl)

lisp-server lisp-client : server.lisp client.lisp test1-basics.lisp test2-basics.lisp test3-basics.lisp
	${LISP_BATCH_COMMAND} <load-lisp-example.lisp

CleanTarget(test1-basics.$(LISP_BIN_EXT) test1-server-procs.$(LISP_BIN_EXT))
CleanTarget(test2-basics.$(LISP_BIN_EXT) test2-server-procs.$(LISP_BIN_EXT))
CleanTarget(test3-basics.$(LISP_BIN_EXT) test3-server-procs.$(LISP_BIN_EXT))
CleanTarget(lisp-server lisp-client)

#endif
