AC_PREREQ(2.2)
dnl
dnl  
dnl  Copyright (c) 1991-1995 Xerox Corporation.  All Rights Reserved.  
dnl  
dnl  Unlimited use, reproduction, and distribution of this software is
dnl  permitted.  Any copy of this software must include both the above
dnl  copyright notice of Xerox Corporation and this paragraph.  Any
dnl  distribution of this software must comply with all applicable United
dnl  States export control laws.  This software is made available AS IS,
dnl  and XEROX CORPORATION DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
dnl  INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF MERCHANTABILITY
dnl  AND FITNESS FOR A PARTICULAR PURPOSE, AND NOTWITHSTANDING ANY OTHER
dnl  PROVISION CONTAINED HEREIN, ANY LIABILITY FOR DAMAGES RESULTING FROM
dnl  THE SOFTWARE OR ITS USE IS EXPRESSLY DISCLAIMED, WHETHER ARISING IN
dnl  CONTRACT, TORT (INCLUDING NEGLIGENCE) OR STRICT LIABILITY, EVEN IF
dnl  XEROX CORPORATION IS ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
dnl  
dnl Process this file with autoconf to produce a configure script.
dnl
dnl $Id: configure.in,v 1.106 1996/07/16 20:10:17 janssen Exp $
dnl
dnl
dnl  ********** What this file does:
dnl  
dnl  GNU Autoconf turns this into a /bin/sh script which attempts to
dnl  configure your ILU system automatically.  It does this by looking to
dnl  see what's on your path, what's in your system libraries, what options
dnl  you've specified on the command line, etc.  It tries various probes to
dnl  attempt to figure out what your architecture is, and what networking
dnl  options you have, and what version of the OS, and so forth, and then
dnl  it summarizes these findings in several configuration files scattered
dnl  about the ILU source hierarchy.  In particular, it produces the
dnl  following files:
dnl  
dnl  ILUSRC/runtime/kernel/iluconf.h
dnl  
dnl    This file is constructed from ILUSRC/imake/iluconf.h.in, by
dnl  #defining any option or value which is named in
dnl  ILUSRC/imake/iluconf.h.in, and which is found or discovered by the
dnl  configure script.  This is used in building the ILU kernel library.
dnl  
dnl    When building ILUSRC/stubbers/parser/, the make procedure copies
dnl  this file from ../../runtime/kernel/, so iluconf.h is actually used
dnl  in both places.
dnl
dnl  ILUSRC/GSS/kernel/ilugss_conf.h
dnl  
dnl    This file is constructed from ILUSRC/imake/ilugss_conf.h.in, and is
dnl  used to specify which security protocols and name systems you've
dnl  selected to be included in the GSS security library.  This file is
dnl  only constructed if you specify to the configure script that you need
dnl  to have the secure transport option built.
dnl  
dnl  ILUSRC/GSS/ssl/locations.cfg
dnl  
dnl    This file is constructed from ILUSRC/imake/gsslocations.cfg, and is
dnl  used to specify to ILU where any various external security libraries
dnl  that might be needed are located, such as libdes-3.0, or RSAREF.  If
dnl  you do not specify SSL security to the configure script, this file will
dnl  not be generated.
dnl  
dnl  ILUSRC/imake/ilu.defs.new
dnl  
dnl    This file is used by the "imake" step of the ILU build process, and
dnl  is constructed from ILUSRC/imake/iluchoices.in and ILUSRC/imake/iludefs.in.
dnl  iluchoices.in is processed in much the same way as iluconf.h.in, with
dnl  various #define defs being generated for those options and configuration
dnl  parameters that are needed.  iludefs.in is processed somewhat differently,
dnl  with any parameters between `@' characters being replaced by whatever value
dnl  the configure script has determined for that identifier, or not replaced
dnl  if the configure script has not determined any value.
dnl  
dnl  ILUSRC/BootstrapMakefile
dnl  
dnl    This makefile is used to configure the actual top-level makefile,
dnl  which is called ConfiguredMakefile, from the top-level Imakefile.
dnl  
dnl  ******* Options
dnl  
dnl  The available configure options can be listed by typing
dnl  
dnl  	./configure --help
dnl  
dnl  which produces
dnl  
dnl  Usage: configure [options] [host]
dnl  Options: [defaults in brackets after descriptions]
dnl  Configuration:
dnl    --cache-file=FILE       cache test results in FILE
dnl    --help                  print this message
dnl    --no-create             do not create output files
dnl    --quiet, --silent       do not print `checking...' messages
dnl    --version               print the version of autoconf that created configure
dnl  Directory and file names:
dnl    --prefix=PREFIX         install architecture-independent files in PREFIX
dnl                            [/usr/local/ilu]
dnl    --exec-prefix=PREFIX    install architecture-dependent files in PREFIX
dnl                            [same as prefix]
dnl    --srcdir=DIR            find the sources in DIR [configure dir or ..]
dnl    --program-prefix=PREFIX prepend PREFIX to installed program names
dnl    --program-suffix=SUFFIX append SUFFIX to installed program names
dnl    --program-transform-name=PROGRAM run sed PROGRAM on installed program names
dnl  Host type:
dnl    --build=BUILD           configure for building on BUILD [BUILD=HOST]
dnl    --host=HOST             configure for HOST [guessed]
dnl    --target=TARGET         configure for TARGET [TARGET=HOST]
dnl  Features and packages:
dnl    --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
dnl    --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
dnl    --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
dnl    --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
dnl    --x-includes=DIR        X include files are in DIR
dnl    --x-libraries=DIR       X library files are in DIR
dnl  --enable and --with options recognized:
dnl    --enable-debugging          Enable -g on compile and add debugging print statements
dnl    --enable-os-threads[=type]  Enable use of threads.  Type is "posix" or "solaris2".         
dnl    --enable-sunrpc-protocol    Add ILU version of the Sun RPC v2 protocol
dnl    --enable-courier-protocol   Add Xerox Courier protocol
dnl    --enable-http-protocol      Add World Wide Web HTTP protocol
dnl    --enable-w3ng-protocol      Add W3C HTTP-NG protocol
dnl    --enable-corba-iiop         Add OMG CORBA 2 IIOP protocol & transport, version 1.0
dnl    --enable-sunrpcrm-transport Add Sun RPC record marking transport filter
dnl    --enable-w3mux-transport    Add W3C multiplexing record marking transport filter
dnl    --enable-tcp-transport      Add TCP/IP transport
dnl    --enable-udp-transport      Add UDP/IP transport
dnl    --enable-xns-transport      Add XNS/SPP transport
dnl    --enable-c-support          Include support for ANSI C
dnl    --enable-cplusplus-support  Include support for C++
dnl    --enable-modula3-support    Include support for Modula-3
dnl    --enable-python-support     Include support for Python
dnl    --enable-lisp-support       Include support for Common Lisp
dnl    --enable-security           Add security transport filter
dnl    --enable-ssl-security       Add SSL security mechanism (needs --enable-security)
dnl    --enable-omg-idl-support    Include support for using OMG IDL with ILU
dnl    --enable-xview-support      Include support for the XView GUI toolkit
dnl    --enable-xt-support         Include support for the Xt GUI toolkit
dnl    --with-x=INCLUDE_PATH       use the X Window System
dnl    --with-iluhome=PATH         Specify PATH to root of ILU installation
dnl    --with-destdir=PATH         Specify PATH to install ILU in
dnl    --with-binding-dir=PATH     Specify PATH for use as ILU simple binding directory
dnl    --with-binding-server=D:H:P Specify REALM, HOST and PORT for binding server (e.g. foo.bar.edu:123.4.92.68:10003)
dnl    --with-binding-multicast=ADDR Specify multicast HOST and PORT for binding (e.g. 123.4.92.68:10003)
dnl  

dnl
dnl Produce iluconf.h, iludefs, and iluchoices
dnl
AC_INIT(iludefs.in)
AC_CONFIG_HEADER(iluconf.h ilugss_conf.h iluchoices)

dnl
dnl Figure out what kind of system this is
dnl
AC_CANONICAL_HOST

dnl
dnl Checks for programs.
dnl
AC_DEFUN(ILU_CHECK_ANSI_C,
[AC_MSG_CHECKING(to see if $1 can handle ANSI C)
cat >/tmp/conftest.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
int main(int ac, char **av){
 int i = INT_MAX;
 char *p = (char *) malloc(1048);
 memmove(p, *av, strlen(*av)+1);
 printf("%s\n", p);
 return 0;
}
EOF
if test -z "`$1 -o /tmp/conftest1 /tmp/conftest.c 2>&1`"; then
  ac_tv_prog_ANSI_C="$1"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
])

if test "$ac_cv_prog_ANSI_C" != ""; then
  ac_tv_prog_ANSI_C="$ac_cv_prog_ANSI_C"
else
  AC_PATH_PROG(CC, cc, "")
  if test "$CC" != ""; then
    ILU_CHECK_ANSI_C($CC)
  fi
  if test "$ac_tv_prog_ANSI_C" = ""; then
    AC_MSG_RESULT("  perhaps gcc is properly installed...")
    AC_PATH_PROG(CC2, gcc, "")
    if test "$CC2" != ""; then
      ILU_CHECK_ANSI_C($CC2)
    fi
    if test "$ac_tv_prog_ANSI_C" = ""; then
      AC_MSG_RESULT(*** Can't find an ANSI C compiler to use.)
      AC_MSG_ERROR(*** Please set the environment variable CC to valid ANSI C compilation command.)
    fi
  fi
  AC_CACHE_VAL(ac_cv_prog_ANSI_C,[ac_cv_prog_ANSI_C="$ac_tv_prog_ANSI_C"])
fi
if test "$ac_tv_prog_ANSI_C" != ""; then
  CC="$ac_tv_prog_ANSI_C"
  AC_MSG_RESULT(using $ac_tv_prog_ANSI_C for ANSI C compilation)
else
  AC_MSG_RESULT(*** Can't find an ANSI C compiler to use.)
  AC_MSG_ERROR(*** Please set the environment variable CC to valid ANSI C compilation command.)
  exit 1
fi
AC_SUBST(ANSI_C_LIBRARY)
AC_MSG_CHECKING(to see if -lm is needed when linking ANSI C)
cat >/tmp/conftest.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
int main(int ac, char **av){
 double f1 = 2.0;
 printf("%f %f\n", sqrt(f1), floor(f1));
 return 0;
}
EOF
if test -z "`$ac_cv_prog_ANSI_C -o /tmp/conftest1 /tmp/conftest.c 2>&1`"; then
  AC_MSG_RESULT(no)
else
  ac_tv_prog_ANSI_C="$1"
  if test -z "`$ac_cv_prog_ANSI_C -o /tmp/conftest1 /tmp/conftest.c -lm 2>&1`"; then
    AC_MSG_RESULT(yes)
    ANSI_C_LIBRARY="$ANSI_C_LIBRARY -lm"
  else
    AC_MSG_ERROR(Cannot use math library calls)
  fi
fi

AC_PROG_INSTALL
if test "$INSTALL" = "./install-sh -c" ; then
  INSTALL="`pwd`/install-sh -c"
fi
dnl
dnl Don't use AC_PROG_RANLIB, as it confuses imake.
dnl Thanks to duck@novell.com for this tip.
dnl
AC_CHECK_PROG(RANLIB, ranlib, ranlib, true)

ac_save_path="$PATH"
PATH=$PATH:/usr/bin/X11
AC_PATH_PROG(IMAKE, imake, [""])
PATH=$ac_save_path
if test -z "$IMAKE" ; then
  AC_MSG_ERROR([Can't find imake.  Please make sure imake is on your path and start over.])
fi

AC_SUBST(AR)
AC_CHECK_PROGS(AR, ar aal, ar)
AC_PROG_LN_S
AC_PATH_PROGS(BOURNE_SHELL, sh bash, [""])
AC_PATH_PROG(PERL, perl, [""])
AC_PATH_PROG(BISON, bison, [""])
AC_PATH_PROG(DVIPS, dvips, [""])
AC_PATH_PROG(DVIPS4050, 4050dvips, [""])
AC_PATH_PROG(GHOSTSCRIPT, gs, [""])
AC_PATH_PROG(MAKEINFO, makeinfo, [""])
AC_PATH_PROG(TEXINDEX, texindex, [""])
AC_PATH_PROG(TEX, tex, [""])
AC_PATH_PROG(GIFTOPPM, giftoppm, [""])
AC_PATH_PROG(PPMQUANT, ppmquant, [""])
AC_PATH_PROG(PPMTOPGM, ppmtopgm, [""])
AC_PATH_PROG(PNMSCALE, pnmscale, [""])
AC_PATH_PROG(PGMTOPBM, pgmtopbm, [""])
AC_PATH_PROG(PBMTOASCII, pbmtoascii, [""])

if test "x$PERL" != "x" -a "x$DVIPS" != "x" -a "x$GHOSTSCRIPT" != "x" -a "x$MAKEINFO" != "x" -a "x$TEXINDEX" != "x" -a "x$TEX" != "x" -a "x$GIFTOPPM" != "x" -a "x$PPMTOPGM" != "x" -a "x$PNMSCALE" != "x" -a "x$PGMTOPBM" != "x" -a "x$PBMTOASCII" != "x"; then
  AC_DEFINE(ADD_TIM_TOOLS)
fi

AC_MSG_CHECKING(how to index man pages on $host_os)
case "$host_os" in
  sunos4* | solaris1*)
	ac_save_path="$PATH"
	PATH="/etc:/usr/etc:/usr/lib:$PATH"
	AC_PATH_PROG(MAKEWHATIS, makewhatis, [""])
	PATH="$ac_save_path"
	if test "$MAKEWHATIS" != ""; then
	  MAKEWHATIS="$MAKEWHATIS -w -M"
	fi
	;;
  solaris2*)
	MAKEWHATIS="/usr/lib/makewhatis"
	;;
  *)
	;;
esac
if test "$MAKEWHATIS" != ""; then
  AC_MSG_RESULT($MAKEWHATIS)
else
  AC_MSG_RESULT([Don't know -- won't try])
  MAKEWHATIS="echo Remember to re-index the man pages"
fi

AC_CHECK_FUNCS(accept)
if test "x$HAVE_ACCEPT" = "x"; then
  AC_CHECK_LIB(socket, accept, LIBS="${LIBS} -lsocket -lnsl", , -lnsl)
fi
unset ac_cv_func_accept

AC_CHECK_FUNCS(alloca)

dnl
dnl Checks for header files.
dnl
AC_CHECK_HEADERS(widec.h)

dnl
dnl Checks for typedefs, structures, and runtime characteristics.
dnl
AC_TYPE_PID_T
AC_SYS_RESTARTABLE_SYSCALLS
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(void *)

AC_MSG_CHECKING(size of function pointer)
AC_CACHE_VAL(ac_cv_sizeof_fn_p,[AC_TRY_RUN([#include <stdio.h>
main()
{
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(void (*)(void)));
  exit(0);
}], ac_cv_sizeof_fn_p=`cat conftestval`, ac_cv_sizeof_fn_p=0)])dnl
AC_MSG_RESULT($ac_cv_sizeof_fn_p)
AC_DEFINE_UNQUOTED(SIZEOF_FN_P, $ac_cv_sizeof_fn_p)
undefine([SIZEOF_FN_P])dnl
undefine([ac_cv_sizeof_fn_p])dnl

AC_MSG_CHECKING(size of enum type)
AC_CACHE_VAL(ac_cv_sizeof_enum,[AC_TRY_RUN([#include <stdio.h>
main()
{
  enum color { red, blue, green };
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", sizeof(enum color));
  exit(0);
}], ac_cv_sizeof_enum=`cat conftestval`, ac_cv_sizeof_enum=0)])dnl
AC_MSG_RESULT($ac_cv_sizeof_enum)
AC_DEFINE_UNQUOTED(SIZEOF_ENUM, $ac_cv_sizeof_enum)
undefine([SIZEOF_ENUM])dnl
undefine([ac_cv_sizeof_enum])dnl

if test $ac_cv_sizeof_long -eq 8; then
  AC_DEFINE(LONG_CARDINAL_TYPE,unsigned long)
  AC_DEFINE(LONG_INTEGER_TYPE,long)
elif test $ac_cv_sizeof_long_long -eq 8; then
  AC_DEFINE(LONG_CARDINAL_TYPE,unsigned long long)
  AC_DEFINE(LONG_INTEGER_TYPE,long long)
fi

if test $ac_cv_sizeof_double -eq 16; then
  AC_DEFINE(LONG_REAL_TYPE,double)
elif test $ac_cv_sizeof_long_double -eq 16; then
  AC_DEFINE(LONG_REAL_TYPE,long double)
fi

dnl
dnl Check to see if "size_t" is defined
dnl
AC_MSG_CHECKING(for size_t)
AC_CACHE_VAL(ac_cv_has_size_t,[AC_TRY_RUN([
#include <stdlib.h>
main()
{
  size_t i;

  i = 10;
  return 0;
}], ac_cv_has_size_t="yes", ac_cv_has_size_t="no")])dnl
if test "$ac_cv_has_size_t" = "yes"; then
  AC_DEFINE(SIZE_T, size_t)
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(SIZE_T, unsigned)
  AC_MSG_RESULT([no -- using 'unsigned' instead])
fi

dnl
dnl Check to see if using glibc header files
dnl
AC_MSG_CHECKING(whether using GNU libc header files)
AC_CACHE_VAL(ac_cv_using_glibc,[AC_TRY_RUN([
#include <sys/types.h>
int main(int ac, char **av)
{
#ifndef _GNU_TYPES_H
  &&;
#endif
  return 0;
}], ac_cv_using_glibc="yes", ac_cv_using_glibc=="no")])dnl
if test "$ac_cv_using_glibc" = "yes"; then
  AC_DEFINE(ILU_USING_GLIBC)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl
dnl Checks for library functions, signatures
dnl
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday strdup memmove)

dnl
dnl SIG_IGN is broken on at least NEXTSTEP 3.2
dnl
AC_MSG_CHECKING([if definition of SIG_IGN is broken for C])
AC_CACHE_VAL(ac_cv_decl_sig_ign_broken,
[AC_TRY_COMPILE([#include <signal.h>],[(void) signal(SIGPIPE, SIG_IGN)],
    ac_cv_decl_sig_ign_broken=no, ac_cv_decl_sig_ign_broken=yes)])dnl
AC_MSG_RESULT($ac_cv_decl_sig_ign_broken)
if test $ac_cv_decl_sig_ign_broken = yes; then
    AC_DEFINE(SIG_IGN_BROKEN)
fi

dnl
dnl Check for solaris 1 non-blocking I/O bug
dnl

AC_MSG_CHECKING(for Solaris 1 POSIX non-blocking I/O bug)
case "$host_os" in
  sunos4* | solaris1*)
	AC_DEFINE(HAS_SOLARIS1_NONBLOCKING_BUG)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT([don't know -- assuming no])
	;;
esac

dnl
dnl Check for solaris 1 getgroups gid_t type problem
dnl

AC_MSG_CHECKING(for Solaris 1 gid_t size problem)
case "$host_os" in
  sunos4* | solaris1*)
	AC_DEFINE(HAS_SOLARIS1_GID_T_SIZE_BUG)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT([don't know -- assuming no])
	;;
esac

dnl
dnl Check for solaris 2 TCP socket bug
dnl

AC_MSG_CHECKING(for Solaris 2 send/recv bug on TCP sockets)
case "$host_os" in
  solaris2*)
	AC_DEFINE(HAS_SOLARIS2_TCP_SOCKET_BUG)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT([don't know -- assuming no])
	;;
esac

dnl
dnl Check for OSF1 pthreads bug:
dnl
dnl On canaima, <pthread.h> says
dnl
dnl int
dnl pthread_mutex_init _CMA_PROTOTYPE_ ((
dnl 	pthread_mutex_t		*mutex,
dnl 	pthread_mutexattr_t	attr));
dnl 
dnl but the actual POSIX threads standard (P1003.1c) says the second argument
dnl should be of type "pthread_mutexattr_t*".  I can't figure out how to write any
dnl unconditional C code that's both standard-compliant and OSF1-compliant, so I'm
dnl introducing a feature-test macro for this bug.  The macro is
dnl "DEC_OSF1_PTHREADS_BUG".  It needs to be #defined on systems with this bug, and
dnl not on others.
dnl 

AC_MSG_CHECKING(for DEC OSF/1 pthreads mutex init bug)
case "$host_os" in
  osf3.2)
 	AC_DEFINE(HAS_DEC_OSF1_PTHREADS_BUG)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT([don't know -- assuming no])
	;;
esac

dnl
dnl Figure out how to build shared libraries
dnl

AC_MSG_CHECKING(how to build shared libraries)
case "$host_os" in
  irix5.* | linux1.2.* | linux1.3.* | linux2.0.*)
	LDSHARED_COMMAND="ld -shared"
	LDSHARED_FILE_EXT="so"
	;;
  sunos4.* | solaris1.*)
	LDSHARED_COMMAND="ld"
	LDSHARED_FILE_EXT="so"
	;;
  solaris2.* | sunos5.* | DYNIX/ptx*)
	LDSHARED_COMMAND="ld -G"
	LDSHARED_FILE_EXT="so"
	;;
  hpux*)
	LDSHARED_COMMAND="ld -b"
	LDSHARED_FILE_EXT="sl"
	;;
  osf*)
	LDSHARED_COMMAND="ld -shared -expect_unresolved \"*\""
	LDSHARED_FILE_EXT="so"
	;;
  *)
	LDSHARED_COMMAND=""
	LDSHARED_FILE_EXT=""
	;;
esac
if test "$LDSHARED_COMMAND" != ""; then
  AC_MSG_RESULT($LDSHARED_COMMAND with file extension of .$LDSHARED_FILE_EXT)
  AC_DEFINE(PYTHON_USES_SHARED_LIBRARIES_FOR_EXTENSIONS)
else
  AC_MSG_RESULT(don't know)
fi
AC_SUBST(LDSHARED_COMMAND)
AC_SUBST(LDSHARED_FILE_EXT)
AC_CHECK_HEADERS(sys/select.h, [AC_DEFINE(_NEEDS_SELECT_H)])

dnl
dnl Check for sockets
dnl
AC_CACHE_VAL(ac_cv_ilu_socket_element_missing,
[ac_cv_ilu_socket_element_missing=""
 AC_CHECK_HEADERS(sys/socket.h,,[ac_cv_ilu_socket_element_missing="yes"])
 AC_CHECK_FUNCS(socket accept connect listen bind,,[ac_cv_ilu_socket_element_missing="yes"])])
if test "$ac_cv_ilu_socket_element_missing" = "" ; then
  AC_MSG_RESULT(the OS supports BSD sockets)
  AC_DEFINE(_HAS_SOCKETS)
else
  AC_MSG_RESULT(socket support is not provided)
fi

dnl
dnl check for getwd separately from other BSD functions
dnl
AC_CHECK_FUNCS(getwd)

dnl
dnl check for BSD characteristics
dnl
AC_CACHE_VAL(ac_cv_ilu_bsd_element_missing,
[ac_cv_ilu_bsd_element_missing=""
 AC_CHECK_FUNCS(gethostname gettimeofday select,,[ac_cv_ilu_bsd_element_missing="yes"])
 AC_CHECK_HEADERS(netinet/in.h netdb.h,,[ac_cv_ilu_bsd_element_missing="yes"])])
dnl also need to check for FIONREAD, FIONBIO
if test "$ac_cv_ilu_bsd_element_missing" = ""; then
  AC_MSG_RESULT(the OS has sufficient BSD-ness for ILU purposes)
  AC_DEFINE(_IS_BSD)
else
  AC_MSG_RESULT(the OS can\'t be thought of as BSD-compatible)  
fi

dnl
dnl Figure out if we need this odd BSDI 2.0 #include
dnl

AC_MSG_CHECKING([whether <netinet/tcp.h> needs to be included to get TCP_NODELAY defined])
case "$host_os" in
  bsdi2.*)
	AC_DEFINE(ILU_NEEDS_NETINET_TCP_H_FOR_NODELAY)
	AC_MSG_RESULT(yes)
	;;
  sunos4.* | solaris1.* | solaris2.*)
	AC_MSG_RESULT(no)
	;;
  *)
	AC_MSG_RESULT([don't know; assuming no])
	;;
esac

dnl
dnl check for POSIX characteristics
dnl
AC_CACHE_VAL(ac_cv_ilu_posix_element_missing,
[ac_cv_ilu_posix_element_missing=""
 AC_CHECK_HEADERS(sys/utsname.h,,[ac_cv_ilu_posix_element_missing="yes"])
 AC_CHECK_FUNCS(sigaction read write sleep getpid uname unlink access chmod getgid geteuid getgroups getcwd,,
 [ac_cv_ilu_posix_element_missing="yes"])])
if test "$ac_cv_ilu_posix_element_missing" = ""; then
  AC_MSG_RESULT(the OS has the necessary POSIX system calls)
  AC_DEFINE(_IS_POSIX)
else
  AC_MSG_ERROR(ILU requires a POSIX-compatible OS)
fi

dnl
dnl Check command line options
dnl

AC_MSG_RESULT(*)
AC_MSG_RESULT(*  checking ILU specifics...)
AC_MSG_RESULT(*)

dnl
dnl Set default location for ILU installation
dnl
AC_PREFIX_DEFAULT(/usr/local/ilu)

dnl
dnl **************************************************
dnl
dnl Include debugging (-g on compile, define DEBUG statement)
dnl
AC_MSG_CHECKING(whether to include support for debugging)
AC_ARG_ENABLE(debugging,
[  --enable-debugging          Enable -g on compile and add debugging print statements],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ENABLE_DEBUGGING)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi],
[AC_DEFINE(ENABLE_DEBUGGING)
AC_MSG_RESULT(yes)])


dnl
dnl **************************************************
dnl
dnl What kind of threading, if any?
dnl

AC_MSG_CHECKING(whether to include support for OS threads)
case "$host_os" in
  solaris2.* | sunos5.*)
	THREADING="Solaris2"
	THREADLIBS="-lthread"
	;;
  osf3.2)
	THREADING="POSIX"
	THREADLIBS="-lpthreads"
	;;
  osf3.*)
	THREADING="POSIX"
	THREADLIBS="-lthreads"
	;;
  *)
	THREADING=""
	THREADLIBS=""
	;;
esac

AC_ARG_ENABLE(os-threads,
[  --enable-os-threads         Provide code in the ILU kernel to hook into OS threads],
[if test "$enableval" = "yes"; then
  if test "$THREADING" = "Solaris2"; then
    AC_MSG_RESULT(yes -- Solaris2 threads)
    AC_DEFINE(ILU_SOLARIS2_THREADS)
    LIBS="${LIBS} ${THREADLIBS}"
  elif test "$THREADING" = "POSIX"; then
    AC_MSG_RESULT(yes -- Posix threads)
    AC_DEFINE(ILU_POSIX_THREADS)
    LIBS="${LIBS} ${THREADLIBS}"
  else
    AC_MSG_RESULT([no -- don't know which thread package to use for $host_os])
  fi
elif test "$enableval" = "solaris2"; then
  AC_MSG_RESULT(yes -- Solaris2 threads)
  AC_DEFINE(ILU_SOLARIS2_THREADS)
  LIBS="${LIBS} -lthread"
elif test "$enableval" = "posix"; then
  AC_MSG_RESULT(yes -- Posix threads)
  AC_DEFINE(ILU_POSIX_THREADS)
  LIBS="${LIBS} -lpthread"
elif test "$enableval" = "no"; then
  AC_MSG_RESULT(no)
elif test "$enableval" = ""; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT([no -- don't recognize thread type $enableval])
fi],[if test "$THREADING" = ""; then
  AC_MSG_RESULT(no)
elif test "$THREADING" = "POSIX"; then
  AC_MSG_RESULT([yes -- Posix threads])
  AC_DEFINE(ILU_POSIX_THREADS)
  LIBS="${LIBS} ${THREADLIBS}"
elif test "$THREADING" = "Solaris2"; then
  AC_MSG_RESULT([yes -- Solaris2 threads])
  AC_DEFINE(ILU_SOLARIS2_THREADS)
  LIBS="${LIBS} ${THREADLIBS}"
else
  AC_MSG_RESULT(no)
fi])  

dnl
dnl **************************************************
dnl
dnl Which ILU protocols to include?
dnl

ac_cv_protocols=""
ac_cv_transports=""

AC_MSG_CHECKING(whether to include support for the ILU sunrpc protocol)
AC_ARG_ENABLE(sunrpc-protocol,
[  --enable-sunrpc-protocol    Add ILU version of the Sun RPC v2 protocol],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_SUNRPC_PROTOCOL)
  AC_DEFINE(SUNRPC_PROTOCOL)
  ac_cv_protocols="$ac_cv_protocols sunrpc"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi],
[AC_DEFINE(ADD_SUNRPC_PROTOCOL)
AC_DEFINE(SUNRPC_PROTOCOL)
ac_cv_protocols="$ac_cv_protocols sunrpc"
AC_MSG_RESULT(yes)])

AC_MSG_CHECKING(whether to include support for the Xerox Courier protocol)
AC_ARG_ENABLE(courier-protocol,
[  --enable-courier-protocol   Add Xerox Courier protocol],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_COURIER_PROTOCOL)
  AC_DEFINE(COURIER_PROTOCOL)
  ac_cv_protocols="$ac_cv_protocols courier"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for the World Wide Web HTTP protocol)
AC_ARG_ENABLE(http-protocol,
[  --enable-http-protocol      Add World Wide Web HTTP protocol],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_HTTP_PROTOCOL)
  AC_DEFINE(HTTP_PROTOCOL)
  ac_cv_protocols="$ac_cv_protocols http"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for the CORBA IIOP protocol)
AC_ARG_ENABLE(corba-iiop,
[  --enable-corba-iiop         Add OMG CORBA 2 IIOP protocol & transport, version 1.0],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_IIOP_PROTOCOL)
  AC_DEFINE(IIOP_PROTOCOL)
  ac_cv_protocols="$ac_cv_protocols iiop"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for the W3C HTTP-NG protocol)
AC_ARG_ENABLE(w3ng-protocol,
[  --enable-w3ng-protocol      Add W3C HTTP-NG protocol],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_W3NG_PROTOCOL)
  AC_DEFINE(W3NG_PROTOCOL)
  ac_cv_protocols="$ac_cv_protocols w3ng"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_DEFUN(AC_CHECK_PROTOCOLS,
[if test "$ac_cv_protocols" = ""; then
  AC_DEFINE(ADD_SUNRPC_PROTOCOL)
  AC_DEFINE(SUNRPC_PROTOCOL)
  AC_MSG_RESULT(including support for ILU sunrpc as default protocol)
fi]dnl
undefine([ac_cv_protocols]))

AC_CHECK_PROTOCOLS

dnl
dnl **************************************************
dnl
dnl Which ILU transports to include?
dnl

AC_MSG_CHECKING(whether to include support for the Sun RPC record-marking transport layer)
AC_ARG_ENABLE(sunrpcrm-transport,
[  --enable-sunrpcrm-transport Add Sun RPC record marking transport filter],
[if test "$enableval" = "yes" ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_SUNRPCRM_TRANSPORT)
  AC_DEFINE(SUNRPCRM_TRANSPORT)
else
  AC_MSG_RESULT(no)
fi],
[ AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_SUNRPCRM_TRANSPORT)
  AC_DEFINE(SUNRPCRM_TRANSPORT)
])

AC_MSG_CHECKING(whether to include support for the W3C multiplexing record-marking transport layer)
AC_ARG_ENABLE(w3mux-transport,
[  --enable-w3mux-transport    Add W3C multiplexing record marking transport filter],
[if test "$enableval" = "yes" ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_W3MUX_TRANSPORT)
  AC_DEFINE(W3MUX_TRANSPORT)
else
  AC_MSG_RESULT(no)
fi],[AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for the TCP/IP transport layer)
AC_ARG_ENABLE(tcp-transport,
[  --enable-tcp-transport      Add TCP/IP transport],
[if test "$enableval" = "yes" -a "$ac_cv_ilu_socket_element_missing" = ""; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_TCPSOCKET_TRANSPORT)
  AC_DEFINE(TCPIP_TRANSPORT)
  ac_cv_transports="$ac_cv_transports tcp"
else
  AC_MSG_RESULT(no -- no sockets)
fi],
[if test "$ac_cv_ilu_socket_element_missing" = ""; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_TCPSOCKET_TRANSPORT)
  AC_DEFINE(TCPIP_TRANSPORT)
  ac_cv_transports="$ac_cv_transports tcp"
else
  AC_MSG_RESULT(no -- no sockets)
fi])

AC_MSG_CHECKING(whether to include support for the UDP/IP transport layer)
AC_ARG_ENABLE(udp-transport,
[  --enable-udp-transport      Add UDP/IP transport],
[if test "$enableval" = "yes" -a "$ac_cv_ilu_socket_element_missing" = ""; then
  AC_DEFINE(ADD_UDPSOCKET_TRANSPORT)
  AC_DEFINE(UDPSOCKET_TRANSPORT)
  ac_cv_transports="$ac_cv_transports udp"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for the XNS SPP transport layer)
AC_ARG_ENABLE(xnsspp-transport,
[  --enable-xns-transport      Add XNS/SPP transport],
[if test "$enableval" = "yes"; then
  AC_DEFINE(ADD_XNSSPP_TRANSPORT)
  AC_DEFINE(XNSSPP_TRANSPORT)
  ac_cv_transports="$ac_cv_transports udp"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_DEFUN(AC_CHECK_TRANSPORTS,
[if test "$ac_cv_transports" = "" -a "$ac_cv_ilu_socket_element_missing" = ""; then
  AC_DEFINE(ADD_TCP_TRANSPORT)
  AC_DEFINE(TCPIP_TRANSPORT)
  AC_MSG_RESULT(including support for TCP/IP as default transport)
fi] dnl
undefine([ac_cv_transports]))

AC_CHECK_TRANSPORTS

dnl
dnl **************************************************
dnl
dnl Which languages to include?
dnl

AC_MSG_CHECKING(whether to include support for use of ILU with ANSI C)
AC_ARG_ENABLE(c-support,
[  --enable-c-support          Include support for ANSI C],
[if test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ADD_C_LANGUAGE)
  AC_MSG_RESULT(yes)
fi],
[AC_MSG_RESULT(yes)
 AC_DEFINE(ADD_C_LANGUAGE)
])

AC_MSG_CHECKING(whether to include support for use of ILU with C++)
AC_ARG_ENABLE(cplusplus-support,
[  --enable-cplusplus-support  Include support for C++],
[if test "$enableval" = yes; then
  AC_DEFINE(ADD_CPLUSPLUS_LANGUAGE)
  AC_MSG_RESULT(yes)
  AC_PATH_PROGS(CXX, $CCC CC cxx c++ g++, "")
elif test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ADD_CPLUSPLUS_LANGUAGE)
  AC_MSG_RESULT([$enableval])
  CXX="$enableval"
fi],
[AC_MSG_RESULT(maybe)
AC_PATH_PROGS(CXX, $CCC CC c++ g++, "")
if test "$CXX" != ""; then
  AC_DEFINE(ADD_CPLUSPLUS_LANGUAGE)
fi])

AC_MSG_CHECKING(whether to include support for use of ILU with Modula-3)
AC_ARG_ENABLE(modula3-support,
[  --enable-modula3-support    Include support for Modula-3],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_PATH_PROGS(M3, $M3 m3, "")
  if test "$M3" = ""; then
    AC_MSG_ERROR(*** Modula-3 compiler not found.  Use --with-modula3=M3-COMMAND.)
  else
    AC_DEFINE(ADD_MODULA3_LANGUAGE)
  fi
elif test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ADD_MODULA3_LANGUAGE)
  M3_COMMAND="$enableval"
  AC_MSG_RESULT($M3)
fi],[AC_MSG_RESULT(no)])

AC_SUBST(M3_COMPILER)
if test "$M3_COMMAND" != ""; then
  AC_MSG_CHECKING(proper value for M3_COMPILER)
  M3_COMPILER="$M3_COMMAND -Y2@`echo $CC | sed -e 's; ;@;g'`@"
  AC_MSG_RESULT($M3_COMPILER)
fi

AC_MSG_CHECKING(whether to include support for use of ILU with Java)
AC_SUBST(JAVAHOME)
AC_ARG_ENABLE(java-support,
[  --enable-java-support       Include support for Java],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_PATH_PROG(JAVA, java, "")
  if test "$JAVA" = ""; then
    AC_MSG_ERROR(*** Java home directory not discernible.  Use --enable-java-support=JAVAHOME.)
  else
    AC_DEFINE(ADD_JAVA_LANGUAGE)
    AC_MSG_CHECKING(proper value for Java executable directory)
    JAVAHOME=`echo $JAVA | sed -e 's;/bin/java$;;'`
    AC_MSG_RESULT($JAVAHOME)
  fi
elif test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ADD_JAVA_LANGUAGE)
  AC_MSG_RESULT([$enableval])
  JAVAHOME="$enableval"
fi],
[AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for use of ILU with Python)
AC_SUBST(PYTHONHOME)
AC_ARG_ENABLE(python-support,
[  --enable-python-support     Include support for Python],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_PATH_PROG(PYTHON, python, "")
  if test "$PYTHON" = ""; then
    AC_MSG_ERROR(*** Python home directory not discernible.  Use --with-python=PYTHONHOME.)
  else
    AC_DEFINE(ADD_PYTHON_LANGUAGE)
    AC_MSG_CHECKING(proper value for PYTHON_EXEC_PREFIX)
    PYTHONHOME=`echo $PYTHON | sed -e 's;/bin/python$;;'`
    AC_MSG_RESULT($PYTHONHOME)
  fi
elif test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_DEFINE(ADD_PYTHON_LANGUAGE)
  AC_MSG_RESULT([$enableval])
  PYTHONHOME="$enableval"
fi],
[AC_MSG_RESULT(maybe)
AC_PATH_PROG(PYTHON, python, "")
if test "$PYTHON" != ""; then
  AC_DEFINE(ADD_PYTHON_LANGUAGE)
  AC_MSG_CHECKING(proper value for PYTHON_EXEC_PREFIX)
  PYTHONHOME=`echo $PYTHON | sed -e 's;/bin/python$;;'`
  AC_MSG_RESULT($PYTHONHOME)
fi])
if test "x$PYTHONHOME" != "x"; then
  AC_SUBST(PYTHON_PREFIX)
  AC_MSG_CHECKING(whether Python libraries are installed)
  if test -f "${PYTHONHOME}/lib/python/lib/libPython.a" ; then
    AC_DEFINE(PYTHON_LIBRARIES_INSTALLED)
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
  AC_MSG_CHECKING(Python version)
  PYTHONMAJORVERSION=[`$PYTHONHOME/bin/python -c "import sys; import string; print string.splitfields(string.split(sys.version)[0], '.')[0]"`]
  PYTHONMINORVERSION=[`$PYTHONHOME/bin/python -c "import sys; import string; print string.splitfields(string.split(sys.version)[0], '.')[1]"`]
  AC_MSG_RESULT([$PYTHONMAJORVERSION . $PYTHONMINORVERSION])
  AC_DEFINE_UNQUOTED(PYTHON_MAJOR_VERSION, $PYTHONMAJORVERSION)
  AC_DEFINE_UNQUOTED(PYTHON_MINOR_VERSION, $PYTHONMINORVERSION)
  AC_MSG_CHECKING(proper value for PYTHON_PREFIX)
  PYTHON_PREFIX=`$PYTHONHOME/bin/python <./figpythonprefix`
  AC_MSG_RESULT($PYTHON_PREFIX)
  AC_MSG_CHECKING(whether Python supports threads)
  PYTHON_THREADED=[`$PYTHONHOME/bin/python <./ispythonthreaded`]
  if test "$PYTHON_THREADED" = "0"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)
    AC_DEFINE(ILU_PYTHON_HAS_THREADS)
  fi
fi

AC_MSG_CHECKING(whether to include support for use of ILU with Common Lisp)
AC_SUBST(LISP_BATCH_COMMAND)
AC_SUBST(LISP_BIN_EXT)
AC_SUBST(LISP_C_BIN_EXT)
AC_ARG_ENABLE(lisp-support,
[  --enable-lisp-support       Include support for Common Lisp],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_PATH_PROGS(FRANZ, franz cl, "")
  if test "$FRANZ" = ""; then
    AC_MSG_ERROR(*** Franz Allegro Common Lisp not found.  Use --with-lisp=FRANZ-COMMAND.)
  else
    LISP_BATCH_COMMAND="$FRANZ -qq -batch"
  fi
elif test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
    AC_MSG_RESULT("$enableval")
    LISP_BATCH_COMMAND="$enableval -qq -batch"
fi],[AC_MSG_RESULT(no)])

if test "$LISP_BATCH_COMMAND" != ""; then
    AC_DEFINE(ADD_COMMONLISP_LANGUAGE)
    AC_MSG_CHECKING(file extensions for compiled lisp and object files)
    AC_CACHE_VAL(ac_cv_lisp_bin_ext,
      [$FRANZ -qq -batch <./figlispext.lsp >/dev/null
       ac_cv_lisp_bin_ext=`cat conftestlispext`
       ac_cv_lisp_c_bin_ext=`cat conftestlispcext`])
    AC_CACHE_VAL(ac_cv_lisp_c_bin_ext,
      [$FRANZ -qq -batch <./figlispext.lsp >/dev/null
       ac_cv_lisp_c_bin_ext=`cat conftestlispcext`])
    AC_MSG_RESULT(\"$ac_cv_lisp_bin_ext\" and \"$ac_cv_lisp_c_bin_ext\")
    LISP_BIN_EXT="$ac_cv_lisp_bin_ext"
    LISP_C_BIN_EXT="$ac_cv_lisp_c_bin_ext"
fi

dnl
dnl **************************************************
dnl
dnl Security mechanisms and Authentication protocols
dnl

AC_MSG_CHECKING(whether to include support for the security transport)
AC_SUBST(GSS_LIBRARIES)
AC_SUBST(GSS_INCLUDE_DIR)
secure_transport="no"
AC_ARG_ENABLE(security,
[  --enable-security           Add security transport filter],
[if test "$enableval" = "yes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_SECURE_TRANSPORT)
  AC_DEFINE(SECURE_TRANSPORT)
  GSS_LIBRARIES="`pwd`/../GSS/kernel/libgss.a"
  GSS_INCLUDE_DIR="`pwd`/../GSS/kernel"
  AC_DEFINE(USING_ILUGSS)
  secure_transport="yes"
elif test "$enableval" = "no"; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT([yes -- GSS libs in $enableval])
  AC_DEFINE(ADD_SECURE_TRANSPORT)
  AC_DEFINE(SECURE_TRANSPORT)
  GSS_LIBRARIES="$enableval"
  GSS_INCLUDE_DIR=[`echo ${enableval} | sed -e 's;/[^/]*$;;'`]
  secure_transport="yes"
fi],[AC_MSG_RESULT(no)])

if test "$secure_transport" = "yes"; then
  ssl_sechmech="no"
  AC_MSG_CHECKING(whether to include support for the SSL security protocols)
  AC_ARG_ENABLE(ssl-security,
  [  --enable-ssl-security       Add SSL security mechanism],
  [if test "$enableval" = "yes"; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(INCLUDE_SSL_SECMECH)
    AC_SUBST(RSAREF_DIR)
    AC_SUBST(RSAREF_LIB)
    AC_SUBST(LIBDES_INCL_DIR)
    AC_SUBST(LIBDES_LIB)
    echo -n "*** Where is RSAREF 2.0 installed?  "
    read RSAREF_DIR
    echo -n "*** What is the full path name for the RSAREF 2.0 library, rsaref.a?  "
    read RSAREF_LIB
    AC_MSG_RESULT([RSA includes in $RSAREF_DIR, library is $RSAREF_LIB])
    echo -n "*** Where are the include files for libdes 3.0 installed?  "
    read LIBDES_INCL_DIR
    echo -n "*** What is the full path name for the libdes 3.0 library, libdes.a?  "
    read LIBDES_LIB
    AC_MSG_RESULT([LIBDES includes in $LIBDES_INCL_DIR, library is $LIBDES_LIB])
    ssl_sechmech="yes"
  else
    AC_MSG_RESULT(no)
  fi],[AC_MSG_RESULT(no)])

fi

dnl
dnl **************************************************
dnl
dnl Include support for OMG IDL?
dnl

AC_MSG_CHECKING(whether to include support for use of OMG IDL with ILU)
AC_SUBST(IDL_CFE_OSV)
AC_ARG_ENABLE(omg-idl-support,
[  --enable-omg-idl-support    Include support for using OMG IDL with ILU],
[if test "$enableval" = no; then
  AC_MSG_RESULT(no)
elif test "$CXX" = ""; then
  AC_MSG_RESULT(no -- no C++ compiler)
elif test "$enableval" = yes; then
  case "$host_os" in
    sunos4*) IDL_CFE_OSV="SUNOS4" ;;
    solaris2* | linux1.2.* | linux1.3.* | linux2.* | sysv4.* ) IDL_CFE_OSV="SOLARIS2" ;;
    hpux*) IDL_CFE_OSV="hpux" ;;
    apollo*) IDL_CFE_OSV="apollo" ;;
    *) IDL_CFE_OSV="" ;;
  esac
  if test "$IDL_CFE_OSV" = ""; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN(*** Sorry: IDL support hasn't been ported to $host_os yet.)
  else
    AC_DEFINE(ADD_IDL_SUPPORT)
    AC_MSG_RESULT(yes: OSV is $IDL_CFE_OSV)
  fi
else
  IDL_CFE_OSV="$enableval"
  AC_DEFINE(ADD_IDL_SUPPORT)
  AC_MSG_RESULT(yes: OSV is $IDL_CFE_OSV)
fi], [AC_MSG_RESULT(no)])

AC_SUBST(IDL_CPP_COMMAND)
if test "$IDL_CFE_OSV" != ""; then
  IDL_CPP_COMMAND=`echo $CXX | sed -e 's/ .*$//'`
fi

dnl
dnl **************************************************
dnl
dnl UI toolkit support (for their main loops)
dnl

AC_MSG_CHECKING(whether to include support for XView)
AC_SUBST(XVIEW_INCLUDES)
AC_ARG_ENABLE(xview-support,
[  --enable-xview-support      Include support for the XView GUI toolkit],
[if test "$enableval" = no; then
  AC_MSG_RESULT(no)
elif test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_PATH_X
  if test "$x_includes" = "NONE"; then
    AC_MSG_ERROR(*** Can't find X include files.  Must specify their location using --with-x=INCLUDEPATH.)
  else
    AC_DEFINE(ADD_XVIEW_SUPPORT)
    XVIEW_INCLUDES="-I$x_includes"
  fi
else
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_XVIEW_SUPPORT)
  XVIEW_INCLUDES="$enableval"
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for Tk)
AC_SUBST(TK_INCLUDES)
AC_ARG_ENABLE(tk-support,
[  --enable-tk-support         Include support for the Tk GUI toolkit],
[if test "$enableval" = no; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  if test "$x_includes" = "NONE"; then
    AC_PATH_X
  fi
  if test "$x_includes" = "NONE"; then
    AC_MSG_ERROR(*** Can't find X include files.  Must specify their location using --with-x=INCLUDEPATH.)
  else
    AC_DEFINE(ADD_TK_SUPPORT)
    echo -n "*** Where are the Tk include files?  "
    read TK_INCLUDE_1
    echo -n "*** Where are the Tcl include files?  "
    read TK_INCLUDE_2
    TK_INCLUDES="-I$x_includes -I$TK_INCLUDE_1 -I$TK_INCLUDE_2"
    AC_MSG_RESULT([tk includes are $TK_INCLUDES])
  fi
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether to include support for Xt)
AC_SUBST(XT_INCLUDES)
AC_ARG_ENABLE(xt-support,
[  --enable-xt-support         Include support for the Xt GUI toolkit],
[if test "$enableval" = no; then
  AC_MSG_RESULT(no)
elif test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  if test "$x_includes" = "NONE"; then
    AC_PATH_X
  fi
  if test "$x_includes" = "NONE"; then
    AC_MSG_ERROR(*** Can't find X include files.  Must specify their location using --with-x=INCLUDEPATH.)
  else
    AC_DEFINE(ADD_XT_SUPPORT)
    XT_INCLUDES="-I$x_includes -I$x_includes/X11"
  fi
else
  AC_MSG_RESULT(yes)
  AC_DEFINE(ADD_XT_SUPPORT)
  XT_INCLUDES="$enableval"
fi], [AC_MSG_RESULT(no)])

dnl
dnl **************************************************
dnl 
dnl Where to put things
dnl

if test "x$prefix" = xNONE; then
  if test "$ac_default_prefix" != "" ; then
    prefix="$ac_default_prefix"
  fi
fi

AC_SUBST(ILUHOME)
AC_MSG_CHECKING(value of ILUHOME)
AC_ARG_WITH(iluhome,
[  --with-iluhome=PATH         Specify PATH to root of ILU installation],
[if test "$withval" = no; then
  AC_MSG_ERROR(Either a specified or default ($prefix) ILUHOME value must be provided.)
elif test "$withval" = yes; then
  AC_MSG_ERROR(Usage:  ./configure --with-iluhome=PATH)
else
  ILUHOME="$withval"
fi],
[ILUHOME="$prefix"])
AC_DEFINE_UNQUOTED(ILUHOME, "$ILUHOME")
AC_MSG_RESULT($ILUHOME)

AC_SUBST(DESTDIR)
AC_MSG_CHECKING(value of DESTDIR)
AC_ARG_WITH(destdir,
[  --with-destdir=PATH         Specify PATH to install ILU in],
[if test "$withval" = no; then
  AC_MSG_ERROR(Either a specified or default ($prefix) DESTDIR value must be provided.)
elif test "$withval" = yes; then
  AC_MSG_ERROR(Usage:  ./configure --with-destdir=PATH)
else
  DESTDIR="$withval"
fi],
[DESTDIR="$prefix"])
AC_MSG_RESULT($DESTDIR)

AC_SUBST(BINDINGDIR)
AC_MSG_CHECKING(whether to use shared files for simple binding)
AC_ARG_WITH(binding-dir,
[  --with-binding-dir=PATH     Specify PATH for use as ILU simple binding directory],
[if test "$withval" = no; then
  AC_MSG_RESULT(no)
elif test "$withval" = yes; then
  AC_MSG_ERROR(Usage:  ./configure --with-binding-dir=PATH)
else
  BINDINGDIR="$withval"
fi], [AC_MSG_RESULT(no)])

if test "$BINDINGDIR" != "" ; then
  AC_DEFINE_UNQUOTED(ILU_BINDING_DIRECTORY, "$BINDINGDIR")
  AC_MSG_RESULT([yes, in $BINDINGDIR])
fi

AC_MSG_CHECKING(whether to use ILU service for simple binding)
AC_ARG_WITH(binding-server,
[  --with-binding-server=D:H:P Specify HOST and PORT for binding server (e.g. foo.bar.edu:123.4.92.68:10003)],
[if test "$withval" = no; then
  AC_MSG_RESULT(no)
elif test "$withval" = yes; then
  AC_MSG_ERROR(Usage:  ./configure --with-binding-server=HOST:PORT)
else
  BINDINGREALMHOSTPORT="$withval"
fi], [AC_MSG_RESULT(no)])

if test "$BINDINGREALMHOSTPORT" != ""; then
  BINDINGREALM=`echo "$BINDINGREALMHOSTPORT" | sed -e 's/:.*$//'`
  BINDINGHOST=`echo "$BINDINGREALMHOSTPORT" | sed -e 's/.*:\([[^:]]*\):.*/\1/'`
  BINDINGPORT=`echo "$BINDINGREALMHOSTPORT" | sed -e 's/.*:.*://'`
  AC_DEFINE_UNQUOTED(ILU_BINDING_REALM, "$BINDINGREALM")
  AC_DEFINE_UNQUOTED(ILU_BINDING_HOST, "$BINDINGHOST")
  AC_DEFINE_UNQUOTED(ILU_BINDING_PORT, $BINDINGPORT)
  AC_MSG_RESULT([yes, for binding realm $BINDINGREALM, on host $BINDINGHOST, port $BINDINGPORT])
fi

BINDINGREALMHOSTPORT=""
AC_SUBST(MULTICAST_INCLUDES)
AC_MSG_CHECKING(whether to use multicast for simple binding)
AC_ARG_WITH(binding-multicast,
[  --with-binding-multicast=IPADDR:PORT Specify IPADDR and PORT for multicast (e.g. 238.4.92.68:10003)],
[if test "$withval" = no; then
  AC_MSG_RESULT(no)
elif test "$withval" = yes; then
  AC_MSG_ERROR(Usage:  ./configure --with-binding-multicast=IPADDR:PORT)
else
  AC_DEFINE_UNQUOTED(ILU_BINDING_MCASTADDR, "$withval")
  AC_MSG_RESULT([yes, at $withval])
  echo -n "*** Where are the multicast include files?  "
  read MULTICAST_INCLUDES_1
  MULTICAST_INCLUDES="-I$MULTICAST_INCLUDES_1"
  echo "Multicast includes at $MULTICAST_INCLUDES"
fi], [AC_MSG_RESULT(no)])

if test "$MULTICAST_INCLUDES" = "" -a "$BINDINGDIR" = "" -a "$BINDINGHOST" = ""; then
  BINDINGDIR="${ILUHOME}/lib/binding"
  AC_DEFINE_UNQUOTED(ILU_BINDING_DIRECTORY, "$BINDINGDIR")
  AC_MSG_RESULT([Using shared files in $BINDINGDIR for simple binding, by default.])
fi

dnl
dnl Build output files
dnl
dnl   ilugss_conf.h, iluconf.h, and iluchoices are automatically added to this
dnl   list, as a result of the earlier AC_HEADER call
dnl
AC_OUTPUT(iludefs topmake ssllocations.cfg)

dnl
dnl Move iluconf.h to runtime/kernel
dnl

rm -f ../runtime/kernel/iluconf.h
cp ./iluconf.h ../runtime/kernel/iluconf.h
chmod 444 ../runtime/kernel/iluconf.h

dnl
dnl Move ilugss_conf.h to GSS/kernel/ilugss_conf.h
dnl

if test "$secure_transport" = "yes"; then
  rm -f ../GSS/kernel/ilugss_conf.h
  cp ./ilugss_conf.h ../GSS/kernel/ilugss_conf.h
  chmod 444 ../GSS/kernel/ilugss_conf.h
  if test -f ../GSS/kernel/makefile ; then
    mv ../GSS/kernel/makefile ../GSS/kernel/makefile.unused
  fi
  if test -d ../GSS/ssl/ -a "$ssl_secmech" = "yes" ; then
    rm -f ../GSS/ssl/locations.cfg
    cp ssllocations.cfg ../GSS/ssl/locations.cfg
    chmod 444 ../GSS/ssl/locations.cfg
  fi
fi

dnl
dnl Now concatenate the output files to build ilu.defs.new
dnl

AC_MSG_RESULT(creating ilu.defs.new...)
rm -f ilu.defs.new
cat iluchoices iludefs >ilu.defs.new
chmod 444 ilu.defs.new
rm -f iluchoices iludefs

dnl
dnl Now build the top-level makefile
dnl

AC_MSG_RESULT(creating top-level Makefile...)
if test -f ../BootstrapMakefile ; then
  rm -f ../BootstrapMakefile
fi
cat ./topmake >../BootstrapMakefile
