@c Copyright (C) 1988, 1996 Free Software Foundation, Inc.
@c This is part of the GPC manual.
@c For copying conditions, see the file gpc.texi.
@c
@c Written by J.J. van der Heijden <j.j.vanderheijden@student.utwente.nl>
@c Last modified: Mon Sep 30 12:09:52 1996
@c
@c The text of this file appears in the file INSTALL
@c in the GPC distribution, as well as in the GPC manual.

@c -------------------------------------------------------------------------

@ifclear INSTALLONLY
@node Installation
@chapter Installing GNU Pascal
@cindex installing GNU Pascal
@end ifclear

@ifset INSTALLONLY
@settitle GNU Pascal Installation Guide
@node Top
@chapter Installing GNU Pascal
@end ifset

@iftex
This chapter covers:
@itemize @bullet
@item Compilation of the source distribution on a UNIX system
@item Configuration dependent compilation notes
@item Building and installing a cross-compiler
@item Installation instructions for a GPC binary distribution
@end itemize
@end iftex

@menu
* compilation notes::	Configuration dependent compilation notes
* crosscompilers::	Building and Installing a crosscompiler
* binary distributions::	Installation instructions for a GPC binary distribution
@end menu

The preferred way to distribute GNU software is distribution of the
source code. However, it can be a non-trivial exercise to build GNU Pascal
on some non-UNIX systems, so we also provide ready-to-run binaries for a number
of platforms. @xref{binary distributions} how to install a binary distribution.

GPC is based on GNU CC; you will need the GCC sources to build it. It must be
the same version as the one GPC is implemented with. Although you need GCC to
build the GNU Pascal compiler, you don't need GCC to compile Pascal programs
once GNU Pascal is installed. Because GNU Pascal shares its backend with
GNU CC, it should run on any system supported by GNU CC. A full list of
platforms supported by GNU CC can be found in chapter 4 of the GCC manual,
``Using and Porting GNU CC''

@c -------------------------------------------------------------------------

Here is the generic procedure for installing GNU Pascal on a Unix system.
@xref{compilation notes} for extra information needed to install GPC on certain platforms.

@enumerate
@item Unpack the source distributions.

Sources for GNU CC and GNU Pascal must be unpacked in separate directories.
Do not move GNU Pascal files into the GNU C source directory.
It is possible, though not required, to build the compiler(s) in a directory
other than the one containing the sources. In either case, you need a
@file{make} that understands the VPATH variable. GNU make does, although at
least GNU make version 3.71 has a bug in the way it treats VPATH.
GNU make version 3.74 is known to work.

If you have built GNU Pascal previously in the same directory for a
different target machine, do @samp{make distclean} to delete all files
that might be invalid.  One of the files this deletes is
@file{Makefile}; if @samp{make distclean} complains that @file{Makefile}
does not exist, it probably means that the directory is already suitably
clean.

@item Configuring and building GNU CC
GNU Pascal shares its configuration with GNU CC. The configuration options you
select for GCC, apply for GNU Pascal too. Configuration of GNU CC is treated in
depth in Chapter 4 of ``Using and Porting GNU CC''

Chdir to the GCC object directory. Usually,

@smallexample
% ../gcc-2.7.2.1/configure --prefix=/usr
@end smallexample

will do the job. This creates all the necessary config files, links and
Makefile in the GCC object directory.

@item
The standard directory for installing GNU CC and GNU Pascal is
@file{/usr/local/lib}. If you want to install its files somewhere else,
specify @samp{--prefix=@var{dir}} when you run @file{configure}. 
Here @var{dir} is a directory name to use instead of @file{/usr/local} for
all purposes with one exception: the directory @file{/usr/local/include} 
is searched for header files no matter where you install the compiler.
To override this name, use the @code{--local-prefix} option below.

@item
Specify @samp{--local-prefix=@var{dir}} if you want the compiler to
search directory @file{@var{dir}/include} for locally installed header
files @emph{instead} of @file{/usr/local/include}.

You should specify @samp{--local-prefix} @strong{only} if your site has
a different convention (not @file{/usr/local}) for where to put
site-specific files.

@strong{Do not} specify @file{/usr} as the @samp{--local-prefix}!  The
directory you use for @samp{--local-prefix} @strong{must not} contain
any of the system's standard header files.  If it did contain them,
certain programs would be miscompiled (including GNU Emacs, on certain
targets), because this would override and nullify the header file
corrections made by the @code{fixincludes} script.

@cindex Bison parser generator
@cindex parser generator, Bison
@item
Make sure the Bison parser generator is installed.  (This is
unnecessary if the Bison output files @file{c-parse.c} and
@file{cexp.c} are more recent than @file{c-parse.y} and @file{cexp.y}
and you do not plan to change the @samp{.y} files.)

Bison versions older than Sept 8, 1988 will produce incorrect output
for @file{c-parse.c}.

@item
If you have chosen a configuration for GNU Pascal which requires other GNU
tools (such as GAS or the GNU linker) instead of the standard system
tools, install the required tools in the build directory under the names
@file{as}, @file{ld} or whatever is appropriate.  This will enable the
compiler to find the proper tools for compilation of the program
@file{enquire}.

Alternatively, you can do subsequent compilation using a value of the
@code{PATH} environment variable such that the necessary GNU tools come
before the standard system tools.
@item
Build the C compiler:

@smallexample
% make LANGUAGES=c
@end smallexample

(Just @samp{make} would also build the C++ and Objective C compilers).
You do not need to install the compiler you just built, but leave the
objects in place, since GPC will directly load most of the GCC object files.

@item Configuring and building GNU Pascal for your system.
Normally, you just @samp{cd} to the directory containing the source code and
type @samp{./configure}.  If you're using @file{csh} on an old version of
System V, you might need to type @samp{sh configure} instead to prevent
@file{csh} from trying to execute @file{configure} itself (under AIX, you
may need to use ksh instead of sh).

To compile the GNU Pascal in a different directory from the one
containing the source code, @samp{cd} to the directory where you want the
object files and executables to go and run the @file{configure} script.
@file{configure} automatically checks for the source code in the directory
that @file{configure} is in. If for some reason @file{configure} is not able
to find the source directory, rerun @file{configure} with the option
@samp{--srcdir=@var{dir}}, where @var{dir} is the directory that contains
the source code.

Note that the gpc @file{configure} script does not accept most of the
switches usually given to a @file{configure} script because it extracts
this information from the GCC configuration files.
Run @samp{configure --help} to see the options supported by @file{configure}.

Running @file{configure} takes a while.  While it is running, it
prints some messages that tell what it is doing.  If you don't want to
see any messages, run @file{configure} with its standard output redirected
to /dev/null; for example, @samp{./configure >/dev/null}.

If @file{configure} is unable to locate GNU CC sources or object code, it
will print an error message and exit. In that case, run @file{configure}
again with @samp{--with-gccsrc=@var{dir}} and / or 
@samp{--with-gccbin=@var{dir}} arguments.

When it is finished, @file{configure} prints a short summary of the
information it has collected.

@example
--------------------------------------------------------------------------
Configuration summary:
  Building a native i486-linux compiler

  GPC sources in:         .
  GCC sources in:         ../gcc-2.7.2.1
  GCC object code in:     ../gcc-2.7.2.1
  GCC version:            2.7.2.1

  Compiler for GPC:       gcc
  Compiler for libgpc.a:  gcc
  Compiler flags:         -g -O

  Installation path:      /usr/bin, /usr/lib/gcc-lib/i486-linux/2.7.2.1
--------------------------------------------------------------------------

Now, type @samp{make} to build the compiler and runtime system.
@end example

@item Building the compiler.
Once you are satisfied with the configuration as determined
by @file{configure}, you can build the compiler:

@smallexample
% make
@end smallexample

Optionally, you may supply CFLAGS, LDFLAGS or RTSFLAGS. CFLAGS is used for
compiler and RTS, RTSFLAGS are for RTS only, i.e.:
@samp{make CFLAGS="-O2" RTSFLAGS=-Wall}

@item
When everything compiles, you can verify what the  @code{make -n install}
command does, and if you are satisfied run it without the @code{-n} option
to install the compiler (gpc1), front end (gpc), run time system (libgpc.a)
to the same place where gcc was installed.

It is sort of stupid to have a separate incarnation of @file{gcc.c}; the
difference now is that @samp{gpc} also searches from library @file{libgpc.a}
and @file{-lm}. In addition @file{gcc.c} specifies the interface to the
Pascal compiler (gpc1). This command will vanish when @samp{gcc} knows how to
compile Pascal programs.

@end enumerate

@node compilation notes
@section Configuration dependent compilation notes
@cindex configuration dependent compilation notes
@menu
* Alpha OSF/1::     Installation on an Alpha OSF/1 system
* DOS: DJGPP.       The DJGPP port of GNU compilers to MS-DOS
* DOS, OS/2: EMX.   The EMX port of GNU compilers to MS-DOS and OS/2
* Win32::           Installation on a Windows 95/NT system
@end menu

@c -------------------------------------------------------------------------

@node Alpha OSF/1
@subsection Alpha OSF/1
@cindex Alpha OSF/1
For alpha OSF/1 v3.2 (GCC 2.6.3): If your linker starts to output
error messages like:

@smallexample
Warning: Linking some objects which contain exception information sections
    and some which do not. This may cause fatal runtime exception handling
    problems (last obj encountered without exceptions was <OBJ/LIB>)
@end smallexample

I do not know why these started to appear, but you can get rid of these if
you do as follows in the GPC object directory.

You need to trigger the Makefile dependencies, e.g. by doing the touch
command below. What happens is that it re-generates the version.c and
rts/version.c files, which need to be recompiled with @code{ALPHA_BUG}
defined.

Example:
@smallexample
% touch Makefile
% make MY_CFLAGS=-DALPHA_BUG other-make-flags-you-want-to-use
@end smallexample

@c -------------------------------------------------------------------------

@node DJGPP
@subsection MS-DOS with DJGPP
@cindex djgpp
@cindex MS-DOS

You cannot build GNU CC (or GNU Pascal) by itself on MS-DOS; it will not
compile under any MS-DOS compiler except itself. The official MS-DOS port 
of GCC is called djgpp, and it is available from @samp{simtel.coast.net} 
and it has mirrors all over the world. The @samp{configure} script is 
replaced by an MS-DOS batch file called @samp{configure.bat} wich does 
essentially the same. Detailed instructions are in the file
@file{config/msdos/README.dj} of the GNU Pascal source distribution.

@c -------------------------------------------------------------------------

@node EMX
@subsection MS-DOS or OS/2 with EMX
@cindex EMX
@cindex MS-DOS
@cindex OS/2

EMX is a FreeWare 32-bit DOS extender which adds some properties of 
UNIX to the DOS and OS/2 operating systems written by Eberhard Mattes.
You can find it, for example, via anonymous @samp{ftp} on the server
@samp{ftp.uni-stuttgart.de} in the directory @samp{pub/systems/os2/emx*}.

The EMX extender for DOS and OS/2 makes it relatively easy to port GNU 
tools---such as the GNU Pascal Compiler---to these platforms.  However, 
it is not straightforward to compile it.

@enumerate 0
@item 
I assume you have the EMX package installed with GNU
development tools and the @code{dmake} make utility.
You have compiled GNU C such that the object files are
still in place.  It is important that GNU C is the version
matching ot GNU Pascal which is currently 2.7.2.1.

If you have problems compiling GNU C:  The directory
@samp{config/emx} contains drive-independent versions
of @samp{dostage1.cmd} and @samp{makeexe.cmd}.

If you are running DOS, you are in trouble now because
the DOS command line is limited to 128 characters.  If you
succeed to compile GPC for EMX on a DOS system, please let
us know.  (However you can compile GPC for DJGPP on a DOS
system.)

@item 
Unzip the source for GPC from the emx directory, so it will
go into the gnu subdirectory.  Unlike other EMX sources, the
GPC source must *not* be extracted from the root directory.
@smallexample
  cd \emx
  pkunzip -d c:\gpc-2721
@end smallexample

@item
Configure and make your GNU Pascal compiler and runtime system.  You
need not call @samp{dmake} directly; call @samp{make.cmd}, instead.
@smallexample
  configur
  make
@end smallexample

@item
To install, type
@smallexample
  make install
@end smallexample

@end enumerate

@c -------------------------------------------------------------------------

@node Win32
@subsection Windows NT and Windows 95 with cygwin32
@cindex Win32
@cindex Windows NT
@cindex Windows 95

cygwin32 is a project to make it easy to port Unix applications to
machines which run an OS which supports the Win32 API - ie Windows 95 and
Windows NT. Currently, cygwin32 is in beta stage; it is available from
@file{ftp://ftp.cygnus.com/pub/gnu-win32/}
Don't use gcc sources from the cygwin32 distribution. These are not
just modified from FSF gcc-2.7.2 to support the win32 target, they
are the ``current development release'', and too different from FSF gcc
to be compatible with GNU Pascal, which is based on FSF sources.

Instead, apply @file{config/cygwin32/gcc-2.7.2.cygwin32-beta16.diff} to FSF
gcc-2.7.2 to add cygwin32 platform support to gcc.
The GNU pascal sources already have the cygwin32 support, so no further
patching of gpc is needed

Currently, cygwin32 is not self-hosting: the preferred way to build the
cygwin32-gpc binary is to use a unix system with a cygwin32 targeting
crosscompiler. @xref{Crossbuilding}

GNU Pascal does not yet fully support the stack calling convention of the
Win32 API, thus making it impossible to access system DLL's.

@c -------------------------------------------------------------------------

@node crosscompilers
@section Building and Installing a crosscompiler
@cindex cross-compilers

GNU Pascal can function as a cross-compiler for many machines, but not all.
Also, only a few combinations have been tested. If you need information
about GNU tools in a cross-configuration, 
@samp{ftp://ftp.cygnus.com/pub/embedded/crossgcc/} is the place to be.

@itemize @bullet
@item
Cross-compilers for the Mips as target using the Mips assembler
currently do not work, because the auxiliary programs
@file{mips-tdump.c} and @file{mips-tfile.c} can't be compiled on
anything but a Mips.  It does work to cross compile for a Mips
if you use the GNU assembler and linker.

@item
Cross-compilers between machines with different floating point formats
have not all been made to work.  GNU C now has a floating point
emulator with which these can work, but each target machine description
needs to be updated to take advantage of it.

@item 
Cross-compilation between machines of different word sizes is
somewhat problematic and sometimes does not work.
@end itemize

Since GNU Pascal generates assembler code, you probably need a
cross-assembler that GNU Pascal can run, in order to produce object files.
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.

@menu
* Steps of Cross::      Using a cross-compiler involves several steps
                        that may be carried out on different machines.
* Configure Cross::     Configuring a cross-compiler.
* Build Cross::         Actually building a Pascal cross-compiler.
* Crossbuilding::	Crossbuilding a Pascal compiler.
@end menu

@c -------------------------------------------------------------------------

@node Steps of Cross
@subsection Steps of Cross-Compilation

To compile and run a program using a cross-compiler involves several
steps:

@itemize @bullet
@item
Run the cross-compiler on the host machine to produce assembler files
for the target machine.  This requires header files for the target
machine.

@item
Assemble the files produced by the cross-compiler.  You can do this
either with an assembler on the target machine, or with a
cross-assembler on the host machine.

@item
Link those files to make an executable.  You can do this either with a
linker on the target machine, or with a cross-linker on the host
machine.  Whichever machine you use, you need libraries and certain
startup files (typically @file{crt@dots{}.o}) for the target machine.
@end itemize

It is most convenient to do all of these steps on the same host machine,
since then you can do it all with a single invocation of GNU Pascal.  This
requires a suitable cross-assembler and cross-linker.  For some targets,
the GNU assembler and linker are available.

@c -------------------------------------------------------------------------

@node Configure Cross
@subsection Configuring GNU CC as a crosscompiler

No special actions have to be taken to configure GNU Pascal as a
crosscompiler. Cross-compiler specific configuration is done only for GCC.
Section 4.2 of ``Using and Porting GNU CC'' deals with cross-configurations
in great detail. Once cross-binutils and a C library for the target machine
are in place, GCC can be configured (from the GCC object directory).
Suppose we are on a Linux system and want a cross-compiler that produces
code that runs on MS-DOS:

@smallexample
% ../gcc-2.7.2.1/configure --prefix=/usr --target=i386-go32
@end smallexample

This creates all the necessary config files, links and Makefile in the GCC
object directory. Now, proceed with the compilation and installation process
like in the case of the native configuration described before. Do not remove
files from the GCC object directory; the cross-compiler is used to compile
the GNU Pascal runtime system (RTS) for the target system.

@c -------------------------------------------------------------------------

@node Build Cross
@subsection Building the Pascal crosscompiler

Once you have verified the C crosscompiler, the Pascal cross-compiler can
be configured and built. Note that the @samp{configure} script does not
require any cross-compiler related switches because GPC inherits all of this
from GNU CC.

Sample output for a linux->msdos cross configuration:

@example
--------------------------------------------------------------------------
Configuration summary:
  Building a i386-go32 crosscompiler hosted by i486-unknown-linux

  GPC sources in:         ../gpc-2.0
  GCC sources in:         ../gcc-2.7.2.1
  GCC object code in:     ../gcc
  GCC version:            2.7.2.1

  Compiler for GPC:       gcc
  Compiler for libgpc.a:  i386-go32-gcc
  Compiler flags:         -g -O

  Cross-ar utility:       i386-go32-ar
  Cross-ranlib utility:   i386-go32-ranlib

  Installation path:      /usr/bin, /usr/lib/gcc-lib/i386-go32/2.7.2.1
--------------------------------------------------------------------------

Now, type @samp{make} to build the compiler and runtime system.
@end example

Building a cross-compiler requires cross-binutils for your target,
i386-go32 in this examples. If @file{configure} is not able to find
@file{i386-go32-ar} and/or @file{i386-go32-ranlib}, you may have to run it
again with again with @code{--with-ar=@var{your-cross-ar}} or
@code{--with-ranlib=@var{your-cross-ranlib}} switches.

Then, @samp{make} and @samp{make install} the cross-compiler like you would
for a native configuration.

@c -------------------------------------------------------------------------

@node Crossbuilding
@subsection Crossbuilding a compiler.

Yet another possibility is @var{crossbuilding} : Using a crosscompiler to
build GNU Pascal results in a compiler binary that runs on the
cross-target platform. A possible reason why anybody would want to do this,
is when the platform on which you want to run the GNU Pascal compiler,
is not self-hosting. An example is cygwin32. 

To crossbuild GNU Pascal, you have to install a crosscompiler for your
target first. This is covered in chapter 4 of ``Using and Porting GNU CC''.
Assuming you want to build a native cygwin32 Pascal compiler on a
Linux system, configure GCC:

@smallexample
% ../gcc-2.7.2.1/configure --prefix=/usr --build=i486-linux \
	--host=i386-cygwin32 --target=i386-cygwin32
@end smallexample

Build it:

@smallexample
% make CFLAGS=-O2 LANGUAGES=c
@end smallexample

Now, configure and build GPC. The output of @file{configure} should look
like:

@example
--------------------------------------------------------------------------
Configuration summary:
  Building a i386-cygwin32 crosscompiler hosted by i386-cygwin32

  GPC sources in:         ../gpc-2.0
  GCC sources in:         ../gcc-2.7.2.1
  GCC object code in:     ../gcc
  GCC version:            2.7.2.1

  Compiler for GPC:       i386-cygwin32-gcc
  Compiler for libgpc.a:  i386-cygwin32-gcc
  Compiler flags:         -g -O

  Cross-ar utility:       i386-cygwin32-ar
  Cross-ranlib utility:   i386-cygwin32-ranlib

  Installation path:      /usr/bin, /usr/lib/gcc-lib/i386-cygwin32/2.7.2.1
--------------------------------------------------------------------------

Now, type @samp{make} to build the compiler and runtime system.
@end example

Again, @file{configure} should be able to
detect and configure this setup without additional flags. If not, specify
@samp{--with-ar}, @samp{--with-ranlib}, @samp{--with-gcc} and/or
@samp{--with-rtsgcc} as appropriate.

A cross-built compiler must be installed by hand.

@c -------------------------------------------------------------------------

@node binary distributions
@section Installation instructions for a GPC binary distribution
@cindex Installation instructions for a GPC binary distribution

To install a binary distribution, cd to the main directory and
unpack the archive while preserving the stored directory structure.
In concrete, to install a ZIP archive under DOS with PKunzip, type

@smallexample
  C:\> pkunzip -d @var{archive}
@end smallexample

where @var{archive} is the name of the distribution file.  To install
a TGZ archive under Linux, become root, then extract the archive
from the root of the filesystem:

@smallexample
  # tar xzf @var{archive}.tar.gz
@end smallexample

Binary distributions include @file{libgcc.} and @file{specs}, files that
are normally part of gcc. If you have gcc installed, they will be replaced
unless you manually install the archive.

