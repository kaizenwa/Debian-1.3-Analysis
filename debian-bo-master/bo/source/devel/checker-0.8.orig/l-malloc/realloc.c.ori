#include "malloc.h"

__ptr_t realloc(__ptr_t ptr, size_t size)
{
 struct malloc_header *tmp;
 struct malloc_header *tmp1;
 size_t round_size;
 
 if (ptr == (__ptr_t)0)
   return malloc(size);
 
 tmp = (struct malloc_header*)(ptr - HEADER_SIZE);
 if (tmp->state != MDBUSY)
 {
#if CHECKER && 0
   chkr_errno = 1;
#endif   
   MESSAGE("Realloc: error\n");
   return;
 }
 
 if (size == 0)
 {
   free(ptr);
   return (__ptr_t)0;
 }
 
 round_size = (size + 0x03) & ~0x03;
 
 if (tmp->size == round_size)
   return ptr;
 
 if (round_size < tmp->size)
 {
   if (tmp->next.state == MDBUSY)
   {
     if (tmp->size - round_size >= HEADER_SIZE)
     {
       tmp1 = 
   if (tmp->next.state == MDFREE)
   {
   
