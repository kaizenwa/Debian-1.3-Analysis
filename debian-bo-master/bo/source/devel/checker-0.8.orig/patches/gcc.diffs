diff -rc gcc-2.7.2.orig/ChangeLog gcc-2.7.2/ChangeLog
*** gcc-2.7.2.orig/ChangeLog	Sun Jul 21 10:40:00 1996
--- gcc-2.7.2/ChangeLog	Tue Jul 23 15:28:00 1996
***************
*** 78,83 ****
--- 78,119 ----
  	flag_check_memory_usage is set.
  	* varasm.c(assemble_name): strip the CHKR_PREFIX.
  
+ Sun Nov 26 14:39:22 1995 Tristan Gingold  (No email address)
+ 
+ 	* c-decl.c(init_decl_processing): add the
+ 	`__builtin_aggregate_incoming_address' builting function.
+ 	* expr.c(expand_builtin): add the case for
+ 	BUILT_IN_AGGREGATE_INCOMING_ADDRESS, which returns the address of
+ 	the area where the returned aggregate is saved and 0 otherwise.
+ 	* tree.h(built_in_function): add BUILT_IN_AGGREGATE_INCOMONG_ADDRESS.
+ 
+ Sun Nov 26 11:38:51 1995 Tristan Gingold  (No email address)
+ 
+ 	* c-decl.c(c_decode_option): New flag: -Wcheck-memory-usage
+ 	* calls.c(expand_call): if '-fcheck_memory_usage' is set, use a
+ 	pseudo-register (if not inserted code).
+ 	* calls.c(emit_library_call): if `in_check_memory_usage' is set,
+ 	don't call `emit_queue'.
+ 	* expr.c: int in_check_memory_usage: new variable to avoid recursion.
+ 	* expr.c(expand_assignment, expand_expr, emit_push_insn, store_expr):
+ 	insert calls to chkr_check_addr, chkr_set_right, chkr_copy_bitmap
+ 	when '-fcheck-memory-usage' is set.
+ 	* expr.c(get_push_address, get_memory_usage_from_modifier): new
+ 	functions.
+ 	* expr.h: enum memory_use_mode, in_check_memory_usage: new
+ 	declarations used by expand_expr and other functions.
+ 	* flags.h (flag_check_memory_usage): New declaration.
+ 	* optabs.c: define chkr_check_addr_libfunc, chkr_check_addr_libfunc, 
+ 	chkr_set_right_libfunc, chkr_copy_bitmap_libfunc,
+ 	chkr_check_exec_libfunc.
+ 	(init_optabs): initialize these chkr_*_libfunc.
+ 	* toplev.c (flag_check_memory_usage): New variable.
+ 	(f_options): Add check-memory-usage.
+ 	(lang_options): add -Wcheck-memory-usage.
+ 	* varasm.c(make_function_rtl, make_decl_rtl): Add a prefix when
+ 	flag_check_memory_usage is set.
+ 	* varasm.c(assemble_name): strip the CHKR_PREFIX.
+ 
  Sun Nov 26 14:47:42 1995  Richard Kenner  <kenner@mole.gnu.ai.mit.edu>
  
  	* Version 2.7.2 released.
diff -rc gcc-2.7.2.orig/c-decl.c gcc-2.7.2/c-decl.c
*** gcc-2.7.2.orig/c-decl.c	Sun Jul 21 10:24:19 1996
--- gcc-2.7.2/c-decl.c	Tue Jul 23 15:28:01 1996
***************
*** 711,716 ****
--- 711,727 ----
      warn_missing_braces = 1;
    else if (!strcmp (p, "-Wno-missing-braces"))
      warn_missing_braces = 0;
+   else if (!strcmp (p, "-Wcheck-memory-usage"))
+     {
+       /* We save the value of warn_uninitialized, since if they put
+ 	 -Wuninitialized on the command line, we need to generate a
+ 	 warning about not using it without also specifying -O.  */
+       if (warn_uninitialized != 1)
+ 	warn_uninitialized = 2;
+       warn_implicit = 1;
+       warn_strict_prototypes = 1;
+       warn_format = 1;
+     }
    else if (!strcmp (p, "-Wall"))
      {
        /* We save the value of warn_uninitialized, since if they put
***************
*** 3090,3095 ****
--- 3101,3110 ----
  						    unsigned_type_node,
  						    endlink)),
  		    BUILT_IN_FRAME_ADDRESS, NULL_PTR);
+ 
+   builtin_function ("__builtin_aggregate_incoming_address",
+ 		    build_function_type (ptr_type_node, NULL_TREE),
+ 		    BUILT_IN_AGGREGATE_INCOMING_ADDRESS, NULL_PTR);
  
    builtin_function ("__builtin_alloca",
  		    build_function_type (ptr_type_node,
diff -rc gcc-2.7.2.orig/calls.c gcc-2.7.2/calls.c
*** gcc-2.7.2.orig/calls.c	Sun Jul 21 10:24:23 1996
--- gcc-2.7.2/calls.c	Wed Aug 28 09:13:07 1996
***************
*** 595,600 ****
--- 595,607 ----
    register tree p;
    register int i, j;
  
+   /* If '-fcheck-memory-usage' is set, never use directly an hard register.
+      The inserted code can use pseudo registers and the hard register must
+      not be allocated for any pseudo registers.  */
+ 
+   if (flag_check_memory_usage && ! in_check_memory_usage)
+     target = 0;
+ 
    /* See if we can find a DECL-node for the actual function.
       As a result, decide whether this is a call to an integrable function.  */
  
***************
*** 1597,1602 ****
--- 1604,1619 ----
        push_temp_slots ();
        funexp = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);
        pop_temp_slots ();	/* FUNEXP can't be BLKmode */
+ 
+       /* Check the function is executable.  */
+       if (flag_check_memory_usage && ! in_check_memory_usage)
+ 	{
+ 	  in_check_memory_usage = 1;
+ 	  emit_library_call (chkr_check_exec_libfunc, 0,
+ 			     VOIDmode, 1,
+ 			     funexp, Pmode);
+ 	  in_check_memory_usage = 0;
+ 	}
        emit_queue ();
      }
  
***************
*** 1834,1839 ****
--- 1851,1867 ----
  		      force_reg (Pmode,
  				 force_operand (structure_value_addr,
  						NULL_RTX)));
+       /* Mark the memory for the structure as WO.  */
+       if (flag_check_memory_usage && ! in_check_memory_usage)
+ 	{
+ 	  in_check_memory_usage = 1;
+ 	  emit_library_call (chkr_set_right_libfunc, 0,
+ 			     VOIDmode, 3,
+ 			     structure_value_addr, Pmode, 
+ 			     GEN_INT (struct_value_size), SImode,
+ 			     GEN_INT (MEMORY_USE_WO), SImode);
+ 	  in_check_memory_usage = 0;
+ 	}
        if (GET_CODE (struct_value_rtx) == REG)
  	  use_reg (&call_fusage, struct_value_rtx);
      }
***************
*** 2474,2480 ****
      }
  
    /* For version 1.37, try deleting this entirely.  */
!   if (! no_queue)
      emit_queue ();
  
    /* Any regs containing parms remain in use through the call.  */
--- 2502,2508 ----
      }
  
    /* For version 1.37, try deleting this entirely.  */
!   if (! no_queue && ! in_check_memory_usage)
      emit_queue ();
  
    /* Any regs containing parms remain in use through the call.  */
***************
*** 3098,3105 ****
      do_pending_stack_adjust ();
  
    if (arg->value == arg->stack)
!     /* If the value is already in the stack slot, we are done.  */
!     ;
    else if (arg->mode != BLKmode)
      {
        register int size;
--- 3126,3147 ----
      do_pending_stack_adjust ();
  
    if (arg->value == arg->stack)
!     {
!       /* If the value is already in the stack slot, we are done.  */
!       if (flag_check_memory_usage && !in_check_memory_usage
!           && GET_CODE (arg->stack) == MEM)
! 	{
! 	  if (arg->mode == BLKmode)
! 	    abort ();
! 	  in_check_memory_usage = 1;	/* Avoid recursion.  */
! 	  emit_library_call (chkr_set_right_libfunc, 0,
! 			     VOIDmode, 3,
! 			     XEXP (arg->stack, 0), Pmode, 
! 			     GEN_INT (GET_MODE_SIZE (arg->mode)), SImode,
! 			     GEN_INT (MEMORY_USE_RW), SImode);
! 	  in_check_memory_usage = 0;	/* Avoid recursion.  */
! 	}
!     }
    else if (arg->mode != BLKmode)
      {
        register int size;
diff -rc gcc-2.7.2.orig/cpplib.c gcc-2.7.2/cpplib.c
*** gcc-2.7.2.orig/cpplib.c	Sat Dec  2 14:36:17 1995
--- gcc-2.7.2/cpplib.c	Sun Jul 28 09:08:55 1996
***************
*** 890,896 ****
       cpp_reader *pfile;
       long *linep;
  {
!   int c;
    while (PEEKC() == '\\' && PEEKN(1) == '\n')
      {
        if (linep)
--- 890,896 ----
       cpp_reader *pfile;
       long *linep;
  {
!   int c = -1;
    while (PEEKC() == '\\' && PEEKN(1) == '\n')
      {
        if (linep)
***************
*** 1124,1129 ****
--- 1124,1131 ----
  	copy_rest_of_line (pfile);
  	CPP_OPTIONS (pfile)->put_out_comments = save_put_out_comments;
      }
+   else
+     after_ident = 0;
  
    /* For #pragma and #define, we may want to pass through the directive.
       Other directives may create output, but we don't want the directive
diff -rc gcc-2.7.2.orig/explow.c gcc-2.7.2/explow.c
*** gcc-2.7.2.orig/explow.c	Sun Jul 21 10:24:36 1996
--- gcc-2.7.2/explow.c	Tue Jul 23 15:28:02 1996
***************
*** 251,257 ****
        && contains_placeholder_p (size))
      size = build (WITH_RECORD_EXPR, sizetype, size, exp);
  
!   return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype), 0);
  }
  
  /* Return a copy of X in which all memory references
--- 251,258 ----
        && contains_placeholder_p (size))
      size = build (WITH_RECORD_EXPR, sizetype, size, exp);
  
!   return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype),
!   		      EXPAND_MEMORY_USE_BAD);
  }
  
  /* Return a copy of X in which all memory references
diff -rc gcc-2.7.2.orig/expr.c gcc-2.7.2/expr.c
*** gcc-2.7.2.orig/expr.c	Sun Jul 21 10:40:19 1996
--- gcc-2.7.2/expr.c	Sun Jul 28 19:33:12 1996
***************
*** 110,115 ****
--- 110,119 ----
  /* Similarly for __builtin_apply_args.  */
  static rtx apply_args_value;
  
+ /* Avoid recursion: GCC must not call a checker function for the arguments of
+    a checker function.  */
+ int in_check_memory_usage;
+ 
  /* This structure is used by move_by_pieces to describe the move to
     be performed.  */
  
***************
*** 147,152 ****
--- 151,157 ----
  static int move_by_pieces_ninsns PROTO((unsigned int, int));
  static void move_by_pieces_1	PROTO((rtx (*) (), enum machine_mode,
  				       struct move_by_pieces *));
+ static rtx get_push_address	PROTO ((int));
  static void store_constructor	PROTO((tree, rtx));
  static rtx store_field		PROTO((rtx, int, int, enum machine_mode, tree,
  				       enum machine_mode, int, int, int));
***************
*** 2077,2082 ****
--- 2082,2107 ----
    return gen_rtx (STACK_PUSH_CODE, Pmode, stack_pointer_rtx);
  }
  
+ /* Return an rtx to the beginning of a block of SIZE bytes, as if it was
+    already pushed.  */
+ static rtx
+ get_push_address (size)
+ 	int size;
+ {
+   register rtx temp;
+   rtx res;
+ 
+   if (STACK_PUSH_CODE == POST_DEC)
+     temp = gen_rtx (PLUS, Pmode, stack_pointer_rtx, GEN_INT (size));
+   else if (STACK_PUSH_CODE == POST_INC)
+     temp = gen_rtx (MINUS, Pmode, stack_pointer_rtx, GEN_INT (size));
+   else
+     temp = stack_pointer_rtx;
+   res = gen_reg_rtx (Pmode);
+   emit_move_insn (res, temp);
+   return res;
+ }
+ 
  /* Generate code to push X onto the stack, assuming it has mode MODE and
     type TYPE.
     MODE is redundant except when X is a CONST_INT (since they don't
***************
*** 2196,2201 ****
--- 2221,2247 ----
  
  	  move_by_pieces (gen_rtx (MEM, BLKmode, gen_push_operand ()), xinner,
  			  INTVAL (size) - used, align);
+ 
+ 	  if (flag_check_memory_usage && !in_check_memory_usage)
+ 	    {
+ 	      rtx temp;
+ 
+ 	      in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 	      temp = get_push_address (INTVAL(size) - used);
+ 	      if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))
+ 		emit_library_call (chkr_copy_bitmap_libfunc, 0,
+ 				   VOIDmode, 3,
+ 				   temp, Pmode,
+ 				   XEXP (xinner, 0), Pmode,
+ 				   GEN_INT (INTVAL(size) - used), SImode);
+ 	      else
+ 		emit_library_call (chkr_set_right_libfunc, 0,
+ 				   VOIDmode, 3,
+ 				   temp, Pmode,
+ 			 	   GEN_INT (INTVAL(size) - used), SImode,
+ 				   GEN_INT (MEMORY_USE_RW), SImode);
+ 	      in_check_memory_usage = 0;
+ 	    }
  	}
        else
  #endif /* PUSH_ROUNDING */
***************
*** 2231,2237 ****
--- 2277,2303 ----
  				   plus_constant (gen_rtx (PLUS, Pmode,
  							   args_addr, args_so_far),
  						  skip));
+ 	  if (flag_check_memory_usage && !in_check_memory_usage)
+ 	    {
+ 	      rtx target;
  
+ 	      in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 	      target = copy_to_reg (temp);
+ 	      if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))
+ 		emit_library_call (chkr_copy_bitmap_libfunc, 0,
+ 				   VOIDmode, 3,
+ 				   target, Pmode,
+ 				   XEXP (xinner, 0), Pmode,
+ 				   size, SImode);
+ 	      else
+ 	        emit_library_call (chkr_set_right_libfunc, 0,
+ 				   VOIDmode, 3,
+ 				   target, Pmode,
+ 			 	   size, SImode,
+ 				   GEN_INT (MEMORY_USE_RW), SImode);
+ 	      in_check_memory_usage = 0;
+ 	    }
+ 
  	  /* TEMP is the address of the block.  Copy the data there.  */
  	  if (GET_CODE (size) == CONST_INT
  	      && (move_by_pieces_ninsns ((unsigned) INTVAL (size), align)
***************
*** 2395,2400 ****
--- 2461,2467 ----
    else
      {
        rtx addr;
+       rtx target = NULL_RTX;
  
        /* Push padding now if padding above and stack grows down,
  	 or if padding below and stack grows up.
***************
*** 2408,2422 ****
  	addr = gen_push_operand ();
        else
  #endif
! 	if (GET_CODE (args_so_far) == CONST_INT)
! 	  addr
! 	    = memory_address (mode,
! 			      plus_constant (args_addr, INTVAL (args_so_far)));
!       else
! 	addr = memory_address (mode, gen_rtx (PLUS, Pmode, args_addr,
! 					      args_so_far));
  
        emit_move_insn (gen_rtx (MEM, mode, addr), x);
      }
  
   ret:
--- 2475,2513 ----
  	addr = gen_push_operand ();
        else
  #endif
! 	{
! 	  if (GET_CODE (args_so_far) == CONST_INT)
! 	    addr
! 	      = memory_address (mode,
! 				plus_constant (args_addr, 
! 					       INTVAL (args_so_far)));
!           else
! 	    addr = memory_address (mode, gen_rtx (PLUS, Pmode, args_addr,
! 						  args_so_far));
! 	  target = addr;
! 	}
  
        emit_move_insn (gen_rtx (MEM, mode, addr), x);
+ 
+       if (flag_check_memory_usage && !in_check_memory_usage)
+ 	{
+ 	  in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 	  if (!target)
+ 	    target = get_push_address (GET_MODE_SIZE (mode));
+ 	  if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))
+ 	    emit_library_call (chkr_copy_bitmap_libfunc, 0,
+ 			       VOIDmode, 3,
+ 			       target, Pmode,
+ 			       XEXP (x, 0), Pmode,
+ 			       GEN_INT (GET_MODE_SIZE (mode)), SImode);
+ 	  else
+ 	    emit_library_call (chkr_set_right_libfunc, 0,
+ 			     VOIDmode, 3,
+ 			     target, Pmode,
+ 			     GEN_INT (GET_MODE_SIZE (mode)), SImode,
+ 			     GEN_INT (MEMORY_USE_RW), SImode);
+ 	  in_check_memory_usage = 0;
+ 	}
      }
  
   ret:
***************
*** 2507,2513 ****
  	tem = stabilize_reference (tem);
  
        alignment = TYPE_ALIGN (TREE_TYPE (tem)) / BITS_PER_UNIT;
!       to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, 0);
        if (offset != 0)
  	{
  	  rtx offset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, 0);
--- 2598,2604 ----
  	tem = stabilize_reference (tem);
  
        alignment = TYPE_ALIGN (TREE_TYPE (tem)) / BITS_PER_UNIT;
!       to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_DONT);
        if (offset != 0)
  	{
  	  rtx offset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, 0);
***************
*** 2545,2550 ****
--- 2636,2669 ----
  #endif
  	}
  
+       /* Check the access.  */
+       if (flag_check_memory_usage && !in_check_memory_usage
+ 	  && GET_CODE (to_rtx) == MEM)
+ 	{
+ 	  rtx to_addr;
+ 	  int size;
+ 	  int best_mode_size;
+ 	  enum machine_mode best_mode;
+ 
+ 	  best_mode = get_best_mode (bitsize, bitpos,
+ 	  			     TYPE_ALIGN (TREE_TYPE (tem)),
+ 	  			     mode1, volatilep);
+ 	  if (best_mode == VOIDmode)
+ 	    best_mode = QImode;
+ 	  best_mode_size = GET_MODE_BITSIZE (best_mode);
+ 	  to_addr = plus_constant (XEXP (to_rtx, 0), (bitpos / BITS_PER_UNIT));
+ 	  size = CEIL ((bitpos % best_mode_size) + bitsize, best_mode_size);
+ 	  size *= GET_MODE_SIZE (best_mode);
+ 	  /* Check the access right of the pointer.  */
+ 	  in_check_memory_usage = 1;
+ 	  emit_library_call (chkr_check_addr_libfunc, 0,
+  			     VOIDmode, 3,
+ 			     to_addr, Pmode,
+ 			     GEN_INT (size), SImode,
+ 			     GEN_INT (MEMORY_USE_WO), SImode);
+ 	  in_check_memory_usage = 0;
+ 	}
+ 
        result = store_field (to_rtx, bitsize, bitpos, mode1, from,
  			    (want_value
  			     /* Spurious cast makes HPUX compiler happy.  */
***************
*** 2585,2591 ****
        push_temp_slots ();
        value = expand_expr (from, NULL_RTX, VOIDmode, 0);
        if (to_rtx == 0)
! 	to_rtx = expand_expr (to, NULL_RTX, VOIDmode, 0);
  
        if (GET_MODE (to_rtx) == BLKmode)
  	{
--- 2704,2710 ----
        push_temp_slots ();
        value = expand_expr (from, NULL_RTX, VOIDmode, 0);
        if (to_rtx == 0)
! 	to_rtx = expand_expr (to, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_WO);
  
        if (GET_MODE (to_rtx) == BLKmode)
  	{
***************
*** 2604,2610 ****
       Don't re-expand if it was expanded already (in COMPONENT_REF case).  */
  
    if (to_rtx == 0)
!     to_rtx = expand_expr (to, NULL_RTX, VOIDmode, 0);
  
    /* Don't move directly into a return register.  */
    if (TREE_CODE (to) == RESULT_DECL && GET_CODE (to_rtx) == REG)
--- 2723,2729 ----
       Don't re-expand if it was expanded already (in COMPONENT_REF case).  */
  
    if (to_rtx == 0)
!     to_rtx = expand_expr (to, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_WO);
  
    /* Don't move directly into a return register.  */
    if (TREE_CODE (to) == RESULT_DECL && GET_CODE (to_rtx) == REG)
***************
*** 2631,2638 ****
  
        push_temp_slots ();
        size = expr_size (from);
!       from_rtx = expand_expr (from, NULL_RTX, VOIDmode, 0);
  
  #ifdef TARGET_MEM_FUNCTIONS
        emit_library_call (memcpy_libfunc, 0,
  			 VOIDmode, 3, XEXP (to_rtx, 0), Pmode,
--- 2750,2770 ----
  
        push_temp_slots ();
        size = expr_size (from);
!       from_rtx = expand_expr (from, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_DONT);
  
+       /* Copy the rights of the bitmap.  */
+       if (flag_check_memory_usage && ! in_check_memory_usage)
+ 	{
+ 	  in_check_memory_usage = 1;
+ 	  emit_library_call (chkr_copy_bitmap_libfunc, 0,
+ 			     VOIDmode, 3, XEXP (to_rtx, 0), Pmode,
+ 			     XEXP (from_rtx, 0), Pmode,
+ 			     convert_to_mode (SImode,
+ 					  size, TREE_UNSIGNED (sizetype)),
+ 			     SImode);
+ 	  in_check_memory_usage = 0;
+ 	}
+ 
  #ifdef TARGET_MEM_FUNCTIONS
        emit_library_call (memcpy_libfunc, 0,
  			 VOIDmode, 3, XEXP (to_rtx, 0), Pmode,
***************
*** 2839,2844 ****
--- 2971,2996 ----
      temp = convert_modes (GET_MODE (target), TYPE_MODE (TREE_TYPE (exp)),
  			  temp, TREE_UNSIGNED (TREE_TYPE (exp)));
  
+   if (flag_check_memory_usage && !in_check_memory_usage
+       && GET_CODE (target) == MEM
+       && AGGREGATE_TYPE_P (TREE_TYPE (exp)))
+     {
+       in_check_memory_usage = 1;	/* Avoid recursion.  */
+       if (GET_CODE (temp) == MEM)
+         emit_library_call (chkr_copy_bitmap_libfunc, 0,
+ 			   VOIDmode, 3,
+ 			   XEXP (target, 0), Pmode,
+ 			   XEXP (temp, 0), Pmode,
+ 			   expr_size (exp), SImode);
+       else
+         emit_library_call (chkr_check_addr_libfunc, 0,
+ 			   VOIDmode, 3,
+ 			   XEXP (target, 0), Pmode, 
+ 			   expr_size (exp), SImode,
+ 			   GEN_INT (MEMORY_USE_WO), SImode);
+       in_check_memory_usage = 0;	/* Avoid recursion.  */
+     }
+ 
    /* If value was not generated in the target, store it there.
       Convert the value to TARGET's type first if nec.  */
  
***************
*** 2922,2927 ****
--- 3074,3090 ----
  
  	      if (size != const0_rtx)
  		{
+ 		  /* Be sure we can write on ADDR.  */
+ 		  if (flag_check_memory_usage && ! in_check_memory_usage)
+ 		    {
+ 		      in_check_memory_usage = 1;
+ 		      emit_library_call (chkr_check_addr_libfunc, 0,
+ 				         VOIDmode, 3,
+ 				         addr, Pmode,
+ 				         size, SImode,
+  				         GEN_INT (MEMORY_USE_WO), SImode);
+ 		      in_check_memory_usage = 0;
+ 		    }
  #ifdef TARGET_MEM_FUNCTIONS
  		  emit_library_call (memset_libfunc, 0, VOIDmode, 3, addr,
  				     Pmode, const0_rtx, Pmode, size, ptr_mode);
***************
*** 3986,3991 ****
--- 4149,4181 ----
      return 1;
    return 0;
  }
+ 
+ /* Subroutine of expand_exp: compute memory_usage from modifier.  */
+ static enum memory_use_mode
+ get_memory_usage_from_modifier (modifier)
+      enum expand_modifier modifier;
+ {
+   switch (modifier)
+     {
+     case EXPAND_NORMAL:
+       return MEMORY_USE_RO;
+       break;
+     case EXPAND_MEMORY_USE_WO:
+       return MEMORY_USE_WO;
+       break;
+     case EXPAND_MEMORY_USE_RW:
+       return MEMORY_USE_RW;
+       break;
+     case EXPAND_INITIALIZER:
+     case EXPAND_MEMORY_USE_DONT:
+     case EXPAND_SUM:
+     case EXPAND_CONST_ADDRESS:
+       return MEMORY_USE_DONT;
+     case EXPAND_MEMORY_USE_BAD:
+     default:
+       abort ();
+     }
+ }
  
  /* expand_expr: generate code for computing expression EXP.
     An rtx for the computed value is returned.  The value is never null.
***************
*** 4048,4053 ****
--- 4238,4246 ----
  		     || code == COND_EXPR)
  		    && TREE_CODE (type) == VOID_TYPE));
    tree context;
+   /* Used by check-memory-usage to make modifier ro.  */
+   enum expand_modifier ro_modifier = (modifier >= EXPAND_MEMORY_USE_WO) ?
+   					EXPAND_NORMAL : modifier;
  
  
    if (output_bytecode && modifier != EXPAND_INITIALIZER)
***************
*** 4081,4087 ****
  	  && TREE_CODE (exp) != FUNCTION_DECL
  	  && mode != VOIDmode && mode != BLKmode)
  	{
! 	  temp = expand_expr (exp, NULL_RTX, VOIDmode, modifier);
  	  if (GET_CODE (temp) == MEM)
  	    temp = copy_to_reg (temp);
  	  return const0_rtx;
--- 4274,4280 ----
  	  && TREE_CODE (exp) != FUNCTION_DECL
  	  && mode != VOIDmode && mode != BLKmode)
  	{
! 	  temp = expand_expr (exp, NULL_RTX, VOIDmode, ro_modifier);
  	  if (GET_CODE (temp) == MEM)
  	    temp = copy_to_reg (temp);
  	  return const0_rtx;
***************
*** 4089,4100 ****
  
        if (TREE_CODE_CLASS (code) == '1')
  	return expand_expr (TREE_OPERAND (exp, 0), const0_rtx,
! 			    VOIDmode, modifier);
        else if (TREE_CODE_CLASS (code) == '2'
  	       || TREE_CODE_CLASS (code) == '<')
  	{
! 	  expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, modifier);
! 	  expand_expr (TREE_OPERAND (exp, 1), const0_rtx, VOIDmode, modifier);
  	  return const0_rtx;
  	}
        else if ((code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)
--- 4282,4293 ----
  
        if (TREE_CODE_CLASS (code) == '1')
  	return expand_expr (TREE_OPERAND (exp, 0), const0_rtx,
! 			    VOIDmode, ro_modifier);
        else if (TREE_CODE_CLASS (code) == '2'
  	       || TREE_CODE_CLASS (code) == '<')
  	{
! 	  expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, ro_modifier);
! 	  expand_expr (TREE_OPERAND (exp, 1), const0_rtx, VOIDmode, ro_modifier);
  	  return const0_rtx;
  	}
        else if ((code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)
***************
*** 4102,4108 ****
  	/* If the second operand has no side effects, just evaluate
  	   the first. */
  	return expand_expr (TREE_OPERAND (exp, 0), const0_rtx,
! 			    VOIDmode, modifier);
  
        target = 0;
      }
--- 4295,4301 ----
  	/* If the second operand has no side effects, just evaluate
  	   the first. */
  	return expand_expr (TREE_OPERAND (exp, 0), const0_rtx,
! 			    VOIDmode, ro_modifier);
  
        target = 0;
      }
***************
*** 4166,4171 ****
--- 4359,4390 ----
  	  pop_obstacks ();
  	}
  
+       /* Check only automatic variables.  Currently, function arguments are
+          not checked (this can be done at compile-time with prototypes).
+          Aggregate are not checked.  */
+       if (flag_check_memory_usage && !in_check_memory_usage
+ 	  && code == VAR_DECL
+ 	  && GET_CODE (DECL_RTL (exp)) == MEM
+ 	  && DECL_CONTEXT (exp) != NULL_TREE
+ 	  && !TREE_STATIC (exp)
+ 	  && !AGGREGATE_TYPE_P (TREE_TYPE (exp)))
+ 	{
+ 	  enum memory_use_mode memory_usage;
+ 	  memory_usage = get_memory_usage_from_modifier (modifier);
+ 
+ 	  if (memory_usage != MEMORY_USE_DONT)
+ 	    {
+ 	      /* Check the access right of the pointer.  */
+  	      in_check_memory_usage = 1;
+ 	      emit_library_call (chkr_check_addr_libfunc, 0,
+ 				 VOIDmode, 3,
+ 				 XEXP (DECL_RTL (exp), 0), Pmode,
+ 				 GEN_INT (int_size_in_bytes (type)), SImode,
+ 				 GEN_INT (memory_usage), SImode);
+ 	      in_check_memory_usage = 0;
+ 	   }
+ 	}
+ 
        /* ... fall through ... */
  
      case FUNCTION_DECL:
***************
*** 4262,4268 ****
  				 mode);
  
      case CONST_DECL:
!       return expand_expr (DECL_INITIAL (exp), target, VOIDmode, 0);
  
      case REAL_CST:
        /* If optimized, generate immediate CONST_DOUBLE
--- 4481,4488 ----
  				 mode);
  
      case CONST_DECL:
!       return expand_expr (DECL_INITIAL (exp), target, VOIDmode,
!       			  EXPAND_MEMORY_USE_BAD);
  
      case REAL_CST:
        /* If optimized, generate immediate CONST_DOUBLE
***************
*** 4352,4358 ****
  	    }
  
  	  if (temp == const0_rtx)
! 	    expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, 0);
  	  else
  	    store_expr (TREE_OPERAND (exp, 0), temp, 0);
  	}
--- 4572,4579 ----
  	    }
  
  	  if (temp == const0_rtx)
! 	    expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode,
! 			 EXPAND_MEMORY_USE_BAD);
  	  else
  	    store_expr (TREE_OPERAND (exp, 0), temp, 0);
  	}
***************
*** 4402,4408 ****
  		 In that case, we want to translate it using subsequent
  		 entries.  */
  	      placeholder_list = TREE_CHAIN (placeholder_list);
! 	      temp = expand_expr (object, original_target, tmode, modifier);
  	      placeholder_list = old_list;
  	      return temp;
  	    }
--- 4623,4629 ----
  		 In that case, we want to translate it using subsequent
  		 entries.  */
  	      placeholder_list = TREE_CHAIN (placeholder_list);
! 	      temp = expand_expr (object, original_target, tmode, ro_modifier);
  	      placeholder_list = old_list;
  	      return temp;
  	    }
***************
*** 4417,4423 ****
        placeholder_list = tree_cons (TREE_OPERAND (exp, 1), NULL_TREE,
  				    placeholder_list);
        target = expand_expr (TREE_OPERAND (exp, 0), original_target,
! 			    tmode, modifier);
        placeholder_list = TREE_CHAIN (placeholder_list);
        return target;
  
--- 4638,4644 ----
        placeholder_list = tree_cons (TREE_OPERAND (exp, 1), NULL_TREE,
  				    placeholder_list);
        target = expand_expr (TREE_OPERAND (exp, 0), original_target,
! 			    tmode, ro_modifier);
        placeholder_list = TREE_CHAIN (placeholder_list);
        return target;
  
***************
*** 4461,4467 ****
  	    vars = TREE_CHAIN (vars);
  	  }
  
! 	temp = expand_expr (TREE_OPERAND (exp, 1), target, tmode, modifier);
  
  	expand_end_bindings (TREE_OPERAND (exp, 0), 0, 0);
  
--- 4682,4688 ----
  	    vars = TREE_CHAIN (vars);
  	  }
  
! 	temp = expand_expr (TREE_OPERAND (exp, 1), target, tmode, ro_modifier);
  
  	expand_end_bindings (TREE_OPERAND (exp, 0), 0, 0);
  
***************
*** 4484,4490 ****
  	{
  	  tree elt;
  	  for (elt = CONSTRUCTOR_ELTS (exp); elt; elt = TREE_CHAIN (elt))
! 	    expand_expr (TREE_VALUE (elt), const0_rtx, VOIDmode, 0);
  	  return const0_rtx;
  	}
  
--- 4705,4712 ----
  	{
  	  tree elt;
  	  for (elt = CONSTRUCTOR_ELTS (exp); elt; elt = TREE_CHAIN (elt))
! 	    expand_expr (TREE_VALUE (elt), const0_rtx, VOIDmode,
! 	    		 EXPAND_MEMORY_USE_BAD);
  	  return const0_rtx;
  	}
  
***************
*** 4564,4569 ****
--- 4786,4811 ----
  	    op0 = memory_address (mode, op0);
  	  }
  
+ 	if (flag_check_memory_usage
+ 	    && !in_check_memory_usage
+ 	    && !AGGREGATE_TYPE_P (TREE_TYPE (exp)))
+ 	  {
+ 	    enum memory_use_mode memory_usage;
+ 	    memory_usage = get_memory_usage_from_modifier (modifier);
+ 
+             if (memory_usage != MEMORY_USE_DONT)
+ 	      {
+                 /* Check the access right of the pointer.  */
+  	        in_check_memory_usage = 1;
+ 	        emit_library_call (chkr_check_addr_libfunc, 0,
+  				   VOIDmode, 3,
+ 				   op0, Pmode,
+ 				   GEN_INT (int_size_in_bytes (type)), SImode,
+ 				   GEN_INT (memory_usage), SImode);
+ 	        in_check_memory_usage = 0;
+ 	     }
+ 	  }
+ 
  	temp = gen_rtx (MEM, mode, op0);
  	/* If address was computed by addition,
  	   mark this as an element of an aggregate.  */
***************
*** 4710,4716 ****
  		  elem = TREE_CHAIN (elem);
  		if (elem)
  		  return expand_expr (fold (TREE_VALUE (elem)), target,
! 				      tmode, modifier);
  	      }
  	  }
  	  
--- 4952,4958 ----
  		  elem = TREE_CHAIN (elem);
  		if (elem)
  		  return expand_expr (fold (TREE_VALUE (elem)), target,
! 				      tmode, ro_modifier);
  	      }
  	  }
  	  
***************
*** 4734,4740 ****
  		      elem = TREE_CHAIN (elem);
  		    if (elem)
  		      return expand_expr (fold (TREE_VALUE (elem)), target,
! 					  tmode, modifier);
  		  }
  		else if (TREE_CODE (init) == STRING_CST
  			 && i < TREE_STRING_LENGTH (init))
--- 4976,4982 ----
  		      elem = TREE_CHAIN (elem);
  		    if (elem)
  		      return expand_expr (fold (TREE_VALUE (elem)), target,
! 					  tmode, ro_modifier);
  		  }
  		else if (TREE_CODE (init) == STRING_CST
  			 && i < TREE_STRING_LENGTH (init))
***************
*** 4832,4837 ****
--- 5074,5105 ----
  	    MEM_VOLATILE_P (op0) = 1;
  	  }
  
+ 	/* Check the access.  */
+ 	if (flag_check_memory_usage && !in_check_memory_usage
+ 	    && GET_CODE (op0) == MEM)
+           {
+ 	    enum memory_use_mode memory_usage;
+ 	    memory_usage = get_memory_usage_from_modifier (modifier);
+ 
+ 	    if (memory_usage != MEMORY_USE_DONT)
+ 	      {
+ 		rtx to;
+ 		int size;
+ 
+ 		to = plus_constant (XEXP (op0, 0), (bitpos / BITS_PER_UNIT));
+ 		size = (bitpos % BITS_PER_UNIT) + bitsize + BITS_PER_UNIT - 1;
+ 
+         	/* Check the access right of the pointer.  */
+  		in_check_memory_usage = 1;
+ 		emit_library_call (chkr_check_addr_libfunc, 0,
+  				   VOIDmode, 3,
+ 				   to, Pmode,
+ 				   GEN_INT (size / BITS_PER_UNIT), SImode,
+ 				   GEN_INT (memory_usage), SImode);
+ 	        in_check_memory_usage = 0;
+ 	      }
+ 	  }
+ 
  	/* In cases where an aligned union has an unaligned object
  	   as a field, we might be extracting a BLKmode value from
  	   an integer-mode (e.g., SImode) object.  Handle this case
***************
*** 5030,5036 ****
        if (RTL_EXPR_RTL (exp) == 0)
  	{
  	  RTL_EXPR_RTL (exp)
! 	    = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);
  	  cleanups_this_call
  	    = tree_cons (NULL_TREE, TREE_OPERAND (exp, 2), cleanups_this_call);
  	  /* That's it for this cleanup.  */
--- 5298,5304 ----
        if (RTL_EXPR_RTL (exp) == 0)
  	{
  	  RTL_EXPR_RTL (exp)
! 	    = expand_expr (TREE_OPERAND (exp, 0), target, tmode, ro_modifier);
  	  cleanups_this_call
  	    = tree_cons (NULL_TREE, TREE_OPERAND (exp, 2), cleanups_this_call);
  	  /* That's it for this cleanup.  */
***************
*** 5046,5052 ****
  	int old_temp_level = target_temp_slot_level;
  	push_temp_slots ();
  	target_temp_slot_level = temp_slot_level;
! 	op0 = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);
  	/* If we're going to use this value, load it up now.  */
  	if (! ignore)
  	  op0 = force_not_mem (op0);
--- 5314,5320 ----
  	int old_temp_level = target_temp_slot_level;
  	push_temp_slots ();
  	target_temp_slot_level = temp_slot_level;
! 	op0 = expand_expr (TREE_OPERAND (exp, 0), target, tmode, ro_modifier);
  	/* If we're going to use this value, load it up now.  */
  	if (! ignore)
  	  op0 = force_not_mem (op0);
***************
*** 5118,5124 ****
        if (mode == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))
  	{
  	  op0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode,
! 			     modifier);
  
  	  /* If the signedness of the conversion differs and OP0 is
  	     a promoted SUBREG, clear that indication since we now
--- 5386,5392 ----
        if (mode == TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))
  	{
  	  op0 = expand_expr (TREE_OPERAND (exp, 0), target, VOIDmode,
! 			     ro_modifier);
  
  	  /* If the signedness of the conversion differs and OP0 is
  	     a promoted SUBREG, clear that indication since we now
***************
*** 5242,5249 ****
        if (! safe_from_p (subtarget, TREE_OPERAND (exp, 1)))
  	subtarget = 0;
  
!       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, modifier);
!       op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, modifier);
  
      both_summands:
        /* Make sure any term that's a sum with a constant comes last.  */
--- 5510,5517 ----
        if (! safe_from_p (subtarget, TREE_OPERAND (exp, 1)))
  	subtarget = 0;
  
!       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, ro_modifier);
!       op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, ro_modifier);
  
      both_summands:
        /* Make sure any term that's a sum with a constant comes last.  */
***************
*** 5303,5311 ****
  	  && really_constant_p (TREE_OPERAND (exp, 1)))
  	{
  	  rtx op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX,
! 				 VOIDmode, modifier);
  	  rtx op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,
! 				 VOIDmode, modifier);
  
  	  /* If the last operand is a CONST_INT, use plus_constant of
  	     the negated constant.  Else make the MINUS.  */
--- 5571,5579 ----
  	  && really_constant_p (TREE_OPERAND (exp, 1)))
  	{
  	  rtx op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX,
! 				 VOIDmode, ro_modifier);
  	  rtx op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,
! 				 VOIDmode, ro_modifier);
  
  	  /* If the last operand is a CONST_INT, use plus_constant of
  	     the negated constant.  Else make the MINUS.  */
***************
*** 5333,5339 ****
  		return expand_expr (convert (type, 
  					     build (PLUS_EXPR, newtype,
  						    newop0, newneg)),
! 				    target, tmode, modifier);
  	    }
  	  else
  	    {
--- 5601,5607 ----
  		return expand_expr (convert (type, 
  					     build (PLUS_EXPR, newtype,
  						    newop0, newneg)),
! 				    target, tmode, ro_modifier);
  	    }
  	  else
  	    {
***************
*** 5363,5369 ****
  	  && TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST
  	  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)
  	{
! 	  op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, EXPAND_SUM);
  
  	  /* Apply distributive law if OP0 is x+c.  */
  	  if (GET_CODE (op0) == PLUS
--- 5631,5638 ----
  	  && TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST
  	  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)
  	{
! 	  op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode,
! 			     EXPAND_SUM);
  
  	  /* Apply distributive law if OP0 is x+c.  */
  	  if (GET_CODE (op0) == PLUS
***************
*** 5748,5758 ****
  	    if (ignore)
  	      {
  		expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode,
! 			     modifier);
  		return const0_rtx;
  	      }
  
! 	    op0 = expand_expr (TREE_OPERAND (exp, 0), target, mode, modifier);
  	    if (GET_MODE (op0) == mode)
  	      return op0;
  
--- 6017,6027 ----
  	    if (ignore)
  	      {
  		expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode,
! 			     ro_modifier);
  		return const0_rtx;
  	      }
  
! 	    op0 = expand_expr (TREE_OPERAND (exp, 0), target, mode, ro_modifier);
  	    if (GET_MODE (op0) == mode)
  	      return op0;
  
***************
*** 6315,6320 ****
--- 6584,6601 ----
  	      MEM_IN_STRUCT_P (memloc) = AGGREGATE_TYPE_P (inner_type);
  
  	      mark_temp_addr_taken (memloc);
+ #if 0
+ 	      if (flag_check_memory_usage && !in_check_memory_usage)
+ 		{
+ 		  in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 		  emit_library_call (chkr_set_right_libfunc, 0,
+ 				     VOIDmode, 3,
+ 				     memloc, Pmode,
+ 			 	     int_size_in_bytes (inner_type), SImode,
+ 				     GEN_INT (MEMORY_USE_RW), SImode);
+ 		  in_check_memory_usage = 0;
+ 		}
+ #endif
  	      emit_move_insn (memloc, op0);
  	      op0 = memloc;
  	    }
***************
*** 7514,7520 ****
  	TREE_STATIC (result) = 1;
  	result = build (INDIRECT_REF, build_pointer_type (type), result);
  	TREE_CONSTANT (result) = 1;
! 	return expand_expr (result, NULL_RTX, VOIDmode, 0);
  #endif
        }
  
--- 7795,7801 ----
  	TREE_STATIC (result) = 1;
  	result = build (INDIRECT_REF, build_pointer_type (type), result);
  	TREE_CONSTANT (result) = 1;
! 	return expand_expr (result, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD);
  #endif
        }
  
***************
*** 7656,7661 ****
--- 7937,7952 ----
  	  return tem;
  	}
  
+     /* Returns the address of the area where the structure is returned.
+        0 otherwise.  */
+     case BUILT_IN_AGGREGATE_INCOMING_ADDRESS:
+       if (arglist != 0
+           || !AGGREGATE_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl)))
+           || GET_CODE (DECL_RTL (DECL_RESULT (current_function_decl))) != MEM)
+         return const0_rtx;
+       else
+         return XEXP (DECL_RTL (DECL_RESULT (current_function_decl)), 0);
+ 
      case BUILT_IN_ALLOCA:
        if (arglist == 0
  	  /* Arg could be non-integer if user redeclared this fcn wrong.  */
***************
*** 7711,7717 ****
  
  	  /* If the length is known, just return it. */
  	  if (len != 0)
! 	    return expand_expr (len, target, mode, 0);
  
  	  /* If SRC is not a pointer type, don't do this operation inline. */
  	  if (align == 0)
--- 8002,8008 ----
  
  	  /* If the length is known, just return it. */
  	  if (len != 0)
! 	    return expand_expr (len, target, mode, EXPAND_MEMORY_USE_BAD);
  
  	  /* If SRC is not a pointer type, don't do this operation inline. */
  	  if (align == 0)
***************
*** 8523,8529 ****
       and insns were generated in computing it.   */
  
    temp = get_last_insn ();
!   op0 = expand_expr (incremented, NULL_RTX, VOIDmode, 0);
  
    /* If OP0 is a SUBREG made for a promoted variable, we cannot increment
       in place but instead must do sign- or zero-extension during assignment,
--- 8814,8820 ----
       and insns were generated in computing it.   */
  
    temp = get_last_insn ();
!   op0 = expand_expr (incremented, NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_RW);
  
    /* If OP0 is a SUBREG made for a promoted variable, we cannot increment
       in place but instead must do sign- or zero-extension during assignment,
***************
*** 8554,8560 ****
  
    op0_is_copy = ((GET_CODE (op0) == SUBREG || GET_CODE (op0) == REG)
  		 && temp != get_last_insn ());
!   op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);
  
    /* Decide whether incrementing or decrementing.  */
    if (TREE_CODE (exp) == POSTDECREMENT_EXPR
--- 8845,8852 ----
  
    op0_is_copy = ((GET_CODE (op0) == SUBREG || GET_CODE (op0) == REG)
  		 && temp != get_last_insn ());
!   op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode,
! 		     EXPAND_MEMORY_USE_BAD);
  
    /* Decide whether incrementing or decrementing.  */
    if (TREE_CODE (exp) == POSTDECREMENT_EXPR
***************
*** 8654,8660 ****
      temp = copy_rtx (value = op0);
  
    /* Increment however we can.  */
!   op1 = expand_binop (mode, this_optab, value, op1, op0,
  		      TREE_UNSIGNED (TREE_TYPE (exp)), OPTAB_LIB_WIDEN);
    /* Make sure the value is stored into OP0.  */
    if (op1 != op0)
--- 8946,8954 ----
      temp = copy_rtx (value = op0);
  
    /* Increment however we can.  */
!   op1 = expand_binop (mode, this_optab, value, op1,
!   		      (flag_check_memory_usage && !in_check_memory_usage) 
!   		        ? NULL_RTX : op0,
  		      TREE_UNSIGNED (TREE_TYPE (exp)), OPTAB_LIB_WIDEN);
    /* Make sure the value is stored into OP0.  */
    if (op1 != op0)
***************
*** 8820,8826 ****
    while (cleanups_this_call != old_cleanups)
      {
        (*interim_eh_hook) (TREE_VALUE (cleanups_this_call));
!       expand_expr (TREE_VALUE (cleanups_this_call), const0_rtx, VOIDmode, 0);
        cleanups_this_call = TREE_CHAIN (cleanups_this_call);
      }
  }
--- 9114,9121 ----
    while (cleanups_this_call != old_cleanups)
      {
        (*interim_eh_hook) (TREE_VALUE (cleanups_this_call));
!       expand_expr (TREE_VALUE (cleanups_this_call), const0_rtx, VOIDmode,
! 		   EXPAND_MEMORY_USE_BAD);
        cleanups_this_call = TREE_CHAIN (cleanups_this_call);
      }
  }
diff -rc gcc-2.7.2.orig/expr.h gcc-2.7.2/expr.h
*** gcc-2.7.2.orig/expr.h	Sun Jul 21 10:24:47 1996
--- gcc-2.7.2/expr.h	Tue Jul 23 15:28:05 1996
***************
*** 52,61 ****
     EXPAND_SUM means it is ok to return a PLUS rtx or MULT rtx.
     EXPAND_INITIALIZER is similar but also record any labels on forced_labels.
     EXPAND_CONST_ADDRESS means it is ok to return a MEM whose address
!     is a constant that is not a legitimate address.  */
  enum expand_modifier {EXPAND_NORMAL, EXPAND_SUM,
! 		      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER};
  
  /* List of labels that must never be deleted.  */
  extern rtx forced_labels;
  
--- 52,83 ----
     EXPAND_SUM means it is ok to return a PLUS rtx or MULT rtx.
     EXPAND_INITIALIZER is similar but also record any labels on forced_labels.
     EXPAND_CONST_ADDRESS means it is ok to return a MEM whose address
!     is a constant that is not a legitimate address.
!    EXPAND_MEMORY_USE_* are explained below.  */
  enum expand_modifier {EXPAND_NORMAL, EXPAND_SUM,
! 		      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER,
! 		      EXPAND_MEMORY_USE_WO, EXPAND_MEMORY_USE_RW,
! 		      EXPAND_MEMORY_USE_BAD, EXPAND_MEMORY_USE_DONT};
  
+ /* Argument for chkr_* functions.
+    MEMORY_USE_RO: the pointer reads memory.
+    MEMORY_USE_WO: the pointer writes to memory.
+    MEMORY_USE_RW: the pointer modifies memory (ie it reads and writes). An
+                   example is (*ptr)++
+    MEMORY_USE_BAD: use this if you don't know the behavior of the pointer, or
+                    if you know there are no pointers.  Using an INDIRECT_REF
+                    with MEMORY_USE_BAD will abort.
+    MEMORY_USE_TW: just test for writing, without update.  Special.
+    MEMORY_USE_DONT: the memory is neither read nor written.  This is used by
+    		   '->' and '.'.  */
+ enum memory_use_mode {MEMORY_USE_BAD = 0, MEMORY_USE_RO = 1,
+ 		      MEMORY_USE_WO = 2, MEMORY_USE_RW = 3,
+ 		      MEMORY_USE_TW = 6, MEMORY_USE_DONT = 99};
+ 
+ /* Avoid recursion: GCC must not call a checker function for the arguments of
+    a checker function.  */
+ extern int in_check_memory_usage;
+ 
  /* List of labels that must never be deleted.  */
  extern rtx forced_labels;
  
***************
*** 163,169 ****
  ((SIZE).var == 0 ? GEN_INT ((SIZE).constant)	\
   : expand_expr (size_binop (PLUS_EXPR, (SIZE).var,			\
  			    size_int ((SIZE).constant)),		\
! 		NULL_RTX, VOIDmode, 0))
  
  /* Convert the implicit sum in a `struct args_size' into a tree.  */
  #define ARGS_SIZE_TREE(SIZE)						\
--- 185,191 ----
  ((SIZE).var == 0 ? GEN_INT ((SIZE).constant)	\
   : expand_expr (size_binop (PLUS_EXPR, (SIZE).var,			\
  			    size_int ((SIZE).constant)),		\
! 		NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD))
  
  /* Convert the implicit sum in a `struct args_size' into a tree.  */
  #define ARGS_SIZE_TREE(SIZE)						\
***************
*** 447,452 ****
--- 469,480 ----
  extern rtx fixunstfsi_libfunc;
  extern rtx fixunstfdi_libfunc;
  extern rtx fixunstfti_libfunc;
+ 
+ /* For check-memory-usage.  */
+ extern rtx chkr_check_addr_libfunc;
+ extern rtx chkr_set_right_libfunc;
+ extern rtx chkr_copy_bitmap_libfunc;
+ extern rtx chkr_check_exec_libfunc;
  
  typedef rtx (*rtxfun) ();
  
diff -rc gcc-2.7.2.orig/flags.h gcc-2.7.2/flags.h
*** gcc-2.7.2.orig/flags.h	Sun Jul 21 10:25:38 1996
--- gcc-2.7.2/flags.h	Tue Jul 23 15:28:05 1996
***************
*** 362,364 ****
--- 362,369 ----
  
  extern int current_function_has_nonlocal_goto;
  
+ /* Nonzero if GCC must add code to check memory access (used by Checker).  */
+ 
+ extern int flag_check_memory_usage;
+ 
+ 
diff -rc gcc-2.7.2.orig/function.c gcc-2.7.2/function.c
*** gcc-2.7.2.orig/function.c	Sun Jul 21 10:40:21 1996
--- gcc-2.7.2/function.c	Fri Jul 26 16:18:01 1996
***************
*** 1293,1298 ****
--- 1293,1311 ----
        if (GET_CODE (XEXP (reg, 0)) == PLUS)
  	XEXP (reg, 0) = copy_rtx (XEXP (reg, 0));
      }
+   else
+     return;
+   
+   if (flag_check_memory_usage && !in_check_memory_usage)
+     {
+       in_check_memory_usage = 1;	/* Avoid recursion.  */
+       emit_library_call (chkr_set_right_libfunc, 0,
+ 			 VOIDmode, 3,
+ 			 XEXP (reg, 0), Pmode,
+ 			 GEN_INT (GET_MODE_SIZE (GET_MODE (reg))), SImode,
+ 			 GEN_INT (MEMORY_USE_RW), SImode);
+       in_check_memory_usage = 0;
+     }
  }
  
  /* Subroutine of put_var_into_stack.  This puts a single pseudo reg REG
***************
*** 3598,3603 ****
--- 3611,3630 ----
  				   validize_mem (stack_parm),
  				   size_stored / UNITS_PER_WORD,
  				   int_size_in_bytes (TREE_TYPE (parm)));
+ 	      if (flag_check_memory_usage && !in_check_memory_usage)
+ 		{
+ 		  in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 		  push_to_sequence (conversion_insns);
+ 		  emit_library_call (chkr_set_right_libfunc, 0,
+ 				     VOIDmode, 3,
+ 				     XEXP (stack_parm, 0), Pmode,
+ 				     GEN_INT (int_size_in_bytes (TREE_TYPE (parm))),
+ 				     SImode,
+ 				     GEN_INT (MEMORY_USE_RW), SImode);
+ 	 	  in_check_memory_usage = 0;
+ 		  conversion_insns = get_insns ();
+ 		  end_sequence ();
+ 		}
  	    }
  	  DECL_RTL (parm) = stack_parm;
  	}
***************
*** 3739,3744 ****
--- 3766,3783 ----
  
  	      store_expr (parm, copy, 0);
  	      emit_move_insn (parmreg, XEXP (copy, 0));
+ #if 1
+ 	      if (flag_check_memory_usage && !in_check_memory_usage)
+ 		{
+ 		  in_check_memory_usage = 1;	/* Avoid recursion.  */
+ 		  emit_library_call (chkr_set_right_libfunc, 0,
+ 				     VOIDmode, 3,
+ 				     XEXP (copy, 0), Pmode,
+ 				     GEN_INT (int_size_in_bytes (type)), SImode,
+ 				     GEN_INT (MEMORY_USE_RW), SImode);
+ 		  in_check_memory_usage = 0;
+ 		}
+ #endif
  	      conversion_insns = get_insns ();
  	      did_conversion = 1;
  	      end_sequence ();
***************
*** 3881,3887 ****
  		emit_move_insn (validize_mem (stack_parm),
  				validize_mem (entry_parm));
  	    }
! 
  	  DECL_RTL (parm) = stack_parm;
  	}
        
--- 3920,3938 ----
  		emit_move_insn (validize_mem (stack_parm),
  				validize_mem (entry_parm));
  	    }
! 	  if (flag_check_memory_usage && !in_check_memory_usage)
! 	    {
! 	      in_check_memory_usage = 1;	/* Avoid recursion.  */
! 	      push_to_sequence (conversion_insns);
! 	      emit_library_call (chkr_set_right_libfunc, 0,
! 				 VOIDmode, 3,
! 				 XEXP (stack_parm, 0), Pmode,
! 				 GEN_INT (GET_MODE_SIZE (GET_MODE (entry_parm))), SImode,
! 				 GEN_INT (MEMORY_USE_RW), SImode);
! 	      in_check_memory_usage = 0;
! 	      conversion_insns = get_insns ();
! 	      end_sequence ();
! 	    }
  	  DECL_RTL (parm) = stack_parm;
  	}
        
***************
*** 3936,3942 ****
      = (stack_args_size.var == 0 ? GEN_INT (-stack_args_size.constant)
         : expand_expr (size_binop (MINUS_EXPR, stack_args_size.var,	
  				  size_int (-stack_args_size.constant)),   
! 		      NULL_RTX, VOIDmode, 0));
  #else
    current_function_arg_offset_rtx = ARGS_SIZE_RTX (stack_args_size);
  #endif
--- 3987,3993 ----
      = (stack_args_size.var == 0 ? GEN_INT (-stack_args_size.constant)
         : expand_expr (size_binop (MINUS_EXPR, stack_args_size.var,	
  				  size_int (-stack_args_size.constant)),   
! 		      NULL_RTX, VOIDmode, EXPAND_MEMORY_USE_BAD));
  #else
    current_function_arg_offset_rtx = ARGS_SIZE_RTX (stack_args_size);
  #endif
***************
*** 5208,5214 ****
  
    /* Evaluate now the sizes of any types declared among the arguments.  */
    for (tem = nreverse (get_pending_sizes ()); tem; tem = TREE_CHAIN (tem))
!     expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode, 0);
  
    /* Make sure there is a line number after the function entry setup code.  */
    force_next_line_note ();
--- 5259,5265 ----
  
    /* Evaluate now the sizes of any types declared among the arguments.  */
    for (tem = nreverse (get_pending_sizes ()); tem; tem = TREE_CHAIN (tem))
!     expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode, EXPAND_MEMORY_USE_BAD);
  
    /* Make sure there is a line number after the function entry setup code.  */
    force_next_line_note ();
diff -rc gcc-2.7.2.orig/invoke.texi gcc-2.7.2/invoke.texi
*** gcc-2.7.2.orig/invoke.texi	Sun Jul 21 10:25:05 1996
--- gcc-2.7.2/invoke.texi	Tue Jul 23 15:28:07 1996
***************
*** 114,121 ****
  @smallexample
  -fsyntax-only  -pedantic  -pedantic-errors
  -w  -W  -Wall  -Waggregate-return  -Wbad-function-cast
! -Wcast-align -Wcast-qual  -Wchar-subscript  -Wcomment
! -Wconversion -Wenum-clash  -Werror  -Wformat
  -Wid-clash-@var{len}  -Wimplicit  -Wimport  -Winline
  -Wlarger-than-@var{len}  -Wmissing-declarations
  -Wmissing-prototypes  -Wnested-externs
--- 114,121 ----
  @smallexample
  -fsyntax-only  -pedantic  -pedantic-errors
  -w  -W  -Wall  -Waggregate-return  -Wbad-function-cast
! -Wcast-align -Wcast-qual  -Wchar-subscript  -Wcheck-memory-usage
! -Wcomment  -Wconversion -Wenum-clash  -Werror  -Wformat
  -Wid-clash-@var{len}  -Wimplicit  -Wimport  -Winline
  -Wlarger-than-@var{len}  -Wmissing-declarations
  -Wmissing-prototypes  -Wnested-externs
***************
*** 323,331 ****
  @item Code Generation Options
  @xref{Code Gen Options,,Options for Code Generation Conventions}.
  @smallexample
! -fcall-saved-@var{reg}  -fcall-used-@var{reg} 
! -ffixed-@var{reg}  -finhibit-size-directive 
! -fno-common  -fno-ident  -fno-gnu-linker
  -fpcc-struct-return  -fpic  -fPIC 
  -freg-struct-return  -fshared-data  -fshort-enums
  -fshort-double  -fvolatile  -fvolatile-global
--- 323,332 ----
  @item Code Generation Options
  @xref{Code Gen Options,,Options for Code Generation Conventions}.
  @smallexample
! -fcall-saved-@var{reg}  -fcall-used-@var{reg}
! -fcheck-memory-usage  -ffixed-@var{reg}
! -finhibit-size-directive -fno-common
! -fno-ident  -fno-gnu-linker
  -fpcc-struct-return  -fpic  -fPIC 
  -freg-struct-return  -fshared-data  -fshort-enums
  -fshort-double  -fvolatile  -fvolatile-global
***************
*** 1315,1320 ****
--- 1316,1327 ----
  @end smallexample
  @end itemize
  
+ @item -Wcheck-memory-usage
+ @cindex warning for check memory usage
+ Same as @samp{-Wuninitialize} @samp{-Wimplicit} @samp{-Wformat}
+ @samp{-Wstrict-prototypes}.  This
+ warning should be enable if you want to detect bad memory usage.
+ 
  @item -Wtraditional
  Warn about certain constructs that behave differently in traditional and
  ANSI C.
***************
*** 4210,4215 ****
--- 4217,4228 ----
  Pack all structure members together without holes.  Usually you would
  not want to use this option, since it makes the code suboptimal, and
  the offsets of structure members won't agree with system libraries.
+ 
+ @item -fcheck-memory-usage
+ Generate extra code to check each memory access.  Such code is suitable for
+ a detector of bad memory access such as @code{Checker}.  Note that symbol
+ names are prefixed with @samp{chkr$} and the @code{asm} and @code{__asm__}
+ keywords cannot be used.
  
  @item +e0
  @itemx +e1
Common subdirectories: gcc-2.7.2.orig/objc and gcc-2.7.2/objc
diff -rc gcc-2.7.2.orig/optabs.c gcc-2.7.2/optabs.c
*** gcc-2.7.2.orig/optabs.c	Sun Jul 21 10:25:07 1996
--- gcc-2.7.2/optabs.c	Tue Jul 23 15:28:07 1996
***************
*** 201,206 ****
--- 201,211 ----
  rtx fixunstfdi_libfunc;
  rtx fixunstfti_libfunc;
  
+ rtx chkr_check_addr_libfunc;
+ rtx chkr_set_right_libfunc;
+ rtx chkr_copy_bitmap_libfunc;
+ rtx chkr_check_exec_libfunc;
+ 
  /* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)
     gives the gen_function to make a branch to test that condition.  */
  
***************
*** 4295,4300 ****
--- 4300,4311 ----
    fixunstfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, "__fixunstfsi");
    fixunstfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, "__fixunstfdi");
    fixunstfti_libfunc = gen_rtx (SYMBOL_REF, Pmode, "__fixunstfti");
+ 
+   /* For check-memory-usage.  */
+   chkr_check_addr_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, "chkr_check_addr");
+   chkr_set_right_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, "chkr_set_right");
+   chkr_copy_bitmap_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, "chkr_copy_bitmap");
+   chkr_check_exec_libfunc = gen_rtx (SYMBOL_REF, VOIDmode, "chkr_check_exec");
  
  #ifdef INIT_TARGET_OPTABS
    /* Allow the target to add more libcalls or rename some, etc.  */
diff -rc gcc-2.7.2.orig/rtl.c gcc-2.7.2/rtl.c
*** gcc-2.7.2.orig/rtl.c	Thu Jun 15 13:02:59 1995
--- gcc-2.7.2/rtl.c	Sat Jul 27 09:50:38 1996
***************
*** 316,321 ****
--- 316,325 ----
  	  break;
  
  	case '0':
+ #if 1
+ 	  bcopy (&XEXP (orig, i), &XEXP (copy, i), sizeof (int));
+ 	  break;
+ #endif
  	case 'u':
  	  XEXP (copy, i) = XEXP (orig, i);
  	  break;
diff -rc gcc-2.7.2.orig/stmt.c gcc-2.7.2/stmt.c
*** gcc-2.7.2.orig/stmt.c	Sun Jul 21 10:25:09 1996
--- gcc-2.7.2/stmt.c	Tue Jul 23 15:28:08 1996
***************
*** 607,612 ****
--- 607,621 ----
  #endif
  
        emit_queue ();
+       /* Be sure the function is executable.  */
+       if (flag_check_memory_usage && ! in_check_memory_usage)
+ 	{
+ 	  in_check_memory_usage = 1;
+ 	  emit_library_call (chkr_check_exec_libfunc, 0,
+ 			     VOIDmode, 1,
+ 			     x, Pmode);
+ 	  in_check_memory_usage = 0;
+ 	}
        do_pending_stack_adjust ();
        emit_indirect_jump (x);
      }
***************
*** 1334,1339 ****
--- 1343,1354 ----
        return;
      }
  
+   if (flag_check_memory_usage)
+     {
+       error ("`asm' cannot be currently used with `-fcheck-memory-usage'");
+       return;
+     }
+ 
    if (TREE_CODE (body) == ADDR_EXPR)
      body = TREE_OPERAND (body, 0);
  
***************
*** 1382,1387 ****
--- 1397,1408 ----
        return;
      }
  
+   if (flag_check_memory_usage)
+     {
+       error ("`asm' cannot be currently used with `-fcheck-memory-usage'");
+       return;
+     }
+ 
    /* Count the number of meaningful clobbered registers, ignoring what
       we would ignore later.  */
    nclobbers = 0;
***************
*** 1465,1471 ****
  	    mark_addressable (TREE_VALUE (tail));
  
  	  output_rtx[i]
! 	    = expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode, 0);
  
  	  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)
  	    error ("output number %d not directly addressable", i);
--- 1486,1493 ----
  	    mark_addressable (TREE_VALUE (tail));
  
  	  output_rtx[i]
! 	    = expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode,
! 			   EXPAND_MEMORY_USE_WO);
  
  	  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)
  	    error ("output number %d not directly addressable", i);
diff -rc gcc-2.7.2.orig/toplev.c gcc-2.7.2/toplev.c
*** gcc-2.7.2.orig/toplev.c	Sun Jul 21 10:25:11 1996
--- gcc-2.7.2/toplev.c	Sun Aug 25 08:49:45 1996
***************
*** 93,98 ****
--- 93,101 ----
  #endif
  
  extern int rtx_equal_function_value_matters;
+ #if 0
+ extern int in_check_memory_usage;
+ #endif
  
  #if ! (defined (VMS) || defined (OS2))
  extern char **environ;
***************
*** 521,526 ****
--- 524,534 ----
  /* Tag all structures with __attribute__(packed) */
  int flag_pack_struct = 0;
  
+ /* -fcheck-memory-usage causes extra code to be generated in order to check
+    memory accesses.  This is used by a detector of bad memory accesses such
+    as Checker.  */
+ int flag_check_memory_usage = 0;
+ 
  /* Table of language-independent -f options.
     STRING is the option name.  VARIABLE is the address of the variable.
     ON_VALUE is the value to store in VARIABLE
***************
*** 567,573 ****
    {"verbose-asm", &flag_verbose_asm, 1},
    {"gnu-linker", &flag_gnu_linker, 1},
    {"pack-struct", &flag_pack_struct, 1},
!   {"bytecode", &output_bytecode, 1}
  };
  
  /* Table of language-specific options.  */
--- 575,582 ----
    {"verbose-asm", &flag_verbose_asm, 1},
    {"gnu-linker", &flag_gnu_linker, 1},
    {"pack-struct", &flag_pack_struct, 1},
!   {"bytecode", &output_bytecode, 1},
!   {"check-memory-usage", &flag_check_memory_usage, 1}
  };
  
  /* Table of language-specific options.  */
***************
*** 607,612 ****
--- 616,622 ----
    "-fno-short-enums",
  
    "-Wall",
+   "-Wcheck-memory-usage",
    "-Wbad-function-cast",
    "-Wno-bad-function-cast",
    "-Wcast-qual",
***************
*** 3070,3075 ****
--- 3080,3091 ----
  	     fprintf (global_reg_dump_file, "\n;; Function %s\n\n",
  		      IDENTIFIER_POINTER (DECL_NAME (decl))));
  
+ #if 0
+   /* If 'flag_check_memory_usage' is set, don't check the memory used by 
+      stack slots.  */
+   in_check_memory_usage = 1;
+ #endif
+ 
    /* Unless we did stupid register allocation,
       allocate remaining pseudo-regs, then do the reload pass
       fixing up any insns that are invalid.  */
***************
*** 3279,3284 ****
--- 3295,3306 ----
  
    resume_temporary_allocation ();
  
+ #if 0
+   /* If 'flag_check_memory_usage' is set, check the memory used.  */
+ 
+   in_check_memory_usage = 0;
+ #endif
+ 
    /* The parsing time is all the time spent in yyparse
       *except* what is spent in this function.  */
  
***************
*** 3820,3825 ****
--- 3842,3853 ----
        else
  	filename = argv[i];
      }
+ 
+   /* Checker uses the frame pointer. */
+ #ifndef CAN_DEBUG_WITHOUT_FP
+   if (flag_check_memory_usage)
+     flag_omit_frame_pointer = 0;
+ #endif
  
    /* Initialize for bytecode output.  A good idea to do this as soon as
       possible after the "-f" options have been parsed. */
diff -rc gcc-2.7.2.orig/tree.h gcc-2.7.2/tree.h
*** gcc-2.7.2.orig/tree.h	Sun Jul 21 10:25:13 1996
--- gcc-2.7.2/tree.h	Tue Jul 23 15:28:09 1996
***************
*** 93,98 ****
--- 93,99 ----
    BUILT_IN_CONSTANT_P,
    BUILT_IN_FRAME_ADDRESS,
    BUILT_IN_RETURN_ADDRESS,
+   BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
    BUILT_IN_CALLER_RETURN_ADDRESS,
    BUILT_IN_APPLY_ARGS,
    BUILT_IN_APPLY,
diff -rc gcc-2.7.2.orig/varasm.c gcc-2.7.2/varasm.c
*** gcc-2.7.2.orig/varasm.c	Sun Jul 21 10:25:15 1996
--- gcc-2.7.2/varasm.c	Tue Jul 23 15:28:10 1996
***************
*** 55,60 ****
--- 55,66 ----
  #define ASM_STABS_OP ".stabs"
  #endif
  
+ /* Define the prefix to use when check_memory_usage_flag is enable.  */
+ #ifndef CHKR_PREFIX
+ #define CHKR_PREFIX "chkr$"
+ #define CHKR_PREFIX_SIZE (sizeof (CHKR_PREFIX) - 1)
+ #endif
+ 
  /* This macro gets just the user-specified name
     out of the string in a SYMBOL_REF.  On most machines,
     we discard the * if any and that's all.  */
***************
*** 288,293 ****
--- 294,300 ----
       tree decl;
  {
    char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));
+   char *new_name = name;
  
    if (output_bytecode)
      {
***************
*** 311,316 ****
--- 318,336 ----
        name = obstack_copy0 (saveable_obstack, label, strlen (label));
        var_labelno++;
      }
+   else
+     {
+       /* When `-fcheck-memory-usage' is used, every function name is prefixed.
+          Even static functions are prefixed because they could be declared
+          latter.  Note that a nested function name is not prefixed.  */
+       if (flag_check_memory_usage)
+         {
+           new_name = (char *) alloca (strlen (name) + CHKR_PREFIX_SIZE + 1);
+           strcpy (new_name, CHKR_PREFIX);
+           strcpy (new_name + CHKR_PREFIX_SIZE, name);
+           name = obstack_copy0 (saveable_obstack, new_name, strlen (new_name));
+         }
+     }
  
    if (DECL_RTL (decl) == 0)
      {
***************
*** 585,590 ****
--- 605,623 ----
  	  if (name == 0)
  	    abort ();
  
+ 	  /* When `-fcheck-memory-usage' is used, the functions names are
+ 	     prefixed.  Only nested function names are not prefixed.  */
+ 	  if (flag_check_memory_usage && TREE_CODE (decl) == FUNCTION_DECL)
+ 	    {
+ 	      char *new_name;
+ 	      new_name = (char *) alloca (strlen (name) + CHKR_PREFIX_SIZE 
+ 	      				  + 1);
+ 	      strcpy (new_name, CHKR_PREFIX);
+ 	      strcpy (new_name + CHKR_PREFIX_SIZE, name);
+ 	      name = obstack_copy0 (saveable_obstack,
+ 	      			   new_name, strlen (new_name));
+ 	    }
+ 
  	  DECL_RTL (decl) = gen_rtx (MEM, DECL_MODE (decl),
  				     gen_rtx (SYMBOL_REF, Pmode, name));
  
***************
*** 1565,1570 ****
--- 1598,1606 ----
    int save_warn_id_clash = warn_id_clash;
  
    STRIP_NAME_ENCODING (real_name, name);
+   if (flag_check_memory_usage 
+       && ! bcmp (real_name, CHKR_PREFIX, CHKR_PREFIX_SIZE))
+     real_name = real_name + CHKR_PREFIX_SIZE;
  
    /* Don't warn about an identifier name length clash on this name, since
       it can be a user symbol suffixed by a number.  */
diff -rc gcc-2.7.2.orig/config/sparc/sparc.c gcc-2.7.2/config/sparc/sparc.c
*** gcc-2.7.2.orig/config/sparc/sparc.c	Sat Dec  2 14:35:53 1995
--- gcc-2.7.2/config/sparc/sparc.c	Wed Jul 24 17:50:56 1996
***************
*** 3174,3179 ****
--- 3174,3198 ----
  		    gen_rtx (REG, DFmode,
  			     BASE_INCOMING_ARG_REG (DFmode) + regno));
  
+   if (flag_check_memory_usage && !in_check_memory_usage)
+     {
+       in_check_memory_usage = 1;	/* Avoid recursion.  */
+       emit_library_call (chkr_set_right_libfunc, 0,
+ 			 VOIDmode, 3,
+ 			 regbuf, Pmode,
+ 			 GEN_INT (n_intregs * UNITS_PER_WORD), SImode,
+ 			 GEN_INT (MEMORY_USE_RW), SImode);
+       emit_library_call (chkr_set_right_libfunc, 0,
+ 			 VOIDmode, 3,
+ 			 fpregs, Pmode,
+ 			 GEN_INT (UNITS_PER_WORD 
+ 			 	  * GET_MODE_SIZE (SFmode)
+ 				  * (NPARM_REGS (SFmode) - first_floatreg)),
+ 			 SImode,
+ 			 GEN_INT (MEMORY_USE_RW), SImode);
+       in_check_memory_usage = 0;
+     }
+ 
    /* Return the address of the regbuf.  */
  
    return XEXP (regbuf, 0);
***************
*** 3212,3217 ****
--- 3231,3248 ----
  		     frame_pointer_rtx,
  		     GEN_INT (STACK_POINTER_OFFSET
  			      + UNITS_PER_WORD * first_reg));
+ 
+   if (flag_check_memory_usage && !in_check_memory_usage)
+     {
+       in_check_memory_usage = 1;	/* Avoid recursion.  */
+       emit_library_call (chkr_set_right_libfunc, 0,
+ 			 VOIDmode, 3,
+ 			 address, Pmode,
+ 			 GEN_INT (UNITS_PER_WORD 
+ 			 	  * (NPARM_REGS (SImode) - first_reg)), SImode,
+ 			 GEN_INT (MEMORY_USE_RW), SImode);
+       in_check_memory_usage = 0;
+     }
  
    return address;
  }
