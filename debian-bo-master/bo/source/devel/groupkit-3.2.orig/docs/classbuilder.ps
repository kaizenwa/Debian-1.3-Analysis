%!PS-Adobe-3.0
%%Title: (gk31 - class builder)
%%Creator: (Microsoft Word: LaserWriter 8.0 8.0)
%%CreationDate: (9:50 AM Tuesday, October 24, 1995)
%%For: (Mark Roseman)
%%Pages: 11
%%DocumentFonts: Helvetica-Bold Times-Roman Times-Bold Times-Italic Times-BoldItalic Courier Courier-Bold Courier-BoldOblique Courier-Oblique
%%DocumentNeededFonts: Helvetica-Bold Times-Roman Times-Bold Times-Italic Times-BoldItalic Courier Courier-Bold Courier-BoldOblique Courier-Oblique
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 263 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 80 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_level1_basicimages
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$i false def
/flipinvert
statusdict begin
version cvr 47.0 lt
end
def
/iw Z
/ih Z
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/$z Z
/bpc Z
/smooth_moredata Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
$i flipinvert
and
xor
/polarity xs
/smoothflag xs
:T
scale
/$z exch string store
/bpc xs
/ih xs
/iw xs
/smoothflag
smoothflag
bpc 1 eq and
smoothflag and
userdict/sc_smooth known and
vmstatus pop exch pop iw 3 mul sub 1000 gt and
iw 4 mul 7 add 8 idiv 4 mul 65535 le and
store
smoothflag{
iw
ih
$z
iw 7 add 8 idiv 4 mul string
iw 4 mul 7 add 8 idiv 4 mul string
true
false
sc_initsmooth
/iw iw 4 mul store
/ih ih 4 mul store
}if
/setupimageproc datatype 0 eq datatype 1 eq or{
smoothflag{
{
[
/smooth_moredata cvx[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx[
$z
]cvx/ifelse cvx
/sc_smooth cvx
/smooth_moredata/exch cvx/store cvx
]cvx bind
/smooth_moredata true store
dup exec pop dup exec pop
}
}{
{
[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx bind
}
}ifelse
}{
(error, can't use level2 data acquisition procs for level1)print flush stop
}ifelse
store
}bd
/:j{im_save restore}bd
/:g
{
1 setgray
0 0 1 1 rF
0 setgray
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:h
{
setrgbcolor
0 0 1 1 rF
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:i
{
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_basicimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$j 9 dict dup
begin
/ImageType 1 def
/MultipleDataSource false def
end
def
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/bpc Z
/ih Z
/iw Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
datatype 0 lt datatype 4 gt or{
(error, datatype out of range)print flush stop
}if
/setupimageproc{
{
currentfile
}
{
currentfile 0(%ADOeod)/SubFileDecode filter/ASCIIHexDecode filter
}
{
currentfile/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter
}
}datatype get store
{
[1 0]
}{
[0 1]
}ifelse
/polarity xs
/smoothflag xs
:T
scale
pop
/bpc xs
/ih xs
/iw xs
$c setcolorspace
}bd
/:j{im_save restore}bd
/:g
{
1 G
0 0 1 1 rF
0 G
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:h
{
:F
0 0 1 1 rF
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:i
{
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
%%EndFile
level2 not endnoload
level2 startnoload
%%BeginFile: adobe_psp_level1_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/testsystemdict
{
where
{
systemdict eq
{
true
}{
false
}ifelse
}{
false
}ifelse
}bd
/rgbclut Z
/bwclut Z
/ncolors 1 def
/colorimage where{pop true}{false}ifelse
{
/ncolors 0
statusdict begin
/processcolors where
{
pop
pop
processcolors
}{
/deviceinfo where
{pop deviceinfo/Colors known
{pop{deviceinfo/Colors get}}if
}if
}ifelse
end
store
ncolors 0 ne
{
/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not
{
/ncolors 0 store
}if
}if
}if
ncolors 1 ne ncolors 3 ne ncolors 4 ne and and{/ncolors 0 store}if
ncolors 1 ne dup startnoload
/expandfactor Z
/bwclut Z
/expandbw
{
expandfactor mul round cvi bwclut exch get 255 div
}bd
/:k
{
pop/bwclut xs
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/expandfactor xs
[
/expandbw load/exec load dup
currenttransfer exch
]cvx bind settransfer
iw ih bpc[iw 0 0 ih 0 0]setupimageproc
image
}bd
endnoload
ncolors dup 3 eq exch 4 eq or
not dup startnoload
/Dclut Z
/Cclut Z
/Bclut Z
/Aclut Z
/ncompute Z
/rclut Z
/gclut Z
/bclut Z
/bit3x Z
/bit1x Z
/concatutil
{
/exec load
7 -1 roll/exec load
}bd
/defsubclut
{
1 add getinterval store
}bd
/spconcattransfer
{
/Dclut xs
/Cclut xs
/Bclut xs
/Aclut xs
/ncompute exch load store
currentcolortransfer
[
{
Aclut ncompute
}
concatutil
]cvx
[
{
Bclut ncompute
}
concatutil
]cvx
[
{
Cclut ncompute
}
concatutil
]cvx
[
{
Dclut ncompute
}
concatutil
]cvx
setcolortransfer
}bd
/setuprgbcluts
{
/bit3x
rgbclut length
3 sub
store
/bit1x bit3x 3 idiv store
/rclut rgbclut store
/gclut rclut 1 bit3x defsubclut
/bclut rclut 2 bit3x defsubclut
}bd
endnoload
ncolors 3 ne
dup startnoload
/3compute
{
exch bit3x
mul
round
cvi
get 255 div
}bd
/:k
{
/rgbclut xs
/bwclut xs
setuprgbcluts
/3compute rclut gclut bclut dup
spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup
]cvx
{}{}true 3 colorimage
}bd
endnoload
ncolors 4 ne
dup startnoload
/cmykindex Z
/bit4x Z
/cmykclut Z
/cclut Z
/mclut Z
/yclut Z
/kclut Z
/ftoint
{
1 exch sub 255 mul round cvi
}bd
/stuffclut
{
cmykindex 3 -1 roll put
}bd
/4compute{exch bit4x mul round cvi get 255 div}bd
/invalidcolortable? true def
/computecmykclut
{
setuprgbcluts
/bit4x
rgbclut length
3 idiv
4 mul
4 sub
store
/cmykclut bit4x 4 add string store
/cclut cmykclut store
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 store
0 1 bit1x
{
dup/cmykindex exch
bit1x exch sub
4 mul store
3 mul dup
rclut exch get 255 div
exch dup
gclut exch get 255 div
exch
bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint
kclut stuffclut
ftoint
yclut stuffclut
ftoint
mclut stuffclut
ftoint
cclut stuffclut
}for
}bd
/:k
{
/rgbclut xs
/bwclut xs
invalidcolortable?
{
computecmykclut
}if
/4compute cclut mclut yclut kclut spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup dup
]cvx
{}{}{}
true 4 colorimage
}bd
endnoload
ncolors 0 ne
dup startnoload
/byte Z
/$x Z
/padfix Z
/lookupandstore
{
3 mul
3 getinterval
putinterval exch
3 add exch 3 copy
}bd
/8lookup/lookupandstore load store
/4lookup
{
/byte 1 index store
-4 bitshift
lookupandstore
byte 15 and
lookupandstore
}bd
/2lookup
{
/byte 1 index store
-6 bitshift
lookupandstore
byte -4 bitshift
3 and
lookupandstore
byte -2 bitshift
3 and
lookupandstore
byte 3 and
lookupandstore
}bd
/colorexpand
{
$x 0 rgbclut
3 copy
7 -1 roll
/$l load
forall
pop pop pop pop pop
0 padfix getinterval
}bd
/createexpandstr
{
/$x exch $z length mul string store
}bd
/:k
{
/rgbclut xs
/bwclut xs
/$l
bpc 8 eq
{
3 createexpandstr
/8lookup
}{
bpc 4 eq
{
6 createexpandstr
/4lookup
}{
12 createexpandstr
/2lookup
}ifelse
}ifelse
load store
/padfix 3 iw mul store
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load/colorexpand load/exec load]cvx
false 3 colorimage
}bd
endnoload
/colorimage where
{
systemdict eq
{
systemdict/setcmykcolor known
}{
true
}ifelse
}{
false
}ifelse
dup not startnoload
/:l
{
iw ih 8[iw 0 0 ih 0 0]
setupimageproc false 3
colorimage
}bd
dup not endnoload
dup startnoload
/str Z
/len Z
/smlen Z
/rstr Z
/gstr Z
/bstr Z
/rgbtogray
{
/str xs
/len str length store
/smlen len 3 idiv store
/rstr str store
/gstr str 1 len 1 sub getinterval store
/bstr str 2 len 2 sub getinterval store
str dup
0 1 smlen 1 sub
{
dup 3 mul
rstr 1 index get .3 mul
gstr 2 index get .59 mul add
bstr 3 -1 roll get .11 mul add
round cvi
put dup
}for
pop 0 smlen getinterval
}bd
/:l
{
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load/rgbtogray load/exec load]cvx bind
image
}bd
endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/rgbclut Z
/hival Z
/:k
{
/rgbclut xs
pop
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/hival xs
[/Indexed $c hival rgbclut]setcolorspace
$j dup begin
/Width iw def
/Height ih def
/Decode[0 hival]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent bpc def
/Interpolate smoothflag def
end
image
}bd
/:l
{
$j dup begin
/Width iw def
/Height ih def
/Decode[0 1 0 1 0 1]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 8 def
/Interpolate smoothflag def
end
image
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_smooth
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/junk Z
/$z Z
userdict/sc_smooth known not
save
systemdict/eexec known
systemdict/cexec known and{
countdictstack mark
false
<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
{eexec}stopped{
cleartomark
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse
false
}{
{cleartomark pop true}{cleartomark pop false}ifelse
}ifelse
}{false}ifelse
exch restore and
level2 not and
vmstatus exch sub exch pop 15000 gt and
{
currentfile eexec
}{
/junk save store
/$z 4795 string store
currentfile $z readhexstring pop pop
{
currentfile $z readline not
{
stop
}if
(%ADOendeexec)eq
{
exit
}if
}bind loop
junk restore
}ifelse
bc89dd93a62e673f17beaf79fc308801f2548cc0804b6e7e7211db7d71dcacee61d4db4b
cc4c192da6ec1c558421396b4eb1944f656db0dda1626374294528747cd1ee8e10b15c5c
60b4182960a4687e44c92cff1b5d29a6b48ab8be9f8115c642241a4901d75a2b2ba55d27
0620b884f37689503d9c3a603e89a1f7de7447e2b23145af7219c13aad065fe60313c4f1
7d1959166b8493e26ee828d6e76ac472747b40432571d2d101dd3e8696849eb59b70c328
a0d1978eea220593cb3024a3cdecb89dcfa2d5ab3990b0bbc1a0c3351bfbd614917e7ede
ef79cb8843325e4a81a80e809250ce8cf7297b5c684b53a56538b373cb085ec7436f82a2
e48b4789de5ac368defd97ca81e1e7a584b7e40bcf852c3d4f6cc387172784295be04ca2
0793987d64efc3cec658553cbe610fa9ebfe74341192cfcc6ecfd0a4843b740cbfd5ba5f
4c076050268792190676f76cacc26be628f8ae1c48419803c2a5108f6b1bec6664b06248
6a083d8092cb3c82b90bded3eed0387490fe971d6614c5d0259a846d43abb22e0dc06aa5
6911c9f53cf5524e138662db3fa2e6cdfe30873d916ed70e4962ed78b32491bee9a20a36
8be439dc6245d5751e6899e2214c07df7a87b66b1aba9a8196db2add3d3c4e3057dc9a9c
dae1cc7884a6f29a5568b1ad64143fd479b8b4a8fbef4db889fe42edaadef0276f79d192
245b64299ad347b03ecf887db96b16fc319a1c7e59718ac7ff7bc7bafd4523bd88fd5ba8
1730817c2f529d3060cb591fe565d778fc989e7e14f7c2a7b85785c53af35fbe738da838
cdf80c9a048f4d7dbd58e2c9f527d2d3b2ad633da1005036298ec8533b94f84e9246289c
f03336f4a7f657afbcbdd7b5e16187273c459f5626a5667db4fbf8b85ef2363ee6d89bd0
f402408cae3065fecf609fa290047e9656d853739f33b06d64a4a57f66f37f7da39fa89d
28962fddb76e8d05683c090664175dda6a1be57698894fd9f0f9d8da411b3f33b3b9c8d4
50a27c37e4a0e503418cd6c02cf60fa7fbb6f6f3e7509a45a54343ba3361168d895a27eb
6923ab65b019b188fe21c804629f2be2a20e6417841b4c8d5d68fb38db71ac7174e68d03
0611ea29f9ca740d0aef611a1f0003e1d136a539ed28d956a2a36bc7ae0ee290bd818175
3537e39be7777de1004964c769ec7e933b17c852cbd2da4cc100d9d3e141106eea9cc29a
b1c910ead768527a02711ac035262c93a4548f67fb501a971e0a86d819547bac7c09f5fb
aec454c9c7276f5e317cc8fd8876e7f90dc128f03052a756cf6db9876fe5a31c9d6a139b
d46eb34272ff7992b86c88420ab07e801a39e91afb3c048b40913dc2d984e0c347b3daea
4e1ce5a15c8df7b65a0b89136f6a48a92b8f096d708a2bea4390f0454dcc3d9cd4f6b24d
8f06faa17694172213c481ceaa1f7fe33f1389142f017874560e1b0272385585fc5681de
4a909566cdcf9af80dfde23e9ad55083bb9422ae57b99bf3d5f081a4cbe0172f236abbb5
06fbbee46987543fc545e81ecd61477fadec55640ce9e41f8cbcd409f0e64c1b83193885
dffe0c4c383de781943a2a73ad1e0cbee0dccdbc3bbbc010f3adc8aa597210cae47003d2
952b8e874e1dee33ef1a78180a3ef6b22e1a66385147f550678510b15ed1a02fc85e736e
818f03b188d6a23f070e5720195a8e4c295d27129a5adedc1a95145d5e758649acebaec5
3d14cbc9feaf3abcecc976c03d00ea640c3b852baad7d8ab28c593cb74cbe2e98ea0b35c
8827eb3def1a79af837fb8468b2042acaf226b1f6d11abab2884f3fe49772325d273f893
82badc7b3b26e43c3f6170eec2c607cbe22225b9469de5509d31bafa1729c416089aeb1b
3b5477a985acdce47557bf29130d6232d2003a4314bf46c9c9383c437f1f2597f361405a
b92f371458f13d8d400d78140df094a559bec9d240993f2d811f0d4eba7678773bb6c765
caf33bc77c0e2e156538b04423e513cb933d9ac8cec0444e0309bdb5c70f02a71f49cc99
7b8d98ecbaad1d53daa2811b07df94b2ec574326d760892fd1886703eed816bf2db96bbe
f2ea914cef918d251a1203d93d549aa438a1309ce179c233111175d9e8bb6064dc2d52db
0976650b1d5d194eab20ed3e500db4410852390e69e56e4ab71e97a87680fa620d8d32d5
b93e40cdec16ed20af734e792ddb938b8a65ccb811f369cc1e9e8819e76d7908e310e5ea
018c05d2db74abc0e8e5da75431324a3ba298820009d6fcc9d5693ec900aab8745112928
ef24a8da713dc8ecebb84394f0058335dafb459971cf20e8c15d40f35643a0c56c95bd86
faefe8e251fb9f79a6db5e481032f812454181a73375ab1efe575d745fe7073adaf60865
e992c7f5e969f4e267b323bb022a7f8b1b480a97ca735212b4d47aff196f37fa177c765a
f03487b323f2ce11314906d04dcb0c3c770ea581fcff70cc1553b4615a6d8dfd69001581
77a9fcc035cb44d630b99cdae09de33c09c9ab8bcc021e72fd88cccf3a9cd578a34a3f96
ae636047fc5f468d22cea0cf509e1588563c7e25d4f0d41b30373dfd1cb69a8e37a51a57
5d1cab7a3c9d04f3d388db04ed78d3e81e7b53dffa94507df197e467565d4169fc996e46
671f62236b00f4e9dc36bd3709400771ed4b335bcdb3c2974c0a00c03717ed980e98dc1b
2473f38bd1e1fe4da0fea5169aa1e06054315579a5898bbe3c9fabb829485562e9d25248
142575f3bfd311dde2297c7883b0b9ed0c3ffe3358880c8c77be01cd6408dc743634006f
d888ffc1e4562ed1166bbdcbe971a269afae52a8a384eaf8880433a053bd072accc62214
04bb18e98b9cebb3c05e56216b56174bd432e41b8c82c82d7114adb16ad941fe87c0657e
03203fc26ed43096e7e262a8f86fc07506b3ffcb5888bcbd3482977716a337a54c0649c1
2579b4322afcb34486a5593fb9d58cb16a0368f593c3c52608bf31c6a3b48a04be605c60
b15ea2670c3e89d293ba065db7d5471d3f56d7ffe3ba48814d5a1f4a81d9865d1f2340cc
3e5ced23ce6827065312bb9ae13e0d3cc53e79aaa764a229be203d1b45963d17e983f72a
f97bac50984a360768f459585745d94f7b77457bb8bc802332aef4e65ae7200d94750aea
b4ede71ade6ee000cf122866f514747784f7e497a6e48b82467515f474d38ec690bac331
d8246eacf2b10d7f1b1b74b1020843b3d934115e23fc1845e5161f5d494badc22f5e68fa
4d1cb3933ac6467e3cc58099adcf4832c156ce1714ee44c6368dee76483e47260dda3af1
97f938530475ede86f1b7ccfeeaeab2518f1c05ba983ada09c069d0f5e7e34c7832ec4c1
9e68e78a51e25540cadf7b64d1eca1141816aba211cea9b8aa4ff9542f26cd6adabe28bc
03c20d2fded392cc160e5ca6f8216611e41b504567927a560537a57e09dd8db552fab25d
59318ad3f7e6b6e10ad49fbb4caf8d5205d494666f5c51a599df65d2c89fe65c92ec733d
78205e987659e02d244684cff18d2b6f1d0d33ccae32339b840246a50cccebc952c7e705
d30fcb5dc94da2eab7ba3c7f9fe536eba4971a8b8e0744a0a094d531ae611042c347fac7
3b770c445121464594a2c5eb9d923f0fe2f33500b403e4b5daf64acd4a4a89d8469be57f
a393a844e082dec5af117b77e7be0eb6474eb47b00503bc68c809f0de147f7d0f1f68798
89b1781d09c0dc12c882dba17e23de1311321fa851a94c51a8801a4bf7c888e4805b1fc8
2fe638aaabb33b13ab0ae024b0b767108a068d562ebd11a91ad8706df9360a914927b752
ddb4d176f72661d12a6349a58a8d688b311ec8e1797b011dbb47760765b88a651b42cace
e60730553040e64711fff10e3285171ed1dae0545b6cfe3503b24f9d135d04d467372b11
ef3c1b9aa7c4272e281df0b6e7cc7e7984b00cbda5bbd81c939213c32176b5e062660e54
8943afe1e39a38cb171d7591c01ac4eea3963572ce008d48727ec8efc0ead1cc4c86d9ce
3d9d5c21f58a41359f2599d4cb15762366c3d3c5b7abe7970a312ea2fb14f5e74f78284a
624fe71f362f4b4d892ac6a87cf8794982964aa0e6153477da1484d35787edb8a2aad90b
3cada91934c118098617e1254d834d86154e6585628663741ae0d7bf339b168d4acec9da
94c12bd5449ecf97a7483e27c47160f838ac076f79b82fc0bd8a3b0011bd0bbb2e6a38ff
a7a63daf463cacb10f56c459bec699ecbcc52be2e5c57bd013c4682b01199cdd89ad2bd1
8584b05e6178c2d6fdc6e19a375ae4a91428d4c0aff2d07e5b6d159351475e57419f2ec8
a343d209e36ddb078027e03d4f179fbf675373c485be1a147ffda00821aba79187471ef9
55f197d6bf0f442244d5b4d1e8392ba11965b6bfa8db30c0e48984883a9b6ec840a9b6fc
93df40c82906dac253e0afd633c336cedac8dd7213e4766761ec3cf3a8aacb1fe1bf2d61
d64c5addaf1d836e199df0ef5e61029f1e6a28c17eba0d8bdf81f358058086ee365b4127
a1bb4b273b84a825fdcc4ebd3abdd7ca243788e1eb48aed96626bd2f2ef8a2e1a082acb6
64b5af60797d9ad021ac616e4d65c1ddbc4a74928b7ab089a10db9312a18d682cccce0b5
53e2f454af0ca21f59b96ee7d71a97db2607dba56daad1bef91c66c44f6fc53d2b4bfebb
876cd478243a9454e8864f65067787b96cb4b3f92a7c90f959ce3324c94590348a8d2709
f4feea7adaf4c56199da203d8f4b9866fe7362d86401b0cfe1913476eb9f7f4d4df0f2f3
8e7ee153c99dda1ccc6eec2cd1b76c52c553ceca04ad525fc17a4a7af197d158c02e6469
cd7e3be4b934ed0e1499153bb98b4363159a60c9ce892af085511cfc31cfa7fa1baf0e22
d138b6a54e93532486b633024d18afd6a610ede93b2a554abc44da890144ff060d1db1e3
e57df15229afe56c49e3c7f68e6ef0221942945f3c6675b498e94fd834bfcd869bba0a90
179d3eb859ea6b749871a62c0e8513ab69b63e35b5bf8060f25442a6670293cee9a86928
997a54929695b3eda64483ecdf8cfb2732729a652e08a3aa82ecb5ac45aad7227f7f7ee9
1d8c222933cfac18561f27939ca29fbf5eebd634555856519cd2f1573281514aff3c6091
5142196c57177ef2086958fbb3fae8f448118c435ae82b7b17a8445e0806b8442e1f9347
c7940af7342dc3d5638958f9a3952768f6c244920e281a163cc87fbdbec99080b8d7e24b
9e35e152aa600a6a4faebb140857e536bb819f4cd9992b9dfaa60ac33a8ff2ed14c791e7
0290e5f6d810488d672224bfeeca6907b41f46489091322b6830a8424fa2a0061151ee61
ef1cfb1a83c4538025605554ed3c734fd8e39bd6da4af6e5a57593da83fd9f511af49b84
5ef7cb34495b54070ea204daff2e266f5a1619928e73de256979f4afdeb42b889064461b
f7263f82a2c233d113de9ba4bc415ed68241bc3862a34050479aa86eabb80cef561ad640
80be73a5da7fbb4905bee2fbbbc7c85a5512c6e747a5eb18942e47c17e5da1127910d8e6
ed7a37d3b846cfda6b0adc8dd594ffe14995b32babcb4d99869090abd57e8ab397e33406
2c7790b673d184738a9e9d578f54ccfcdcc46200d2bb07c5dea46261680dccb4f011428f
289c2049ff81040685aec9ae8c9016c491d02f14f2c4fd79e053147520d59d034c470569
e602c662af4aafc5d2fb0d3af218b26b769ac25fe9999ba3c2eaa8a9ffa93a6f4b743608
f5797772e53cfd2f3c6a45b1a843fcfc6aedc66bc35db923bea051301fa5a959a11eb0b6
f02f7c4e6b004ce548b77e032e36f93cce55f507d5892b32da81a7ce5016326aacd06dd5
0a1b3c615abf06ab6eb1bd643f3c3d7fbc9e18bc11ee29b2113d5c458f20713d3b811da8
883f8b95557ffb1eaf229b89fc98f7623ff9140bcebc6b8677ad7d99373e5757292a3d6a
83a5c053e61224b4dc14e42626637e714c514092e569101ce75f0533605802455f03bf0e
336c0f9788569f3b2b4b79c01628abc3b243decb3c55e1273ff7b83ae61d936bd413580f
3f279437da1fdad63d785ff7bedd815a6d6e4964231adf28640794c33a30686e5f60fe78
c5e87ffd27a84452dc111bbd7c2d0b4e7781c102547f5533ea676a33b8d58918f197a8cd
a1e90be9620e43af9d5b07ee2ae5d702683c9a6973fdaafaec74d62cb29b18272b3f8840
a1a8372ddf4bfee1b7ea037ed41fdc2cb1cb4da3ccb3e121354db0d5bc83c4d4c323083d
75dd32c20607f81fcd221751c5af21775659e804b9941cf6fbe4c8846be20e546f88a588
7bbff8cab4489883fdd2be613313174c015d69eee40eee4242e173aaac87585597feff69
a64f4ef2dbf00dbfe9ad946892816711c7199d4068d8494ba1df614d9bbe1c7b63996e98
12b913966a42a41be0dc85feff232e625f4dd0b01cb7674b232e89d5da143f9d12a9d8a9
aa8b62038721ad9e4a6438cb842d1828458fc25e5b0b6ea795f7a14d2f55f1451c615f4c
211469611d1348952e655e1d93188c0dc6dd719630a42fe5baf8cde0c03b1e0aa76a2cd4
fec86a3042f8a2ea5af50a43af52c1217f6be45b152e47d165b89a54ede432f1eb3ed3ef
428c228dd53c44db15541704b99413b465ff65ca0e9d6be932a18eca713c71ba7dc89238
1e0c2c62cf8567df2f997e58ed2c1ffe17d2fc96db942ce3950e28d1287b85ff7d07adb9
059629dc89b9b0ed2213e45d8a20188cae18f3391887387bf8ba0a12fe21fa0aa521bfa3
718f7abe76388e
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%ADOendeexec

%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Mark Roseman)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Italic
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Courier
%%IncludeFont: Courier-Bold
%%IncludeFont: Courier-BoldOblique
%%IncludeFont: Courier-Oblique
/f0_1/Helvetica-Bold :mre
/f0_36 f0_1 36 scf
/f0_18 f0_1 18 scf
/f1_1/Times-Roman :mre
/f1_10 f1_1 10 scf
/f1_9 f1_1 9 scf
/f2_1/Times-Bold :mre
/f2_14 f2_1 14 scf
/f2_10 f2_1 10 scf
/f3_1/Times-Italic :mre
/f3_10 f3_1 10 scf
/f4_1/Times-BoldItalic :mre
/f4_10 f4_1 10 scf
/f5_1/Courier :mre
/f5_9 f5_1 9 scf
/f6_1/Courier-Bold :mre
/f6_9 f6_1 9 scf
/f9_1/Courier-BoldOblique :mre
/f9_9 f9_1 9 scf
/f11_1/Courier-Oblique :mre
/f11_9 f11_1 9 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Mark Roseman; page: 1 of 11)setjob
%%EndPageSetup
gS 0 0 552 730 rC
42 93 :M
f0_36 sf
(Appendix B.  Class Builder)S
186 162 :M
f1_10 sf
-.005(This appendix presents the GroupKit class builder.   In particular it describes)A
186 173 :M
-.004(how it can be used to create new widgets.  The widgets created for use by)A
186 184 :M
-.015(GroupKit applications are discussed in the next chapter.)A
42 231 :M
f0_18 sf
(Overview)S
40 211 -1 1 512 210 1 40 210 @a
186 262 :M
f1_10 sf
-.009(The intention of the GroupKit class builder is to make building combination)A
186 274 :M
-.075(widgets)A
f1_9 sf
0 -3 rm
(1)S
0 3 rm
222 274 :M
f1_10 sf
-.004( easier and to make them behave like a single widget.  Although this)A
186 285 :M
-.003(application is included in the GroupKit distribution, it is a standalone program)A
186 296 :M
-.072(requiring Tcl)A
f2_10 sf
( )S
241 296 :M
f1_10 sf
-.278(7.3)A
f2_10 sf
( )S
256 296 :M
f1_10 sf
-.084(and Tk)A
f2_10 sf
( )S
287 296 :M
f1_10 sf
-.009(3.6.  In version 3.0 of GroupKit nearly all of the)A
186 307 :M
-.006(widgets included in the package use the class builder, which are good examples)A
186 318 :M
-.019(of complicated widgets.   Also the )A
f3_10 sf
-.028(myLabel)A
360 318 :M
f1_10 sf
-.013( widget is used as a running example)A
186 329 :M
-.005(through the discussion which is followed by two more example.  All of the)A
186 340 :M
-.008(examples can be found in the class Builder directory.)A
186 363 :M
-.007(One thing to keep in mind throughout this discussion is what it means to be a)A
186 374 :M
-.005(combination widget constructed by this class builder.  What really happens is)A
186 385 :M
-.007(that the class builder created a frame widget.  Then all of the widgets specified)A
186 396 :M
-.002(are constructed inside of this frame.  Thus, the frame can be considered the \322root)A
186 407 :M
-.012(widget\323 of the combination widget.  There are mechanisms provided which)A
186 418 :M
-.008(allow this frame widget to be manipulated.)A
60 444 :M
f2_14 sf
-.099(Terminology)A
186 468 :M
f1_10 sf
-.024(Throughout this discussion, the term )A
335 468 :M
f2_10 sf
-.012(classname)A
f1_10 sf
-.011( refers to the name of the new)A
186 479 :M
-.011(class of widgets that is being created.  For example, )A
f3_10 sf
-.012(classname\(inherit\) )A
473 479 :M
f1_10 sf
-.054(is one of)A
186 490 :M
-.009(the items that is part of the data structure.  Thus, if the new class being created)A
186 501 :M
-.067(was called )A
f3_10 sf
-.095(myWidget)A
270 501 :M
f2_10 sf
(,)S
273 501 :M
f3_10 sf
-.137( )A
f1_10 sf
-.27(then )A
295 501 :M
f3_10 sf
-.014(myWidget\(inherit\))A
f1_10 sf
-.012( would be part of its data structure.)A
186 512 :M
f2_10 sf
-.182(Data)A
207 512 :M
f1_10 sf
-.019( is the name of the widgets data structure.  Finally, )A
f2_10 sf
-.021(root widget )A
f1_10 sf
-.019(refers to the)A
186 523 :M
-.003(frame widget that the combination widget is built inside of.)A
60 549 :M
f2_14 sf
-.009(Class Data Structure)A
186 573 :M
f1_10 sf
-.009(This is one of the two basic data structures used by the class builder,  it defines)A
186 584 :M
-.008(attributes for the class of widgets.    This array is only created once and the)A
186 595 :M
-.011(values are stored in the global array )A
f2_10 sf
-.015(classname)A
375 595 :M
f1_10 sf
(.)S
-4126 -4126 -1 1 -4124 -4126 1 -4126 -4127 @a
42 663.24 -.24 .24 185.24 663 .24 42 663 @a
42 674 :M
f1_9 sf
(1)S
47 677 :M
-.014( Combination widgets are composed of two or more standard Tk widgets.)A
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Mark Roseman; page: 2 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 81 :M
f2_10 sf
-.05(classname\(inherit\))A
216 104 :M
f1_10 sf
-.011(Denotes which  class\(es\) a particular widget class inherits its options and)A
216 115 :M
-.01(commands from.   What is inherited is based on the order the classes appear in)A
216 126 :M
-.004(the list; the first one in the list is given highest priority.   Any widget class)A
216 137 :M
-.012(defined by the class builder or any standard Tcl/Tk classes are valid entries.)A
216 148 :M
f3_10 sf
-.011(Note that how  the commands and options are used is left up to the designer of)A
216 159 :M
-.009(the new class, a future release may improve on this.)A
216 182 :M
f4_10 sf
-.096(classname)A
259 182 :M
f2_10 sf
-.026(\(rootOptions\))A
216 205 :M
f1_10 sf
-.004(The options that are not specific to the class itself.  Typically,  contains the)A
216 216 :M
-.004(inherited options.  There usually is no need to add to the list since by specifying)A
216 227 :M
-.009(the inheritance this will be done automatically.)A
216 250 :M
f2_10 sf
-.005(classname\(options\))A
216 273 :M
f1_10 sf
-.005(The options that are unique to the particular class of widgets; these are not)A
216 284 :M
-.012(inherited.  Note that every option in this list must be defined, see below for more)A
216 295 :M
-.064(information.)A
216 318 :M
f2_10 sf
-.004(classname\(methods\))A
216 341 :M
f1_10 sf
(The  methods, commands, that can be applied to widgets whose class is)S
216 352 :M
-.01(classname.  It includes the methods that are inherited as well as the methods that)A
216 363 :M
-.012(are unique to this class.  Every widget class created is automatically given the)A
216 374 :M
f2_10 sf
-.053(config)A
f1_10 sf
-.04( or )A
f2_10 sf
-.061(configure)A
296 374 :M
f1_10 sf
-.017( and the )A
f2_10 sf
-.019(cget)A
f1_10 sf
-.019( method which is given special treatment as)A
216 385 :M
-.012(described in the next section.)A
216 408 :M
f2_10 sf
-.009(classname\(optionName\))A
216 431 :M
f1_10 sf
-.089(optionName)A
f2_10 sf
( )S
268 431 :M
f1_10 sf
-.003(is a particular option  specified in either of the root option or option)A
216 442 :M
-.008(lists. There must be a definition for each one of the options that is unique to this)A
216 453 :M
-.009(class.  They should also have similar values to those of standard Tk option)A
216 465 :M
-.067(values,)A
f1_9 sf
0 -3 rm
(2)S
0 3 rm
249 465 :M
f1_10 sf
-.01( with one exception.  Since we are defining class options the)A
216 476 :M
-.022(objectValue should not be specified.)A
90 502 :M
f2_14 sf
-.042(Widget Data Structure)A
216 526 :M
f1_10 sf
-.009(This is the second data structure that is created by the class builder and it is)A
216 537 :M
-.006(created for each widget whose class is classname.    Thus, it defines the)A
216 548 :M
-.011(properties of a particular widget.   The widget record is an array r whose name is)A
216 559 :M
-.012(the same as the widget\325s window path name.  For example if )A
f4_10 sf
(.)S
464 559 :M
f3_10 sf
-.052(p)A
f1_10 sf
-.044( is the path name)A
216 570 :M
-.025(for a widget then .)A
f3_10 sf
-.029(p\(class\))A
321 570 :M
f1_10 sf
-.003( would contain that widget\325s data structure.  A useful)A
216 582 :M
-.016(technique is to store the window path names of the subwidgets)A
f1_9 sf
0 -3 rm
(3)S
0 3 rm
471 582 :M
f1_10 sf
-.062( in the widget\325s)A
216 593 :M
-.015(data structure., this makes it easy to retrieve the path names later.)A
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
72 652.24 -.24 .24 215.24 652 .24 72 652 @a
72 663 :M
f1_9 sf
(2)S
77 666 :M
-.005( Standard TK Options have one of two forms :)A
72 676 :M
-.001(   {-abbreviation  realOptionName} or  {-optionName objectName className classValue objectValue})A
72 695 :M
(3)S
77 698 :M
1.051 .105( A subwidget is any widget that is contained in another widget.  For example a scrollbar is composed of three)J
72 708 :M
-.017(subwidgets; a slider, top arrow and bottom arrow buttons.)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Mark Roseman; page: 3 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 81 :M
f2_10 sf
-.054(data\(class\))A
216 104 :M
f1_10 sf
(The class type the widget belongs to.)S
216 127 :M
f2_10 sf
-.037(data\(className\))A
216 150 :M
f1_10 sf
-.012(The class name of the class type the widget belongs to.)A
216 173 :M
f2_10 sf
-.034(data\(root\))A
216 196 :M
f1_10 sf
-.007(The window path name of the root  widget.  Due to how the widgets are created,)A
216 207 :M
-.005(this will always be a Tk frame widget; the widgets which are constructed in)A
216 218 :M
f3_10 sf
-.018(classname_ConstructWidget)A
f1_10 sf
-.015( are created inside of this frame.)A
216 241 :M
f2_10 sf
-.05(data\(optionName\))A
216 264 :M
f1_10 sf
-.008(Defines the default object value for a particular option.  If none is specified then)A
216 275 :M
-.009(the object option vlaue is defined to be the class option value.)A
72 322 :M
f0_18 sf
-.044(Creating A Widget Class)A
70 302 -1 1 542 301 1 70 301 @a
216 353 :M
f1_10 sf
-.011(There are a number of procedures that may or may not be defined in order to)A
216 364 :M
-.004(create a widget class.  The GroupKit class builder gets its information from these)A
216 375 :M
-.012(procedures in order to create the new widget class.   However, only )A
488 375 :M
f3_10 sf
-.121(classname)A
f1_10 sf
(,)S
216 386 :M
f3_10 sf
-.028(classname_ConstructWidget)A
f1_10 sf
-.025(, and  )A
355 386 :M
f3_10 sf
-.024(classname_CreateClassRec)A
f1_10 sf
-.023( must be defined.)A
216 397 :M
-.001(An important thing to note is that the class does not have to be created before it)A
216 408 :M
-.006(is used;  it will be created automatically the first time.    Below is a diagram of)A
216 419 :M
-.239(the )A
231 419 :M
f3_10 sf
-.016(myLabel)A
f1_10 sf
-.014(  widget, which is used as an example throughout the discussion.)A
216 430 :M
f3_10 sf
-.09(MyLabel)A
252 430 :M
f1_10 sf
-.008( \(implemented in the module )A
f3_10 sf
-.007(Label.tcl)A
f1_10 sf
-.007(\) illustrates how default  values)A
216 441 :M
-.001(can be given to a standard Tk label widget.  Following the discussion there are)A
216 452 :M
-.043(two complete examples.)A
216 466 247 23 rC
247 23 8 247 247 23 216 466 T T 1 :f
(\377\376\375\374\373\372\371\370\367\366\365\364\363\362\361\360\357\356\355\354\353\352\351\350\347\346\345\344\343\342\341\340\337\336\335\334\333\332\331\330\327\326\325\324\323\322\321\320\317\316\
\315\314\313\312\311\310\307\306\305\304\303\302\301\300\277\276\275\274\273\272\271\270\267\266\265\264\263\262\261\260\257\256\255\254\253\252\251\250\247\246\245\244\243\242\241\240\237\236\235\234\
\233\232\231\230\227\226\225\224\223\222\221\220\217\216\215\214\213\212\211\210\207\206\205\204\203\202\201\200~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*\)\
\('&%$#"! \037\036\035\034\033\032\031\030\027\026\025\024\023\022\021\020\017\016\015\014\013\012\011\010\007\006\005\004\003\002\001\000)(\377\377\377\376\376\376\375\375\375\374\374\374\373\373\373\372\372\372\371\371\371\370\370\370\367\367\367\366\366\366\365\365\365\364\364\364\363\363\363\362\362\362\361\361\361\360\360\360\357\357\
\357\356\356\356\355\355\355\354\354\354\353\353\353\352\352\352\351\351\351\350\350\350\347\347\347\346\346\346\345\345\345\344\344\344\343\343\343\342\342\342\341\341\341\340\340\340\337\337\337\336\
\336\336\335\335\335\334\334\334\333\333\333\332\332\332\331\331\331\330\330\330\327\327\327\326\326\326\325\325\325\324\324\324\323\323\323\322\322\322\321\321\321\320\320\320\317\317\317\316\316\316\
\315\315\315\314\314\314\313\313\313\312\312\312\311\311\311\310\310\310\307\307\307\306\306\306\305\305\305\304\304\304\303\303\303\302\302\302\301\301\301\300\300\300\277\277\277\276\276\276\275\275\
\275\274\274\274\273\273\273\272\272\272\271\271\271\270\270\270\267\267\267\266\266\266\265\265\265\264\264\264\263\263\263\262\262\262\261\261\261\260\260\260\257\257\257\256\256\256\255\255\255\254\
\254\254\253\253\253\252\252\252\251\251\251\250\250\250\247\247\247\246\246\246\245\245\245\244\244\244\243\243\243\242\242\242\241\241\241\240\240\240\237\237\237\236\236\236\235\235\235\234\234\234\
\233\233\233\232\232\232\231\231\231\230\230\230\227\227\227\226\226\226\225\225\225\224\224\224\223\223\223\222\222\222\221\221\221\220\220\220\217\217\217\216\216\216\215\215\215\214\214\214\213\213\
\213\212\212\212\211\211\211\210\210\210\207\207\207\206\206\206\205\205\205\204\204\204\203\203\203\202\202\202\201\201\201\200\200\200~~~}}}|||{{{zzzyyyxxxwwwvvvuuutttsssrrrqqqpppooonnnmmmlllkkkj\
jjiiihhhgggfffeeedddcccbbbaaa```___^^^]]]\\\\\\[[[ZZZYYYXXXWWWVVVUUUTTTSSSRRRQQQPPPOOONNNMMMLLLKKKJJJIIIHHHGGGFFFEEEDDDCCCBBBAAA@@@???>>>===<<<;;;:::999888777666555444333222111000///...---,,,+++***\)\)\
\)\(\(\('''&&&%%%$$$###"""!!!   \037\037\037\036\036\036\035\035\035\034\034\034\033\033\033\032\032\032\031\031\031\030\030\030\027\027\027\026\026\026\025\025\025\024\024\024\023\023\023\022\022\022\
\021\021\021\020\020\020\017\017\017\016\016\016\015\015\015\014\014\014\013\013\013\012\012\012\011\011\011\010\010\010\007\007\007\006\006\006\005\005\005\004\004\004\003\003\003\002\002\002\001\001\
\001\000\000\000):k 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF00000000000000
000000000000FF0000000000FF0000000000FF0000000000000000000000000000FF00000000000000FF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF00000000000000
000000000000FF0000000000FF0000000000FF0000000000000000000000000000FF00000000000000FF000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF00000000000000
000000000000FF00000000FF00FF00000000FF0000000000000000000000000000FF00000000000000FF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF000000FFFFFFFF000000FF0000FF000000FFFFFFFF
00000000000000FF000000FF00FF000000FF000000FFFFFFFF000000FF00FFFF00FF000000FFFFFF00FF000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFF0000FFFF0000FF0000FF0000FFFF0000FF
FF000000000000FF000000FF00FF000000FF0000FFFF0000FFFF0000FFFF000000FF0000FFFF0000FFFF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF0000FF00000000FF0000FF0000FF0000FF00000000
FF000000000000FF000000FF00FF000000FF0000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFFFFFFFFFF0000FF0000FF0000FF00000000
FF00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FF00000000000000FF0000FF0000FF00000000
FF00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FF00000000000000FF0000FF0000FF00000000
FF00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFF0000FFFF0000FF0000FF0000FFFF0000FF
FF0000000000000000FF0000000000FF00000000FFFF0000FFFF0000FF00000000FF0000FFFF0000FFFF000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF000000FFFFFFFF000000FF0000FF000000FFFFFFFF
000000000000000000FF0000000000FF0000000000FFFFFFFF000000FF00000000FF000000FFFFFF00FF000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFF
00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
%ADOeod
:j
gR
gS 30 31 552 730 rC
90 513 :M
f2_14 sf
-.081(classname)A
216 537 :M
f1_10 sf
-.01(This procedure is called when a widget of the class classname is created.)A
216 548 :M
-.007(Typically it just calls "gkInt_CreateWidget" with the appropriate arguments and)A
216 559 :M
-.013(returns the widget\325s path name as in the code segment below.)A
252 579 :M
f5_9 sf
-.417(proc myLabel {w args} {)A
252 589 :M
-.406(    eval gkInt_CreateWidget $w myLabel myLabelClass $args)A
252 599 :M
-.432(    return $w)A
252 609 :M
(})S
90 635 :M
f2_14 sf
-.006(classname_Config)A
216 659 :M
f1_10 sf
-.007(The configuration routine is activated whenever the )A
f3_10 sf
-.007(configure)A
f1_10 sf
-.008( command is)A
216 670 :M
-.011(invoked on a widget when at least one option/option value pair is specified.)A
216 681 :M
-.01(Therefore, his procedure specifies what is to be done when an option value is)A
216 692 :M
(changed.  This routine should have the widget\325s path name, option and option)S
216 703 :M
-.006(value as arguments.  Note that the option and args parameters will each have a)A
216 714 :M
-.01(single value, not a list of values., thus, this routine will only operate on a single)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Mark Roseman; page: 4 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 81 :M
f1_10 sf
-.012(option at any given time.  Since the )A
f3_10 sf
-.018(myLabel)A
395 81 :M
f1_10 sf
-.012( widget inherits all of its options)A
216 92 :M
-.011(from the Tk label widget then all that is required is to apply the option and its)A
216 103 :M
-.002(value to the actual label widget, as demonstrated below.  If an error occurs in)A
216 114 :M
(this routine and the option specified if valid, it is in one of the option lists, then)S
216 125 :M
-.005(an attempt will be made to apply the command to the root frame widget.)A
252 145 :M
f5_9 sf
-.41(proc myLabel_Config {w option args} {)A
252 155 :M
-.42(    upvar #0 $w data)A
252 175 :M
-.409(    $data\(label1\) config $option $args)A
252 185 :M
(})S
90 211 :M
f2_14 sf
-.002(classname_ConstructWidget)A
216 235 :M
f1_10 sf
-.001(This procedure constructs a widget for the class.  Usually it consists of the)A
216 246 :M
-.004(creation and packing of a number of widgets.  What the class builder does is take)A
216 257 :M
-.011(the widgets specified here and created them within a Tk )A
f3_10 sf
-.013(frame)A
f1_10 sf
-.011( widget, the root)A
216 268 :M
-.001(widget.  It is also useful  to store the each of the widget\325s path name in the)A
216 279 :M
(widget\325s data record.  The example below creates a label, stores the path name)S
216 290 :M
-.022(and packs it.)A
252 310 :M
f5_9 sf
-.411(proc myLabel_ConstructWidget {w} {)A
252 320 :M
-.42(    upvar #0 $w data)A
252 340 :M
-.406(    set data\(label1\) [label $w.l1 -anchor $data\(-anchor\)\\)A
252 350 :M
-.408(            -background $data\(-background\) \\)A
252 360 :M
-.412(            -font $data\(-font\) \\)A
252 370 :M
-.408(            -foreground $data\(-foreground\) \\)A
252 380 :M
-.41(            -relief $data\(-relief\) \\)A
252 390 :M
-.412(            -text $data\(-text\) \\)A
252 400 :M
-.411(            -width $data\(-width\)])A
252 410 :M
-.409(     pack $data\(label1\) -fill x -expand t)A
252 420 :M
(})S
90 446 :M
f2_14 sf
-.021(classname_CreateClassRec)A
216 470 :M
f1_10 sf
-.005(This procedure defines all of the class options, commands, and inheritance, i.e.)A
216 481 :M
-.002(all of the items discussed in the class builder overview section are defined here.)A
216 492 :M
-.013(Any of the undefined items are an empty list by default.  The class record must)A
216 503 :M
-.002(be made a global variable so that widgets of this type can be constructed.)A
216 526 :M
-.003(The code segment below creates the class record for myLabel.    It inherits all of)A
216 537 :M
-.019(the commands and options from the Tk )A
376 537 :M
f3_10 sf
-.249(label)A
396 537 :M
f1_10 sf
-.035( widget and defines the )A
f3_10 sf
-.044(foreground)A
216 548 :M
f1_10 sf
-.313(and )A
233 548 :M
f3_10 sf
-.085(background)A
281 548 :M
f1_10 sf
-.056( options.)A
252 581 :M
f5_9 sf
-.412(proc myLabel_CreateClassRec {} {)A
252 591 :M
-.422(    global myLabel)A
252 611 :M
-.411(     set myLabel\(inherit\) {label})A
252 621 :M
-.406(     set myLabel\(-foreground\) {-foreground foreground \\)A
252 631 :M
-.415(          Foreground red})A
252 641 :M
-.406(     set myLabel\(-background\) {-background background \\)A
252 651 :M
-.412(          Background lightgray})A
252 661 :M
(})S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Mark Roseman; page: 5 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
90 84 :M
f2_14 sf
-.038(classname_DestroyWidget)A
216 108 :M
f1_10 sf
-.013( Defines what is to be done when a widget of the particular class is destroyed.)A
90 134 :M
f2_14 sf
-.023(classname_InitWidgetRec)A
216 158 :M
f1_10 sf
-.008(Defines the default values for a widget\325s data structure.  Typically all of the)A
216 169 :M
-.007(items described in the overview  and often other variables that hold global)A
216 180 :M
-.012(information for the widget are defined in this procedure.  The code segment)A
216 191 :M
-.01(below defines a number of default values for options.)A
252 211 :M
f5_9 sf
-.406(proc myLabel_InitWidgetRec {w class className args} {)A
252 221 :M
-.42(    upvar #0 $w data)A
252 241 :M
-.413(    set data\(-anchor\)       e)A
252 251 :M
-.413(    set data\(-font\)         \\)A
252 261 :M
-.406(        "-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-*-*")A
252 271 :M
-.411(    set data\(-relief\)       raise)A
252 281 :M
-.409(    set data\(-text\)         "Hello World")A
252 291 :M
-.41(    set data\(-textvariable\) textVar$w)A
252 301 :M
-.412(    set data\(-width\)        30)A
252 311 :M
(})S
90 337 :M
f2_14 sf
-.047(classname_Methods)A
216 361 :M
f1_10 sf
-.001(This procedure defines what action to take when any of the commands are)A
216 372 :M
-.007(invoked, with the exception of configure.  Configure has some special)A
216 383 :M
-.009(properties, so it is treated slightly differently as described in the)A
216 394 :M
f4_10 sf
-.028(classname_Config)A
f1_10 sf
-.025( section above.)A
90 420 :M
f2_14 sf
-.029(classname_SetWidgetBindings)A
216 444 :M
f1_10 sf
-.011( Defines the various bindings for the class.)A
72 491 :M
f0_18 sf
-.043(Using A New Widget Class)A
70 471 -1 1 542 470 1 70 470 @a
216 522 :M
f1_10 sf
-.009(As stated above, the intention was that a new widget class could be treated like)A
216 533 :M
-.005(existing widgets in Tk.  For instance, the usage of  new widget classes is no)A
216 544 :M
-.031(different then the usage of the )A
f3_10 sf
-.041(label)A
358 544 :M
f1_10 sf
-.005( widget.   The syntax for creating a widget of)A
216 555 :M
-.024(a  particular class:)A
252 578 :M
f2_10 sf
-.035(class pathName )A
f4_10 sf
-.033(?option OptionValue ....?)A
216 601 :M
f1_10 sf
-.029(The example code below creates a )A
356 601 :M
f3_10 sf
-.048(myLabel)A
f1_10 sf
-.045( widget.)A
252 621 :M
f5_9 sf
-.443(myLabel .l)A
252 631 :M
-.465(pack .l)A
216 654 :M
f1_10 sf
-.006(The syntax for using widget commands is as follows:)A
252 677 :M
f2_10 sf
-.04(pathName command )A
344 677 :M
f4_10 sf
-.156(?args?)A
216 700 :M
f1_10 sf
-.014(Below is an example of using the config command with the )A
457 700 :M
f3_10 sf
-.088(myLabel)A
f1_10 sf
-.089( widget)A
216 711 :M
-.029(created above to change its )A
327 711 :M
f3_10 sf
-.085(background)A
375 711 :M
f1_10 sf
-.137( color:)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Mark Roseman; page: 6 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
252 90 :M
f5_9 sf
-.422(.l config -bg Blue)A
72 137 :M
f0_18 sf
-.076(Known Problems)A
70 117 -1 1 542 116 1 70 116 @a
216 168 :M
f1_10 sf
-.003(The biggest problem with this application is the manner in which the inherited)A
216 179 :M
-.01(options and commands get applied to the new class.  It would be nice if these)A
216 190 :M
-.002(could automatically be applied to the new class in an appropriate manner, such)A
216 201 :M
-.01(as to all of the subwidgets.  Perhaps in a later version this will be corrected.)A
216 212 :M
-.011(Currently it is left up to the designer of the new class to specify how the options)A
216 223 :M
-.003(and commands are used in the new class.  As a result, errors can occur if this is)A
216 234 :M
-.027(not done.)A
72 281 :M
f0_18 sf
(Examples)S
70 261 -1 1 542 260 1 70 260 @a
90 315 :M
f2_14 sf
-.014(Widget Class fancyLabel)A
216 339 :M
f1_10 sf
-.008(This example demonstrates how special features can be added to an existing)A
216 350 :M
-.024(widget class, as well as inheritance.   )A
366 350 :M
f3_10 sf
-.085(FancyLabel)A
414 350 :M
f1_10 sf
-.027( is essentially a )A
f3_10 sf
-.044(myLabel)A
216 361 :M
f1_10 sf
-.018(widget, described above, with  the additional option )A
426 361 :M
f3_10 sf
-.062(reverse)A
f1_10 sf
-.061( and  additional)A
216 372 :M
-.133(command )A
258 372 :M
f3_10 sf
-.086(flash)A
f1_10 sf
-.094(.  The )A
303 372 :M
f3_10 sf
-.017(reverse)A
f1_10 sf
-.016(  option allows the label to be displayed in reverse)A
216 383 :M
-.014(video, i.e. the background and foreground colors are switched.  The )A
489 383 :M
f3_10 sf
-.111(flash)A
216 394 :M
f1_10 sf
-.012(command makes the label flash or blink.)A
216 417 :M
f2_10 sf
-.046(Widget/Class Creation)A
216 440 :M
f1_10 sf
-.013(The procedure below allows a new )A
f3_10 sf
-.015(fancyLabel)A
403 440 :M
f1_10 sf
( to be created given a particular)S
216 451 :M
-.009(window path name.  Note that this is only place where any of the class builder)A
216 462 :M
-.025(routines are called, i.e. the )A
324 462 :M
f3_10 sf
-.018(gkInt_CreateWidget)A
f1_10 sf
-.023( command.)A
252 482 :M
f5_9 sf
-.415(proc fancyLabel {w args} {)A
288 492 :M
-.407(eval gkInt_CreateWidget $w fancyLabel FancyLabel)A
252 502 :M
-.498($args)A
288 512 :M
-.449(return $w)A
252 522 :M
(})S
216 545 :M
f2_10 sf
-.034(Class Record)A
216 568 :M
f1_10 sf
-.014(The following procedure specifies that the )A
388 568 :M
f3_10 sf
-.024(fancyLabel)A
f1_10 sf
-.021( inherits its options and)A
216 579 :M
-.035(commands from the )A
f3_10 sf
-.044(myLabel)A
333 579 :M
f1_10 sf
-.018( widget.  It also defines a new option, )A
f3_10 sf
-.023(reverse)A
515 579 :M
f1_10 sf
-.313( and)A
216 590 :M
-.016(adds it to the option list.  How the )A
f3_10 sf
-.022(reverse)A
384 590 :M
f1_10 sf
-.026( option actually affects the widget is)A
216 601 :M
-.035(determined in the procedure )A
331 601 :M
f3_10 sf
-.041(fancyLabel_Config)A
408 601 :M
f1_10 sf
-.004(.  There is also a new command,)A
216 612 :M
f3_10 sf
-.016(flash)A
f1_10 sf
-.016(.   Again this is defined elsewhere in the procedure )A
441 612 :M
f3_10 sf
-.051(fancyLabel_Methods)A
525 612 :M
f1_10 sf
(.)S
216 623 :M
-.024(An important thing to note is that )A
352 623 :M
f3_10 sf
-.032(fancyLabel)A
f1_10 sf
-.028( is declared to be a global value,)A
216 634 :M
-.013(this is to ensures that the )A
f3_10 sf
-.018(fancyLabel)A
362 634 :M
f1_10 sf
( widget class is known.)S
252 654 :M
f5_9 sf
-.41(proc fancyLabel_CreateClassRec {} {)A
288 664 :M
-.424(global fancyLabel)A
252 684 :M
-.409(       set fancyLabel\(inherit\) {myLabel})A
252 694 :M
-.409(       set fancyLabel\(options\) {-reverse})A
252 704 :M
-.411(       set fancyLabel\(-reverse\) \\)A
252 714 :M
-.408(             {-reverse reverse Reverse false})A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Mark Roseman; page: 7 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
252 80 :M
f5_9 sf
-.409(       set fancyLabel\(methods\) {flash})A
252 90 :M
(})S
216 113 :M
f2_10 sf
-.039(Widget Construction)A
216 136 :M
f1_10 sf
-.003(The construction of the widget is done in the procedure below.  This widget)A
216 147 :M
-.076(contains a )A
259 147 :M
f3_10 sf
-.01(myLabel)A
f1_10 sf
-.008( widget only  so it is created and its window path name is)A
216 158 :M
-.006(stored in the date structure for the widget.  This is useful since other procedures)A
216 169 :M
-.005(may need to do operations on the subwidget.  Finally,  note that the upvar)A
216 180 :M
-.01(command is used to access the widget\325s data structure.)A
252 200 :M
f5_9 sf
-.41(proc fancyLabel_ConstructWidget {w} {)A
288 210 :M
-.425(upvar #0 $w data)A
288 220 :M
-.412(set data\(label1\) [myLabel $w.l1])A
288 230 :M
-.41(pack $data\(label1\) -fill x -expand t)A
252 240 :M
(})S
216 263 :M
f2_10 sf
-.003(Changing  Option Values)A
216 286 :M
f1_10 sf
-.005(Next a routine is needed to interpret what is done when an option value is)A
216 297 :M
-.024(changed.  If the option to be changed is )A
376 297 :M
f3_10 sf
-.027(reverse)A
f1_10 sf
-.025(  and the new value is different)A
216 308 :M
-.033(then the old value then the )A
f3_10 sf
-.042(foreground)A
369 308 :M
f1_10 sf
-.11( and )A
389 308 :M
f3_10 sf
-.085(background)A
437 308 :M
f1_10 sf
-.036( colours of the widget are)A
216 319 :M
-.013(switched.  An internal routine, )A
f3_10 sf
-.016(evaluateReverse)A
406 319 :M
f1_10 sf
-.018(, determines if the new color is)A
216 330 :M
-.013(different from the old one.  If the option  is not )A
406 330 :M
f3_10 sf
-.018(reverse)A
f1_10 sf
-.017( then it must be one of the)A
216 341 :M
-.024(valid options for the )A
f3_10 sf
-.036(myLabel)A
334 341 :M
f1_10 sf
-.032( widget so the )A
f3_10 sf
-.047(myLabel)A
427 341 :M
f1_10 sf
-.039( widget is configured with)A
216 352 :M
-.022(the given option and value.)A
252 372 :M
f5_9 sf
-.409(proc fancyLabel_Config {w option args} {)A
288 382 :M
-.425(upvar #0 $w data)A
252 402 :M
-.408(    if { [string match $option "-reverse"] } {)A
252 412 :M
-.408(       if { [evaluateReverse $w $args] } {)A
252 422 :M
-.406(          $w config -background $data\(-foreground\) \\)A
360 432 :M
-.412( -foreground $data\(-background\))A
252 442 :M
-.456(       })A
252 452 :M
-.435(    } else {)A
252 462 :M
-.408(       $data\(label1\) configure $option $args )A
252 472 :M
-.498(    })A
216 495 :M
f2_10 sf
-.025(Handling Commands)A
216 518 :M
f1_10 sf
-.01(The next procedure handles the valid commands for the )A
f3_10 sf
-.011(fancyLabel)A
486 518 :M
f1_10 sf
-.079( widget.  If)A
216 529 :M
-.029(the command specified is )A
f3_10 sf
-.033(flash)A
340 529 :M
f1_10 sf
-.009( then every 100 milliseconds the value of the)A
216 540 :M
f3_10 sf
-.014(reverse)A
f1_10 sf
-.014( option is changed.  An internal procedure, )A
419 540 :M
f3_10 sf
-.052(evaluateReverse)A
f1_10 sf
-.046(, is used to)A
216 551 :M
-.002(determine what the option value should be changed too.  Finally if the command)A
216 562 :M
-.016(specified is something other than  )A
f3_10 sf
-.019(flash)A
373 562 :M
f1_10 sf
-.039( it is assumed that the )A
f3_10 sf
-.061(myLabel)A
496 562 :M
f1_10 sf
-.119( widget)A
216 573 :M
-.023(handles it so it is evaluated with it.)A
252 593 :M
f5_9 sf
-.408(proc fancyLabel_Methods {w command args} {)A
288 603 :M
-.425(upvar #0 $w data)A
288 623 :M
-.409(if { [string match $command flash] } {)A
252 633 :M
-.408(           if { [evaluateReverse $w true] } {)A
324 643 :M
-.413(     $w config -reverse true)A
252 653 :M
-.421(           } else {)A
324 663 :M
-.413(     $w config -reverse false)A
252 673 :M
-.435(           })A
252 683 :M
-.412(           after 100 "$w flash")A
252 693 :M
-.432(       } else)A
288 703 :M
-.41(    eval $date\(label1\) $command $args)A
252 713 :M
(})S
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Mark Roseman; page: 8 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 103 :M
f2_10 sf
-.016(Internal  Procedures)A
216 126 :M
f1_10 sf
-.002(Finally an internal procedure,  below,  returns true \(1\) if the new value, args, is)A
216 137 :M
-.011(different then the old value, $data\(-reverse\).   If the new value is not a  valid)A
216 148 :M
-.011(value for the )A
f3_10 sf
-.013(reverse)A
f1_10 sf
-.012( option then an appropriate error message is given.)A
252 168 :M
f5_9 sf
-.412(proc evaluateReverse {w args} {)A
288 178 :M
-.425(upvar #0 $w data)A
288 198 :M
-.443(set flag 0)A
288 208 :M
-.418(switch -regexp $args {)A
252 218 :M
-.422(       t|true|1  {)A
252 228 :M
-.406(           if { [regexp -nocase fa*|0 $data\(-reverse\)] })A
252 238 :M
({)S
252 248 :M
-.413(               set flag 1 }})A
252 258 :M
-.422(       f|false|0 {)A
252 268 :M
-.406(            if { [regexp -nocase tr*|1 $data\(-reverse\)] })A
252 278 :M
({)S
252 288 :M
-.413(               set flag 1 }})A
252 298 :M
-.406(       default {error "bad option value \\"$args\\": must \\)A
324 308 :M
-.418(  be a boolean value"})A
252 318 :M
-.478(     })A
252 328 :M
-.424(     return $flag)A
252 338 :M
(})S
90 364 :M
f2_14 sf
-.003(Using the FancyLabel Widget Class)A
216 388 :M
f1_10 sf
-.004(Since all of the necessary procedures are defined above for the class fancyLabel,)A
216 399 :M
-.007(a widget of this class can be created the same manner as any  Tk widget.   Since)A
216 410 :M
f3_10 sf
-.018(reverse)A
f1_10 sf
-.016( is a valid option, it may be part of the option list for the widget.  The)A
216 421 :M
-.041(syntax  is as follows:)A
252 431 :M
f5_9 sf
( )S
252 441 :M
f6_9 sf
-.399(fancyLabel pathName )A
f9_9 sf
-.415(?option optionValue ... ?)A
252 451 :M
f6_9 sf
-.399(pack pathName )A
f9_9 sf
-.415(?option optionValue ... ?)A
216 473 :M
f5_9 sf
-.405(Where pathName is the window path name and option/optionValue)A
216 483 :M
-.399(pairs are any valid option specification for the )A
f11_9 sf
-.443(fancyLabel)A
216 493 :M
f5_9 sf
-.405(widget. Below is an example which creates a fancyLabel widget.)A
252 513 :M
-.413(fancyLabel .l -reverse false)A
252 523 :M
-.465(pack .l)A
216 546 :M
f1_10 sf
-.003(Once again the intention was for  widgets created by the class builder is to act)A
216 557 :M
-.006(like existing widgets in Tk, so using a command on this widget is the same as)A
216 568 :M
-.03(any other Tk widget as follows:)A
252 588 :M
f6_9 sf
-.399(pathName command )A
f9_9 sf
-.478(?args?)A
216 611 :M
f1_10 sf
-.018(Where pathName is the window path name for  a )A
415 611 :M
f3_10 sf
-.034(fancyLabel)A
f1_10 sf
-.033( widget and the)A
216 622 :M
-.006(command is a valid command .    Continuing the example from above the code)A
216 633 :M
-.021(segment below will make the widget )A
f3_10 sf
-.024(flash)A
385 633 :M
f1_10 sf
-.022( then get the value of the )A
f3_10 sf
-.029(reverse)A
216 644 :M
f1_10 sf
-.009(option.)A
252 664 :M
f5_9 sf
-.456(.l flash)A
252 674 :M
-.422(.l config -reverse)A
252 694 :M
-.409(# Result of the \322config\323 command above.)A
252 704 :M
-.41(-reverse reverse Reverse false false)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Mark Roseman; page: 9 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 81 :M
f1_10 sf
-.024(Finally a picture of the )A
310 81 :M
f3_10 sf
-.037(fancyLabel)A
f1_10 sf
-.039( widget.)A
219 84 249 29 rC
247 26 1 31 247 26 220 86 T T 1 :f
:g 00000000000000000000000000000000000000000000000000000000000001
00000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555555555555555555555555555555554
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFFB7FFDF7DFFFBFB8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFFB7FFDF7DFFFBFB9
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFFB7FFDEBDFFFBFB8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDC3B70FEEBB874B8B9
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFD99B667EEBB333B338
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE01BDB6F7EEBB7B7B7B8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFD81B6F7F5D77B7B7B9
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDBFB6F7F5D77B7B7B8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDBFB6F7F5D77B7B7B8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFD99B667FBEF337B338
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDC3B70FFBEF877B8B8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
00000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000001
%ADOeod
:j
gR
gS 30 31 552 730 rC
90 139 :M
f2_14 sf
-.025(Creating Widget Class frameLabel)A
216 163 :M
f1_10 sf
-.018(This example describes the composite widgets,  )A
f3_10 sf
-.02(frameLabel)A
f1_10 sf
-.019( is composed of a)A
216 174 :M
f3_10 sf
-.051(fancyLabel)A
f1_10 sf
-.05( and a )A
287 174 :M
f3_10 sf
-.065(frame)A
f1_10 sf
-.055( widgets.   )A
354 174 :M
f3_10 sf
-.042(FancyLabel)A
f1_10 sf
-.035( is described above and is created)A
216 185 :M
-.002(with the GroupKit class builder and frame is a standard Tk widget.)A
216 208 :M
f2_10 sf
-.046(Widget/Class Creation)A
216 231 :M
f1_10 sf
-.004(The procedure below allows a new )A
f3_10 sf
(frameLabel)S
f1_10 sf
-.004( to be created given a particular)A
216 242 :M
-.004(window path name.  This is only place where any of the class builder routines)A
216 253 :M
-.009(are called, i.e. the )A
f3_10 sf
-.012(gkInt_CreateWidget)A
f1_10 sf
-.015( command.)A
252 273 :M
f5_9 sf
-.415(proc frameLabel {w args} {)A
288 283 :M
-.407(eval gkInt_CreateWidget $w frameLabel FrameLabel)A
252 293 :M
-.498($args)A
288 303 :M
-.449(return $w)A
252 313 :M
(})S
216 346 :M
f2_10 sf
-.034(Class Record)A
216 369 :M
f1_10 sf
-.014(The following procedure specifies that the )A
388 369 :M
f3_10 sf
-.016(fancyLabel)A
f1_10 sf
-.013( class record.  It inherits)A
216 380 :M
-.011(all of the commands, options and option values from )A
f3_10 sf
-.014(fancyLabel)A
474 380 :M
f1_10 sf
-.037( as well as)A
216 391 :M
f3_10 sf
-.035(frame)A
f1_10 sf
-.031(; this includes the command )A
354 391 :M
f3_10 sf
-.03(flash)A
f1_10 sf
-.031(.   If an option is known to both the)A
216 402 :M
f3_10 sf
-.06(fancyLabel)A
f1_10 sf
-.066( and )A
280 402 :M
f3_10 sf
(frame)S
f1_10 sf
-.005( classes then the value used will be the value defined in the)A
216 413 :M
f3_10 sf
-.013(fancyLabel)A
f1_10 sf
-.012( class because it has a number of new options which manipulate the)A
216 424 :M
f3_10 sf
-.011(frame)A
f1_10 sf
-.01( widget\325s option values.  These new options are as follows:)A
252 444 :M
f5_9 sf
-.456(-framebd)A
324 444 :M
-.415(border width of the frame)A
252 454 :M
-.456(-framebg)A
324 454 :M
-.413(background color of the frame)A
252 464 :M
-.443(-framegeom)A
324 464 :M
-.419(geometry of the frame)A
252 474 :M
-.435(-framerelief)A
324 474 :M
-.421(relief of the frame)A
216 497 :M
f1_10 sf
-.017(The class record procedure is below.)A
252 517 :M
f5_9 sf
-.41(proc frameLabel_CreateClassRec {} {)A
288 527 :M
-.424(global frameLabel)A
252 547 :M
-.408(  set frameLabel\(inherit\) {fancyLabel frame})A
252 557 :M
-.406(  set frameLabel\(options\) {-framebd -framebg -framegeom \\)A
252 567 :M
-.414(              -framerelief})A
252 577 :M
-.406(  set frameLabel\(-framebd\) {-framebd frameBd FrameBd 3})A
252 587 :M
-.406(  set frameLabel\(-framebg\) {-framebg frameBg FrameBg \\)A
252 597 :M
-.42(              gray50)A
252 607 :M
-.406(  set frameLabel\(-framegeom\) {-framegeom frameGeom \\)A
252 617 :M
-.412(              FrameGeom 30x30})A
252 627 :M
-.406(  set frameLabel\(-framerelief\) {-framerelief frameRelief\\)A
252 637 :M
-.412(              FrameRelief ridge})A
252 647 :M
(})S
216 670 :M
f2_10 sf
-.039(Widget Construction)A
216 693 :M
f1_10 sf
-.01(Next the widget is constructed in the procedure below.  A )A
f3_10 sf
-.012(fancyLabel)A
494 693 :M
f1_10 sf
-.175( and a)A
216 704 :M
f3_10 sf
-.013(frame)A
f1_10 sf
-.012( widget are created and their window path names are stored in the widget\325s)A
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Mark Roseman; page: 10 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 81 :M
f1_10 sf
-.012(data structure.  This is useful since other procedures may need to do operations)A
216 92 :M
-.01(on the widget.  The upvar command is used to access the widget\325s data structure.)A
252 112 :M
f5_9 sf
-.41(proc frameLabel_ConstructWidget {w} {)A
288 122 :M
-.425(upvar #0 $w data)A
252 142 :M
-.41(    set data\(frame1\) [frame $w.f1 \\)A
252 152 :M
-.409(           -borderwidth $data\(-framebd\) \\)A
324 162 :M
-.419(-bg $data\(-framebg\) \\)A
252 172 :M
-.409(           -relief $data\(-framerelief\) \\)A
324 182 :M
-.413(-geometry $data\(-framegeom\) ])A
288 192 :M
-.41(set data\(label1\) [fancyLabel $w.l1])A
252 202 :M
-.408(    pack $data\(frame1\) -fill both -expand t)A
252 212 :M
-.407(    pack $data\(label1\) -fill x -expand t -padx 10)A
252 222 :M
-.406(            -pady 10 -anchor center  -in $data\(frame1\))A
252 232 :M
(})S
216 265 :M
f2_10 sf
-.003(Changing  Option Values)A
216 288 :M
f1_10 sf
-.005(Next a routine that handles changes in  a widget\325s option values.  If the option to)A
216 299 :M
-.01(be changed is a frame option, starts with \322-frame\323,  then apply the option and)A
216 310 :M
-.02(option value to the )A
f3_10 sf
-.031(frame)A
317 310 :M
f1_10 sf
-.006( widget.  If the option is not a frame option then apply)A
216 321 :M
-.021(it to the )A
f3_10 sf
-.028(fancyLabel)A
f1_10 sf
-.029( widget.)A
252 341 :M
f5_9 sf
-.409(proc frameLabel_Config {w option args} {)A
288 351 :M
-.425(upvar #0 $w data)A
252 371 :M
-.408(    if { [string match *frame* $option] } {)A
252 381 :M
-.407(           set option [string range $option 6 end])A
288 391 :M
-.408(       $data\(frame1\) config -$option $args)A
252 401 :M
-.435(    } else {)A
252 411 :M
-.408(           $data\(label1\) config $option $args)A
252 421 :M
-.498(    })A
252 431 :M
(})S
216 454 :M
f2_10 sf
-.025(Handling Commands)A
216 477 :M
f1_10 sf
-.006(The next procedure handles the valid commands that can be used with the)A
216 488 :M
f3_10 sf
-.01(fancyLabel)A
f1_10 sf
-.009( widget.   Since all of the commands are inherited from the)A
216 499 :M
f3_10 sf
-.014(fancyLabel)A
f1_10 sf
-.013( then the command is applied directly to the )A
f3_10 sf
-.016(fancyLabel)A
483 499 :M
f1_10 sf
-.031( widget.)A
216 510 :M
-.006(Since some of the commands also apply to the frame, but not all,  catch is used)A
216 521 :M
-.01(so that only the appropriate commands are issued on the )A
f3_10 sf
-.011(frame)A
f1_10 sf
-.011( widget.)A
252 541 :M
f5_9 sf
-.408(proc frameLabel_Methods {w command args} {)A
252 551 :M
-.42(    upvar #0 $w data)A
288 571 :M
-.413($data\(label1\) $command $args)A
252 581 :M
-.409(    catch {$data\(frame1\) $command $args})A
252 591 :M
(})S
90 637 :M
f2_14 sf
-.005(Using the FrameLabel Widget Class)A
216 661 :M
f1_10 sf
-.007(A widget of this class can be created the same way as any widget is created in)A
216 672 :M
-.152(Tk.  )A
235 672 :M
f3_10 sf
-.02(Reverse)A
f1_10 sf
-.017( is a valid option, so it may be part of the option list for the widget.)A
216 683 :M
-.037(The syntax  is as follows:)A
252 693 :M
f5_9 sf
( )S
252 703 :M
f6_9 sf
-.399(fancyLabel pathName )A
f9_9 sf
-.415(?option optionValue ... ?)A
252 713 :M
f6_9 sf
-.399(pack pathName )A
f9_9 sf
-.415(?option optionValue ... ?)A
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Mark Roseman; page: 11 of 11)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
216 80 :M
f5_9 sf
-.406(Where pathName is the window path name of a widget and the)A
216 90 :M
-.405(option/optionValue pairs are any valid option specification for)A
216 100 :M
-.406(the myLabel widget. Below is an example which creates a)A
216 110 :M
-.422(fancyLabel widget.)A
252 130 :M
-.432(frameLabel .l)A
252 140 :M
-.465(pack .l)A
216 163 :M
f1_10 sf
-.003(Once again the intention was for  widgets created by the class builder is to act)A
216 174 :M
-.006(like existing widgets in Tk, so using a command on this widget is the same as)A
216 185 :M
-.03(any other Tk widget as follows:)A
252 205 :M
f6_9 sf
-.399(pathName command )A
f9_9 sf
-.478(?args?)A
216 228 :M
f1_10 sf
-.002(Where pathName is the window path name for  a fancyLabel widget and the)A
216 239 :M
-.006(command is a valid command .    Continuing the example from above the code)A
216 250 :M
(segment below will make the widget flash then get the value of the reverse)S
216 261 :M
-.006(option then get the value of the frames background color.)A
252 281 :M
f5_9 sf
-.456(.l flash)A
252 291 :M
-.422(.l config -reverse)A
252 301 :M
-.422(.l config -framebg)A
252 331 :M
-.409(# Result of the \322config\323 commands above.)A
252 341 :M
-.41(-reverse reverse Reverse false false)A
252 351 :M
-.409(-framebg frameBg FrameBg gray50 gray50)A
216 374 :M
f1_10 sf
-.024(Finally a picture of the )A
310 374 :M
f3_10 sf
-.019(frameLabel)A
f1_10 sf
-.019( widget.)A
216 435 259 47 rC
259 47 8 259 259 47 216 435 T T 1 :f
(\377\376\375\374\373\372\371\370\367\366\365\364\363\362\361\360\357\356\355\354\353\352\351\350\347\346\345\344\343\342\341\340\337\336\335\334\333\332\331\330\327\326\325\324\323\322\321\320\317\316\
\315\314\313\312\311\310\307\306\305\304\303\302\301\300\277\276\275\274\273\272\271\270\267\266\265\264\263\262\261\260\257\256\255\254\253\252\251\250\247\246\245\244\243\242\241\240\237\236\235\234\
\233\232\231\230\227\226\225\224\223\222\221\220\217\216\215\214\213\212\211\210\207\206\205\204\203\202\201\200~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*\)\
\('&%$#"! \037\036\035\034\033\032\031\030\027\026\025\024\023\022\021\020\017\016\015\014\013\012\011\010\007\006\005\004\003\002\001\000)(\377\377\377\376\376\376\375\375\375\374\374\374\373\373\373\372\372\372\371\371\371\370\370\370\367\367\367\366\366\366\365\365\365\364\364\364\363\363\363\362\362\362\361\361\361\360\360\360\357\357\
\357\356\356\356\355\355\355\354\354\354\353\353\353\352\352\352\351\351\351\350\350\350\347\347\347\346\346\346\345\345\345\344\344\344\343\343\343\342\342\342\341\341\341\340\340\340\337\337\337\336\
\336\336\335\335\335\334\334\334\333\333\333\332\332\332\331\331\331\330\330\330\327\327\327\326\326\326\325\325\325\324\324\324\323\323\323\322\322\322\321\321\321\320\320\320\317\317\317\316\316\316\
\315\315\315\314\314\314\313\313\313\312\312\312\311\311\311\310\310\310\307\307\307\306\306\306\305\305\305\304\304\304\303\303\303\302\302\302\301\301\301\300\300\300\277\277\277\276\276\276\275\275\
\275\274\274\274\273\273\273\272\272\272\271\271\271\270\270\270\267\267\267\266\266\266\265\265\265\264\264\264\263\263\263\262\262\262\261\261\261\260\260\260\257\257\257\256\256\256\255\255\255\254\
\254\254\253\253\253\252\252\252\251\251\251\250\250\250\247\247\247\246\246\246\245\245\245\244\244\244\243\243\243\242\242\242\241\241\241\240\240\240\237\237\237\236\236\236\235\235\235\234\234\234\
\233\233\233\232\232\232\231\231\231\230\230\230\227\227\227\226\226\226\225\225\225\224\224\224\223\223\223\222\222\222\221\221\221\220\220\220\217\217\217\216\216\216\215\215\215\214\214\214\213\213\
\213\212\212\212\211\211\211\210\210\210\207\207\207\206\206\206\205\205\205\204\204\204\203\203\203\202\202\202\201\201\201\200\200\200~~~}}}|||{{{zzzyyyxxxwwwvvvuuutttsssrrrqqqpppooonnnmmmlllkkkj\
jjiiihhhgggfffeeedddcccbbbaaa```___^^^]]]\\\\\\[[[ZZZYYYXXXWWWVVVUUUTTTSSSRRRQQQPPPOOONNNMMMLLLKKKJJJIIIHHHGGGFFFEEEDDDCCCBBBAAA@@@???>>>===<<<;;;:::999888777666555444333222111000///...---,,,+++***\)\)\
\)\(\(\('''&&&%%%$$$###"""!!!   \037\037\037\036\036\036\035\035\035\034\034\034\033\033\033\032\032\032\031\031\031\030\030\030\027\027\027\026\026\026\025\025\025\024\024\024\023\023\023\022\022\022\
\021\021\021\020\020\020\017\017\017\016\016\016\015\015\015\014\014\014\013\013\013\012\012\012\011\011\011\010\010\010\007\007\007\006\006\006\005\005\005\004\004\004\003\003\003\002\002\002\001\001\
\001\000\000\000):k 00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF0000000000000000
0000000000FF0000000000FF0000000000FF0000000000000000000000000000FF00000000000000FF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF0000000000000000
0000000000FF0000000000FF0000000000FF0000000000000000000000000000FF00000000000000FF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF00000000000000000000FF0000FF0000000000000000
0000000000FF00000000FF00FF00000000FF0000000000000000000000000000FF00000000000000FF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF000000FFFFFFFF000000FF0000FF000000FFFFFFFF00
000000000000FF000000FF00FF000000FF000000FFFFFFFF000000FF00FFFF00FF000000FFFFFF00FF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFF0000FFFF0000FF0000FF0000FFFF0000FFFF
000000000000FF000000FF00FF000000FF0000FFFF0000FFFF0000FFFF000000FF0000FFFF0000FFFF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF0000FF00000000FF0000FF0000FF0000FF00000000FF
000000000000FF000000FF00FF000000FF0000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFFFFFFFFFF0000FF0000FF0000FF00000000FF
00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FF00000000000000FF0000FF0000FF00000000FF
00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FF00000000000000FF0000FF0000FF00000000FF
00000000000000FF00FF000000FF00FF000000FF00000000FF0000FF00000000FF0000FF00000000FF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF0000FFFF0000FFFF0000FF0000FF0000FFFF0000FFFF
0000000000000000FF0000000000FF00000000FFFF0000FFFF0000FF00000000FF0000FFFF0000FFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000000000FF000000FFFFFFFF000000FF0000FF000000FFFFFFFF00
0000000000000000FF0000000000FF0000000000FFFFFFFF000000FF00000000FF000000FFFFFF00FF000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00
FF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
FF0000FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
%ADOeod
:j
endp
%%Trailer
end		% md
%%EOF
