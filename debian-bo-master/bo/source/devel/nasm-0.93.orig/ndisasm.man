


NDISASM(1)                                             NDISASM(1)


[1mNAME[m
       ndisasm  -  the  Netwide  Disassembler - 80x86 binary file
       disassembler

[1mSYNOPSIS[m
       [1mndisasm[m [ [1m-o[m origin ] [ [1m-s[m sync-point [...]]  [ [1m-a[m | [1m-i[m  ]
       [ [1m-b[m bits ] [ [1m-u[m ] [ [1m-e[m hdrlen ] [ [1m-k[m offset,length [...]]
       infile
       [1mndisasm[m [1m-h[m
       [1mndisasm[m [1m-r[m

[1mDESCRIPTION[m
       The [1mndisasm[m command generates a disassembly listing of the
       binary file [4minfile[m and directs it to stdout.

   [1mOPTIONS[m
       [1m-h[m     Causes  [1mndisasm[m to exit immediately, after giving a
              summary of its invocation options.

       [1m-r[m     Causes [1mndisasm[m to exit immediately, after  display-
              ing its version number.

       [1m-o[m [4morigin[m
              Specifies  the  notional load address for the file.
              This option causes [1mndisasm[m to get the addresses  it
              lists  down  the  left  hand margin, and the target
              addresses of PC-relative jumps and calls, right.

       [1m-s[m [4msync-point[m
              Manually specifies a synchronisation address,  such
              that  [1mndisasm[m  will not output any machine instruc-
              tion which encompasses bytes on both sides  of  the
              address. Hence the instruction which [4mstarts[m at that
              address will be correctly disassembled.

       [1m-e[m [4mhdrlen[m
              Specifies a number of bytes  to  discard  from  the
              beginning  of the file before starting disassembly.
              This does not count towards the calculation of  the
              disassembly offset: the first [4mdisassembled[m instruc-
              tion will be  shown  starting  at  the  given  load
              address.

       [1m-k[m [4moffset,length[m
              Specifies  that  [4mlength[m bytes, starting from disas-
              sembly offset [4moffset[m, should be skipped over  with-
              out  generating any output. The skipped bytes still
              count towards the calculation  of  the  disassembly
              offset.

       [1m-a[m or [1m-i[m
              Enables  automatic  (or  intelligent) sync mode, in
              which [1mndisasm[m will attempt to guess where  synchro-
              nisation should be performed, by means of examining



                  The Netwide Assembler Project                 1





NDISASM(1)                                             NDISASM(1)


              the target addresses  of  the  relative  jumps  and
              calls it disassembles.

       [1m-b[m [4mbits[m
              Specifies either 16-bit or 32-bit mode. The default
              is 16-bit mode.

       [1m-u[m     Specifies 32-bit mode, more  compactly  than  using
              `-b 32'.


[1mRESTRICTIONS[m
       [1mndisasm[m  only  disassembles binary files: it has no under-
       standing of the header information present  in  object  or
       executable  files.  If  you  want to disassemble an object
       file, you should probably be using [1mobjdump[m([1m1[m).

       Auto-sync mode won't necessarily cure all your  synchroni-
       sation problems: a sync marker can only be placed automat-
       ically if a jump or call instruction is found to refer  to
       it  [4mbefore[m  [1mndisasm[m actually disassembles that part of the
       code. Also, if spurious jumps or calls result from  disas-
       sembling  non-machine-code  data,  sync  markers  may  get
       placed in strange places. Feel free to turn auto-sync  off
       and go back to doing it manually if necessary.

       [1mndisasm[m  can  only  keep track of 8192 sync markers inter-
       nally at once: this is to do with portability,  since  DOS
       machines  don't  take  kindly to more than 64K being allo-
       cated at a time.


[1mSEE[m [1mALSO[m
       [1mobjdump[m([1m1[m).























                  The Netwide Assembler Project                 2


