# Process this file with autoconf to produce a configure script.

# CYGNUS LOCAL: We use the cache cause we build huge trees of software
dnl define([AC_CACHE_LOAD], )dnl
dnl define([AC_CACHE_SAVE], )dnl

AC_INIT(expect.h)
AC_CONFIG_HEADER(expect_cf.h)

# If `configure' is invoked (in)directly via `make', ensure that it
# encounters no `make' conflicts.
#
unset MFLAGS MAKEFLAGS

AC_PROG_CC
AC_PROG_CPP

# use a version with better error trapping till our autoconf patch
# gets accepted. We need this here even if we're only doing native
# builds cause the tests later get the wrong answers if the native
# compiler is hosed and it isn't caught.
# FIXME: until the autoconf macro is fixed, "checking whether
#        cross-compiling" will always be printed twice
#        printed twice.
dnl	 This is because other macros call AC_C_CROSS directly
#	 which ignores the errors
CY_AC_C_CROSS

AC_PROG_RANLIB

# this'll use a BSD compatible install or our included install-sh
AC_PROG_INSTALL

# these are the other subdirectories we need to configure
AC_CONFIG_SUBDIRS(testsuite)

# This is for LynxOS, which needs a flag to force true POSIX when
# building.  The flag varies depending how old the compiler is.
# -X is for the old "cc" and "gcc" (based on 1.42)
# -mposix is for the new gcc (at least 2.5.8)
# This modifies the value of $CC to have the POSIX flag added
# so it'll configure correctly
CY_AC_TCL_LYNX_POSIX

DEFAULT_STTY_ARGS='"sane"'
stty_reads_stdout=""
mach=0

case "${host}" in
  # Use -g on all systems but Linux where it upsets the dynamic X libraries.
  i[345]86-*-linux*)	EXP_CFLAGS="" ;;

  # Solaris 2.4 and later requires __EXTENSIONS__ in order to see all sorts
  # of traditional but not standard stuff in header files.
  *-*-solaris*)		stty_reads_stdout=1 ; AC_DEFINE(SUNOS) ;;
  
  # Both Next and pure Mach behave identically with respect
  # to a few things, so just lump them together as "mach"
  *-*-mach*)		stty_reads_stdout=1 ; DEFAULT_STTY_ARGS="cooked" ; mach=1 ;;
  *-*-next*)		stty_reads_stdout=1 ; DEFAULT_STTY_ARGS="cooked" ;;

  c[12]-*-*)		stty_reads_stdout=1 ; AC_DEFINE(CONVEX) ;;

  # On some systems stty can't be run in the background, so punt the
  # whole test.
  *-*-irix*)		stty_reads_stdout=1 ;;
  *-sco3.2v[45]*)	stty_reads_stdout=1 ;;
esac

if test x"${stty_reads_stdout}" = x"" ; then
  stty_reads_stdout=0
  # yet another Mach clone
  AC_MSG_CHECKING([if we are running MachTen])
  if test -r /MachTen ; then
    AC_MSG_RESULT(yes)
    stty_reads_stdout=1
  else
    AC_MSG_RESULT(no)
  fi

  if test -r /bin/pyr ; then
    if /bin/pyr ; then
        stty_reads_stdout=1
    fi
  fi

  AC_MSG_CHECKING([if stty reads from stdout])
  /bin/stty > /dev/null 2> /dev/null
  if test $? -ne 0 ; then
    stty_reads_stdout=1
  fi
  if test $stty_reads_stdout -eq 1 ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(STTY_READS_STDOUT)
  else
    AC_MSG_RESULT(no)
  fi
fi

AC_TYPE_PID_T
AC_RETSIGTYPE
dnl AC_TIME_WITH_SYS_TIME
AC_HEADER_TIME
AC_HEADER_SYS_WAIT

#
# On a few systems, libm.a is the same as libc.a.  Linux requires the
# ieee for math, and it must appear before -lm.
#
AC_CHECK_LIB(ieee, main)
AC_CHECK_FUNC(sin, , LIBS="${LIBS} -lm" )

#
# Look for X11
#
AC_PATH_X

if test "x$no_x" != "xyes"; then
    if test "x$x_includes" != "x" ;
    then
        X_CFLAGS="-I$x_includes"
    else
        X_CFLAGS=""
    fi

    if test "x$x_libraries" != "x" ;
    then
        X_LDFLAGS="-L$x_libraries"
    else
        X_LDFLAGS=""
    fi

    X_PROGS="expectk \$(LIBEXPECTK)"

#
# CYGNUS LOCAL:  statically link on Solaris, HPUX & SunOS so that
#                we don't have problems with people not having libraries
#                installed or not having LD_LIBRARY_PATH set.
#

    case "$host" in
#
# gdb linked statically w/ Solaris if GCC is used, otherwise dynamic
#
        sparc-sun-solaris2*)
            if test "x$GCC" = "xyes";
            then
                X_LIBS="-Wl,-Bstatic -lX11 -lXext -lX11 -Wl,-Bdynamic -ldl -lw"
            else
                if test "x$x_libraries" != "x" ;
                then
                    X_LDFLAGS="$X_LDFLAGS -R$x_libraries"
                fi
                X_LIBS="-lX11 -lXext -lX11"
            fi ;;
#
# gdb linked statically w/ SunOS or HPUX
#
        m68k-hp-hpux*|hppa*-hp-hpux*|sparc-sun-sunos*)
            if test "x$x_libraries" != "x" ;
            then
                X_LIBS="$x_libraries/libX11.a"
            else
                X_LIBS="/usr/lib/libX11.a"
            fi ;;
#
# default is to link dynamically
#
        *)
            X_LIBS="-lX11" ;;
    esac
#
# END OF CYGNUS-LOCAL
#
#  (instead of all that, only `` X_LIBS="-lX11" '' is really necessary).
#
else
    X_PROGS="# no X support on this system"
    X_CFLAGS=""
    X_CFLAGS=""
    X_LIBS=""
    AC_MSG_WARN([No X based programs will be built])
fi

#
# Ok, lets find the tcl source trees so we can use the headers
#
CY_AC_PATH_TCL
if test x"$no_tcl" = x"true" ; then
    echo "	ERROR: Can't find Tcl headers or library."
    echo "	See README for information on how to obtain Tcl."
    echo "	If Tcl is installed, see INSTALL on how to tell"
    echo "	configure where Tcl is installed."
    exit 1
fi

# only look for Tk stuff if we have X11
if test x"$no_x" != x"true" ; then
  CY_AC_PATH_TK
  if test x"$no_tk" = x"true" ; then
    echo "	WARNING: Can't find Tk headers or library."
    echo "	You can still build expect, but not expectk."
    echo "	See README for information on how to obtain Tk."
    echo "	If Tk is installed, see INSTALL on how to tell"
    echo "	configure where Tk is installed."
    X_PROGS=""
  fi
fi

#
# Now that we've found the Tcl sources, configure the debugger
# this is a little tricky because it has its own configure script
# which produces a Makefile and cf file.  We only want the cf file,
# so switch to a temporary directory and run the debugger's configure.
# Then save the cf file and delete the rest.
#
# Incidentally, the debugger can't depend on Expect's cf file, because
# the debugger is designed to be independent of Expect.
# 

test -n "$verbose" && echo "configuring Tcl debugger"
tmpdir=./Dbg$$
mkdir ${tmpdir}
#cp $TCLHDIR/tclInt.h ${tmpdir}
cp ${srcdir}/Dbgconfigure ${srcdir}/Dbg.h ${srcdir}/Dbg_cf.h.in ${srcdir}/install-sh ${tmpdir}
cp $srcdir/DbgMkfl.in ${tmpdir}/Makefile.in
  (cd $tmpdir; /bin/sh Dbgconfigure --with-tclinclude=`echo ${TCLHDIR} | sed -e 's/-I//'`)
cp ${tmpdir}/Dbg_cf.h .
rm -rf $tmpdir
test -n "$verbose" && echo "configured Tcl debugger"

# Pre-7.4 versions of Tcl do not have Regerror function
AC_MSG_CHECKING([if Tcl uses regerror function])
if test $tclmajor -ge 7 -a $tclminor -ge 4 ; then
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_TCLREGERROR)
else
	AC_MSG_RESULT(no)
fi

# Look for strerror.  Tcl 7.4 and before will provide strerror if it
# is missing, so we only need this for 7.5 and greater.
if test $tclmajor -ge 7 -a $tclminor -ge 5 ; then
   # Tcl 7.5 uses its own interface, Tcl_ErrnoMsg.  We can't use this
   # because we want to remain independent of Tcl.

   #--------------------------------------------------------------------
   #	Check for the existence of sys_errlist (this is only needed if
   #	there's no strerror).
   #--------------------------------------------------------------------
   AC_REPLACE_FUNCS(strerror)
   if test x"$ac_cv_func_strerror" = x"no" ; then
      AC_MSG_CHECKING([for sys_errlist])
      AC_TRY_LINK(,[
      extern char *sys_errlist[];
      extern int sys_nerr;
      sys_errlist[sys_nerr-1][0] = 0;
      ], AC_MSG_RESULT(yes),
      [AC_MSG_RESULT(no)
      AC_DEFINE(NO_SYS_ERRLIST)])
   fi
fi

# Look for dynamic linking libraries that Tcl might need.  This is
# only done for Tcl 7.5 and greater.  It would be good to look for and
# use the "configInfo" file that Tcl generates, but for now that is
# beyond us.
if test $tclmajor -ge 7 -a $tclminor -ge 5 ; then
   AC_CHECK_LIB(dl, main, , AC_CHECK_LIB(dld, main))
fi

unset ac_cv_func_socket
AC_CHECK_FUNC(socket, socket=1 , socket=0)
if test $socket -eq 0 ; then
  # -lsocket is broken on IRIX, so avoid
  # this test is probably unnecessary now
  # but don't have both old and new SGIs around to check
  if test "x`(uname) 2>/dev/null`" != xIRIX; then
    AC_CHECK_LIB(socket, socket, XLIBS="$XLIBS -lsocket")
  fi
fi

# required by ISC 4.0 using XFree86
unset ac_cv_func_gettimeofday
AC_CHECK_FUNC(gettimeofday, gettimeofday=1 , gettimeofday=0)
if test $gettimeofday -eq 0 ; then
  AC_CHECK_LIB(rpc, gettimeofday, XLIBS="$XLIBS -lrpc")
fi

unset ac_cv_func_gethostname
AC_CHECK_FUNC(gethostname, gethostname=1 , gethostname=0)
if test $gethostname -eq 0 ; then
  AC_CHECK_LIB(nsl, gethostname, XLIBS="$XLIBS -lnsl")
fi

# required by Sequent ptx2
unset ac_cv_func_t_open
AC_CHECK_FUNC(t_open, t_open=1 , t_open=0)
if test $t_open -eq 0 ; then
  AC_CHECK_LIB(nsl, t_open, XLIBS="$XLIBS -lnsl")
fi

# required by ISC 4.0 using native X11
unset ac_cv_func_t_open
AC_CHECK_FUNC(t_open, t_open=1 , t_open=0)
if test $t_open -eq 0 ; then
  AC_CHECK_LIB(nsl_s, t_open, XLIBS="$XLIBS -lnsl_s")
fi

# required by Sequent ptx2
unset ac_cv_func_gethostname
AC_CHECK_FUNC(gethostname, gethostname=1 , gethostname=0)
if test $gethostname -eq 0 ; then
  AC_CHECK_LIB(inet, gethostname, XLIBS="$XLIBS -linet" LIBS="$LIBS -linet")
fi

# required by Fischman's ISC 4.0
unset ac_cv_func_socket
AC_CHECK_FUNC(socket, socket=1 , socket=0)
if test $socket -eq 0 ; then
  AC_CHECK_LIB(inet, socket, XLIBS="$XLIBS -linet" LIBS="$LIBS -linet")
fi

unset ac_cv_func_select
AC_CHECK_FUNC(select, select=1 , select=0)
if test $select -eq 0 ; then
  AC_CHECK_LIB(inet, select, XLIBS="$XLIBS -linet" LIBS="$LIBS -linet")
fi

unset ac_cv_func_getpseudotty
AC_CHECK_FUNC(getpseudotty, getpseudotty=1 , getpseudotty=0)
if test $getpseudotty -eq 0 ; then
  AC_CHECK_LIB(seq, getpseudotty)
fi

#
# Look for various header files
#
AC_CHECK_HEADER(sys/sysmacros.h, AC_DEFINE(HAVE_SYSMACROS_H))
AC_CHECK_HEADER(stdlib.h, ,AC_DEFINE(NO_STDLIB_H))
AC_CHECK_HEADER(stdarg.h, AC_DEFINE(HAVE_STDARG_H))
AC_CHECK_HEADER(varargs.h, AC_DEFINE(HAVE_VARARGS_H))
AC_CHECK_HEADER(unistd.h, AC_DEFINE(HAVE_UNISTD_H))
AC_CHECK_HEADER(sys/stropts.h, AC_DEFINE(HAVE_STROPTS_H))
AC_CHECK_HEADER(sys/sysconfig.h, AC_DEFINE(HAVE_SYSCONF_H))
AC_CHECK_HEADER(sys/fcntl.h, AC_DEFINE(HAVE_SYS_FCNTL_H))
AC_CHECK_HEADER(sys/select.h, AC_DEFINE(HAVE_SYS_SELECT_H))
AC_CHECK_HEADER(sys/time.h, AC_DEFINE(HAVE_SYS_TIME_H))
AC_CHECK_HEADER(sys/ptem.h, AC_DEFINE(HAVE_SYS_PTEM_H))
AC_CHECK_HEADER(sys/strredir.h, AC_DEFINE(HAVE_STRREDIR_H))
AC_CHECK_HEADER(sys/strpty.h, AC_DEFINE(HAVE_STRPTY_H))

dnl #echo checking for ucbinclude/sys/ioctl.h (ucb-style ioctl.h under SV)
dnl #if test -f /usr/ucbinclude/sys/ioctl.h ; then
dnl #    AC_DEFINE(HAVE_UCB_IOCTL_H)
dnl #fi

AC_MSG_CHECKING([for sys/bsdtypes.h])
if test "ISC_${ISC}" = "ISC_1"   ;    then
   AC_MSG_RESULT(yes)
   # if on ISC 1, we need <sys/bsdtypes.h> to get FD_SET macros
   AC_HAVE_HEADERS(sys/bsdtypes.h)
else
   AC_MSG_RESULT(no)
fi

#
# Look for functions that may be missing
#
dnl AC_CHECK_FUNC(memcpy, AC_DEFINE(HAVE_MEMCPY))
AC_CHECK_FUNC(memmove, AC_DEFINE(HAVE_MEMMOVE))
AC_CHECK_FUNC(sysconf, AC_DEFINE(HAVE_SYSCONF))
AC_CHECK_FUNC(strftime, AC_DEFINE(HAVE_STRFTIME))
AC_CHECK_FUNC(strchr, AC_DEFINE(HAVE_STRCHR))
AC_CHECK_FUNC(timezone, AC_DEFINE(HAVE_TIMEZONE))

# dnl check for memcpy by hand
# because Unixware 2.0 handles it specially and refuses to compile
# autoconf's automatic test that is a call with no arguments
AC_MSG_CHECKING([for memcpy])
AC_TRY_LINK(,[
char *s1, *s2;
memcpy(s1,s2,0);
],
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_MEMCPY)
	,
	AC_MSG_RESULT(no)
)

# Some systems only define WNOHANG if _POSIX_SOURCE is defined
# The following merely tests that sys/wait.h can be included
# and if so that WNOHANG is not defined.  The only place I've
# seen this is ISC.
AC_MSG_CHECKING([if WNOHANG requires _POSIX_SOURCE])
AC_TRY_RUN([
#include <sys/wait.h>
main() {
#ifndef WNOHANG
	return 0;
#else
	return 1;
#endif
}],
	AC_MSG_RESULT(yes)
	AC_DEFINE(WNOHANG_REQUIRES_POSIX_SOURCE)
,
	AC_MSG_RESULT(no)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

AC_MSG_CHECKING([if any value exists for WNOHANG])
rm -rf wnohang
AC_TRY_RUN([
#include <stdio.h>
#include <sys/wait.h>
main() {
#ifdef WNOHANG
	FILE *fp = fopen("wnohang","w");
	fprintf(fp,"%d",WNOHANG);
	fclose(fp);
	return 0;
#else
	return 1;
#endif
}],
	AC_MSG_RESULT(yes)
	AC_DEFINE_UNQUOTED(WNOHANG_BACKUP_VALUE, `cat wnohang`)
	rm -f wnohang
,
	AC_MSG_RESULT(no)
	AC_DEFINE(WNOHANG_BACKUP_VALUE, 1)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

#
# check how signals work
#

# Check for the data type of the mask used in select().
# This picks up HP braindamage which defines fd_set and then 
# proceeds to ignore it and use int.
# Pattern matching on int could be loosened.
# Can't use ac_header_egrep since that doesn't see prototypes with K&R cpp.
AC_MSG_CHECKING([mask type of select])
if egrep "select\(size_t, int" /usr/include/sys/time.h >/dev/null 2>&1; then
  AC_MSG_RESULT(int)
  AC_DEFINE(SELECT_MASK_TYPE, int)
else
  AC_MSG_RESULT(none)
fi

dnl # Check for the data type of the function used in signal(). This
dnl # must be before the test for rearming.
dnl # echo checking return type of signal handlers
dnl AC_HEADER_EGREP([(void|sighandler_t).*signal], signal.h, retsigtype=void,AC_DEFINE(RETSIGTYPE, int) retsigtype=int)

# FIXME: check if alarm exists
AC_MSG_CHECKING([if signals need to be re-armed])
AC_TRY_RUN([
#include <signal.h>
#define RETSIGTYPE $retsigtype

int signal_rearms = 0;

RETSIGTYPE
child_sigint_handler(n)
int n;
{
}

RETSIGTYPE
parent_sigint_handler(n)
int n;
{
signal_rearms++;
}

main()
{
	signal(SIGINT,parent_sigint_handler);

	if (0 == fork()) {
		signal(SIGINT,child_sigint_handler);
		kill(getpid(),SIGINT);
		kill(getpid(),SIGINT);
		kill(getppid(),SIGINT);
	} else {
		int status;

		wait(&status);
		unlink("core");
		exit(signal_rearms);
	}
}],
	AC_MSG_RESULT(yes)
	AC_DEFINE(REARM_SIG)
,
	AC_MSG_RESULT(no)
, AC_MSG_WARN([Expect can't be cross compiled])
)

# HPUX7 has trouble with the big cat so split it
# Owen Rees <rtor@ansa.co.uk> 29Mar93 
SEDDEFS="${SEDDEFS}CONFEOF
cat >> conftest.sed <<CONFEOF
"
# Look for various features to determine what kind of pty
# we have. For some weird reason, ac_compile_check would not
# work, but ac_test_program does.
#
AC_MSG_CHECKING([for HP style pty allocation])
# following test fails on DECstations and other things that don't grok -c
# but that's ok, since they don't have PTYMs anyway
if test -r /dev/ptym/ptyp0 2>/dev/null ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_PTYM)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for HP style pty trapping])
AC_HEADER_EGREP([struct.*request_info], sys/ptyio.h,
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_PTYTRAP)
,
	AC_MSG_RESULT(no)
)

AC_MSG_CHECKING([for AIX new-style pty allocation])
if test -r /dev/ptc -a -r /dev/pts ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_PTC_PTS)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for SGI old-style pty allocation])
if test -r /dev/ptc -a ! -r /dev/pts ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_PTC)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for SVR4 style pty allocation])
if test -r /dev/ptmx ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_PTMX)
  # aargg. Some systems need libpt.a to use /dev/ptmx
  AC_CHECK_FUNC(ptsname, , LIBS="${LIBS} -lpt")
else
  AC_MSG_RESULT(no)
fi

# In OSF/1 case, SVR4 are somewhat different.
# Gregory Depp <depp@osf.org> 17Aug93
AC_MSG_CHECKING([for OSF/1 style pty allocation])
if test -r /dev/ptmx_bsd ; then
    AC_DEFINE(HAVE_PTMX_BSD)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

tcgetattr=0
tcsetattr=0
AC_CHECK_FUNC(tcgetattr, tcgetattr=1)
AC_CHECK_FUNC(tcsetattr, tcsetattr=1)
if test $tcgetattr -eq 1 -a $tcsetattr -eq 1 ; then
    AC_DEFINE(HAVE_TCSETATTR)
    AC_DEFINE(POSIX)
fi


# first check for the pure bsd
AC_MSG_CHECKING([for struct sgttyb])
AC_TRY_RUN([
#include <sgtty.h>
main()
{
    struct sgttyb tmp;
    exit(0);
}],
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_SGTTYB)
    PTY_TYPE=sgttyb
,
    AC_MSG_RESULT(no)
,
    AC_MSG_ERROR([Expect can't be cross compiled])
)

if test $mach -eq 0 ; then

  # next check for the older style ttys
  # note that if we detect termio.h (only), we still set PTY_TYPE=termios
  # since that just controls which of pty_XXXX.c file is use and
  # pty_termios.c is set up to handle pty_termio.
  AC_MSG_CHECKING([for struct termio])
  AC_TRY_RUN([#include <termio.h>
  main() 
  {
    struct termio tmp;
    exit(0);
  }],
    AC_DEFINE(HAVE_TERMIO)
    PTY_TYPE=termios
    AC_MSG_RESULT(yes)
  ,
    AC_MSG_RESULT(no)
  ,
      AC_MSG_ERROR([Expect can't be cross compiled])
  )

  # now check for the new style ttys (not yet posix)
  AC_MSG_CHECKING([for struct termios])
  AC_TRY_RUN([#include <termios.h>
  main()
  {
    struct termios tmp;
    exit(0);
  }],
    AC_DEFINE(HAVE_TERMIOS)
    PTY_TYPE=termios
    AC_MSG_RESULT(yes)
  ,
    AC_MSG_RESULT(no)
 ,
    AC_MSG_ERROR([Expect can't be cross compiled])
  )
fi

AC_MSG_CHECKING([if TCGETS or TCGETA in termios.h])
AC_TRY_RUN([
#include <termios.h>
main() {
#if defined(TCGETS) || defined(TCGETA)
	return 0;
#else
	return 1;
#endif
}],
	AC_DEFINE(HAVE_TCGETS_OR_TCGETA_IN_TERMIOS_H)
	AC_MSG_RESULT(yes)
,
	AC_MSG_RESULT(no)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

AC_MSG_CHECKING([if TIOCGWINSZ in termios.h])
AC_TRY_RUN([
#include <termios.h>
main() {
#ifdef TIOCGWINSZ
	return 0;
#else
	return 1;
#endif
}],
	AC_DEFINE(HAVE_TIOCGWINSZ_IN_TERMIOS_H)
	AC_MSG_RESULT(yes)
,
	AC_MSG_RESULT(no)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

# finally check for Cray style ttys
AC_MSG_CHECKING([for Cray-style ptys])
SETUID=":"
AC_TRY_RUN([
main(){
#ifdef CRAY
	return 0;
#else
	return 1;
#endif
}
],
	PTY_TYPE=unicos
	SETUID="chmod u+s"
	AC_MSG_RESULT(yes)
,
	AC_MSG_RESULT(no)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

#
# Check for select and/or poll. If both exist, we prefer select.
# if neither exists, define SIMPLE_EVENT.
#
select=0
poll=0
unset ac_cv_func_select
AC_CHECK_FUNC(select, select=1)
AC_CHECK_FUNC(poll,   poll=1)
AC_MSG_CHECKING([whether to use select, poll, or simple])
if test $select -eq 1 ; then
  EVENT_TYPE=select
  AC_MSG_RESULT(select)
elif test $poll -eq 1 ; then
  EVENT_TYPE=poll
  AC_MSG_RESULT(poll)
else
  EVENT_TYPE=simple
  AC_MSG_RESULT(simple)
  AC_DEFINE(SIMPLE_EVENT)
fi

AC_HAVE_FUNCS(_getpty)
AC_HAVE_FUNCS(getpty)

#
# check for timezones
#
AC_MSG_CHECKING([for SV-style timezone])
AC_TRY_RUN([
extern char *tzname[2];
extern int daylight;
main()
{
  int *x = &daylight;
  char **y = tzname;

  exit(0);
}],
	AC_DEFINE(HAVE_SV_TIMEZONE)
	AC_MSG_RESULT(yes),
	AC_MSG_RESULT(no)
,
	AC_MSG_ERROR([Expect can't be cross compiled])
)

#
# Set up makefile substitutions
#
AC_SUBST(CC)
AC_SUBST(EXP_CFLAGS)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LDFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_PROGS)
AC_SUBST(PTY_TYPE)
AC_SUBST(EVENT_TYPE)
AC_SUBST(SETUID)
AC_SUBST(DEFAULT_STTY_ARGS)
AC_OUTPUT(Makefile)
