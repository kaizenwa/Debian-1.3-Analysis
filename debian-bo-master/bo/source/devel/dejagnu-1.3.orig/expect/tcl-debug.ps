%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(1) 553 27 T
0 18 Q
(Intr) 72 240 T
(oduction) 102.65 240 T
1 12 Q
0.48 (T) 72 219 P
0.48 (cl [1][2] is a language speci\336cally intended for) 78.49 219 P
2.75 (generic application control.  In some applica-) 72 205 P
6.1 (tions it dominates the user) 72 191 P
6.1 (\325) 222.76 191 P
6.1 (s view of the) 226.09 191 P
0.56 (application.  Expect [3][4] is a good example of) 72 177 P
0.81 (this.  Expect is always executing T) 72 163 P
0.81 (cl statements) 242.9 163 P
1.46 (\320 usually from a script.  When the script ends,) 72 149 P
(Expect ends.) 72 135 T
1.37 (This type of application is common.  W) 72 116 P
1.37 (ith this) 271.64 116 P
1.07 (heavy reliance on T) 72 102 P
1.07 (cl, it is useful to have a de-) 169.28 102 P
2.76 (bugger that understands T) 72 88 P
2.76 (cl.  For example, it) 204.35 88 P
0.77 (should be able to single-step and print values at) 72 74 P
(user discretion.) 72 60 T
0.59 (The debugger described herein works in exactly) 324 219.5 P
2.15 (this way) 324 205.5 P
2.15 (.  It works best with applications like) 365.69 205.5 P
0.6 (Expect that sequentially execute T) 324 191.5 P
0.6 (cl commands,) 490.77 191.5 P
0.81 (although it can also be used with any T) 324 177.5 P
0.81 (cl appli-) 517.55 177.5 P
(cation.) 324 163.5 T
2.39 (This paper has three parts.  The \336rst part de-) 324 144.5 P
-0.12 (scribes the debugger in terms of how it is used in) 324 130.5 P
-0.08 (a typical application.   The second part of the pa-) 324 116.5 P
8.03 (per describes how the debugger can be) 324 102.5 P
1.48 (integrated into T) 324 88.5 P
1.48 (cl applications.  The third part) 406.06 88.5 P
1.36 (describes the design and implementation of the) 324 74.5 P
(debugger) 324 60.5 T
(.) 367.97 60.5 T
126 279 504 684 R
7 X
V
0 24 Q
0 X
(A Debugger for T) 148.87 668 T
(cl Applications) 328.53 668 T
2 14 Q
(Don Libes) 286.04 632.67 T
1 F
(National Institute of Standards and T) 182.77 611.67 T
(echnology) 388.93 611.67 T
2 F
(Abstract) 291.29 548.67 T
1 12 Q
0.51 (T) 126 529 P
0.51 (cl is a language speci\336cally intended for generic application control.  By us-) 132.49 529 P
2.79 (ing it, application programmers escape the dilemma of whether to design) 126 515 P
2.36 (sophisticated application-speci\336c languages or whether to build tools more) 126 501 P
0.5 (quickly but that are limited in \337exibility) 126 487 P
0.5 (.  T) 320.13 487 P
0.5 (cl is easy for application program-) 336.62 487 P
0.49 (mers to use, however) 126 473 P
0.49 (, up to now) 228.91 473 P
0.49 (, there has been no general-purpose debugger) 283.58 473 P
(for application users.) 126 459 T
1.88 (This paper describes an implementation of a debugger for T) 126 440 P
1.88 (cl applications.) 429.5 440 P
1.02 (The debugger has a typical front-end but with some extremely unusual com-) 126 426 P
0.37 (mands, in part because of the features and limitations of T) 126 412 P
0.37 (cl.  The debugger is) 407.61 412 P
1.47 (modeless, allowing users to issue T) 126 398 P
1.47 (cl and application commands along with) 302.42 398 P
0.58 (debugger commands.  Each type of command may invoke the other) 126 384 P
0.58 (, allowing) 455.44 384 P
(debugging to be programmed, dynamically or in advance.) 126 370 T
0.43 (The debugger is written in C and is very fast.  When linked in but not used, it) 126 351 P
0.99 (does not slow applications at all.  The debugger requires no modi\336cations to) 126 337 P
(the T) 126 323 T
(cl core, and can be plugged into applications with little ef) 150.14 323 T
(fort.) 425.4 323 T
(Keywords: T) 126 285 T
(cl, Tk, T) 188.11 285 T
(ool Command Language, Expect, debugger) 228.58 285 T
(, interpreter) 436.62 285 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(2) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
0 18 Q
(V) 54 726 T
(iew by the Application User) 66.32 726 T
1 12 Q
1.35 (This section of the paper is a debugger tutorial) 54 705 P
1.34 (which shows the application user) 54 691 P
1.34 (\325) 219.02 691 P
1.34 (s view of the) 222.36 691 P
0.84 (debugger) 54 677 P
0.84 (.  For the sake of concreteness, Expect) 97.97 677 P
2.08 ([1] will be used as the application.  However) 54 663 P
2.08 (,) 285 663 P
2.8 (any other application using the debugger will) 54 649 P
(work similarly) 54 635 T
(.) 123.51 635 T
0 F
(Starting the Debugger) 54 613 T
1 F
0.93 (The debugger is initially invoked in an applica-) 54 594 P
0.75 (tion-dependent way) 54 580 P
0.75 (.  In Expect, the debugger is) 148.9 580 P
(started by using the \337ag \322-D 1\323.  For example:) 54 566 T
3 11 Q
(% expect -D 1 script) 72 547.67 T
1 12 Q
2.78 (If the system supports the #! mechanism, the) 54 532 P
(script may also be started as:) 54 518 T
3 11 Q
(% script -D 1) 72 499.67 T
1 12 Q
0.25 (In either case, additional ar) 54 484 P
0.25 (guments may be sup-) 184.99 484 P
(plied as usual.) 54 470 T
1.72 (The user is prompted for a command.  At this) 54 451 P
1.73 (point either Expect commands, T) 54 437 P
1.73 (cl commands,) 219.65 437 P
0.48 (or debugger commands may be entered.  This is) 54 423 P
-0.25 (true at all other times that the user is prompted as) 54 409 P
(well.  The debugger is modeless.) 54 395 T
1.5 (The following T) 54 376 P
1.5 (cl commands illustrate that the) 134.77 376 P
(debugger evaluates T) 54 362 T
(cl commands as usual.) 155.74 362 T
3 11 Q
(expect2.1> set m {a b c}) 72 343.67 T
(a b c) 72 328.67 T
(expect2.2> llength $m) 72 313.67 T
(3) 72 298.67 T
(expect2.3>) 72 283.67 T
1 12 Q
1.21 (The command prompt is changeable by the ap-) 54 268 P
-0.09 (plication or user) 54 254 P
-0.09 (.  Here, the second number is the) 131.1 254 P
2.41 (T) 54 240 P
2.41 (cl history identi\336er) 60.49 240 P
2.41 (.  The \336rst number is the) 155.93 240 P
(depth of the evaluation stack.) 54 226 T
0.51 (In the context of a script, the initial depth of the) 54 207 P
0.02 (evaluation stack is 1 but the debugger always in-) 54 193 P
0.02 (troduces a new level to the stack.  Hence, we see) 54 179 P
(a \3222\323 in the prompt.) 54 165 T
0.54 (Expect also allows the application to take initial) 54 146 P
1.31 (control.  By using the \337ag \322-D 0\323, the applica-) 54 132 P
0.39 (tion runs until the user presses ^C at which time) 54 118 P
0.69 (the debugger begins running.  The remainder of) 54 104 P
1.97 (this tutorial will assume that the debugger has) 54 90 P
(started up immediately from the \337ag \322-D 1\323.) 54 76 T
0 F
(Command Overview and Philosophy) 306 730 T
1 F
(The debugger commands are:) 306 711 T
352.64 690.69 324 690.69 2 L
V
0.59 H
0 Z
N
(Name) 324 692 T
424.96 690.69 369 690.69 2 L
V
N
(Description) 369 692 T
(s) 338.11 676 T
(step into procedure) 369 676 T
(n) 338.11 660 T
(step over procedure) 369 660 T
(r) 338.11 644 T
(return from procedure) 369 644 T
(b) 338.11 628 T
(set, clear) 369 628 T
(, or show breakpoint) 411.14 628 T
(c) 338.11 612 T
(continue) 369 612 T
(w) 338.11 596 T
(show stack) 369 596 T
(u) 338.11 580 T
(move scope up) 369 580 T
(d) 338.11 564 T
(move scope down) 369 564 T
(h) 338.11 548 T
(help) 369 548 T
0.12 (The debugger commands are all one letter) 306 532 P
0.12 (. Short) 507.89 532 P
0.7 (procedure names are desirable in an interactive-) 306 518 P
1.31 (only application such as the debugger) 306 504 P
1.31 (.  In con-) 492.77 504 P
1.9 (trast, scripted applications rarely use one-letter) 306 490 P
2.03 (commands.  The chances of name con\337ict be-) 306 476 P
0.03 (tween the debugger and scripted applications are) 306 462 P
(very low) 306 448 T
(.) 347.52 448 T
2.5 (The command names are very similar and, in) 306 429 P
0.19 (some cases, identical to other popular debuggers) 306 415 P
0.54 (\050gdb, dbx, etc.\051.  Existing T) 306 401 P
0.54 (cl procedures are di-) 440.13 401 P
0.23 (rectly usable so there are no new commands, for) 306 387 P
-0.14 (example, to print variables since T) 306 373 P
-0.14 (cl already pro-) 470.35 373 P
2.58 (vides such commands \050e.g., set, puts, parray\051.) 306 359 P
1.76 (The intent of the debugger is that it should be) 306 345 P
0.83 (easy to learn and use, and otherwise stay out of) 306 331 P
(the way) 306 317 T
(.) 342.86 317 T
0.03 (The debugger uses the application\325) 306 298 P
0.03 (s top-level in-) 473.32 298 P
0.47 (teractor) 306 284 P
0.47 (.  In the case of Expect, for example, the) 341.97 284 P
-0.03 (debugger uses Expect\325) 306 270 P
-0.03 (s interact command which) 413.85 270 P
(prompts for commands and evaluates them.) 306 256 T
3.8 (For the purposes of describing the debugger) 306 237 P
0.02 (commands, the following script is assumed to be) 306 223 P
2.34 (named) 306 209 P
2 F
2.34 (debug-test.exp) 343.31 209 P
1 F
2.34 (.) 412.92 209 P
1 10 Q
1.95 (1) 415.92 213.8 P
1 12 Q
2.34 (  The script doesn\325) 420.92 209 P
2.34 (t do) 519.33 209 P
2.4 (anything useful.  It merely serves to illustrate) 306 195 P
(how the debugger is used.) 306 181 T
3 11 Q
(set b 1) 324 162.67 T
(proc p4 {x} {) 324 132.67 T
(return [) 360 117.67 T
(    expr 5+[expr 1+$x]]) 360 102.67 T
(}) 324 87.67 T
306 66 540 81 C
315 79 459 79 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(1. Italics indicate something being de\336ned.) 324 59.33 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(3) 553 27 T
3 11 Q
(set z [) 90 715.67 T
(   expr 1+[expr 2+[p4 $b]]) 90 700.67 T
(]) 90 685.67 T
(proc p3 {} {) 90 655.67 T
(set m 0) 126 640.67 T
(}) 90 625.67 T
(proc p2 {} {) 90 595.67 T
(set c 4) 126 580.67 T
(p3) 126 565.67 T
(set d 5) 126 550.67 T
(}) 90 535.67 T
(proc p1 {} {) 90 505.67 T
(set a 2) 126 490.67 T
(p2) 126 475.67 T
(set a 3) 126 460.67 T
(set a 5) 126 445.67 T
(}) 90 430.67 T
(p1) 90 400.67 T
(set k 7) 90 385.67 T
(p1) 90 370.67 T
1 12 Q
0.43 (If the debugger is started at the beginning of the) 72 355 P
2.1 (script, no statements have been executed.  T) 72 341 P
2.1 (cl) 297.34 341 P
(and application commands have global scope.) 72 327 T
3 11 Q
(% expect -D 1 debug-test.exp) 90 308.67 T
(1: set b 1) 90 293.67 T
(expect2.1>) 90 278.67 T
1 12 Q
0.98 (When a new command is about to be executed,) 72 263 P
-0.02 (the debugger prints the command.  It is preceded) 72 249 P
1.78 (by the evaluation stack level.  \322set b 1\323 is the) 72 235 P
-0.05 (\336rst line in the script.  It has not yet been execut-) 72 221 P
(ed.  \322info exists\323 con\336rms this.) 72 207 T
3 11 Q
(expect2.1> info exists b) 90 188.67 T
(0) 90 173.67 T
0 14 Q
(The \322n\323 command \320 \322Next\323) 72 148.67 T
1 12 Q
0.36 (The) 72 129 P
2 F
0.36 (n) 94.01 129 P
1 F
0.36 ( command executes the pending command) 100.01 129 P
1.26 (\320 in this case \322set b 1\323 \320 and displays the next) 72 115 P
(command to be executed.) 72 101 T
3 11 Q
(expect2.2> n) 90 82.67 T
(1: proc p4 {} {) 90 67.67 T
(return [) 378 730.67 T
(expr 5+[expr 1+$x]]) 414 715.67 T
(}) 342 700.67 T
(expect2.3> info exists b) 342 685.67 T
(1) 342 670.67 T
1 12 Q
-0.15 (The command \322info exists b\323 con\336rms that b has) 324 655 P
1.58 (been set.  The procedure p4 is about to be de-) 324 641 P
(\336ned.) 324 627 T
3 11 Q
(expect2.4> n) 342 608.67 T
(4: p4 $b) 342 593.67 T
(expect5.5>) 342 578.67 T
1 12 Q
1.9 (The procedure p4 has now been de\336ned.  The) 324 563 P
0.32 (next command to be executed is p4 itself.  It ap-) 324 549 P
(pears in the statement:) 324 535 T
3 11 Q
(set z [) 342 516.67 T
(expr 1+[expr 2+[p4 $b]]) 378 501.67 T
(]) 342 486.67 T
1 12 Q
0.11 (The three sets of braces introduce three new lev-) 324 471 P
0.23 (els on the evaluation stack, hence the stack level) 324 457 P
0.62 (in which p4 is about to be executed is shown as) 324 443 P
(\3224\323.) 324 429 T
1 10 Q
(1) 343.64 433.8 T
1 12 Q
1.88 (Notice that the evaluation stack level does not) 324 410 P
2.22 (af) 324 396 P
2.22 (fect the scope.  W) 333.1 396 P
2.22 (e are still in the top-level) 427.3 396 P
(scope and b is still visible.) 324 382 T
3 11 Q
(expect5.5> info exists b) 342 363.67 T
(1) 342 348.67 T
1 12 Q
0.4 (The ar) 324 333 P
0.4 (gument to p4 is $b.  The value of this can) 355.15 333 P
(be evaluated by using set or puts.) 324 319 T
3 11 Q
(expect5.6> set b) 342 300.67 T
(1) 342 285.67 T
(expect5.7> puts $b) 342 270.67 T
(1) 342 255.67 T
1 12 Q
2.19 (Another n command executes p4, popping the) 324 240 P
0.21 (stack one level.  Additional n commands contin-) 324 226 P
0.15 (ue evaluation of the \322set z\323 command, each time) 324 212 P
(popping the stack one level.) 324 198 T
3 11 Q
(expect5.8> n) 342 179.67 T
(3: expr 2+[p4 $b]) 342 164.67 T
(expect4.9> n) 342 149.67 T
(2: expr 1+[expr 2+[p4 $b]]) 342 134.67 T
(expect3.10> n) 342 119.67 T
324 90 558 105 C
333 103 477 103 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.85 (1. Whether the word \322stack\323 refers to procedure) 342 83.33 P
2.31 (call stack or evaluation stack should either be) 342 71.33 P
(explicit or clearly implied by context.) 342 59.33 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(4) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
3 11 Q
(1: set z [) 72 730.67 T
(expr 1+[expr 2+[p4 $b]]) 108 715.67 T
(]) 72 700.67 T
(expect2.11>) 72 685.67 T
0 14 Q
(The \322s\323 command \320 \322Step\323) 54 660.67 T
1 12 Q
0.7 (The n command executes a procedure atomical-) 54 641 P
-0.16 (ly) 54 627 P
-0.16 (.  It is possible to step into a procedure with the) 62.55 627 P
2 F
(s) 54 613 T
1 F
( command.) 58.67 613 T
1.97 (W) 54 594 P
1.97 (e\325ll rewind this scenario to just before p4 is) 64.36 594 P
(about to be executed.) 54 580 T
1 10 Q
(1) 155.92 584.8 T
3 11 Q
(4: p4 $b) 72 561.67 T
(expect5.5> s) 72 546.67 T
(7: expr 1+$x) 72 531.67 T
(expect8.6>) 72 516.67 T
1 12 Q
0.17 (\322expr 1+$x\323 is the \336rst command to be executed) 54 501 P
0.48 (inside of p4.  It is nested inside of two brackets,) 54 487 P
-0.22 (plus the procedure call of p4, so the stack level is) 54 473 P
(increased by three.) 54 459 T
0.5 (After the s command, the debugger stops before) 54 440 P
0.1 (the \336rst command in the procedure and waits for) 54 426 P
(more interactive commands.) 54 412 T
1.46 (If the command that is about to be executed is) 54 393 P
(not a procedure, then s and n behave identically) 54 379 T
(.) 282.04 379 T
1.78 (Both s and n take an optional ar) 54 360 P
1.78 (gument in the) 218.48 360 P
2.26 (form of a number describing how many com-) 54 346 P
(mands to execute.) 54 332 T
(For example:) 54 313 T
3 11 Q
(s 2) 72 294.67 T
(s 100) 72 279.67 T
(s $b) 72 264.67 T
(s [expr 2+[p4 $b]]) 72 249.67 T
1 12 Q
2.62 (The ar) 54 234 P
2.62 (guments are evaluated according to the) 87.37 234 P
1.71 (usual T) 54 220 P
1.71 (cl rules because s and n are commands) 90.51 220 P
(known to T) 54 206 T
(cl.) 108.46 206 T
1.92 (The debugger will not interrupt procedures in-) 54 187 P
1.35 (voked from the command-line.  This is usually) 54 173 P
1.99 (the desired behavior) 54 159 P
1.99 (, although it is possible to) 154.76 159 P
(change this.) 54 145 T
54 78 288 93 C
63 91 207 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.29 (1. There is no actual command to \322rewind\323 com-) 72 71.33 P
(mands, alas.) 72 59.33 T
0 14 Q
(The \322w\323 Command \320 \322Wher) 306 728.67 T
(e\323) 478.32 728.67 T
1 12 Q
0.9 (In the current scenario, we are about to execute) 306 709 P
1.97 (\322expr 1+$x\323 in the procedure p4.  W) 306 695 P
1.97 (e can re-) 494.78 695 P
0.18 (mind ourselves of this by displaying the stack of) 306 681 P
(procedure scopes using the) 306 667 T
2 F
(w) 438.56 667 T
1 F
( command.) 446.56 667 T
3 11 Q
(7: expr 1+$x) 324 648.67 T
(expect8.6> w) 324 633.67 T
( 0: expect -D 1 debug-test.exp) 324 618.67 T
(*1: p4 1) 324 603.67 T
( 7: expr 1+1) 324 588.67 T
1 12 Q
0.45 (The \336rst line describes scope 0.  This is the top-) 306 573 P
1.64 (level scope of the \336le itself, and the command) 306 559 P
0.83 (used to invoke the program is shown.  The sec-) 306 545 P
6.73 (ond line describes scope 1 which is the) 306 531 P
-0.15 (invocation of procedure p4.  The last line is not a) 306 517 P
0.93 (scope but just repeats the evaluation stack level) 306 503 P
(and the command about to be executed.) 306 489 T
1.55 (Notice that when w prints commands, they are) 306 470 P
0.26 (displayed using the literal values of each param-) 306 456 P
9.91 (eter) 306 442 P
9.91 (.  In contrast, when the debugger) 323.32 442 P
0.26 (automatically prints out the next command to be) 306 428 P
-0.19 (executed, the command is printed as it was origi-) 306 414 P
2.77 (nally entered in the script.  For example, the) 306 400 P
4.36 (debugger initially stopped and printed \322expr) 306 386 P
0.68 (1+$w\323, but the same instruction shows as \322expr) 306 372 P
(1+1\323 in the output from the w command.) 306 358 T
0 14 Q
(The Curr) 306 332.67 T
(ent Scope) 362.88 332.67 T
1 12 Q
1.4 (Executing fourteen steps \050via \322s 14\323\051 brings us) 306 313 P
(to the \336rst command in procedure p3.) 306 299 T
3 11 Q
(expect8.8> s 14) 324 280.67 T
(4: set m 0) 324 265.67 T
(expect5.9> w) 324 250.67 T
( 0: expect -D 1 debug-test.exp) 324 235.67 T
( 1: p1) 324 220.67 T
( 2: p2) 324 205.67 T
(*3: p3) 324 190.67 T
( 4: set m 0) 324 175.67 T
1 12 Q
0.03 (The asterisk denotes that p3 is the) 306 160 P
2 F
0.03 (curr) 471.8 160 P
0.03 (ent scope) 492 160 P
1 F
0.03 (.) 537 160 P
0.78 (W) 306 146 P
0.78 (e can now execute T) 316.36 146 P
0.78 (cl commands appropriate) 417.2 146 P
2.56 (to the scope of p3.  This includes commands) 306 132 P
(such as global, uplevel, and upvar) 306 118 T
(.) 468.22 118 T
3 11 Q
(expect5.10> uplevel {set c}) 324 99.67 T
(4) 324 84.67 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(5) 553 27 T
0 14 Q
3.37 (The \322u\323 and \322d\323 commands \320 \322Up\323) 72 728.67 P
(and \322Down\323) 72 712.67 T
1 12 Q
0.02 (The current scope can be changed by the u and d) 72 693 P
0.02 (commands.) 72 679 P
2 F
0.02 (u) 133 679 P
1 F
0.02 ( moves the current scope up, while) 139 679 P
2 F
1.26 (d) 72 665 P
1 F
1.26 ( moves it down.  Interactive variable accesses) 78 665 P
(always refer to the current scope.) 72 651 T
3 11 Q
(expect5.11> u) 90 632.67 T
(expect5.12> w) 90 617.67 T
( 0: expect -D 1 debug-test.exp) 90 602.67 T
( 1: p1) 90 587.67 T
(*2: p2) 90 572.67 T
( 3: p3) 90 557.67 T
( 4: set m 0) 90 542.67 T
(expect5.13> set c) 90 527.67 T
(4) 90 512.67 T
1 12 Q
2.01 (Both u and d accept an ar) 72 497 P
2.01 (gument representing) 205.73 497 P
-0.15 (the number of scopes by which to move.  For ex-) 72 483 P
(ample, \322u 2\323 moves from scope 2 to scope 0.) 72 469 T
3 11 Q
(expect5.14> u 2) 90 450.67 T
(expect5.15> w) 90 435.67 T
(*0: expect -D 1 debug-test.exp) 90 420.67 T
( 1: p1) 90 405.67 T
( 2: p2) 90 390.67 T
( 3: p3) 90 375.67 T
( 4: set m 0) 90 360.67 T
1 12 Q
-0.17 (An absolute scope is also accepted in the form of) 72 345 P
(\322#\323 followed by a scope number) 72 331 T
(, such as \322#3\323.) 227.06 331 T
3 11 Q
(expect5.16> u #3) 90 312.67 T
(expect5.17> w) 90 297.67 T
( 0: expect -D 1 debug-test.exp) 90 282.67 T
( 1: p1) 90 267.67 T
( 2: p2) 90 252.67 T
(*3: p3) 90 237.67 T
( 4: set m 0) 90 222.67 T
1 12 Q
0.83 (When an absolute scope is named, either u or d) 72 207 P
0.5 (may be used, irrespective of which direction the) 72 193 P
(new scope lies.) 72 179 T
0.96 (Moving the scope does not af) 72 160 P
0.96 (fect the command) 218.15 160 P
0.25 (that is about to be executed.  If a command such) 72 146 P
0.58 (as s or n is given, the current scope is automati-) 72 132 P
5.7 (cally reset to whereever is appropriate for) 72 118 P
(execution of the new command.) 72 104 T
0 14 Q
(The \322r\323 Command \320 \322Return\323) 324 728.67 T
1 12 Q
0.45 (The) 324 709 P
2 F
0.45 (r) 346.1 709 P
1 F
0.45 ( command completes execution of the cur-) 350.77 709 P
0.28 (rent procedure.  In other words, it stops after the) 324 695 P
(current procedure returns.) 324 681 T
3 11 Q
(expect5.18> r) 342 662.67 T
(3: set d 5) 342 647.67 T
(expect4.19> w) 342 632.67 T
( 0: expect -D 1 debug-test.exp) 342 617.67 T
( 1: p1) 342 602.67 T
(*2: p2) 342 587.67 T
( 3: set d 5) 342 572.67 T
(expect4.20> r) 342 557.67 T
(2: set a 3) 342 542.67 T
(expect3.21> w) 342 527.67 T
( 0: expect -D 1 debug-test.exp) 342 512.67 T
(*1: p1) 342 497.67 T
( 2: set a 3) 342 482.67 T
(expect3.22> r) 342 467.67 T
(1: set k 7) 342 452.67 T
(expect2.23> w) 342 437.67 T
(*0: expect -D 1 debug-test.exp) 342 422.67 T
( 1: set k 7) 342 407.67 T
(expect2.24> r) 342 392.67 T
(nowhere to return to) 342 377.67 T
0 14 Q
(The \322c\323 Command \320 \322Continue\323) 324 352.67 T
1 12 Q
3.25 (The) 324 333 P
2 F
3.25 (c) 348.9 333 P
1 F
3.25 ( command lets execution of commands) 354.22 333 P
1.92 (continue without having to single-step.  In the) 324 319 P
0.43 (scenario so far) 324 305 P
0.43 (, given a command anywhere, the) 394.31 305 P
-0.22 (program would continue until the script ends and) 324 291 P
(the shell prompt appears.) 324 277 T
3 11 Q
(expect2.25> c) 342 258.67 T
(%) 342 243.67 T
1 12 Q
-0.22 (The c command is also useful in other ways.  Af-) 324 228 P
4.86 (ter setting breakpoints, the program can be) 324 214 P
-0.27 (continued until it hits a breakpoint.  The program) 324 200 P
0.4 (can also be continued until a signal occurs, such) 324 186 P
(as by the user pressing ^C.) 324 172 T
0 14 Q
(The \322b\323 Command \320 \322Br) 324 146.67 T
(eakpoint\323) 475.34 146.67 T
1 12 Q
1.6 (Prior commands have shown how to execute a) 324 127 P
1.75 (\336xed number of commands or procedure calls.) 324 113 P
2.12 (In contrast, breakpoints provide a way to stop) 324 99 P
0.97 (execution upon a condition.  The conditions in-) 324 85 P
(clude:) 324 71 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(6) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
(\245) 71.5 730 T
(line number and \336lename matching) 88.49 730 T
(\245) 71.5 711 T
(expression testing) 88.49 711 T
(\245) 71.5 692 T
(command and ar) 88.49 692 T
(gument name matching) 168.21 692 T
0 F
(Br) 54 670 T
(eakpoint by Line Number and Filename) 67.11 670 T
0 10 Q
(1) 272.02 674.8 T
1 12 Q
1.31 (Line numbers and \336lenames are the most com-) 54 651 P
1.05 (mon way to specify a breakpoint.  This form is) 54 637 P
-0.14 (correspondingly the most compact.  For example) 54 623 P
4.63 (the following command causes execution to) 54 609 P
(break before executing line 7.) 54 595 T
3 11 Q
(expect2.26> b 7) 72 576.67 T
(0) 72 561.67 T
1 12 Q
0.5 (After creation of a breakpoint, an integer identi-) 54 546 P
1.23 (fying the breakpoint is printed.  The reason for) 54 532 P
(this will be described later) 54 518 T
(.) 179.92 518 T
0.76 (By default, the line number refers to the \336le as-) 54 499 P
-0.02 (sociated with the current scope.  A \336lename may) 54 485 P
1.67 (be used to refer to a dif) 54 471 P
1.67 (ferent \336le.  A colon is) 175.05 471 P
(used to separate the \336lename and line number) 54 457 T
(.) 272.84 457 T
3 11 Q
(expect2.27> b foo.exp:7) 72 438.67 T
0 12 Q
(Br) 54 417 T
(eakpoint by Expr) 67.11 417 T
(ession) 156.2 417 T
1 F
0.41 (It is possible to break at a line only when an ex-) 54 398 P
3.11 (pression is true.  For example, the following) 54 384 P
2.74 (command causes execution to break at line 7) 54 370 P
(only when foo is greater than three.) 54 356 T
3 11 Q
(expect2.28> b 7 if {$foo>3}) 72 337.67 T
1 12 Q
0.21 (Expressions are the usual T) 54 322 P
0.21 (cl syntax and may be) 185.9 322 P
(arbitrarily complex.) 54 308 T
0.03 (No breakpointing occurs inside of the evaluation) 54 289 P
0.24 (of breakpoint expressions \050unless another break-) 54 275 P
(point dictates this\051.) 54 261 T
0 F
(Br) 54 239 T
(eakpoint by Pattern Match) 67.11 239 T
1 F
1.35 (It is also possible to de\336ne breakpoints by pat-) 54 220 P
2.67 (tern matching on the command or ar) 54 206 P
2.67 (guments.) 244.36 206 P
-0.12 (Regular expressions are introduced by the \337ag \322-) 54 192 P
3.04 (regexp\323 \050commonly abbreviated \322-re\323\051) 54 178 P
1 10 Q
2.53 (2) 249.28 182.8 P
1 12 Q
3.04 (.  The) 254.28 178 P
2.54 (following command stops if the string p4 ap-) 54 164 P
(pears within the command:) 54 150 T
3 11 Q
(expect2.29> b -re "p4") 72 131.67 T
54 102 288 117 C
63 115 207 115 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.16 (1. Breakpoints by line number and \336lename are) 72 95.33 P
0.21 (not currently supported.  See \322Line Numbers\323 on) 72 83.33 P
3.62 (page) 72 71.33 P
3.62 (13 and \322Current Limitations and Future) 93.37 71.33 P
(W) 72 59.33 T
(ork\323 on page) 80.64 59.33 T
(15.) 134.76 59.33 T
3 11 Q
(0) 324 730.67 T
1 12 Q
1.48 (W) 306 715 P
1.48 (ith our sample \336le, we can see the results of) 316.84 715 P
(this:) 306 701 T
3 11 Q
(% expect -D 1 debug-test.exp) 324 682.67 T
(1: set b 1) 324 667.67 T
(expect2.1> b -re "p4") 324 652.67 T
(0) 324 637.67 T
(expect2.2> c) 324 622.67 T
(breakpoint 0: -re "p4") 324 607.67 T
(1: proc p4 {x} {) 324 592.67 T
(        return [) 324 577.67 T
(expr 5+[expr 1+$x]]) 396 562.67 T
(}) 324 547.67 T
(expect2.3> c) 324 532.67 T
(breakpoint 0: -re "p4") 324 517.67 T
(4: p4 $b) 324 502.67 T
(expect5.4> c) 324 487.67 T
(breakpoint 0: -re "p4") 324 472.67 T
(3: expr 2+[p4 $b]) 324 457.67 T
(expect4.5> c) 324 442.67 T
(breakpoint 0: -re "p4") 324 427.67 T
(2: expr 1+[expr 2+[p4 $b]]) 324 412.67 T
1 12 Q
0.14 (The \336rst breakpoint occurred upon the de\336nition) 306 397 P
-0.01 (of p4.  The second occurred when p4 was called.) 306 383 P
0.17 (T) 306 369 P
0.17 (wo more breakpoints occurred only because p4) 312.49 369 P
(was mentioned in the command.) 306 355 T
0.05 (W) 306 336 P
0.05 (ith appropriate regular expressions, any one of) 316.84 336 P
0.8 (these can be selected by itself.  For example, to) 306 322 P
(stop only on de\336nitions:) 306 308 T
3 11 Q
(expect2.1> b -re "proc p4 ") 324 289.67 T
1 12 Q
(T) 306 274 T
(o stop only on a call to p4 itself:) 312.49 274 T
3 11 Q
(expect2.2> b -re "^p4 ") 324 255.67 T
1 12 Q
(T) 306 240 T
(o stop only on commands which call p4:) 312.49 240 T
3 11 Q
(expect2.3> b -re "\134\134\134[p4 ") 324 221.67 T
1 12 Q
0.64 (The complexity of this last example is, perhaps,) 306 206 P
1.13 (somewhat ameliorated by the unlikelihood of it) 306 192 P
1.87 (ever being used.  It is more shown simply for) 306 178 P
0.52 (completeness.  The point is, the ability to match) 306 164 P
(on regular expressions is extremely powerful.) 306 150 T
306 126 540 141 C
315 139 459 139 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.05 (2. The debugger permits all \337ags to be abbrevi-) 324 119.33 P
0.67 (ated to the smallest unique pre\336x.  For example,) 324 107.33 P
0.85 (\322-regexp\323 can actually be abbreviated \322-r\323.  The) 324 95.33 P
-0.1 (usual quoting conventions around patterns should) 324 83.33 P
0.6 (be observed.  In this example, the quotes around) 324 71.33 P
(p4 can be omitted.) 324 59.33 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(7) 553 27 T
1 12 Q
0.64 (Multi-line patterns may be matched in the usual) 72 730 P
(way \320 using characters such as \134n and \134r) 72 716 T
(.) 261.86 716 T
1 10 Q
(1) 264.85 720.8 T
1 12 Q
2.8 (Glob-style matching is available by using the) 72 697 P
-0.13 (\337ag -glob instead of -regexp.  It works exactly as) 72 683 P
1 (in T) 72 669 P
1 (cl\325) 91.82 669 P
1 (s case command.  Since glob matches an) 103.81 669 P
2.4 (entire string by default, the equivalents to the) 72 655 P
1.56 (previous example look slightly dif) 72 641 P
1.56 (ferent.  Note) 242.6 641 P
(the asterisks.) 72 627 T
(T) 72 608 T
(o stop only on de\336nitions:) 78.49 608 T
3 11 Q
(expect2.4> b -glob "proc p4 *") 90 589.67 T
1 12 Q
(On calls to p4:) 72 574 T
3 11 Q
(expect2.5> b -glob "p4") 90 555.67 T
1 12 Q
(On commands which call p4:) 72 540 T
3 11 Q
(expect2.6> b -glob "*\134\134\134[p4 *") 90 521.67 T
1 12 Q
1.02 (Expressions can be combined with patterns just) 72 506 P
0.2 (as if they were with line numbers.  For example,) 72 492 P
0.41 (to break on a call to p4 only when foo is greater) 72 478 P
(than three:) 72 464 T
3 11 Q
-0.31 (expect2.7> b -glob p4 if {$foo>3}) 90 445.67 P
1 12 Q
4.76 (Regular expression patterns save the strings) 72 430 P
2.6 (which matched any patterns in the array) 72 416 P
2 F
2.6 (dbg) 285.01 416 P
1 F
2.6 (.) 303 416 P
0.77 (The part of the command matched by the entire) 72 402 P
1.42 (pattern is saved in $dbg\0500\051.  Up to 9 parenthe-) 72 388 P
1.81 (sized subpattern matches are stored in $dbg\0501\051) 72 374 P
(through $dbg\0509\051.) 72 360 T
1.9 (For example, the name of a variable being set) 72 341 P
1.69 (can be accessed as $dbg\0501\051 after the following) 72 327 P
(breakpoint:) 72 313 T
3 11 Q
(expect2.8> b -re {^set \050[^ ]\051+ }) 90 294.67 T
1 12 Q
0.17 (This can be used to construct more sophisticated) 72 279 P
0.81 (breakpoints.  For example, the following break-) 72 265 P
2.36 (point occurs only when the variable being set) 72 251 P
(was already set.) 72 237 T
3 11 Q
-0.22 (expect2.9> b -re {^set \050[^ ]\051+ }) 90 218.67 P
(if {info exists $dbg\0501\051}) 90 205.67 T
0 12 Q
(Br) 72 184 T
(eakpoint Actions) 85.11 184 T
1 F
-0.17 (Breakpoints may trigger actions.  The default ac-) 72 165 P
0.46 (tion prints the breakpoint id and de\336nition.  It is) 72 151 P
0.04 (possible to replace this action with any T) 72 137 P
0.04 (cl state-) 268.32 137 P
1.31 (ment.  As an example, the following command) 72 123 P
72 102 306 117 C
81 115 225 115 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.53 (1. Using braces instead of double quotes permits) 90 95.33 P
1.31 (the previous pattern to be simpli\336ed to {\134[p4 }.) 90 83.33 P
2.39 (However) 90 71.33 P
2.39 (, the braces prevent the possibility of) 126.23 71.33 P
-0.17 (explicitly matching escaped characters such as \134n.) 90 59.33 P
1 12 Q
1.8 (de\336nes a breakpoint which prints a descriptive) 324 730 P
2.45 (message whenever the variable a is being de-) 324 716 P
(\336ned:) 324 702 T
3 11 Q
-0.22 (expect2.1> b -re "^set a " then {) 342 683.67 P
(+>) 342 668.67 T
(puts "a is being set") 378 668.67 T
3 9 Q
(2) 516.43 673.07 T
3 11 Q
(+>) 342 653.67 T
(puts "old value of a = $a") 378 653.67 T
(+> }) 342 638.67 T
1 12 Q
(When run, it looks like this:) 324 623 T
3 11 Q
(expect2.2> c) 342 604.67 T
(a is being set) 342 589.67 T
(2: set a 2) 342 574.67 T
(expect3.3> c) 342 559.67 T
(a is being set) 342 544.67 T
(old value of a = 2) 342 529.67 T
(2: set a 3) 342 514.67 T
(expect3.4> c) 342 499.67 T
(a is being set) 342 484.67 T
(old value of a = 3) 342 469.67 T
(2: set a 5) 342 454.67 T
1 12 Q
2.88 (Each time the breakpoint occurs, the old and) 324 439 P
1.95 (new value of a are displayed.  Notice that the) 324 425 P
0.56 (\336rst time the breakpoint occurred, a was not de-) 324 411 P
0.87 (\336ned.  In this case, $a was meaningless and the) 324 397 P
1.73 (puts command was not executed.  If there had) 324 383 P
1.86 (been further statements in the breakpoint, they) 324 369 P
2.4 (would also have been skipped.  Implicit error) 324 355 P
(messages generated by actions are discarded.) 324 341 T
1.17 (Error messages generated in breakpoint expres-) 324 322 P
0.31 (sions are also discarded.  It is assumed that such) 324 308 P
-0.26 (errors are just variables temporarily out of scope.) 324 294 P
3.08 (By default, breakpoints stop execution of the) 324 275 P
-0.29 (program.  It is possible to tell the debugger not to) 324 261 P
1.71 (stop by using the commands c, s, n, or r from) 324 247 P
(within an action.) 324 233 T
0.26 (This can be used to trace variables.  T) 324 214 P
0.26 (o illustrate) 506.77 214 P
-0.06 (a dif) 324 200 P
-0.06 (ferent ef) 345.37 200 P
-0.06 (fect, the following breakpoint prints) 385.37 200 P
0.15 (out the name of each procedure as it is being de-) 324 186 P
(\336ned.) 324 172 T
3 11 Q
-1.35 (expect2.1> b -re \322proc \050p.\051\323 then) 342 153.67 P
({) 342 140.67 T
(+>) 342 125.67 T
(puts \322proc $dbg\0501\051 defined\323) 378 125.67 T
(+>) 342 110.67 T
(c) 378 110.67 T
324 78 558 93 C
333 91 477 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
-0.13 (2. Expect prompts with \322+>\323 when an incomplete) 342 71.33 P
(command has been entered.) 342 59.33 T
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(8) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
3 11 Q
(+> }) 72 730.67 T
(0) 72 715.67 T
1 12 Q
-0.1 (The c command in the last line, allows execution) 54 700 P
(to continue after each breakpoint.) 54 686 T
3 11 Q
(expect2.2> c) 72 667.67 T
(proc p4 defined) 72 652.67 T
(proc p3 defined) 72 637.67 T
(proc p2 defined) 72 622.67 T
(proc p1 defined) 72 607.67 T
1 12 Q
-0.08 (The following breakpoint causes the debugger to) 54 592 P
1.11 (break after the return of any procedure that has) 54 578 P
(called p4.) 54 564 T
3 11 Q
(expect2.1> b -glob "p4" then "r") 72 545.67 T
1 12 Q
3.13 (The following command prints out the string) 54 530 P
2.12 (\322entering p4\323 when p4 is invoked.  Execution) 54 516 P
(continues for four more steps after that.) 54 502 T
3 11 Q
(expect2.2> b -re "^p4 " then {) 72 483.67 T
(+>) 72 468.67 T
(puts "entering p4") 108 468.67 T
(+>) 72 453.67 T
(s 4) 108 453.67 T
(+> }) 72 438.67 T
1 12 Q
0.02 (Multiple breakpoints can occur on the same line.) 54 423 P
-0.07 (All corresponding actions are executed.  At most) 54 409 P
1.09 (one debugger command will be executed, how-) 54 395 P
6.25 (ever) 54 381 P
6.25 (.  For example, if breakpoints trigger) 73.98 381 P
0.23 (commands containing both \322s 1\323 and \322s 2\323, only) 54 367 P
0.87 (the second \050or last in general\051 will have any ef-) 54 353 P
(fect.) 54 339 T
0 F
-0.14 (Limitations in Br) 54 317 P
-0.14 (eakpoints Actions and Inter-) 142.15 317 P
(active Commands) 54 303 T
1 F
2.23 (Debugger commands speci\336ed in a breakpoint) 54 284 P
1.22 (action occur only after all the breakpoints have) 54 270 P
1.8 (completed.  For example, the following break-) 54 256 P
0.05 (point appears to print out the old and new values) 54 242 P
(of every variable about to be set.) 54 228 T
3 11 Q
-0.22 (expect2.1> b -re {^set \050[^ ]+\051 }) 72 209.67 P
(then {) 72 196.67 T
(+>) 72 181.67 T
(puts \322old $dbg\0501\051 = [set) 108 181.67 T
($dbg\0501\051]\323) 72 168.67 T
(+>) 72 153.67 T
(n) 108 153.67 T
(+>) 72 138.67 T
(puts \322new $dbg\0501\051 = [set) 108 138.67 T
($dbg\0501\051]\323) 72 125.67 T
(+> }) 72 110.67 T
1 12 Q
1.28 (However) 54 95 P
1.28 (, the debugger does not actual execute) 97.48 95 P
1.02 (the next procedure call in the program until the) 54 81 P
2.83 (breakpoint action completes.  This breakpoint) 54 67 P
1.42 (therefore prints the old value twice, incorrectly) 306 730 P
(claiming that the latter is the new value.) 306 716 T
3 11 Q
(expect4.7> c) 324 697.67 T
(old a = 2) 324 682.67 T
(new a = 2) 324 667.67 T
1 12 Q
-0.05 (In this case, it is possible to get the new value by) 306 652 P
1.97 (just omitting the last puts.  The debugger will) 306 638 P
0.27 (then automatically print the new value as part of) 306 624 P
(echoing the next command to be executed.) 306 610 T
3 11 Q
(expect4.7>) 324 591.67 T
(old a = 2) 324 576.67 T
(2: set a 3) 324 561.67 T
1 12 Q
1.78 (This example illustrates a limitation of the de-) 306 546 P
1.65 (bugger) 306 532 P
1.65 (.  The debugger does not use a separate) 338.65 532 P
1.64 (thread of control, and therefore does not allow) 306 518 P
0.59 (arbitrary automation of its own commands.  For) 306 504 P
1.8 (more discussion on these limitations see \322Cur-) 306 490 P
(rent Limitations and Future W) 306 476 T
(ork\323 on page) 450.95 476 T
(15.) 515.9 476 T
0 F
(General Form of Br) 306 454 T
(eakpoints) 408.04 454 T
1 F
0.02 (Expressions and actions may be combined.  This) 306 435 P
1.95 (follows the syntax of T) 306 421 P
1.95 (cl\325) 424.23 421 P
1.95 (s if-then \050no \322else\323\051.) 436.23 421 P
0.86 (For example, the following command prints the) 306 407 P
(value of $foo whenever it is non-zero.) 306 393 T
3 11 Q
(expect2.1> b if {$foo} then {) 324 374.67 T
(puts "foo = $foo") 360 359.67 T
(}) 324 344.67 T
1 12 Q
2.58 (The general form of the breakpoint command) 306 329 P
0.69 (permits up to one location \050speci\336ed by pattern,) 306 315 P
2.36 (or line number and \336lename\051, one expression,) 306 301 P
0.63 (and one action.  They must appear in this order) 306 287 P
0.63 (,) 537 287 P
(but are all optional.) 306 273 T
3.31 (If a location is provided or the if-expression) 306 254 P
0.53 (doesn\325) 306 240 P
0.53 (t look like a line number and/or \336lename,) 337.76 240 P
1.13 (the \322if\323 token may be omitted.  If an if-expres-) 306 226 P
2.12 (sion has already appeared, the \322then\323 token is) 306 212 P
0.74 (also optional.  For example, the following com-) 306 198 P
(mands have the same ef) 306 184 T
(fect:) 420.36 184 T
3 11 Q
(expect2.1> b if {$foo} then {) 324 165.67 T
(+>) 324 150.67 T
(puts "foo = $foo") 360 150.67 T
(+>}) 324 135.67 T
(0) 324 120.67 T
(expect2.2> b {$foo} {) 324 105.67 T
(+>) 324 90.67 T
(puts "foo = $foo") 360 90.67 T
(+>}) 324 75.67 T
(1) 324 60.67 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(9) 553 27 T
1 12 Q
1.91 (When the \336rst ar) 72 730 P
1.91 (gument resembles both a line) 157.79 730 P
-0.13 (number and expression, it is assumed to be a line) 72 716 P
0.02 (number) 72 702 P
0.02 (.  The following command breaks on line) 107.98 702 P
(17:) 72 688 T
3 11 Q
(expect2.3> b 17) 90 669.67 T
(2) 90 654.67 T
0 12 Q
(Listing Br) 72 633 T
(eakpoints) 124.1 633 T
1 F
2.43 (If no ar) 72 614 P
2.43 (guments are supplied, the b command) 111.95 614 P
0.4 (lists all breakpoints.  The following example as-) 72 600 P
0.81 (sumes the previous three breakpoints have been) 72 586 P
2.48 (set and creates two more.  Notice that break-) 72 572 P
(points zero and one are identical.) 72 558 T
3 11 Q
(expect2.4> b -re "^p4") 90 539.67 T
(3) 90 524.67 T
(expect2.5> b zz.exp:17 if {$foo}) 90 509.67 T
(4) 90 494.67 T
(expect2.6> b) 90 479.67 T
-0.38 (breakpoint 4: zz.exp:23 if {$foo}) 90 464.67 P
(breakpoint 3: -re "^p4" if {^p4}) 90 449.67 T
(breakpoint 2: b 17) 90 434.67 T
(breakpoint 1: if {$foo} then {) 90 419.67 T
(puts "foo = $foo") 126 404.67 T
(}) 90 389.67 T
(breakpoint 0: if {$foo} then {) 90 374.67 T
(puts "foo = $foo") 126 359.67 T
(}) 90 344.67 T
1 12 Q
0.73 (Each breakpoint is identi\336ed by an integer) 72 329 P
0.73 (.  For) 278.89 329 P
1.55 (example, breakpoint four occurs if $foo is true) 72 315 P
(just before line 23 is executed in \336le zz.exp.) 72 301 T
2.25 (When multiple breakpoints occur on the same) 72 282 P
1.98 (line, the actions are executed in the order that) 72 268 P
(they are listed by the b command.) 72 254 T
0 F
(Deleting Br) 72 232 T
(eakpoints) 130.74 232 T
1 F
1.02 (A breakpoint can be deleted with the command) 72 213 P
1.5 (\322b -#\323 where # is the breakpoint number) 72 199 P
1.5 (.  The) 275.36 199 P
(following command deletes breakpoint 4.) 72 185 T
3 11 Q
(expect2.7> b -4) 90 166.67 T
1 12 Q
1.12 (All breakpoints may be deleted by omitting the) 72 151 P
(number) 72 137 T
(.  For example:) 107.98 137 T
3 11 Q
(expect2.8> b -) 90 118.67 T
0 14 Q
(The \322h\323 command \320 \322Help\323) 324 728.67 T
1 12 Q
1.02 (The) 324 709 P
2 F
1.02 (h) 346.67 709 P
1 F
1.02 ( command prints a short listing of debug-) 352.66 709 P
4.61 (ger commands, ar) 324 695 P
4.61 (guments and other helpful) 418.6 695 P
(information.) 324 681 T
0 14 Q
(Changing Pr) 324 655.67 T
(ogram Behavior) 400.33 655.67 T
1 12 Q
0.4 (When the debugger is active, the variable dbg is) 324 636 P
0.31 (de\336ned in the global scope.  When the debugger) 324 622 P
0.16 (is not active, dbg is not de\336ned.  This allows T) 324 608 P
0.16 (cl) 549.34 608 P
1.4 (applications to behave dif) 324 594 P
1.4 (ferently when the de-) 451.56 594 P
(bugger is running.) 324 580 T
0 14 Q
(Changing Debugger Behavior) 324 554.67 T
1 12 Q
0.21 (By default, long commands are truncated so that) 324 535 P
0.32 (the debugger can \336t them on a line.  This occurs) 324 521 P
1.1 (when the debugger prints out a command to be) 324 507 P
0.28 (executed and also in the listing from the w com-) 324 493 P
(mand.) 324 479 T
2.35 (The w command has a -width \337ag which can) 324 460 P
-0.13 (change the current printing width.  It takes a new) 324 446 P
1.5 (width as an ar) 324 432 P
1.5 (gument.  For example to display) 395.24 432 P
(long commands \050such as procedure de\336nitions\051:) 324 418 T
3 11 Q
(expect2.2> w -w 300) 342 399.67 T
1 12 Q
2.75 (Because of the parameter substitutions, the w) 324 384 P
3.58 (command may try to display extremely long) 324 370 P
(lines.  Imagine the following script:) 324 356 T
3 11 Q
(puts [exec cat /etc/passwd]) 342 337.67 T
1 12 Q
1.64 (When the debugger is run, w command output) 324 322 P
2.92 (will be truncated unless the printing width is) 324 308 P
(quite lar) 324 294 T
(ge.) 363.42 294 T
3 11 Q
(2: exec cat /etc/passwd) 342 275.67 T
(expect3.1> s) 342 260.67 T
(1: puts [exec cat /etc/passwd]) 342 245.67 T
(expect2.2> w) 342 230.67 T
(*0: expect -D 1 debug-test3.exp) 342 215.67 T
-0.51 ( 1: puts {root:Xu.VjBHD/xM7E:0:1:) 342 200.67 P
(Operator:/:/bin/csh) 342 185.67 T
(nobody:*:65534:65534::/...) 342 170.67 T
(expect2.3> w -w 200) 342 155.67 T
(expect2.4> w) 342 140.67 T
(*0: expect -D 1 debug-test3.exp) 342 125.67 T
-0.51 ( 1: puts {root:Xu.VjBHD/xM7E:0:1:) 342 110.67 P
(Operator:/:/bin/csh) 342 95.67 T
(nobody:*:65534:65534::/:) 342 80.67 T
(daemon:*:1:1::/:) 342 65.67 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(10) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
3 11 Q
(sys:*:2:2::/:/bin/csh) 72 730.67 T
(bin:*:3:3::/bin:) 72 715.67 T
(uucp:*:4:8::/var/spool/uucppubli) 72 700.67 T
(c:) 72 685.67 T
(news:*:6:6::/var/spool/news:/) 72 670.67 T
(bin...) 72 657.67 T
(expect2.5>) 72 642.67 T
1 12 Q
-0.17 (When output is truncated, an ellipsis is appended) 54 627 P
-0.02 (to the end.  The default width is 75 which allows) 54 613 P
1.39 (some space at the beginning of the line for the) 54 599 P
(procedure call depth information.) 54 585 T
2.5 (By default, no other output formatting is per-) 54 566 P
2.5 (formed.  But even short statements can cause) 54 552 P
1.74 (lots of scrolling.  The following declaration of) 54 538 P
0.06 (p4 is less then 75 characters but still takes sever-) 54 524 P
(al lines.) 54 510 T
3 11 Q
(% expect -D 1 debug-test.exp) 72 491.67 T
(set b 1) 72 476.67 T
(expect2.1> s) 72 461.67 T
(1: proc p4 {} {) 72 446.67 T
(return [) 108 431.67 T
(expr 5+[expr 1+$x]]) 144 416.67 T
(}) 72 401.67 T
1 12 Q
0.21 (The -compress \337ag with ar) 54 386 P
0.21 (gument 1 tells the de-) 183.21 386 P
6.63 (bugger to display control characters using) 54 372 P
(escape sequences.  For example:) 54 358 T
3 11 Q
(expect2.2> w -c 1) 72 339.67 T
(expect2.3> w) 72 324.67 T
(*0: expect -D 1 debug-test.exp) 72 309.67 T
-3.13 ( 1: proc p4 {x} {\134n\134treturn [\134n\134t) 72 294.67 P
(expr 5+[expr 1+$x]]\134n}) 72 281.67 T
1 12 Q
1.25 (The compressed output is useful for preventing) 54 266 P
1.64 (excessive scrolling, and also for displaying the) 54 252 P
0.02 (precise characters that should be used in order to) 54 238 P
(match patterns in breakpoints.) 54 224 T
0.81 (T) 54 205 P
0.81 (o revert to uncompressed output, use the same) 60.49 205 P
(\337ag with value 0.) 54 191 T
3 11 Q
(expect2.4> w -c 0) 72 172.67 T
1 12 Q
0.04 (W) 54 157 P
0.04 (ith no value speci\336ed, \337ags to the w command) 64.84 157 P
(print out the current value.) 54 143 T
3 11 Q
(expect2.5> w -c) 72 124.67 T
(0) 72 109.67 T
(expect2.6> w -w) 72 94.67 T
(75) 72 79.67 T
0 18 Q
(V) 306 726 T
(iew of the Application) 318.32 726 T
(Pr) 306 706 T
(ogrammer) 324.66 706 T
1 12 Q
-0.21 (This section describes how to incorporate the de-) 306 685 P
(bugger into a T) 306 671 T
(cl application.) 378.78 671 T
3.56 (1\051 Include the \336le) 306 652 P
2 F
3.56 (Dbg.h) 408.18 652 P
1 F
3.56 ( in any source that) 437.82 652 P
(makes calls to the debugger) 306 638 T
(.) 438.58 638 T
3 11 Q
(#include "Dbg.h") 324 619.67 T
1 12 Q
2.77 (2\051 T) 306 604 P
2.77 (o start the debugger) 328.24 604 P
2.77 (, call) 430.99 604 P
2 F
2.77 (Dbg_On) 462.84 604 P
1 F
2.77 (.  This) 504.15 604 P
1.39 (does not have to be called at program start but) 306 590 P
(can be called at any time.) 306 576 T
1 10 Q
(1) 427.9 580.8 T
3 11 Q
(void) 324 557.67 T
(Dbg_On\050) 324 542.67 T
(Tcl_Interp *interp,) 360 527.67 T
(int immediate\051;) 360 514.67 T
1 12 Q
0.69 (If the \322immediate\323 parameter is 1, the debugger) 306 499 P
3.65 (begins interacting with the user immediately) 306 485 P
3.65 (.) 537 485 P
0.6 (Otherwise, the debugger waits until a new com-) 306 471 P
4.33 (mand is about to be executed by T) 306 457 P
4.33 (cl_Eval.) 500.36 457 P
0.14 (Forcing the debugger to begin interacting imme-) 306 443 P
2.02 (diately is useful in slow systems calls such as) 306 429 P
(\322read\323.) 306 415 T
(T) 306 396 T
(ypical places to call Dbg_On are:) 312.49 396 T
0 F
(SIGINT Handler) 306 374 T
1 F
0.73 (By invoking Dbg_On on receipt of a signal, the) 306 355 P
-0.06 (user can gain control at any time during program) 306 341 P
(execution.) 306 327 T
2.5 (As an example, Expect enables this using the) 306 308 P
0.53 (command-line ar) 306 294 P
0.53 (gument -D 0.  Once the debug-) 387.92 294 P
3.72 (ger is running, SIGINT can still be used to) 306 280 P
(regain control.) 306 266 T
0 F
(Pr) 306 244 T
(ogram Start-up) 318.44 244 T
1 F
1.07 (By invoking Dbg_On at program start, the user) 306 225 P
(gains control over the application immediately) 306 211 T
(.) 528.74 211 T
-0.16 (As an example, Expect uses the ar) 306 192 P
-0.16 (gument \322-D 1\323) 469.04 192 P
(to start this way) 306 178 T
(.) 381.51 178 T
0 F
(By Application Command) 306 156 T
1 F
1.4 (Dbg_On may be called by an application com-) 306 137 P
2.98 (mand.  A script may then start the debugger) 306 123 P
306 90 540 105 C
315 103 459 103 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.12 (1. Dbg_On should not be called directly from a) 324 83.33 P
0.64 (signal handler but indirectly through T) 324 71.33 P
0.64 (cl\325) 481.11 71.33 P
0.64 (s signal) 491.1 71.33 P
(handling mechanism.) 324 59.33 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(11) 548.01 27 T
1 12 Q
2.69 (interaction when the command appears in the) 72 730 P
(script.) 72 716 T
0.74 (The debugger does not create a command name) 72 697 P
0.43 (association because it has to exist in order to in-) 72 683 P
0.13 (voke the debugger) 72 669 P
0.13 (.  Also, because this is the one) 160.19 669 P
2.07 (command name that will always be present in) 72 655 P
1.48 (the application, choosing it is best done by the) 72 641 P
0.41 (application writer) 72 627 P
0.41 (.  An example de\336nition might) 156.69 627 P
0.91 (be the name \322debugger\323, using the ar) 72 613 P
0.91 (guments 0) 255.45 613 P
0.94 (and 1 similarly to the -D \337ag, described earlier) 72 599 P
0.94 (.) 303 599 P
-0.02 (But all sorts of other behavior could conceivably) 72 585 P
(be envisioned.) 72 571 T
2 F
1.41 (Dbg_Off) 72 552 P
1 F
1.41 ( disables any activity by the debugger) 113.98 552 P
1.41 (.) 303 552 P
0.47 (All debugger command names and variables are) 72 538 P
1.07 (removed from the interpreter) 72 524 P
1.07 (.  Dbg_On may be) 213.44 524 P
3.44 (called repeatedly without error before calling) 72 510 P
(Dbg_Of) 72 496 T
(f.) 111.09 496 T
3 11 Q
(void) 90 477.67 T
(Dbg_Off\050) 90 462.67 T
(Tcl_Interp *interp\051;) 126 447.67 T
2 12 Q
0.07 (Dbg_Active) 72 432 P
1 F
0.07 ( returns 1 or 0 depending on whether) 128.62 432 P
(the debugger is on or of) 72 418 T
(f.) 186.03 418 T
3 11 Q
(int) 90 399.67 T
(Dbg_Active\050) 90 384.67 T
(Tcl_Interp *interp\051;) 126 369.67 T
1 12 Q
0.81 (Several functions are available to customize the) 72 354 P
(debugger) 72 340 T
(.  They are described below) 115.97 340 T
(.) 247.74 340 T
2 F
5.07 (Dbg_Ar) 72 321 P
5.07 (gcAr) 110.2 321 P
5.07 (gv) 133.07 321 P
1 F
5.07 ( informs the debugger of the) 144.39 321 P
0.31 (command line used to invoke the application.  It) 72 307 P
-0.18 (is used to display the \336rst line of the stack.  If the) 72 293 P
2.59 (\322copy\323 parameter is 1, the ar) 72 279 P
2.59 (gv array will be) 222.62 279 P
0.66 (copied to a new area of memory) 72 265 P
0.66 (.  This is useful) 229.73 265 P
2.75 (with applications \050e.g., Tk\051 which modify the) 72 251 P
(ar) 72 237 T
(gv array) 81.1 237 T
(.) 119.95 237 T
3 11 Q
(char **) 90 218.67 T
(Dbg_ArgcArgv\050) 90 203.67 T
(int argc,) 126 188.67 T
(char *argv[],) 126 173.67 T
(int copy\051;) 126 158.67 T
1 12 Q
0.43 (A pointer to the new memory is returned so that) 72 143 P
-0.05 (it can be freed when the debugger is no longer in) 72 129 P
0.22 (use.  The individual elements are not reallocated) 72 115 P
2.71 (and should not be freed.  0 is returned if no) 72 101 P
(memory is allocated.) 72 87 T
2 F
2.8 (Dbg_Interactor) 324 730 P
1 F
2.8 ( names a function that will be) 399.28 730 P
(called by the debugger to interact with the user) 324 716 T
(.) 548.51 716 T
3 11 Q
(Dbg_InterProc *) 342 697.67 T
(Dbg_Interactor\050) 342 682.67 T
(Tcl_Interp interp,) 378 667.67 T
(Dbg_InterProc *) 378 652.67 T
(interactor\051) 476.88 652.67 T
1 12 Q
0.92 (Dbg_Interactor allows the debugger to have the) 324 637 P
1.02 (same look and feel as that of the application it-) 324 623 P
-0.15 (self.  For instance, Expect uses its own interactor) 324 609 P
(by calling:) 324 595 T
3 11 Q
(Dbg_Interactor\050) 342 576.67 T
(interp,) 378 561.67 T
(exp_interact\051;) 378 546.67 T
2 12 Q
(Dbg_InterPr) 324 531 T
(oc) 385.51 531 T
1 F
( is de\336ned as:) 396.84 531 T
3 11 Q
(typedef int \050Dbg_InterProc\051) 342 512.67 T
(\050Tcl_Interp *interp\051;) 378 497.67 T
1 12 Q
0.29 (If an application has no interactor) 324 482 P
0.29 (, a very simple) 486.51 482 P
0.95 (interactor \050similar to that in tclT) 324 468 P
0.95 (est\051 is provided) 482.15 468 P
2.32 (automatically) 324 454 P
2.32 (.  The default interactor reads its) 388.51 454 P
(input from the standard input.) 324 440 T
3.03 (Interactors should prompt for new commands) 324 421 P
7.19 (and evaluate them.  If commands return) 324 407 P
-0.24 (TCL_OK or TCL_ERROR, the interactor should) 324 393 P
-0.14 (simply reprompt for more commands.  \050Frequent) 324 379 P
2.36 (user errors should be expected during interac-) 324 365 P
1.25 (tion.\051  If commands return TCL_RETURN, the) 324 351 P
-0.03 (interactor should return TCL_OK.  The behavior) 324 337 P
1.36 (for commands which return other return values) 324 323 P
(is unde\336ned.) 324 309 T
0.1 (Dbg_Interactor returns the previous de\336nition of) 324 290 P
(its interactor ar) 324 276 T
(gument.) 396.39 276 T
2 F
0.77 (Dbg_Ignor) 324 257 P
0.77 (eFuncs) 376.86 257 P
1 F
0.77 ( names a function that will be) 411.49 257 P
0.64 (called by the debugger to decide what functions) 324 243 P
(should be ignored.) 324 229 T
3 11 Q
(Dbg_IgnoreFuncsProc) 342 210.67 T
(Dbg_IgnoreFuncs\050) 342 195.67 T
(Tcl_Interp *interp,) 378 180.67 T
(Dbg_IgnoreFuncsProc) 378 165.67 T
(*ignoreproc\051;) 414 150.67 T
2 12 Q
(Dbg_Ignor) 324 135 T
(eFuncsPr) 376.86 135 T
(oc) 423.04 135 T
1 F
( is de\336ned as:) 434.36 135 T
3 11 Q
(typedef int\050Dbg_IgnoreFuncsProc\051) 342 116.67 T
(\050Tcl_Interp *interp,) 378 101.67 T
( char *funcname\051;) 378 86.67 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(12) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
2.17 (If funcname should be ignored, \050*ignoreproc\051\050) 54 730 P
1.64 (funcname\051 should return 1, otherwise it should) 54 716 P
(return 0.) 54 702 T
0.23 (For instance, Expect evaluates the T) 54 683 P
0.23 (cl procedure) 228.16 683 P
1.78 (\322prompt1\323 each time it prepares to prompt the) 54 669 P
0.06 (user and \322prompt2\323 if the user has entered a par-) 54 655 P
3.53 (tial command.  Expect\325) 54 641 P
3.53 (s procedure to ignore) 175.84 641 P
(functions is de\336ned as:) 54 627 T
3 11 Q
(static int) 72 608.67 T
(ignore_procs\050char *s\051) 72 593.67 T
({) 72 578.67 T
(return\050) 108 563.67 T
(\050s[0] == 'p'\051 &&) 144 548.67 T
(\050s[1] == 'r'\051 &&) 144 533.67 T
(\050s[2] == 'o'\051 &&) 144 518.67 T
(\050s[3] == 'm'\051 &&) 144 503.67 T
(\050s[4] == 'p'\051 &&) 144 488.67 T
(\050s[5] == 't'\051 &&) 144 473.67 T
(\050\050s[6] == '1'\051 ||) 144 458.67 T
( \050s[6] == '2'\051\051 &&) 144 443.67 T
(           \050s[7] == '\1340'\051\051;) 72 428.67 T
(}) 72 413.67 T
1 12 Q
2.3 (While avoiding strcmp may be excessive, this) 54 398 P
0.54 (function should nonetheless be written ef) 54 384 P
0.54 (\336cient-) 254.02 384 P
(ly since it is called very frequently) 54 370 T
(.) 219.1 370 T
0 18 Q
(Implementation) 54 338 T
1 12 Q
-0.12 (This section describes some of the more interest-) 54 317 P
0.72 (ing parts of the debugger) 54 303 P
0.72 (.  It is not necessary to) 176.11 303 P
-0.06 (read this in order to use the debugger ef) 54 289 P
-0.06 (fectively) 243.82 289 P
-0.06 (.) 285 289 P
0.47 (The debugger is approximately 1) 54 270 P
0.47 (100 lines) 213.97 270 P
1 10 Q
0.39 (1) 258.08 274.8 P
1 12 Q
0.47 ( of C) 263.08 270 P
-0.03 (\050no T) 54 256 P
-0.03 (cl\051 which compiles to 13K on a Sun 4.  The) 79.44 256 P
-0.02 (debugger is portable to any platform that already) 54 242 P
1.75 (has T) 54 228 P
1.75 (cl.  The debugger requires no changes to) 81.23 228 P
-0.29 (the T) 54 214 P
-0.29 (cl core although it does require access to the) 77.85 214 P
(T) 54 200 T
(cl internals.) 60.49 200 T
0.05 (The debugger uses T) 54 181 P
0.05 (cl\325) 153.55 181 P
0.05 (s trace facility to get con-) 165.54 181 P
2.34 (trol before execution of every procedure.  T) 54 167 P
2.34 (cl) 279.34 167 P
2.69 (temporarily passes control to the function de-) 54 153 P
1.1 (bugger_trap.  This function determines whether) 54 139 P
2.8 (actions should occur) 54 125 P
2.8 (, whether user interaction) 157.71 125 P
-0.17 (should occur) 54 111 P
-0.17 (, and whether execution should con-) 114.97 111 P
(tinue.) 54 97 T
54 78 288 93 C
63 91 207 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.39 (1. The code has a dearth of comments, hopefully) 72 71.33 P
(somewhat ameliorated by this paper) 72 59.33 T
(.) 215.79 59.33 T
1 12 Q
0.07 (The debugger_trap function can be thought of as) 306 730 P
0.14 (three distinct parts that nonetheless work togeth-) 306 716 P
(er very closely:) 306 702 T
2 F
(pr) 315 683 T
(elude) 325.22 683 T
1 F
(:) 351.2 683 T
0.2 (Determine if the debugger should) 378 683 P
0.27 (interact with the user) 378 669 P
0.27 (, or return to) 479.24 669 P
0.87 (continue execution of the current) 378 655 P
(function.) 378 641 T
2 F
(interactor) 315 622 T
1 F
(:) 362.97 622 T
1.05 (Let the user interact with the T) 378 622 P
1.05 (cl) 531.34 622 P
(environment.) 378 608 T
2 F
(postlude) 315 589 T
1 F
(:) 355.65 589 T
0.26 (Manipulate the environment, per-) 378 589 P
6.69 (haps letting the user interact) 378 575 P
(again, or returning.) 378 561 T
-0.01 (In more detail, the) 306 542 P
2 F
-0.01 (pr) 396.91 542 P
-0.01 (elude) 407.12 542 P
1 F
-0.01 (\325) 433.1 542 P
-0.01 (s primary job is to re-) 436.44 542 P
0.86 (turn control if possible, continuing execution of) 306 528 P
1.27 (the current command.  It attempts to do this as) 306 514 P
3.34 (quickly and ef) 306 500 P
3.34 (\336ciently as possible, since this) 381.07 500 P
0.87 (code is called upon every trap whether or not it) 306 486 P
(inevitably leads to user) 306 472 T
(-interaction.) 416.69 472 T
-0.2 (For example, there is no reason to trap on debug-) 306 453 P
2.48 (ger commands.  They have to be executed in) 306 439 P
0.07 (order for the debugger itself to run.  But T) 306 425 P
0.07 (cl pro-) 508.29 425 P
5.86 (vides no selective trap mechanism, so the) 306 411 P
0.13 (prelude simply has to return in such cases.) 306 397 P
1 10 Q
0.11 (2) 510.1 401.8 P
1 12 Q
0.13 (  The) 515.09 397 P
0.6 (prelude also returns if the command about to be) 306 383 P
2.09 (executed is interactive \050i.e., executed from the) 306 369 P
1.41 (debugger interaction\051 or a function that the ap-) 306 355 P
(plication has requested be ignored.) 306 341 T
3.69 (The prelude next evaluates all of the break-) 306 322 P
0.48 (points.  If all breakpoints are unsuccessful or all) 306 308 P
0.7 (successful breakpoints have actions, the prelude) 306 294 P
(returns.) 306 280 T
3.12 (The prelude then checks if the previous user) 306 261 P
-0.29 (command was n, s, c, or r) 306 247 P
-0.29 (.  If so, the environment) 426.52 247 P
2.02 (is examined to see if the requested number of) 306 233 P
3.31 (steps occurred, the requested stack level was) 306 219 P
0.17 (reached, etc.  If the request was not satis\336ed, the) 306 205 P
(prelude returns.) 306 191 T
306 126 540 141 C
315 139 459 139 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
-0.01 (2. This is not a criticism of T) 324 119.33 P
-0.01 (cl.  There is no point) 439.3 119.33 P
0.11 (in T) 324 107.33 P
0.11 (cl providing such functionality since it would) 339.79 107.33 P
0.18 (require a callback to a user routine anyway) 324 95.33 P
0.18 (.  This) 496.38 95.33 P
0.88 (two part decision and execution process is more) 324 83.33 P
3.05 (ef) 324 71.33 P
3.05 (\336ciently performed by combining them into) 331.59 71.33 P
(one function, as in debugger_trap here.) 324 59.33 T
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(13) 548.01 27 T
1 12 Q
0.98 (If the prelude has not returned at this point, the) 72 730 P
1.12 (next phase of the debugger_trap function is en-) 72 716 P
(tered: the interactor) 72 702 T
(.) 165.26 702 T
0.9 (The) 72 683 P
2 F
0.9 (interactor) 94.55 683 P
1 F
0.9 ( executes debugger commands as) 142.52 683 P
0.71 (well as all other T) 72 669 P
0.71 (cl and application commands.) 160.62 669 P
5.76 (V) 72 655 P
5.76 (ery little special processing is performed.) 79.33 655 P
0.29 (Commands are passed directly to) 72 641 P
3 11 Q
0.65 (Tcl_Eval) 235.69 641 P
1 12 Q
0.29 (.  If) 288.43 641 P
0.16 (the command returns) 72 627 P
3 11 Q
0.35 (TCL_ERROR) 176.74 627 P
1 12 Q
0.16 (, the interactor) 236.07 627 P
3.41 (ignores it, and continues interacting with the) 72 613 P
-0.28 (user) 72 599 P
-0.28 (.  It is expected that users will make mistakes) 91.32 599 P
(while interactively typing commands.) 72 585 T
0.17 (The debugger commands themselves are simple.) 72 566 P
2.25 (They record their ar) 72 552 P
2.25 (guments and return.  This) 174.1 552 P
-0.28 (may seem surprising, but the fact is that the com-) 72 538 P
2.31 (mands all execute in the wrong context.  The) 72 524 P
1.97 (current context is the debugger command, and) 72 510 P
1.02 (depending on how the command was originally) 72 496 P
2.47 (invoked by the user) 72 482 P
2.47 (, can be arbitrarily deeply) 173.21 482 P
0.26 (nested beyond the next command in the applica-) 72 468 P
0.69 (tion to be executed.  Getting back to the correct) 72 454 P
0.74 (context from a debugger command is very indi-) 72 440 P
(rect and complicated.) 72 426 T
0.22 (In order for the debugger to get back to the right) 72 407 P
0.98 (context, the interactor exits after each debugger) 72 393 P
0.89 (command.  This is forced by having the debug-) 72 379 P
0.36 (ger commands end by returning TCL_RETURN) 72 365 P
-0.07 (rather than TCL_OK.  The interactor then passes) 72 351 P
(control to the postlude.) 72 337 T
-0.21 (The) 72 318 P
2 F
-0.21 (postlude) 93.43 318 P
1 F
-0.21 ( processes any requests made by the) 134.08 318 P
2.07 (user while in the interactor) 72 304 P
2.07 (.  After processing,) 208.19 304 P
3.31 (the interactor is recalled for more user com-) 72 290 P
(mands, or) 72 276 T
3 11 Q
(debugger_trap) 122.3 276 T
1 12 Q
( returns entirely) 207.99 276 T
(.) 283.16 276 T
0.7 (For example, the) 72 257 P
3 11 Q
1.54 (u) 158.04 257 P
1 12 Q
0.7 ( and) 164.63 257 P
3 11 Q
1.54 (d) 189.35 257 P
1 12 Q
0.7 ( commands set the de-) 195.94 257 P
2.52 (sired scope and then pass control back to the) 72 243 P
0.6 (interactor) 72 229 P
0.6 (.  The execution scope is later restored) 117.3 229 P
(before) 72 215 T
3 11 Q
(debugger_trap) 105.63 215 T
1 12 Q
( returns.) 191.32 215 T
0 14 Q
7.71 (Accessing T) 72 189.67 P
7.71 (cl Internals and Other) 149.55 189.67 P
(Pr) 72 173.67 T
(oblems) 86.51 173.67 T
1 12 Q
1.34 (The debugger uses T) 72 154 P
1.34 (cl\325) 175.43 154 P
1.34 (s documented interfaces) 187.42 154 P
3.29 (whenever possible.  Undocumented interfaces) 72 140 P
1.05 (were used or built in a few cases.  This section) 72 126 P
0.9 (describes these and other problems encountered) 72 112 P
(while writing the debugger) 72 98 T
(.) 200.92 98 T
0 F
(Scopes) 324 730 T
1 F
2.55 (Implementation of the u and d commands re-) 324 711 P
0.6 (quired the ability to arbitrarily walk up or down) 324 697 P
1.3 (the procedure call stack.  Initially implemented) 324 683 P
(with upvar) 324 669 T
(, this ultimately proved too unwieldy) 375.15 669 T
(.) 551.61 669 T
0.48 (T) 324 650 P
0.48 (cl provides support for searching up the proce-) 330.49 650 P
4.58 (dure call stack through an internal function) 324 636 P
1.38 (called T) 324 622 P
1.38 (clGetFrame.  A new function was con-) 363.51 622 P
3.26 (structed to search in both directions.  Called) 324 608 P
0.51 (T) 324 594 P
0.51 (clGetFrame2, it takes additional ar) 330.49 594 P
0.51 (guments de-) 498.53 594 P
0.98 (scribing where the true stack boundaries are, as) 324 580 P
(well as where the current scope appears to be.) 324 566 T
1.57 (Several debugger commands take advantage of) 324 547 P
0.91 (the ability to directly access the scope.  For ex-) 324 533 P
0.52 (ample, the r command continues execution until) 324 519 P
3.36 (the parent scope is encountered.  This could) 324 505 P
2.64 (probably be implemented with a call to \322info) 324 491 P
0.73 (level\323, but the temptation to just compare a sin-) 324 477 P
(gle point was too great.) 324 463 T
0.67 (In general, calls to T) 324 444 P
0.67 (cl_Eval are shunned, partly) 424.76 444 P
1.34 (for ef) 324 430 P
1.34 (\336ciency but also because they modify the) 351.43 430 P
-0.18 (stack.  The only calls by the debugger to T) 324 416 P
-0.18 (cl_Ev-) 526.03 416 P
(al occur when evaluating breakpoints.) 324 402 T
0 F
(Line Numbers) 324 380 T
1 F
1.33 (As of version 6.7, T) 324 361 P
1.33 (cl maintains no association) 424.42 361 P
2.03 (between commands and \336le names and/or line) 324 347 P
1.36 (numbers.  In retrospect, this is clearly an over-) 324 333 P
(sight.  T) 324 319 T
(wo possibilities seem likely:) 362.81 319 T
-0.28 (Perhaps T) 324 300 P
-0.28 (cl originally was never imagined as be-) 371.17 300 P
1.93 (ing used in applications to such an extent that) 324 286 P
0.97 (line numbers would be necessary to debugging.) 324 272 P
1.19 (Or perhaps, implementing line and \336le associa-) 324 258 P
2.66 (tions is too painful given T) 324 244 P
2.66 (cl\325) 466.06 244 P
2.66 (s philosophy \322a) 478.06 244 P
-0.02 (command is a string\323.  Applications may have to) 324 230 P
0.32 (provide signi\336cant ef) 324 216 P
0.32 (fort to the T) 426.36 216 P
0.32 (cl core in order) 484.11 216 P
(for T) 324 202 T
(cl to support this.) 347.47 202 T
-0.05 (While the current implementation of T) 324 183 P
-0.05 (cl current-) 508.44 183 P
4.86 (ly lacks line number support, the debugger) 324 169 P
0.02 (provides all the support for it \050see \322Current Lim-) 324 155 P
(itations and Future W) 324 141 T
(ork\323 on page) 427.31 141 T
(15\051.) 492.26 141 T
0 F
(Commands and Arguments) 324 119 T
1 F
1.98 (Displaying the procedure call stack \050via the w) 324 100 P
(command\051 is tricky in two respects.) 324 86 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(14) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
1.72 (T) 54 730 P
1.72 (cl does not explicitly keep the original repre-) 60.49 730 P
-0.23 (sentation of a command while the command is in) 54 716 P
0.46 (execution.  There is no reason for it to do so.  If) 54 702 P
1.83 (the command is in a loop, for instance, it will) 54 688 P
-0 (simply be derived again.  W) 54 674 P
-0 (ithout a great deal of) 188.75 674 P
2.47 (work, it is therefore impossible to print out a) 54 660 P
0.7 (stack of procedure calls this way) 54 646 P
0.7 (.  Thus, Expect) 213.61 646 P
0.96 (prints out the values of each ar) 54 632 P
0.96 (gument which is) 206.78 632 P
(all T) 54 618 T
(cl has.) 75.48 618 T
0.79 (In contrast, Expect prints out the original repre-) 54 599 P
5.56 (sentation whenever the debugger stops and) 54 585 P
-0.03 (begins the user interaction.  Both representations) 54 571 P
-0.06 (are available for the next command to be execut-) 54 557 P
0.78 (ed, but the original representation is used partly) 54 543 P
0.28 (because the user can always see the other by en-) 54 529 P
1.93 (tering the w command, and partly because the) 54 515 P
1.7 (breakpoint pattern matching makes more sense) 54 501 P
(using the original source code.) 54 487 T
0.24 (Another problem is that T) 54 468 P
0.24 (cl strips of) 178.69 468 P
0.24 (f braces and) 229.59 468 P
0.86 (quotes while converting a command to its ar) 54 454 P
0.86 (gv/) 272.67 454 P
-0.04 (ar) 54 440 P
-0.04 (gc representation.  Again, this is reasonable, as) 63.1 440 P
-0.16 (the braces and quotes are not formally part of the) 54 426 P
2.72 (ar) 54 412 P
2.72 (guments.  The debugger) 63.1 412 P
2.72 (, however) 186.71 412 P
2.72 (, wants to) 236.25 412 P
3.59 (show the user the original code, or perhaps,) 54 398 P
(something that is at least legal.) 54 384 T
0.97 (W) 54 365 P
0.97 (ithout the quotes, simply appending the ar) 64.84 365 P
0.97 (gu-) 272.01 365 P
2.1 (ments together is insuf) 54 351 P
2.1 (\336cient.  For example, a) 169.01 351 P
1.27 (null list will not show up at all.  Unfortunately) 54 337 P
2.36 (the original information \050precisely how it was) 54 323 P
1.14 (quoted, for example\051 simply isn\325) 54 309 P
1.14 (t present. W) 215.24 309 P
1.14 (ith) 275.33 309 P
-0.1 (suf) 54 295 P
-0.1 (\336cient time and ef) 68.44 295 P
-0.1 (fort, it coule be reconstruct-) 154.85 295 P
1.25 (ed.  However) 54 281 P
1.25 (, since the output is destined only) 120.28 281 P
0.84 (for user viewing, the debugger can af) 54 267 P
0.84 (ford to err) 237.69 267 P
-0.28 (in cases that users are unlikely to notice.  The de-) 54 253 P
4.36 (bugger uses heuristics for reconstructing the) 54 239 P
(program output.) 54 225 T
0 18 Q
(Other Debuggers) 54 193 T
1 12 Q
1.03 (This debugger can be compared to Karl Lehen-) 54 172 P
0.3 (bauer) 54 158 P
0.3 (\325) 81.08 158 P
0.3 (s debugger [5] \050from hereon referred to as) 84.42 158 P
-0.27 (\322KD\323\051.   Besides KD and the debugger described) 54 144 P
0.94 (in this paper \050from hereon referred to as \322DD\323\051) 54 130 P
(no other T) 54 116 T
(cl debuggers have been constructed.) 103.12 116 T
1.31 (This comparison will be brief because KD was) 54 97 P
-0.07 (never completed although it is functional.  When) 54 83 P
1.89 (it \336rst appeared, it included the proviso that it) 54 69 P
1.03 (was \322the \336rst cut of an experimental debugger\323) 306 730 P
0.54 (and \322a dim shadow of what is possible\323.  None-) 306 716 P
2.97 (theless, KD is very interesting because of its) 306 702 P
0.61 (dif) 306 688 P
0.61 (ferences from DD.  The signi\336cant dif) 319.11 688 P
0.61 (ferenc-) 506.05 688 P
(es are as follows:) 306 674 T
3.12 (KD uses two modes: one for debugger com-) 306 655 P
0.5 (mands and one for application commands.  This) 306 641 P
-0.16 (avoids clashes between debugger commands and) 306 627 P
0.5 (application commands.  All of the commands in) 306 613 P
2.92 (KD have, nonetheless, one and two character) 306 599 P
(names.) 306 585 T
0.63 (KD rede\336nes the depth bound of T) 306 566 P
0.63 (cl\325) 476.13 566 P
0.63 (s trap han-) 488.12 566 P
1.63 (dler to achieve certain ef) 306 552 P
1.63 (fects such as stepping) 430.85 552 P
0.88 (over procedure calls.  DD blindly steps through) 306 538 P
0.01 (all calls simulating the same ef) 306 524 P
0.01 (fect by repeatedly) 454.06 524 P
0.69 (checking the current frame pointer) 306 510 P
0.69 (.  This is, un-) 473.95 510 P
2.33 (fortunately) 306 496 P
2.33 (, a requirement in order to evaluate) 357.85 496 P
(breakpoints below the depth bound.) 306 482 T
4.76 (KD lacks the sophisticated breakpoint com-) 306 463 P
2.63 (mands DD of) 306 449 P
2.63 (fers, but this is just a matter of) 375.67 449 P
0.35 (work.  On the other hand, achieving DD\325) 306 435 P
0.35 (s scope) 504.67 435 P
1.29 (manipulation functions may well be impossible) 306 421 P
(through T) 306 407 T
(cl user) 352.8 407 T
(-level functions.) 384.2 407 T
-0.15 (Perhaps the most impressive aspect of KD is that) 306 388 P
0.44 (only a tiny fraction is written in C.  The KD de-) 306 374 P
0.59 (bugger commands are written in T) 306 360 P
0.59 (cl.  Users can) 473.63 360 P
0.64 (add new debugger commands or modify the ex-) 306 346 P
1.97 (isting commands which are simply stored in a) 306 332 P
2.64 (T) 306 318 P
2.64 (cl library) 312.49 318 P
2.64 (.  Because of this approach, KD is) 357.98 318 P
0.32 (much slower than a pure C approach.  For every) 306 304 P
0.78 (user T) 306 290 P
0.78 (cl command, KD executes several debug-) 336.25 290 P
(ger T) 306 276 T
(cl commands.) 330.8 276 T
2.71 (But speed by itself is not suf) 306 257 P
2.71 (\336cient to justify) 458.62 257 P
0.58 (writing so much of the debugger in C.  The real) 306 243 P
1.02 (penalty is in the complexity of manipulating an) 306 229 P
0.2 (environment at the same time it is being used by) 306 215 P
-0.09 (the commands manipulating it.  Nonetheless, be-) 306 201 P
3.69 (ing able to write or customize the debugger) 306 187 P
-0 (commands and functionality with T) 306 173 P
-0 (cl commands) 476.38 173 P
(is very interesting and worth pursuing further) 306 159 T
(.) 523.19 159 T
0 18 Q
(Performance) 306 127 T
1 12 Q
0.86 (A thorough study of the performance of the de-) 306 106 P
1.78 (bugger has not been done.  Nonetheless, some) 306 92 P
(observations can be made.) 306 78 T
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(15) 548.01 27 T
0 12 Q
(Memory) 72 730 T
1 F
0.52 (The static size of the debugger has already been) 72 711 P
7.87 (stated \050see \322Implementation\323 on page) 72 697 P
7.87 (10\051.) 287.01 697 P
2.75 (When running, the debugger does not signi\336-) 72 683 P
0.5 (cantly increase the in-memory size of a process.) 72 669 P
1.4 (There are no symbol tables or other debugging) 72 655 P
0.06 (information that has to be loaded.  The debugger) 72 641 P
1.39 (uses nothing beyond what T) 72 627 P
1.39 (cl already provides) 211.96 627 P
(to a process not being debugged.) 72 613 T
0.77 (The debugger allocates memory for breakpoints) 72 594 P
0.74 (and output buf) 72 580 P
0.74 (fers, but this is minimal.  The re-) 143.23 580 P
0.1 (sult is that the debugger adds approximately 1 to) 72 566 P
-0.12 (2% to the size of an application.  This is a far cry) 72 552 P
0.88 (from debuggers for compiled code, such as gdb) 72 538 P
(and dbx, which typically add 100 to 200%.) 72 524 T
0 F
(T) 72 502 T
(ime) 79.78 502 T
1 F
1.51 (The debugger attempts to operate as ef) 72 483 P
1.51 (\336ciently) 266.69 483 P
2.24 (as possible in the T) 72 469 P
2.24 (cl framework.  Breakpoint) 172.72 469 P
1.12 (evaluation is clearly the most expensive part of) 72 455 P
1.25 (the debugger) 72 441 P
1.25 (.  For example, expression evalua-) 134.87 441 P
(tion can require numerous calls to T) 72 427 T
(cl_Eval.) 244.37 427 T
1.78 (The time taken to test breakpoints is governed) 72 408 P
4.47 (primarily by the complexity and number of) 72 394 P
0.67 (breakpoint expressions.  T) 72 380 P
0.67 (ests of simple expres-) 199.74 380 P
3.83 (sions \050\322set a 0\323 in a loop\051 suggest that the) 72 366 P
1.35 (debugger can add up to 10% to execution time) 72 352 P
2.57 (even with no breakpoints.  W) 72 338 P
2.57 (ith slower com-) 225.59 338 P
3.25 (mands \050trig functions, system calls, etc.\051, the) 72 324 P
2.25 (execution time overhead drops to an insigni\336-) 72 310 P
1.7 (cant fraction of the total time.  W) 72 296 P
1.7 (ith extensive) 243.33 296 P
-0.24 (breakpoint use, the overhead can rise dramatical-) 72 282 P
(ly) 72 268 T
(.) 80.55 268 T
2.56 (In a debugging session, it is not necessary to) 72 249 P
-0.22 (have the debugger running all the time.  It is pos-) 72 235 P
3.18 (sible to enable the debugger only when it is) 72 221 P
0.24 (needed, and disable it when it is no longer need-) 72 207 P
0.54 (ed or until needed again.  When the debugger is) 72 193 P
1.93 (not enabled, it uses no time whatsoever) 72 179 P
1.93 (.  This) 271.81 179 P
2.55 (technique can help reduce the impact on run-) 72 165 P
(time for some types of debugging.) 72 151 T
0 18 Q
(Curr) 72 119 T
(ent Limitations and) 110.64 119 T
(Futur) 72 99 T
(e W) 116.65 99 T
(ork) 146.14 99 T
1 12 Q
7.03 (Experience will undoubtedly prompt many) 72 78 P
3.08 (changes and enhancements.  This section de-) 72 64 P
10.9 (scribes several things that are already) 324 730 P
(contemplated.) 324 716 T
1.14 (The support for de\336ning breakpoints by pattern) 324 697 P
0.5 (matching was originally motivated by T) 324 683 P
0.5 (cl\325) 517.86 683 P
0.5 (s lack) 529.86 683 P
2.78 (of line numbers and \336lename.  While pattern) 324 669 P
3.21 (matching is not unique to debuggers \050for in-) 324 655 P
1.56 (stance, gdb of) 324 641 P
1.56 (fers a similar capability although) 393.86 641 P
2.5 (only on function names\051, this debugger is the) 324 627 P
0.74 (\336rst to depend on it to such a great extent.  The) 324 613 P
-0.28 (power of pattern matching is suf) 324 599 P
-0.28 (\336cient that many) 477.94 599 P
3.37 (other traditional breakpoint speci\336cations \050for) 324 585 P
(instance, by command name\051 are not necessary) 324 571 T
(.) 549.37 571 T
0.85 (If line number and \336lename support is added to) 324 552 P
-0.29 (T) 324 538 P
-0.29 (cl, the debugger stands ready to use it.  Current-) 330.49 538 P
5.18 (ly) 324 524 P
5.18 (, the b command parses and records the) 332.55 524 P
0.14 (information, followed by a message that it is un-) 324 510 P
0.31 (supported.  Line numbers and \336lenames are also) 324 496 P
2.37 (a requirement for a screen-oriented version of) 324 482 P
(the debugger) 324 468 T
(.) 385.62 468 T
-0.08 (The problem of command name clashes between) 324 449 P
1.66 (applications and T) 324 435 P
1.66 (cl is long-standing.  The de-) 415.1 435 P
2.64 (bugger deals with this problem by avoidance.) 324 421 P
-0.19 (The debugger preemptively uses very short com-) 324 407 P
3.97 (mand names.  \050No action is taken to avoid) 324 393 P
0.97 (overriding application commands.\051  The debug-) 324 379 P
1.02 (ger also uses a very small number of command) 324 365 P
0.26 (names, overloading them within reason.  In con-) 324 351 P
10.95 (trast, many traditional debuggers de\336ne) 324 337 P
2.64 (hundreds of commands.  While this debugger) 324 323 P
0.67 (gains leverage from the existing T) 324 309 P
0.67 (cl commands,) 490.71 309 P
2.52 (this aspect of the design should be studied at) 324 295 P
(more length.) 324 281 T
-0.12 (The debugger interface is designed so that multi-) 324 262 P
1.53 (ple debuggers can be used, one per T) 324 248 P
1.53 (cl_Interp.) 511.7 248 P
1.39 (The current implementation, however) 324 234 P
1.39 (, does not) 508.9 234 P
1.73 (entirely support this.  A handful of static vari-) 324 220 P
10.63 (ables are currently shared between all) 324 206 P
1.27 (debuggers.  For instance, a single linked list of) 324 192 P
2.47 (breakpoints is maintained.  Dif) 324 178 P
2.47 (ferentiating be-) 481.92 178 P
0.31 (tween dif) 324 164 P
0.31 (ferent T) 369.06 164 P
0.31 (cl interpreters could potentially) 406.83 164 P
1.46 (be performed by the debugger) 324 150 P
1.46 (, but it would be) 473.89 150 P
1.46 (much simpler and more ef) 324 136 P
1.46 (\336cient to rely on the) 455.54 136 P
(T) 324 122 T
(cl_Interp structure for storage.) 330.49 122 T
0.47 (An alternative debugger design would move de-) 324 103 P
7.03 (bugger control into a completely separate) 324 89 P
3.35 (interpreter) 324 75 P
3.35 (.  This would enable the ability to) 373.29 75 P
0.91 (write loops or sequences involving multiple de-) 324 61 P
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(16) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
-0.21 (bugger commands such as \322s;n\323 which cannot be) 54 730 P
1.64 (performed in the current implementation.  It is) 54 716 P
-0.03 (possible to achieve this same ability currently by) 54 702 P
0.94 (using an Expect script in a separate process but) 54 688 P
1.49 (the result is not as ef) 54 674 P
1.49 (\336cient as a single process) 160.15 674 P
(debugger) 54 660 T
(.) 97.97 660 T
-0.14 (While the debugger can be used with graphic ap-) 54 641 P
-0.09 (plications \050e.g., Tk applications\051, the debugger is) 54 627 P
0.83 (currently intended only to interact with the user) 54 613 P
0.55 (in a dumb terminal window) 54 599 P
0.55 (.  It should be possi-) 187.99 599 P
2.15 (ble to use Expectk [6] to write a GUI for the) 54 585 P
0.86 (debugger using only Tk and Expect commands.) 54 571 P
2.36 (Building a GUI-based debugger without using) 54 557 P
1.52 (Expectk or one of the Expect libraries may re-) 54 543 P
8.09 (quire signi\336cant rewriting to remove the) 54 529 P
(emphasis on line-oriented interaction.) 54 515 T
0.9 (In the Tk environment, access to the send com-) 54 496 P
3.89 (mand opens new possibilities for debugging.) 54 482 P
4.44 (Several browsers have already been written.) 54 468 P
1.84 (These browsers allow T) 54 454 P
1.84 (cl variables and proce-) 173.59 454 P
4.8 (dures to be examined and changed without) 54 440 P
1.92 (stopping the application.  This style of debug-) 54 426 P
4.8 (ging could be combined with the debugger) 54 412 P
(described in this paper) 54 398 T
(.) 161.59 398 T
0 18 Q
(Conclusion) 54 366 T
1 12 Q
2.17 (While the current implementation of T) 54 345 P
2.17 (cl lacks) 249.53 345 P
4.19 (debugger support in some areas, it provides) 54 331 P
0.29 (enough hooks to address the most dif) 54 317 P
0.29 (\336cult prob-) 234.08 317 P
(lems in building a debugger) 54 303 T
(.) 187.26 303 T
0.71 (This paper has described a debugger for T) 54 284 P
0.71 (cl ap-) 260.31 284 P
0.46 (plications.  The philosophy of its design is to be) 54 270 P
0.85 (as simple as possible by introducing only a few) 54 256 P
2.83 (new commands and concepts while using T) 54 242 P
2.83 (cl) 279.34 242 P
0.69 (and application commands as leverage.  The re-) 54 228 P
5.47 (sult is a reasonably functional and highly-) 54 214 P
1.72 (integrated debugger for T) 54 200 P
1.72 (cl applications that is) 181.22 200 P
(small, fast, and easy to learn and use.) 54 186 T
0.41 (Nonetheless, the possibilities for much more so-) 54 167 P
-0.03 (phisticated debuggers are obvious, and this work) 54 153 P
-0.07 (can provide a starting point for future endeavors.) 54 139 P
0 18 Q
(A) 54 107 T
(vailability) 65.66 107 T
1 12 Q
-0.22 (Since the design and implementation of this soft-) 54 81 P
0.83 (ware was paid for by the U.S. government, it is) 54 67 P
1 (in the public domain.  However) 306 730 P
1 (, the author and) 462.4 730 P
2.31 (NIST would appreciate credit if this software,) 306 716 P
2.69 (documentation, ideas, or portions of them are) 306 702 P
(used.) 306 688 T
1.41 (The debugger may be) 306 664 P
3 11 Q
3.11 (ftp) 418.91 664 P
1 12 Q
1.41 (\325d as) 438.68 664 P
3 11 Q
3.11 (pub/expect/) 467.49 664 P
16.62 (tcl-debug.tar.Z) 306 650 P
1 10 Q
6.3 (1) 404.88 654.8 P
1 12 Q
7.56 ( from) 409.87 650 P
3 11 Q
16.62 (ftp.cme.nist.) 454.31 650 P
1.5 (gov) 306 636 P
1 12 Q
0.68 (.  The software will be mailed to you if you) 325 636 P
2.04 (send the mail message \322) 306 622 P
3 11 Q
4.47 (send pub/expect/) 430.06 622 P
26.03 (tcl-debug.tar.Z) 306 608 P
1 12 Q
11.84 (\323 \050without quotes\051 to) 404.88 608 P
3 11 Q
(library@cme.nist.gov) 306 594 T
1 12 Q
(.) 437.06 594 T
0 18 Q
(Acknowledgments) 306 562 T
1 12 Q
0.41 (Thanks to John Ousterhout, Sarah W) 306 541 P
0.41 (allace, Sus-) 484.3 541 P
0.66 (an Mulroney) 306 527 P
0.66 (, Bob Bagwill, and Rob Savoye for) 367.5 527 P
1.49 (critiquing this work, and providing suggestions) 306 513 P
0.36 (that greatly enhanced the usability of the debug-) 306 499 P
(ger and readability of the paper) 306 485 T
(.) 455.55 485 T
1.17 (The author gratefully acknowledges John Oust-) 306 466 P
0.43 (erhout for creating T) 306 452 P
0.43 (cl.  Not only does T) 406.02 452 P
0.43 (cl solve) 502.6 452 P
0.4 (a signi\336cant problem in software design, but the) 306 438 P
3.59 (code itself as well as the documentation are) 306 424 P
4.04 (comprehensive and written with consummate) 306 410 P
(style.  T) 306 396 T
(cl is truly a pleasure to use.) 344.14 396 T
1.02 (Portions of this work were funded by the NIST) 306 377 P
3.07 (Scienti\336c and T) 306 363 P
3.07 (echnical Research Services as) 387.25 363 P
0.09 (part of the ARP) 306 349 P
0.09 (A Persistent Object Base project,) 380.77 349 P
0.94 (and the Computer) 306 335 P
0.94 (-aided Acquisition and Logis-) 393.59 335 P
0.21 (tic Support \050CALS\051 program of the Of) 306 321 P
0.21 (\336ce of the) 491.61 321 P
(Secretary of Defense.) 306 307 T
0 18 Q
(Disclaimers) 306 275 T
1 12 Q
2.66 (T) 306 254 P
2.66 (rade names and company products are men-) 312.91 254 P
0.94 (tioned in the text in order to adequately specify) 306 240 P
3.46 (experimental procedures and equipment used.) 306 226 P
0.17 (In no case does such identi\336cation imply recom-) 306 212 P
5.83 (mendation or endorsement by the National) 306 198 P
0.91 (Institute of Standards and T) 306 184 P
0.91 (echnology) 442.04 184 P
0.91 (, nor does) 491.22 184 P
-0.06 (it imply that the products are necessarily the best) 306 170 P
(available for the purpose.) 306 156 T
306 78 540 93 C
315 91 459 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.43 (1. The \322.Z\323 \336le is compressed.  A \322.z\323 version is) 324 71.33 P
(also available which is gzipped.) 324 59.33 T
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(17) 548.01 27 T
0 18 Q
(Refer) 72 726 T
(ences) 114.62 726 T
1 12 Q
([1]) 72 705 T
5.15 (Ousterhout, John, \322T) 93.02 705 P
5.15 (cl: An Embeddable) 203.09 705 P
4.95 (Command Language\323,) 124.99 691 P
2 F
4.95 (Pr) 246.49 691 P
4.95 (oceedings) 258.04 691 P
1.49 (of the W) 124.99 677 P
1.49 (inter 1990 USENIX Confer-) 167.28 677 P
1.27 (ence) 124.99 663 P
1 F
1.27 (, W) 146.96 663 P
1.27 (ashington, D.C., January 22-) 164.6 663 P
(26, 1990.) 124.99 649 T
([2]) 72 630 T
3.66 (Ousterhout, John, \322T) 93.02 630 P
3.66 (cl\0503\051 \320 Overview of) 200.1 630 P
0.21 (T) 124.99 616 P
0.21 (ool Command Language Facilities\323,) 131.48 616 P
2 F
0.15 (unpublished manual page) 124.99 602 P
1 F
0.15 (, University) 249.22 602 P
4.73 (of California at Berkeley) 124.99 588 P
4.73 (, January) 257.97 588 P
(1990.) 124.99 574 T
([3]) 72 555 T
0.82 (Libes, Don, \322Expect: Curing Those Uncon-) 93.02 555 P
4.81 (trollable Fits of Interaction\323,) 124.99 541 P
2 F
4.81 (Pr) 284.46 541 P
4.81 (o-) 296.01 541 P
9.94 (ceedings of the Summer 1990) 124.99 527 P
4.97 (USENIX Confer) 124.99 513 P
4.97 (ence) 207.14 513 P
1 F
4.97 (, pp. 183-192,) 229.11 513 P
(Anaheim, CA, June 1) 124.99 499 T
(1-15, 1990.) 228.15 499 T
([4]) 72 480 T
0.02 (Libes, Don, \322Expect: Scripts for Controlling) 93.02 480 P
8.06 (Interactive Programs\323,) 124.99 466 P
2 F
8.06 (Computing) 252.69 466 P
2.5 (Systems) 124.99 452 P
1 F
2.5 (, pp. 99-126, V) 162.96 452 P
2.5 (ol. 4, No. 2,) 241.53 452 P
2.45 (University of California Press Jour-) 124.99 438 P
(nals, CA, Spring 1991.) 124.99 424 T
([5]) 72 405 T
0.8 (Lehenbauer) 93.02 405 P
0.8 (, Karl, \322A Source Level Debug-) 149.15 405 P
5.25 (ger for T) 124.99 391 P
5.25 (cl\323,) 177.27 391 P
2 F
5.25 (Usenet) 202.5 391 P
1 F
5.25 ( Message-ID:) 235.81 391 P
(<1992Jan03.220658.22059@NeoSo-) 124.99 377 T
(ft.com>, January 3, 1992.) 124.99 363 T
([6]) 72 344 T
0.03 (Libes, Don, \322Expectk\323,) 93.02 344 P
2 F
0.03 (unpublished manual) 208.36 344 P
1.2 (page) 124.99 330 P
1 F
1.2 (, National Institute of Standards) 148.31 330 P
(and T) 124.99 316 T
(echnology) 151.8 316 T
(, January 1993.) 200.98 316 T
FMENDPAGE
%%EndPage: "17" 18
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 17 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
