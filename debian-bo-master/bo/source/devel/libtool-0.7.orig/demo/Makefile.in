# Makefile.in generated automatically by automake 1.1k from Makefile.am

# Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.

# A brief demonstration of using Automake with Libtool.


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = .

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@
host_triplet = @host@
host_alias = @host_alias@
RANLIB = @RANLIB@
CC = @CC@

AUTOMAKE_OPTIONS = ansi2knr foreign

EXTRA_DIST = $(TESTS) acinclude.m4

# Build a libtool library, libhello.la for installation in libdir.
lib_PROGRAMS = libhello.la
libhello_la_SOURCES = hello.c foo.c
libhello_la_LDFLAGS = -version-info 3:12:1 -rpath $(libdir)

include_HEADERS = foo.h

bin_PROGRAMS = hell hell.static

# Build hell from main.c and libhello.la
hell_SOURCES = main.c
hell_LDADD = libhello.la

# Create a statically-linked version of hell.
hell_static_SOURCES = main.c
hell_static_LDADD = libhello.la
hell_static_LDFLAGS = -static

TESTS = run.test
ACLOCAL = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs
CONFIG_CLEAN_FILES = 
PROGRAMS =  $(lib_PROGRAMS) $(bin_PROGRAMS)


DEFS = @DEFS@ -I. -I$(srcdir) 
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
o = @U@o
ANSI2KNR = @ANSI2KNR@
libhello_la_OBJECTS =  hello.l$o foo.l$o
libhello_la_LDADD = $(LDADD)
hell_OBJECTS =  main.$o
hell_DEPENDENCIES =  libhello.la
hell_LDFLAGS = 
hell_static_OBJECTS =  main.$o
hell_static_DEPENDENCIES =  libhello.la
LIBTOOL = @LIBTOOL@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@
HEADERS =  $(include_HEADERS)

DIST_COMMON =  README Makefile.am Makefile.in README acinclude.m4 \
aclocal.m4 ansi2knr.1 ansi2knr.c configure configure.in


PACKAGE = @PACKAGE@
VERSION = @VERSION@

DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
	$(TEXINFOS) $(MANS) $(EXTRA_DIST)

TAR = tar
SOURCES = $(libhello_la_SOURCES) $(hell_SOURCES) $(hell_static_SOURCES)
OBJECTS = $(libhello_la_OBJECTS) $(hell_OBJECTS) $(hell_static_OBJECTS)

default: all

.SUFFIXES:
.SUFFIXES: .c .o .lo ._c ._o .l_o
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in 
	cd $(top_srcdir) && automake --foreign Makefile

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

$(srcdir)/aclocal.m4: configure.in acinclude.m4
	cd $(srcdir) && aclocal

config.status: configure
	$(SHELL) ./config.status --recheck
$(srcdir)/configure: configure.in $(ACLOCAL) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && autoconf

mostlyclean-libPROGRAMS:

clean-libPROGRAMS:
	test -z "$(lib_PROGRAMS)" || rm -f $(lib_PROGRAMS)

distclean-libPROGRAMS:

maintainer-clean-libPROGRAMS:

install-libPROGRAMS: $(lib_PROGRAMS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(libdir)
	list="$(lib_PROGRAMS)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$p $(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libPROGRAMS:
	list="$(lib_PROGRAMS)"; for p in $$list; do \
	  $(LIBTOOL) --mode=uninstall rm -f $(libdir)/$$p; \
	done

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(bindir)
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  rm -f $(bindir)/`echo $$p|sed '$(transform)'`; \
	done

.c.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	rm -f *.o core

clean-compile:

distclean-compile:
	rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	rm -f *.lo

clean-libtool:
	rm -rf .libs

distclean-libtool:

maintainer-clean-libtool:

ansi2knr: ansi2knr.o
	$(LINK) ansi2knr.o $(LIBS)

ansi2knr.o: $(CONFIG_HEADER)

mostlyclean-krextra:

clean-krextra:

distclean-krextra:
	rm -f ansi2knr

maintainer-clean-krextra:

.c._c:
	$(ANSI2KNR) $< > $*.tmp && mv $*.tmp $@

._c._o:
	@echo "$(COMPILE) -c $<"
	@rm -f _$*.c
	@ln $< _$*.c && $(COMPILE) -c _$*.c && mv _$*.o $@ && rm _$*.c

._c.l_o:
	@echo "$(LIBTOOL) --mode=compile $(COMPILE) -c $<"
	@rm -f _$*.c
	@ln $< _$*.c && $(LIBTOOL) --mode=compile $(COMPILE) -c _$*.c && mv _$*.lo $@ && rm _$*.c

.c._o:
	$(ANSI2KNR) $< > $*.tmp && mv $*.tmp $*._c
	@echo "$(COMPILE) -c $*._c"
	@rm -f _$*.c
	@ln $*._c _$*.c && $(COMPILE) -c _$*.c && mv _$*.o $@ && rm _$*.c

.c.l_o:
	$(ANSI2KNR) $< > $*.tmp && mv $*.tmp $*._c
	@echo "$(LIBTOOL) --mode=compile $(COMPILE) -c $*._c"
	@rm -f _$*.c
	@ln $*._c _$*.c && $(LIBTOOL) --mode=compile $(COMPILE) -c _$*.c && mv _$*.lo $@ && rm _$*.c

mostlyclean-kr:
	rm -f *._o *.l_o *._c _*.c _*.o

clean-kr:

distclean-kr:
	rm -f ansi2knr

maintainer-clean-kr:

libhello.la: $(libhello_la_OBJECTS) $(libhello_la_DEPENDENCIES)
	$(LINK) $(libhello_la_LDFLAGS) $(libhello_la_OBJECTS) $(libhello_la_LDADD) $(LIBS)

hell: $(hell_OBJECTS) $(hell_DEPENDENCIES)
	$(LINK) $(hell_LDFLAGS) $(hell_OBJECTS) $(hell_LDADD) $(LIBS)

hell.static: $(hell_static_OBJECTS) $(hell_static_DEPENDENCIES)
	$(LINK) $(hell_static_LDFLAGS) $(hell_static_OBJECTS) $(hell_static_LDADD) $(LIBS)
foo._o hello._o main._o : $(ANSI2KNR)

install-includeHEADERS: $(include_HEADERS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(includedir)
	list="$(include_HEADERS)"; for p in $$list; do \
	  $(INSTALL_DATA) $(srcdir)/$$p $(includedir)/$$p; \
	done

uninstall-includeHEADERS:
	list="$(include_HEADERS)"; for p in $$list; do \
	  rm -f $(includedir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES)
	here=`pwd` && cd $(srcdir) && mkid -f$$here/ID $(SOURCES) $(HEADERS)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES)
	tags=; \
	here=`pwd`; \
	list="$(SUBDIRS)"; for subdir in $$list; do \
	  test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
	done; \
	test -z "$(ETAGS_ARGS)$(SOURCES)$(HEADERS)$$tags" \
	  || cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $(SOURCES) $(HEADERS) -o $$here/TAGS

mostlyclean-tags:

clean-tags:

distclean-tags:
	rm -f TAGS ID

maintainer-clean-tags:

distdir = $(PACKAGE)-$(VERSION)
# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	rm -rf $(distdir)
	$(TAR) zxf $(distdir).tar.gz
	mkdir $(distdir)/=build
	mkdir $(distdir)/=inst
	dc_install_base=`cd $(distdir)/=inst && pwd`; \
	cd $(distdir)/=build \
	  && ../configure --srcdir=.. --prefix=$$dc_install_base \
	  && $(MAKE) \
	  && $(MAKE) dvi \
	  && $(MAKE) check \
	  && $(MAKE) install \
	  && $(MAKE) installcheck \
	  && $(MAKE) dist
	rm -rf $(distdir)
	@echo "========================"; \
	echo "$(distdir).tar.gz is ready for distribution"; \
	echo "========================"
dist: distdir
	-chmod -R a+r $(distdir)
	$(TAR) chozf $(distdir).tar.gz $(distdir)
	rm -rf $(distdir)
dist-all: distdir
	-chmod -R a+r $(distdir)
	$(TAR) chozf $(distdir).tar.gz $(distdir)
	rm -rf $(distdir)
distdir: $(DISTFILES)
	rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 755 $(distdir)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done
foo.$o foo.l$o:
hello.$o hello.l$o: hello.c foo.h
main.$o main.l$o: main.c foo.h

check-TESTS: $(TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(TESTS); do \
	  all=`expr $$all + 1`; \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    echo "PASS: $$tst"; \
	  else \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  echo "========================"; \
	  echo "All $$all tests passed"; \
	  echo "========================"; \
	else \
	  echo "$$failed of $$all tests failed"; \
	fi
info:
dvi:
check: all
	$(MAKE) check-TESTS
installcheck:
install-exec: install-libPROGRAMS install-binPROGRAMS
	$(NORMAL_INSTALL)

install-data: install-includeHEADERS
	$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-libPROGRAMS uninstall-binPROGRAMS uninstall-includeHEADERS

all: $(ANSI2KNR) $(PROGRAMS) $(HEADERS) Makefile

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install
installdirs:
	$(mkinstalldirs)  $(libdir) $(bindir) $(includedir)


mostlyclean-generic:
	test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	rm -f Makefile $(DISTCLEANFILES)
	rm -f config.cache config.log stamp-h
	test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-libPROGRAMS mostlyclean-binPROGRAMS \
		mostlyclean-compile mostlyclean-libtool \
		mostlyclean-krextra mostlyclean-kr mostlyclean-tags \
		mostlyclean-generic

clean:  clean-libPROGRAMS clean-binPROGRAMS clean-compile clean-libtool \
		clean-krextra clean-kr clean-tags clean-generic \
		mostlyclean

distclean:  distclean-libPROGRAMS distclean-binPROGRAMS \
		distclean-compile distclean-libtool distclean-krextra \
		distclean-kr distclean-tags distclean-generic clean
	rm -f config.status
	rm -f libtool

maintainer-clean:  maintainer-clean-libPROGRAMS \
		maintainer-clean-binPROGRAMS maintainer-clean-compile \
		maintainer-clean-libtool maintainer-clean-krextra \
		maintainer-clean-kr maintainer-clean-tags \
		maintainer-clean-generic distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f config.status

.PHONY: default mostlyclean-libPROGRAMS distclean-libPROGRAMS \
clean-libPROGRAMS maintainer-clean-libPROGRAMS uninstall-libPROGRAMS \
install-libPROGRAMS mostlyclean-binPROGRAMS distclean-binPROGRAMS \
clean-binPROGRAMS maintainer-clean-binPROGRAMS uninstall-binPROGRAMS \
install-binPROGRAMS mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool mostlyclean-krextra \
distclean-krextra clean-krextra maintainer-clean-krextra mostlyclean-kr \
distclean-kr clean-kr maintainer-clean-kr uninstall-includeHEADERS \
install-includeHEADERS tags mostlyclean-tags distclean-tags clean-tags \
maintainer-clean-tags distdir check-TESTS info dvi installcheck \
install-exec install-data install uninstall all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


# Regenerate our acinclude.m4 only if it doesn't exist.
$(srcdir)/acinclude.m4:
	rm -f $(srcdir)/acinclude.m4
	ln -s ../libtool.m4 $(srcdir)/acinclude.m4

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
