This is Info file libtool.info, produced by Makeinfo version 1.67 from
the input file libtool.texi.

START-INFO-DIR-ENTRY
* Libtool: (libtool).   Generic shared library support script.
END-INFO-DIR-ENTRY

   This file documents the Libtool library support script.

   Copyright (C) 1996 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: libtool.info,  Node: Automake,  Next: Versioning,  Prev: Autoconf,  Up: Programmer Interface

Automake Support
================

   Automake does not currently support libtool.


File: libtool.info,  Node: Versioning,  Next: LIBINFO,  Prev: Automake,  Up: Programmer Interface

Library Version Support
=======================

   There is a complication when using shared libraries: there needs to
be a way to guarantee that programs are being linked with a compatible
shared library (i.e., one that supports the same interfaces that the
program uses).

   Libtool enforces compatibility with three numbers, specified in the
`LIBINFO' file (*note LIBINFO::.):

CURRENT
     The most recent interface number that this library implements.

AGE
     The difference between the oldest and newest interfaces that this
     library implements.  In other words, the library implements all the
     interface numbers in the range from number `CURRENT - AGE' to
     `CURRENT'.

REVISION
     The implementation number of the CURRENT interface.

   When you link a program against a library, it uses the CURRENT
interface.  So, if the program uses shared libraries, the dynamic linker
must find the `best' library that supports the interface the program
requires.

   Libtool encodes a system-dependent version string into each shared
library it builds.  This version string (VERSTRING) tells the dynamic
linker what interfaces the library supports.

   At runtime, for each library interface that the program requires, the
dynamic linker examines the VERSTRING of each library with the same
name.  Then, it links the program against the library that supports the
most recent interface, and which is still compatible with the interface
that the program requires.

   *NOTE*: if you are using library versioning, do *not* attempt to
make the VERSTRING correspond to the release number of your package.
This is an abuse that will only foster misunderstanding of library
versions in your users, and is not portable to all platforms (the
different library versioning schemes use different VERSTRING
conventions).


File: libtool.info,  Node: LIBINFO,  Next: The libinfo Script,  Prev: Versioning,  Up: Programmer Interface

The `LIBINFO' File
==================

   The `LIBINFO' file is used to tell libtool that a library is under
its control, and to provide versioning information.  The format is as
follows:

     # This file is read by libinfo.  Comments begin with a `#' sign.
     #
     # Lines have the following format:
     # LIBNAME  CURRENT-INTERFACE-NUMBER AGE REVISION
     #
     # See (libtool)Versioning. for more information on the version variables.
     
     # The ubiquitous libfoo.la
     foo 2 1 5

   When you start maintaining a `LIBINFO' file for your project, you
should begin numbering with the default values.  That is:

     # NAME    MAJOR   DELTA  REVISION
     foo         1       0       0


File: libtool.info,  Node: The libinfo Script,  Next: Versioning Example,  Prev: LIBINFO,  Up: Programmer Interface

The `libinfo' Script
====================

   Libtool uses the `libinfo' script to get information from the
`LIBINFO' file.  You can also run libinfo by itself to check the
validity of a `LIBINFO' file, or to see what a VERSTRING looks like on
different systems.

   This program has the following synopsis:

     libinfo [OPTION]... NAME [ FILES... ]

or:

     libinfo [ OPTION... ] NAME DIRECTORY

and accepts the following options:

`--help'
     Display a command summary.

`--version'
     Display the release number of the libinfo script.

`-t TYPE'
`--version-type=TYPE'
     Use the TYPE versioning scheme, where TYPE is one of `NONE',
     `hpux', `osf', `solaris', or `sunos'.  *Note Version Schemes::,
     for details.

   The NAME is the name of the library to fetch information for (the
name of `libfoo.la' is `foo').

   FILES is a list of `LIBINFO' files to search for information about
NAME.  If it is omitted, then libinfo scans `./LIBINFO'.

   For the second invocation form, DIRECTORY is a directory to scan for
an installed version of `name'.

   The script displays the VERSTRING for the given library and version
type, or exits with an error if no version information could be found.


File: libtool.info,  Node: Versioning Example,  Next: Library Tips,  Prev: The libinfo Script,  Up: Programmer Interface

An Example of Library Versioning
================================

   Before you make a public release of your software, change the version
numbers in `LIBINFO' according to these rules:

  1. If the library source code has changed at all since the last public
     release, then increment REVISION.

  2. If any entry points have been added, removed, or changed since the
     last public release, increment CURRENT, and set REVISION to 0.

  3. If entry points have been added since the last public release, then
     increment AGE.

  4. If any entry points have been removed or changed since the last
     public release, then set the AGE to 0.

   Library entry points include global variable names and types, and
global functions and function arguments (including the order and type of
arguments).

   Here is an example of how versioning might be used for the
`libfoo.la' library:

Mar 15, 1996
     First public release of `libfoo.la', the `LIBINFO' file has `foo'
     listed with a CURRENT of 1, AGE of 0, and REVISION of 0: `foo 1 0
     0'.

Mar 16, 1996
     Second public release.  No `libfoo' source code changed, so the
     `LIBINFO' file is not changed.

Mar 17, 1996
     Third public release (holy fast release cycle, Batman - it must be
     free software).  Added a nice new interface, the `hello' function.
     Set the version line to `foo 2 1 0', according to rules 2 and 3.

Mar 18, 1996
     Fourth public release.  Got rid of the `bar' global variable.  Set
     the version line to `foo 3 0 0', according to rules 2 and 4.

Mar 19, 1996
     Fifth public release to fix a bug in the `hello' program.  No
     library changes, so the version line stays the same.

Mar 20, 1996
     Sixth public release to fix a bug in the `hello' function.  Set the
     version line to `foo 3 0 1', according to rule 1.

Mar 23, 1996
     Seventh public release.  Added a third argument to the `foo'
     function.  Set the version line to `foo 4 0 0', according to rules
     2 and 4.

   Of course, if you're lazy, and don't care about whether the
occasional program crashes when it is linked against your shared
library, you don't have to maintain the `LIBINFO' file at all.


File: libtool.info,  Node: Library Tips,  Prev: Versioning Example,  Up: Programmer Interface

Library Programming Considerations
==================================

   There are some techniques you can use to maximize binary
compatibility.  If you follow them, your users will be thankful,
because they'll be able to reap the benefits of libtool's versioning
system without having to recompile dynamically linked programs.

Plan ahead
     Try to make every interface truly minimal, so that you won't need
     to delete entry points very often.

Avoid interface changes
     Some people love redesigning and changing entry points just for
     the heck of it.  Don't be one of those people.  If you must
     redesign an interface, then leave compatibility functions behind
     so that users don't need to rewrite their code.

Use opaque data types
     The fewer data type definitions a library user has access to, the
     better.  If possible, design your functions to accept a pointer to
     an internal data type (or a magic cookie), and provide access
     functions rather than allowing the user to directly manipulate the
     data.  That way, you have the freedom to change the data
     structures without changing the interface.

Use header files
     If you are careful to document each of your library's global
     functions and variables in header files, and include them in your
     source files, then the compiler will let you know if you make any
     interface changes.

Use the `static' keyword whenever possible
     The fewer global functions your library has, the more flexibility
     you'll have in changing them.  Static functions and variables may
     change forms as often as you like... your users cannot access
     them, so they aren't interface changes.


File: libtool.info,  Node: Modifying Libtool,  Next: Index,  Prev: Programmer Interface,  Up: Top

Modifying Libtool
*****************

   Before you read this section, it is important to understand libtool's
design philosophy.  *Note Introduction::, if you haven't already.

   Free software like libtool depends on people who submit their
changes to Gord Matzigkeit <gord@gnu.ai.mit.edu> so that they can be
made available in the next libtool distribution.  Reading the design
document is one way to help avoid wasting your time modifying libtool
in a way that the maintainer won't accept as an enhancement.

* Menu:

* Enhancements::         How to contribute to libtool's success.
* Porting Libtool::      How to port libtool to new systems.
* Version Schemes::      Shared library versioning implementations.
* Full Support::         Complete host descriptions.
* Partial Support::      Partial host descriptions.
* Libtool Structure::    Libtool's internal structure.


File: libtool.info,  Node: Enhancements,  Next: Porting Libtool,  Prev: Modifying Libtool,  Up: Modifying Libtool

Desirable Enhancements
======================

   The best ways to contribute to libtool's development are as follows:

   * Port libtool to an unsupported operating system, or add full
     support to a partially supported one.  *Note Porting Libtool::,
     for details.

   * Figure out a way to simplify libtool's interface or internal
     structure.

   * Tell other programmers (especially ones who write free software)
     about libtool, Autoconf, and Automake, and get them to use them to
     support their own packages.


File: libtool.info,  Node: Porting Libtool,  Next: Version Schemes,  Prev: Enhancements,  Up: Modifying Libtool

Porting Libtool
===============

   This section contains a list of questions to ask when you are porting
libtool to a new system.

   If you know just a few of the answers to these questions, then submit
them to Gord Matzigkeit <gord@gnu.ai.mit.edu>.  He will record them in
this documentation for future reference.

   Once you know all these answers, you should send e-mail to Gord
Matzigkeit <gord@gnu.ai.mit.edu>.  Then, either he can do the port, and
you can test it, or you can try to do the port yourself.

   Please use the following variables to help explain your answer:

`$(ARLIB)'
     The name of the static library we are building.

`$(BASENAME)'
     The base name of the library, as in `lib$(BASENAME)_p_pic.a'.

`$(CC)'
     The compiler that was detected by the `libtool configure' mode.

`$(LD)'
     The linker that was detected by the `libtool configure' mode.

`$(LIBDIR)'
     The directory that libraries are installed in.

`$(NAME)'
     The name of the library, as in `lib$(NAME).la'.  This is only
     different from `$(BASENAME)' for profiled libraries, where
     `$(NAME)' is `$(BASENAME)_p'.

`$(OBJS)'
     The name of the object files that are being archived.

`$(SHLIB)'
     The name of the shared library we are building.

   Before you answer all the questions for your system, check to see if
it is already described (and if it is, make sure the existing
description is correct).

   Be sure that your answers are accurate and complete (refer to system
documentation, and run test programs to be sure of the truth of your
answers).  Any sloppiness or inaccuracies mean that libtool doesn't
work as well as it could.

   If you are unsure of an answer, or cannot provide a full answer,
write `???', so that others will be know to verify or complete it.

  1. Which `$(CC)' flags, that are different from GCC's, are needed to
     produce each object type?  For object types which do not require
     flags (such as `d' objects on some systems), answer `none'.  If
     there are any restrictions on the combinations of these compiler
     flags, then list them.

     Never, ever mention compiler flags that are advertised to break
     code.  Safety and correctness are paramount.  Even
     "hyper-optimize" means "the best possible safe optimization that
     allows debugging," not "the fastest code the compiler will
     produce."

  2. List any unsupported object types or object type combinations.

  3. List any extra flags that must be passed to `$(CC)' while linking
     certain link types.

  4. Describe the implementation of shared library versioning on this
     system.  *Note Version Schemes::, for details.

  5. What names are shared libraries installed under on this system?
     List the primary name first (unique for each library version),
     followed by aliases.

  6. What commands (if any) produce shared libraries from PIC libraries?

  7. What commands produce shared libraries from PIC objects?

  8. What is the name of the shared library path environment variable?

  9. What commands should be suggested after installing a shared
     library?

 10. What is the broadest class of hosts that this description could
     apply to?  For example: `*-*-sunos4*' rather than
     `sparc-sun-sunos4.1.3'.  Record your answer in the record header.

 11. If there are any details that are not covered by these questions,
     then list them.


File: libtool.info,  Node: Version Schemes,  Next: Full Support,  Prev: Porting Libtool,  Up: Modifying Libtool

Shared Library Version Schemes
==============================

   This table describes various library versioning schemes that libtool
supports:

`NONE'
     This is the default, and has an empty VERSTRING.

`hpux'
     On HP-UX, `ld.so' examines the library file suffix to determine
     compatibility information.

     VERSTRING is set to `CURRENT.REVISION', and MAJOR is set to
     `CURRENT'.

     `hpux'-type library versions do not support upward compatibility.

`osf'
     The OSF versioning scheme allows arbitrary version tokens rather
     than numbers.  However, to simplify versioning, libtool uses the
     `LIBINFO' variables directly.

     When building a shared library, the argument to the `-set_version'
     linker flag is a colon-separated list of version tokens.  The
     rightmost token is recorded in dynamically linked executables as
     the "required" version.  The other tokens are the versions which
     the library is compatible with.

     For example, if `libfoo.so' is built with `-set_version
     2.1.5:1.0:2.0', then programs linked against the library would
     require version `2.0', and the library would be designated
     compatible with all the other versions.

     The VERSTRING on an `osf'-type system is set to
     `CURRENT.AGE.REVISION:1.0:2.0:...:CURRENT.0'.

     The `osf' type does not support the REVISION variable.

`solaris'
     On Solaris, the dynamic linker, `ld.so', uses the library SONAME
     (given as an option to `ld', when creating the library) to
     determine compatibility.  Solaris supports all the compatibility
     features of libtool.

     An additional variable, MAJOR, is set to the difference between
     CURRENT and AGE (that is, the oldest compatible interface).

     The VERSTRING on a `solaris'-type system is set to
     `MAJOR.AGE.REVISION'.

`sunos'
     SunOS versioning is identical to HP-UX, except the MAJOR variable
     is not set.


File: libtool.info,  Node: Full Support,  Next: Partial Support,  Prev: Version Schemes,  Up: Modifying Libtool

Fully Supported Systems
=======================

   GNU libtool fully supports the following host systems.  In other
words, libtool takes advantage of every known library feature on these
hosts.

`*-*-aix3*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from AIX man pages.

    compiler flags and restrictions, if different from GCC
          `O' uses `-O3'.  No additional flags are required for shared
          libraries.

    unsupported objects
          Shared and static libraries cannot be built simultaneously.
          Profiled shared objects are unsupported.

    additional link flags
          To link against a shared library before it has been
          installed, use `-L$(BUILDDIR) -l$(NAME)'.

    shared library version implementation
          None, but libtool uses a `solaris'-style VERSTRING to
          generate the shared library name.

    shared library names
          `lib$(NAME).so.$(VERSTRING)' `lib$(NAME).a'

    transform PIC libraries to shared libraries
          Who knows the right incantation for cross-compilation???

               # Get all the exported symbols into a file.
               rm -f $(SHLIB).exp
               /usr/ucb/nm $(ARLIB) | egrep ' D ' | sed 's/^.* //' > $(SHLIB).exp
               
               # Generate a shared object file:
               $(LD) -o $(SHLIB).o $(ARLIB) -bE:$(SHLIB).exp -T512 -H512 -bM:SRE
               
               # Make it usable as a library, and remove temporaries.
               $(AR) cru $(SHLIB) $(SHLIB).o
               rm -f $(SHLIB).exp $(SHLIB).o

    transform PIC objects to shared libraries
          Same as above, but use `$(OBJS)' in place of `$(ARLIB)'.

    shared library path variable
          `LIBPATH'

    additional notes
          AIX 3 and 4 linkers hardcode the build directory of the
          shared library into the generated program.

`*-*-aix4*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from AIX man pages.

    compiler flags and restrictions, if different from GCC
          `O' uses `-O3 -qstrict'.  No additional flags are required for
          shared libraries.

    unsupported objects
          Shared and static libraries cannot be built simultaneously,
          since they reside in the same namespace.

    additional link flags
          To link against a shared library before it has been
          installed, use `-L$(BUILDDIR) -l$(NAME)'.

    shared library version implementation
          None, but libtool uses a `solaris'-style VERSTRING to
          generate the shared library name.

    shared library names
          `lib$(NAME).so.$(VERSTRING)' `lib$(NAME).a'

    transform PIC libraries to shared libraries
          Who knows the right incantation for cross-compilation???

               # Get all the exported symbols into a file.
               rm -f $(SHLIB).exp
               /usr/bin/nm -B $(ARLIB) | egrep ' D ' | sed 's/^.* //' > $(SHLIB).exp
               
               # Generate a shared object file:
               $(CC) -o $(SHLIB).o $(ARLIB) -bE:$(SHLIB).exp -bM:SRE -bnoentry
               
               # Make it usable as a library, and remove temporaries.
               $(AR) cru $(SHLIB) $(SHLIB).o
               rm -f $(SHLIB).exp $(SHLIB).o

    transform PIC objects to shared libraries
          Same as above, but use `$(OBJS)' in place of `$(ARLIB)'.

    shared library path variable
          `LIBPATH'

    additional notes
          AIX 3 and 4 linkers hardcode the build directory of the
          shared library into the generated program.

`*-*-freebsd*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from test programs
     and the LessTif configuration.

    compiler flags and restrictions, if different from GCC
          GCC is the system compiler.

    unsupported objects
          Shared profiled objects are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

          To link against shared libraries before they have been
          installed, set `$(LIBPATH)' to the directory containing the
          library, and use `-l$(NAME)'.

    shared library version implementation
          `sunos' library versioning is supported.

    shared library names
          `lib$(BASENAME).so.$(VERSTRING)', and `lib$(BASENAME).so'

    transform PIC libraries to shared libraries
               $(LD) -Bshareable -Bforcearchive -o $(SHLIB) $(ARLIB)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Run `ldconfig -m $(LIBDIR)' as root, or add `$(LIBDIR)' to
          `LD_LIBRARY_PATH'.

`*-*-gnu*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from test programs
     and system manuals.

    compiler flags and restrictions, if different from GCC
          GCC is the system compiler.

    unsupported objects
          Shared profiled objects are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

          To link against shared libraries before they have been
          installed, set `$(LIBPATH)' and use `-l$(NAME)'.

    shared library version implementation
          No library versioning.

    shared library names
          `lib$(NAME).so.$(VERSTRING)'

    transform PIC libraries to shared libraries
               $(LD) -shared -o $(SHLIB) -soname lib$(NAME).so -rpath $(LIBDIR)
               -set_version $(VERSTRING) -all $(ARLIB) -none

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Run `ldconfig $(LIBDIR)' as root, or add `$(LIBDIR)' to
          `LD_LIBRARY_PATH'.

`*-*-hpux10*'
     Source: Gordon Matzigkeit <gord@gnu.ai.mit.edu>

    compiler flags and restrictions, if different from GCC
          `P' uses `-G', `s' uses `+Z'.

    unsupported objects
          Profiled shared libraries are unsupported.

    shared library version implementation
          `hpux' versioning using the internal shared library name
          (`soname', given with the `+h' linker option).

    shared library names
          `lib$(NAME).sl.$(VERSTRING)', `lib$(NAME).sl.$(MAJOR)', and
          `lib$(NAME).sl'.

    transform PIC libraries to shared libraries
          Not supported by the native linker.

    transform PIC objects to shared libraries
               $(LD) -b +h lib$(NAME).sl.$(MAJOR) +b $(LIBDIR) +s -o $(SHLIB) $(OBJS)

    shared library path variable
          SHLIB_PATH

    shared library post-installation suggestions
          None.

    additional notes
          HP-UX linkers hardcode the build directory of the shared
          library into the generated program.

`*-*-linux*'
     Source: Ulrich Drepper <drepper@gnu.ai.mit.edu>.

     This description is for the Linux ELF targets only.

    compiler flags and restrictions, if different from GCC
          GCC is the system compiler.

    unsupported objects
          Shared profiled objects are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

    shared library version implementation
          `solaris' library versioning is supported.

    shared library names
          `lib$(NAME).so.$(VERSTRING)', and `lib$(NAME).so'

    transform PIC libraries to shared libraries
               $(CC) -shared -o $(SHLIB) -Wl,-soname,$(SHLIB) -o $(SHLIB) \
               -Wl,-whole-archive,$(ARLIB)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Run `ldconfig $(LIBDIR)' as root, or add `$(LIBDIR)' to
          `LD_LIBRARY_PATH'.

`*-*-netbsd*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from test programs
     and the LessTif configuration.

    compiler flags and restrictions, if different from GCC
          GCC is the system compiler.

    unsupported objects
          Shared profiled objects are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

          To link against shared libraries before they have been
          installed, set `$(LIBPATH)' to the directory containing the
          library, and use `-l$(NAME)'.  Add `-R$(LIBDIR)' to the link
          line.

    shared library version implementation
          `sunos' library versioning is supported.

    shared library names
          `lib$(NAME).so.$(VERSTRING)', and `lib$(NAME).so'

    transform PIC libraries to shared libraries
               $(LD) -Bshareable -Bforcearchive -o $(SHLIB) $(ARLIB)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Run `ldconfig $(LIBDIR)' as root, or add `$(LIBDIR)' to
          `LD_LIBRARY_PATH'.

`*-*-osf3*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from test programs
     and system manuals.

    compiler flags and restrictions, if different from GCC
          `d' uses `-g2', `O' uses `-O4'.

    unsupported objects
          Shared profiled objects are unsupported. ???

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

          To link against shared libraries before they have been
          installed, set `$(LIBPATH)' to the directory containing the
          library, and use `-l$(NAME)'.

    shared library version implementation
          `osf' library versioning is supported.

    shared library names
          `lib$(NAME).so.$(VERSTRING)', and `lib$(NAME).so'

    transform PIC libraries to shared libraries
               $(CC) -shared -o $(SHLIB) -Wl,-soname,$(SHLIB) -o $(SHLIB) \
               -Wl,-whole-archive,$(ARLIB)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          None.

`*-*-solaris2*'
     Source: Gordon Matzigkeit <gord@gnu.ai.mit.edu>, from man pages.

    compiler flags and restrictions, if different from GCC
          `O' uses `-xO5', `P' uses `-xpg', and `s' uses `-KPIC'.

    unsupported objects
          None.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.  To link against shared libraries before they have
          been installed, set `$(LIBPATH)' to the directory containing
          the library, and use `-l$(NAME)'.  Add `-R$(LIBDIR)' to the
          link line.

    shared library version implementation
          `solaris' library versioning is supported.

    shared library names
          `lib$(NAME).so.$(VERSTRING) lib$(NAME).so'

    transform PIC libraries to shared libraries
          Unsupported.

    transform PIC objects to shared libraries
               $(LD) -G -z text -h lib$(NAME).so.$(VERSTRING) -o $(SHLIB) $(OBJS)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Set `$(LIBPATH)' to `$(LIBDIR)'.

`*-*-sunos4*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from SunOS man pages
     and some test programs.

    compiler flags and restrictions, if different from GCC
          `O' uses `-O4', `s' uses`-PIC'.  `$(CC)' gives a warning if
          `-g' and `-O' are used together.

    unsupported objects
          Profiled shared libraries are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.  To link against shared libraries before they have
          been installed, set `$(LIBPATH)' to the directory containing
          the library, and use `-l$(NAME)'.  Add `-L$(LIBDIR)' to the
          link line.

    shared library version implementation
          `sunos' library versioning is supported.

    shared library names
          `lib$(NAME).so.$(VERSTRING)'

    transform PIC libraries to shared libraries
          Unsupported.

    transform PIC objects to shared libraries
               $(LD) -assert pure-text -Bstatic -o $(SHLIB) $(OBJS)

    shared library path variable
          `LD_LIBRARY_PATH'

    shared library post-installation suggestions
          Run `ldconfig $(LIBDIR)' as root, or add `$(LIBDIR)' to
          `LD_LIBRARY_PATH'.

`*-*-ultrix4*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>, from Ultrix 4.2
     documentation and test programs.

    compiler flags and restrictions, if different from GCC
          Hyper-optimization and graphic profiling aren't supported.
          `$(CC)' gives a warning if `-g' and `-O' are used together.

    unsupported objects
          There is no support for shared objects.

    shared library version implementation
          No shared libraries.


File: libtool.info,  Node: Partial Support,  Next: Libtool Structure,  Prev: Full Support,  Up: Modifying Libtool

Partially Supported Systems
===========================

   The following table lists the systems that are partially supported
(or not supported at all) by libtool:

`*-*-linuxoldld*'
`*-*-linuxaout*'
     Source: Gord Matzigkeit <gord@gnu.ai.mit.edu>.

     These descriptions are stubbed, so that the `*-*-linux*'
     configuration gets only ELF targets.

    compiler flags and restrictions, if different from GCC
          GCC is the system compiler.

    unsupported objects
          Shared profiled objects are unsupported.

    additional link flags
          Profile flags need to be included for linking profiled
          objects.

    shared library version implementation
          There is no support for shared libraries yet. ???


File: libtool.info,  Node: Libtool Structure,  Prev: Partial Support,  Up: Modifying Libtool

Libtool's Internal Structure
============================

   Once you've answered all the questions that were asked in the
previous section, you should have an idea of what you need to do to port
libtool.  Because libtool is evolving software, I have been careful to
document most of structure of libtool within the script itself.  So,
read the `libtool' script for more information.

   The following is a list of variables that are used in the
configuration file, and what they may contain.  All variables may
reference any variable on this list... other possible references are
given in their descriptions.

`host_alias'
     The hostname that libtool was configured with.

`AR'
`CC'
`LD'
`RANLIB'
     Pointers to the programs that are used later in commands.

`PIC_flags'
`PROF_PIC_flags'
`PROFILE_flags'
`STATIC_flags'
     `$CC' flags that are used to compile objects for the designated
     library type.

`arlib2shlib'
     A `#'-separated list of commands to transform a library of
     position-independent code (`$ARLIB') into a shared library
     `$SHLIB'.

`ld_hardcode_libdirs'
     Set to `yes' if the `$LD' hardcodes the directory of a shared
     library into the program.

`libpath_var'
     The name of the shared library path variable, such as
     LD_LIBRARY_PATH, LIBPATH, or SHLIB_PATH.

`libtypes'
     List of all the libraries to build, derived from the `$OBJTYPES'
     environment variable.

`link_flags'
     Additional flags to use when linking a program.

`objs2shlib'
     A `#'-separated list of commands to transform a library of
     position-independent code (`$ARLIB') into a shared library
     `$SHLIB'.

`shlib_libdirspec'
     `$CC' flags used to hardcode a shared library path into a binary.
     May reference `$LIBDIR'.

`shlib_linkspec'
     `$CC' flags used to link a program against a shared library.  May
     reference `$ARLIB', `$BASENAME', `$LIBDIR', and `$NAME'.

`shlib_names'
     Aliases for a shared library.  The first one is the name that the
     library will be installed under, the others are symbolic links.
     May reference `$BASENAME', `$NAME', `$MAJOR', `$MINOR', and
     `$UPCOMPAT'.

`shlib_postadvice'
     A `#'-separated list of commands to suggest if shared library
     postinstallation failed, or if there were no `$shlib_postinstall'
     commands.  Same references as `shlib_postinstall'.

`shlib_postinstall'
     A `#'-separated list of commands for the superuser to run in order
     to make installed shared libraries ready for use.  May reference
     `$libpath_var' and `$LIBDIR'.

`link_flags'
     Additional flags to be used for linking programs.  Usually set to
     profile flags (`-p' or `-pg') when linking against profiled
     objects.

`link_pathflags'
     Additional library paths to add at link time (usually for shared
     library linking).  May reference `$LIBDIR'.


File: libtool.info,  Node: Index,  Prev: Modifying Libtool,  Up: Top

Index
*****

   FIXME: What is the Texinfo to merge these indices?

* Menu:

* Binutils:                              Cygnus Software.
* C language library:                    Glibc.
* Canonicalization scripts:              Programmer Interface.
* config.guess:                          Programmer Interface.
* config.sub:                            Programmer Interface.
* Cygnus Support software:               Cygnus Software.
* GNU binutils:                          Cygnus Software.
* GNU C library:                         Glibc.
* hello, example program:                libtool.
* LessTif library:                       LessTif.
* libtool:                               libtool.
* Motif library:                         LessTif.
* Perl 5:                                Perl 5.
* Scripting language, perl:              Perl 5.
* Scripting language, Tcl:               Tcl.
* Tcl 7.5:                               Tcl.
* Unix C library:                        Glibc.
* Windows, LessTif API for:              LessTif.
* X Windows, LessTif API for:            LessTif.

* Menu:

* CC:                                    Using Libtool.
* CFLAGS:                                Using Libtool.
* LD:                                    Using Libtool.
* RANLIB:                                Using Libtool.

* Menu:

* Abstinance from libtool:               Not Using Libtool.
* Avoiding libtool:                      Not Using Libtool.
* Compiling for a different host:        Using Libtool.
* Complexity of library systems:         Postmortem.
* Conflicting object types:              Conflicts in OBJTYPES.
* Cross-building:                        Using Libtool.
* Cross-compiling:                       Using Libtool.
* Design issues:                         Issues.
* Design philosophy:                     Motivation.
* Errors in OBJTYPES:                    Conflicts in OBJTYPES.
* Example OBJTYPES setting:              Conflicts in OBJTYPES.
* Host type guessing:                    Programmer Interface.
* Libtool specifications:                Motivation.
* Motivation for writing libtool:        Motivation.
* Other implementations, flaws in:       Postmortem.
* PIC:                                   Cygnus Software.
* Position-independent code:             Cygnus Software.
* Programming with libtool:              Programmer Interface.
* Resolving OBJTYPES conflicts:          Conflicts in OBJTYPES.
* Reuseability of library systems:       Postmortem.
* Specifications for libtool:            Motivation.
* Tricky design issues:                  Issues.
* Using libtool in your package:         Programmer Interface.


