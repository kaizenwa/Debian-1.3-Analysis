This is Info file libtool.info, produced by Makeinfo version 1.67 from
the input file libtool.texi.

START-INFO-DIR-ENTRY
* Libtool: (libtool).   Generic shared library support script.
END-INFO-DIR-ENTRY

   This file documents the Libtool library support script.

   Copyright (C) 1996 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: libtool.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Shared library support for GNU
******************************

   This file documents GNU libtool, a script that allows package
developers to provide generic shared library support.  This edition
documents version 0.6a.

* Menu:

* Introduction::         What the heck is libtool?
* User Interface::       How libtool makes users lives easier.
* Programmer Interface::  Adding libtool support to your own packages.
* Modifying Libtool::    How to enhance libtool.

* Index::                Index of concepts, variables, and programs.

 -- The Detailed Node Listing --

Introduction

* Motivation::           Why does GNU need a libtool?
* Issues::               The problems that need to be addressed.
* Other Implementations::  How other people have solved these issues.
* Postmortem::           Learning from past difficulties.

Other Implementations

* Cygnus Software::      Some packages that Cygnus Support maintains.
* Glibc::                The GNU C library.
* LessTif::              A GNU Motif clone.
* Perl 5::               Larry Wall's scripting language.
* Tcl::                  The Tool Command Language.

User Interface

* Using Libtool::        How to build a libtool-supported package.
* OBJTYPES::             Telling libtool what libraries to build.
* Conflicts in OBJTYPES::  How libtool resolves inconsistencies.
* Not Using Libtool::    Making libtool leave you alone.

Programmer Interface

* libtool::              Programming with libtool in standalone mode.
* libtoolize Invocation::  Invoking the `libtoolize' program.
* Autoconf::             Programming with libtool and GNU Autoconf.
* Automake::             Fun stuff: GNU Automake supports libtool.
* Versioning::           Binary compatibility (or incompatibility).
* LIBINFO::              The libinfo configuration file.
* The libinfo Script::   How libtool gets its work done.
* Versioning Example::   Using `LIBINFO' for fun and profit.
* Library Tips::         Tips for writing good libraries.

The libtool script

* Create LIBINFO::       Creating a libinfo configuration file.
* Configuring::          Creating a libtool configuration file.
* Compiling::            Compiling library and program objects.
* Archiving::            Creating the generic library.
* Linking Against Pseudo-Libraries::
* Install Libraries::    Installing libraries built by libtool.
* Linking::              Linking programs against the new library.
* Hold Your Breath::     Watch out!  We might have a working program.
* Uninstall Libraries::  Removing installed libraries.
* Cleaning Up::          Deleting unnecessary temporary files.

Autoconf Support

* configure.in::         Changes to your configure.in.
* Makefile rules::       Getting make to use libtool.

Modifying Libtool

* Enhancements::         How to contribute to libtool's success.
* Porting Libtool::      How to port libtool to new systems.
* Version Schemes::      Shared library versioning implementations.
* Full Support::         Complete host descriptions.
* Partial Support::      Partial host descriptions.
* Libtool Structure::    Libtool's internal structure.


File: libtool.info,  Node: Introduction,  Next: User Interface,  Prev: Top,  Up: Top

Introduction
************

   In the past, if a source code package developer wanted to take
advantage of the power of shared libraries, he needed to write custom
support code for each platform his package ran on.  He also had to
design a configuration interface so that the user could choose what
sort of libraries were built.

   GNU libtool simplifies the developer's job by encapsulating both the
platform-specific dependencies, and the user interface, in a single
script.  GNU libtool is designed so that the complete functionality of
each host type is available via a generic interface, but nasty quirks
are hidden from the programmer.

   GNU libtool's consistent interface is reassuring... users don't need
to read obscure documentation in order to have their favorite source
package build profiled or shared (or profiled shared) libraries.  They
just run your package `configure' script (or equivalent), and libtool
does all the dirty work.

   There are several examples throughout this document.  All assume the
same environment: we want to build a library, `libfoo', in a generic
way.

   `libfoo' could be a shared library, a static library, or both...
whatever is available on the host system, as long as libtool has been
ported to it.

   This chapter explains the original design philosophy of libtool.
Feel free to skip to the next chapter, unless you are interested in
history, or want to write code to extend libtool in a consistent way.

* Menu:

* Motivation::           Why does GNU need a libtool?
* Issues::               The problems that need to be addressed.
* Other Implementations::  How other people have solved these issues.
* Postmortem::           Learning from past difficulties.


File: libtool.info,  Node: Motivation,  Next: Issues,  Prev: Introduction,  Up: Introduction

Motivation for Writing Libtool
==============================

   Since early 1995, several different GNU developers have recognized
the importance of having shared library support for their packages.  The
primary motivation for such a change is to encourage modularity and
reuse of code (both conceptually and physically) in GNU programs.

   Such a demand means that the way libraries are built in GNU packages
needs to be general, to allow for any library type the user might want.
The problem is compounded by the absence of a standard procedure for
creating shared libraries on different platforms.

   The following sections outline the major issues facing shared library
support in GNU, how some developers have overcome these issues, and how
I propose that shared library support should be standardized with
libtool.

   The following specifications were used in developing and evaluating
this system:

  1. The system must be as elegant as possible.

  2. The system must be fully integrated with the GNU Autoconf and
     Automake utilities, so that it will be easy for GNU maintainers to
     use.  However, the system must not require these tools, so that it
     can be used by non-GNU packages.

  3. Portablility to other (non-GNU) architectures and tools is
     desirable.


File: libtool.info,  Node: Issues,  Next: Other Implementations,  Prev: Motivation,  Up: Introduction

Implementation Issues
=====================

   The following issues need to be addressed in any reusable shared
library system, specifically libtool:

  1. The user should be able to control what sort of libraries are
     built.

  2. It can be tricky to run dynamically linked programs whose
     libraries have not yet been installed.  LD_LIBRARY_PATH must be
     set properly (if it is supported), or the program fails.

  3. The system must operate consistently even on hosts which don't
     support shared libraries.

  4. The commands required to build shared libraries may differ wildly
     from host to host.  These need to be guessed and tested at
     configure time in a consistent way.

  5. Some operating systems do not support shared object version
     numbers, and it is not obvious with which suffix a shared object
     should be installed.  This makes it difficult for Makefile rules,
     since they generally assume that filenames are the same from host
     to host.

  6. Programmers need to be aware of what assumptions they are allowed
     to make.  Library names will need to be carefully chosen (to avoid
     name clashes), binary compatibility needs to be accounted for,

  7. The system needs a simple library version number abstraction, so
     that shared libraries can be upgraded in place.  The programmer
     should be informed how to design the interfaces to the library to
     maximize binary compatibility.

  8. The install Makefile target should warn the user to set
     LD_LIBRARY_PATH (or equivalent) or run `ldconfig', if required.


File: libtool.info,  Node: Other Implementations,  Next: Postmortem,  Prev: Issues,  Up: Introduction

Other Implementations
=====================

   I know of several different implementations of building shared
libraries as part of a freeware package.  Please tell me if you know of
any others.

   I have made brief notes on the features of each of these packages,
for comparison purposes.

* Menu:

* Cygnus Software::      Some packages that Cygnus Support maintains.
* Glibc::                The GNU C library.
* LessTif::              A GNU Motif clone.
* Perl 5::               Larry Wall's scripting language.
* Tcl::                  The Tool Command Language.


File: libtool.info,  Node: Cygnus Software,  Next: Glibc,  Prev: Other Implementations,  Up: Other Implementations

Cygnus Support Packages
-----------------------

   Some recent Cygnus packages use shared libraries.  I happened to
examine the binutils environment.

   <URL:ftp://prep.ai.mit.edu/pub/gnu/binutils-2.7.tar.gz>

   * There are no specific configure flags that the user should set.
     The canonical host name is guessed, and used to determine which
     Makefile fragments are included in the Makefile.

   * A host-specific Makefile fragment may define the variable PICFLAG.
     If so, then shared objects are generated as a side effect of
     building the static library.  (Static libraries are always built.
     Shared libraries are built if PICFLAG is defined.)

   * PIC ("Position-Independent Code", used in shared libraries) objects
     are put in the `PIC' subdirectory of the build directory.  This
     allows for simpler directory listings, and avoids object file name
     clashes.

   The Cygnus environment seems the simplest - probably because I only
saw the implementation of the compilation phase.


File: libtool.info,  Node: Glibc,  Next: LessTif,  Prev: Cygnus Software,  Up: Other Implementations

The GNU C Library
-----------------

   Glibc is the GNU implementation of a portable C library.  I examined
a recent alpha snapshot.

   * Configure accepts any combination of several library options:
     `--enable-shared', `--enable-profile' for profiled libraries, and
     `--enable-omitfp' for optimized, undebuggable libraries.

   * Glibc relies heavily on GNU make.  Porting the environment
     directly to any other make program would be nearly impossible.

   * Only GCC with GNU ld is supported for building shared libraries.
     In order to build with another linker, the user must edit a
     configuration file.

   * The object files have suffixes according to their type: `*.o' for
     the standard objects, `*.so' for PIC, `*.po' for profiled code,
     and `*.go' for debuggable objects.

   * There are separate Makefile rules for each object type and library
     type.

   Glibc has the nicest build environment, but it also has an unfair
advantage: GNU make.


File: libtool.info,  Node: LessTif,  Next: Perl 5,  Prev: Glibc,  Up: Other Implementations

LessTif
-------

   LessTif is a GPLed, backward-compatible replacement for the Motif X
Windows graphics library:

   <URL:ftp://ftp.hungry.com/pub/hungry/lesstif/>

   * The configure script accepts one or both of `--with-shared' and
     `--with-static' flags.  This should actually be `--enable-shared'
     or `--enable-static', according to Autoconf documentation.

   * For shared libraries, the user must specify whether he is using GCC
     with `--with-gcc', or GNU make with `--with-gmake'.

   * The canonical host name, whether GNU make is used, and whether GCC
     is used determines the following outputs:

    PICFLAGS
          Flags that make the compiler generate PIC code, such as
          `-fPIC' for GCC.

    SHARED_MAKE
          A Makefile fragment that contains rules for building shared
          libraries, installation rules, and transformations of the
          library name.

    TEST_DEPEND_XM
    TEST_DEPEND_MRM
    ...
          Substitutions that exist because there is no guaranteed name
          under which a shared library may be found.

    OBJS_PAT_SUBST
    SHOBS_PAT_SUBST
    SHARED_RULE1
    SHARED_RULE2
    ...
          These are ugly variables that allow GNU or BSD-specific
          Makefile hacks.

   * Shared library version numbers are supported, which adds
     complexity.

   * Because of the SHARED_MAKE mechanism, only one shared library may
     be built per Makefile.

   * The library Makefiles create a shared subdirectory for the PIC
     objects, and have separate rules to generate the `*.o' and
     `shared/*.o' files.

   * There is no provision to help the dynamic linker find shared
     libraries before they have been installed, so the tests fail
     unless the user knows what to fix.

   LessTif's shared library support is the most complex configuration.
It would not be easily adapted to even slightly more complex directory
structures.


File: libtool.info,  Node: Perl 5,  Next: Tcl,  Prev: LessTif,  Up: Other Implementations

Perl 5
------

   Perl 5 is Larry Wall's interpreted scripting language.

   <URL:ftp://prep.ai.mit.edu/pub/gnu/perl-5.001.tar.gz>

   * The Configure shell script runs several tests based on the
     existence of files and some uname switches.  These tests would not
     all transfer well to an autoconf environment.

   * Makefile support consists of command substitutions into the rules
     needed to build libraries.

   * No provision is made for simultaneous building of shared and static
     libraries.


File: libtool.info,  Node: Tcl,  Prev: Perl 5,  Up: Other Implementations

Tcl 7.5
-------

   Tcl is John Ousterhout's popular Tool Command Language:

   <URL:ftp://ftp.smli.com/pub/tcl/tcl7.5b1.tar.gz>

   * The configure script accepts an `--enable-shared' switch, but this
     disables static libraries.  The implementation is designed only to
     build one type of library per configuration.

   * Configure sets the following symbols (based on canonical host
     name):

    SHLIB_CFLAGS
          CC flags used to generate PIC files.

    SHLIB_LD
          Command name for linking object files into a shared library.

    SHLIB_SUFFIX
          Suffix to use for the name of the shared library.  Empty
          string indicates no shared library support for this host.

    LD_SEARCH_FLAGS
          Flags to pass to ld, such as "-R /usr/local/tcl/lib", that
          tell the run-time dynamic linker where to look for shared
          libraries such as libtcl.so.  Depends on the variable
          LIB_INSTALL_DIR in the Makefile.

   * The test target sets LD_LIBRARY_PATH so that the dynamic linker
     will find shared libraries before they have been installed, and
     the test programs will run.

   Forcing the user to chose only one of shared or static libraries
reduces Tcl's build complexity.


File: libtool.info,  Node: Postmortem,  Prev: Other Implementations,  Up: Introduction

A Postmortem Analysis of Other Implementations
==============================================

   In all fairness, each of these implementations do the job that they
were intended to do, for a number of different host systems.  However,
none of these systems seem to function well as a generalized, reuseable
component.

   Each is too complex for me to use without understanding exactly what
the implementation does.  I think this problem exists because each
system has attempted to handle a programming problem (the process of
building shared libraries) with an inadequate programming language (the
Makefile, and configuration substitutions).  That is why only the GNU C
library seems to be so much simpler than the others: the GNU Makefile is
a more advanced programming language with flow control.

   For this reason, I have designed libtool as an independent shell
script.  It isolates the problems that plague Makefile writers by
offering a solution to the problem of building libraries on different
platforms with a consistent interface.

   I hope that libtool will be useful to and used by the GNU community.


File: libtool.info,  Node: User Interface,  Next: Programmer Interface,  Prev: Introduction,  Up: Top

User Interface
**************

   FIXME I haven't updated the rest of these nodes.

   Okay, so you just downloaded a package (probably a GNU package) that
appears to have a `libtool' script in its top directory.  Now what?
This chapter explains how to get a libtool-supported package to build
and install the kinds of libraries you want.

* Menu:

* Using Libtool::        How to build a libtool-supported package.
* OBJTYPES::             Telling libtool what libraries to build.
* Conflicts in OBJTYPES::  How libtool resolves inconsistencies.
* Not Using Libtool::    Making libtool leave you alone.


File: libtool.info,  Node: Using Libtool,  Next: OBJTYPES,  Prev: User Interface,  Up: User Interface

Using Libtool
=============

   The main way to influence libtool's behaviour is by setting the
OBJTYPES environment variable.  This variable controls what sort of
libraries are built.

   A properly conforming package will allow your OBJTYPES settings to
directly control libtool's behaviour.  Set the OBJTYPES environment
variable, then follow the installation instructions (in the `INSTALL'
file, for GNU packages).  If the package has been ported to your
system, everything should be fine.

   GNU libtool's basic behaviour depends upon a few things:

   * The type of the host system.  The "host" is defined as the system
     on which the built package is designed to run.

   * The toolset you are using.  Normally, this is determined by
     environment variables like CFLAGS, CC, LD, RANLIB at configuration
     time.

   * The setting of the OBJTYPES environment variable during
     configuration.

   The CFLAGS, CC, LD, RANLIB, and whatever other configuration
environment variables have the same meaning to libtool as they do to
GNU configure scripts.  *Note Utilities in Makefiles:
(standards)Utilities in Makefiles, for details.

   Cross compiling a libtool-supported GNU package is just as simple as
any other GNU package (maybe even simpler).  libtool is even able to do
nifty things like cross-compile shared libraries.

   Generally, you'll only be interested in the OBJTYPES environment
variable, so the next section describes how to set it, and what it does.


File: libtool.info,  Node: OBJTYPES,  Next: Conflicts in OBJTYPES,  Prev: Using Libtool,  Up: User Interface

The OBJTYPES Variable
=====================


File: libtool.info,  Node: Conflicts in OBJTYPES,  Next: Not Using Libtool,  Prev: OBJTYPES,  Up: User Interface

Conflicts in OBJTYPES
=====================

   You can take advantage of libtool's OBJTYPES conflict resolution
rules to get the libraries and programs you want, regardless of host
system deficiencies.

   GNU libtool modifies your OBJTYPES as follows:

  1. Whenever an object code is not supported, libtool will try to
     demote it to a similar one if it can: from `O' to `o'; from `t' to
     `P'; and from `P' to `p'.

  2. If you specify object types that are not supported at all by your
     host system, then libtool will issue a warning and automatically
     skip those object types.

  3. If you specify supported object types that conflict, such as `Op'
     and `P' (both result in `libfoo_p.a'), then the first type is
     taken, and the others are ignored.

   Consider the following situation:
   * Graphic profiled objects are not supported by all compilers (and
     if the censorship advocates have their way, we may not be able to
     get any graphic profiles at all).  You would like the most graphic
     profiling you can get.

   * You want programs to be linked against hyper-optimized shared
     profiled libraries, if they are supported, otherwise
     hyper-optimized shared libraries.

   * If shared objects aren't supported, then you'll accept similar
     static objects.

   * Oh, and you'd like to build a static library, too.

   The following setting of OBJTYPES will accomplish what you want:

     bash$ export OBJTYPES=OPs:Os:OP:standard

   GNU libtool's demotion and conflict resolution rules will select the
object types that most closely match your needs.

   You may also specify any non-conflicting compiler options with your
CFLAGS environment variable, such as `-g', so that you don't need to
reconfigure libtool to build debuggable libraries.

   Scary, isn't it?


File: libtool.info,  Node: Not Using Libtool,  Prev: Conflicts in OBJTYPES,  Up: User Interface

Not Using Libtool
=================

   GNU libtool is designed to be as unobtrusive as possible.  If you
don't want to use it, unset the OBJTYPES environment variable (or set
it to the empty string):

     bash$ export OBJTYPES=

   Then do a `make distclean', and build the package as normal.  Even
though the libtool script is executed, it will not do anything other
than build standard (determined only by CFLAGS) libraries and objects.

   If libtool seems to be building non-standard library types, even when
OBJTYPES is empty or unset, then complain to the package maintainer -
it is a bug in the package, not libtool.


File: libtool.info,  Node: Programmer Interface,  Next: Modifying Libtool,  Prev: User Interface,  Up: Top

Programmer Interface
********************

   GNU libtool is designed to be a ready-to-run shell script, useful for
any program developer.  It requires three other shell scripts for full
operation:

`config.guess'
`config.sub'
     GNU scripts used to determine your canonical host system name, so
     that system-specific configuration is possible.

`libinfo'
     A script that manages `LIBINFO' files, used by libtool to create
     pseudo-libraries.

   This chapter explains how to use libtool with your own programs.

   Examples from this chapter are taken from the `tests' subdirectory
of the libtool distribution.

* Menu:

* libtool::              Programming with libtool in standalone mode.
* libtoolize Invocation::  Invoking the `libtoolize' program.
* Autoconf::             Programming with libtool and GNU Autoconf.
* Automake::             Fun stuff: GNU Automake supports libtool.
* Versioning::           Binary compatibility (or incompatibility).
* LIBINFO::              The libinfo configuration file.
* The libinfo Script::   How libtool gets its work done.
* Versioning Example::   Using `LIBINFO' for fun and profit.
* Library Tips::         Tips for writing good libraries.


File: libtool.info,  Node: libtool,  Next: libtoolize Invocation,  Prev: Programmer Interface,  Up: Programmer Interface

The libtool script
==================

   This section documents the programmer's interface to libtool,
provides a few examples of how to use it, and explains how it works.
You'll want to read this section if you use libtool from the command
line, or if you aren't using Automake.

   Suppose we wish to build a program, `hello' from the object file
`main.o', that is linked against a library, `libfoo.a'.  `libfoo.a' is
a library made of `foo.o' and `hello.o'.

   We will work through the libtool build procedure in the rest of this
section by presenting the non-libtool build commands followed by the
libtool commands.

   If you wish to try out any of the example commands, libtool has a
`-n' or `--dry-run' command line flag that prevents it from modifying
any files, so that you can see what it would do.

   You may also type `libtool --help' for more information on command
line options.

* Menu:

* Create LIBINFO::       Creating a libinfo configuration file.
* Configuring::          Creating a libtool configuration file.
* Compiling::            Compiling library and program objects.
* Archiving::            Creating the generic library.
* Linking Against Pseudo-Libraries::
* Install Libraries::    Installing libraries built by libtool.
* Linking::              Linking programs against the new library.
* Hold Your Breath::     Watch out!  We might have a working program.
* Uninstall Libraries::  Removing installed libraries.
* Cleaning Up::          Deleting unnecessary temporary files.


File: libtool.info,  Node: Create LIBINFO,  Next: Configuring,  Prev: libtool,  Up: libtool

Creating a `LIBINFO' File
-------------------------

   Libtool refuses to operate on libraries that it does not know about.
The main motivation for this behavior is so that you won't use libtool
without reading the documentation, and seeing how versioning is
implemented.

   Library versioning, and being conscious of interfaces, is an
important part of writing shared libraries.  For this example, however,
we will keep things simple by doing the minimum of work required by
libtool.

   The file `LIBINFO' in the `tests' directory of the libtool
distribution has the following contents (*note LIBINFO::., for more
details):

     # This file is read by libinfo.
     #
     # Lines have the following format:
     # LIBNAME  CURRENT-INTERFACE-NUMBER AGE REVISION
     #
     # See (libtool)Versioning. for more information.
     
     # The ubiquitous libfoo.a
     foo 2 1 5

   This tells libtool that `libfoo.la' is a valid pseudo-archive.


File: libtool.info,  Node: Configuring,  Next: Compiling,  Prev: Create LIBINFO,  Up: libtool

Configuring Libtool
-------------------

   GNU libtool itself is a generic shell script.  In order to speed up
its execution and minimize the number of inputs at each step, there is
an explicit configuration mode.  This mode creates a system-specific
`libtool.config' file that libtool requires for normal operation.

   The user first sets all the environment variables that may influence
libtool, then runs `libtool configure'.  If you type `libtool --help
configure', you will be presented with a brief description of what this
mode does.  You may get help for any mode, MODE, by typing `libtool
--help MODE'.

   Configuration mode requires a `--libdir' option in order to tell
libtool where libraries will eventually be installed.

   The `--confdir' option may be used to specify the directory that
`libtool.config' should be generated in.  By default, `libtool.config'
is created in the current working directory.

   The `--quiet' and `--silent' command line options prevent libtool
from printing all the informational configuration messages.

   To build a library without using libtool, there is no configuration
step.

   Here is the libtool configuration step for our example, running on my
home computer (a FreeBSD machine named `walter').  Configuration is
quite simple if we don't want to build any special object types:

     walter$ libtool configure
     checking host system type... i386-unknown-freebsd2.1.0
     checking for gcc... gcc
     checking for ranlib... ranlib
     creating libtool.config
     walter$

   In this case, no special compiler flags are added when you use
libtool.

   However, for this example, we want to have a fuller selection of
OBJTYPES:

     walter$ export OBJTYPES=Ots:Os:t:standard
     walter$ libtool configure
     checking host system type... i386-unknown-freebsd2.1.0
     checking for gcc... gcc
     checking whether we are using GNU C... yes
     checking if ld is GNU ld... no
     checking for ranlib... ranlib
     tcov flags unavailable for gcc... demoting "Ots" to "OPs"
     inconsistent gcc flags... skipping objtype "OPs"
     tcov flags unavailable for gcc... demoting "t" to "P"
     creating libtool.config
     walter$

   You may also configure libtool for cross-compilation: make sure that
the cross-build tools appear first in your path (or explicitly set the
CC, LD, and RANLIB environment variables):

     walter$ export PATH=/local/i386-gnu/bin:$PATH
     walter$ which gcc
     /local/i386-gnu/bin/gcc
     walter$

   During configuration, use the `--host' flag (or specify an argument
to configure) to give the canonical name of the host (destination)
system:

     walter$ libtool configure i386-gnu
     checking host system type... i386-unknown-gnu
     checking for gcc... gcc
     checking whether we are using GNU C... yes
     checking if ld is GNU ld... yes
     checking if GNU ld supports shared libraries... yes
     checking for ld --no-whole-archive... yes
     checking for ranlib... ranlib
     tcov flags unavailable for gcc... demoting "Ots" to "OPs"
     inconsistent gcc flags... skipping objtype "OPs"
     tcov flags unavailable for gcc... demoting "t" to "P"
     creating libtool.config
     walter$

   There are additional flags accepted by `libtool configure', such as
`--no-validate-host', which prevents some checking of the host type,
and `--with-gcc', which declares that CC is gcc.  These flags are not
generally useful... they only exist so that the `AM_PROG_LIBTOOL'
Autoconf macro can suppress libtool's internal configuration tests.


File: libtool.info,  Node: Compiling,  Next: Archiving,  Prev: Configuring,  Up: libtool

Compiling Library Objects
-------------------------

   After you have configured libtool, you may use it to compile library
objects.  Do not use libtool to compile program objects: use your
favorite C compiler (preferably the one that libtool detected) and
compiler flags.

   So, the compilation step for our simple example might begin with
compiling the program object:

     walter$ gcc -I. -g -O -DFOO -c main.c

   Libtool uses the `.lo' extension for library objects that it
compiles, so we may compile the standard `.o' objects without fear of
conflicting with libtool:

     walter$ gcc -I. -g -O -DFOO -c foo.c
     walter$ gcc -I. -g -O -DFOO -c hello.c

   The `libtool compile' command is used to compile library objects.
Pass it the command you would use to compile a program object file,
including any flags you want.  Libtool will automatically strip out any
compiler flags that conflict with your object type selection.

     walter$ libtool compile gcc -I. -g -O -DFOO -c foo.c
     mkdir SHARED
     mkdir PROF
     mkdir STATIC
     gcc -I. -g -DFOO -c -O99 -fPIC -DPIC foo.c -o SHARED/foo.o
     gcc -I. -g -O -DFOO -c -pg foo.c -o PROF/foo.o
     gcc -I. -g -O -DFOO -c foo.c -o STATIC/foo.o
     echo timestamp > foo.lo
     walter$ libtool compile gcc -I. -g -O -DFOO -c hello.c
     gcc -I. -g -DFOO -c -O99 -fPIC -DPIC hello.c -o SHARED/hello.o
     gcc -I. -g -O -DFOO -c -pg hello.c -o PROF/hello.o
     gcc -I. -g -O -DFOO -c hello.c -o STATIC/hello.o
     echo timestamp > hello.lo
     walter$

   Here, libtool stripped the `-O' option while compiling the
hyper-optimized, shared object, since it conflicted with the `-O99'
hyper-optimize flag.

   Note that libtool created a `SHARED' directory, a `PROF' directory,
and a `STATIC' directory.  Libtool may create any subset of the
following directories: `PROF', `PROF_SHARED', `SHARED', and `STATIC'.
These temporary directories are used to accumulate other object and
library types without polluting the current directory.


File: libtool.info,  Node: Archiving,  Next: Linking Against Pseudo-Libraries,  Prev: Compiling,  Up: libtool

Creating a Library Archive
--------------------------

   The `libtool archive' mode is used to create libraries.  It will
only work with objects that have been compiled with `libtool compile'
(that have a `.lo' extension).

   Unless you use the `--accumulate' flag, libtool will automatically
run `libtool ranlib' on the completed archive, so that it is ready to
be installed.  Using `--accumulate' is sometimes useful for huge
libraries (such as the GNU C library)... on some systems, it allows you
to run `libtool archive' several times before finishing the library,
but you will have to run `libtool ranlib' explicitly.

   You use `libtool archive' by passing it the command you would use to
create a library (usually `ar'), with any options.  Don't forget that
libtool objects must end in `.lo' and libtool archives must be named
`libNAME.la', where NAME appears in a `LIBINFO' file.

   Again, we will first create the standard archive:

     walter$ ar cruv libfoo.a foo.o hello.o
     a - foo.o
     a - hello.o
     walter$

   Next, using libtool:

     walter$ libtool archive ar cruv libfoo.la foo.lo hello.lo
     rm -f ./SHARED/libfoo_pic.a
     ar cruv ./SHARED/libfoo_pic.a ./SHARED/foo.o ./SHARED/hello.o
     a - ./SHARED/foo.o
     a - ./SHARED/hello.o
     rm -f ./PROF/libfoo_p.a
     ar cruv ./PROF/libfoo_p.a ./PROF/foo.o ./PROF/hello.o
     a - ./PROF/foo.o
     a - ./PROF/hello.o
     rm -f ./STATIC/libfoo.a
     ar cruv ./STATIC/libfoo.a ./STATIC/foo.o ./STATIC/hello.o
     a - ./STATIC/foo.o
     a - ./STATIC/hello.o
     echo "./LIBINFO" > ./STATIC/LIBINFO
     ranlib ./SHARED/libfoo_pic.a
     rm -f ./SHARED/libfoo.so.2.5 ./SHARED/libfoo.so
     ld -Bshareable -Bforcearchive -o ./SHARED/libfoo.so.2.5 ./SHARED/libfoo_pic.a
     ln -s libfoo.so.2.5 ./SHARED/libfoo.so
     ranlib ./PROF/libfoo_p.a
     ranlib ./STATIC/libfoo.a
     echo "./LIBINFO" > libfoo.la
     walter$

   This is where libtool begins to shine.  The `libtool archive'
command saves a lot of typing, and saves you from needing to know a lot
of system-specific details, as you can see.

   Plus, you don't even have to remember to run `ranlib'.  Oops...
that reminds me:

     walter$ ranlib libfoo.a

   *Note LIBINFO::, for a description of the library information file.
On FreeBSD, library versioning is implemented by a name suffix, hence
the mysterious `2.5' in `libfoo.so.2.5'.


File: libtool.info,  Node: Linking Against Pseudo-Libraries,  Next: Install Libraries,  Prev: Archiving,  Up: libtool

Linking Against Pseudo-Libraries
--------------------------------

   There is some good news and some bad news.

   First, the good news: it is easy to link your programs against
pseudo-libraries once they have been installed.  While linking, just
pass the appropriate `-L`$(libdir)' -l`$(BASENAME)'' flags to your
compiler.

   The bad news is that it is very difficult to link your programs
against shared libraries that haven't been installed yet.  Earlier
versions of libtool provided additional modes (`libtool link' and
`libtool install-progs') to deal with this.

   These modes were removed because the linkers in AIX 4 and HP-UX 10
*cannot* support them.(1)

   If your package doesn't link programs against libtool-built
libraries, then you are not affected.  If it does, you need some way of
getting the libraries installed before you link against them.

   Separate the libtool-controlled libraries from the rest of your
distribution.  Tell the user to build and install them first, then to go
back and install the rest of your package.

   Be sure not to reference any temporary libtool directories when you
are linking your programs.  If you do, the resulting binaries may break
in odd ways after those temporary directories are deleted.

   Please write Gord Matzigkeit <gord@gnu.ai.mit.edu> if you have a
better idea of how libtool-controlled libraries could be linked against
programs.

   ---------- Footnotes ----------

   (1)  Flame your local IBM and Hewlett Packard distributors for me,
if you please.  Tell them that they need to provide a mechanism to
allow the user to link against a shared library without hardcoding the
library's path in the resulting binary.  Most other linkers don't
hardcode libraries that were found using LD_LIBRARY_PATH.


File: libtool.info,  Node: Install Libraries,  Next: Linking,  Prev: Linking Against Pseudo-Libraries,  Up: libtool

Installing Libraries Built with Libtool
---------------------------------------

   Installing libtool-built libraries would be very difficult for
Makefiles to handle, since the actual names of the files may vary from
system to system.

   To get around this difficulty, libtool provides a `libtool
install-libs' mode, that should be run as superuser.  First, you can
set the INSTALL_DATA environment variable to the program you would use
to install libraries (this defaults to `cp').  This program should
expect two arguments, the first is the source file, the second is the
destination.

   Here is an example of using `libtool install-libs':

     walter$ su
     Warning: imported path contains relative components
     walter# INSTALL_DATA="install -c -m 644" libtool install-libs
       libfoo.la /some/lib
     rm -f /some/lib/libfoo.so.2.5 /some/lib/libfoo.so
     install -c -m 644 ./SHARED/libfoo.so.2.5 /some/lib/libfoo.so.2.5
     ln -s libfoo.so.2.5 /some/lib/libfoo.so
     install -c -m 644 ./SHARED/libfoo_pic.a /some/lib/libfoo_pic.a
     ranlib /some/lib/libfoo_pic.a
     install -c -m 644 ./PROF/libfoo_p.a /some/lib/libfoo_p.a
     ranlib /some/lib/libfoo_p.a
     install -c -m 644 ./STATIC/libfoo.a /some/lib/libfoo.a
     ranlib /some/lib/libfoo.a
     ldconfig -m /some/lib
     walter#

   Note that `libtool install-libs' also handles any post-installation
commands (such as `ldconfig'), which may need to be run in order to
properly install libraries.  So, the libraries are now ready for
linking.


File: libtool.info,  Node: Linking,  Next: Hold Your Breath,  Prev: Install Libraries,  Up: libtool

Linking Programs Against Libraries
----------------------------------

   Next, we want to link against the installed libraries to produce a
working program.

   Let's create the standard program by linking it against the static
library:

     walter$ gcc -o hello main.o libfoo.a

   Libtool is not needed to link the program, just let the compiler do
the work:

     walter$ gcc -o hell main.o -L/some/lib -lfoo


File: libtool.info,  Node: Hold Your Breath,  Next: Uninstall Libraries,  Prev: Linking,  Up: libtool

Hold Your Breath
----------------

   Here is the moment of truth... seeing how the program binaries and
libraries look:

   First, the standard programs and libraries:

     walter$ ls -l hello libfoo.a
     -rwxrwxr-x  1 gord  gord  15242 Jun 27 21:03 hello
     -rw-rw-r--  1 gord  gord   4176 Jun 27 20:59 libfoo.a
     walter$

   Now, the ones that libtool made and installed for us:

     walter$ ls -l hell /some/lib/libfoo*
     -rwxrwxr-x  1 gord  gord  11472 Jun 27 21:09 hell
     -rw-rw-r--  1 gord  gord   4264 Jun 27 20:57 /some/lib/libfoo_p.a
     lrwxrwxr-x  1 gord  gord     13 Jun 27 20:57 /some/lib/libfoo.so -> libfoo.so.2.5
     -rwxrwxr-x  1 gord  gord  12094 Jun 27 20:57 /some/lib/libfoo.so.2.5
     -rw-rw-r--  1 gord  gord   4252 Jun 27 20:57 /some/lib/libfoo_pic.a
     -rw-rw-r--  1 gord  gord   4176 Jun 27 20:57 /some/lib/libfoo.a
     walter$

   So you see, libtool generated a static library `STATIC/libfoo.a'
that was exactly the same size as the one we made (4176 bytes), but
`hell.bad', since it was linked against a shared `libfoo', was 3770
bytes smaller than `hello'.  Wow!

   Let's try them out:

     walter$ ./hello
     Welcome to GNU Hell!
     ** This is not GNU Hello.  There is no built-in mail reader. **
     walter$ ./hell
     Welcome to GNU Hell!
     ** This is not GNU Hello.  There is no built-in mail reader. **
     walter$


File: libtool.info,  Node: Uninstall Libraries,  Next: Cleaning Up,  Prev: Hold Your Breath,  Up: libtool

Uninstalling Libraries Built with Libtool
-----------------------------------------

   You may want to uninstall a library that you installed with `libtool
install-libs'.  This can be a tricky procedure if you want to revert to
previously-installed shared libraries, since you may be forced to rerun
`ldconfig'.

   So, libtool provides a `libtool uninstall-libs' mode that undoes
everything that `libtool install-libs' did.  Here is an example:

     walter$ libtool uninstall-libs libfoo.la /some/lib
     rm -f /some/lib/libfoo.so.2.5 /some/lib/libfoo.so
     rm -f /some/lib/libfoo_pic.a
     rm -f /some/lib/libfoo_p.a
     rm -f /some/lib/libfoo.a
     ldconfig -m /some/lib
     ldconfig: not found
     libtool: please become the superuser and run:
       ldconfig -m /some/lib
     walter$ su
     Warning: imported path contains relative components
     walter# ldconfig -m /some/lib
     walter#

   *BEWARE*: if you uninstall shared libraries, you will break any
programs that depend on them.  Be careful, and only use `libtool
uninstall-libs'

   For safety, `libtool uninstall-libs' won't work for libraries for
which there is no `LIBINFO' file:

     walter# libtool uninstall-libs libc.la /usr/lib
     libinfo: error: no information about `c' in ./LIBINFO
     walter#


File: libtool.info,  Node: Cleaning Up,  Prev: Uninstall Libraries,  Up: libtool

Cleaning Up Temporary Files
---------------------------

   After the libraries are built and installed, there may be several
leftover files that we can delete:

   * The normal leftovers: `hello', `libfoo.a', `foo.o', `hello.o', and
     `main.o'.

   * The libtool leftovers: `hell', `libfoo.la', `foo.lo', and
     `hello.lo'.

   * Temporary object and library directories: `PROF', `PROF_SHARED',
     `SHARED', and `STATIC'.

   * The libtool configuration file, `libtool.config'

   Congratulations!  You've just built and installed your first generic
program and library using libtool.  It should seem so easy that you're
ready to dive in and write Makefile rules to use libtool with your own
programs.  Just wait, though... the next sections give details on how
easy it is to add libtool support to your own packages.


File: libtool.info,  Node: libtoolize Invocation,  Next: Autoconf,  Prev: libtool,  Up: Programmer Interface

Invoking the `libtoolize' Program
=================================

   Some files are consistently and identically needed in every package
that uses libtool.  As a matter of convenience, the `libtoolize' program
puts all these files right in your package, in the same manner as the
`gettextize' program included with GNU Gettext (*note The Gettext
Manual: (gettext.info)gettextize Invocation.).  This program has the
following synopsis:

     libtoolize [OPTION]... [ DIRECTORY ]

and accepts the following options:

`-c'
`--copy'
     Copy files instead of creating symbolic links.

`-f'
`--force'
     Force replacement of files which already exist.

`-h'
`--help'
     Display this help and exit.

`--version'
     Output version information and exit.

   If DIRECTORY is given, this is the top level directory of a package
to prepare for using libtool.  If not given, it is assumed that the
current directory is the top level directory of such a package.

   The program `libtoolize' provides the following files.  However, no
existing file will be replaced unless the option `--force' (`-f') is
specified.

  1. If your package uses Autoconf, then the `ABOUT-LIBTOOL' file is
     copied in the main directory of your package, the one being at the
     top level.  This file gives the main indications about how to
     install and use the extended library features of your package.
     You might elect to use a more recent copy of this `ABOUT-LIBTOOL'
     file than the one provided through `libtoolize', if you have one
     handy.

     If your package doesn't use Autoconf, then the `ABOUT-LIBTOOL'
     file is not copied, rather you should refer to it and incorporate
     any relevant information into your own `README' file, since the
     configure interface to libtool won't exist.

  2. The `libtool' script is copied in the main directory of your
     package.  This is the script you use in the library rules of your
     `Makefile' or `Makefile.in'.

  3. The `libinfo' helper script is copied in the main directory of your
     package.  This script is used internally by libinfo.

  4. If the `config.guess' and `config.sub' host-guessing scripts do
     not exist in the main directory of your package, they are copied
     into place.

   You must also add a call to `AM_PROG_LIBTOOL' in your
`configure.in', so that the interface described by `ABOUT-LIBTOOL' will
be implemented.  If you already call `AC_PROG_RANLIB', `libtoolize'
will offer to replace it with a call to `AM_PROG_LIBTOOL', which is a
superset of `AC_PROG_RANLIB'.

   If you don't use Automake, you will need to make several changes to
your `Makefile' or `Makefile.in' (*note Makefile rules::.).

   If your site supports symbolic links, `libtoolize' will not actually
copy the files into your package, but establish symbolic links instead.
This avoids duplicating the disk space needed in all packages.  Merely
using the `-h' option while creating the `tar' archive of your
distribution will resolve each link by an actual copy in the
distribution archive.  So, to insist, you really should use the `-h'
option with `tar' within the `dist' goal of your main `Makefile.in'.


File: libtool.info,  Node: Autoconf,  Next: Automake,  Prev: libtoolize Invocation,  Up: Programmer Interface

Autoconf Support
================

   GNU libtool has an Autoconf interface that makes it even simpler for
you to create an appropriate `libtool.config' file, and have your
`Makefile.in's call libtool.

   This section describes the Autoconf macro that is available for
libtool.  Some example Makefile rules are also given for inclusion in
your own `Makefile.in's.

* Menu:

* configure.in::         Changes to your configure.in.
* Makefile rules::       Getting make to use libtool.


File: libtool.info,  Node: configure.in,  Next: Makefile rules,  Prev: Autoconf,  Up: Autoconf

Changing `configure.in'
-----------------------

   The easiest way to add libtool support to your existing package is to
add a line that calls the `AM_PROG_LIBTOOL' macro to your package's
`configure.in' file.  You will need to distribute the `config.guess',
`config.sub', and `libtool' scripts with your package, if you aren't
already.

   The `AM_PROG_LIBTOOL' Autoconf macro calls `libtool configure',
transmitting configure variable values so that libtool doesn't need to
run as many configuration tests.

   `AM_PROG_LIBTOOL' also adds support for the `--enable-shared',
`--enable-static', and `--enable-profile' configuration flags.

   The `AM_REPLACE_FUNCS' macro is a substitute for `AC_REPLACE_FUNCS'
which defines an `LTLIBOBJS' substitution (which contains
pseudo-objects) in addition to the regular `LIBOBJS' substitution.

   If you use `AM_PROG_LIBTOOL' or `AM_REPLACE_FUNCS', then you must
include the following definition in your `aclocal.m4' file:

     ## --------------------------------------------------------- ##
     ## Configure the libtool script for this package.            ##
     ##                                                           ##
     ## Preserve the following line so that libtoolize can        ##
     ## detect when you should upgrade your aclocal.m4:           ##
     ##                                                           ##
     ## Last updated for libtool-0.7.                             ##
     ## --------------------------------------------------------- ##
     
     dnl AM_PROG_LIBTOOL
     AC_DEFUN(AM_PROG_LIBTOOL,
     [AC_REQUIRE([AC_CANONICAL_HOST])
     AC_REQUIRE([AC_PROG_CC])
     AC_REQUIRE([AC_PROG_RANLIB])
     
     # Always use our own libtool.
     LIBTOOL='$(top_objdir)/libtool'
     AC_SUBST(LIBTOOL)
     
     AC_ARG_ENABLE(shared,
     [  --enable-shared         build shared libraries [default=yes]],
     test "$enableval" = no && libtool_shared=" --disable-shared",
     libtool_shared=)
     
     AC_ARG_ENABLE(static,
     [  --enable-static         build static libraries [default=yes]],
     test "$enableval" = no && libtool_static=" --disable-static")
     
     libtool_flags="$libtool_shared$libtool_static"
     test "$silent" = yes && libtool_flags="$libtool_flags --silent"
     test "$ac_cv_prog_gcc" = yes && libtool_flags="$libtool_flags --with-gcc"
     
     # Actually configure libtool.
     # Holy mackerel, what a command line!
     CC="$CC" LD="$LD" RANLIB="$RANLIB" \
     $srcdir/ltconfig $libtool_flags --no-verify $srcdir/ltmain.sh $host \
     || AC_MSG_ERROR([libtool configure failed])
     ])
     
     dnl AM_REPLACE_FUNCS(FUNCTION-NAME...)
     AC_DEFUN(AM_REPLACE_FUNCS,
     [for ac_func in $1
     do
     AC_CHECK_FUNC($ac_func, , [LIBOBJS="$LIBOBJS ${ac_func}.o"
     LTLIBOBJS="$LTLIBOBJS ${ac_func}.lo"])
     done
     AC_SUBST(LIBOBJS)
     AC_SUBST(LTLIBOBJS)dnl
     ])


File: libtool.info,  Node: Makefile rules,  Prev: configure.in,  Up: Autoconf

Makefile Rules
--------------

   Adding libtool support to your `Makefile' or `Makefile.in' is quite
simple.

   I recommend the following convenience variables:

     # The libtool script itself.
     LIBTOOL = $(top_srcdir)/libtool
     
     COMPILE = $(CC) -c $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
     LTCOMPILE = $(LIBTOOL) compile $(COMPILE)
     LINK = $(CC) $(LDFLAGS) -o $@
     
     AR = ar
     LTARCHIVE = $(LIBTOOL) archive $(AR)
     
     LTINSTALL = INSTALL_DATA='$(INSTALL_DATA)' $(LIBTOOL) install-libs
     
     # List of all the libraries that we install permanently.
     LIBRARIES = libfoo.la
     
     foo_OBJECTS = foo.lo hello.lo
     hello_OBJECTS = main.o

   Add the following compilation rules:

     .SUFFIXES:
     .SUFFIXES: .c .o .lo
     
     # Compile standard objects.
     .c.o:
             $(COMPILE) $<
     
     # Compile library objects with libtool.
     .c.lo:
             $(LTCOMPILE) $<

   Here are rules for building a library and linking a program:

     libfoo.la: $(foo_OBJECTS)
             $(LTARCHIVE) cru libfoo.la $(foo_OBJECTS)
     
     hello: $(hello_OBJECTS) libfoo.la
             $(LINK) $(hello_OBJECTS) libfoo.la

   Add the following to your `clean' target:

     rm -f $(LIBRARIES) hello

   Add the following to your `mostlyclean' target:

     rm -f *.lo
     rm -rf PROF PROF_SHARED SHARED STATIC

   And finally, the installation target:

     # Install libraries first, or install-progs doesn't work.
     install-exec: $(LIBRARIES) hello
             $(LTINSTALL) $(LIBRARIES) $(libdir)
             INSTALL_PROGRAM='$(INSTALL_PROGRAM)' \
               $(LIBTOOL) install-progs hello $(bindir)

