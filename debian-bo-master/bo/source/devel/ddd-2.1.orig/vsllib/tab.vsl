// $Id: tab.vsl,v 1.4 1997/04/25 06:44:37 zeller Exp $
// Tables

// Copyright (C) 1993 Technische Universitaet Braunschweig, Germany.
// Written by Andreas Zeller <zeller@ips.cs.tu-bs.de>.
// 
// This file is part of the DDD Library.
// 
// The DDD Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
// 
// The DDD Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Library General Public License for more details.
// 
// You should have received a copy of the GNU Library General Public
// License along with the DDD Library -- see the file COPYING.LIB.
// If not, write to the Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// 
// DDD is the data display debugger.
// For details, see the DDD World-Wide-Web page, 
// `http://www.cs.tu-bs.de/softech/ddd/',
// or send a mail to the DDD developers at `ddd@ips.cs.tu-bs.de'.

#include <std.vsl>

// Version
tab_version() = "$RCSfile: tab.vsl,v $ $Revision: 1.4 $";

// Tabellenfunktionen

// tab([1, 2, 3], [4, 5, 6], [7, 8, 9]) ergibt
// 1 2 3
// 4 5 6
// 7 8 9

// Unterfunktionen

// Maximale Breite bzw. Hoehe einer Liste
_tab_maxhspace([...]) = hspace(valign(...));
_tab_maxvspace([...]) = vspace(halign(...));

// Pruefen, ob Liste nur leere Listen enthaelt
_tab_allempty([[]]) = true;
_tab_allempty([[] : more]) = _tab_allempty(more);
_tab_allempty([_...]) = false;

// Liste aus Koepfen aller Elemente zurueckgeben
_tab_heads([]) = [];
_tab_heads([[head : _] : more]) =
	[head : _tab_heads(more)];

// Liste aus Restlisten aller Elemente zurueckgeben
_tab_tails([]) = [];
_tab_tails([[_ : tail] : more]) =
	[tail : _tab_tails(more)];

// Liste mit Spaltenbreiten berechnen
_tab_width(...) =
	if _tab_allempty(...) 
	then []
	else [ _tab_maxhspace(_tab_heads(...)) : _tab_width(_tab_tails(...)) ] 
	fi;

// Einzelne Zeile mit angegebenen Spaltenbreiten erzeugen
_tab_line([width], [head]) =
  width | head;
_tab_line([width : twidth], [head : tail]) =
  _tab_line([width], [head]) & _tab_line(twidth, tail);

// Tabelle mit angegebener Spaltenbreite erzeugen
_tab(width, [head]) =
  _tab_line(width, head);
_tab(width, [head : tail]) =
  _tab_line(width, head)
| _tab(width, tail);


// Oeffentliche Funktionen

// Tabelle erzeugen; Spaltenbreite wird berechnet
tab(...) =
  _tab(_tab_width(...), ...);
