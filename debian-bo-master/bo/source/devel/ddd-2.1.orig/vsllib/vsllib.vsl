// $Id: vsllib.vsl,v 1.4 1997/04/25 06:44:42 zeller Exp $
// VSL-Bibliothek zur Darstellung von VSL-Baeumen

// Copyright (C) 1993 Technische Universitaet Braunschweig, Germany.
// Written by Andreas Zeller <zeller@ips.cs.tu-bs.de>.
// 
// This file is part of the DDD Library.
// 
// The DDD Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
// 
// The DDD Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Library General Public License for more details.
// 
// You should have received a copy of the GNU Library General Public
// License along with the DDD Library -- see the file COPYING.LIB.
// If not, write to the Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// 
// DDD is the data display debugger.
// For details, see the DDD World-Wide-Web page, 
// `http://www.cs.tu-bs.de/softech/ddd/',
// or send a mail to the DDD developers at `ddd@ips.cs.tu-bs.de'.

#include <std.vsl>
#include <fonts.vsl>
#include <tree.vsl>

f(text) = fix(frame(text));

// t(root, ...) = htree(hwhite() | f(root) | hwhite(), ...);
t(root, ...) = vtree(vwhite() & f(root) & vwhite(), ...);

l(label) = bf(label);
l(label, property) = bf(label) | hrule() | rm(property);

// Defaults
NoPatternText() = rm("<no pattern>");
NoDefText() = rm("<no def>");
NoPatternTree() = t(rm("<no pattern>"));
NoDefTree() = t(rm("<no def>"));


// Bibliothek
VSLLib(name, vsldefs...) = (|)(bf(name, family_times(), 34), hrule(), 
	vsldefs...);

// Definition
VSLDef(name, _, exprAsText, _, expr) = 
  vspace(15)
| fix(
	hcenter(bf(name & " = " | indent(exprAsText))) 
  | vspace(10) 
  | hcenter(fix(expr)))
| vspace(15)
| hrule();

// Knoten
ArgNode(id)                = t(l("ArgNode", dec(id)));
BuiltinCallNode(name, ...) = t(l("BuiltinCallNode", name), ...);
CallNode(name, ...)        = t(l("CallNode", name), ...);
ConstNode(box)             = t(l("ConstNode", box));
DefCallNode(name, ...)     = t(l("DefCallNode", name), ...);
DummyNode()                = t(l("DummyNode"));
LetNode(...)               = t(l("LetNode"), ...);
ListNode(...)       	   = t(l("ListNode"), ...);
NameNode(name)             = t(l("NameNode", name));
TestNode(...)    		   = t(l("TestNode"), ...);
