:- module list.
:- import_module mercury_builtin, require.
:- pred list:list__hosort(pred(X, X, (mercury_builtin:comparison_result)), int, (mercury_builtin:list(X)), (mercury_builtin:list(X)), (mercury_builtin:list(X))).
:- mode list:list__hosort((pred(mercury_builtin:in, mercury_builtin:in, mercury_builtin:out) is det), mercury_builtin:in, mercury_builtin:in, mercury_builtin:out, mercury_builtin:out) is semidet.
list:list__map(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = V_4,
		HeadVar__2 = '[]',
		HeadVar__3 = '[]'.
list:list__map(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = P,
		HeadVar__2 = [H0 | T0],
		HeadVar__3 = [H | T],
		call(P, H0, H),
		list__map(P, T0, T).
list:list__foldl(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = V_5,
		HeadVar__2 = '[]',
		HeadVar__3 = Acc,
		HeadVar__4 = Acc.
list:list__foldl(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = P,
		HeadVar__2 = [H | T],
		HeadVar__3 = Acc0,
		HeadVar__4 = Acc,
		call(P, H, Acc0, Acc1),
		list__foldl(P, T, Acc1, Acc).
list:list__foldr(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = V_5,
		HeadVar__2 = '[]',
		HeadVar__3 = Acc,
		HeadVar__4 = Acc.
list:list__foldr(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = P,
		HeadVar__2 = [H | T],
		HeadVar__3 = Acc0,
		HeadVar__4 = Acc,
		list__foldr(P, T, Acc0, Acc1),
		call(P, H, Acc1, Acc).
list:list__filter(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = P,
		HeadVar__2 = Xs,
		HeadVar__3 = Ys,
		list__filter(P, Xs, Ys, V_7).
list:list__filter(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = V_5,
		HeadVar__2 = '[]',
		HeadVar__3 = '[]',
		HeadVar__4 = '[]'.
list:list__filter(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = P,
		HeadVar__2 = [H | T],
		HeadVar__3 = L,
		HeadVar__4 = M,
		(if
			call(P, H)
		then
			L = [H | L1],
			M = M1
		else
			L = L1,
			M = [H | M1]
		),
		list__filter(P, T, L1, M1).
list:list__filter_map(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = V_4,
		HeadVar__2 = '[]',
		HeadVar__3 = '[]'.
list:list__filter_map(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = P,
		HeadVar__2 = [H0 | T0],
		HeadVar__3 = L,
		(if
			call(P, H0, H)
		then
			L = [H | L1]
		else
			L = L1
		),
		list__filter_map(P, T0, L1).
list:list__sort(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = P,
		HeadVar__2 = L0,
		HeadVar__3 = L,
		list__length(L0, N),
		(if
			N = 0
		then
			L = '[]'
		else
		(if
			V_9 = '[]',
			list__hosort(P, N, L0, L1, V_9)
		then
			L = L1
		else
			V_10 = "hosort failed",
			error(V_10)
		)
		).
list:list__merge(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = _P,
		HeadVar__2 = '[]',
		HeadVar__3 = '[]',
		HeadVar__4 = '[]'.
list:list__merge(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = _P,
		HeadVar__2 = '[]',
		HeadVar__3 = [Y | Ys],
		HeadVar__4 = [Y | Ys].
list:list__merge(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = _P,
		HeadVar__2 = [X | Xs],
		HeadVar__3 = '[]',
		HeadVar__4 = [X | Xs].
list:list__merge(HeadVar__1, HeadVar__2, HeadVar__3, HeadVar__4) :-
		HeadVar__1 = P,
		HeadVar__2 = [H1 | T1],
		HeadVar__3 = [H2 | T2],
		HeadVar__4 = L,
		call(P, H1, H2, C),
		( % disjunction
			C = ('<'),
			L = [H1 | T],
			V_22 = [H2 | T2],
			list__merge(P, T1, V_22, T)
		;
			C = ('='),
			L = [H1 | V_21],
			V_21 = [H2 | T],
			list__merge(P, T1, T2, T)
		;
			C = ('>'),
			L = [H2 | T],
			V_20 = [H1 | T1],
			list__merge(P, V_20, T2, T)
		).
