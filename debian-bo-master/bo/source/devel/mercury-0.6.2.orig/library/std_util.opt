:- module std_util.
:- import_module list, mercury_builtin, set.
:- pred std_util:builtin_solutions((pred T), (mercury_builtin:list(T))).
:- mode std_util:builtin_solutions((pred(mercury_builtin:out) is multi), mercury_builtin:out) is det.
:- mode std_util:builtin_solutions((pred(mercury_builtin:out) is nondet), mercury_builtin:out) is det.
std_util:solutions(HeadVar__1, HeadVar__2) :-
		HeadVar__1 = Pred,
		HeadVar__2 = List,
		builtin_solutions(Pred, UnsortedList),
		list__sort_and_remove_dups(UnsortedList, List).
std_util:solutions_set(HeadVar__1, HeadVar__2) :-
		HeadVar__1 = Pred,
		HeadVar__2 = Set,
		builtin_solutions(Pred, List),
		set__list_to_set(List, Set).
std_util:unsorted_solutions(HeadVar__1, HeadVar__2) :-
		HeadVar__1 = Pred,
		HeadVar__2 = List,
		builtin_solutions(Pred, UnsortedList),
		cc_multi_equal(UnsortedList, List).
std_util:maybe_pred(HeadVar__1, HeadVar__2, HeadVar__3) :-
		HeadVar__1 = Pred,
		HeadVar__2 = X,
		HeadVar__3 = Y,
		(if
			call(Pred, X, Z)
		then
			Y = yes(Z)
		else
			Y = no
		).
