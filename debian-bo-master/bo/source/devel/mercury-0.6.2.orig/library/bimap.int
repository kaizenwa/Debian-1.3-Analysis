:- module bimap.
:- interface.
:- import_module list, int, std_util, assoc_list.
:- type (bimap:bimap(_K, _V)).
:- pred bimap:bimap__init((bimap:bimap(V_1, V_2))).
:- mode bimap:bimap__init(mercury_builtin:out) is det.
:- pred bimap:bimap__is_empty((bimap:bimap(V_1, V_2))).
:- mode bimap:bimap__is_empty(mercury_builtin:in) is semidet.
:- pred bimap:bimap__search((bimap:bimap(K, V)), K, V).
:- mode bimap:bimap__search(mercury_builtin:in, mercury_builtin:in, mercury_builtin:out) is semidet.
:- mode bimap:bimap__search(mercury_builtin:in, mercury_builtin:out, mercury_builtin:in) is semidet.
:- pred bimap:bimap__lookup((bimap:bimap(K, V)), K, V).
:- mode bimap:bimap__lookup(mercury_builtin:in, mercury_builtin:in, mercury_builtin:out) is det.
:- pred bimap:bimap__reverse_lookup((bimap:bimap(K, V)), K, V).
:- mode bimap:bimap__reverse_lookup(mercury_builtin:in, mercury_builtin:out, mercury_builtin:in) is det.
:- pred bimap:bimap__insert((bimap:bimap(K, V)), K, V, (bimap:bimap(K, V))).
:- mode bimap:bimap__insert(mercury_builtin:in, mercury_builtin:in, mercury_builtin:in, mercury_builtin:out) is semidet.
:- pred bimap:bimap__set((bimap:bimap(K, V)), K, V, (bimap:bimap(K, V))).
:- mode bimap:bimap__set(mercury_builtin:in, mercury_builtin:in, mercury_builtin:in, mercury_builtin:out) is det.
:- pred bimap:bimap__ordinates((bimap:bimap(K, _V)), (mercury_builtin:list(K))).
:- mode bimap:bimap__ordinates(mercury_builtin:in, mercury_builtin:out) is det.
:- pred bimap:bimap__coordinates((bimap:bimap(_K, V)), (mercury_builtin:list(V))).
:- mode bimap:bimap__coordinates(mercury_builtin:in, mercury_builtin:out) is det.
:- pred bimap:bimap__to_assoc_list((bimap:bimap(K, V)), (assoc_list:assoc_list(K, V))).
:- mode bimap:bimap__to_assoc_list(mercury_builtin:in, mercury_builtin:out) is det.
:- pred bimap:bimap__from_assoc_list((assoc_list:assoc_list(K, V)), (bimap:bimap(K, V))).
:- mode bimap:bimap__from_assoc_list(mercury_builtin:in, mercury_builtin:out) is det.
:- import_module map.
:- type (bimap:bimap(K, V))
	--->	bimap((map:map(K, V)), (map:map(V, K))).
