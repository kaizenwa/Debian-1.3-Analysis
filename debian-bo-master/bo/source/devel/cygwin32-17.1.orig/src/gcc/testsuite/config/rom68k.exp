# Copyright (C) 1995, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gcc@prep.ai.mit.edu

# This file was written by J.T. Conklin (jtc@cygnus.com)

load_lib ${tool}.exp
load_lib remote.exp

set shell_prompt "ROM68K :->"

push_target idp

global OBJCOPY
if ![info exists OBJCOPY] then {
    set OBJCOPY [findfile "$rootme/../binutils/objcopy"]
}

#
# ${tool}_version -- extract and print the version number of gcc/g++
#

proc ${tool}_version {} {
    global tool
    default_${tool}_version
}

#
# ${tool}_start -- compile a program
#

proc ${tool}_start { prog } {
    global tool
    default_${tool}_start $prog
}

#
# ${tool}_load -- load the program and execute it
#
# See default.exp for explanation of arguments and results.
#

proc ${tool}_load { prog } {
    global OBJCOPY
    global shell_prompt
    global exec_output
    global tmpdir

    if ![is3way] {
	if ![file exists $prog] then {
	    verbose -log "$prog does not exist." 3
	    return "untested"
	}
    }

    set shell_id [remote_open target]
    if { $shell_id < 0 } {
	verbose -log "$prog not executed, couldn't connect to target." 3
	return "untested"
    }

    set result [execute_anywhere "$OBJCOPY -O srec $prog $prog.srec"]
    #    catch "exec $OBJCOPY -O srec $prog $prog.srec" result
    # remove any leftover LF/CR to make sure any output is legit
    regsub -all -- "\[\r\n\]*" $result "" result
    if { $result != "" } {
	warning "Got \"$result\" from $OBJCOPY"
	verbose -log "Couldn't convert to srecord for downloading" 3
	remote_close $shell_id
	return "untested"
    } else {
	verbose "Converted $prog to an srecord." 2
    }
    # if we built the srecord on a remote host, copy it back here so we
    # can load it
    if [is3way] {
	;# FIXME: copy the file back to this host
	verbose -log "No support for this yet" 3
	return "untested"
    }

    set timeout 50

    set tries 0
    send -i $shell_id "\n"
    expect {
	-i $shell_id -re ".*$shell_prompt.*$" {
	    verbose "Got prompt."
	    set result 0
	    incr tries
	}
	-i $shell_id timeout {
	    warning "Never got prompt."
	    set result -1
	    incr tries
	    if $tries<=2 then {
		exp_continue
	    }
	}
    }
    # Load the program.
    send -i $shell_id "DC\n"
    expect {
	-i $shell_id "Waiting for S-records from host... " {
	}
    }

    verbose "Writing records to target..."
    if {[download $prog.srec] != 0 } {
	remote_close $shell_id
	verbose -log "Download failed." 3
	return "unresolved"
    }
    verbose "Wrote records to target...waiting for prompt."
    send -i $shell_id "\n"
    set tries 0
    expect {
	-i $shell_id -re ".*$shell_prompt.*$" {
	    verbose "Got prompt."
	    set result 0
	    incr tries
	}
	-i $shell_id timeout {
	    warning "Never got prompt."
	    set result -1
	    incr tries
	    if $tries<=2 then {
		exp_continue
	    }
	}
    }
    verbose "Sending GO 10000, waiting for results."
    send -i $shell_id "GO 10000\n"
    expect {
	-i $shell_id -re ".*$shell_prompt.*$" {
	    verbose "Got prompt."
	    set result 0
	    incr tries
	}
	-i $shell_id -re ".*(Emul|TRAP #\[1-9\]).*" {
	    set result 1
	}
	-i $shell_id ".*" {
	    append exec_output $expect_out(buffer)
	    exp_continue
	}
    }
    # Make sure there's a newline before the PASS/FAIL/whatever for the log.
    send_log "\n"

    if { [remote_close $shell_id] == 0 } {
	return "pass"
    } else {
	return "fail"
    }
}

#
# ${tool}_exit -- shutdown the connection
#

proc ${tool}_exit {} {
    return [remote_close $shell_id]
}
