# Copyright (C) 1992, 1993, 1994, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gcc@prep.ai.mit.edu

# This file was written by Rob Savoye (rob@cygnus.com)
# Currently maintained by Doug Evans (dje@cygnus.com)

# This file is loaded by the tool init file (eg: unix.exp).  It provides
# default definitions for gcc_start, etc. and other supporting cast members.

# These globals are used by gcc_start if no compiler arguments are provided.
# They are also used by the various testsuites to define the environment:
# where to find stdio.h, libc.a, etc.

# we want to use libgloss so we can get fully linked target binaries.
load_lib libgloss.exp

global CC
if ![info exists CC] then {
    if ![is3way] {
	set CC [findfile $base_dir/../xgcc "$base_dir/../xgcc -B$base_dir/../" [transform gcc]]
    } else {
	set CC [transform gcc]
    }
}
if { [which $CC] == 0 } then {
    perror "$CC does not exist"
    exit 1
}

global CFLAGS
if ![info exists CFLAGS] then {
    set CFLAGS ""
}

global LIBS
if ![info exists LIBS] then {
    set LIBS ""
}

# It is difficult to come up with a situation where one has to use LDFLAGS
# and not LIBS (why two?).  Both are useful in makefiles, so maybe it's better
# to just continue existing practice.  However, there is still a lot of
# confusion about when to use one or the other.
#
# It appears there is now some use for LDFLAGS: passing args to find newlib
# and libgloss when linking.
global LDFLAGS
if ![info exists LDFLAGS] then {
    set LDFLAGS ""
}

#
# default_gcc_version -- extract and print the version number of the compiler
#

proc default_gcc_version { } {
    global CC
    
    # ignore any arguments after the command
    set compiler [lindex $CC 0]
    
    # verify that the compiler exists
    if { [which $compiler] != 0 } then {
	set tmp [execute_anywhere "$compiler -v"]
#	catch "exec $compiler -v" tmp
	regexp "version.*$" $tmp version
	if [info exists version] then {
	    clone_output "[which $compiler] $version\n"
	} else {
	    clone_output "Couldn't determine version of [which $compiler]\n"
	}
    } else {
	# compiler does not exist (this should have already been detected)
	warning "$compiler does not exist"
    }
}

#
# default_gcc_start -- compile a program using the compiler specified by CC
#
# ARGLIST is a list of one or two elements:
# [0] - file to compile
# [1] - optional string of all options to pass to compiler
#       (if not present, use "$LDFLAGS $CFLAGS $LIBS")
#
# NOTE: Do not rename ARGLIST to ARGS.  That will make this proc a varargs proc
# and all hell will break loose.  Well, at least argument passing won't work
# the way you expect it to.
#
# We assume $CC exists, don't call us if it doesn't.

proc default_gcc_start { arglist } {
    global CC CFLAGS LIBS LDFLAGS comp_output

    set prog [lindex $arglist 0]

    if {[llength $arglist] == 2 } then {
	set options [lindex $arglist 1]
    } elseif {[llength $arglist] > 2 } then {
	perror "default_gcc_start: too many arguments: $arglist"
	exit 1
    } else {
	if [string match "* -c *" " $CFLAGS "] {
	    set options "$CFLAGS"
	} else {
	    set options "$LDFLAGS $CFLAGS $LIBS"
	}
    }

    set comp_output [execute_anywhere "$CC $prog $options"]
}

#
# gcc_init -- called at the start of each .exp script.
#
# There currently isn't much to do, but always using it allows us to
# make some enhancements without having to go back and rewrite the scripts.
# Some things we might do in the future is save CFLAGS/etc. for later
# restoration by gcc_finish.  We might also take an argument that sets CFLAGS.
#

set gcc_initialized 0

proc gcc_init { } {
    global subdir			;# working directories
    global tmpdir
    global LDFLAGS CFLAGS target_info
    global gcc_initialized
    if ![info exists tmpdir] then {
	set tmpdir /tmp
    }

    if [info exists target_info(target,cflags)] {
	append CFLAGS " $target_info(target,cflags)"
	verbose "CFLAGS is now ${CFLAGS}" 2
    }

    if [info exists target_info(target,ldflags)] {
	append LDFLAGS " $target_info(target,ldflags)"
	verbose "LDFLAGS is now ${LDFLAGS}" 2
    }

   if { ${gcc_initialized} == 1 } { return }
    if ![isnative] {
	append LDFLAGS " [libgloss_flags]"
	append LDFLAGS " [newlib_flags]"
	verbose "LDFLAGS is now ${LDFLAGS}" 2
    }
    set gcc_initialized 1
    verbose "Initialized $subdir" 3
}

#
# gcc_pass -- utility to record a testcase passed
#

proc gcc_pass { testcase cflags } {
    if { "$cflags" == "" } {
	pass "$testcase"
    } else {
	pass "$testcase, $cflags"
    }
}

#
# gcc_fail -- utility to record a testcase failed
#

proc gcc_fail { testcase cflags } {
    if { "$cflags" == "" } {
	fail "$testcase"
    } else {
	fail "$testcase, $cflags"
    }
}

#
# gcc_finish -- called at the end of every .exp script that calls gcc_init
#
# The purpose of this proc is to hide all quirks of the testing environment
# from the testsuites.  It also exists to undo anything that gcc_init did
# (that needs undoing).
#

proc gcc_finish { } {
    # The testing harness apparently requires this.
    global errorInfo
    if [info exists errorInfo] then {
	unset errorInfo
    }

    # Might as well reset these (keeps our caller from wondering whether
    # s/he has to or not).
    global prms_id bug_id
    set prms_id 0
    set bug_id 0
}

# If this is an older version of dejagnu (without runtest_file_p),
# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.
# This can be deleted after next dejagnu release.

if { [info procs runtest_file_p] == "" } then {
    proc runtest_file_p { runtests testcase } {
	if { $runtests != "" && [regexp "\[.\]\[cC\]" $runtests] } then {
	    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {
		return 1
	    } else {
		return 0
	    }
	}
	return 1
    }
}

# Provide a definition of this if missing (delete after next dejagnu release).

if { [info procs prune_system_crud] == "" } then {
    proc prune_system_crud { system text } {
	return $text
    }
}

# Utility used by mike-gcc.exp and c-torture.exp.
# Check the compiler(/assembler/linker) output for text indicating that
# the testcase should be marked as "unsupported".
#
# When dealing with a large number of tests, it's difficult to weed out the
# ones that are too big for a particular cpu (eg: 16 bit with a small amount
# of memory).  There are various ways to deal with this.  Here's one.
# Fortunately, all of the cases where this is likely to happen will be using
# gld so we can tell what the error text will look like.

proc ${tool}_check_unsupported_p { output } {
    if [regexp "(^|\n)\[^\n\]*: region \[^\n\]* is full" $output] {
	return "memory full"
    }
    return ""
}

# Prune messages from gcc that aren't useful.

proc prune_gcc_output { text } {
    #send_user "Before:$text\n"
    regsub -all "(^|\n)\[^\n\]*: In (function|method) \[^\n\]*" $text "" text
    regsub -all "(^|\n)\[^\n\]*: At top level:\[^\n\]*" $text "" text

    # It would be nice to avoid passing anything to gcc that would cause it to
    # issue these messages (since ignoring them seems like a hack on our part),
    # but that's too difficult in the general case.  For example, sometimes
    # you need to use -B to point gcc at crt0.o, but there are some targets
    # that don't have crt0.o.
    regsub -all "(^|\n)\[^\n\]*file path prefix \[^\n\]* never used" $text "" text
    regsub -all "(^|\n)\[^\n\]*linker input file unused since linking not done" $text "" text

    #send_user "After:$text\n"

    return $text
}
