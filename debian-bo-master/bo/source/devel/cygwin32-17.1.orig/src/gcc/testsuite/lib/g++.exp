# Copyright (C) 1992, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-g++@prep.ai.mit.edu

# This file was written by Rob Savoye (rob@cygnus.com)
# Many modifications by Jeffrey Wheat (cassidy@cygnus.com)
# With modifications by Mike Stump <mrs@cygnus.com>.

# we want to use libgloss so we can get fully linked target binaries.
load_lib libgloss.exp

#
# g++ support library routines
#

global CXX
if ![info exists CXX] then {
    set CXX [findfile $base_dir/../xgcc "$base_dir/../xgcc -B$base_dir/../" [transform c++]]
}
if { [which $CXX] == 0 } then {
    perror "$CXX does not exist"
    exit 1
}

global CXXFLAGS
global srcdir
global objdir
global base_dir
if ![info exists CXXFLAGS] then {
    set CXXFLAGS "-I$objdir/../libio -I$srcdir/../libg++/src -I$srcdir/../libio -I$base_dir/include -L$objdir/../libg++"
    verbose "Setting CXXFLAGS to a default of $CXXFLAGS" 
}

global LIBS
if ![info exists LIBS] {
    set LIBS ""
}

#
# default_g++_version -- extract and print the version number of the compiler
#
proc default_g++_version { } {
    global CXX
    
    # ignore any arguments after the command
    set compiler [lindex $CXX 0]
    
    # verify that the compiler exists
    if { [which $compiler] != 0 } then {
	set tmp [execute_anywhere "$compiler -v"]
	regexp "version.*$" $tmp version
	if [info exists version] then {
	    clone_output "[which $compiler] $version\n"
	} else {
	    clone_output "Couldn't determine version of [which $compiler]\n"
	}
    } else {
	# compiler does not exist (this should have already been detected)
	warning "$compiler does not exist"
    }
}

#
# default_g++_start -- compile a program using g++
# We assume $CXX exists, don't call us if it doesn't.
#
proc default_g++_start { prog } {
    global CXX
    global CXXFLAGS
    global LIBS
    global LDFLAGS
    global comp_output

    # make sure these variables are defined
    if ![info exists LIBS] then {
	set LIBS ""
    }
    if ![info exists CXXFLAGS] then {
	set CXXFLAGS ""
    }
    if ![info exists LDFLAGS] then {
	set LDFLAGS ""
    }

    if [string match "* -c *" " $CXXFLAGS "] {
	set options $CXXFLAGS
    } else {
	set options "$CXXFLAGS $LDFLAGS $LIBS"
    }
    set comp_output [execute_anywhere "$CXX $prog $options"]
}

#
# g++_init -- called at the start of each subdir of tests
#
# ??? This had some historical value, but it's not used anymore.
# It's kept around in case some future use is found for it (and in case
# there is some script somewhere that calls it).
#
set gpp_initialized 0
proc g++_init { } {
    global subdir
    global LDFLAGS CFLAGS target_info
    global gpp_initialized
    global base_dir
    global runshlib
    global target_triplet
    global mathlib

    if { ${gpp_initialized} == 1 } { return }

    set mathlib "-lm"
    set runshlib ""

    if [info exists target_info(target,cflags)] {
	append CFLAGS " $target_info(target,cflags)"
	verbose "CFLAGS is now ${CFLAGS}" 2
    }

    if [info exists target_info(target,ldflags)] {
	append LDFLAGS " $target_info(target,ldflags)"
	verbose "LDFLAGS is now ${LDFLAGS}" 2
    }

    if ![isnative] {
	append LDFLAGS " [libgloss_flags]"
	append LDFLAGS " [newlib_flags]"
	verbose "LDFLAGS is now ${LDFLAGS}" 2
	if [regexp ".*vxworks5\.1.*" $target_triplet] {
	  set mathlib ""
	  verbose "Testing vxworks5.1---not linking with the math library."
	}
    } else {
      catch "glob -nocomplain $base_dir/../libstdc++/libstdc++.so* $base_dir/../libstdc++/libstdc++.sl" tmp
      if { ${tmp} != "" } {
	  if [regexp ".*solaris2.*" $target_triplet] {
	    # Solaris 2
	    set runshlib "-R$base_dir/../libstdc++"
	  } elseif [regexp ".*(osf|irix5|linux).*" $target_triplet] {
	    # OSF/1 or Irix5
	    set runshlib "-Wl,-rpath,$base_dir/../libstdc++"
	  } elseif [regexp ".*hppa.*" $target_triplet] {
	    # HP/UX
	    set runshlib "-Wl,-a,shared_archive"
	  }
      }
   }

   set gpp_initialized 1
   verbose "Initialized $subdir" 3
}

#
# g++_stat -- called at the end of each subdir of the g++ C++ torture tests
#
# ??? This printed a one line summary of pass/fail counts for each .exp
# script that invoked it.  Hardly any tests did, and it didn't take into
# account unsupported/untested/unresolved counts.  It's kept around until
# someone wants to go through and ensure deleting it won't break anything.
#
proc g++_stat { } {
}

# If this is an older version of dejagnu (without runtest_file_p),
# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.
# This can be deleted after the next dejagnu release.

if { [info procs runtest_file_p] == "" } then {
    proc runtest_file_p { runtests testcase } {
	if { $runtests != "" && [regexp "\[.\]\[cC\]" $runtests] } then {
	    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {
		return 1
	    } else {
		return 0
	    }
	}
	return 1
    }
}

# Provide a definition of this if missing (delete after next dejagnu release).

if { [info procs prune_system_crud] == "" } then {
    proc prune_system_crud { system text } {
	return $text
    }
}

# Utility used by mike-g++.exp and old-dejagnu.exp.
# Check the compiler(/assembler/linker) output for text indicating that
# the testcase should be marked as "unsupported".
#
# When dealing with a large number of tests, it's difficult to weed out the
# ones that are too big for a particular cpu (eg: 16 bit with a small amount
# of memory).  There are various ways to deal with this.  Here's one.
# Fortunately, all of the cases where this is likely to happen will be using
# gld so we can tell what the error text will look like.

proc ${tool}_check_unsupported_p { output } {
    if [regexp "(^|\n)\[^\n\]*: region \[^\n\]* is full" $output] {
	return "memory full"
    }
    return ""
}
