# Copyright (C) 1994, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gcc@prep.ai.mit.edu

# This file was written by Rob Savoye. (rob@cygnus.com)

# We do `fp' to check the task.
if ![info exists checktask] then {
  global checktask
  set checktask "fp"
}

#
# load support libraries
#
load_lib ${tool}.exp
load_lib remote.exp
load_lib vxworks.exp

set shell_prompt "->"

#
# ${tool}_version -- extract and print the version number of gcc/g++
#

proc ${tool}_version {} {
    global tool
    default_${tool}_version
}

#
# ${tool}_start -- compile a program
#

proc ${tool}_start { prog } {
    global tool
    default_${tool}_start $prog
}

#
# ${tool}_load -- load the program and execute it
#
# See default.exp for explanation of arguments and results.
#

proc ${tool}_load { prog } {
    global shell_id

    if ![file exists $prog] then {
	perror "$prog does not exist."
	verbose -log "$prog does not exist." 3
	return "untested"
    }
    
    # Load the program.
    if { $shell_id < 0 } then {
	verbose -log "$prog not executed because there is no target." 3
	return "untested"
    }

    set status [vxworks_ld $shell_id $prog]
    switch -- $status {
	0 { }
	1 { return "fail" }
	-1 {
	    # We ignore cases -2,-3 as they shouldn't occur.
	    verbose -log "Couldn't load $prog" 3
	    return "unresolved"
	}
	default {
	    perror "Unknown return code ($status) from vxworks_ld."
	    verbose -log "Unknown return code ($status) from vxworks_ld." 3
	    return "unresolved"
	}
    }

    set status [vxworks_spawn $shell_id main]
    switch -- $status {
	0 { return "pass" }
	1 { return "fail" }
	-1 - -4 {
	    # We ignore cases -2,-3 as they shouldn't occur.
	    verbose -log "Couldn't execute main" 3
	    return "unresolved"
	}
	default {
	    perror "Unknown return code ($status) from vxworks_spawn."
	    verbose -log "Unknown return code ($status) from vxworks_spawn." 3
	    return "unresolved"
	}
    }
}

#
# ${tool}_exit -- just a stub
#

proc ${tool}_exit { } {
}

# start the remote shell
# `shell_id' is local to this file.

set shell_id [eval $connectmode "$targetname"]
