\input texinfo 
@title The GNU-WIN32/CYGWIN32 FAQ and protomanual V1.1 - for release b14.
@setfilename faq.txt
@include readme.texinfo
@include what.texinfo
@include how.texinfo
@include copy.texinfo
@chapter Other Stuff

@section LD hacks

The linker now @emph{always} generates a @code{.exe} file.  If you
have @code{-o foo.exe} on your command line anyway, the behavior doesn't change.

If you have @code{-o foo} on your command line, you'll get @code{foo} @emph{and} @code{foo.exe} generated.

@section Other Hacks

The @code{stat} system call will now report a sucess when you look for @code{foo} and
@code{foo.exe} is all there is.  This allows the tools to rebuild themselves
on Windows95.

@section Resource Tools

I've included @code{cvtres} by Maurice Ravel
and @code{rcl} by Gunther Ebert's.

I've not tested these.  I know that @code{cvtres} will have problems, since
it uses UNICODE stuff which I haven't done yet.

@section Next

More network support, and polishing.  Perhaps the DLL will be split into
smaller pieces.

A major personal goal is to get wxWindows running with CYGWIN32 (for info look
in @file{http://www.aiai.ed.ac.uk/~jacs/wxwin.html}).  I've already done V, just
because it was much smaller and simpler, and a bit easier to port something fresh
to win32 than to modify something that already works on win32 (for info on V look in 
@file{http://www.cs.unm.edu/~wampler}.

@section Performance

In one meaningless benchmark, GCC gets 137000 Dhrystones/sec, and
Microsoft VC++ 4.0 gets 1666666. Your mileage may vary.  I'm sure there
are other meaningless benchmarks where GCC outperforms Microsoft's
compiler. 

I have had reports that GCC often compiles faster than VC++.  Again, I'm sure
that your mileage will vary.

@section Mirrors
@itemize @code
@item France: @file{http://www.fwntug.org} 
@item UK: @file{ftp://ftp.doc.ic.ac.uk/pub/gnu/cygnus/gnu-win32}
@end itemize 
@section what's in the binary release ?

files in full the binary release:

@example
@include fulllist.texinfo
@end example

@section Where's the DOC

You can look at the documentation through 
@file{http://www.cygnus.com/doc/}

The V manual is:

@file{http://www.cs.unm.edu/~wampler/doc/vwebref/vwebref.html}
 
@section Why doesn't program `X' work under Windows 95 ?

I do all of my testing and development using NT.  I've only had
a Windows 95 machine for a week.  

@section Who's writing/maintaining it ?

I'm Steve Chamberlain (sac@@cygnus.com).  I'm the maintainer of the
win32 specific stuff in the release, and I manage the builds and such.
I did the (trivial) win32 port of V. I try and deal with patches and
questions as I get them, but it's not possible for me to answer (or even
read) all of my email, and making net releases of the win32 stuff and
helping out isn't my primary job-function, so some things will just
never be answered.  Sorry.

Doug Evans and Jason Molenda have also bust a gut getting various bits
of it to work.  The rest of the tools are (almost) unmodified versions
of standard FSF releases.  I'm not the maintainer of any of the other
packages; if you find a bug in GCC, I can't do much more about it that
you can - you'll have to find out and report the problem to the right
person.

Kim Knuttila and Michael Meissner have put in long hours working on the
PowerPC.

When the GNU-WIN32 stuff is more stable, Cygnus will probably make it into a
standard product, and then you could buy support for it from us.  Of
course, it will remain free software.

Kudos to my manager, Stan Shebs, who allows me do work on this stuff.

@section Are GNU-WIN32 and CYGWIN32 deliberately lame names ?

I'm trying to phase out GNU-WIN32 in the source, because 
of two pretty good reasons - (1) - it's not all GNU code. and (b)
it doesn't present a WIN32 API.

I'm using cygwin32 as the configuration cookie for the moment.
But I could change it just as soon as a better name becomes
available.

There is some (accidental) logic in this naming scheme.  We can
call the entire suite of tools 'gnu-win32', and the library/API which
they run on cygwin32.  Oneday, someone else may write some more code -
for example, maybe 'bsd-win32'.  It would still run on top of the
cygwin32 API.

@chapter Known and potential problems, and things that worry me a bit.

@section DOS special filenames
If you have a file with a name that NT thinks is a bit special, then
you'll have trouble, and it can sometimes be hard to find.  Eg, the perl
distribution has a file called @code{aux.sh}.  The perl configuration
tries to make sure that @code{aux.sh} is there, but an operation on a
file with the magic letters 'aux' in it will hang.

@section User defined mallocs.
If you define a function called @code{malloc} in your own code, and link
with the DLL, the DLL @emph{will} call your @code{malloc}.  You'd better make
sure that your malloc more or less works.

If you run any programs from the DOS command prompt, rather than from in
bash, the DLL will try and expand the wildcards on the command line.
This process uses @code{malloc} @emph{before} your main line is started.
If you have written your own @code{malloc} to need some initialization
to occur after @code{main} is called, then this will surely break.

@section Mixed case filenames.
The perl config causes some other problems too; the config<foo>.SH scripts
generate a file called "Makefile", and use and delete a file called "makefile"
on the way.  Because of NT's case insensitivity, this will nuke Makefile, leaving
you with nothing.  You can fix this by mounting with the 'mixed' option.

@section Debugging

You can't re-run a program in GDB under win95.  Although you can re-run
a program under NT, you'll accumulate more and more copies of the process
you are debugging (so says pview).

^C isn't handled right on Windows 95 (though it is a lot better).

If you run GDB under BASH, and use ^C to interrupt your application,
you'll exit GDB.  Solution - don't run GDB under BASH.  Or don't
type ^C.

If you don't strip symbols and debugging info from your images, they
will become very large (not really a bug, but different behavior from
previous releases)

@section Windows NT 4.0 Beta

I've had a report that B13 doesn't work under NT 4.0 Beta.

@section Unimplemented functions.

Many Unix functions aren't implemented fully.  For example, chmod returns 0,
even though it doesn't do anything.

Signals and exception and exit status communications are broken between
parents and children (eg in bash).  If you type ^C, the child may or may
not get the signal.  You could kill the child and the parent may never
know - and hang forever.   Because of this, all processes
count how many ^C's they've seen. When they see 20 they quit, regardless
of any handling which may be requested. (so frantic banging on ^C will
work (probably))

The DLL expects to be loaded in the same place by each image, and it
maps shared memory in a known place - if it can't get what it wants
strange things will happen.

@section  Why are the headers incomplete ?

When I need a new prototype or definition I look it up in the win32
documentation and enter it into the header file that seems most
reasonable to me.  Thus there's a lot missing, and some things are not
where you may expect them to be.

But, now that V is included, you don't need all the headers to write
graphics apps.  Just use V.

The wine project is writing its own headers, and has recently started to
add 32 bit stuff, look at
@file{http://www.primenet.com/~pdg/wine-faq.html}.  They've done a ton
more work than I have, but not all of it will work in 32bit
land. Perhaps a day tweaking would get it to work with cygwin32.

I've got a copy of the `Microsoft Open Tools License agreement', to see
if I can distribute the real WIN32 SDK headers. I'm not a lawyer, but it
seems that I cannot, since section 2.d.f, talking about our customers,
says we can "not permit further redistribution of the Redistributables
to their end users".  I read that to mean that I can give them to you,
but you can't give them to anyone else, which is something that Cygnus
can't agree to.  

@include history.texinfo

@include hints.texinfo

steve

sac@@cygnus.com







