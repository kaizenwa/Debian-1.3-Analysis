# Copyright (c) 1995, 1996 Cygnus Support
#
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors
# and need not follow the licensing terms described here, provided that
# the new terms are clearly indicated on the first page of each file where
# they apply.

#
# Makefile for newlib/libc/stub/sparclite. This is the board support
# code for the Fujitsu Excell-93x family of SPARCLITE boards.
#

VPATH = @srcdir@
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

SHELL = /bin/sh

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
RANLIB = @RANLIB@
AR_FLAGS = qrv

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

SIM_BSP = libsim.a
701_BSP = libsplet701.a
930_BSP = libslite930.a
931_BSP = libslite931.a
934_BSP = libslite934.a
CRT0 =	crt0.o
SIM_CRT0 = sim-crt0.o
701_CRT0 = crt0-701.o
# for the time being, built the stub sithout hardware breakpoint support
BSP_OBJS = salib.o sparcl-stub.o
SIM_OBJS = sim-io.o traps.o sim-stub.o debug.o
OBJS =  close.o fstat.o getpid.o isatty.o kill.o \
	lseek.o open.o print.o putnum.o read.o sbrk.o stat.o \
	unlink.o write.o
701_OBJS = sysc-701.o

# This is set to one of SPARC, SLITE, or SPLET by configure.
# It's not clear what to do here.
# One could certainly build everything.  The assembler supports all cpu
# variants (via runtime switches).  However, the compiler [currently] doesn't.
# Of course, it may be the case that there isn't any cpu specific code in
# C source files, but there might be in the future.
CPU = @CPU@

# sparclite stuff
SLITE_ALL = $(930_BSP) $(931_BSP) # $(934_BSP)
SLITE_INSTALL = slite-install

# sparclet stuff
SPLET_ALL = $(701_CRT0) $(701_BSP)
SPLET_INSTALL = splet-install

# sparc stuff (not sparclite or sparclet)
SPARC_ALL =
SPARC_INSTALL =

#### Host specific Makefile fragment comes in here.
@host_makefile_frag@

all: ${CRT0} $(SIM_OBJS) $(SIM_CRT0) $($(CPU)_ALL)

#$(STUBLIBS): $(OBJS) $(BSP_OBJS) $(CRT0)
#	${CC} -nostdlib -r $(BSP_OBJS) $(SHARED_OBJS) -o $(930_BSP)
#	${CC} -DSL931 -nostdlib -r $(BSP_OBJS) $(SHARED_OBJS) -o $(931_BSP)
#	${CC} -nostdlib -r $(BSP_OBJS) $(SHARED_OBJS) -o $(934_BSP)

$(CRT0): $(srcdir)/crt0.S $(srcdir)/asm.h $(srcdir)/slite.h
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -o $@ -c $(srcdir)/crt0.S

$(930_BSP) $(931_BSP) $(934_BSP): $(OBJS) $(BSP_OBJS) 
	@rm -f $@
	${AR} ${AR_FLAGS} $@ $(OBJS) $(BSP_OBJS)
	${RANLIB} $@

$(SIM_CRT0): $(srcdir)/sim-crt0.S $(srcdir)/asm.h $(srcdir)/slite.h
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -o $@ -c $(srcdir)/sim-crt0.S

$(SIM_BSP): $(OBJS) $(SIM_OBJS)
	@rm -f $@
	${AR} ${AR_FLAGS} $@ $(OBJS) $(SIM_OBJS)
	${RANLIB} $@

crt0-701.o: $(srcdir)/crt0-701.S
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -c $(srcdir)/crt0-701.S

$(701_BSP): $(701_OBJS)
	@rm -f $@
	${AR} ${AR_FLAGS} $@ $(701_OBJS)
	${RANLIB} $@

install: $($(CPU)_INSTALL)
	$(INSTALL_DATA) $(CRT0) $(tooldir)/lib${MULTISUBDIR}/$(CRT0)

slite-install:
	$(INSTALL_DATA) $(930_BSP) $(tooldir)/lib${MULTISUBDIR}/$(930_BSP)
	$(INSTALL_DATA) $(931_BSP) $(tooldir)/lib${MULTISUBDIR}/$(931_BSP)
#	$(INSTALL_DATA) $(934_BSP) $(tooldir)/lib${MULTISUBDIR}/$(934_BSP)
	$(INSTALL_DATA) $(srcdir)/ex930.ld $(tooldir)/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(srcdir)/ex931.ld $(tooldir)/lib${MULTISUBDIR}
	$(INSTALL_DATA) $(srcdir)/ex934.ld $(tooldir)/lib${MULTISUBDIR}

splet-install:
	$(INSTALL_DATA) $(701_CRT0) $(tooldir)/lib${MULTISUBDIR}/$(701_CRT0)
	$(INSTALL_DATA) $(701_BSP) $(tooldir)/lib${MULTISUBDIR}/$(701_BSP)

salib.o: $(srcdir)/salib.c
win.o: $(srcdir)/win.S
syscalls.o: $(srcdir)/syscalls.c
sparcl-stub.o: $(srcdir)/sparcl-stub.c $(srcdir)/../debug.h $(srcdir)/../debug.c
sim-stub.o: $(srcdir)/sim-stub.c $(srcdir)/../debug.h $(srcdir)/../debug.c

# Make a simple test case to test the linker script, startup code, and
# I/O code
#
test: ex930-test.x ex931-test.x sim-test.x
	@echo Done...

# compile a fully linked binary. The -N option is for a.out, so the
# base address will be zero, rather than the default of 0x2020. The
# -Wl,-T*.ld is for the linker script. By using -Wl, the linker script
# is put on the proper place in the comand line for ld, and all the
# symbols will get fully resolved.

sim-test.x: test.o ${SIM_CRT0} ${srcdir}/sim.ld Makefile  ${SIM_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tsim.ld -Wl,-Map -Wl,sim.map -nostdlib
sim-test.srec: sim-test.x
	$(OBJCOPY) -O srec sim-test.x $@
sim-test.dis: sim-test.x
	@rm -fr sim-test.dis
	$(OBJDUMP) -d sim-test.x > $@
sim-test: sim-test.srec sim-test.dis

ex930-test.x: test.o ${CRT0} ${srcdir}/ex930.ld Makefile  ${930_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tex930.ld -nostdlib
ex930-test.srec: ex930-test.x
	$(OBJCOPY) -O srec ex930-test.x $@
ex930-test.dis: ex930-test.x
	@rm -fr ex930-test.dis
	$(OBJDUMP) -d ex930-test.x > $@
ex930-test: ex930-test.srec ex930-test.dis

ex931-test.x: test.o ${CRT0} ${srcdir}/ex931.ld Makefile  ${931_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tex931.ld -nostdlib
ex931-test.srec: ex931-test.x
	$(OBJCOPY) -O srec ex931-test.x $@
ex931-test.dis: ex931-test.x
	@rm -fr ex931-test.dis
	$(OBJDUMP) -d ex931-test.x > $@
ex931-test: ex931-test.srec ex931-test.dis

ex934-test.x: test.o ${CRT0} ${srcdir}/ex934.ld Makefile  ${934_BSP}
	${CC} -L${srcdir} -L${objdir} test.o -o $@ $(LDFLAGS_FOR_TARGET) \
	-N -Wl,-Tex934.ld -nostdlib
ex934-test.srec: ex934-test.x
	$(OBJCOPY) -O srec ex934-test.x $@
ex934-test.dis: ex934-test.x
	@rm -fr ex934-test.dis
	$(OBJDUMP) -d ex934-test.x > $@
ex934-test: ex934-test.srec ex934-test.dis

# a C++ test case
dtor.o:  $(srcdir)/dtor.C
	$(CC) $(CFLAGS_FOR_TARGET) $(INCLUDES) -o $@ -c $?
dtor.dis: dtor.x
	@rm -fr dtor.dis
	$(OBJDUMP) -d dtor.x > $@
dtor.x: dtor.o ${SIM_CRT0} ${srcdir}/sim.ld Makefile  ${SIM_BSP}
	${CC} -L${srcdir} -L${objdir} dtor.o -o $@ $(LIBS_FOR_TARGET) \
	-N -Wl,-Tsim.ld

# target specific makefile fragment comes in here.
@target_makefile_frag@

clean mostlyclean:
	rm -f *.o *.a *.map *.x

distclean maintainer-clean realclean: clean
	rm -f Makefile config.cache config.log config.status

.PHONY: info dvi doc install-info clean-info
info doc dvi:
install-info:
clean-info:

Makefile: Makefile.in config.status @host_makefile_frag_path@ \
	@target_makefile_frag_path@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
