# Makefile for GNU Rez.
# Copyright (C) 1995 Free Software Foundation, Inc.

# This file is part of GNU Rez.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

VPATH = @srcdir@
srcdir = @srcdir@

target_alias = @target_alias@
prefix = @prefix@

program_transform_name = @program_transform_name@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

datadir = @datadir@
mandir = @mandir@
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = @infodir@
includedir = @includedir@

SHELL = /bin/sh

INSTALL = `cd $(srcdir)/..;pwd`/install.sh -c
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_XFORM = $(INSTALL) -t='$(program_transform_name)'
INSTALL_XFORM1 = $(INSTALL_XFORM) -b=.1 -m 644

AR = ar
AR_FLAGS = rc
CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
RANLIB = ranlib
BISONFLAGS = -d
TEXI2ROFF=texi2roff
MAKEOVERRIDES=
CC_FOR_BUILD = @CC_FOR_BUILD@
NM_FOR_TARGET = nm
NM = $(NM_FOR_TARGET)
SYMLINK = ln -s

BISON = `if [ -f ../bison/bison ] ; then echo ../bison/bison -y -L../bison/bison ; else echo bison -y ; fi`
# Comment these out if using lex.
LEX_OPTIONS = -I -Cem 
LEX = `if [ -f ../flex/flex ] ; then echo ../flex/flex ; else echo flex ; fi`

# Distribution version
VERSION=0.1
# Distribution name
DIST_NAME=grez-${VERSION}

# Where to find texinfo.tex to format docn with TeX
TEXIDIR = $(srcdir)/../texinfo

#CC=gcc -Wall
CC=cc

MANPAGES= grez

PROGS = grez

# Files that can be generated, but should be in the distribution.
DISTSTUFF=

BASEDIR = $(srcdir)/..
BFDDIR = $(BASEDIR)/bfd
INCDIR	= $(BASEDIR)/include
INCLUDES = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR)

ALL_CFLAGS = $(INCLUDES) @HDEFINES@ $(CFLAGS)

.c.o:
	$(CC) -c $(ALL_CFLAGS) $<

#
## Random definitions
# Hopefully all these may be flushed once we get configuration down pat.

# alloca only needed for systems which don't have it and when cc != gcc.
# ALLOCA = alloca.o

LIBIBERTY = ../libiberty/libiberty.a

ADDL_LIBS = $(BFD) $(LIBIBERTY) 

BFD = ../bfd/libbfd.a

EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \
          echo $${rootme}/../expect/expect ; \
          else echo expect ; fi`
RUNTEST = `if [ -f ${srcdir}/../dejagnu/runtest ] ; then \
           echo ${srcdir}/../dejagnu/runtest ; \
           else echo runtest ;  fi`
RUNTESTFLAGS =

FLAGS_TO_PASS = \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)"

OBS = grez.o rez.o version.o

#
## The rules

all: $(ADDL_LIBS) $(PROGS)

rez.c: rez.y
	$(BISON) $(BISONFLAGS) $(srcdir)/rez.y
	mv -f y.tab.c rez.c
	mv -f y.tab.h rez.h

# Separate from rez.c so that a parallel make doesn't try to build
# both rez.c and rez.h simultaneously.
rez.h: rez.c

grez: $(ADDL_LIBS) $(OBS) $(BFD)
	$(CC) $(CFLAGS) $(LDFLAGS) -o grez $(OBS) $(ADDL_LIBS) $(EXTRALIBS)

# These targets are for the dejagnu testsuites. The file site.exp 
# contains global variables that all the testsuites will use.

site.exp: ./config.status Makefile
	@echo "Making a new config file..."
	@rm -f ./tmp?
	@touch site.exp
	@mv site.exp site.bak
	@echo "## variables are automatically generated by make ##" > ./tmp0
	@echo "# Do not edit here. If you wish to override these" >> ./tmp0
	@echo "# values, add them to the last section" >> ./tmp0
	@echo "# HOST AND TARGET INFO" >> ./tmp0
	@echo "set host_os @host_os@" >> ./tmp0
	@echo "set host_alias @host_alias@" >> ./tmp0
	@echo "set host_cpu @host_cpu@" >> ./tmp0
	@echo "set host_vendor @host_vendor@" >> ./tmp0
	@echo "set target_os @target_os@" >> ./tmp0
	@echo "set target_alias @target_alias@" >> ./tmp0
	@echo "set target_cpu @target_cpu@" >> ./tmp0
	@echo "set target_vendor @target_vendor@" >> ./tmp0
	@echo "set host_triplet @host@" >> ./tmp0
	@echo "set target_triplet @target@" >> ./tmp0
	@echo "# DIRECTORY INFO" >> ./tmp0
	@echo "set objdir `pwd`" >> ./tmp0
	@echo "" >> ./tmp0	
	@echo "## Variables generated by configure. Do Not Edit ##" >> ./tmp0
	@cat ./tmp0 > site.exp
	@cat site.bak | sed \
			-e '1,/^## Variables generated by.*##/ d' >> site.exp
	-@rm -f ./tmp?

check: site.exp
	rootme=`pwd`; export rootme ; \
	srcroot=`cd ${srcdir}; pwd` ; export srcroot ; \
	EXPECT=${EXPECT} ; export EXPECT ; \
	if [ -f $$rootme/../expect/expect ] ; then  \
	   TCL_LIBRARY=$${srcroot}/../tcl/library ; \
	   export TCL_LIBRARY ; else true; fi ; \
	$(RUNTEST) --tool binutils --srcdir $(srcdir)/testsuite \
	  $(RUNTESTFLAGS)

installcheck:
	/bin/sh $(srcdir)/sanity.sh $(bindir)

info: grez.info

dvi: grez.dvi

###
# DOCUMENTATION TARGETS
config.texi: Makefile
	rm -f config.texi
	echo '@set VERSION $(VERSION)' > config.texi
# TeX output
grez.dvi: $(srcdir)/grez.texi config.texi
	TEXINPUTS=$(TEXIDIR):$$TEXINPUTS $(TEXI2DVI) $(srcdir)/grez.texi

# info file for online browsing
grez.info: $(srcdir)/grez.texi config.texi
	$(MAKEINFO) -o grez.info $(srcdir)/grez.texi

#   different targets for -ms, -mm, -me
# Try to use a recent texi2roff.  v2 was put on prep in jan91.
# If you want an index, see texi2roff doc for postprocessing 
# and add -i to texi2roff invocations below.
# Workarounds for texi2roff-2 (probably fixed in later texi2roff's, delete
#    corresponding -e lines when later texi2roff's are current)
# + @ifinfo's deleted explicitly due to texi2roff-2 bug w nested constructs.
# + @c's deleted explicitly because texi2roff sees texinfo commands in them
# + @   (that's at-BLANK) not recognized by texi2roff, turned into blank
# + @alphaenumerate is ridiculously new, turned into @enumerate

# roff output (-ms)
grez.ms: $(srcdir)/grez.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/grez.texi | \
	$(TEXI2ROFF) -ms | \
	sed -e 's/---/\\(em/g' \
	>grez.ms 

# roff output (-mm)
# '@noindent's removed due to texi2roff-2 mm bug; if yours is newer, 
#   try leaving them in
grez.mm: $(srcdir)/grez.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e '/@noindent/d' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/grez.texi | \
	$(TEXI2ROFF) -mm | \
	sed -e 's/---/\\(em/g' \
		>grez.mm

# roff output (-me)
grez.me: $(srcdir)/grez.texi
	sed -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c/d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/grez.texi | \
	$(TEXI2ROFF) -me | \
	sed -e 's/---/\\(em/g' \
	>grez.me 


###

mostlyclean:
	-rm -f *.o *~ \#* core grez.?? grez.??? y.output config.log
	-rm -rf tmpdir
clean: mostlyclean
	-rm -f $(PROGS)
distclean:
	-rm -f Makefile config.status *.o *~ \#* core y.* \
		grez.?? grez.??s grez.aux grez.log grez.toc
	-rm -f $(PROGS) underscore.c config.h stamp-h config.cache config.log
maintainer-clean realclean: clean distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	-rm -f $(DISTSTUFF) *.info TAGS

etags tags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.[hc] 

install: all
	for i in $(PROGS) ; do \
	  $(INSTALL_XFORM) $$i $(bindir)/`echo $$i | sed -e 's/.new//'` ; \
	done
	for i in $(MANPAGES) ; do \
	  $(INSTALL_XFORM1) $(srcdir)/$$i.1 $(man1dir)/$$i.1 ; \
	done
	test -d $(tooldir) || mkdir $(tooldir)
	test -d $(tooldir)/bin || mkdir $(tooldir)/bin
	for i in $(TOOL_PROGS) ; do \
	  j=`echo $$i | sed -e 's/.new//'`; \
	  rm -f $(tooldir)/bin/$$j; \
	  k=`echo $$j | sed '$(program_transform_name)'`; \
	  ln $(bindir)/$$k $(tooldir)/bin/$$j >/dev/null 2>/dev/null \
	  || $(INSTALL_PROGRAM) $$i $(tooldir)/bin/$$j; \
	done

# This little path search is required because in the FSF net releases,
# the info files are included in the source tree, and that may not be
# the same as the build directory.
install-info: grez.info
	if [ -r grez.info ]; then \
	  dir=. ; \
	else \
	  dir=$(srcdir) ; \
	fi ; \
	for i in `cd $$dir; echo grez.info*` ; do \
		$(INSTALL_DATA) $$dir/$$i $(infodir)/$$i ; \
	done

clean-info:
	-rm -rf *.info*

# Making a dist:
# cvs rtag grez-x-yy ld+utils
# cvs co -r grez-x-yy ld+utils
# Sanitize
# cd {HERE}; make dist [-f Makefile.in]

dist: $(DIST_NAME).tar.z

diststuff: $(DISTSTUFF) info

$(DIST_NAME).tar.z:
	cd ../..; rm -f $(DIST_NAME); ln -s devo $(DIST_NAME)
	make diststuff -f Makefile.in
	cd ../texinfo; mv texinfo.tex ..; rm -rf *; mv ../texinfo.tex .
	# Take out texinfo from configurable dirs
	mv ../configure.in tmp; \
	  sed -e '/^host_tools=/s/texinfo //' <tmp >../configure.in; rm tmp
	cd ..; chmod og=u `find . -print`
	cd ../..; tar chf - $(DIST_NAME) | gzip >$(DIST_NAME).tar.z
	rm -rf ../../$(DIST_NAME)

# Dummy target to force execution of dependent targets.
#
force:

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

config.h: stamp-h ; @true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

grez.c:	grez.h
rez.y:	grez.h

### Local Variables: ***
### mode:fundamental ***
### page-delimiter: "^#" ***
### End: ***
### end of file
