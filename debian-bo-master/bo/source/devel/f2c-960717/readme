
====== old index for f2c, now "readme from f2c" ============

FILES:

f2c.h	Include file necessary for compiling output of the converter.
	See the second NOTE below.

f2c.1	Man page for f2c.

f2c.1t	Source for f2c.1 (to be processed by troff -man or nroff -man).

libf77	Library of non I/O support routines the generated C may need.
	Fortran main programs result in a C function named MAIN__ that
	is meant to be invoked by the main() in libf77.

libi77	Library of Fortran I/O routines the generated C may need.
	Note that some vendors (e.g., BSD, Sun and MIPS) provide a
	libF77 and libI77 that are incompatible with f2c -- they
	provide some differently named routines or routines with the
	names that f2c expects, but with different calling sequences.
	On such systems, the recommended procedure is to merge
	libf77 and libi77 into a single library, say libf2c, and to
        install it where you can access it by specifying -lf2c .  The
        definition of link_msg in sysdep.c assumes this arrangement.

	Both libf77 and libi77 are bundles, meant to be unpacked by the
	Bourne (or Korn) shell.  MS-DOS users can use the MKS Toolkit
	to unpack libf77 and libi77.

f2c.ps	Postscript for a technical report on f2c.  After you strip the
	mail header, the first line should be "%!PS".

fixes	The complete change log, reporting bug fixes and other changes.
	(Some recent change-log entries are given below).

fc	A shell script that uses f2c and imitates much of the behavior
	of commonly found f77 commands.  You will almost certainly
	need to adjust some of the shell-variable assignments to make
	this script work on your system.


SUBDIRECTORY:

f2c/src	Source for the converter itself, including a file of checksums
	and source for a program to compute the checksums (to verify
	correct transmission of the source), is available: ask netlib
	(e.g., netlib@netlib.bell-labs.com) to
		send all from f2c/src
	If the checksums show damage to just a few source files, or if
	the change log file (see "fixes" below) reports corrections to
	some source files, you can request those files individually
	"from f2c/src".  For example, to get defs.h and xsum0.out, you
	would ask netlib to
		send defs.h xsum0.out from f2c/src
	"all from f2c/src" is about 640 kilobytes long; for convenience
	(and checksums), it includes copies of f2c.h, f2c.1, and f2c.1t.

	Tip: if asked to send over 99,000 bytes in one request, netlib
	breaks the shipment into 1000 line pieces and sends each piece
	separately (since otherwise some mailers might gag).  To avoid
	the hassle of reassembling the pieces, try to keep each request
	under 99,000 bytes long.  The final number in each line of
	xsum0.out gives the length of each file in f2c/src.  For
	example,
		send exec.c expr.c from f2c/src
		send format.c format_data.c from f2c/src
	will give you slightly less hassle than
		send exec.c expr.c format.c format_data.c from f2c/src
	Alternatively, if all the mailers in your return path allow
	long messages, you can supply an appropriate mailsize line in
	your netlib request, e.g.
		mailsize 200k
		send exec.c expr.c format.c format_data.c from f2c/src

	If you have trouble generating gram.c, you can ask netlib to
		send gram.c from f2c/src
	Then `xsum gram.c` should report
		gram.c	1814e302	57355

NOTE:	For now, you may exercise f2c by sending netlib a message whose
	first line is "execute f2c" and whose remaining lines are
	the Fortran 77 source that you wish to have converted.
	Return mail brings you the resulting C, with f2c's error
	messages between #ifdef uNdEfInEd and #endif at the end.
	(To understand line numbers in the error messages, regard
	the "execute f2c" line as line 0.  It is stripped away by
	the netlib software before f2c sees your Fortran input.)
	Options described in the man page may be transmitted to
	netlib by having the first line of input be a comment
	whose first 6 characters are "c$f2c " and whose remaining
	characters are the desired options, e.g., "c$f2c -R -u".

	You may say "execute f2c" in the Subject line instead of (but
	*not* in addition to) in the first line of the message body.

	The incoming Fortran is saved, at least for a while.  Don't
	send any secrets!


BUGS:	Please send bug reports (including the shortest example
	you can find that illustrates the bug) to research!dmg
	or dmg@bell-labs.com .  You might first check whether
	the bug goes away when you turn optimization off.


NOTE:	f2c.h defines several types, e.g., real, integer, doublereal.
	The definitions in f2c.h are suitable for most machines, but if
	your machine has sizeof(double) > 2*sizeof(long), you may need
	to adjust f2c.h appropriately.  f2c assumes
		sizeof(doublecomplex) = 2*sizeof(doublereal)
		sizeof(doublereal) = sizeof(complex)
		sizeof(doublereal) = 2*sizeof(real)
		sizeof(real) = sizeof(integer)
		sizeof(real) = sizeof(logical)
		sizeof(real) = 2*sizeof(shortint)
	EQUIVALENCEs may not be translated correctly if these
	assumptions are violated.

	On machines, such as those using a DEC Alpha processor, on
	which sizeof(short) == 2, sizeof(int) == sizeof(float) == 4,
	and sizeof(long) == sizeof(double) == 8, it suffices to
	modify f2c.h by removing the first occurrence of "long "
	on each line containing "long ", e.g., by issuing the
	commands
		mv f2c.h f2c.h0
		sed 's/long //' f2c.h0 >f2c.h
	On such machines, one can enable INTEGER*8 by uncommenting
	the typedef of longint in f2c.h, so it reads
		typedef long longint;
	by compiling libI77 with -DAllow_TYQUAD, and by adjusting
	libF77/makefile as described in libF77/README.

	Some machines may have sizeof(int) == 4 and
	sizeof(long long) == 8.  On such machines, adjust f2c.h
	by changing "long int " to "long long ", e.g., by saying
		mv f2c.h f2c.h0
		sed 's/long int /long long /' f2c.h0 >f2c.h
	One can enable INTEGER*8 on such machines as described
	above, but with
		typedef long long longint;

	There exists a C compiler that objects to the lines
		typedef VOID C_f;	/* complex function */
		typedef VOID H_f;	/* character function */
		typedef VOID Z_f;	/* double complex function */
	in f2c.h .  If yours is such a compiler, do two things:
	1. Complain to your vendor about this compiler bug.
	2. Find the line
		#define VOID void
	   in f2c.h and change it to
		#define VOID int
	(For readability, the f2c.h lines shown above have had two
	tabs inserted before their first character.)

FTP:	All the material described above is now available by anonymous
	ftp from netlib.bell-labs.com (login: anonymous; Password: your
	E-mail address; cd netlib/f2c).  Note that you can say, e.g.,

		cd /netlib/f2c/src
		binary
		prompt
		mget *.Z

	to get all the .Z files in src.  You must uncompress the .Z
	files once you have a copy of them, e.g., by

		uncompress *.Z

	Subdirectory msdos contains two PC versions of f2c,
	f2c.exe.Z and f2cx.exe.Z; the latter uses extended memory.
	The README in that directory provides more details.

	Changes appear first in the f2c files available by E-mail
	from netlib@netlib.bell-labs.com.  If the deamons work right,
	changed files are available the next day by ftp from
	netlib.bell-labs.com.  In due course, they reach other netlib servers.

CHANGE NOTIFICATION:
	Send the E-mail message
		subscribe f2c
	to netlib@netlib.bell-labs.com to request notification of new and
	changed f2c files.  (Beware that automatically sent change
	notifications may reach you before changes have reached
	ftp://netlib.bell-labs.com/netlib/f2c or to other netlib servers.)
	Send the E-mail message
		unsubscribe f2c
	to recant your notification request.

-----------------
Recent change log (partial)
-----------------

Sun Nov 13 13:09:38 EST 1994
  Turn off constant folding of integers used in floating-point
expressions, so the assignment in
	subroutine foo(x)
	double precision x
	x = x*1000000*500000
	end
is rendered as
	*x = *x * 1000000 * 500000;
rather than as
	*x *= 1783793664;

Thu Dec 15 14:33:55 EST 1994
  New command-line option -Idir specifies directories in which to
look for non-absolute include files (after looking in the directory
of the current input file).  There can be several -Idir options, each
specifying one directory.  All -Idir options are considered, from
left to right, until a suitably named file is found.  The -I2 and -I4
command-line options have precedence, so directories named 2 or 4
must be spelled by some circumlocution, such as -I./2 .
  f2c.ps updated to mention the new -Idir option, correct a typo,
and bring the man page at the end up to date.
  lex.c: fix bug in reading line numbers in #line lines.
  fc updated to pass -Idir options to f2c.

Mon Jan  2 13:27:26 EST 1995
  Retain casts for SNGL (or FLOAT) that were erroneously optimized
away.  Example:
	subroutine foo(a,b)
	double precision a,b
	a = float(b)	! now rendered as *a = (real) (*b);
	end
  Use float (rather than double) temporaries in certain expressions
of type complex.  Example: the temporary for sngl(b) in
	complex a
	double precision b
	a = sngl(b) - (3.,4.)
is now of type float.

Thu Jan 12 12:31:35 EST 1995
  Adjust -krd to use double temporaries in some calculations of
type complex.
  libf77: pow_[dhiqrz][hiq].c: adjust x**i to work on machines
that sign-extend right shifts when i is the most negative integer.

Wed Jan 25 00:14:42 EST 1995
  Fix memory fault in handling overlapping initializations in
	block data
	common /zot/ d
	double precision d(3)
	character*6 v(4)
	real r(2)
	equivalence (d(3),r(1)), (d(1),v(1))
	data v/'abcdef', 'ghijkl', 'mnopqr', 'stuvwx'/
	data r/4.,5./
	end
  names.c: add "far", "huge", "near" to c_keywords (causing them
to have __ appended when used as local variables).
  libf77: add s_copyow.c, an alternative to s_copy.c for handling
(illegal) character assignments where the right- and left-hand
sides overlap, as in a(2:4) = a(1:3).

Thu Jan 26 14:21:19 EST 1995
  libf77: roll s_catow.c and s_copyow.c into s_cat.c and s_copy.c,
respectively, allowing the left-hand side of a character assignment
to appear on its right-hand side unless s_cat.c and s_copy.c are
compiled with -DNO_OVERWRITE (which is a bit more efficient).
Fortran 77 forbids the left-hand side from participating in the
right-hand side (of a character assignment), but Fortran 90 allows it.
  libi77: wref.c: fix glitch in printing the exponent of 0 when
GOOD_SPRINTF_EXPONENT is not #defined.

Fri Jan 27 12:25:41 EST 1995
  Under -C++ -ec (or -C++ -e1c), surround struct declarations with
	#ifdef __cplusplus
	extern "C" {
	#endif
and
	#ifdef __cplusplus
	}
	#endif
(This isn't needed with cfront, but apparently is necessary with
some other C++ compilers.)
  libf77: minor tweak to s_copy.c: copy forward whenever possible
(for better cache behavior).

Sat Feb 11 08:57:39 EST 1995
  Complain about integer overflows, both in simplifying integer
expressions, and in converting integers from decimal to binary.
  Fix a memory fault in putcx1() associated with invalid input.

Fri Feb 24 11:02:00 EST 1995
  libi77: iio.c: z_getc: insert (unsigned char *) to allow internal
reading of characters with high-bit set (on machines that sign-extend
characters).

Tue Mar 14 18:22:42 EST 1995
  Fix glitch (in io.c) in handling 0-length strings in format
statements, as in
	write(*,10)
 10	format(' ab','','cd')
  libi77: lread.c and rsfe.c: adjust s_rsle and s_rsfe to check for
end-of-file (to prevent infinite loops with empty read statements).

Wed Mar 22 10:01:46 EST 1995
  f2c.ps: adjust discussion of -P on p. 7 to reflect a change made
3 Feb. 1993: -P no longer implies -A.

Fri Apr 21 18:35:00 EDT 1995
  fc script: remove absolute paths (since PATH specifies only standard
places).  On most systems, it's still necessary to adjust the PATH
assignment at the start of fc to fit the local conventions.

Fri May 26 10:03:17 EDT 1995
  fc script: add recognition of -P and .P files.
  libi77: iio.c: z_wnew: fix bug in handling T format items in internal
writes whose last item is written to an earlier position than some
previous item.

Wed May 31 11:39:48 EDT 1995
  libf77: added subroutine exit(rc) (with integer return code rc),
which works like a stop statement but supplies rc as the program's
return code.

Fri Jun  2 11:56:50 EDT 1995
  Fix memory fault in
	parameter (x=2.)
	data x /2./
	end
This now elicits two error messages; the second ("too many
initializers"), though not desirable, seems hard to eliminate
without considerable hassle.

Mon Jul 17 23:24:20 EDT 1995
  Fix botch in simplifying constants in certain complex
expressions.  Example:
	subroutine foo(s,z)
	double complex z
	double precision s, M, P
	parameter ( M = 100.d0, P = 2.d0 )
	z = M * M  / s  * dcmplx (1.d0, P/M)
*** The imaginary part of z was miscomputed ***
	end
  Under -ext, complain about nonintegral dimensions.

Fri Jul 21 14:55:59 EDT 1995
  Fix glitch on line 159 of init.c: change
	"(shortlogical *)0)",
to
	"(shortlogical *)0",
This affects multiple entry points when some but not all have
arguments of type logical*2.
  libi77: adjust lwrite.c, wref.c, wrtfmt.c so compiling with
-DWANT_LEAD_0 causes formatted writes of floating-point numbers of
magnitude < 1 to have an explicit 0 before the decimal point (if the
field-width permits it).  Note that the Fortran 77 Standard leaves it
up to the implementation whether to supply these superfluous zeros.

Tue Aug  1 09:25:56 EDT 1995
  Permit real (or double precision) parameters in dimension expressions.

Mon Aug  7 08:04:00 EDT 1995
  Append "_eqv" rather than just "_" to names that that appear in
EQUIVALENCE statements as well as structs in f2c.h (to avoid a
conflict when these names also name common blocks).

Tue Aug  8 12:49:02 EDT 1995
  Modify yesterday's change: merge st_fields with c_keywords, to
cope with equivalences introduced to permit initializing numeric
variables with character data.  DATA statements causing these
equivalences can appear after executable statements, so the only
safe course is to rename all local variable with names in the
former st_fields list.  This has the unfortunate side effect that
the common local variable "i" will henceforth be renamed "i__".

Wed Aug 30 00:19:32 EDT 1995
  libf77: add F77_aloc, now used in s_cat and system_ (to allocate
memory and check for failure in so doing).
  libi77: improve MSDOS logic in backspace.c.

Wed Sep  6 09:06:19 EDT 1995
  libf77: Fix return type of system_ (integer) under -DKR_headers.
  libi77: Move some f_init calls around for people who do not use
libF77's main(); now open and namelist read statements that are the
first I/O statements executed should work right in that context.
Adjust namelist input to treat a subscripted name whose subscripts do
not involve colons similarly to the name without a subscript:  accept
several values, stored in successive elements starting at the
indicated subscript.  Adjust namelist output to quote character
strings (avoiding confusion with arrays of character strings).

Thu Sep  7 00:36:04 EDT 1995
  Fix glitch in integer*8 exponentiation function: it's pow_qq, not
pow_qi.
  libi77: fix some bugs with -DAllow_TYQUAD (for integer*8); when
looking for the &name that starts NAMELIST input, treat lines whose
first nonblank character is something other than &, $, or ? as
comment lines (i.e., ignore them), unless rsne.c is compiled with
-DNo_Namelist_Comments.

Thu Sep  7 09:05:40 EDT 1995
  libi77: rdfmt.c:  one more tweak for -DAllow_TYQUAD.

Tue Sep 19 00:03:02 EDT 1995
  Adjust handling of floating-point subscript bounds (a questionable
f2c extension) so subscripts in the generated C are of integral type.
  Move #define of roundup to proc.c (where its use is commented out);
version.c left at 19950918.

Wed Sep 20 17:24:19 EDT 1995
  Fix bug in handling ichar() under -h.

Thu Oct  5 07:52:56 EDT 1995
  libi77: wrtfmt.c: fix bug with t editing (f__cursor was not always
zeroed in mv_cur).

Tue Oct 10 10:47:54 EDT 1995
  Under -ext, warn about X**-Y and X**+Y.  Following the original f77,
f2c treats these as X**(-Y) and X**(+Y), respectively.  (They are not
allowed by the official Fortran 77 Standard.)  Some Fortran compilers
give a bizarre interpretation to larger contexts, making multiplication
noncommutative: they treat X**-Y*Z as X**(-Y*Z) rather than X**(-Y)*Z,
which, following the rules of Fortran 77, is the same as (X**(-Y))*Z.

Wed Oct 11 13:27:05 EDT 1995
  libi77: move defs of f__hiwater, f__svic, f__icptr from wrtfmt.c
to err.c.  This should work around a problem with buggy loaders and
sometimes leads to smaller executable programs.

Sat Oct 21 23:54:22 EDT 1995
  Under -h, fix bug in the treatment of ichar('0') in arithmetic
expressions.
  Demote to -dneg (a new command-line option not mentioned in the
man page) imitation of the original f77's treatment of unary minus
applied to a REAL operand (yielding a DOUBLE PRECISION result).
Previously this imitation (which was present for debugging) occurred
under (the default) -!R.  It is still suppressed by -R.

Tue Nov  7 23:52:57 EST 1995
  Adjust assigned GOTOs to honor SAVE declarations.
  Add comments about ranlib to lib[FI]77/README and makefile.

Tue Nov 21 16:22:16 EST 1995
  libf77: makefile: fix glitch ordering of lines for "make check".

Wed Nov 29 10:25:17 EST 1995
  Tweak README: for KR compilers, one can modify the CFLAGS assignment
in the makefile before "make xsum.out" or "make xsum".
  makefile: omit unused "bundle" rule.

Tue Dec 19 22:54:06 EST 1995
  libf77: s_cat.c: fix bug when 2nd or later arg overlaps lhs.

Tue Jan  2 17:54:00 EST 1996
  libi77: rdfmt.c: move #include "ctype.h" up before "stdlib.h"; no
change to Version.c.

Sun Feb 25 22:20:20 EST 1996
  Adjust expr.c to permit raising the integer constants 1 and -1 to
negative constant integral powers.
  Avoid faulting when -T and -d are not followed by a directory name
(immediately, without intervening spaces).

Wed Feb 28 12:49:01 EST 1996
  Fix a glitch in handling complex parameters assigned a "wrong" type.
Example:
	complex d, z
	parameter(z = (0d0,0d0))
	data d/z/	! elicited "non-constant initializer"
	call foo(d)
	end

Thu Feb 29 00:53:12 EST 1996
  Fix bug in handling character parameters assigned a char() value.
Example:
	character*2 b,c
	character*1 esc
	parameter(esc = char(27))
	integer i
	data (b(i:i),i=1,2)/esc,'a'/
	data (c(i:i),i=1,2)/esc,'b'/	! memory fault
	call foo(b,c)
	end

Fri Mar  1 23:44:51 EST 1996
  Fix glitch in evaluating .EQ. and .NE. when both operands are
logical constants (.TRUE. or .FALSE.).

Fri Mar 15 17:29:54 EST 1996
  libi77: lread.c, rsfe.c: honor END= in READ stmts with empty iolist.

Tue Mar 19 23:08:32 EST 1996
  lex.c: arrange for a "statement" consisting of a single short bogus
keyword to elicit an error message showing the whole keyword.  The
error message formerly omitted the last letter of the bad keyword.
  libf77: s_cat.c: supply missing break after overlap detection.

Mon May 13 23:35:26 EDT 1996
  Recognize Fortran 90's /= as a synonym for .NE..  (<> remains a
synonym for .NE..)
  Emit an empty int function of no arguments to supply an external
name to named block data subprograms (so they can be mentioned in
external statements in other programs).
  Fix bug (memory fault) in handling the following illegal Fortran:
	parameter(i=1)
	equivalence(i,j)
	end
  Treat cdabs, cdcos, cdexp, cdlog, cdsin, and cdsqrt as synonyms for
the double complex intrinsics zabs, zcos, zexp, zlog, zsin, and zsqrt,
respectively, unless -cd is specified.
  Recognize the Fortran 90 bit-manipulation intrinsics btest, iand,
ibclr, ibits, ibset, ieor, ior, ishft, and ishftc, unless -i90 is
specified.  Note that iand, ieor, and ior are thus now synonyms for
"and", "xor", and "or", respectively.
  Add three macros (bit_test, bit_clear, bit_set) to f2c.h for use
with btest, ibclr, and ibset, respectively.  Add new functions
[lq]bit_bits, [lq]bit_shift, and [lq]_bit_cshift to libF77 for
use with ibits, ishft, and ishftc, respectively.
  Add integer function ftell(unit) (returning -1 on error) and
subroutine fseek(unit, offset, whence, *) to libI77 (with branch to
label * on error).

Tue May 14 23:21:12 EDT 1996
  Fix glitch (possible memory fault, or worse) in handling multiple
entry points with names over 28 characters long.

Mon Jun 10 01:20:16 EDT 1996
  Update netlib E-mail and ftp addresses in f2c/readme and
f2c/src/readme (which are different files) -- to reflect the upcoming
breakup of AT&T.
  libf77: trivial tweaks to F77_aloc.c and system_.c; Version.c not
changed.
  libi77: Adjust rsli.c and lread.c so internal list input with too
few items in the input string will honor end= .

Mon Jun 10 22:59:57 EDT 1996
  Add Bits_per_Byte to sysdep.h and adjust definition of Table_size
to depend on Bits_per_Byte (forcing Table_size to be a power of 2); in
lex.c, change "comstart[c & 0xfff]" to "comstart[c & (Table_size-1)]"
to avoid an out-of-range subscript on end-of-file.

Wed Jun 12 00:24:28 EDT 1996
  Fix bug in output.c (dereferencing a freed pointer) revealed in
	print *		!np in out_call in output.c clobbered by free
	end		!during out_expr.

Wed Jun 19 08:12:47 EDT 1996
  f2c.h: add types uinteger, ulongint (for libF77); add qbit_clear
and qbit_set macros (in a commented-out section) for integer*8.
  For integer*8, use qbit_clear and qbit_set for ibclr and ibset.
  libf77: add casts to unsigned in [lq]bitshft.c.

Thu Jun 20 13:30:43 EDT 1996
  Complain at character*(*) in common (rather than faulting).
  Fix bug in recognizing hex constants that start with "16#" (e.g.,
16#1234abcd, which is a synonym for z'1234abcd').
  Fix bugs in constant folding of expressions involving btest, ibclr,
and ibset.
  Fix bug in constant folding of rshift(16#80000000, -31) (on a 32-bit
machine; more generally, the bug was in constant folding of
rshift(ibset(0,NBITS-1), 1-NBITS) when f2c runs on a machine with
long ints having NBITS bits.

Mon Jun 24 07:58:53 EDT 1996
  Adjust struct Literal and newlabel() function to accommodate huge
source files (with more than 32767 newlabel() invocations).
  Omit .c file when the .f file has a missing final end statement.

Wed Jun 26 14:00:02 EDT 1996
  libi77: Add discussion of MXUNIT (highest allowed Fortran unit number)
to libI77/README.

Fri Jun 28 14:16:11 EDT 1996
  Fix glitch with -onetrip: the temporary variable used for nonconstant
initial loop variable values was recycled too soon.  Example:
	do i = j+1, k
		call foo(i+1)	! temp for j+1 was reused here
		enddo
	end

Tue Jul  2 16:11:27 EDT 1996
  formatdata.c: add a 0 to the end of the basetype array (for TYBLANK)
(an omission that was harmless on most machines).
  expr.c: fix a dereference of NULL that was only possible with buggy
input, such as
	subroutine $sub(s)	! the '$' is erroneous
	character s*(*)
	s(1:) = ' '
	end

Sat Jul  6 00:44:56 EDT 1996
  Fix glitch in the intrinsic "real" function when applied to a
complex (or double complex) variable and passed as an argument to
some intrinsic functions.  Example:
	complex a
	b = sqrt(real(a))
	end
  Fix glitch (only visible if you do not use f2c's malloc and the
malloc you do use is defective in the sense that malloc(0) returns 0)
in handling include files that end with another include (perhaps
followed by comments).
  Fix glitch with character*(*) arguments named "h" and "i" when
the body of the subroutine invokes the intrinsic LEN function.
  Arrange that after a previous "f2c -P foo.f" has produced foo.P,
running "f2c foo.P foo.f" will produce valid C when foo.f contains
	call sub('1234')
	end
	subroutine sub(msg)
	end
Specifically, the length argument in "call sub" is now suppressed.
With or without foo.P, it is also now suppressed when the order of
subprograms in file foo.f is reversed:
	subroutine sub(msg)
	end
	call sub('1234')
	end
  Adjust copyright notices to reflect AT&T breakup.

Wed Jul 10 09:25:49 EDT 1996
  Fix bug (possible memory fault) in handling erroneously placed
and inconsistent declarations.  Example that faulted:
	character*1 w(8)
	call foo(w)
	end
	subroutine foo(m)
	data h /0.5/
	integer m(2)	! should be before data
	end
  Fix bug (possible fault) in handling illegal "if" constructions.
Example (that faulted):
	subroutine foo(i,j)
	if (i) then		! bug: i is integer, not logical
	else if (j) then	! bug: j is integer, not logical
	endif
	end
  Fix glitch with character*(*) argument named "ret_len" to a
character*(*) function.

Wed Jul 10 23:04:16 EDT 1996
  Fix more glitches in the intrinsic "real" function when applied to a
complex (or double complex) variable and passed as an argument to
some intrinsic functions.  Example:
	complex a, b
	r = sqrt(real(conjg(a))) + sqrt(real(a*b))
	end

Thu Jul 11 17:27:16 EDT 1996
  Fix a memory fault associated with complicated, illegal input.
Example:
	subroutine goo
	character a
	call foo(a)	! inconsistent with subsequent def and call
	end
	subroutine foo(a)
	end
	call foo(a)
	end

Wed Jul 17 19:18:28 EDT 1996
  Fix yet another case of intrinsic "real" applied to a complex
argument.  Example:
	complex a(3)
	x = sqrt(real(a(2)))	! gave error message about bad tag
	end


Current timestamps of files in "all from f2c/src", sorted by time,
appear below (mm/dd/year hh:mm:ss).  To bring your source up to date,
obtain source files with a timestamp later than the time shown in your
version.c.  Note that the time shown in the current version.c is the
timestamp of the source module that immediately follows version.c below:

 7/10/1996  23:03:16  xsum0.out
 7/10/1996  16:31:20  version.c
 7/10/1996  16:31:17  output.c
 7/10/1996  16:20:02  putpcc.c
 7/09/1996  10:41:13  format.c
 7/09/1996  10:40:45  names.c
 7/09/1996  10:30:56  proc.c
 7/05/1996   9:13:32  README
 7/05/1996   8:28:05  lex.c
 7/04/1996   9:58:31  formatdata.c
 7/04/1996   9:58:31  expr.c
 7/04/1996   9:55:46  vax.c
 7/04/1996   9:55:45  sysdep.h
 7/04/1996   9:55:45  sysdep.c
 7/04/1996   9:55:43  put.c
 7/04/1996   9:55:41  pread.c
 7/04/1996   9:55:40  parse_args.c
 7/04/1996   9:55:40  p1output.c
 7/04/1996   9:55:38  niceprintf.c
 7/04/1996   9:55:37  misc.c
 7/04/1996   9:55:36  memset.c
 7/04/1996   9:55:36  mem.c
 7/04/1996   9:55:35  malloc.c
 7/04/1996   9:55:35  main.c
 7/04/1996   9:55:33  io.c
 7/04/1996   9:55:32  init.c
 7/04/1996   9:55:32  intr.c
 7/04/1996   9:55:30  exec.c
 7/04/1996   9:55:29  equiv.c
 7/04/1996   9:55:29  error.c
 7/04/1996   9:55:28  data.c
 7/04/1996   9:55:28  defs.h
 7/04/1996   9:55:27  cds.c
 7/03/1996  15:47:49  xsum.c
 6/19/1996   7:04:27  f2c.h
 6/19/1996   2:52:05  defines.h
 5/13/1996   0:40:32  gram.head
 5/13/1996   0:40:31  gram.dcl
 5/12/1996  23:37:11  f2c.1
 5/12/1996  23:37:02  f2c.1t
11/29/1995  10:24:13  makefile
 1/02/1995   8:45:01  Notice
 2/25/1994   2:07:19  parse.h
 2/22/1994  19:07:20  iob.h
 2/22/1994  18:56:53  p1defs.h
 2/22/1994  18:53:46  output.h
 2/22/1994  18:51:14  names.h
 2/22/1994  18:30:41  format.h
 1/18/1994  18:12:52  tokens
 3/06/1993  14:13:58  gram.expr
 3/04/1993  14:59:25  gram.exec
 1/28/1993   9:03:16  ftypes.h
 4/06/1990   0:00:57  gram.io
 2/03/1990   0:58:26  niceprintf.h
 1/07/1990   1:20:01  usignal.h
11/27/1989   8:27:37  machdefs.h
 7/01/1989  11:59:44  pccdefs.h
