This is Info file ld.info, produced by Makeinfo-1.64 from the input
file /home/work/linux/src/binutils/ld/ld.texinfo.

START-INFO-DIR-ENTRY
* Ld: (ld).                       The GNU linker.
END-INFO-DIR-ENTRY

   This file documents the GNU linker LD.

   Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation,
Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: ld.info,  Node: Canonical format,  Prev: BFD information loss,  Up: BFD outline

The BFD canonical object-file format
------------------------------------

   The greatest potential for loss of information occurs when there is
the least overlap between the information provided by the source
format, that stored by the canonical format, and that needed by the
destination format. A brief description of the canonical form may help
you understand which kinds of data you can count on preserving across
conversions.

*files*
     Information stored on a per-file basis includes target machine
     architecture, particular implementation format type, a demand
     pageable bit, and a write protected bit.  Information like Unix
     magic numbers is not stored here--only the magic numbers' meaning,
     so a `ZMAGIC' file would have both the demand pageable bit and the
     write protected text bit set.  The byte order of the target is
     stored on a per-file basis, so that big- and little-endian object
     files may be used with one another.

*sections*
     Each section in the input file contains the name of the section,
     the section's original address in the object file, size and
     alignment information, various flags, and pointers into other BFD
     data structures.

*symbols*
     Each symbol contains a pointer to the information for the object
     file which originally defined it, its name, its value, and various
     flag bits.  When a BFD back end reads in a symbol table, it
     relocates all symbols to make them relative to the base of the
     section where they were defined.  Doing this ensures that each
     symbol points to its containing section.  Each symbol also has a
     varying amount of hidden private data for the BFD back end.  Since
     the symbol points to the original file, the private data format
     for that symbol is accessible.  `ld' can operate on a collection
     of symbols of wildly different formats without problems.

     Normal global and simple local symbols are maintained on output,
     so an output file (no matter its format) will retain symbols
     pointing to functions and to global, static, and common variables.
     Some symbol information is not worth retaining; in `a.out', type
     information is stored in the symbol table as long symbol names.
     This information would be useless to most COFF debuggers; the
     linker has command line switches to allow users to throw it away.

     There is one word of type information within the symbol, so if the
     format supports symbol type information within symbols (for
     example, COFF, IEEE, Oasys) and the type is simple enough to fit
     within one word (nearly everything but aggregates), the
     information will be preserved.

*relocation level*
     Each canonical BFD relocation record contains a pointer to the
     symbol to relocate to, the offset of the data to relocate, the
     section the data is in, and a pointer to a relocation type
     descriptor. Relocation is performed by passing messages through
     the relocation type descriptor and the symbol pointer. Therefore,
     relocations can be performed on output data using a relocation
     method that is only available in one of the input formats. For
     instance, Oasys provides a byte relocation format.  A relocation
     record requesting this relocation type would point indirectly to a
     routine to perform this, so the relocation may be performed on a
     byte being written to a 68k COFF file, even though 68k COFF has no
     such relocation type.

*line numbers*
     Object formats can contain, for debugging purposes, some form of
     mapping between symbols, source line numbers, and addresses in the
     output file.  These addresses have to be relocated along with the
     symbol information.  Each symbol with an associated list of line
     number records points to the first record of the list.  The head
     of a line number list consists of a pointer to the symbol, which
     allows finding out the address of the function whose line number
     is being described. The rest of the list is made up of pairs:
     offsets into the section and line numbers. Any format which can
     simply derive this information can pass it successfully between
     formats (COFF, IEEE and Oasys).


File: ld.info,  Node: Reporting Bugs,  Next: MRI,  Prev: BFD,  Up: Top

Reporting Bugs
**************

   Your bug reports play an essential role in making `ld' reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of `ld' work
better.  Bug reports are your contribution to the maintenance of `ld'.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs


File: ld.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs

Have you found a bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the linker gets a fatal signal, for any input whatever, that is
     a `ld' bug.  Reliable linkers never crash.

   * If `ld' produces an error message for valid input, that is a bug.

   * If `ld' does not produce an error message for invalid input, that
     may be a bug.  In the general case, the linker can not verify that
     object files are correct.

   * If you are an experienced user of linkers, your suggestions for
     improvement of `ld' are welcome in any case.


File: ld.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

How to report bugs
==================

   A number of companies and individuals offer support for GNU
products.  If you obtained `ld' from a support organization, we
recommend you contact that organization first.

   You can find contact information for many support companies and
individuals in the file `etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for `ld'
to `bug-gnu-utils@prep.ai.mit.edu'.

   The fundamental principle of reporting bugs usefully is this:
*report all the facts*.  If you are not sure whether to state a fact or
leave it out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the linker into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  Those bug reports are useless, and we urge everyone to *refuse
to respond to them* except to chide the sender to report bugs properly.

   To enable us to fix the bug, you should include all these things:

   * The version of `ld'.  `ld' announces it if you start it with the
     `--version' argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of `ld'.

   * Any patches you may have applied to the `ld' source, including any
     patches made to the `BFD' library.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile `ld'--e.g.
     "`gcc-2.7'".

   * The command arguments you gave the linker to link your example and
     observe the bug.  To guarantee you will not omit something
     important, list them all.  A copy of the Makefile (or the output
     from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file, or set of input files, that will reproduce
     the bug.  It is generally most helpful to send the actual object
     files, uuencoded if necessary to get them through the mail system.
     Making them available for anonymous FTP is not as good, but may
     be the only reasonable choice for large object files.

     If the source files were assembled using `gas' or compiled using
     `gcc', then it may be OK to send the source files rather than the
     object files.  In this case, be sure to say exactly what version of
     `gas' or `gcc' was used to produce the object files.  Also say how
     `gas' or `gcc' were configured.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that `ld' gets a fatal signal, then we
     will certainly notice it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.  You might as well
     not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of `ld' is out of synch, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and ours would not.  If you told
     us to expect a crash, then when ours fails to crash, we would know
     that the bug was not happening for us.  If you had not told us to
     expect a crash, then we would not be able to draw any conclusion
     from our observations.

   * If you wish to suggest changes to the `ld' source, send us context
     diffs, as generated by `diff' with the `-u', `-c', or `-p' option.
     Always send diffs from the old file to the new file.  If you even
     discuss something in the `ld' source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report *instead*
     of the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as `ld' it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify
     that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


File: ld.info,  Node: MRI,  Next: Index,  Prev: Reporting Bugs,  Up: Top

MRI Compatible Script Files
***************************

   To aid users making the transition to GNU `ld' from the MRI linker,
`ld' can use MRI compatible linker scripts as an alternative to the
more general-purpose linker scripting language described in *Note
Command Language: Commands.  MRI compatible linker scripts have a much
simpler command set than the scripting language otherwise used with
`ld'.  GNU `ld' supports the most commonly used MRI linker commands;
these commands are described here.

   In general, MRI scripts aren't of much use with the `a.out' object
file format, since it only has three sections and MRI scripts lack some
features to make use of them.

   You can specify a file containing an MRI-compatible script using the
`-c' command-line option.

   Each command in an MRI-compatible script occupies its own line; each
command line starts with the keyword that identifies the command (though
blank lines are also allowed for punctuation).  If a line of an
MRI-compatible script begins with an unrecognized keyword, `ld' issues
a warning message, but continues processing the script.

   Lines beginning with `*' are comments.

   You can write these commands using all upper-case letters, or all
lower case; for example, `chip' is the same as `CHIP'.  The following
list shows only the upper-case form of each command.

`ABSOLUTE SECNAME'
`ABSOLUTE SECNAME, SECNAME, ... SECNAME'
     Normally, `ld' includes in the output file all sections from all
     the input files.  However, in an MRI-compatible script, you can
     use the `ABSOLUTE' command to restrict the sections that will be
     present in your output program.  If the `ABSOLUTE' command is used
     at all in a script, then only the sections named explicitly in
     `ABSOLUTE' commands will appear in the linker output.  You can
     still use other input sections (whatever you select on the command
     line, or using `LOAD') to resolve addresses in the output file.

`ALIAS OUT-SECNAME, IN-SECNAME'
     Use this command to place the data from input section IN-SECNAME
     in a section called OUT-SECNAME in the linker output file.

     IN-SECNAME may be an integer.

`ALIGN SECNAME = EXPRESSION'
     Align the section called SECNAME to EXPRESSION.  The EXPRESSION
     should be a power of two.

`BASE EXPRESSION'
     Use the value of EXPRESSION as the lowest address (other than
     absolute addresses) in the output file.

`CHIP EXPRESSION'
`CHIP EXPRESSION, EXPRESSION'
     This command does nothing; it is accepted only for compatibility.

`END'
     This command does nothing whatever; it's only accepted for
     compatibility.

`FORMAT OUTPUT-FORMAT'
     Similar to the `OUTPUT_FORMAT' command in the more general linker
     language, but restricted to one of these output formats:

       1. S-records, if OUTPUT-FORMAT is `S'

       2. IEEE, if OUTPUT-FORMAT is `IEEE'

       3. COFF (the `coff-m68k' variant in BFD), if OUTPUT-FORMAT is
          `COFF'

`LIST ANYTHING...'
     Print (to the standard output file) a link map, as produced by the
     `ld' command-line option `-M'.

     The keyword `LIST' may be followed by anything on the same line,
     with no change in its effect.

`LOAD FILENAME'
`LOAD FILENAME, FILENAME, ... FILENAME'
     Include one or more object file FILENAME in the link; this has the
     same effect as specifying FILENAME directly on the `ld' command
     line.

`NAME OUTPUT-NAME'
     OUTPUT-NAME is the name for the program produced by `ld'; the
     MRI-compatible command `NAME' is equivalent to the command-line
     option `-o' or the general script language command `OUTPUT'.

`ORDER SECNAME, SECNAME, ... SECNAME'
`ORDER SECNAME SECNAME SECNAME'
     Normally, `ld' orders the sections in its output file in the order
     in which they first appear in the input files.  In an
     MRI-compatible script, you can override this ordering with the
     `ORDER' command.  The sections you list with `ORDER' will appear
     first in your output file, in the order specified.

`PUBLIC NAME=EXPRESSION'
`PUBLIC NAME,EXPRESSION'
`PUBLIC NAME EXPRESSION'
     Supply a value (EXPRESSION) for external symbol NAME used in the
     linker input files.

`SECT SECNAME, EXPRESSION'
`SECT SECNAME=EXPRESSION'
`SECT SECNAME EXPRESSION'
     You can use any of these three forms of the `SECT' command to
     specify the start address (EXPRESSION) for section SECNAME.  If
     you have more than one `SECT' statement for the same SECNAME, only
     the *first* sets the start address.


File: ld.info,  Node: Index,  Prev: MRI,  Up: Top

Index
*****

* Menu:

* ":                                    Symbols.
* *( COMMON ):                          Section Placement.
* *(SECTION):                           Section Placement.
* -(:                                   Options.
* -architecture=ARCH:                   Options.
* -cref:                                Options.
* -defsym SYMBOL=EXP:                   Options.
* -discard-all:                         Options.
* -discard-locals:                      Options.
* -dynamic-linker FILE:                 Options.
* -embedded-relocs:                     Options.
* -entry=ENTRY:                         Options.
* -export-dynamic:                      Options.
* -force-exe-suffix:                    Options.
* -format=FORMAT:                       Options.
* -gpsize:                              Options.
* -help:                                Options.
* -just-symbols=FILE:                   Options.
* -library-path=DIR:                    Options.
* -library=ARCHIVE:                     Options.
* -mri-script=MRI-CMDFILE:              Options.
* -nmagic:                              Options.
* -no-keep-memory:                      Options.
* -no-whole-archive:                    Options.
* -noinhibit-exec:                      Options.
* -oformat:                             Options.
* -omagic:                              Options.
* -output=OUTPUT:                       Options.
* -print-map:                           Options.
* -relax:                               Options.
* -relocateable:                        Options.
* -script=SCRIPT:                       Options.
* -sort-common:                         Options.
* -split-by-file:                       Options.
* -split-by-reloc:                      Options.
* -stats:                               Options.
* -strip-all:                           Options.
* -strip-debug:                         Options.
* -trace:                               Options.
* -trace-symbol=SYMBOL:                 Options.
* -traditional-format:                  Options.
* -undefined=SYMBOL:                    Options.
* -verbose:                             Options.
* -version:                             Options.
* -warn-comon:                          Options.
* -warn-constructors:                   Options.
* -warn-multiple-gp:                    Options.
* -warn-once:                           Options.
* -warn-section-align:                  Options.
* -whole-archive:                       Options.
* -wrap:                                Options.
* -AARCH:                               Options.
* -aKEYWORD:                            Options.
* -assert KEYWORD:                      Options.
* -b FORMAT:                            Options.
* -Bdynamic:                            Options.
* -Bshareable:                          Options.
* -Bstatic:                             Options.
* -Bsymbolic:                           Options.
* -c MRI-CMDFILE:                       Options.
* -call_shared:                         Options.
* -d:                                   Options.
* -dc:                                  Options.
* -dn:                                  Options.
* -dp:                                  Options.
* -dy:                                  Options.
* -E:                                   Options.
* -e ENTRY:                             Options.
* -EB:                                  Options.
* -EL:                                  Options.
* -F:                                   Options.
* -g:                                   Options.
* -hNAME:                               Options.
* -i:                                   Options.
* -lARCHIVE:                            Options.
* -LDIR:                                Options.
* -M:                                   Options.
* -m EMULATION:                         Options.
* -Map:                                 Options.
* -n:                                   Options.
* -non_shared:                          Options.
* -o OUTPUT:                            Options.
* -qmagic:                              Options.
* -Qy:                                  Options.
* -r:                                   Options.
* -R FILE:                              Options.
* -rpath:                               Options.
* -rpath-link:                          Options.
* -s:                                   Options.
* -shared:                              Options.
* -soname=NAME:                         Options.
* -static:                              Options.
* -t:                                   Options.
* -T SCRIPT:                            Options.
* -Tbss ORG:                            Options.
* -Tdata ORG:                           Options.
* -Ttext ORG:                           Options.
* -u SYMBOL:                            Options.
* -Ur:                                  Options.
* -v:                                   Options.
* -x:                                   Options.
* -Y PATH:                              Options.
* -y SYMBOL:                            Options.
* -z KEYWORD:                           Options.
* .:                                    Location Counter.
* 0x:                                   Integers.
* :PHDR:                                Section Options.
* ;:                                    Assignment.
* =FILL:                                Section Options.
* >REGION:                              Section Options.
* -relax on i960:                       i960.
* [SECTION...], not supported:          Section Placement.
* ABSOLUTE (MRI):                       MRI.
* ALIAS (MRI):                          MRI.
* ALIGN (MRI):                          MRI.
* BASE (MRI):                           MRI.
* CHIP (MRI):                           MRI.
* END (MRI):                            MRI.
* FORMAT (MRI):                         MRI.
* ld bugs, reporting:                   Bug Reporting.
* LIST (MRI):                           MRI.
* LOAD (MRI):                           MRI.
* NAME (MRI):                           MRI.
* ORDER (MRI):                          MRI.
* PUBLIC (MRI):                         MRI.
* SECT (MRI):                           MRI.
* GNU linker:                           Overview.
* FILENAME:                             Section Placement.
* FILENAME(SECTION):                    Section Placement.
* SYMBOL = EXPRESSION ;:                Section Data Expressions.
* SYMBOL F= EXPRESSION ;:               Section Data Expressions.
* absolute and relocatable symbols:     Assignment.
* ABSOLUTE(EXP):                        Arithmetic Functions.
* ADDR(SECTION):                        Arithmetic Functions.
* ALIGN(EXP):                           Arithmetic Functions.
* aligning sections:                    Section Options.
* allocating memory:                    MEMORY.
* architectures:                        Options.
* archive files, from cmd line:         Options.
* arithmetic:                           Expressions.
* arithmetic operators:                 Operators.
* assignment in scripts:                Assignment.
* assignment, in section defn:          Section Data Expressions.
* AT ( LDADR ):                         Section Options.
* back end:                             BFD.
* BFD canonical format:                 Canonical format.
* BFD requirements:                     BFD.
* big-endian objects:                   Options.
* binary input files:                   Option Commands.
* binary input format:                  Options.
* BLOCK(ALIGN):                         Section Options.
* bug criteria:                         Bug Criteria.
* bug reports:                          Bug Reporting.
* bugs in ld:                           Reporting Bugs.
* BYTE(EXPRESSION):                     Section Data Expressions.
* C++ constructors, arranging in link:  Option Commands.
* combining symbols, warnings on:       Options.
* command files:                        Commands.
* command line:                         Options.
* commands, fundamental:                Scripts.
* comments:                             Scripts.
* common allocation <1>:                Option Commands.
* common allocation:                    Options.
* commons in output:                    Section Placement.
* compatibility, MRI:                   Options.
* CONSTRUCTORS:                         Option Commands.
* constructors:                         Options.
* constructors, arranging in link:      Option Commands.
* contents of a section:                Section Placement.
* crash of linker:                      Bug Criteria.
* CREATE_OBJECT_SYMBOLS:                Section Data Expressions.
* cross reference table:                Options.
* cross references:                     Option Commands.
* current output location:              Location Counter.
* dbx:                                  Options.
* decimal integers:                     Integers.
* default input format:                 Environment.
* DEFINED(SYMBOL):                      Arithmetic Functions.
* deleting local symbols:               Options.
* direct output:                        Section Data Expressions.
* discontinuous memory:                 MEMORY.
* dot:                                  Location Counter.
* dynamic linker, from command line:    Options.
* dynamic symbol table:                 Options.
* ELF program headers:                  PHDRS.
* emulation:                            Options.
* endianness:                           Options.
* entry point, defaults:                Entry Point.
* entry point, from command line:       Options.
* ENTRY(SYMBOL):                        Entry Point.
* error on valid input:                 Bug Criteria.
* expression evaluation order:          Evaluation.
* expression syntax:                    Expressions.
* expression, absolute:                 Arithmetic Functions.
* expressions in a section:             Section Data Expressions.
* fatal signal:                         Bug Criteria.
* filename symbols:                     Section Data Expressions.
* files and sections, section defn:     Section Placement.
* files, including in output sections:  Section Placement.
* fill pattern, entire section:         Section Options.
* FILL(EXPRESSION):                     Section Data Expressions.
* first input file:                     Option Commands.
* first instruction:                    Entry Point.
* FLOAT:                                Option Commands.
* FORCE_COMMON_ALLOCATION:              Option Commands.
* format, output file:                  Option Commands.
* functions in expression language:     Arithmetic Functions.
* fundamental script commands:          Scripts.
* GNUTARGET <1>:                        Option Commands.
* GNUTARGET:                            Environment.
* GROUP ( FILES ):                      Option Commands.
* grouping input files:                 Option Commands.
* groups of archives:                   Options.
* H8/300 support:                       H8/300.
* header size:                          Arithmetic Functions.
* help:                                 Options.
* hexadecimal integers:                 Integers.
* holes:                                Location Counter.
* holes, filling:                       Section Data Expressions.
* i960 support:                         i960.
* including an entire archive:          Options.
* incremental link:                     Options.
* INPUT ( FILES ):                      Option Commands.
* input file format:                    Option Commands.
* input filename symbols:               Section Data Expressions.
* input files, displaying:              Options.
* input files, section defn:            Section Placement.
* input format:                         Options.
* input sections to output section:     Section Placement.
* integer notation:                     Integers.
* integer suffixes:                     Integers.
* internal object-file format:          Canonical format.
* invalid input:                        Bug Criteria.
* K and M integer suffixes:             Integers.
* l =:                                  MEMORY.
* L, deleting symbols beginning:        Options.
* layout of output file:                Scripts.
* lazy evaluation:                      Evaluation.
* len =:                                MEMORY.
* LENGTH =:                             MEMORY.
* link map:                             Options.
* link-time runtime library search path: Options.
* linker crash:                         Bug Criteria.
* little-endian objects:                Options.
* load address, specifying:             Section Options.
* LOADADDR(SECTION):                    Arithmetic Functions.
* loading, preventing:                  Section Options.
* local symbols, deleting:              Options.
* location counter:                     Location Counter.
* LONG(EXPRESSION):                     Section Data Expressions.
* M and K integer suffixes:             Integers.
* machine architecture, output:         Option Commands.
* machine dependencies:                 Machine Dependent.
* MAX:                                  Arithmetic Functions.
* MEMORY:                               MEMORY.
* memory region attributes:             MEMORY.
* memory regions and sections:          Section Options.
* memory usage:                         Options.
* MIN:                                  Arithmetic Functions.
* MIPS embedded PIC code:               Options.
* MRI compatibility:                    MRI.
* names:                                Symbols.
* naming memory regions:                MEMORY.
* naming output sections:               Section Definition.
* naming the output file <1>:           Option Commands.
* naming the output file:               Options.
* negative integers:                    Integers.
* NEXT(EXP):                            Arithmetic Functions.
* NMAGIC:                               Options.
* NOCROSSREFS ( SECTIONS ):             Option Commands.
* NOFLOAT:                              Option Commands.
* NOLOAD:                               Section Options.
* Non constant expression:              Assignment.
* o =:                                  MEMORY.
* objdump -i:                           BFD.
* object file management:               BFD.
* object files:                         Options.
* object formats available:             BFD.
* object size:                          Options.
* octal integers:                       Integers.
* OMAGIC:                               Options.
* opening object files:                 BFD outline.
* Operators for arithmetic:             Operators.
* options:                              Options.
* org =:                                MEMORY.
* ORIGIN =:                             MEMORY.
* OUTPUT ( FILENAME ):                  Option Commands.
* output file after errors:             Options.
* output file layout:                   Scripts.
* OUTPUT_ARCH ( BFDNAME ):              Option Commands.
* OUTPUT_FORMAT ( BFDNAME ):            Option Commands.
* OVERLAY:                              Overlays.
* overlays:                             Overlays.
* partial link:                         Options.
* path for libraries:                   Option Commands.
* PHDRS:                                PHDRS.
* precedence in expressions:            Operators.
* prevent unnecessary loading:          Section Options.
* program headers:                      PHDRS.
* program headers and sections:         Section Options.
* provide:                              Assignment.
* QUAD(EXPRESSION):                     Section Data Expressions.
* quoted symbol names:                  Symbols.
* read-only text:                       Options.
* read/write from cmd line:             Options.
* regions of memory:                    MEMORY.
* relaxing addressing modes:            Options.
* relaxing on H8/300:                   H8/300.
* relaxing on i960:                     i960.
* relocatable and absolute symbols:     Assignment.
* relocatable output:                   Options.
* reporting bugs in ld:                 Reporting Bugs.
* requirements for BFD:                 BFD.
* retaining specified symbols:          Options.
* rounding up location counter:         Arithmetic Functions.
* runtime library name:                 Options.
* runtime library search path:          Options.
* scaled integers:                      Integers.
* script files:                         Options.
* search directory, from cmd line:      Options.
* search path, libraries:               Option Commands.
* SEARCH_DIR ( PATH ):                  Option Commands.
* section address <1>:                  Section Options.
* section address:                      Arithmetic Functions.
* section alignment:                    Section Options.
* section alignment, warnings on:       Options.
* section definition:                   Section Definition.
* section defn, full syntax:            Section Options.
* section fill pattern:                 Section Options.
* section load address:                 Arithmetic Functions.
* section size:                         Arithmetic Functions.
* section start:                        Section Options.
* section, assigning to memory region:  Section Options.
* section, assigning to program header: Section Options.
* SECTIONS:                             SECTIONS.
* segment origins, cmd line:            Options.
* semicolon:                            Assignment.
* shared libraries:                     Options.
* SHORT(EXPRESSION):                    Section Data Expressions.
* SIZEOF(SECTION):                      Arithmetic Functions.
* SIZEOF_HEADERS:                       Arithmetic Functions.
* specify load address:                 Section Options.
* standard Unix system:                 Options.
* start address, section:               Section Options.
* start of execution:                   Entry Point.
* STARTUP ( FILENAME ):                 Option Commands.
* strip all symbols:                    Options.
* strip debugger symbols:               Options.
* stripping all but some symbols:       Options.
* suffixes for integers:                Integers.
* symbol defaults:                      Arithmetic Functions.
* symbol definition, scripts:           Assignment.
* symbol names:                         Symbols.
* symbol tracing:                       Options.
* symbol-only input:                    Options.
* symbols, from command line:           Options.
* symbols, relocatable and absolute:    Assignment.
* symbols, retaining selectively:       Options.
* synthesizing linker:                  Options.
* synthesizing on H8/300:               H8/300.
* TARGET ( FORMAT ):                    Option Commands.
* traditional format:                   Options.
* unallocated address, next:            Arithmetic Functions.
* undefined symbol:                     Options.
* undefined symbols, warnings on:       Options.
* uninitialized data:                   Section Placement.
* unspecified memory:                   Section Data Expressions.
* usage:                                Options.
* variables, defining:                  Assignment.
* verbose:                              Options.
* version:                              Options.
* warnings, on combining symbols:       Options.
* warnings, on section alignment:       Options.
* warnings, on undefined symbols:       Options.
* what is this?:                        Overview.


