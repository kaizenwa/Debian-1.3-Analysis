This file documents the installation of the GNUstep Base Library,
`libgnustep-base'.  Copyright (C) 1993, 1994, 1996 Free Software
Foundation, Inc.  You may copy, distribute, and modify it freely as long
as you preserve this copyright notice and permission notice.

Installing `libgnustep-base'
****************************

   To compile and install `libgnustep-base':

  1. If you are running GNU/Linux, first install pthreads.  A copy that
     is known to work with GNU Objective C can be found at
     `ftp://ftp.ocbi.com/pub/GNUstep/pthreads.tar.gz' I ignored the
     installation instructions, and instead did the following:

          cd pthreads-0.9.2
          tar -cf - lib | (cd /usr/local ; tar -xvf -)
          tar -cf - include | (cd /usr/local ; tar -xvf -)
          mkdirs /usr/local/src/linux_threads/kits/pthreads-0.9.2/lib/pthreads
          cd !$ ; ln -s /usr/local/lib/libpthreads.so.1 .
          cd /usr/local/lib ; ln -s libpthreads.so.1 libpthreads.so

     (And on my system, I also had to comment out the code between
     `#ifndef _TIMESPEC_' and the following `#endif' in
     `/usr/local/include/pthreads/typedefs.h'.)

  2. Then install the GNU Objective C runtime patch (both
     gcc-2.7.2-objc.diff and gcc-2.7.2.1-objc.diff are included with
     this gnustep-base release), possibly like this:

          cd gcc-2.7.2.1
          patch -p1 < ../gstep-base*/gcc-2.7.2.1-objc.diff
          rm -f objc/list.h

     When I did this, patch exited with code 5, but the only rejects
     were in documentation files, not source files.

  3. Make and install gcc, possibly like this:

          ./configure --prefix=/usr/local
          make OBJC_THREAD_FILE=thr-pthreads
          make OBJC_THREAD_FILE=thr-pthreads install

     If you are not sure that threads are available on your system, and
     you don't need to use threads, you can substitute `thr-single' for
     `thr-pthreads'.

  4. Then configure and make libgnustep-base:

          ./configure --prefix=/usr/local
          make
          make install

     Alternatively, if you are running GNU/Linux and have an older
     version of libc, then the Objective C runtime will not work unless
     you pass `-lieee' to the linker.  If you use the pthreads library
     that will also have to be linked in.  You can do that like this:

          LIBS="-lieee -lpthreads" ./configure --prefix=/usr/local
          make
          make install

     If you are running on a NeXT machine, `gcc' probably configured
     itself to use the NeXT Objective C runtime by default.  Currently
     GNUstep only supports the GNU runtime.  To make `gcc' use the GNU
     runtime, set `CFLAGS' before you runtime configure.  For example:

          CFLAGS=-fgnu-runtime ./configure

     If your system supports dynamically loaded shared libraries, you
     can request the building and installation of a `.so' version of the
     library by passing `--enable-shared' to `configure'.  If in doubt,
     do not include this option.

     If you have trouble with the Makefile, it may be that our
     makefiles use features that your `make' does not support; use GNU
     make.

  5. Then install libgnustep-base:

          make install

     If you set any environment variables when running `make' to build
     libgnustep-base, you should set them again here; for example:

          CFLAGS=-fgnu-runtime ./configure


   Here are general instructions for `configure', that explain
`configure''s options.

  1. Configure the package for your system.  In the directory that this
     file is in, type `./configure'.  If you're using `csh' on an old
     version of System V, you might need to type `sh configure' instead
     to prevent `csh' from trying to execute `configure' itself.

     The `configure' shell script attempts to guess correct values for
     various system-dependent variables used during compilation, and
     creates the Makefile(s) (one in each subdirectory of the source
     directory).  In some packages it creates a C header file
     containing system-dependent definitions.  It also creates a file
     `config.status' that you can run in the future to recreate the
     current configuration.

     Running `configure' takes less than a minute or two.  While it is
     running, it prints some messages that tell what it is doing.  If
     you don't want to see the messages, run `configure' with its
     standard output redirected to `/dev/null'; for example:
          ./configure >/dev/null

     To compile the package in a different directory from the one
     containing the source code, you must use a version of make that
     supports the VPATH variable, such as GNU make.  `cd' to the
     directory where you want the object files and executables to go
     and run `configure'.  `configure' automatically checks for the
     source code in the directory that `configure' is in and in `..'.
     If for some reason `configure' is not in the source code directory
     that you are configuring, then it will report that it can't find
     the source code.  In that case, run `configure' with the option
     `--srcdir=DIR', where DIR is the directory that contains the
     source code.

     By default, `make install' will install the package's files in
     /usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can
     specify an installation prefix other than /usr/local by giving
     `configure' the option `--prefix=PATH'.  Alternately, you can do
     so by giving a value for the `prefix' variable when you run
     `make', e.g.,
          make prefix=/usr/gnu

     You can specify separate installation prefixes for
     architecture-specific files and architecture-independent files.
     If you give `configure' the option `--exec_prefix=PATH' or set the
     `make' variable `exec_prefix' to PATH, the package will use PATH
     as the prefix for installing programs and libraries.  Data files
     and documentation will still use the regular prefix.  Normally,
     all files are installed using the regular prefix.

     You can tell `configure' to figure out the configuration for your
     system, and record it in `config.status', without actually
     configuring the package (creating `Makefile's and perhaps a
     configuration header file).  To do this, give `configure' the
     `--no-create' option.  Later, you can run `./config.status' to
     actually configure the package.  This option is useful mainly in
     `Makefile' rules for updating `config.status' and `Makefile'.  You
     can also give `config.status' the `--recheck' option, which makes
     it re-run `configure' with the same arguments you used before.
     This is useful if you change `configure'.

     `configure' ignores any other arguments that you give it.

     If your system requires unusual options for compilation or linking
     that `configure' doesn't know about, you can give `configure'
     initial values for some variables by setting them in the
     environment.  In Bourne-compatible shells, you can do that on the
     command line like this:
          CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

     The `make' variables that you might want to override with
     environment variables when running `configure' are:

     (For these variables, any value given in the environment overrides
     the value that `configure' would choose:)
    `CC'
          C compiler program.  Default is `cc', or `gcc' if `gcc' is in
          your PATH.

    `INSTALL'
          Program to use to install files.  Default is `install' if you
          have it, `install.sh' otherwise.

     (For these variables, any value given in the environment is added
     to the value that `configure' chooses:)
    `DEFS'
          Configuration options, in the form `-Dfoo -Dbar ...'

    `LIBS'
          Libraries to link with, in the form `-lfoo -lbar ...'

     If you need to do unusual things to compile the package, we
     encourage you to figure out how `configure' could check whether to
     do them, and mail diffs or instructions to the address given in
     the `README' so we can include them in the next release.

  2. Type `make' to compile the package.  If you want, you can override
     the `make' variables `CFLAGS' and `LDFLAGS' like this:
          	make CFLAGS=-O2 LDFLAGS=-s

     You will get some warnings from `#warning' lines I've added to the
     code.  Ignore them.

     You may get some warnings like `stdobjects.m:0: warning:
     `_OBJC_SELECTOR_TABLE' defined but not used'.  Ignore them.  They
     are bogus warnings due to a bug in cc1obj.

     You may get some warnings like `ar: filename BinaryTreeEltNode.o
     truncated to BinaryTreeEltNo'.  Ignore them.

  3. If you want to compile the self-tests, cd to `checks' and type
     `make'.  If you want to compile the examples, cd to `examples' and
     type `make'.

  4. Type `make install' to install programs, data files, and
     documentation.

  5. You can remove the program binaries and object files from the
     source directory by typing `make clean'.  To also remove the
     Makefile(s), and `config.status' (all the files that `configure'
     created), type `make distclean'.

     The file `configure.in' is used as a template to create
     `configure' by a program called `autoconf'.  You will only need it
     if you want to regenerate `configure' using a newer version of
     `autoconf'.


