dnl     $Id: configure.in,v 1.14 1996/11/19 23:21:32 mbrown Exp $
dnl
dnl     This file is an input file used by the GNU "autoconf" program to
dnl     generate the file "configure", which is run during the build
dnl     to configure the system for the local environment.
dnl

CCDEFS="$DEFS"

AC_INIT(libfcgi/fcgiapp.c)
#--------------------------------------------------------------------
#  Perform common OMI configuration. This will include:
#	1) Choosing compiler and associated build options.
#	2) Checking for various common build associated programs.
#	3) Determining the best build options for this platform.
#	4) Checking for certain common header files.
#	5) Checking for exports/global switch.
#	6) Importing OMI dependencies (header files, libraries, and binaries).
#       7) Checking for existence of various system libraries and routines.
#--------------------------------------------------------------------
OMI_CONFIG

AC_CONFIG_HEADER(include/fcgi_config.h)
AC_PROG_RANLIB
AC_MSG_CHECKING(for sun_len in sys/un.h)
AC_EGREP_HEADER(sun_len,
   sys/un.h,
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SOCKADDR_UN_SUN_LEN),
   AC_MSG_RESULT(no))

#--------------------------------------------------------------------
#  What extra libraries do we need for this platform?
#--------------------------------------------------------------------
AC_CHECK_LIB(Xbsd, main, [LIBS="$LIBS -lXbsd"])
AC_SUBST(LIBS)

AC_REPLACE_FUNCS(strerror strtol)

#--------------------------------------------------------------------
#       Include sys/select.h if it exists and if it supplies things
#       that appear to be useful and aren't already in sys/types.h.
#       This appears to be true only on the RS/6000 under AIX.  Some
#       systems like OSF/1 have a sys/select.h that's of no use, and
#       other systems like SCO UNIX have a sys/select.h that's
#       pernicious.  If "fd_set" isn't defined anywhere then set a
#       special flag.
#--------------------------------------------------------------------

AC_MSG_CHECKING(for fd_set in in sys/types.h)
AC_TRY_LINK([#include <sys/types.h>],
   [fd_set readMask, writeMask;],
   AC_MSG_RESULT(yes),
   AC_MSG_RESULT(no)
   AC_MSG_CHECKING(for fd_mask in in sys/select.h)
   AC_HEADER_EGREP(fd_mask,
      sys/select.h,
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_SYS_SELECT_H),
      AC_MSG_RESULT(no)
      AC_DEFINE(NO_FD_SET)))

AC_MSG_CHECKING(for fpos in stdio.h)
AC_EGREP_HEADER(fpos_t,
   stdio.h,
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_FPOS),
   AC_MSG_RESULT(no))

#--------------------------------------------------------------------
#  Build with profiling?
#--------------------------------------------------------------------
AC_ARG_WITH(profile,
    [  --with-profile          Build a version with profiling],
    [with_profile=$withval],
    [with_profile=no]
)
if test "$with_profile" = "yes" ; then
    [PROFILE="-pg"]
else
    [PROFILE=""]
fi
AC_SUBST(PROFILE)

#--------------------------------------------------------------------
#  Build optimized, production version with no debugging code?  No
#  asserts?  No testing code?
#--------------------------------------------------------------------
AC_ARG_WITH(nodebug, 
    [  --with-nodebug          Build a production version,
                          with no debugging code],
    [with_nodebug=$withval],
    [with_nodebug=no]
)
if test "$with_nodebug" = "yes" ; then
    CCDEFS="$CCDEFS -O"
else
    AC_DEFINE(WITH_DEBUG)
    if test -f /bin/uname && test `/bin/uname` != "IRIX"; then
       CCDEFS="$CCDEFS -g"
    fi
fi
AC_ARG_WITH(noassert,
    [  --with-noassert         Build a production version,
                          with no ASSERTs],
    [with_noassert=$withval],
    [with_noassert=no]
)
if test "$with_noassert" = "no" ; then
    AC_DEFINE(WITH_ASSERT)
fi
AC_ARG_WITH(notest,
    [  --with-notest           Build a production version,
                          with no testing code],
    [with_notest=$withval],
    [with_notest=no]
)
if test "$with_notest" = "no" ; then
    AC_DEFINE(WITH_TEST)
fi
#--------------------------------------------------------------------
#  Do we need cross-process locking on this platform?
#--------------------------------------------------------------------
AC_MSG_CHECKING("if this machine needs cross-process locking")
case "`uname -sr`" in
    IRIX\ 5.*)	
	AC_DEFINE(USE_LOCKING)
	AC_MSG_RESULT(yes)
    ;;
    SunOS\ 5.*)	
	AC_DEFINE(USE_LOCKING)
	AC_MSG_RESULT(yes)
    ;;
    UNIX_System_V\ 4.0)
	AC_DEFINE(USE_LOCKING)
	AC_MSG_RESULT(yes)
    ;;
    *)
	AC_MSG_RESULT(no)
    ;;
esac

#--------------------------------------------------------------------
#  Does va_arg(arg, long double) crash the compiler?
#  hpux 9.04 compiler does and so does Stratus FTX (uses HP's compiler)
#--------------------------------------------------------------------
AC_MSG_CHECKING(if va_arg(arg, long double) crashes the compiler)
AC_TRY_COMPILE([#include <stdarg.h>],
   [long double lDblArg; va_list arg; lDblArg = va_arg(arg, long double);],
   AC_MSG_RESULT(no),
   AC_DEFINE(HAVE_VA_ARG_LONG_DOUBLE_BUG)
   AC_MSG_RESULT(yes))

#--------------------------------------------------------------------
#  Determine the best warning options for this platform
#--------------------------------------------------------------------
if test "$CC" = "gcc"; then
    WARNDEFS="-ansi -pedantic -Wall -Wmissing-prototypes"
else
    if test -f /bin/uname && test `/bin/uname` = OSF1; then
	WARNDEFS="-std1 -warnprotos"
    fi
fi
CCDEFS="$CCDEFS $WARNDEFS"

#--------------------------------------------------------------------
#  Run with Purify?  PureCoverage?  Quantify?
#--------------------------------------------------------------------
CC_TEMP=$CC
OMI_PURIFY
CC_PURE="$CC"
CC=$CC_TEMP

AC_SUBST(CC)
AC_SUBST(CC_PURE)
AC_SUBST(CCDEFS)
AC_OUTPUT(Makefile libfcgi/Makefile cgi-fcgi/Makefile examples/Makefile )
