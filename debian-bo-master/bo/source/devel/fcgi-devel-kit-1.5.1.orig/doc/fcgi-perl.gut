Integrating FastCGI with Perl-5
/fastcgi/words
fcgi-hd.gif
[FastCGI]
<center>Integrating FastCGI with Perl-5</center>

<!--Copyright (c) 1996 Open Market, Inc.                                    -->
<!--See the file "LICENSE.TERMS" for information on usage and redistribution-->
<!--of this file, and for a DISCLAIMER OF ALL WARRANTIES.                   -->

<h5 align=center>
Copyright &copy; 1996 Open Market, Inc.  245 First Street, Cambridge,
  MA 02142 U.S.A.<br>
Tel: 617-949-7000 URL:
  <a href="http://www.openmarket.com/">http://www.openmarket.com/</a><br>
$Id: fcgi-perl.gut,v 1.5 1996/11/09 00:09:18 gambarin Exp $ <br>
</h5>
<hr>

<ul type=square>
  <li><a HREF = "#S1">1. Introduction</a>
  <li><a HREF = "#S2">2. Perl with sfio and an FCGI module</a>
  <li><a HREF = "#S3">3. Perl with fcgi_stdio and an FCGI module</a>
  <ul type=square>
    <li><a HREF = "#S3.1">3.1 Basic recipe</a>
    <li><a HREF = "#S3.2">3.2 Semi-advanced recipe</a>
    <li><a HREF = "#S3.3">3.3 Advanced recipe</a>
  </ul>
  <li><a HREF = "#S4">4. Writing FastCGI applications in Perl</a>
</ul>


<H3><A NAME = "S1"> 1. Introduction</A></H3>
Perl (Practical Extraction and Report Language) is a scripting language that
is often used for CGI programming.  Perl is freely available as a
source kit.<p>

FastCGI has been integrated with Perl in two different ways:
<ol>
  <li>By writing a module that plugs into any Perl interpreter that's
      been built with sfio, a stdio alternative from AT&T.
  <li>By writing a module that plugs into any Perl interpreter that's
      been built with FastCGI's fcgi_stdio library
      layering over stdio.
</ul>
The first approach, implemented by Sven Verdoolaege
(skimo@breughel.ufsia.ac.be), is probably the better of the two,
since sfio is a generally useful addition to Perl.
The second approach, implemented by engineers at Open Market,
predates the availability of an sfio-integrated
Perl and demonstrates that the fcgi_stdio library
can be used with a substantial C application.<p>

The two approaches
are compatible at the Perl source code level; a Perl
application developed using
one approach can be run using the other.  And both approaches
result in a general-purpose Perl interpreter, not a Perl interpreter
that's only usable for FastCGI applications.<p>

This memo documents both approaches and explains a small
Perl FastCGI application.<p>


<h3><a name ="S2"> 2. Perl with sfio and an FCGI module</a></h3>

As of release 5 patch 3 subpatch 2 (5.003.02), Perl has announced an optional 
support for sfio (safe/fast string/file I/O), which is an alternative
to stdio that AT&T distributes freely.  An advantage of sfio over stdio
is that sfio provides the ability to implement
new stream classes that don't simply transfer sequential bytes to or from
a file descriptor.  This flexibility is exactly what FastCGI needs in order
to implement the standard I/O streams in a manner that's
transparent to applications.<p>

Perl interpreters incorporating sfio are not widely available in
binary form, so most likely you'll have to build your own.
Your build should go smoothly if you follow the instructions
below.  The instructions assume:<p>

<ul>
  <li>You are building Perl 5.0 patch level 3 subpatch level 2 (5.003.02) 
      or higher.  That's the first Perl release to support sfio.<p>
</ul>
<P>

Follow these steps to build a Perl with sfio:<p>

<ol>
  <li>Obtain sfio source code from 
      <a href="ftp://ftp.funet.fi/pub/languages/perl/CPAN/src/misc">
      ftp://ftp.funet.fi/pub/languages/perl/CPAN/src/misc</a><p>

  <li>Unpack the tar file using <tt>tar xvf</tt> command.  <EM>$sfio</EM>
      will be used as a shorthand for the directory in which sfio package 
      is installed.<p>

  <li>Update your $PATH variable as specified in <tt>$sfio/README</tt> and 
      run <tt>make</tt> command in the <tt>$sfio/src/lib/sfio</tt> subdirectory.<p>

  <li>Rename or delete the file <tt>$sfio/include/stdio.h</tt>, since it may
      interfere in the further build process.<p>

  <li>Obtain Perl source (version 5 subversion 003 patchlevel 2 or higher) from
      <a href="http://fohnix.metronet.com/perlinfo/source/5.0/unsupported">
      http://fohnix.metronet.com/perlinfo/source/5.0/unsupported</a><p>

  <li>Unpack the tar file using <tt>tar xvf</tt> command.  <EM>$perl</EM> is
      used as a shorthand for the directory that is created.<p>

  <li>Configure, build, and install Perl as follows:

<pre>
% cd $perl
% ./Configure -Duseperlio -Dusesfio
% make 
% make test
% make install
</pre><p>

There are certain Configure questions that must be answered
differently when building Perl with sfio:<p>

<DL>

<DT><EM>Perl5 can now use alternate file IO mechanisms to ANSI stdio.
However these are experimental and may cause problems with some
extension modules.
Use stdio as with previous versions? [y] </EM></DT>
<DD>
You should answer no.
</DD><P>

<DT><EM>Any additional cc flags?</EM></DT>
<DD>
You should use the following cc flags along with any defaults that Perl
Configure supplied:
<UL>
<LI> <strong>-I<em>$sfio</em>/include</strong>
</UL>
</DD><P>

<DT><EM>Any additional ld flags (NOT including libraries):</EM></DT>
<DD>
You should specify the following <tt>ld</tt> flags:
<UL>
<LI> <strong>-L<em>$sfio</em>/lib</strong>
</UL>
</DD><P>

<DT><EM>Additional Libraries:</EM></DT>
<DD>
Check that <strong>-lsfio</strong> is one of the specified libraries.  Press 
return key to continue.  
</DD><P>
</DL>

<b>NOTE</b>: If you did not install Perl as a root user, make sure to 
correctly set environment variable <tt>PERL5LIB</tt> to indicate the location
of Perl libraries.  For example, if you installed Perl binary into the 
<tt>$INSTALL</tt> subdirectory and you are running Solaris, the following 
will set your proper library path: 
<pre>
% setenv PERL5LIB $INSTALL/lib:$INSTALL/lib/sun4-solaris/perl5.003_02
</pre>
</ul>
<p>

  <li>Obtain Perl/Sfio module for FastCGI support from 
      <a href="ftp://ftp.funet.fi/pub/languages/perl/CPAN/authors/id/SKIMO">
      ftp://ftp.funet.fi/pub/languages/perl/CPAN/authors/id/SKIMO</a><p>

  <li>Unpack FCGI module using <tt>tar</tt> command.  We use <tt>$sfiomod</tt>
      to denote the subdirectory that is created in the process.<p>

  <li>Build and install the module with the following commands:
<pre>
% cd $sfiomod
% $INSTALL/bin/perl Makefile.PL
% make
% make test
% make install
</pre>
</ol>


<H3><a NAME = "S3">3. Perl with fcgi_stdio and an FCGI module</a></H3>

<H4><a NAME = "S3.1">3.1 Basic recipe</a></H4>

Here are the assumptions embedded in the following recipe:
<UL>

<LI>You are building Perl 5.0 Patch 2 (5.002) or higher, since 
all examples that are provided are based on that release.
<P></P>

<LI>You have gcc version 2.7 installed on your system, and use it in the
build.  gcc is convenient because it supports the <tt>-include</tt>
command-line option that instructs the C preprocessor to include a specific
file before processing any other include files.  This allows you to include
<tt>fcgi_stdio.h</tt> without modifying Perl source files.  (The reason for
specifying gcc version 2.7 is that I have experienced bad behavior with an
earlier version and the <tt>-include</tt> flag -- the C preprocessor died
with SIGABRT.)
<P></P>

<LI> <EM>$fcgi</EM> is used as shorthand for the full path of the FastCGI
developers kit.
</UL>
<P>
If those are valid assumptions, follow these steps:
<OL>
<LI> Pull the Perl source kit from
<A HREF="http://www.metronet.com/perlinfo/src/latest.tar.gz">
http://www.metronet.com/perlinfo/src/latest.tar.gz</A>
<P>
There are good sources of information on Perl at:
<UL>
<LI> <A HREF="http://www.perl.com/">http://www.perl.com/</A>
<LI> <A HREF="http://www.metronet.com/perlinfo/">http://www.metronet.com/perlinfo/</A>
</UL>
</P>
</A>
<LI> Unpack the tar file in the parent directory of the FastCGI kit
directory, so that the perl directory is a sibling of <tt>fcgi-devel-kit</tt>.
<EM>$perl</EM> is used as shorthand for the full path of the directory
in which Perl is installed.
<p>
<LI> Copy the version specific and the common files from
<tt>fcgi-devel-kit/perl-5</tt> into the Perl-5 kit.
<PRE>
> cd $perl
> mv perl.c perl.c.orig
> mv proto.h proto.h.orig
> mv Configure Configure.orig
> cp -r ../fcgi-devel-kit/perl-5/perl5.002/* .
> cp -r ../fcgi-devel-kit/perl-5/common/* .
</PRE>
<P>
The files you are copying contain the Perl-5 FCGI extension, some
files modified from the distribution, and a script to simplify the
configuration process.
</P>
<LI> Set environment variables.
The Perl-5 FastCGI configuration process requires that the environment
variable <TT>FCGIDIR</TT> be set to the top level directory of the FastCGI
development kit.
<PRE>
> setenv FCGIDIR <EM>$fcgi</EM>
</PRE>
If you do not want to use <tt>gcc</tt> to build Perl you can set the
environment variable <TT>CC</TT> to the desired compiler. For example:
<PRE>
> setenv CC gcc2.7
</PRE>
By default Perl's installation prefix is /usr/local, so binaries get
installed in /usr/local/bin, library files get installed into
/usr/local/lib/perl, etc. If you want to specify a different installation
prefix set the environment variable <tt>PERL_PREFIX</tt>.
<PRE>
> setenv PERL_PREFIX /usr/local/perl5-fcgi
</PRE>
<LI> Run fcgi-configure.
<PRE>
> ./fcgi-configure
</PRE>
<P>
<TT>fcgi-configure</TT> is a wrapper around Perl's <tt>Configure</tt> script.
It sets some variables according the the value of some environment variables,
and runs Perl's <tt>Configure</tt> script
in such a way that it does not prompt the
user for any input. 90% of the time this should work without a problem.
If for some reason this does not work for you, you'll have to
follow the steps in the next section.<p>
<LI> Run make.
<PRE>
> make
</PRE>
<LI> Install the newly built Perl-5.
<PRE>
> make install
</PRE>
</OL><p>


<H4><a NAME = "S3.2">3.2 Semi-advanced recipe</a></H4>

If you do not have experience configuring and building Perl, you
should find someone who does.  Perl can be pretty intimidating to configure
since it asks you a large number of irrelevant-seeming
questions that you won't know how to answer.<p>
<P>
<OL>
<LI>Go into the top level directory of the Perl distribution and run
<tt>Configure</tt>.
<PRE>
> cd $perl
> ./Configure
</PRE>
<LI>
There are some questions that you are going to
have to answer differently when building FastCGI into Perl.
These are described below:
<P></P>
<DL>
<DT><EM>Use which C compiler?</EM></DT>
<DD>
You should specify <tt>gcc</tt>.
</DD>
<P></P>
<DT><EM>Any additional cc flags?</EM></DT>
<DD>
You should use the following cc flags along with any defaults that Perl
Configure supplied:
<UL>
<LI> <strong>-I<em>$fcgi</em>/include</strong>
<LI> <strong>-include <em>$fcgi</em>/include/fcgi_stdio.h</strong>
</UL>
This assumes you are using GCC.
</DD>
<P></P>

<DT><EM>Any additional ld flags (NOT including libraries):</EM></DT>
<DD>
You should specify the following <tt>ld</tt> flags:
<UL>
<LI> <strong>-L<em>$fcgi</em>/libfcgi</strong>
</UL
</DD>
<P></P>

<DT><EM>Additional Libraries:</EM></DT>
<DD>
add <strong>-lfcgi</strong> to the list of additional libraries.
It should be added before -lc.
</DD>
<P></P>

<DT><EM>What extensions do you wish to load dynamically?</EM></DT>
<DD>
If you can support dynamic extensions, <tt>Configure</tt>
will ask which of the
supplied extensions should be loaded dynamically. Since we copied the FCGI
extension into the Perl source directory it should be one of the ones in the
default list. If you want FCGI to be dynamically loaded you should specify
it here, otherwise leave it out.
</DD>
<P></P>

<DT><EM>What extensions do you wish to load statically?</EM></DT>
<DD>
If you do not support Dynamic extensions this is the only question about
extensions you would get asked. You should specify FCGI here if you did not
get asked about dynamic extensions (or did not specify FCGI as a dynamic
extension).
</DD>
</DL>
<P></P>
<LI> Copy in the new <tt>proto.h</tt>.
<P>
The file proto.h has some macros that conflict with the FastCGI macros.
The version of <tt>proto.h</tt> supplied in the FastCGI kit
includes these changes:<p>
<UL>
<LI> At the beginning of the file it adds the following lines:
<PRE>
#ifdef _FCGI_STDIO
#undef printf
#endif
</PRE>
<LI> At the bottom it adds:
<PRE>
#ifdef _FCGI_STDIO
#define printf FCGI_printf
#endif
</PRE>
</UL>
<LI> Copy in the new <tt>perl.c</tt>.
<P>
Perl-5.002 has a bug in <tt>perl.c</tt> that has a great
chance of getting exercised
with FastCGI.  A fix has been sumbitted to the Perl developers and hopefully
it'll make it into perl-5.003. It was a one line fix, here is a diff for the
curious:
<PRE>
*** perl.c      1996/03/15 17:10:10     1.1
--- perl.c      1996/03/15 17:11:23
***************
*** 405,410 ****
--- 405,411 ----
      if (e_fp) {
	if (Fflush(e_fp) || ferror(e_fp) || fclose(e_fp))
	    croak("Can't write to temp file for -e: %s", Strerror(errno));
+	e_fp = Nullfp;
	argc++,argv--;
	scriptname = e_tmpname;
      }
</PRE>
Pretty straightforward.<p>
<LI> Build and install Perl.
<PRE>
> make
<EM>[...]</EM>
> make install
</PRE>
</UL>
</P>
<H4><a NAME = "S3.3">3.3 Advanced recipe</a></H4>

<P>
If you already have a Perl-5 package that has been configured, and you do
not really want to re-run Configure, you can take the following steps.
</P>
<P ALIGN=CENTER><STRONG>THIS IS NOT RECOMMENDED</STRONG></P>
<P>
Edit config.sh with your favorite editor and modify the following lines:
<DL>
<DT><EM>cc</EM></DT>
<DD>
Change to use gcc if you are not using it already. 
</DD>
<P></P>

<DT><EM>ccflags</EM> AND <EM>cppflags</EM></DT>
<DD>
Add the following flags:
<UL>
<LI> <strong>-I<em>$fcgi</em>/include</strong>
<LI> <strong>-include <em>$fcgi</em>/include/fcgi_stdio.h</strong>
</UL>
This assumes you are using GCC. See the above section on assumptions
</DD>
<P></P>

<DT><EM>extensions</EM> AND <EM>known_extensions</EM></DT>
<DD>
Add FCGI to the list of extensions
</DD>
<P></P>

<DT><EM>ldflags</EM></DT>
<DD>
Add -L $fcgi/libfcgi to the list.
</DD>
<P></P>

<DT><EM>libs</EM></DT>
<DD>
Add -lfcgi to the list of libraries, should be added before -lc.
</DD>
<P></P>
<DT><EM>static_ext</EM><STRONG> or </STRONG><EM>dynamic_ext</EM></DT>
<DD>
Add FCGI to the list of statically or dynamically loaded extensions.
</DD>
<P></P>
<DT><EM>d_stdio_cnt_lval, d_stdio_ptr_lval, d_stdiobase, d_stdstdio</EM></DT>
<DL>
Change all of these to undef.
</DL>
<P>
One you have edited config.sh you should do a "make Makefile depend all".
If you're paranoid like me you may want to do a "make clean" first.
</P>


<H3><A NAME = "S4"> 4. Writing FastCGI applications in Perl</A></H3>
<P>
The Perl program <tt>examples/tiny-perl-fcgi</tt> performs the same function as
the C program <tt>examples/tiny-fcgi</tt> that's used as an example in the
<A HREF="fcgi-devel-kit.html#S3.1.1">FastCGI Developer's Kit document</A>.
Here's what the Perl version looks like:
</P>
<pre>
#!./perl
use FCGI;
$count = 0;
while(FCGI::accept() >= 0) {
    print("Content-type: text/html\r\n\r\n",
          "&lt;title&gt;FastCGI Hello! (Perl)&lt;/title&gt;\n",
          "&lt;h1&gt;FastCGI Hello! (Perl)&lt;/h1&gt;\n",
          "Request number ", $++count,
          " running on host &lt;i&gt;$ENV('SERVER_NAME')&lt;/i&gt;");
}
</pre>

If you've built Perl according to the recipe and you have a Web server set
up to run FastCGI applications, load the FastCGI Developer's Kit Index Page
in that server and run this Perl application now.<p>

The script invokes Perl indirectly via the symbolic link
<tt>examples/perl</tt>.  It does this because HP-UX has a limit of 32
characters for the first line of a command-interpreter file such as
<tt>examples/tiny-perl-fcgi</tt>.  If you run on HP-UX you won't want
to sprinkle symbolic links to perl everywhere, so you should
choose a <tt>PERL_PREFIX</tt> shorter than <tt>/usr/local/perl5-fcgi</tt>.<p>

You need to be aware of the following bug.  If the
initial environment to a FastCGI Perl application is empty (contains
no name-value pairs) then when the first call to <tt>FCGI::accept</tt>
returns, the environment will <i>still</i> be empty,
i.e. <tt>%ENV</tt> will contain no associations.  All the variables
associated with the first request are lost.  There are two known
workarounds:<p>

<ul>
  <li>
    In your Perl application, enumerate <tt>%ENV</tt> using
    <tt>each</tt> before entering the <tt>FCGI::accept</tt>
    loop.  The program <tt>examples/tiny-perl-fcgi</tt>
    contains code for this.<p>
  <li>
    In configuring your application be sure to set at least one
    initial environment variable.  You do this with the
    <tt>AppClass -initial-env</tt> directive to the Web server,
    or by running <tt>cgi-fcgi</tt> in a non-empty environment.
</ul><p>

The Perl subroutine <tt>FCGI::accept</tt> treats the initial
environment differently than the C function <tt>FCGI_Accept</tt>.  The
first call to the
C function <tt>FCGI_Accept</tt> replaces the initial environment with
the environment of the first request.  The first call to the Perl subroutine
<tt>FCGI::accept</tt> adds the variable bindings of the first request
to the bindings present in the initial environment.  So when the first
call to <tt>FCGI::accept</tt> returns, bindings from the initial
environment are still there (unless, due to naming conflicts, some of
them have been overwritten by the first request).  The next call to
<tt>FCGI::accept</tt> removes the bindings made on the previous call
before adding a new set for the request just accepted, again preserving
the initial environment.<p>

The Perl <tt>FCGI</tt> module also includes
subroutines <tt>FCGI::finish</tt>, <tt>FCGI::set_exit_status</tt>,
and <tt>FCGI::start_filter_data</tt> that correspond to
C functions in <tt>fcgi_stdio.h</tt>; see the manpages for
full information.<p>

Converting a Perl CGI application to FastCGI is not fundamentally
different from converting a C CGI application.  You separate
the portion of the application that performs one-time
initialization from the portion that performs per-request
processing.  You put the per-request processing into a loop
controlled by <tt>FCGI::accept</tt>.<p>

