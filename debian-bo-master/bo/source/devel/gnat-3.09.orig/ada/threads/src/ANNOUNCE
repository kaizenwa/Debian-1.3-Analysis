
``A Library Implementation of POSIX Threads under SunOS/Solaris'', Version 2.5

The PART (POSIX / Ada-Runtime Project) is happy to announce a new
release of the C sources of the Pthreads library.

ftp-site:  ftp.cs.fsu.edu
internet#: 128.186.121.114
directory: /pub/PART
files:     pthreads.tar.Z, pthreads_serf92.ps.Z, pthreads_usenix93.ps.Z,
	   pthreads_interface.ps.Z, rtoss94.ps.Z, pthreads_tr94-091.ps.Z

mail-list: mueller@uzu.cs.fsu.edu	Subject: subscribe-pthreads
WWW:       http://www.cs.fsu.edu/~mueller

There is also a Pthreads mailing list distributing information about
new releases, bug patches and related issues. You can subscribe to the
mailing list either
- via WWW URL "http://www.cs.fsu.edu/~mueller/bin/pthreads-form.cgi"
- or by sending e-mail to "mueller@uzu.cs.fsu.edu" with the subject line
  "subscribe-pthreads". [If your local mailer inserts an incorrect
  return address, send mail message with a different subject and include
  your correct e-mail address.]

As part of the PART project we have been designing and implementing a
library package of preemptive threads which is compliant with POSIX
1003.4a Draft 6. A description of the interface for our Pthreads
library is also available on ftp. Our implementation is limited to the
Sun SPARC architecture and SunOS 4.1.x or Solaris. We do not make any
use of Sun's light-weight processes to achieve better performance
(with one I/O-related exception).

What's NEW:
  .bug fix: pthread_setintr in signal.c, tested for wrong return value
   of sigprocmask (problem reported by: vojtowic@mailer.cefriel.it
   (Jakub Wojtowicz (Area NTW))).
  .bug fix: SIGARLM was not delivered to user when unrelated to Pthreads
   internal handling (poblem reported by: felber@lsesun1.epfl.ch
   (Pascal FELBER)).
  .bug fix: compile pthread_disp.c only with -O1 to avoid error in signal
   handler when compiled with C_CONTEXT_SWITCH (poblem reported by:
   adaudet@cs.sandia.gov (Al D. Audette))
  .bug fix: conditional variables exit code was incorrect (problem
   reported and fixed by: capints!ruud@relay.NL.net (Ruud de Groot)).
  .bug fix: pthread_tempstack was not defined when compiled w/ STACK_CHECK
   but w/o SIGNAL_STACK (problem reported and fixed by:
   Robert.Allgeuer@aut.alcatel.at (Robert Allgeuer)).
  .bug fix: DEBUG and MALLOC did not work together due to reentering kernel.
  .bug fix: longjmp out of signal handler could have caused unbounded stack
   growth, fixed by ealy flush and restore of frame pointer (problem reported
   by: ka@socrates.hr.att.com (Kenneth Almquist)).

The following features are included in the current implementation:
-from POSIX.4a:
  .thread management: initializing, creating, joining, exiting, and
   destroying threads
  .synchronization: mutual exclusion, condition variables
  .thread-specific data
  .thread priority scheduling: priority management, preemptive
   priority scheduling (FIFO, RR),
   mutex priority ceilings through stack resource policy (SRP)
  .signals: signal handlers, synchronous and asynchronous wait for
   signals, masking and sending of signals, sleep, long jumps
  .cancellation: cleanup handlers, asynchronous, synchronous, and
   disabled interruptability.
-from POSIX.4:
  .timers: nanosleep, read clock, priority scheduling bounds
-from POSIX.1:
  .synchronous I/O for threads (I/O only blocks current thread, not process)
-others:
  .perverted scheduling for debugging (MUT_SWITCH, RR_SWITCH, RAND_SWITCH)
  .stack overflow check causes signal (optional STACK_CHECK)
  .graceful handling of stack overflow (optional SIGNAL_STACK)
  .repeated inclusion of header files prevented

The support is currently being extended to include:
-from POSIX.4a:
  .draft 10 upgrade
  .ports (FreeBSD and Linux in progress)
  .mutex priority inheritance / priority ceiling emulation protocol
  .reentrant functions
  .process control: fork, wait, waitpid
   (The above functions are not supported for threads. Their semantics
    is whatever UNIX semantics for processes is. Consequently, a fork
    will fork another process with ALL threads being duplicated, not
    just the executing thread as required by POSIX.4a.
    The functions exec and _exit behave as required without any
    change, i.e. the UNIX process level semantics for these functions
    is also adequate for threads.)
-from POSIX.4:
  .asynchronous I/O for threads
  .asynchronous timer objects
-other:
  .heap memory pools

The current scheduling policies are strict priority scheduling
(according to POSIX.4a FIFO scheduling) which preempts when signals
are caught or round-robin (RR scheduling) which changes context to
another thread of the same priority after a time-slice of 20msec.
Besides asynchronous delivery of signals, context switches only occur
where required by the priority policy, e.g. when resources (mutexes)
are locked etc.

The current implementation has been tested and used as a base to
implement our own (new) runtime-system for an Ada compiler (Verdix).
But we do not make any claims about the completeness or correctness of
this implementation.

(C)OPYRIGHT NOTICE:

   Copyright (C) 1992, the Florida State University
   Distributed by the Florida State University under the terms of the
   GNU Library General Public License.

This file is part of Pthreads.

Pthreads is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation (version 2).

Pthreads is distributed "AS IS" in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with Pthreads; see the file COPYING.  If not, write
to the Free Software Foundation, 675 Mass Ave, Cambridge,
MA 02139, USA.

Report problems and direct all questions to:

  pthreads-bugs@ada.cs.fsu.edu
