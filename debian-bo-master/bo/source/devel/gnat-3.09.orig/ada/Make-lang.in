# Top level makefile fragment for GNU Ada (GNAT).
#   Copyright (C) 1994, 1995 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.

# Extra flags to pass to recursive makes.
BOOT_ADAFLAGS= $(ADAFLAGS)
ADAFLAGS= -gnatpg -gnata
GNATLIBFLAGS= -gnatpg
GNATLIBCFLAGS= -g -O2
ADA_FLAGS_TO_PASS = \
	"ADA_FOR_BUILD=$(ADA_FOR_BUILD)" \
	"ADAFLAGS=$(ADAFLAGS)" \
	"ADA_FOR_TARGET=$(ADA_FOR_TARGET)" \
	"INSTALL_DATA=$(INSTALL_DATA)"

# Define the names for selecting Ada in LANGUAGES.
Ada ada: gnat1 gnatbind

# Tell GNU Make to ignore these, if they exist.
.PHONY: Ada ada

# There are too many Ada sources to check against here.  Let's
# always force the recursive make.
gnat1: $(LIBDEPS) stamp-objlist force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnat1
#	cd ..

gnatbind: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatbind
#	cd ..

gnatf: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatf
#	cd ..

gnatlink: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatlink
#	cd ..

gnatkr: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatkr
#	cd ..

gnatmake: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatmake
#	cd ..

gnatcmd: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatcmd
#	cd ..

gnatprep: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatprep
#	cd ..

gnatchp: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatchp
#	cd ..

gnatbl: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ../gnatbl
#	cd ..

# use host-gcc
gnattools: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)\
	   CC="../xgcc -B../" STAGE_PREFIX="../" ../gnatf \
	   ../gnatlink ../gnatkr ../gnatmake ../gnatcmd ../gnatprep \
	   ../gnatchp ../gnatbl
#	cd ..

# use host-gcc
cross-gnattools: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \
	   GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
           GNATLIBFLAGS="$(GNATLIBFLAGS)"  \
           ../gnatf ../gnatlink ../gnatkr ../gnatmake ../gnatcmd ../gnatprep \
	   ../gnatchp ../gnatbl
#	cd ..

# use cross-gcc
gnatlib: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS)  \
            GNATLIBFLAGS="$(GNATLIBFLAGS)" GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
            gnatlib
#	cd ..

# use cross-gcc
gnatgthreads: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \
		GNATLIBFLAGS="$(GNATLIBFLAGS)"  \
                GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \gnatgthreads
#	cd ..

# use only for native compiler
gnatlib_and_tools: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)\
	   CC="../xgcc -B../" STAGE_PREFIX="../" ../gnatf \
	   ../gnatlink ../gnatkr ../gnatmake ../gnatcmd ../gnatprep \
	   ../gnatchp ../gnatbl && \
	$(MAKE) $(FLAGS_TO_PASS)  \
            GNATLIBFLAGS="$(GNATLIBFLAGS)" GNATLIBCFLAGS="$(GNATLIBCFLAGS)" \
            gnatlib
#	cd ..

gnat-cross: force
	cd ada; \
	$(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) gnat-cross
#	cd ..

# Build hooks:

ada.all.build: 
ada.all.cross:
	-if [ -f gnatbind$(exeext) ] ; then \
	  mv gnatbind$(exeext)  gnatbind-cross$(exeext); fi
	-if [ -f gnatf$(exeext) ] ; then \
	  mv gnatf$(exeext)     gnatf-cross$(exeext); fi
	-if [ -f gnatkr$(exeext) ] ; then \
	  mv gnatkr$(exeext)    gnatkr-cross$(exeext); fi
	-if [ -f gnatlink$(exeext) ] ; then \
	   mv gnatlink$(exeext)  gnatlink-cross$(exeext); fi
	-if [ -f gnatmake$(exeext) ] ; then \
	   mv gnatmake$(exeext)  gnatmake-cross$(exeext); fi
	-if [ -f gnatcmd$(exeext) ] ; then \
	   mv gnatcmd$(exeext)  gnatcmd-cross$(exeext); fi
	-if [ -f gnatprep$(exeext) ] ; then \
	   mv gnatprep$(exeext)  gnatprep-cross$(exeext); fi
	-if [ -f gnatchp$(exeext) ] ; then \
	  mv gnatchp$(exeext)   gnatchp-cross$(exeext); fi
	-if [ -f gnatbl$(exeext) ] ; then\
	  mv gnatbl$(exeext)    gnatbl-cross$(exeext); fi

ada.start.encap:
ada.rest.encap:
ada.info:
ada.dvi:

# Install hooks:
# gnat1 is installed elsewhere as part of $(COMPILERS).

ada.install-normal:

# Install the binder program as $(target)-gnatbind
# and also as either gnatbind (if native) or $(tooldir)/bin/gnatbind
# likewise for gnatf, gnatchp, and gnatlink, gnatkr, gnatmake, gnatcmd,
# gnatprep, gnatbl
ada.install-common:
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatbind-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatbind$(exeext); \
	    $(INSTALL_PROGRAM) gnatbind-cross$(exeext) $(bindir)/$(target)-gnatbind$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatbind$(exeext); \
	  else \
	    rm -f $(bindir)/gnatbind$(exeext); \
	    $(INSTALL_PROGRAM) gnatbind$(exeext) $(bindir)/gnatbind$(exeext); \
	    chmod a+x $(bindir)/gnatbind$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatf-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatf$(exeext); \
	    $(INSTALL_PROGRAM) gnatf-cross$(exeexe) $(bindir)/$(target)-gnatf$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatf$(exeext); \
	  else \
	    rm -f $(bindir)/gnatf$(exeext); \
	    $(INSTALL_PROGRAM) gnatf$(exeext) $(bindir)/gnatf$(exeext); \
	    chmod a+x $(bindir)/gnatf$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatlink-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatlink$(exeext); \
	    $(INSTALL_PROGRAM) gnatlink-cross$(exeext) $(bindir)/$(target)-gnatlink$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatlink$(exeext); \
	  else \
	    rm -f $(bindir)/gnatlink$(exeext); \
	    $(INSTALL_PROGRAM) gnatlink$(exeext) $(bindir)/gnatlink$(exeext); \
	    chmod a+x $(bindir)/gnatlink$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatkr-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatkr$(exeext); \
	    $(INSTALL_PROGRAM) gnatkr-cross$(exeext) $(bindir)/$(target)-gnatkr$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatkr$(exeext); \
	  else \
	    rm -f $(bindir)/gnatkr$(exeext); \
	    $(INSTALL_PROGRAM) gnatkr$(exeext) $(bindir)/gnatkr$(exeext); \
	    chmod a+x $(bindir)/gnatkr$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatmake-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatmake$(exeext); \
	    $(INSTALL_PROGRAM) gnatmake-cross$(exeext) $(bindir)/$(target)-gnatmake$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatmake$(exeext); \
	  else \
	    rm -f $(bindir)/gnatmake$(exeext); \
	    $(INSTALL_PROGRAM) gnatmake$(exeext) $(bindir)/gnatmake$(exeext); \
	    chmod a+x $(bindir)/gnatmake$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatcmd-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatcmd$(exeext); \
	    $(INSTALL_PROGRAM) gnatcmd-cross$(exeext) $(bindir)/$(target)-gnatcmd$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatcmd$(exeext); \
	  else \
	    rm -f $(bindir)/gnatcmd$(exeext); \
	    $(INSTALL_PROGRAM) gnatcmd$(exeext) $(bindir)/gnatcmd$(exeext); \
	    chmod a+x $(bindir)/gnatcmd$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatprep-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatprep$(exeext); \
	    $(INSTALL_PROGRAM) gnatprep-cross$(exeext) $(bindir)/$(target)-gnatprep$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatprep$(exeext); \
	  else \
	    rm -f $(bindir)/gnatprep$(exeext); \
	    $(INSTALL_PROGRAM) gnatprep$(exeext) $(bindir)/gnatprep$(exeext); \
	    chmod a+x $(bindir)/gnatprep$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatchp-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatchp$(exeext); \
	    $(INSTALL_PROGRAM) gnatchp-cross$(exeext) $(bindir)/$(target)-gnatchp$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatchp$(exeext); \
	  else \
	    rm -f $(bindir)/gnatchp$(exeext); \
	    $(INSTALL_PROGRAM) gnatchp$(exeext) $(bindir)/gnatchp$(exeext); \
	    chmod a+x $(bindir)/gnatchp; \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatchop-cross ] ; then \
	    rm -f $(bindir)/$(target)-gnatchop; \
	    $(INSTALL_PROGRAM) $(srcdir)/ada/gnatchop-cross $(bindir)/$(target)-gnatchop; \
	    chmod a+x $(bindir)/$(target)-gnatchop; \
	  else \
	    rm -f $(bindir)/gnatchop; \
	    $(INSTALL_PROGRAM) $(srcdir)/ada/gnatchop $(bindir)/gnatchop; \
	    chmod a+x $(bindir)/gnatchop; \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  if [ -f gnatbl-cross$(exeext) ] ; then \
	    rm -f $(bindir)/$(target)-gnatbl$(exeext); \
	    $(INSTALL_PROGRAM) gnatbl-cross$(exeext) $(bindir)/$(target)-gnatbl$(exeext); \
	    chmod a+x $(bindir)/$(target)-gnatbl$(exeext); \
	  else \
	    rm -f $(bindir)/gnatbl$(exeext); \
	    $(INSTALL_PROGRAM) gnatbl$(exeext) $(bindir)/gnatbl$(exeext); \
	    chmod a+x $(bindir)/gnatbl$(exeext); \
	  fi ; \
	fi
	-if [ -f gnat1$(exeext) ] ; then \
	  $(MAKE) INSTALL_DATA="$(INSTALL_DATA)" install-gnatlib; \
	fi

install-gnatlib:
	(cd ada; \
	 $(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib)

ada.install-info:
ada.install-man:

ada.uninstall:
	-rm -rf $(bindir)/gnatbind$(exeext) $(bindir)/gnatf$(exeext)
	-rm -rf $(bindir)/gnatlink$(exeext) $(bindir)/gnatlink$(exeext)
	-rm -rf $(bindir)/gnatmake$(exeext) $(bindir)/gnatmake$(exeext)
	-rm -rf $(bindir)/gnatcmd$(exeext) $(bindir)/gnatcmd$(exeext)
	-rm -rf $(bindir)/gnatprep$(exeext) $(bindir)/gnatprep$(exeext)
	-rm -rf $(bindir)/gnatchp$(exeext) $(bindir)/gnatchop
	-rm -rf $(bindir)/gnatbl$(exeext)
	-rm -rf $(bindir)/$(target)-gnatbind$(exeext)
	-rm -rf $(bindir)/$(target)-gnatf$(exeext)
	-rm -rf $(bindir)/$(target)-gnatkr(exeext)
	-rm -rf $(bindir)/$(target)-gnatchp$(exeext)
	-rm -rf $(bindir)/$(target)-gnatchop
	-rm -rf $(bindir)/$(target)-gnatbl$(exeext)

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

ada.mostlyclean:
	-rm -f ada/*$(objext) ada/*.ali ada/b_*.c
	-rm -f ada/sdefault.adb ada/ttypef.ads ada/stamp-sdefault
ada.clean:
ada.distclean:
	-rm -f ada/Makefile gnatf$(exeext) gnatlink$(exeext) gnatkr$(exeext)
	-rm -f gnatmake$(exeext) gnatcmd$(exeext) gnatprep$(exeext)
	-rm -f gnatchp$(exeext) gnatbl$(exeext)
	-rm -rf ada/rts
ada.extraclean:
ada.maintainer-clean:
	-rm -f ada/a-[se]info.h
	-rm -f ada/nmake.ad[bs]
	-rm -f ada/treeprs.ads

# Stage hooks:
# The main makefile has already created stage?/ada

ada.stage1:
	-mv ada/*$(objext) ada/*.ali ada/mkttypef ada/b_*.c stage1/ada
	-mv ada/stamp-* stage1/ada
ada.stage2:
	-mv ada/*$(objext) ada/*.ali ada/mkttypef ada/b_*.c stage2/ada
	-mv ada/stamp-* stage2/ada
ada.stage3:
	-mv ada/*$(objext) ada/*.ali ada/mkttypef ada/b_*.c stage3/ada
	-mv ada/stamp-* stage3/ada
ada.stage4:
	-mv ada/*$(objext) ada/*.ali ada/mkttypef ada/b_*.c stage4/ada
	-mv ada/stamp-* stage4/ada

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
ada.distdir:
	mdkdir tmp/ada
	cd ada ; $(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) ada_extra_files
	cd ada; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/ada >/dev/null 2>&1 || cp $$file ../tmp/ada; \
	done

# Bootstrapping targets for just GNAT - use the same stage directories
gnatboot: force
	$(MAKE) gnat1 gnatbind CC="$(CC)" CFLAGS="$(CFLAGS)"
	$(MAKE) gnatstage1
	$(MAKE) gnatboot2 BOOT_CFLAGS="$(BOOT_CFLAGS)" \
	                  BOOT_ADAFLAGS="$(BOOT_ADAFLAGS)" \
	                  LDFLAGS="$(BOOT_LDFLAGS)"

gnatboot2: force
	$(MAKE) gnat1 gnatbind  CC="gcc -Bstage1/"\
				CFLAGS="$(BOOT_CFLAGS)" \
	        		ADAFLAGS="$(BOOT_ADAFLAGS)"\
				LDFLAGS="$(BOOT_LDFLAGS)" \
				STAGE_PREFIX=stage1/
	-rm -f stamp-cmp-failed
	for file in ada/*$(objext) ; do \
	  tail +16c ./$$file > tmp-foo1 ; \
	  tail +16c ./stage1/$$file > tmp-foo2 2>/dev/null && \
	  (cmp tmp-foo1 tmp-foo2>/dev/null \
           || (touch stamp-cmp-failed \
                && echo ./$$file ./stage1/$$file differs \
	        && true)) ; \
	done
	-rm -f tmp-foo* 
	@if [ ! -f stamp-cmp-failed ] ; then \
	  echo Bootstrap succeded after Stage1; \
	 else \
	  $(MAKE) gnatstage2 ; \
	  $(MAKE) gnatboot3 BOOT_CFLAGS="$(BOOT_CFLAGS)" \
			    BOOT_ADAFLAGS="$(BOOT_ADAFLAGS)" \
			    LDFLAGS="$(BOOT_LDFLAGS)"; \
	 fi

gnatboot3: force
	$(MAKE) gnat1 gnatbind  CC="gcc -Bstage2/"\
				CFLAGS="$(BOOT_CFLAGS)" \
	        		ADAFLAGS="$(BOOT_ADAFLAGS)"\
				LDFLAGS="$(BOOT_LDFLAGS)" \
				STAGE_PREFIX=stage2/
	$(MAKE) gnatcompare;

gnatcompare: force
	for file in ada/*$(objext); do \
	  tail +16c $$file > tmp-foo1; \
	  tail +16c stage2/$$file > tmp-foo2 2>/dev/null \
	    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \
	done
	-rm -f tmp-foo* 

gnatstage1: force
	-mkdir stage1
	-mkdir stage1/ada
	-mv -f gnat1 gnatbind stage1
	-mv -f ada/*$(objext) ada/*.ali ada/mkttypef stage1/ada
	-mv ada/stamp-* stage1/ada

gnatstage2: force
	-mkdir stage2
	-mkdir stage2/ada
	-mv -f gnat1 gnatbind stage2
	-mv -f ada/*$(objext) ada/*.ali ada/mkttypef stage2/ada
	-mv ada/stamp-* stage2/ada
