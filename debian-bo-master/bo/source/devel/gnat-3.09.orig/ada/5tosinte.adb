------------------------------------------------------------------------------
--                                                                          --
--                 GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS               --
--                                                                          --
--                   S Y S T E M . O S _ I N T E R F A C E                  --
--                                                                          --
--                                  B o d y                                 --
--                         (Version for new GNARL)                          --
--                                                                          --
--                             $Revision: 1.2 $                            --
--                                                                          --
--   Copyright (C) 1991,1992,1993,1994,1995,1996 Florida State University   --
--                                                                          --
-- GNARL is free software; you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with GNARL; see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- As a special exception,  if other files  instantiate  generics from this --
-- unit, or you link  this unit with other files  to produce an executable, --
-- this  unit  does not  by itself cause  the resulting  executable  to  be --
-- covered  by the  GNU  General  Public  License.  This exception does not --
-- however invalidate  any other reasons why  the executable file  might be --
-- covered by the  GNU Public License.                                      --
--                                                                          --
-- GNARL was developed by the GNARL team at Florida State University. It is --
-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --
-- State University (http://www.gnat.com).                                  --
--                                                                          --
------------------------------------------------------------------------------

--  This is a FSU THREADS version of this package.

--  DO NOT EDIT this file.
--  It was automatically generated from another file by the m4 macro processor.
--  The name of the file you should edit is the same as this one, but with
--  ".ads" replaced by ".sm4", or
--  ".adb" replaced by ".bm4", or
--  ".c" replaced by ".cm4", or
--  ".dat" replaced by ".tm4"

--  Local options selected:
--    __TARGET            = sparc-sun-solaris_fsu
--    __ARCH              = SPARC
--    __OS                = SUNOS5X
--    __HAS_SIGCONTEXT    = 0
--    __HAS_UCONTEXT      = 1
--    __THREADS           = POSIX_THREADS
--    __THREAD_VARIANT    = FSU_THREADS
--    __HAS_TIMESPEC      = 1
--    __HAS_NANOSLEEP     = 1
--    __HAS_CLOCK_GETTIME = 1
--    __HAS_GETTIMEOFDAY  = 1
--    __POSIX_THREAD_PRIO_PROTECT = 1
--    __POSIX_THREAD_PRIO_INHERIT = 0
--    __POSIX_THREAD_ATTR_STACKADDR = 0
--    __POSIX_THREAD_ATTR_STACKSIZE = 0
--    __POSIX_THREAD_PRIORITY_SCHEDULING = 1

--  This package encapsulates all direct interfaces to OS services
--  that are needed by children of System.

--  This version is for POSIX-like operating systems
--  The original file "s-osinte.ads_m4" contains conditional
--  macro calls that allow selection of various options.

with Interfaces.C; use Interfaces.C;
package body System.OS_Interface is

   ---------------
   -- Nanosleep --
   ---------------

   function nanosleep (rqtp, rmtp : access timespec)  return int is
      function nanosleep_base (rqtp, rmtp : access timespec)  return int;
      pragma Import (C, nanosleep_base, "nanosleep");
      Result : int;

   begin
      Result := nanosleep_base (rqtp, rmtp);
      --  FSU implementation of nanosleep set errno to EAGAIN for negative
      --  delays.
      if errno = EAGAIN then
         return 0;
      else
         return Result;
      end if;
   end nanosleep;

   -----------------
   -- To_Duration --
   -----------------

   function To_Duration (TS : timespec) return Duration is
   begin
      return Duration (TS.tv_sec) + Duration (TS.tv_nsec) / 10#1#E9;
   end To_Duration;

   -----------------
   -- To_Timespec --
   -----------------

   function To_Timespec (D : Duration) return timespec is
      S : time_t;
      F : Duration;
   begin
      S := time_t (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.
      if F < 0.0 then S := S - 1; F := F + 1.0; end if;
      return timespec' (tv_sec => S,
        tv_nsec => long (Long_Long_Integer (F * 10#1#E9)));
   end To_Timespec;


   function To_Duration (TV : struct_timeval) return Duration is
   begin
      return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;
   end To_Duration;

   function To_Timeval (D : Duration) return struct_timeval is
      S : long;
      F : Duration;
   begin
      S := long (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.
      if F < 0.0 then S := S - 1; F := F + 1.0; end if;
      return struct_timeval' (tv_sec => S,
        tv_usec => long (Long_Long_Integer (F * 10#1#E6)));
   end To_Timeval;


   --  FSU_THREADS has a nonstandard sigwait
   function sigwait
     (set : access sigset_t;
      sig : access Signal)
     return int
   is
      Result : int;
      function sigwait_base (set : access sigset_t) return int;
      pragma Import (C, sigwait_base, "sigwait");

   begin
      Result := sigwait_base (set);
      if sig /= null then
         if Result = -1 then
            sig.all := 0;
         else
            sig.all := Signal (Result);
            Result := 0;
         end if;
      else
         Result := -1;
      end if;
      return Result;
   end sigwait;

   --  FSU_THREADS does not have pthread_sigmask. Instead, it uses
   --  sigprocmask to do the signal handling when the thread library is
   --  sucked in.
   function pthread_sigmask
     (how  : int;
      set  : access sigset_t;
      oset : access sigset_t)
     return int
   is
      function sigprocmask
        (how  : int;
         set  : access sigset_t;
         oset : access sigset_t)
        return int;
      pragma Import (C, sigprocmask, "sigprocmask");
   begin
      return sigprocmask (how, set, oset);
   end pthread_sigmask;

   --  FSU_THREADS has nonstandard pthread_mutex_lock and unlock.
   --  It sets errno but the standard Posix requires it to be returned.

   function pthread_mutex_lock
     (mutex : access pthread_mutex_t)
     return int
   is
      function pthread_mutex_lock_base
        (mutex : access pthread_mutex_t)
        return  int;
      pragma Import (C, pthread_mutex_lock_base, "pthread_mutex_lock");
      Result : int;
   begin
      Result := pthread_mutex_lock_base (mutex);
      if Result /= 0 then
         return errno;
      end if;
      return 0;
   end pthread_mutex_lock;

   function pthread_mutex_unlock
     (mutex : access pthread_mutex_t)
     return int
   is
      function pthread_mutex_unlock_base
        (mutex : access pthread_mutex_t)
        return  int;
      pragma Import (C, pthread_mutex_unlock_base, "pthread_mutex_unlock");
      Result : int;
   begin
      Result := pthread_mutex_unlock_base (mutex);
      if Result /= 0 then
         return errno;
      end if;
      return 0;
   end pthread_mutex_unlock;

   --  FSU_THREADS has a nonstandard pthread_cond_wait.
   --  The FSU_THREADS version returns EINTR when iterrupted.
   function pthread_cond_wait
     (cond  : access pthread_cond_t;
      mutex : access pthread_mutex_t)
     return  int
   is
      function pthread_cond_wait_base
        (cond  : access pthread_cond_t;
         mutex : access pthread_mutex_t)
        return  int;
      pragma Import (C, pthread_cond_wait_base, "pthread_cond_wait");
      Result : int;

   begin
      Result := pthread_cond_wait_base (cond, mutex);
      if Result = EINTR then
         return 0;
      else
         return Result;
      end if;
   end pthread_cond_wait;

   --  FSU_THREADS has a nonstandard pthread_detach
   --  The FSU_THREADS version has a parameter of type
   --  "pthread_t *" where the POSIX.1c/D10 version has
   --  a parameter of type just "pthread_t".
   function pthread_detach (thread : pthread_t) return int is

      function pthread_detach_base (thread : access pthread_t) return int;
      pragma Import (C, pthread_detach_base, "pthread_detach");
      Tmp : aliased pthread_t := thread;

   begin
      return pthread_detach_base (Tmp'Unchecked_Access);
   end pthread_detach;

   --  FSU_THREADS does not have pthread_getschedparam
   --  This routine returns a non-negative vaule upon failure
   --  but the error code can not be set comforming the POSIX standard.
   function pthread_getschedparam
     (thread : pthread_t;
      policy : access int;
      param  : access struct_sched_param)
     return int
   is
      --  pthread_attr_getprio is not used, because of shortcut below
      --  Declaration is retained here for documentation.
      --  function pthread_attr_getprio
      --    (attr : access pthread_attr_t)
      --     return int;
      --  pragma Import (C, pthread_attr_getprio, "pthread_attr_getprio");

      function pthread_getschedattr
        (thread : pthread_t;
         attr   : access pthread_attr_t)
         return int;
      pragma Import (C, pthread_getschedattr, "pthread_getschedattr");

      attr : aliased pthread_attr_t;
      Result : int;

   begin
      Result := pthread_attr_init (attr'Access);
      if Result /= 0 then return Result; end if;
      Result := pthread_getschedattr (thread, attr'Access);
      if Result /= 0 then return Result; end if;
      policy.all := attr.sched;
      param.sched_priority := attr.prio;
      --  short-cut around pthread_attr_getprio
      Result := pthread_attr_destroy (attr'Access);
      if Result /= 0 then
         return Result;
      else
         return 0;
      end if;
   end pthread_getschedparam;

   --  FSU_THREADS does not have pthread_setschedparam
   --  This routine returns a non-negative vaule upon failure
   --  but the error code can not be set comforming the POSIX standard.
   function pthread_setschedparam
     (thread : pthread_t;
      policy : int;
      param  : access struct_sched_param)
     return int
   is
      --  ptrhead_attr_setprio is not used, due to shortcut below.
      --  Declaration is retained here for documentation.
      --  function pthread_attr_setprio
      --    (attr     : access pthread_attr_t;
      --     priority : int)
      --     return int;
      --  pragma Import (C, pthread_attr_setprio, "pthread_attr_setprio");

      function pthread_setschedattr
        (thread : pthread_t;
         attr   : access pthread_attr_t) return int;
      pragma Import (C, pthread_setschedattr, "pthread_setschedattr");

      attr : aliased pthread_attr_t;
      Result : int;

   begin
      Result := pthread_attr_init (attr'Access);
      if Result /= 0 then return Result; end if;
      attr.sched := policy;
      attr.prio := param.sched_priority;
      --  short-cut around pthread_attr_setprio
      Result := pthread_setschedattr (thread, attr'Access);
      if Result /= 0 then return Result; end if;
      Result := pthread_attr_destroy (attr'Access);
      if Result /= 0 then
         return Result;
      else
         return 0;
      end if;
   end pthread_setschedparam;


   --  FSU_THREADS has a nonstandard pthread_getspecific
   function pthread_getspecific (key : pthread_key_t) return System.Address is
      function pthread_getspecific_base
        (key   : pthread_key_t;
         value : access System.Address)
        return  int;
      pragma Import (C, pthread_getspecific_base, "pthread_getspecific");
      Tmp : aliased System.Address;

      Result : int;
   begin
      Result := pthread_getspecific_base (key, Tmp'Access);
      if Result /= 0 then return System.Null_Address; end if;
      return Tmp;
   end pthread_getspecific;

   function pthread_attr_setdetachstate
     (attr        : access pthread_attr_t;
      detachstate : int)
     return int is

      function pthread_attr_setdetachstate_base
        (attr        : access pthread_attr_t;
         detachstate : access int) return int;
      pragma Import
        (C, pthread_attr_setdetachstate_base, "pthread_attr_setdetachstate");

      Tmp : aliased int := detachstate;

   begin
      return pthread_attr_setdetachstate_base (attr, Tmp'Access);
   end pthread_attr_setdetachstate;

   --  FSU_THREADS does not have sched_yield;
   function sched_yield return int is
      procedure sched_yield_base (arg : System.Address);
      pragma Import (C, sched_yield_base, "pthread_yield");
   begin
      sched_yield_base (System.Null_Address);
      return 0;
   end sched_yield;

end System.OS_Interface;
