.\" This file describes the readproc interface to the /proc filesystem
.\" 
.\" Copyright 1996 Helmut Geyer <Helmut.Geyer@iwr.uni-heidelberg.de>
.\" 
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH OPENPROC 3 "20 October 1996" "Linux Manpage" "Linux Programmer's Manual"
.SH NAME 
openproc, closeproc  \- initialize process information from /proc/
.SH SYNOPSIS
.nf
.B #include <proc/readproc.h>
.sp 
.BI "PROCTAB* openproc (int " flags ", ... );"
.br
.BI "void closeproc (PROCTAB* " PT ");"

.SH SYNOPSIS

The 
.B openproc
function initializes a PROCTAB structure which can be used by iterated
readproc calls to get information on current processes. Depending on
.IR flags ,
openproc may need a second argument or a second and third argument
(see below).

.B closeproc
closes all files opened by
.B openproc
and deallocates the memory allocated by 
.B openproc.
 
The PROCTAB structure is defined in 
.I <proc/readproc.h> 
as follows:
.sp
.RS
.nf
.ta 4n 11n 18n
typedef struct {
	DIR*	procfs;
	int	flags;
	pid_t*	pids;	/* pids of the procs */
	dev_t*	ttys;	/* devnos of the cttys */
	uid_t*	uids;	/* uids of procs */
	int	nuid;	/* length of argument array */
	char*	stats;	/* status chars (actually output into /proc//stat) */
} PROCTAB;
.ta
.fi
.RE

.SH "RETURN VALUE"
.B opendir
returns a pointer to a PROCTAB structure, or NULL if an error
occurs. This usually means that 
.I /proc 
cannot be read by the process.

.SH "FLAGS"

The behaviour of 
.B opendir
is controlled by the following set of flags, which may be ORed
together. There are three 
different kinds of flags. The first group of flags determins which
information gets read from /proc/#pid for each process. The second
group of flags (of which only one can be enacted for a opendir call)
restricts which processes information is read for by providing a list
of criteria. The third group of flags restricts this as well, but
doesn't need arguments. These may be used together again.

.TP 0.5i
.B "PROC_FILLSTATUS " 
read information from 
.IR  /proc/#pid/status .
.TP 0.5i
.B "PROC_FILLSTAT " 
read information from 
.IR /proc/#pid/stat .
.TP 0.5i
.B "PROC_FILLSTATMEM " 
read information from 
.IR /proc/#pid/statm .
.TP 0.5i
.B "PROC_FILLCMD " 
allocate 
.I cmdline
part of 
.I proc_t 
and read information from 
.IR /proc/#pid/cmdline .
.TP 0.5i
.B "PROC_FILLENV " 
allocate 
.I environ
part of 
.I proc_t 
and read information from 
.IR /proc/#pid/environ .
.TP 0.5i
.B "PROC_FILLTTY "
resolve device number to tty name via 
.IR /etc/psdevtab .
.TP 0.5i
.B "PROC_FILLUSR "
resolve user/group ids to names via
.IR /etc/passwd " and " /etc/group .
.IR /proc/#pid/environ .
.TP 0.5i
.BR PROC_PID  " (2nd argument " pid_t *\fIpidlist\fR)
lookup only processes whose pid is contained in 
.IR pidlist .
This list must be terminated by 0.
.TP 0.5i
.BR PROC_TTY " (2nd argument " dev_t *\fIttylist\fR)
lookup only processes whose controlling terminal is contained in 
.IR ttylist .
This list must be terminated by 0.
.TP 0.5i
.BR PROC_STAT " (2nd argument " char *\fIstatus\fR)
lookup only processes whose status is contained in the string
.IR status .
.TP 0.5i
.BR PROC_UID " (arguments " uid_t *\fIuidlist\fB, int \fIn\fR)
lookup only processes whose user id is contained in 
.IR uidlist .
.I n
is the number of uids contained in the list 
.IR uidlist .
.TP 0.5i
.BR PROC_GID " (arguments " gid_t *\fIgidlist\fB, int \fIn\fR)
lookup only processes whose group id is contained in 
.IR gidlist .
.I n
is the number of gids contained in the list 
.IR gidlist .
.TP 0.5i
.BR PROC_NOTUID ", " PROC_NOTGID
same as 
.BR PROC_UID ", " PROC_GID 
but lookup only processes whose ids are \fBnot\fR contained in the
list.
.TP 0.5i
.BR PROC_NOTPID " (arguments " pid_t *\fIpidlist\fB, int \fIn\fR)
lookup only processes whose process id is not contained in 
.IR pidlist .
.I n
is the number of pids contained in the list.
.TP 0.5i
.B PROC_ANYTTY
lookup only processes that have a controlling terminal.
.TP 0.5i
.B PROC_NOSLEAD
don't lookup session leaders.
.TP 0.5i
.B PROC_NOGLEAD
don't lookup process group leaders.
.TP 0.5i
.B PROC_REAL
when comparing ids as specified using the 
\fBPROC_{UID,GID,NOTUID,NOTGID}\fR flags, use real ids instead of
effective ids. This flag automatically sets the 
.B PROC_FILLSTATUS
flag as this is the only place to get this information.

.SH NOTE
Only one of the flags needing additional arguments
.RB ( "PROC_{PID,TTY,STAT,UID,GID,NOTUID,NOTGID,NOTPID}" )
may be used. 
.I <proc/readproc.h>
provides a macro 
.B PROC_SET_MASK
that makes sure that only one of these options is used. To set, e.g.,  the 
.B PROC_STAT
flag use
.sp
.RS
PROC_SET_MASK(flags,STAT)
.RE
.sp
before calling 
.B openproc
with 
.IR flags .

.SH "SEE ALSO"
.BR readproc (3),
.BR readproctab (3),
.BR /proc/ ,
.BR /usr/include/proc/readproc.h ,
.BR /usr/src/linux/fs/proc/array.c .

.SH AUTHOR

The openproc / readproc interface to the proc filesystem was written
by Charles L. Blake (cblake@bbn.com), some enhancements and the
manpage were done by Helmut Geyer (Helmut.Geyer@iwr.uni-heidelberg.de).