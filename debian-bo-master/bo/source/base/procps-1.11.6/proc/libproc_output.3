.\" This file describes the scalable output functions libproc uses.
.\" 
.\" Copyright 1996 Helmut Geyer <Helmut.Geyer@iwr.uni-heidelberg.de>
.\" 
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.TH LIBPROC_OUTPUT 3  "20 October 1996" "Linux Manpage" "Linux Programmer's Manual"
.SH NAME
sprint_str, sprint_strlist, sprint_hex, sprint_dec, sprint_oct,
sprint_bin, sprint_perc, sprint_size, sprint_time_ival, sprint_time_old_ival
\- print data to a string, scale data if necessary

fprint_str, fprint_strlist, fprint_hex, fprint_dec, fprint_oct,
fprint_bin, fprint_perc, fprint_size, fprint_time_ival, fprint_time_old_ival
\- print data to a file, scale data if necessary

print_str, print_strlist, print_hex, print_dec, print_oct,
print_bin, print_perc, print_size, print_time_ival, print_time_old_ival
\- print data to stdout, scale data if necessary
.SH SYNOPSIS
.B #include <proc/output.h>
.sp
.BI "unsigned sprint_str(char *" s ", char *" str", int " max ");"
.br
.BI "unsigned sprint_strlist(char *" s ", char **" strs" , int " max ", char *" sep" );"
.br
.BI "unsigned sprint_hex(char *" s ", unsigned long " d ", int " max ");"
.br
.BI "unsigned sprint_dec(char *" s ", long " d ", int " max ");"
.br
.BI "unsigned sprint_oct(char *" s ", unsigned long " d ", int " max ");"
.br
.BI "unsigned sprint_bin(char *" s ", unsigned long " d ", int " max ");"
.br
.BI "unsigned sprint_perc(char *" s ",unsigned int " d ", int " max ");"
.br
.BI "unsigned sprint_size(char *" s ", long " d ", int " max ", int " mode ");"
.br
.BI "unsigned sprint_time_ival(char *" s ", time_t " t ", int " max ", int " centi_sec ");"
.br
.BI "unsigned sprint_time_old_ival(char *" s ", time_t " t ", int " max ");"
.sp
.BI "unsigned fprint_str(FILE *" fp ", char *" str ", int " max ");"
.br
.BI "unsigned fprint_strlist(FILE *" fp ", char **" strs ", int " max ", char *" sep ");"
.br
.BI "unsigned fprint_hex(FILE *" fp ", unsigned long " d ", int " max ");"
.br
.BI "unsigned fprint_dec(FILE *" fp ", long " d ", int " max ");"
.br
.BI "unsigned fprint_oct(FILE *" fp ", unsigned long " d ", int " max ");"
.br
.BI "unsigned fprint_perc(FILE *" fp ", unsigned int " d ", int " max ");"
.br
.BI "unsigned fprint_size(FILE *" fp ", long " d ", int " max ", int " mode ");"
.br
.BI "unsigned fprint_time_ival(FILE *" fp ", time_t " t ", int " max ", int " centi_sec ");"
.br
.BI "unsigned sprint_time_old_ival(FILE *" fp ", time_t " t ", int " max ");"
.sp
.BI "unsigned print_str(char *" str ", int " max ");"
.br
.BI "unsigned print_strlist(char **" strs ", int " max ", char *" sep ");"
.br
.BI "unsigned print_hex(unsigned long " d ", int " max ");"
.br
.BI "unsigned print_dec(long " d ", int " max ");"
.br
.BI "unsigned print_oct(unsigned long " d ", int " max ");"
.br
.BI "unsigned print_perc(unsigned int " d ", int " max ");"
.br
.BI "unsigned print_size(long " d ", int " max ", int " mode ");"
.br
.BI "unsigned print_time_ival(time_t " t ", int " max ", int " centi_sec ");"
.br
.BI "unsigned print_time_old_ival(time_t " t ", int " max ");"

.I int force_table_size;

.SH DESCRIPTION
Tis family of functions produces output of maximal length 
.I max
to a provided string, file or stdout. Note that the 
.B print_
functions are realized as macros.
If the data provided does not fit in the maximal length, the data is
scaled to fit. If this doesn't work, the functions not printing an
string will return the negative number of characters printed or will
print an over- (under-)flow mark is printed, depending whether
.I force_table_size 
is true or not.
This scaling is the same for all functions, regardless of output
medium. 
All functions return the number of characters written to the
output device or the negative number, if an overflow occurs and
force_table_size isn't set. Only the 
.BR _str " and " _strlist
functions ever return less than 
.IR max .

The
.B _str 
functions print a string, converting non-printables to escape
sequences. If the string is longer than 
.IR max , 
they truncate the string to the maximal length. No under- or
overflow symbols are printed.

The 
.B _strlist
functions print an array of strings using the corresponding 
.B _str
function. The strings are separated by inserting 
.I sep
between them. Again, if the output exceeds 
.IR max ,
it is truncated.

The 
.BR _hex ", " _oct " and " _bin
functions print an unsigned long integer in hexadecimal, octal or
binary format. If the integer does not fit into the maximal field 
length, the function outputs 
.I max
.B > 
symbols.

The 
.B _dec
functions print a long integer. If the integer (including sign, if
negative) doesn't fit into the maximal field length, the function
outputs 
.I max
.B > 
symbols if 
.I d
is positive, resp.
.I max
.B < 
symbols if 
.I d
is negative.

The 
.B _perc
functions print an integer 0<= 
.I d
<=999 
as percentage value d/10. Sensible field width for this are 
between 2 and 4.

The 
.B _size
functions print a size of
.I d
kB. Depending on 
.IR mode ,
which can take the values 
.B OUT_SZ_PM
or 
.BR OUT_SZ_MK ,
it prints the number of memory pages (which may differ between
different ports of Linux) or the amount of memory used in
kB. The first case uses the corresponding
.B _dec
function. If in the second case an overflow occurs, the value gets
transformed to MB (indicated by a trailing 
.B M
unit), only if even the size in Megabytes doesn't fit anymore, it
prints 
.I max
.B > 
symbols.

The
.B _time_ival
functions print a time interval. Sensible field widths are 3 or 6.
Depending on the length of the interval, the functions print the time
in seconds.centiseconds
.RB ( s )
, minutes:seconds
.RB ( m )
, hours:minutes
.RB ( h )
or days
.RB ( d ).
In narrow format (i.e. 
.I max
= 3), it doesn't print a separator and lesser units. If the interval
is negative or longer than 99999 days resp. longer than 99 days it
will print
.B >>d
as overflow mark.
Note that a negative time will occur only after 24855 days on 32-bit
architectures and only after 106751991167300 days on 64-bit
architectures, i.e. after 68 resp. 292471208677 years. If you ever
have that problem, please send me a notice. 

The
.B _time_old_ival
prints a time in the old format (min:sec) without specifying a unit.

.SH AUTHOR
the output functions have been written by Charles Blake (cblake@bbn.com) 
and Helmut Geyer (Helmut.Geyer@iwr.uni-heidelberg.de). This manpage
was written by Helmut Geyer.