.\" "@(#)cfgtool:$Id: cfgtool.8,v 1.7 1996/12/05 09:39:50 liw Exp $"
.TH CFGTOOL 8
.SH NAME
cfgtool \- manipulate system configuration variables
.SH SYNOPSIS
.B cfgtool
[\-\-create variable value]
[\-\-destroy variable]
[\-\-get variable]
[\-\-set variable value]
[\-\-is-true variable]
[\-\-is-false variable]
[\-\-exists variable]
[\-\-lock]
[\-\-unlock]
[\-\-locked]
[\-\-list-all]
[\-\-create-all]
[\-\-set-all]
[\-\-repository directory]
[\-\-init-repository directory]
.SH DESCRIPTION
.B cfgtool
manages a database of system configuration variables.
.PP
This should not be used to configure application type programs.
Applications should use their own configuration file,
because
.B
cfgtool
is not portable.
.SH OPTIONS
.TP
.I "\-\-init-repository directory"
Create and initialize the repository.
The directory is where the variables will be stored.
.TP
.I "\-\-get variable"
Print value of 
.I variable
to stdout.
.TP
.I "\-\-set variable value"
Set value of
.I variable
to 
.I value
The variable must exist.
.TP
.I "\-\-create variable value"
Create a new variable and set its initial value.
It is not an error for the variable to exist already.
If it does, nothing happens; the value of the variable is
.I not
changed.
.TP
.I "\-\-destroy variable"
Destroy a variable.
.TP
.I "\-\-is-true variable"
Check whether variable exists and contains the value "yes".
Don't output anything, just set the exit code.
.TP
.I "\-\-is-false variable"
Opposite of \-\-is-true: condition is true, if variable exists and
contains the value "no" (actually, any value but "yes").
.TP
.I "\-\-lock"
Lock variable repository.
This is needed only when you need to lock the repository over
several invocations of 
.BR cfgtool .
The repository is locked automatically, if it hasn't already been locked,
but an implicit lock is also removed automatically.
Avoid locking the repository for long periods of time.
.TP
.I "\-\-unlock"
Unlock variable repository.
.TP
.I "\-\-locked"
The variable repository was locked by an earlier process,
but we own the lock.
This prevents creating an implicit lock.
If we created an explicit lock with --lock already,
the implicit lock fails and then the whole operation fails.
This must be the first option,
except for \-\-repository,
if it used at all.
.TP
.I "\-\-list"
List all existing variable names, one per line.
.TP
.I "\-\-exists variable"
Test whether a variable exists.
.TP
.I "\-\-list-all"
Output octet stream to stdout that contains all variables in repository.
.TP
.I "\-\-create-all file"
Read octet stream from file
.I file
(use "-" for stdin) and create all missing variables.
.TP
.I "\-\-set-all file"
Like \-\-create\-all, but also sets existing variables.
.TP
.I "\-\-repository directory"
Use
.I directory
as the repository, instead of default location.
Must be first.
.SH BUGS
Nothing that involves help files is currently working.
