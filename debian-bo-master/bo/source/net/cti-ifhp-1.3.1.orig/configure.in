dnl process this file with GNU autoconf to produce a configure script.

AC_INIT(src/ifhp.c)
AC_CONFIG_AUX_DIR(.)
AC_CANONICAL_SYSTEM
AC_PREFIX_DEFAULT(/usr/local)
AC_CONFIG_HEADER(config.h)
AC_PREFIX_DEFAULT(/usr/local)
AC_SUBST(INSTALL)
AC_SUBST(SHELL)
AC_SUBST(CPP)

dnl ----------------------------------------------------------------------------
dnl -----------   C compiler checks    -----------------------------------------
AC_PROG_CC

dnl ----------------------------------------------------------------------------
dnl ------------   OS Checks  --------------------------------------------------
AC_ISC_POSIX
AC_MINIX
AC_AIX

dnl ----------------------------------------------------------------------------
dnl ------------   OS Checks  --------------------------------------------------
AC_ISC_POSIX
AC_MINIX
AC_AIX

system_type="`echo $target | sed 's/-.*//'`"
echo "Target is $target, architecture $system_type"
AC_DEFINE_UNQUOTED(ARCHITECTURE,"$system_type")

checklibs=
case $target in
     *-sgi-irix5* )
        AC_DEFINE(HAVE_BROKEN_TIOCEXCL)
        AC_DEFINE(SVR4)
        checklibs=no
        ;;
    *solaris* )
        version=`echo $target | sed -e 's/.*solaris//' -e 's/\.//g'`
        AC_DEFINE(SVR4)
        AC_DEFINE_UNQUOTED(SOLARIS,$version)
        ;;
    *hpux* )
        AC_DEFINE(_HPUX_SOURCE)
        CFLAGS="$CFLAGS -D_HPUX_SOURCE=1"
        ;;
    *sunos* )
        version=`echo $target | sed -e 's/.*sunos//' -e 's/\.//g'`
        AC_DEFINE_UNQUOTED(SUNOS,$version)
        ;;
esac

dnl - HMS: Why do we care about elf?  It loses on AT&T's Vr4...
dnl - Should we check for a needed function from -lelf instead?
dnl - I also don't see where defining SVR4 is useful.  If both are needed,
dnl - we should separate the tests so we don't get -lelf under Vr4.
dnl AC_CHECK_HEADER(elf.h, AC_DEFINE(SVR4) LIBS="$LIBS -lelf")

dnl these must be before anything that links.

dnl A/UX uses this...
AC_CHECK_LIB(posix, getpwent, [LIBS="$LIBS -lposix"])

dnl ULTRIX uses this...
AC_CHECK_LIB(syslog, syslog, [LIBS="$LIBS -lsyslog"])

dnl use old-style shared libs if we have 'em.
AC_CHECK_LIB(socket_s, socket, [LIBS="$LIBS -lsocket_s"; have_socket=1])
if test -z "$have_socket"; then
    AC_CHECK_LIB(socket, socket, [LIBS="$LIBS -lsocket"], , -lnsl)
fi

AC_CHECK_LIB(nsl_s, gethostbyaddr, [LIBS="$LIBS -lnsl_s"; have_nsl=1])
if test -z "$have_nsl"; then
    AC_CHECK_LIB(nsl, gethostbyaddr, [LIBS="$LIBS -lnsl"])
fi

AC_CHECK_LIB(net_s, gethostbyaddr, [LIBS="$LIBS -lnet_s"; have_net=1])
if test -z "$have_net"; then
    AC_CHECK_LIB(net, gethostbyaddr, [LIBS="$LIBS -lnet"])
fi

dnl IRIX 4 uses these... NIS calls, shared C lib
AC_CHECK_LIB(sun, getpwnam, [LIBS="$LIBS -lsun"])
AC_CHECK_LIB(c_s, atoi, [LIBS="$LIBS -lc_s"])

AC_C_CONST
AC_C_INLINE

AC_HEADER_STDC
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_HEADER_TIME

dnl typedefs:
AC_TYPE_SIGNAL
AC_TYPE_UID_T
AC_TYPE_SIZE_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T

dnl ----------------------------------------------------------------------------
dnl headers:
AC_CHECK_HEADERS(assert.h ctype.h errno.h fcntl.h)
AC_CHECK_HEADERS(malloc.h memory.h sgtty.h signal.h stdarg.h)
AC_CHECK_HEADERS(stdio.h stdlib.h string.h sys/fcntl.h)
AC_CHECK_HEADERS(sys/file.h sys/param.h sys/socket.h sys/stat.h sys/termio.h)
AC_CHECK_HEADERS(sys/termios.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(sys/ttold.h sys/types.h sys/wait.h)
AC_CHECK_HEADERS(sys/syslog.h syslog.h termio.h)
AC_CHECK_HEADERS(termios.h time.h unistd.h varargs.h vfork.h)

dnl ----------------------------------------------------------------------------
dnl function checks:
AC_CHECK_FUNCS(cfsetispeed sigaction)
AC_REPLACE_FUNCS(strcasecmp)
AC_CHECK_FUNCS(strchr strerror)
AC_REPLACE_FUNCS(strncasecmp)
AC_CHECK_FUNCS(tcflush tcsetattr wait3 waitpid)
AC_REPLACE_FUNCS(strdup)

AC_FUNC_VFORK
AC_FUNC_VPRINTF

AC_TRY_COMPILE([#include <errno.h>],[int i = errno],AC_DEFINE(HAVE_ERRNO_DECL))

dnl ----------------------------------------------------------------------------
dnl nicked this check from Tcl...

AC_MSG_CHECKING(for sys_nerr)
AC_CACHE_VAL(ac_cv_decl_sys_nerr,
[AC_TRY_LINK(,[extern int sys_nerr; return (sys_nerr);],
	ac_cv_decl_sys_nerr=yes, ac_cv_decl_sys_nerr=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_nerr)
if test $ac_cv_decl_sys_nerr = yes; then
	AC_DEFINE(HAVE_SYS_NERR)
fi;

AC_MSG_CHECKING(for sys_nerr declaration)
AC_CACHE_VAL(ac_cv_decl_sys_nerr_def,
[AC_TRY_LINK([
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif],[printf("%d",sys_nerr);],
ac_cv_decl_sys_nerr_def=yes, ac_cv_decl_sys_nerr_def=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_nerr_def)
if test $ac_cv_decl_sys_nerr_def = yes; then
    AC_DEFINE(HAVE_SYS_NERR_DEF)
fi

AC_MSG_CHECKING(for sys_errlist array)
AC_CACHE_VAL(ac_cv_decl_sys_errlist,
[AC_TRY_LINK(,[extern char *sys_errlist[];
	sys_errlist[0];],
	ac_cv_decl_sys_errlist=yes, ac_cv_decl_sys_errlist=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_errlist)
if test $ac_cv_decl_sys_errlist = yes; then
	AC_DEFINE(HAVE_SYS_ERRLIST)
fi

AC_MSG_CHECKING(for sys_errlist declaration)
AC_CACHE_VAL(ac_cv_decl_sys_errlist_def,
[AC_TRY_LINK([
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif],[printf("%s",sys_errlist[1]);],
ac_cv_decl_sys_errlist_def=yes, ac_cv_decl_sys_errlist_def=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_errlist_def)
if test $ac_cv_decl_sys_errlist_def = yes; then
    AC_DEFINE(HAVE_SYS_ERRLIST_DEF)
fi


dnl ----------------------------------------------------------------------------
dnl sys_siglist array (list of signals)

AC_MSG_CHECKING(for sys_siglist array)
AC_CACHE_VAL(ac_cv_decl_sys_siglist,
[AC_TRY_LINK(,[extern char *sys_siglist[]; sys_siglist[1][0] = 0;],
	ac_cv_decl_sys_siglist=yes, ac_cv_decl_sys_siglist=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_siglist)
if test $ac_cv_decl_sys_siglist = yes; then
	AC_DEFINE(HAVE_SYS_SIGLIST)
fi

AC_MSG_CHECKING(for sys_siglist declaration)
AC_CACHE_VAL(ac_cv_decl_sys_siglist_def,
[AC_TRY_LINK([
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SIGNAL_H
#include <signal.h>
#endif],[printf("%s",sys_siglist[1]);],
ac_cv_decl_sys_siglist_def=yes, ac_cv_decl_sys_siglist_def=no)
])
AC_MSG_RESULT($ac_cv_decl_sys_siglist_def)
if test $ac_cv_decl_sys_siglist_def = yes; then
    AC_DEFINE(HAVE_SYS_SIGLIST_DEF)
fi


dnl ----------------------------------------------------------------------------

AC_MSG_CHECKING(how to manipulate tty attributes)
AC_CACHE_VAL(ac_cv_struct_term,
[

if test "$ac_cv_header_termios_h" = yes; then
	ac_cv_struct_term=termios
fi
if test "$ac_cv_header_sys_termios_h" = yes; then
	ac_cv_struct_term=termios
fi

dnl test to see if we need to compile
if test -z "$ac_cv_struct_term" ; then
AC_TRY_COMPILE([
#ifdef HAVE_TERMIO_H
#include <termio.h>
#endif
#ifdef HAVE_SYS_TERMIO_H
#include <sys/termio.h>
#endif],[struct termio t;t.c_iflag = 0],
ac_cv_struct_term=termio)
fi

dnl now you have determined if you have termio
if test -z "$ac_cv_struct_term" ; then
    AC_TRY_COMPILE([#include <sgtty.h>],[
    struct sgttyb s;s.sg_flags = 0],
    ac_cv_struct_term=sgttyb)
fi
if test -z "$ac_cv_struct_term" ; then
	ac_cv_struct_term=UNDEFINED
fi
])
AC_MSG_RESULT(using $ac_cv_struct_term)

if test "$ac_cv_struct_term" = "sgttyb"; then
	AC_DEFINE(USE_SGTTYB)
	AC_DEFINE(USE_STTY,SGTTYB)
fi
if test "$ac_cv_struct_term" = "termio"; then
	AC_DEFINE(USE_TERMIO)
	AC_DEFINE(USE_STTY,TERMIO)
fi
if test "$ac_cv_struct_term" = "termios"; then
	AC_DEFINE(USE_TERMIOS)
	AC_DEFINE(USE_STTY,TERMIOS)
fi

dnl ----------------------------------------------------------------------------
dnl ----------------------------------------------------------------------------
dnl make stuff:

AC_PROG_INSTALL

AC_PROG_RANLIB
AC_PROG_MAKE_SET

dnl ----------------- force this to be Bourne Shell for now ---------------
AC_MSG_CHECKING(for shell)
SHELL=/bin/sh
AC_MSG_RESULT(using $SHELL (FORCED))

AC_OUTPUT(Makefile src/Makefile man/Makefile fonts/Makefile etc/Makefile)
