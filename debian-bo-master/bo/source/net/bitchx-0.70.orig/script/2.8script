/* 
 * This script is intended for use with 2.8 servers on all sites.
 * It handles some formatting options and join options for novice users
 *
 * This script references some aliases that are in 'basical'.  Both of
 * these scripts should be loaded from 'global', so that should not be
 * a problem.  This script will _not_ work correctly if 'basical' is not
 * loaded from 'global'.  This script is a dependancy for other scripts.
 *
 * THIS SCRIPT MUST ALWAYS BE LOADED, OR OTHER SCRIPTS MIGHT NOT WORK!
 * THIS VERSION IS FOR EPIC CLIENTS ONLY (EPIC3.001 or up)
 */

/* I dont know why the client cant do this... */
alias join
{
	switch ($*)
	{
		(*,*)
		{
			join $before(, $*)
			join $after(, $*)
		}
		(#*) (&*) (0) (-*) 
			{ //join $* }
		() 
			{ //join -i }
		(*) 
			{ //join #$* }
	}
}

alias leave
{
	switch ($*)
	{
		(*,*)
		{
			leave $before(, $*)
			leave $after(, $*)
		}
		(#*) (&*) (0) (-*)
			{ //leave $* }
		() (\*)
			{ //leave * }
		(*)
			{ //leave #$* }
	}
}

alias invite {
	if ([$1]) 
		{//invite $0 $1} 
		{//invite $0 $C}
}

alias topic {
	switch ($0)
	{
		(&*) (#*) {//topic $*}
		(*)       {//topic $C $*}
	}
}

/* 
 * I broke this, more or less on purpose on epic3.001. 
 * This makes it look like it did before.
 */
on ^send_public * echo > $1-

on ^ctcp ^"% % ERRMSG *no such function*"
on ^dcc_raw ^"% % D %" 

/* Trace information */
on ^200 * {
	unless (tracepath) (tracepath = [$0])
	echo $o.b() S:[$[15]0] V:[$[10]2] U:[$[20]4] 
	@ tracepath #= [!$4]
}
on ^201 * echo $o.b() $1 Class[$2] ==> $3-
on ^202 * echo $o.b() $1 Class[$2] ==> $3-
on ^203 * echo $o.b() S:[$[15]0] UKNOWN $3
on ^204 * echo $o.b() S:[$[15]0] OPER [$[30]tr(/[/!/$3)
on ^205 * echo $o.b() $1 Class[$2] ==> $3-
on ^206 * {
        if (tracepath) echo TRACE PATH: $tracepath
        echo $o.b() S:[$[15]0] SERV [$[25]5] [$[-4]3] [$[-5]4]
	(tracepath = [])
}
on ^207 * echo $o.b() $1 Class[$2] ==> $3-
on ^208 * echo $o.b() $1 Class[$2] ==> $3-
on ^209 * echo $o.b() $1 $2 Entries linked: $3

/* Stats information */
on ^211 * echo $o.b() $[40]1 $[10]2 $[10]3 $[10]4 $[10]5 $[12]6 $7-
on ^212 * echo $o.b() $[10]1 $2
on ^213 * echo $o.b() $1:$2:$3:$4:$5:$6
on ^214 * echo $o.b() $1:$2:$3:$4:$5:$6
on ^215 * echo $o.b() $1:$2:$3:$4:$5:$6

/* K lines */
on ^216 * {
	(astuff = [$*])
	pop astuff
	pop astuff
	(k.user = pop(astuff))
	shift astuff
	shift astuff
	(k.host = shift(astuff))
	echo $o.b() K $lformat(30 [$k.user@$k.host]) [$astuff]
}

on ^217 * echo $o.b() $1:$2:$3:$4:$5:$6
on ^218 * echo $o.b() $1:$2:$3:$4:$5:$6
on ^241 * echo $o.b() $1:$2:$3:$4:$5:$6

/*
 * 220 is used by .troy versions to return information on
 * host masks being enforced locally.
 */
on ^220 * echo $o.b() $1 $[10]2 $3

/* Service list: */
on ^231 * echo $o.b() Service $1 \($0\)

/* Ban list: */
on ^367 * echo $o.b() $[$CHANNEL_NAME_WIDTH]1 $2-
