# Module: MkMaster.tk
# 25.4.96 T.Niederreiter
# 
# External called functions:
# - mkmaster { w }: creates the master-menu 
#

# Creates the Master-CD-Menu

proc mkmaster { w } {
global XCDR_SOURCE_CDROM	
global XCDR_IMAGE_MNTPNT
global XCDR_DEST_WRITER_DEV
global MSTR_DATA_PART
global MSTR_DATA_MNTPNT
global MSTR_FROM
global MSTR_DIR
global MSTR_TYPE
global MSTR_VOLID MSTR_PUBID MSTR_PREID MSTR_APPID
global ISOtag
global ISOtypes

	log $w "entering Master-CD"
	# Draw header-bar
	label $w.l -text "MASTER CD" -relief sunken -borderwidth 2 -anchor c
	pack $w.l -fill x -expand 1 -ipady 10 -pady 5

	if { ![info exists MSTR_DATA_PART] } {
		set MSTR_DATA_PART ""
	}
	if { ![info exists MSTR_DATA_MNTPNT] } {
		set MSTR_DATA_MNTPNT ""
	}
	if { ![info exists MSTR_FROM] } {
		set MSTR_FROM "prem"
	}
	if { ![info exists MSTR_DIR] } {
		set MSTR_DIR ""
	}
	if { ![info exists MSTR_TYPE] } {
		set MSTR_TYPE "urr"
	}
	if { ![info exists ISOtypes] } {
		newimgtype $MSTR_TYPE
	}


	# predefine available types and their names 
	set ISOtag(urr) "Unix Rock-Ridge"
	set ISOtag(w95) "Win95/NT (long filenames)"
	set ISOtag(dos) "MS-DOS"
	set ISOtag(cust) "Custom"

	if { ![info exists MSTR_VOLID] } {
		set MSTR_VOLID ""
	}
	if { ![info exists MSTR_PUBID] } {
		set MSTR_PUBID ""
	}
	if { ![info exists MSTR_PREID] } {
		set MSTR_PREID ""
	}
	if { ![info exists MSTR_APPID] } {
		set MSTR_APPID ""
	}

	# Create Devices-Setup
	tixLabelFrame $w.devs -label Devices-Setup 
	set w1 [$w.devs subwidget frame]
	pack $w.devs -expand 1 -fill x

	frame $w1.1
	tixLabelWidget $w1.1.readl -label "Master from : " \
		-options {label.width 25 label.anchor e}
	message $w1.1.readt -anchor w -width 250 -relief groove

	global TMP_imgprt_id
	set TMP_imgprt_id $w1.1.readt
	updateseldatatextbox2

	pack $w1.1.readl -side left
	pack $w1.1.readt -side left -expand 1 -fill x

	frame $w1.2
	tixLabelWidget $w1.2.imgl -label "Master to (Image-Device) : " \
		-options {label.width 25 label.anchor e}
	message $w1.2.imgt -anchor w -width 250 -relief groove  
	
	set TMP_imgprt_id $w1.2.imgt
	updateselimagetextbox

	# get the text from the messagebox and append the mountpoint
	set tmptxt [$w1.2.imgt cget -text]
 	append tmptxt "\nMountpoint: $XCDR_IMAGE_MNTPNT"
	$w1.2.imgt configure -text $tmptxt
	
	pack $w1.2.imgl -side left
	pack $w1.2.imgt -side left -expand 1 -fill x

	frame $w1.3
	tixLabelWidget $w1.3.writel -label "Write-Device : " \
		-options {label.width 25 label.anchor e}
	message $w1.3.writet -anchor w -width 250 -relief groove
	$w1.3.writet configure -text $XCDR_DEST_WRITER_DEV
	pack $w1.3.writel -side left
	pack $w1.3.writet -side left -fill x -expand 1 
	
	pack $w1.1 $w1.2 $w1.3 -side top -expand 1 -fill x

	# Tile the window, create a left and a right frame
	frame $w.m
	frame $w.m.l
	frame $w.m.r
	pack $w.m.l $w.m.r -side left
	pack $w.m

	button $w.m.l.b1 -text "Set Master-Partition" \
		-command "spawnsubwindow setmastersource .setmsource .master"
	button $w.m.l.b15 -text "Set Master-Directory" \
		-command "spawnsubwindow setmasterdir .setmdir .master"
	button $w.m.l.b2 -text "Set Image-Type" \
		-command "spawnsubwindow setimgtype .setitype .master"
	button $w.m.l.b3 -text "Set ISO9660 Header-Strings" \
		-command "spawnsubwindow setisoheader .setisoheader .master"
	button $w.m.l.b4 -text "Master Image" \
		-command "spawnsubwindow masterimage .masterimg .master"
	button $w.m.l.b5 -text "Write Image" \
		-command "spawnsubwindow writeimagedialog .wrtmasterimg .master"
	button $w.m.l.b6 -text "Verify Burned Image" \
		-command { verify2imagedialog .verifyimg .master }

	pack $w.m.l.b1 $w.m.l.b15 $w.m.l.b2 $w.m.l.b3 $w.m.l.b4 $w.m.l.b5 $w.m.l.b6 -fill x 

	# Create the Information-Windows
	tixLabelFrame $w.m.r.hdinfo -label "HD-Content Preview" 
	set w2 [$w.m.r.hdinfo subwidget frame]
	pack $w.m.r.hdinfo -expand 1 -fill both
	tixScrolledListBox $w2.b -scrollbar auto -options {
		listbox.font 8x13 
		listbox.width 25 
		listbox.height 6
	}		
	# Set scrollbar-width
	$w2.b.vsb configure -width 10
	$w2.b.hsb configure -width 10
	pack $w2.b -expand 1 -fill both

	tixLabelFrame $w.m.r.cdinfo -label "Image-Content Preview" 
	set w3 [$w.m.r.cdinfo subwidget frame]
	pack $w.m.r.cdinfo -expand 1 -fill both
	tixScrolledListBox $w3.b -scrollbar auto -options {
		listbox.font 8x13 
		listbox.width 25 
		listbox.height 6 
	}		
	# Set scrollbar-width
	$w3.b.vsb configure -width 10
	$w3.b.hsb configure -width 10
	pack $w3.b -expand 1 -fill both

	updateHDlistbox $w2.b
	updateCDlistbox $w3.b ""

	# Create button box
	tixButtonBox $w.box -orientation horizontal
	$w.box add exit -text "Cancel" -command "destroy $w" 
	pack $w.box -fill x -expand 1
 
}


# The Setup-Master-Source Menu 

proc setmastersource { w } {
global MSTR_DATA_PART
global MSTR_DATA_MNTPNT
global MSTR_FROM
global _MSTR_DATA_PART
global _MSTR_DATA_MNTPNT
global _MSTR_FROM

	# backup the vars in case of a later cancel
	set _MSTR_DATA_PART $MSTR_DATA_PART
	set _MSTR_DATA_MNTPNT $MSTR_DATA_MNTPNT
	set _MSTR_FROM $MSTR_FROM

	# Draw header-bar
	label $w.l -text "SET MASTER-PARTITION" -relief sunken -borderwidth 2 -anchor c
	pack $w.l -fill x -expand 1 -ipady 10 -pady 5

 	tixLabelFrame $w.image -label "Partition"
        set f2 [$w.image subwidget frame]

	frame $w.1
	tixLabelWidget $w.1.l -label "Data to master is " \
		-options { label.width 25 label.anchor e }
	radiobutton $w.1.b1 -text "in a premounted directory" \
		-variable MSTR_FROM -value prem -command "mstrselprem $f2" 
	pack $w.1 -fill x -expand 1 
	pack $w.1.l $w.1.b1 -side left

	frame $w.2
	tixLabelWidget $w.2.l \
		-options { label.width 25 label.anchor e }
	radiobutton $w.2.b2 -text "on another partition" \
		-variable MSTR_FROM -value part -command "mstrselpart $f2"
	pack $w.2 -fill x -expand 1 
	pack $w.2.l $w.2.b2 -side left

        pack $w.image -expand 1 -fill x
        frame $f2.imgprt 
        tixLabelWidget $f2.imgprt.l -label "Data-Partition : " \
                -options {label.width 25 label.anchor e}
        frame $f2.imgprt.f -width 250 -relief sunken -borderwidth 2 
        pack $f2.imgprt.f -side right -expand 1 -fill x
        pack $f2.imgprt.l
        message $f2.imgprt.f.msg -anchor w -width 250    
        pack $f2.imgprt.f.msg -expand 1 -fill x

 	global TMP_imgprt_id
        set TMP_imgprt_id $f2.imgprt.f.msg
        updateseldatatextbox

        pack $f2.imgprt -expand 1 -fill x
        frame $f2.imgprt2
        tixLabelWidget $f2.imgprt2.l \
                -options {label.width 25 label.anchor e}
        button $f2.imgprt2.b -text "Select" \
                -command "spawnsubwindow selectdatapartition .selmaster .setmsource"
        pack $f2.imgprt2 -fill x -expand 1
        pack $f2.imgprt2.l $f2.imgprt2.b -side left

        frame $f2.imgmnt
        tixLabelEntry $f2.imgmnt.e -label "Data-Mountpoint : " \
                -options { 
                        label.width 25 label.anchor e 
                        entry.width 20 entry.textVariable MSTR_DATA_MNTPNT }

        button $f2.imgmnt.b -text "Browse" \
                -command "spawnsubwindow selectdatamntpnt .mntmaster .setmsource" 
        pack $f2.imgmnt.e $f2.imgmnt.b -side left
        pack $f2.imgmnt -expand 1 -fill x

	# Invoke radiobutton to update the display 
	if { $MSTR_FROM == "prem" } {
		$w.1.b1 invoke
	} else {
		$w.2.b2 invoke
	}

	# Create button box
	tixButtonBox $w.box -orientation horizontal
	$w.box add ok -text "Ok" -command "setmastersource:ok $w .master"
	$w.box add exit -text "Cancel" -command "setmastersource:cancel $w" 
	pack $w.box -fill x -expand 1
}


# Called by setmastersource when OK is pressed

proc setmastersource:ok { w w1 } {

	mountmastersource 

	# Update the HD-Content-listbox in main-master-menu
	set w2 [$w1.m.r.hdinfo subwidget frame]
	updateHDlistbox $w2.b 

	# Update the master-from textbox in the main-master-menu
	set w2 [$w1.devs subwidget frame]
	global TMP_imgprt_id
	set bak $TMP_imgprt_id
	set TMP_imgprt_id $w2.1.readt
	updateseldatatextbox2
	set TMP_imgprt_id $bak

	destroy $w
}


# Called by setmastersource when CANCEL is pressed

proc setmastersource:cancel { w } {

global MSTR_DATA_PART
global MSTR_DATA_MNTPNT
global MSTR_FROM
global _MSTR_DATA_PART
global _MSTR_DATA_MNTPNT
global _MSTR_FROM

	# restore vars 
	set MSTR_DATA_PART $_MSTR_DATA_PART
	set MSTR_DATA_MNTPNT $_MSTR_DATA_MNTPNT
	set MSTR_FROM $_MSTR_FROM

	destroy $w
}


# Called by radiobutton "partition" in setup-master-partition
# Sets all fields to normal state

proc mstrselpart { f2 } {

	$f2.imgmnt.e configure -state normal 
	$f2.imgmnt.e subwidget label config -fg black
	$f2.imgmnt.e subwidget entry config -fg black 
	$f2.imgmnt.b configure -state normal
	$f2.imgprt.l subwidget label config -fg black
	$f2.imgprt.f.msg configure -fg black
	$f2.imgprt2.b configure -state normal
}


# Called by radiobutton "premounted" in setup-master-partition
# Disables all fields

proc mstrselprem { f2 } {

	$f2.imgmnt.e configure -state disabled 
	$f2.imgmnt.e subwidget label config -fg gray50
	$f2.imgmnt.e subwidget entry config -fg gray50 
	$f2.imgmnt.b configure -state disabled
	$f2.imgprt.l subwidget label config -fg gray50 
	$f2.imgprt.f.msg configure -fg gray50 
	$f2.imgprt2.b configure -state disabled 
}


# This is called by the OK-Button in the Set Master-Partition-Menu

proc mountmastersource {} {
global MSTR_DATA_MNTPNT
global MSTR_DATA_PART
global MSTR_FROM
global _MSTR_DATA_MNTPNT
global _MSTR_DATA_PART
global _MSTR_FROM

	# Any changes on partition or from-status?
	if { $MSTR_DATA_PART != $_MSTR_DATA_PART || $MSTR_FROM != $_MSTR_FROM \
		|| $MSTR_DATA_MNTPNT != $_MSTR_DATA_MNTPNT } {

		# then umount any old mounted partition
		set mstat [doumount $_MSTR_DATA_PART]
		if { $mstat == 1 } { ;# umount ok
			Msg_Umounted .umount .setmsource $_MSTR_DATA_PART 
		}
	}

	# We will master from a premounted dir, no mount needed.
	if { $MSTR_FROM == "prem" } {
		return
	}
	# Is the data-partition mounted? If not mount it...
	if { [getmountpnt $MSTR_DATA_PART] == ""} {

		set mstat [domount $MSTR_DATA_PART $MSTR_DATA_MNTPNT]
		if { $mstat == 0 } {  ;# mount failed
			Msg_MountDataFail .mntdatafail .setmsource
			set MSTR_FROM "prem"
			return
		} else {
			# Mount ok
			Msg_Mounted .mount .setmsource $MSTR_DATA_PART $MSTR_DATA_MNTPNT
		}

	}
	# Data on wrong mountpoint mounted?
	if { [getmountpnt $MSTR_DATA_PART] != $MSTR_DATA_MNTPNT } {
		set fstat [Msg_DataWrongMntpnt .mntdatawrong .setmsource]
		if { $fstat == 0 } { ;# Adjust mountpoint
			set MSTR_DATA_MNTPNT [getmountpnt $MSTR_DATA_PART]
			return
		} else {
			# Not Adjust, therefore mount nothing
			set MSTR_FROM "prem"
			# then umount any old mounted partition
			set mstat [doumount $_MSTR_DATA_PART]
			if { $mstat == 1 } { ;# umount ok
				Msg_Umounted .umount .setmsource $_MSTR_DATA_PART 
			}
			return
		}
	}

}


# Called by the set-master-directory-button

proc setmasterdir { w } {
global MSTR_DIR
global _MSTR_DIR

	# Backup var
	set _MSTR_DIR $MSTR_DIR

	# Draw header-bar
	label $w.l -text "SET MASTER-DIRECTORY" -relief sunken -borderwidth 2 -anchor c
	pack $w.l -fill x -expand 1 -ipady 10 -pady 5

	frame $w.dir
        tixLabelEntry $w.dir.l -label "Directory to master : " \
                -options { 
                        label.width 25 label.anchor e 
                        entry.width 20 entry.textVariable MSTR_DIR }

        button $w.dir.b -text "Browse" \
                -command "spawnsubwindow selectdatadir .dirmaster .setmdir" 
        pack $w.dir.l $w.dir.b -side left
        pack $w.dir -expand 1 -fill x -padx 6 -pady 10

	# Create button box
	tixButtonBox $w.box -orientation horizontal
	$w.box add ok -text "Ok" -command "setmasterdir:ok $w .master"
	$w.box add exit -text "Cancel" -command "setmasterdir:cancel $w" 
	pack $w.box -fill x -expand 1
}


# Called by setmasterdir when OK is pressed

proc setmasterdir:ok { w w1 } {

	set w2 [$w1.m.r.hdinfo subwidget frame]
	updateHDlistbox $w2.b 

	# Update the master-from textbox in the main-master-menu
	set w2 [$w1.devs subwidget frame]
	global TMP_imgprt_id
	set bak $TMP_imgprt_id
	set TMP_imgprt_id $w2.1.readt
	updateseldatatextbox2
	set TMP_imgprt_id $bak

	destroy $w
}


# Called by setmasterdir when CANCEL is pressed

proc setmasterdir:cancel { w } {
global MSTR_DIR
global _MSTR_DIR

	# restore vars 
	set MSTR_DIR $_MSTR_DIR

	destroy $w
}


# Update the HD-Infobox 

proc updateHDlistbox { w } {
global MSTR_DIR

	# Delete old contents of box
	$w subwidget listbox delete 0 end

	# No directory set?
	if { $MSTR_DIR == "" } {
		$w subwidget listbox insert 0 \
			"" "" " No Master-Directory set!"
		return
	}	

	set out [getdircontents $MSTR_DIR]

	# no such directory?
	if { $out == -1 } {
		$w subwidget listbox insert 0 \
			"" "" "   Invalid Directory!"
		return
	}

	foreach i $out {
		$w subwidget listbox insert end $i
	}
}

		
# Update the CD-Infobox 

proc updateCDlistbox { w image } {

	# Delete old contents of box
	$w subwidget listbox delete 0 end

	# No directory set?
	if { $image == "" } {
		$w subwidget listbox insert 0 \
			"" "" " Updated after mastering"
		return
	}

	set out [getimagecontents $image]

	# no such directory?
	if { $out == -1 } {
		$w subwidget listbox insert 0 \
			"" "" "    Invalid Image!"
		return
	}

	foreach i $out {
		$w subwidget listbox insert end $i
	}
}


# Called by the Set-Image-Type-Button

proc setimgtype { w } {
global ISOtypes
global _ISOtypes
global MSTR_TYPE
global _MSTR_TYPE
global ISOtag
global OPTMENUFIX

	# Draw header-bar
	label $w.l -text "SET IMAGE TYPE" -relief sunken -borderwidth 2 -anchor c
	pack $w.l -fill x -expand 1 -ipady 10 -pady 5

	# backup var
	set _MSTR_TYPE $MSTR_TYPE
	cpisoarr _ISOtypes ISOtypes

	set tmpval $MSTR_TYPE
	unset MSTR_TYPE

	if { $OPTMENUFIX } {
		tixOptionMenu $w.opt -label "Select Image-Type : " \
		-variable MSTR_TYPE -command "newimgtype" -dynamicgeometry 1 \
		-options { label.width 25 label.anchor e menubutton.width 25 }
	} else {
		tixOptionMenu $w.opt -label "Select Image-Type : " \
		-variable MSTR_TYPE -command "newimgtype" \
		-options { label.width 25 label.anchor e menubutton.width 25 }
	}

	# We disable callback here, because the command connected to
	# the Options would delete our ISOtypes-array.
	$w.opt configure -disablecallback 1
	$w.opt add command urr -label $ISOtag(urr) 
	$w.opt add command w95 -label $ISOtag(w95) 
	$w.opt add command dos -label $ISOtag(dos)
	$w.opt add command cust -label $ISOtag(cust)
	$w.opt configure -disablecallback 0

	catch { $w.opt configure -value $tmpval }

	pack $w.opt

	tixLabelFrame $w.f -label "ISO-Filesystem Options"
	set f [$w.f subwidget frame]
	pack $w.f

	frame $f.l 
	frame $f.r
	pack $f.l $f.r -side left

	checkbutton $f.l.b1 -text "Include all files" \
		-variable ISOtypes(1) -onvalue "-a" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.l.b2 -text "Follow symb. Links" \
		-variable ISOtypes(2) -onvalue "-f" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.l.b3 -text "Allow long (32-char) filenames" \
		-variable ISOtypes(3) -onvalue "-l" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.l.b4 -text "Enable Rock Ridge extensions" \
		-variable ISOtypes(4) -onvalue "-R" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.l.b5 -text "Rock Ridge with anonymity" \
		-variable ISOtypes(5) -onvalue "-r" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.r.b6 -text "Create TRANS.TBL-files" \
		-variable ISOtypes(6) -onvalue "-T" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.r.b7 -text "Omit trailing periods" \
		-variable ISOtypes(7) -onvalue "-d" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.r.b8 -text "Do not use deep dir. relocation" \
		-variable ISOtypes(8) -onvalue "-D" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.r.b9 -text "Allow files beginning with a dot" \
		-variable ISOtypes(9) -onvalue "-L" -offvalue "" \
		-command "entercustom $w.opt"
	checkbutton $f.r.b10 -text "Omit ISO version numbers" \
		-variable ISOtypes(10) -onvalue "-N" -offvalue "" \
		-command "entercustom $w.opt"
 
	pack $f.l.b1 $f.l.b2 $f.l.b3 $f.l.b4 $f.l.b5 -anchor w
	pack $f.r.b6 $f.r.b7 $f.r.b8 $f.r.b9 $f.r.b10 -anchor w 

	# Create button box
	tixButtonBox $w.box -orientation horizontal
	$w.box add ok -text "Ok" -command "setimgtype:ok $w" 
	$w.box add exit -text "Cancel" -command "setimgtype:cancel $w" 
	pack $w.box -fill x -expand 1
}


# Called by OK-Button in set-image-type

proc setimgtype:ok { w } {

	destroy $w
}


# Called by Cancel-Button in set-image-type

proc setimgtype:cancel { w } {
global MSTR_TYPE
global _MSTR_TYPE
global ISOtypes
global _ISOtypes

	set MSTR_TYPE $_MSTR_TYPE
	cpisoarr ISOtypes _ISOtypes
	destroy $w
}


# Called when the user chooses a new ISO-Type from the OptionMenu

proc newimgtype { value } {
global ISOtypes

	# Full control-string for reference:
	#      { "-a" "-f" "-l" "-R" "-r" "-T" "-d" "-D" "-L" "-N" } 

	# Set default-values for each type
	switch $value {

		"urr" {
		set ctrl { "-a" "" "-l" "" "-r" "" "" "" "-L" "" }
		}
	
		"w95" {
		set ctrl { "-a" "" "-l" "" "" "" "" "" "-L" "" }
		}

		"dos" {
		set ctrl { "-a" "" "" "" "" "" "" "" "" "" }
		}

		"cust" {
			return
		}
	}

	set i 1
	foreach j $ctrl {
	 	set ISOtypes($i) $j
		incr i
	}
}


# This is called when a user presses a checkbutton in the set-type-menu
# We consider this as the wish to enter a custom-config

proc entercustom { w } {

	$w configure -value "cust"
}


# Copies one array (10 elements) to another array

proc cpisoarr { iso1 iso2 } {
upvar $iso1 arr1
upvar $iso2 arr2

	for { set i 1 } { $i <= 10 } { incr i } {
		set arr1($i) $arr2($i)
	}
}


# Called by the Set-ISO-Header Button

proc setisoheader { w } {
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID
global _MSTR_VOLID
global _MSTR_PUBID
global _MSTR_PREID
global _MSTR_APPID

	# Draw header-bar
	label $w.l -text "SET ISO9660-HEADER-STRINGS" -relief sunken -borderwidth 2 -anchor c
	pack $w.l -fill x -expand 1 -ipady 10 -pady 5

	# Backup vars
	set _MSTR_VOLID $MSTR_VOLID
	set _MSTR_PUBID $MSTR_PUBID
	set _MSTR_PREID $MSTR_PREID
	set _MSTR_APPID $MSTR_APPID

	label $w.l1 -text "Volume-ID:"
	tixLabelEntry $w.e1 -options { entry.width 32 entry.textVariable MSTR_VOLID }
	label $w.l2 -text "Publisher-ID:"
	tixLabelEntry $w.e2 -options { entry.width 64 entry.textVariable MSTR_PUBID }
	label $w.l3 -text "Preparer-ID:"
	tixLabelEntry $w.e3 -options { entry.width 64 entry.textVariable MSTR_PREID }
	label $w.l4 -text "Application-ID:"
	tixLabelEntry $w.e4 -options { entry.width 64 entry.textVariable MSTR_APPID }

	pack $w.l1 $w.e1 $w.l2 $w.e2 $w.l3 $w.e3 $w.l4 $w.e4 -anchor w -padx 10

	frame $w.f
	pack $w.f
	button $w.f.b2 -text "Clear Entries" -command "clearisoheader"
	button $w.f.b1 -text "Read ID's from CD" -command "readisoheader"
	pack $w.f.b1 $w.f.b2 -side right -pady 10

	# Create button box
	tixButtonBox $w.box -orientation horizontal
	$w.box add ok -text "Ok" -command "setisoheader:ok $w" 
	$w.box add exit -text "Cancel" -command "setisoheader:cancel $w" 
	pack $w.box -fill x -expand 1
}


# Called by OK-Button in setisoheader

proc setisoheader:ok { w } {
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID

	# Tailor the strings to the right max. length
	set MSTR_VOLID [string range $MSTR_VOLID 0 31]
	set MSTR_PUBID [string range $MSTR_PUBID 0 127]
	set MSTR_PREID [string range $MSTR_PREID 0 127]
	set MSTR_APPID [string range $MSTR_APPID 0 127]

	destroy $w
}


# Called by cancel-button in setisoheader

proc setisoheader:cancel { w } {
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID
global _MSTR_VOLID
global _MSTR_PUBID
global _MSTR_PREID
global _MSTR_APPID

	set MSTR_VOLID $_MSTR_VOLID
	set MSTR_PUBID $_MSTR_PUBID
	set MSTR_PREID $_MSTR_PREID
	set MSTR_APPID $_MSTR_APPID

	destroy $w
}


# Called by the clear-entries-button in setisoheader

proc clearisoheader {} {
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID

	set stat [Msg_ClearISOstrings .clrisoheader .setisoheader]
	if { $stat == 0 } {	;# Yes
		set MSTR_VOLID ""
		set MSTR_PUBID ""
		set MSTR_PREID ""
		set MSTR_APPID ""
	}
}


# Called by the read-entries-button in setisoheader

proc readisoheader {} {
global ISODETECT
global XCDR_SOURCE_CDROM
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID

	set stat [Msg_ReadISOstrings .clrisoheader .setisoheader]
	if { $stat == 0 } {	;# Yes
		set dev [ convertnametoblkdevice $XCDR_SOURCE_CDROM ]
	
		catch { set MSTR_VOLID [ exec $ISODETECT -V -d $dev ] } 
		catch { set MSTR_PUBID [ exec $ISODETECT -P -d $dev ] } 
		catch { set MSTR_PREID [ exec $ISODETECT -p -d $dev ] } 
		catch { set MSTR_APPID [ exec $ISODETECT -A -d $dev ] } 
	}
}


# Show the Master-Image-Dialog

proc masterimage { w } {
global XCDR_IMAGE_PART
global TMP_DESTNAME
global TMP_DEST
global MSTR_DIR
global MSTR_TYPE
global ISOtag
global remount_active
global TMP_freespace
global TMP_spaceused

        # This is needed for the "file"-radiobutton. If you press this
        # button, and its needed to format the partition, this value
        # is used to find out if the programm itself triggered the 
        # button or the user. The programm invokes the button to 
        # ensure mounting after formatting.
        set remount_active 0

        # Draw header-bar
        label $w.l -text "MASTER IMAGE" -relief sunken -borderwidth 2 -anchor c
        pack $w.l -fill x -expand 1 -ipady 10 -pady 5

        set imgfree [ getfreeimgspace ]
	set TMP_freespace $imgfree
	set TMP_spaceused -1

        frame $w.1
        tixLabelWidget $w.1.imgfree -label "Free Space : " \
                -options { label.width 20 label.anchor e }
        message $w.1.imgfreeval -width 150 -relief sunken -borderwidth 1 \
                -text "$imgfree MB"

        pack $w.1 -fill x -expand 1 -padx 10 -pady 10
        pack $w.1.imgfree -side left
        pack $w.1.imgfreeval -expand 1 -fill x -side left

        frame $w.2
        tixLabelWidget $w.2.l -label "Create Image on: " \
                -options { label.width 20 label.anchor e }
        radiobutton $w.2.b1 -text "Partition" -variable TMP_DEST \
                -value "part" -command "selectedpart $w"
        radiobutton $w.2.b2 -text "File" -variable TMP_DEST \
                -value "file" -command "selectedfile $w"
        pack $w.2 -expand 1 -fill x -padx 10
        pack $w.2.l $w.2.b1 $w.2.b2 -side left

        frame $w.3

        tixLabelEntry $w.3.imgfname -disabledforeground gray \
                -options {
                        label.width 20 label.anchor e
                        entry.width 15 entry.textVariable TMP_DESTNAME 
                }
        pack $w.3 -fill x -expand 1 -padx 10 -pady 10
        pack $w.3.imgfname -side left -fill x -expand 1

        # set default-image-name
        if { $TMP_DESTNAME == "" } {
                set TMP_DESTNAME "image1.raw"
        }
        # Bind to Return in entry-widget the action to update the free-size
        bind $w.3.imgfname.frame.entry <Return> \
                "updatefreesize $w.1.imgfreeval"

        # Trigger default button "partition" if image is not mounted,
        # else trigger "file" 
        if { [getmountpnt $XCDR_IMAGE_PART] == "" } {
                $w.2.b1 invoke
        } else {
                $w.2.b2 invoke
        }

	tixLabelFrame $w.f -label "Image-Information"
	set f [$w.f subwidget frame]
	pack $w.f -expand 1 -fill x

	frame $f.1
        tixLabelWidget $f.1.imgsize -label "Approx. Image-Size : " \
                -options { label.width 20 label.anchor e }
	label $f.1.imgsizeval -width 10 -relief sunken -borderwidth 1 \
		-text "unknown" -anchor c \
               	-font "-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-*-*"
	button $f.1.calc -text "Calculate Size" \
		-command "mstrupdatesize $f.1.imgsizeval .masterimg"
	pack $f.1.imgsize $f.1.imgsizeval $f.1.calc -side left
	pack $f.1 -fill x -expand 1 
	
	frame $f.2
	tixLabelWidget $f.2.imgtype -label "Image-Type : " \
                -options { label.width 20 label.anchor e }
	label $f.2.imgtypeval -width 25 -relief sunken -borderwidth 1 \
		-text $ISOtag($MSTR_TYPE) -anchor c \
               	-font "-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-*-*"
	pack $f.2.imgtype $f.2.imgtypeval -side left
	pack $f.2 -fill x -expand 1

	frame $f.3
	tixLabelWidget $f.3.imgdir -label "Master-Directory : " \
                -options { label.width 20 label.anchor e }
	label $f.3.imgdirval -width 25 -relief sunken -borderwidth 1 \
		-text $MSTR_DIR -anchor c \
               	-font "-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-*-*"
	pack $f.3.imgdir $f.3.imgdirval -side left
	pack $f.3 -fill x -expand 1 -pady 6 

        tixButtonBox $w.box -orientation horizontal
        $w.box add start -text "Start" -command "spawnsubwindow masterimagedoit .master_doit .masterimg" 
        $w.box add cancel -text "Cancel" -command "destroy $w"

        pack $w.box -fill x -expand 1
}


# Update the image-size in the master-image-menu
# Displays a "Please Wait" while in progress

proc mstrupdatesize { w old } {
global MSTR_DIR
global TMP_spaceused
global CDRICO

        set new .waitforsizecalc

        $old configure -cursor watch
        catch { destroy $new }
        toplevel $new
	wm title $new "X-CD-Roast"
	wm iconbitmap $new @$CDRICO	
        grab $new 
        set oldFocus [focus]
        focus $new
	$new configure -cursor watch
	label $new.l -text "Calculating Image-Size"
 	label $new.l2 -text "Please wait"
        pack $new.l $new.l2 -padx 10 -pady 10
        update

	set size [ calcdu $MSTR_DIR ];
	set TMP_spaceused $size

	if { $size == -1 } {
		$w configure -text "Invalid Dir."
	} else {
		$w configure -text "$size MB"
	}

	destroy $new

        catch { focus $oldFocus }
        $old configure -cursor ""
}


# Do the mastering of the image.

proc masterimagedoit { w } {
global MKISOFS
global XCDR_IMAGE_PART
global XCDR_IMAGE_MNTPNT
global TMP_DESTNAME
global TMP_DEST
global MSTR_VOLID
global MSTR_PUBID
global MSTR_PREID
global MSTR_APPID
global MSTR_DIR
global ISOtypes
global TMP_freespace
global TMP_spaceused
global pipe tmpw waitforready

        # This variables must be global, because the fileevent-command
        # can't handle local-variables

	# Check if the Master-Directory is valid 
	if { [ getdircontents $MSTR_DIR] == -1 } {
		lower $w
		Msg_NoMasterDir .nomstrdir $w
		destroy $w
		return 		
	}

	# Check if enough space is free on image-disk.    
	if { $TMP_spaceused != -1 && $TMP_spaceused > $TMP_freespace } {
		lower $w
		set stat [Msg_MasterToBig .mstrtobig $w [expr $TMP_spaceused - $TMP_freespace]]
		if { $stat != 0 } {	;# Abort
			destroy $w
			return
		} 
	}

        # Sets the image-destination
        if { $TMP_DEST == "file" } {
                # Image to file
                set imgfile [ file tail $TMP_DESTNAME]
                set imagedest "$XCDR_IMAGE_MNTPNT/$imgfile"
        } else {
                # Image to partition
                set imagedest $XCDR_IMAGE_PART
        }

        set waitforready 0

	set cmd "$MKISOFS -o $imagedest "
	set flags ""
	for { set i 1 } { $i <= 10 } { incr i } {
		if { $ISOtypes($i) != "" } {
			append flags "$ISOtypes($i) "
		}
	} 
	append cmd $flags

	append cmd "-V \"$MSTR_VOLID\" "
	append cmd "-P \"$MSTR_PUBID\" "
	append cmd "-p \"$MSTR_PREID\" "
	append cmd "-A \"$MSTR_APPID\" "
	
	append cmd "$MSTR_DIR 2>/dev/null" 

	log $w "Master-Image: mastering to $imagedest, masterdir=$MSTR_DIR"
	log $w "Executing: $cmd"

        set pipe [open "|$cmd" r+]
        
        label $w.l -text "Mastering Image... Please wait"
        canvas $w.c -height 20 -width 303 -borderwidth 1 -relief sunken \
                -background gray95
        pack $w.l $w.c -padx 10 -pady 10

        $w.c create text 160 14 -text "0%" -fill gray50 -tag pertext

        tixButtonBox $w.box -orientation horizontal
        $w.box add cancel -text "Cancel" -command {
                set waitforready 2 
                catch { close $pipe }
        }
        pack $w.box -fill x -expand 1

        set tmpw $w.c
        fileevent $pipe readable {
                global pipe tmpw waitforready
                set out [gets $pipe] 
                if { $out == "" } { 
                        set waitforready 1; close $pipe 
                }
                drawbar $tmpw $out 2
        }       

        tkwait variable waitforready

        #we are done with reading now...
        if { $waitforready == 1 } {
                $w.l configure -text "Image successfully mastered."
		drawbar $tmpw 100 2
		
		log $w "Master-Image: OK"
		# Update Image-Preview-listbox
		set w3 [.master.m.r.cdinfo subwidget frame]
		updateCDlistbox $w3.b $imagedest
        } else {
                $w.l configure -text "Master Image aborted!"      
		log $w "Master-Image: aborted"
        }

        $w.box.cancel configure -text "Ok" -command "destroy $w" -width 5
	sound 1

        # Clear the global variables
        unset pipe tmpw waitforready
}

