This is Info file elisp, produced by Makeinfo-1.64 from the input file
elisp.texi.

   This version is the edition 2.4 of the GNU Emacs Lisp Reference
Manual.  It corresponds to Emacs Version 19.29.

   Published by the Free Software Foundation 675 Massachusetts Avenue
Cambridge, MA 02139 USA

   Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995 Free Software
Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included
exactly as in the original, and provided that the entire resulting
derived work is distributed under the terms of a permission notice
identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public License"
may be included in a translation approved by the Free Software
Foundation instead of in the original English.


File: elisp,  Node: Standard Errors,  Next: Standard Buffer-Local Variables,  Prev: GNU Emacs Internals,  Up: Top

Standard Errors
***************

   Here is the complete list of the error symbols in standard Emacs,
grouped by concept.  The list includes each symbol's message (on the
`error-message' property of the symbol) and a cross reference to a
description of how the error can occur.

   Each error symbol has an `error-conditions' property that is a list
of symbols.  Normally this list includes the error symbol itself and
the symbol `error'.  Occasionally it includes additional symbols, which
are intermediate classifications, narrower than `error' but broader
than a single error symbol.  For example, all the errors in accessing
files have the condition `file-error'.

   As a special exception, the error symbol `quit' does not have the
condition `error', because quitting is not considered an error.

   *Note Errors::, for an explanation of how errors are generated and
handled.

`SYMBOL'
     STRING; REFERENCE.

`error'
     `"error"'
     *Note Errors::.

`quit'
     `"Quit"'
     *Note Quitting::.

`args-out-of-range'
     `"Args out of range"'
     *Note Sequences Arrays Vectors::.

`arith-error'
     `"Arithmetic error"'
     See `/' and `%' in *Note Numbers::.

`beginning-of-buffer'
     `"Beginning of buffer"'
     *Note Motion::.

`buffer-read-only'
     `"Buffer is read-only"'
     *Note Read Only Buffers::.

`cyclic-function-indirection'
     `"Symbol's chain of function indirections contains a loop"'
     *Note Function Indirection::.

`end-of-buffer'
     `"End of buffer"'
     *Note Motion::.

`end-of-file'
     `"End of file during parsing"'
     This is not a `file-error'.
     *Note Input Functions::.

`file-error'
     This error and its subcategories do not have error-strings,
     because the error message is constructed from the data items alone
     when the error condition `file-error' is present.
     *Note Files::.

`file-locked'
     This is a `file-error'.
     *Note File Locks::.

`file-already-exists'
     This is a `file-error'.
     *Note Writing to Files::.

`file-supersession'
     This is a `file-error'.
     *Note Modification Time::.

`invalid-function'
     `"Invalid function"'
     *Note Classifying Lists::.

`invalid-read-syntax'
     `"Invalid read syntax"'
     *Note Input Functions::.

`invalid-regexp'
     `"Invalid regexp"'
     *Note Regular Expressions::.

`no-catch'
     `"No catch for tag"'
     *Note Catch and Throw::.

`search-failed'
     `"Search failed"'
     *Note Searching and Matching::.

`setting-constant'
     `"Attempt to set a constant symbol"'
     The values of the symbols `nil' and `t' may not be changed.
     *Note Variables that Never Change: Constant Variables.

`undefined-color'
     `"Undefined color"'
     *Note Color Names::.

`void-function'
     `"Symbol's function definition is void"'
     *Note Function Cells::.

`void-variable'
     `"Symbol's value as variable is void"'
     *Note Accessing Variables::.

`wrong-number-of-arguments'
     `"Wrong number of arguments"'
     *Note Classifying Lists::.

`wrong-type-argument'
     `"Wrong type argument"'
     *Note Type Predicates::.

   These error types, which are all classified as special cases of
`arith-error', can occur on certain systems for invalid use of
mathematical functions.

`domain-error'
     `"Arithmetic domain error"'
     *Note Math Functions::.

`overflow-error'
     `"Arithmetic overflow error"'
     *Note Math Functions::.

`range-error'
     `"Arithmetic range error"'
     *Note Math Functions::.

`singularity-error'
     `"Arithmetic singularity error"'
     *Note Math Functions::.

`underflow-error'
     `"Arithmetic underflow error"'
     *Note Math Functions::.


File: elisp,  Node: Standard Buffer-Local Variables,  Next: Standard Keymaps,  Prev: Standard Errors,  Up: Top

Buffer-Local Variables
**********************

   The table below lists the general-purpose Emacs variables that are
automatically local (when set) in each buffer.  Many Lisp packages
define such variables for their internal use; we don't list them here.

`abbrev-mode'
     *note Abbrevs::.

`auto-fill-function'
     *note Auto Filling::.

`buffer-auto-save-file-name'
     *note Auto-Saving::.

`buffer-backed-up'
     *note Backup Files::.

`buffer-display-table'
     *note Display Tables::.

`buffer-file-format'
     *note Format Conversion::.

`buffer-file-name'
     *note Buffer File Name::.

`buffer-file-number'
     *note Buffer File Name::.

`buffer-file-truename'
     *note Buffer File Name::.

`buffer-file-type'
     *note Files and MS-DOS::.

`buffer-invisibility-spec'
     *note Invisible Text::.

`buffer-offer-save'
     *note Saving Buffers::.

`buffer-read-only'
     *note Read Only Buffers::.

`buffer-saved-size'
     *note Point::.

`buffer-undo-list'
     *note Undo::.

`cache-long-line-scans'
     *note Text Lines::.

`case-fold-search'
     *note Searching and Case::.

`ctl-arrow'
     *note Usual Display::.

`comment-column'
     *note Comments: (emacs)Comments.

`default-directory'
     *note System Environment::.

`defun-prompt-regexp'
     *note List Motion::.

`fill-column'
     *note Auto Filling::.

`goal-column'
     *note Moving Point: (emacs)Moving Point.

`left-margin'
     *note Indentation::.

`local-abbrev-table'
     *note Abbrevs::.

`local-write-file-hooks'
     *note Saving Buffers::.

`major-mode'
     *note Mode Help::.

`mark-active'
     *note The Mark::.

`mark-ring'
     *note The Mark::.

`minor-modes'
     *note Minor Modes::.

`mode-line-buffer-identification'
     *note Mode Line Variables::.

`mode-line-format'
     *note Mode Line Data::.

`mode-line-modified'
     *note Mode Line Variables::.

`mode-line-process'
     *note Mode Line Variables::.

`mode-name'
     *note Mode Line Variables::.

`overwrite-mode'
     *note Insertion::.

`paragraph-separate'
     *note Standard Regexps::.

`paragraph-start'
     *note Standard Regexps::.

`point-before-scroll'
     Used for communication between mouse commands and scroll-bar
     commands.

`require-final-newline'
     *note Insertion::.

`selective-display'
     *note Selective Display::.

`selective-display-ellipses'
     *note Selective Display::.

`tab-width'
     *note Usual Display::.

`truncate-lines'
     *note Truncation::.

`vc-mode'
     *note Mode Line Variables::.


File: elisp,  Node: Standard Keymaps,  Next: Standard Hooks,  Prev: Standard Buffer-Local Variables,  Up: Top

Standard Keymaps
****************

   The following symbols are used as the names for various keymaps.
Some of these exist when Emacs is first started, others are loaded only
when their respective mode is used.  This is not an exhaustive list.

   Almost all of these maps are used as local maps.  Indeed, of the
modes that presently exist, only Vip mode and Terminal mode ever change
the global keymap.

`Buffer-menu-mode-map'
     A full keymap used by Buffer Menu mode.

`c-mode-map'
     A sparse keymap used by C mode.

`command-history-map'
     A full keymap used by Command History mode.

`ctl-x-4-map'
     A sparse keymap for subcommands of the prefix `C-x 4'.

`ctl-x-5-map'
     A sparse keymap for subcommands of the prefix `C-x 5'.

`ctl-x-map'
     A full keymap for `C-x' commands.

`debugger-mode-map'
     A full keymap used by Debugger mode.

`dired-mode-map'
     A full keymap for `dired-mode' buffers.

`edit-abbrevs-map'
     A sparse keymap used in `edit-abbrevs'.

`edit-tab-stops-map'
     A sparse keymap used in `edit-tab-stops'.

`electric-buffer-menu-mode-map'
     A full keymap used by Electric Buffer Menu mode.

`electric-history-map'
     A full keymap used by Electric Command History mode.

`emacs-lisp-mode-map'
     A sparse keymap used by Emacs Lisp mode.

`facemenu-menu'
     The keymap that displays the Text Properties menu.

`facemenu-background-menu'
     The keymap that displays the Background Color submenu of the Text
     Properties menu.

`facemenu-face-menu'
     The keymap that displays the Face submenu of the Text Properties
     menu.

`facemenu-foreground-menu'
     The keymap that displays the Foreground Color submenu of the Text
     Properties menu.

`facemenu-indentation-menu'
     The keymap that displays the Indentation submenu of the Text
     Properties menu.

`facemenu-justification-menu'
     The keymap that displays the Justification submenu of the Text
     Properties menu.

`facemenu-special-menu'
     The keymap that displays the Special Props submenu of the Text
     Properties menu.

`function-key-map'
     The keymap for translating keypad and function keys.
     If there are none, then it contains an empty sparse keymap.

`fundamental-mode-map'
     The local keymap for Fundamental mode.
     It is empty and should not be changed.

`Helper-help-map'
     A full keymap used by the help utility package.
     It has the same keymap in its value cell and in its function cell.

`Info-edit-map'
     A sparse keymap used by the `e' command of Info.

`Info-mode-map'
     A sparse keymap containing Info commands.

`isearch-mode-map'
     A keymap that defines the characters you can type within
     incremental search.

`key-translation-map'
     A keymap for translating keys.  This one overrides ordinary key
     bindings, unlike `function-key-map'.

`lisp-interaction-mode-map'
     A sparse keymap used by Lisp mode.

`lisp-mode-map'
     A sparse keymap used by Lisp mode.

`menu-bar-edit-menu'
     The keymap which displays the Edit menu in the menu bar.

`menu-bar-files-menu'
     The keymap which displays the Files menu in the menu bar.

`menu-bar-help-menu'
     The keymap which displays the Help menu in the menu bar.

`menu-bar-search-menu'
     The keymap which displays the Search menu in the menu bar.

`menu-bar-tools-menu'
     The keymap which displays the Tools menu in the menu bar.

`mode-specific-map'
     The keymap for characters following `C-c'.  Note, this is in the
     global map.  This map is not actually mode specific: its name was
     chosen to be informative for the user in `C-h b'
     (`display-bindings'), where it describes the main use of the `C-c'
     prefix key.

`occur-mode-map'
     A local keymap used by Occur mode.

`query-replace-map'
     A local keymap used for responses in `query-replace' and related
     commands; also for `y-or-n-p' and `map-y-or-n-p'.  The functions
     that use this map do not support prefix keys; they look up one
     event at a time.

`text-mode-map'
     A sparse keymap used by Text mode.

`view-mode-map'
     A full keymap used by View mode.


File: elisp,  Node: Standard Hooks,  Next: Index,  Prev: Standard Keymaps,  Up: Top

Standard Hooks
**************

   The following is a list of hook variables that let you provide
functions to be called from within Emacs on suitable occasions.

   Most of these variables have names ending with `-hook'.  They are
"normal hooks", run by means of `run-hooks'.  The value of such a hook
is a list of functions.  The recommended way to put a new function on
such a hook is to call `add-hook'.  *Note Hooks::, for more information
about using hooks.

   The variables whose names end in `-function' have single functions
as their values.  Usually there is a specific reason why the variable is
not a normal hook, such as the need to pass arguments to the function.
(In older Emacs versions, some of these variables had names ending in
`-hook' even though they were not normal hooks.)

   The variables whose names end in `-hooks' or `-functions' have lists
of functions as their values, but these functions are called in a
special way (they are passed arguments, or else their values are used).

`activate-mark-hook'
`after-change-function'
`after-change-functions'
`after-init-hook'
`after-insert-file-functions'
`after-make-frame-hook'
`auto-fill-function'
`auto-save-hook'
`before-change-function'
`before-change-functions'
`before-init-hook'
`before-make-frame-hook'
`blink-paren-function'
`c-mode-hook'
`calendar-load-hook'
`command-history-hook'
`comment-indent-function'
`deactivate-mark-hook'
`diary-display-hook'
`diary-hook'
`dired-mode-hook'
`disabled-command-hook'
`edit-picture-hook'
`electric-buffer-menu-mode-hook'
`electric-command-history-hook'
`electric-help-mode-hook'
`emacs-lisp-mode-hook'
`find-file-hooks'
`find-file-not-found-hooks'
`first-change-hook'
`fortran-comment-hook'
`fortran-mode-hook'
`ftp-setup-write-file-hooks'
`ftp-write-file-hook'
`indent-mim-hook'
`initial-calendar-window-hook'
`kill-buffer-query-functions'
`kill-emacs-query-functions'
`LaTeX-mode-hook'
`ledit-mode-hook'
`lisp-indent-function'
`lisp-interaction-mode-hook'
`lisp-mode-hook'
`list-diary-entries-hook'
`m2-mode-hook'
`mail-mode-hook'
`mail-setup-hook'
`mark-diary-entries-hook'
`medit-mode-hook'
`mh-compose-letter-hook'
`mh-folder-mode-hook'
`mh-letter-mode-hook'
`mim-mode-hook'
`minibuffer-setup-hook'
`minibuffer-exit-hook'
`news-mode-hook'
`news-reply-mode-hook'
`news-setup-hook'
`nongregorian-diary-listing-hook'
`nongregorian-diary-marking-hook'
`nroff-mode-hook'
`outline-mode-hook'
`plain-TeX-mode-hook'
`post-command-hook'
`pre-abbrev-expand-hook'
`pre-command-hook'
`print-diary-entries-hook'
`prolog-mode-hook'
`protect-innocence-hook'
`rmail-edit-mode-hook'
`rmail-mode-hook'
`rmail-summary-mode-hook'
`scheme-indent-hook'
`scheme-mode-hook'
`scribe-mode-hook'
`shell-mode-hook'
`shell-set-directory-error-hook'
`suspend-hook'
`suspend-resume-hook'
`temp-buffer-show-function'
`term-setup-hook'
`terminal-mode-hook'
`terminal-mode-break-hook'
`TeX-mode-hook'
`text-mode-hook'
`today-visible-calendar-hook'
`today-invisible-calendar-hook'
`vi-mode-hook'
`view-hook'
`window-setup-hook'
`write-contents-hooks'
`write-file-hooks'
`write-region-annotate-functions'
