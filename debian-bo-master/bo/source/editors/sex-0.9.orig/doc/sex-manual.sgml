<!doctype debiandoc system>
<book>

<title>Simple editor for X: Users' Guide
<author>Lars Wirzenius <email>liw@iki.fi
<version>Version 0.8

<abstract>Simple editor for X, or SeX for short, is a text editor for
the X window system. It tries to be simple to use by following
standard graphical user interface paradigms, and by using a mouse
language similar to that of <tt/xterm/, but extends it to provide an unusually
simple way to cut selected text with the mouse. SeX does <em/not/
try to be a full featured editor. It fills only the basic requirements.

<copyright>Copyright &copy; 1996 Lars Wirzenius.

<p>SeX, including this manual, is free software;
you may redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option)
any later version.

<p>This is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. See the
GNU General Public License for more details.

<p>You should have received a copy of the GNU General
Public License with your Debian GNU/Linux system, in
/usr/doc/copyright/GPL, or with the SeX source
package as the file COPYING. If not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


<toc>

<chapt>Introduction

<sect>Goals of SeX

<p><em>Simple editor for X</em> (<em>SeX</em> for short) is yet
another editor. It's goal is to be simple: the user should be
able to use it without having to read a manual. SeX tries
to follow established graphical user interface conventions,
particularly those in the X environment.

<p>It is not a goal of SeX to take over the editor market.

<sect>Getting SeX

<p>This chapter will explain where SeX can be downloaded from, and
how it is installed. It will recommend .deb if those are suitable,
and will refer to sex/README for further details. It will explain
what requirements on the platform there are. It will explain that you
need Publib (and which version).

<p>SeX is licensed under the GNU General Public License (GPL),
so you can copy, use, modify, and copy modifications freely. It's
not necessary to pay me. The only restrictions are that you can't
change the license, and that if you give someone binaries, you
must give them the option of getting sources as well (including
your modifications, if any).  There is no registration required
(but I'd like to know if you use it and what you think of it).

<p>The SeX files can be downloaded from the SeX homepage,
<tt>http://www.iki.fi/liw/SeX/</tt>.

<sect>Feature list

<p>A feature list is always important. Here's some of SeX's features.

<list>

<item>it's fairly small (about 120 kB, stripped, on my Linux PC)

<item>fairly fast, unless the files are big

<item>seems to work, more or less, even if it has many rough edges

<item>the mouse language is as xterm's, but with the addition
that clicking with the middle button inside the selection
cuts it instead of pasting it

<item>can mostly be used from keyboard as well, key bindings 
follow Emacs and PC/Windows somewhat; keyboard customization
is done via the X resource file

<item>multiple files, multiple windows (no inherent limits on either)

<item>name is easy to remember

<item>no macros whatsoever

<item>no undo/redo (this will be implemented later)

<item>no builtin hypertext help (use external browser to read this
manual)

<item>simple C support (indent if previous line ends in open brace)

</list>

<p>Except for undo and redo, no significant new features are expected.
SeX tries to be simple, not full-featured.
	   
<sect>Support

<p>If you have problems with SeX, ask me. I may or may not be
able to help you, and I can't promise to be quick about it. This
is my first X program, and there's lots of stuff I should learn
about X programming.

<p>There is no mailing list, but you can ask me to mail you about
new versions manually.

<sect>Plans for the future

<p>Version 1.0 will have undo and redo, and none of the bugs I know
how to fix. Apart from bug fixes, no further development is planned
after 1.0.

<chapt>Short tutorial

<sect>Starting SeX

<p>If SeX has been installed properly, it can be from a Unix command
line by using the command <tt/sex/. This will start SeX with no files
loaded. You can load files later by using the File menu. You can also
load files directly from the command line, by giving their names
after the name of the program:

<example>
sex letter.txt
</example>

The above command would load the file <tt/letter.txt/ into
the editor. You can load as many files as you wish, from the
command line, via the File menu, or in any combination. SeX
does not limit the number of files that are loaded.  SeX does
not have any command line options.

<p>The window has a menu bar at the top, a large text area in the
middle, scroll bars below and to the right of the text area, and
a status line at the bottom. The status line shows the current
position in the text, and the total size of the text. When the
file has been modified but not yet saved, the end of the status
line will have two stars.

<sect>Typing new text

<p>To insert new text, you just type. There is no special command
you need to use. SeX is `eight bit clean', meaning that non-English
letters will usually work, at least for West European languages.

<p>If you have selected text (this is explained in the next two
sections), typing something will replace the selection.

<sect>Selecting text with the mouse

<p>The greatest appeal of SeX is what it allows you to do with
a mouse, its <em>mouse language</em>.  If you've used X a lot,
you are probably familiar with <em>xterm</em>.  SeX
defines the following mouse language:

	<enumlist>

	<item>Left mouse button selects text. Painting: you move
	the mouse to one end of the text to be selected, press
	the left button, move the mouse to the other end, and
	release the button. Clicking: Clicking twice selects the
	word under the mouse cursor, and thrice selects the line.
	You can combine painting and clicking: if you replace the
	second or third click with a paint, the painting will be
	done in units of words or lines.
	
	<item>Right mouse button changes the selection. It moves the
	nearest end of the selection to the cursor.
	
	<item>The middle mouse button cuts or pastes text. If the mouse
	cursor was inside the selection, then the selection is cut:
	removed from the text and put into the <em/kill ring/. If the
	mouse cursor was outside the selection, the selection is
	pasted (inserted into the text) at the location of the
	cursor.
	
	</enumlist>
	
<p>The way SeX uses the middle mouse button is unique to SeX,
and makes it really easy to delete and move text around, which
is what most editing is.

<p>The selection is shown with black background. There is no
separate text cursor: the selection is the text cursor.

<p>The selection may be columnar, i.e., a rectangle that selects
only between the columns of the end points. The shape of the
selection is controlled with the <em/Toggle columnar/ entry in
the Edit menu.

<p>SeX defines some more things that can be done with the mouse,
but they will be described later.

<sect>Selecting text with the keyboard

<p>The empty selection can be moved around with the cursor keys,
as usual. Some Emacs key bindings also work; see
<ref id="command-summary">. If the selection was not empty, it
will be made empty, by selecting the empty string at either end
of the selection.

<p>Non-empty selections can be made by pressing Shift and a cursor
key. This moves one end of the selection, and keeps the other end at
the same place. For example, pressing Shift-Right twice, selects
the next two characters. Pressing Control-Shift-Right selects the
next two words.

<sect>Editing text

<p>When you have selected text, you can <em/cut/ it,
by clicking inside the text with the middle mouse button. This
will remove the selected text from the file, and put it into
a <em/kill ring/ (sort of like a clipboard).  If you then move
to some other place, you can <em/paste/ the text from the kill
ring, again by clicking with the middle mouse button. This is
a simple way to move text around in the text.

<p>The kill ring is different from a traditional clipboard in
that it can contain many pieces of text. After you have pasted
the first piece of text in the ring, you can replace the pasted
text with the next piece of text, by pressing the control key
while you click the middle mouse button. And then you can replace
that with the next piece. After the last piece of text, you get
the first piece again (that's why it's a ring). You can do this
any number of times. This is useful when you know you regret
having deleted text some time ago, and would like to get it back.

<p>Instead of cutting the selected text, you can paste it directly
by just clicking with the middle mouse button outside the selection.
Copying is as simple as moving.

<p>You can also cut, copy, and paste with the keyboard. Delete
cuts, Alt-W copies, Insert pastes the most recent text in
the kill ring, and Control-Insert goes round in the kill
ring. Further key bindings are shown in <ref id="command-summary">.

<p>The <em/Edit/ menu allows you to do the editing without having
to memorize anything. It is just somewhat slow.

<sect>Using files

<p>The File menu allows you to operate on files:

<taglist>
<tag>New
<item>Create a new <em/buffer/. A buffer is the in-memory version of
a file. The new buffer is empty, and does not have name.

<tag>Load
<item>Load a file into memory, into a new buffer.

<tag>Save
<item>Save buffer to disk. Any modifications you make to a buffer will
vanish when you quit SeX, unless you save them first. SeX 
warns you if you try to quit without saving.

<tag>Save as
<item>Save buffer to a new file. This changes the
name of the buffer.  If you load file A, edit it, and save it
as B, then the disk will have two files, A and B, but only B
will have the edits.

<tag>Save all modified
<item>Save all buffers that have not been changed. If you work on
many files at the same time, use this to save all of them, so that
you don't have to go through all files and save them one by one.

<tag>Insert file
<item>Insert the contents of a new file into the current one.

<tag>Write selection to
<item>Write the selected text to a file.

<tag>Remove buffer
<item>Forget everything about a buffer. This does <em/not/ remove
the actual file from the disk, only the in-memory version of it.
You can't remove a modified buffer, but see the next entry.

<tag>Mark unmodified
<item>Forget that a buffer has been modified. The changes will remain,
but SeX will clear the `modified' flag for the file. This lets you remove
the buffer without saving the changes.

<tag>Next file
<item>Show the next file in this window. If you have many files loaded
at the same time, this moves to the next one. The files are in a ring,
so you can go through all of them until you get back to the one you
started with.

<tag>Previous file
<item>Move backwards through the ring of files.

<tag>Exit
<item>Commence celibacy.

</taglist>

<sect>Searching and replacing

<p>The <em/Search/ menu allows you to search, and optionally replace
text in a file. The first entry in the menu pops up the search and
replace dialog box. The other entries are alternative ways to select
the command buttons in the dialog box.

<p>The dialog box has two text fields, for the text to search for,
and the text to replace it with. There are also option buttons
for backwards searching (default is forwards), case insensitive
matching (makes `a' match `A'), and regular expressions (a powerful
way to write complicated patterns; see <manref name="regex" section="7">).

<p>The command buttons are:

<taglist>
<tag>Search next
<item>Search the next place where the search text occurs.

<tag>Replace+search
<item>Replace this occurence of the search text with the replacement text,
and then search again.

<tag>Replace this
<item>Just replace this occurence.

<tag>Replace all
<item>Replace this and all other occurences.

<tag>Reset
<item>Make the search and replacement texts empty, and select the
default values for the options.

<tag>Dismiss
<item>Close the dialog box.
</taglist>

<p>The dialog box will stay visible until you close it.

<sect>Using multiple windows

<p>SeX allows as many windows as you wish. You can have any number of
windows displaying the same file, or a different file in each window.
Windows are created using the Window menu:

<taglist>
<tag>Clone
<item>Create a new window, which is a clone of the current window.
The new window will show the same file at the same place, but will
not have the same selection, since only one window at a time can have
a non-empty selection.

<tag>Every file
<item>Open a new window for every file that does not already have its
own window.

<tag>Close this
<item>Close a window.

<tag>Close others
<item>Close all other windows.

</taglist>

<p>Note that every SeX window is a different top level window (which
means, for example, that you can iconify them separately). SeX does
not divide its top level windows into subwindows.

<chapt>Advanced features

<sect>Moving to specific places

<p>SeX allows you to <em/mark/ logical places in the file. The
mark will move with text as the file is edited. There are
ten independent marks, though only five are accessible via the
<em/Edit/ menu; the other marks need to be used via the keyboard
(see <ref id="command-summary">). The marks are not remembered
the next time you edit the same file.

<p>You set a mark, and then you can go to it. There is no visible
feedback of where the marks are. To find out where a mark is,
go to it.

<p>Marks are useful when you often need to go to certain places,
or when you need to check some other part of the file, and then
return back to where you where.

<sect>Pasting into menu buttons

<p>This chapter will explain the special features of pasting
into menu buttons.

<p>Some of the names of the menus on the menu bar at the top of the window
are special: you can paste some text into them, and SeX will do something
useful with the text. The special buttons are:

<taglist>
<tag>File
<item>Load file named in the pasted text. The whole text is taken as the
name of the file.

<tag>Goto
<item>Goto line given in pasted text. The line number is extracted from the
text, so it's not necessary to paste only the number. The line number
should be the first number in the text, however.

<tag>Search
<item>Search for the pasted text.

<tag>Window
<item>Make a clone of the window.
</taglist>

<p>All of these actions can be done traditionally via the menus,
but the shortcuts make some common operations faster.

<sect>Formatting paragraphs

<sect>Piping selection through command

<p>The <em/Pipe/ entry in the Edit menu allows you to filter
the selected text through a Unix command. It pops up a dialog
box, where you can enter any valid command line for the
<prgn>/bin/sh</prgn> shell. The selected text will be the
standard input of the command. The text will be replaced with the
standard output of the command.

<p>This could be used to sort lines, to convert tabs to spaces,
or to remove lines that match some pattern. The possibilities are
endless.

<sect>Configuring SeX

<sect1>X resources

<p>Key bindings are configured via X resources, using the usual
syntax. You need to be careful with the order, when binding to
sequences of keys.

<sect1><tt>~/.sexrc</tt>

<p>SeX reads the configuration file <tt>~/.sexrc</tt> when it starts up.
This file can define various variables. The general syntax is

<example>
variablename = value
</example>

Comments and empty lines are allowed. Comments begin with
`<tt/#/' and continue to the end of the line. Each variable
has one of the following types:

<taglist>
<tag>Boolean
<item>A truth value, i.e., `<tt/yes/' or `<tt/no/'.

<tag>String
<item>Any text, which can be enclosed in double quote (`<tt/"/').
Inside double quotes, you can use standard C syntax for unusual
characters, e.g., `<tt/\n/' to mark a newline character.

<tag>Integer
<item>An integer expression. The four basic arithmetic operations
are allowed.

</taglist>

<p>If the configuration file tries to assign the wrong kind of
value to a variable, SeX will not start.  The variables that
can be defined are (the type is indicated inside parentheses):

<taglist>
<tag>save_backup
<item>(Boolean) When saving a file, should the old file be renamed to
have a `<tt/~/' suffix? Default is `<tt/no/'.

<tag>fmt_program
<item>(String) Program that formats text nicely by folding long lines,
and joining short lines. Default is `<tt/fmt/'.

<tag>font
<item>(String) Font to use for displaying the text. Should be the name
of an available X font. Default is `<tt/fixed/'.

<tag>max_killring
<item>(Integer) Maximum amount of memory to use for the kill ring, in
bytes. Default is 64 kilobytes.

<tag>indent_width
<item>(Integer) How many columns the <tt/edit(indent)/ command should
move text. Default is 8.

</taglist>

<p>It is not necessary to assign all variables, but SeX will not start
if you have invalid variables.



<chapt id="command-summary">Command summary

<p>This chapter lists all commands you can give with the mouse
or with the keyboard. Some of the key bindings may require a
Finnish keyboard layout to work properly, due to stupidities with
the X event binding scheme.

<sect>Mouse commands

<p><taglist>
<tag>Left mouse button
<item>Click: select empty string at click. Further clicks without moving
	the mouse select the word or line at click. Press-move-release:
	select text between press and release.

<tag>Shift-left mouse button
<item>Press-move-release: select text between press and release in
	columnar mode.

<tag>Middle mouse button
<item>Click inside selection: cut selection. Outside: paste selection
	at click (from same window or from any window that supports
	normal X copy and paste).

<tag>Shift-middle mouse button
<item>Copy selection to kill ring.

<tag>Right mouse button
<item>Extend selection to click.

</taglist>

<sect>Keyboard commands

<p><taglist>
<tag>Arrow key
<item>Select empty string on next or previous line, or in next or previous
	column.

<tag>Control + left or right arrow
<item>Select empty string at beginning of previous or end of next word.

<tag>Page Up, Page Down, Home, End
<item>Select empty string one windowful upward or downward, or at the
	beginning or end of the line.
	
<tag>Control-Page Up, Control-Page Down, Control-Home, Control-End
<item>Select empty string at beginning or end of file or window.
	
<tag>Shift or Control-Shift and arrow key, Page Up, Page Down, Home, or End
<item>Extend one end of selection in the direction implied by the key.

<tag>Insert, Control-Insert
<item>Replace selection with first or next entry from kill ring.

<tag>Shift-Insert, Control-Shift-Insert
<item>Replace selection with first (next) kill ring entry in columnar mode.

<tag>Delete, Backspace
<item>If selection is empty, cut character after (before) selection.
	Otherwise, cut the selection.

<tag>Control-Delete, Control-Backspace
<item>Like plain Delete (Backspace), but cut word after (before) selection,
	if empty.

<tag>Control-Tab, Shift-Control-Tab
<item>Indent (un-indent) all lines that contain selection.

<tag>Meta (Alt) and digit (0-9)
<item>Go to mark numbered by the digit.

<tag>Shift-Meta (Shift-Alt) and digit (0-9).
<item>Set mark numbered by the digit.

<tag>Control-Meta (Control-Alt) and digit (0-9).
<item>Extend selection to mark numbered by the digit.

<tag>Escape and [ or ]
<item>Select empty string at beginning of previous or end of next paragraph.

<tag>Escape and P or N
<item>Extend selection to beginning of previous or end of next paragraph.

<tag>Escape and ~
<item>Forget that file has been modified. Same as <em/File:Mark unmodified/.

<tag>Escape and C or Meta-C (Alt-C)
<item>Toggle columnar mode for selection.

<tag>Escape and Q, or Meta-Q (Alt-Q)
<item>Pipe selection through formatting command. If selection is empty,
	first select the current paragraph.

<tag>Escape and S, or Meta-S (Alt-S)
<item>Popup search and replace dialog.

<tag>Control-S
<item>Search for next match using the current search string.

<tag>Escape and Z, or Meta-Z (Alt-Z)
<item>Save everything and quit.

<tag>Shift-space or Control-Shift-space
<item>Indent (or un-unindent) selected lines by one space.

<tag>Meta-N (Alt-N) or Meta-P (Alt-P)
<item>Go to next or previous file.

<tag>Meta-L (Alt-L)
<item>Select current paragraph.

<tag>Control and 0, 1, 2, or 3
<item>Close this window (0), all other windows (1), or clone this window (2)
	or open a new window for each file that doesn't have one already (3).

<tag>Control-X and Control-K
<item>Forget about the current file.

<tag>Control-X and I or Control-I
<item>Insert file (replace selection with other file).

<tag>Control-X and Control-S or Control-D
<item>Save current file.

<tag>Control-X and Control-C
<item>Quit. If there are any unsaved changes, ask what to do.

<tag>Control-X and Control-F
<item>Load a new file.
</taglist>

<sect>Emacs emulation

<p>The following Emacs key bindings work mostly like in Emacs:

<enumlist>
<item>Control and A, B, D, E, F, K, L, N, O, P, V, W, Y.
<item>ESC or Meta (Alt) and &lt;, &gt;, B, D, F, Q, W.
<item>Control-X followed by 0, 1, 2, or Control and C, F, I, S.
</enumlist>

<p>The emulation of these commands may not be exact, and most
interesting Emacs commands are missing.

<chapt>Editor wars

<sect>Don't make war

<p>An editor is one of the tools a programmer uses most, so any
problems with the editor are going to irritate her more than those
with any other programs. The result is fierce editor wars wherever
programmers meet.

<p>I'd appreciate it if any SeX users wouldn't endorse SeX in an
editor war. If you can't stay out altogether, please follow the
following tactic:

	<enumlist>
	
	<item>When you wish to make other people envious, because
	you use SeX, eat some ice cream.
	
	<item>If this doesn't help, eat some more ice cream.
	
	<item>If you still aren't satisfied, buy some
	more ice cream, and post a message that says
	``<em>SeX is good, because I can eat so much ice
	cream.</em>''. You can also point people at the
	SeX homepage, <tt>http://www.iki.fi/liw/SeX/</tt>.
	This should be your only public response.  Then eat
	the ice cream.
	
	<item>If you <em>still</em> want to continue, you'll know
	what to do with ice cream number four.
	
	<item>Any ice creams after this are still number four.
	(If you use four fingers for counting, you can use the thumb
	to hold an ice cream cone. People who have SeX don't want to
	count very far.)
	
	<item>You shouldn't start a war just for ice cream.
	If you can't find any editor wars, you are still allowed
	to eat ice cream. It's OK to eat ice cream at every
	occasion. Ice cream is good. Ice cream is cool. Ice
	cream makes you a better person. You might want to
	avoid eating ice cream at the funeral of someone who
	died in a snow storm, though.
	
	</enumlist>

<p>If you can't or don't want to eat ice cream,
you are allowed to use an alternative tactic: <em>subliminal
messages</em>. Ask a harmless, innocent question, but phrase
your it so that the first three words begin with S, e, and X,
respectively. For example:

<example>
Somebody, everybody (Xerxes?), where can I find the latest
version of vim?
</example>

<p>That's not quite as fun as eating ice cream, of course.

<sect>Make ice cream

<p>For a nice portion of ice cream, use the following recipe:

<example>
0.5 l of vanilla ice cream
1 banana
2-4 peach halves (from a tin)
enough whipped cream
enough chocolate sauce
enough caramel sauce
1 spoonful strawberry jam
3-5 cookies
</example>

<p>You need a big plate. Put ice cream on plate. Cut banana
into thin slices (about 2 mm), place all over ice cream. Cut
peach halves in smallish pieces, put on ice cream. Put whipped
cream over everything. Pour the sauces over the cream. Put a
jam in the middle and cookies along the sides. Eat at once,
preferably in good company (share portions as you wish).

<p>Note that ice cream should be allowed to melt so that it isn't
too hard when it is eaten. But it must still be cold. Liquid
ice cream is too warm.

</book>
