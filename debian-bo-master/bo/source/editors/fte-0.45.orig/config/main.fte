# Main FTE Configuration File

# to customize FTE to your preferences you should only need
# to add stuff in this file.
# Some examples are below. If you find something that cannot be 
# configured here, tell me about it.
# If you wish to modify only a specific mode, add customizations
# at the end of file. To also modify all of the descendants, 
# put customizations right after the include statement for mode.

# The current hierarchy of modes is:
# PLAIN
#   TEXT
#     MSG
#   C
#   ...
#   BIN

# The order of things in this file is important! If you change a setting
# before the default is set in one of the included files, your
# setting will have no effect.
# The file is processed in one pass, so everything should be defined,
# before it is used.

# My ultimate goal is to have the default files unmodifiable and 
# have all customization done here, but this is not currently possible for
# all things (menus come to mind).

include 'global.fte';

object GLOBAL {
# fonts for GUI version

# PM
# Only System VIO fonts are used. Some listed below. XX*YY.

#    WindowFont =  "8x8";
#    WindowFont = "6x10";
#    WindowFont = "8x10";
#    WindowFont = "5x12";
#    WindowFont = "8x12";
#    WindowFont = "6x14";
    WindowFont = "8x14";
#    WindowFont = "5x16";
#    WindowFont = "8x16";
#    WindowFont = "8x18";
        
# X11
# Any fixed-width font should do. Make sure it has all 256 characters
# defined or weird things can happen (usually not a problem, but I
# noticed it on some X servers on Windows).

#    WindowFont = "fixed";
#    WindowFont = "6x8";
#    WindowFont = "7x13";
#    WindowFont = "8x13";
#    WindowFont = "9x15";
#    WindowFont = "10x20";
}

include 'color.fte';

# change background color
# must be here to be inherited by other modes
# object PLAIN { color { { 'Background', '17' } }; }

include 'm_plain.fte';

# must be here to be inherited by other modes
mode PLAIN {
# UNIX files have no CR at the end of line
#    AddCR               = 0;
# if you wish to keep your CR's uncomment this
#    StripChar = -1;
}

include 'm_text.fte';
include 'm_msg.fte';
include 'm_c.fte';
include 'm_fte.fte';
include 'm_ada.fte';
include 'm_html.fte';
include 'm_ipf.fte';
include 'm_make.fte';
include 'm_resdlg.fte';
include 'm_diff.fte';
include 'm_sh.fte';
include 'm_pascal.fte';
include 'm_perl.fte';
include 'm_rexx.fte';
include 'm_java.fte';
include 'm_tex.fte';
include 'm_asm.fte';
include 'm_tcl.fte';
include 'm_fort90.fte';
include 'm_clario.fte';
include 'm_ebnf.fte';
include 'm_texi.fte';
include 'm_asm370.fte';
include 'm_bin.fte';

# When doing large customizations of keyboard/menus
# you should probably write your own version of these files.

# to change a menu, predefine it before including the ui_*.fte file.
# to add/override keybindings add them after including ui_*.fte file.

# ui*.fte -files define all keyboard bindings and menus.
# pick only one file.
include 'ui_fte.fte'; # fte CUA style bindings
#include 'ui_fte2.fte'; # fte CUA style bindings with conditional cascade menus
#include 'ui_ws.fte';  # wordstar like
#include 'ui_ne.fte';  # norton classic editor - incomplete
#include 'ui_mew.fte'; # MultiEdit4Windows
#include 'ui_vi.fte';  # VI - very incomplete
# todo: brief, epm, emacs, VI

# some templates and abbreviations
include 'ab_c.fte';
include 'ab_c_os2.fte';

# some customizations

object GLOBAL {
    SelectPathname = 0;
    ShowToolBar = 1;     # PM only
    GUIDialogs = 1;      # PM only
    SysClipboard = 1;    # use PM clipboard, or X11 selection for clipboard
#    PMDisableAccel      = 0;   # disable Alt+Fx PM accelerators
}

# some editors have a SmartPaste feature.  We can do that too.
#eventmap C { key [S+G-Ins] { BlockPasteStream; BlockReIndent } }

eventmap PLAIN {
    key [A+S+-] { # select block between {}()[]<>
        BlockUnmark; BlockMarkStream; MatchBracket; BlockMarkStream;
        SavePos; MoveBlockEnd;
        2:MoveNext; ?MoveLeft;  # do this to mark a newline after })>]
        BlockEnd; MoveSavedPos;
    }

    key [A+C+F] { IndentFunction }
    key [A+C+M] { BlockMarkFunction }
    key [A+C+[] { MoveFunctionPrev }
    key [A+C+\]] { MoveFunctionNext }
}

object GLOBAL {
#    SevenBit = 1;  # seven bit characters only for user interface...
}
