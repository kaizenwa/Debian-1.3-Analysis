Info file ./emacspeak.info, produced by Makeinfo, -*- Text -*- from
input file emacspeak.texinfo.

   $Id: emacspeak.info,v 5.0 1996/11/22 18:04:26 raman Exp $

   This file documents  Emacspeak, a speech interface to Emacs.

   Copyright (C) 1994, Digital Equipment Corporation All Rights
Reserved.  Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and this
permission notice are preserved on all copies.



File: emacspeak.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

   This manual documents Emacspeak, a speech interface to Emacs.  The
manual is divided into the following chapters.

* Menu:

* Introduction::                What exactly is Emacspeak?
* Synthesizers Supported::      The speech synthesizers Emacspeak
supports.
* Installation:: Retrieving and installing Emacspeak.
* Basic Usage::                 Basic movement and usage of Emacspeak.
* Compatibility::               Reading mail,
* Advanced Features::           For experts, hackers, and other weird people. 
* Future Directions::           What is planned for Emacspeak.
* Programming Interface::       Extending  emacspeak.
* Acknowledgements::            The people who made Emacspeak happen. 
Indices:
* Concept Index::               Menus of concepts. 
* Key Index::                   Menus of command keys and their references
* Command Index::               Menus of commands and their references
* Variable Index::              Menus of variables and their references

 -- The Detailed Node Listing --

Synthesizers Supported 

* Dectalk Express ::            The portable Dectalk Express.
* Software Dectalk::            Dectalk in software on DECALPHA
* Dectalk MultiVoice::          Older Dectalks

Basic Usage
* Movement::                    Moving around in an Emacs buffer
* Action::                      Taking actions in a Emacspeak buffer 
                                (reading, changing state, ... )
* Miscellaneous::               Miscellaneous keybindings

Advanced Features

* Hooks::                       
* Other Variables::             

Internals of Emacspeak

* Global Variables::            
* Data Structures::             
* Miscellaneous Functions::



File: emacspeak.info,  Node: Introduction,  Next: Synthesizers Supported,  Prev: Top,  Up: Top

Introduction
************

   Emacspeak is an Emacs subsystem that allows the user to get
feedback using synthesized speech.

   Screen reading programs allow a visually impaired user to get
feedback using synthesized speech. Such programs have been
commercially available for well over a decade. Most of them run on
PC's under DOS, and there are now a few screen-readers for the
Windows platform.  However, screen-readers for the UNIX environment
have been conspicuous in their absence.

   This means that most visually impaired computer users face the
additional handicap of being DOS-impaired -- a far more serious
problem:-)

   Emacspeak is an emacs subsystem that provides basic speech access 
functionality.  Emacspeak will always have the shortcoming that it
will only work under Emacs.  This said, there is very little that
cannot be done inside Emacs, so it's not a real shortcoming:-)

   Emacspeak does have a significant advantage: since it runs inside
Emacs, a structure-sensitive, fully customizable editor, Emacspeak
often has more context-specific information about what it is speaking
than its commercial counterparts.  In this sense, Emacspeak is not a
"screenreader", it is a subsystem that produces speech output.  A
traditional screen-reader speaks the content of the screen, leaving
it to the user to interpret the visually laid-out information. 
Emacspeak, on the other hand, treats speech as a first-class output
modality; it speaks the information in a manner that is easy to
comprehend when listening.

   This initial version provides a basic speech subsystem for Emacs;
using Emacs' power and flexibility, it has proven  straightforward to
add modules that customize how things are spoken, e.g. depending on
the major/minor mode of a given buffer.  Note that the basic speech
functionality provided by Emacspeak is sufficient to use most Emacs
packages effectively; adding package-specific customizations makes
the interaction much smoother.  This is because package-specific
extensions can take advantage of the current context.

   Emacspeak currently comes with speech extensions for several
popular Emacs subsystems and editing modes.  I would like to thank
their respective authors for their wonderful work which makes Emacs
more than a text editor() (*note Introduction-Footnotes::).

  1.  W3 for surfing the WWW.

  2.  VM For reading and replying to email.

  3.  Gnus  for reading Usenet news.

  4. Calendar for maintaining appointments etc.

  5. auctex for editing TeX and LaTeX.

  6. Dired for navigating a file system.

  7.  C and C++ editing extensions.

  8. Calc for working with the Emacs Calculator.

  9. Info for listening to online documentation.

 10. Folding for using Emacs as a structured folding editor.

 11. Tempo a package that allows for editing templates.  This
     extension makes html-helper-mode speech friendly.

 12. Ispell for spell checking files.

 13. Eterm for launching terminal based programs.  This extension
     enables you to login to another system and get spoken feedback,
     as well as running programs that can only be run from the shell.
     Note: eterm is a new improved terminal emulator by Perl Bothner
     (bothner@cygnus.com)

 14. Buffer-menu for navigating through the list of currently open
     buffers.

 15. Comint for command interpreters running in an inferior process.

   In addition, other editing modes like Perl and TCL modes work
fluently with emacspeak Emacspeak; there is currently no speech
extension for these because I have not found a need for it.

   Emacs-19's font-locking facilities are extended to the speech
output as well; for instance, a user can customize the system to have
different types of text spoken using different kinds of voices
(speech fonts).  Currently, this feature is used to provide "voice
locking" for many popular editing modes like c-mode, tcl-mode,
perl-mode, emacs-lisp-mode etc.

   The basic concepts used by Emacspeak are simple; all of the Emacs
cursor movement commands as well as the various input-output
functions are adapted to provide speech feedback.  Hence, a user can
just use Emacs as he normally would; Emacspeak works behind the scene
to give audio feedback in addition to updating the screen.



File: emacspeak.info,  Node: Introduction-Footnotes,  Up: Introduction

   ()  For those who doubt the credibility of a speech extension to
Emacs working as a full blown spoken interface, here is a list of
Emacs subsystems that have been customized to work with speech output.
I currently use Emacspeak under Linux as the only speech feedback on
my laptop; I also run Emacspeak at work on my DECALPHA workstation
both under a vt100 as well as under X.



File: emacspeak.info,  Node: Synthesizers Supported,  Next: Installation,  Prev: Introduction,  Up: Top

Synthesizers Supported
**********************

   Emacspeak currently supports the software DecTalk (using my
DTK-tclSH), the portable Dectalk Express, the MultiVoice, and older
Dectalk 3 synthesizers.

* Menu:

* Dectalk Express ::            The portable Dectalk Express.
* Software Dectalk::            Dectalk in software on DECALPHA
* Dectalk MultiVoice::          Older Dectalks



File: emacspeak.info,  Node: Dectalk Express,  Next: Software Dectalk,  Prev: Synthesizers Supported,  Up: Synthesizers Supported

Dectalk Express
===============

   The Dectalk Express is a portable Dectalk speech synthesizer that
can be connected to the serial port of a workstation or PC.  It is
the latest in the family of Dectalk synthesizers and is backwards
compatible with other serial-line Dectalk synthesizers, e.g. the
MultiVoice.

   Note: The Dectalk Express and the Software-Dectalk are both DTK-4.2.

   To use the Dectalk Express, set the environment variable
DTK_PROGRAM to dtk-exp.

   The environment variable DTK_PORT tells emacspeak which port the
Dectalk is connected to.  By default, this is /dev/tty00 on DEC
Ultrix (mips) and Digital UNIX (OSF on DECALPHA) and /dev/ttyS0 under
Linux.



File: emacspeak.info,  Node: Software Dectalk,  Next: Dectalk MultiVoice,  Prev: Dectalk Express,  Up: Synthesizers Supported

Software Dectalk
================

   Note: (dtk-tclsh has not been generally released.  If you have a
DECALPHA and the software Dectalk, please get in touch, and I will
make dtk-tclsh available to you.)

   The Software Dectalk is a Dectalk Speech Synthesizer that runs in
software on the DECALPHA.  This software library allows user
applications to produce synthesized speech.

   dtk-tclsh  is a TCL shell with Dectalk extensions; the functions
provided by the Dectalk library are accessible as TCL commands. 
dtk-TCLSH allows the user to write simple TCL scripts that produce
speech.

   To use the Software Dectalk with Emacspeak, you need to:

   * At CRL, see `/crl/kits/DECtalk'.

   * to the pathname to the dtk-tclsh  executable. At CRL use
     `~raman/bin.alpha/dtk-tclsh', and Set the environment variable
     DTK_PROGRAM to "dtk-soft".



File: emacspeak.info,  Node: Dectalk MultiVoice,  Prev: Software Dectalk,  Up: Synthesizers Supported

Dectalk MultiVoice
==================

   The Dectalk MultiVoice is another speech synthesizer which can be
connected to the serial port of a workstation or PC.

   To use the MultiVoice,  set the environment variable DTK_PROGRAM
to dtk-mv.

   Note: The device drivers use extended TCL, also known as TCLX. 
This is a typical source of confusion, so here is some TCL background.

   TCL is a scripting language.  The vanila TCL executable is called
tclsh.  The extended TCL is called TCLX, but the corresponding
executable is called tcl on most systems.  For emacspeak, you need
the extended TCL shell, ie the executable tcl.   (Note: Extended TCL
comes as part of the tcl disk set with the  Slackware distribution of
Linux).



File: emacspeak.info,  Node: Installation,  Next: Basic Usage,  Prev: Synthesizers Supported,  Up: Top

Installation
************

   This chapter  of the manual deals with getting, configuring,
compiling, and installing Emacspeak.

* Menu:

* Retrieving Emacspeak::        Retrieving Emacspeak via anonymous ftp
* Quick Installation:: Default installation process.
* Configuring and Installing Emacspeak::  Configuring and Installing Emacspeak 
                                         and its associated files
* Starting Up:: How you run it.

 

File: emacspeak.info,  Node: Retrieving Emacspeak,  Next: Quick Installation,  Up: Installation

Retrieving Emacspeak
====================

   Emacspeak is available as follows:

     ftp://crl.dec.com/pub/digital/emacspeak/emacspeak.tar.gz
     http://www.research.digital.com/CRL/personal/raman/emacspeak/emacspeak.tar.gz

   I currently maintain an WWW page for Emacspeak at
`http://www.research.digital.com/CRL/personal/raman/emacspeak/emacspeak.html'
This page contains information on recent updates, and pointers into a
potential FAQ list.

   I also maintain a mailing list `emacspeak@crl.dec.com' for
Emacspeak users. If you are using Emacspeak, you should subscribe to
his list and use it for reporting problems or better still, your own
contributions to Emacspeak.

   Note: I work on Emacspeak in my spare time; so please keep this in
mind when requesting additional features.



File: emacspeak.info,  Node: Quick Installation,  Next: Configuring and Installing Emacspeak,  Prev: Retrieving Emacspeak,  Up: Installation

Quick Installation
==================

   If you are lucky, things will probably work "out of the box" for
you.  Here are the quick installation instructions.  See the next
section for detailed installation instructions.

   *  Look over the Makefile and edit site-specific variables.

   *  Type `make config' to configure the sources for your site.

   *  Type `make emacspeak' to compile the files.

   *  Run it by doing one of:

        *   Start Emacs as follows:

               emacs -l <emacspeak-dir>/emacspeak-setup.el -l ~/.emacs

        * Add the line

               (load-file "<emacspeak-dir>/emacspeak-setup.el")

          to the top of your .emacs file.

        *  Run the shell script emacspeak.sh found in the directory
          <emacspeak-dir>

     In the above, <emacspeak-dir> refers to the directory where you
     unpacked the sources.



File: emacspeak.info,  Node: Configuring and Installing Emacspeak,  Next: Starting Up,  Prev: Quick Installation,  Up: Installation

Configuring and Installing Emacspeak
====================================

   Note: You need GNU Emacs 19 (19.23 or later) for using Emacspeak. 
Emacspeak may work with other flavors of Emacs19, e.g. `xemacs', but
I have not tried it.

   The driver for the Dectalk is written in TclX.  (For example, see
the source file `dtk-exp').  If you happen to rewrite it in C, I'd be
more than happy to incorporate it in a future version of Emacspeak.

   Decide where you want the Emacspeak elisp files.  Most Unix
packages are unpacked and compiled in one directory, and then the
executable, documentation, and data files are installed in the
appropriate system directories.  However, Emacspeak elisp
byte-compiled files are conventionally left in the same directory as
the source files.  One reasonable choice would be
`/usr/local/lib/emacs/site-lisp/emacspeak'.

   Once you have decided on the appropriate directory, make it if
necessary and unpack the distribution `.tar' file there.

   * to edit it for your site.  You may also want to define the Make
     variable DECTALK to give you spoken feedback during installation
     (a hundred lines or so).  For example, on Ultrix you might define

          DECTALK=>/dev/tty00

   * so `.info' files go to `/usr/local/info' and the executable file
     goes to  `/usr/local/bin'.  To change this, edit the line
     defining PREFIX.

   Configure the source files by typing `make config'.  At this point
you can check that the device driver is correctly configured by typing

     tcl dtk-exp

   (assuming you are using the Dectalk Express).  You should hear the
Dectalk speak and get a TCL prompt if everything is okay.

   If you're feeling paranoid, you can perform a couple of additional
tests at this point. Execute the following commands in the running
tcl session you just started above.  (Most users will not need to do
this; it is a sanity check  and is useful in tracking problems,
especially if you find emacspeak being to talk and then immediately
fall silent.)

   *  You  Should hear the Dectalk speak  the text.

   *  The above command stops speech.   You should see a TCL prompt
     when you execute it.    If things appear to hang when you
     execute `dectalk_stop'   i.e. you don't see a TCL prompt

       1.

       2.

       3.

     In the case of incorrect stty settings please report the problem.
     The following UNIX command can be used to report the stty
     settings:

          stty -a < serial_port

   Quit this TCL session by typing control-D.

   Next, compile the elisp files by typing

     make emacspeak

   Finally, install the documentation and executable files by typing

     make install

   The driver program and/or output port can also be specified at run
time by  setting the shell environment variables DTK_PROGRAM and
DTK_PORT.  Examples: If using `csh' or `tcsh'

     setenv DTK_PROGRAM "dtk-exp"

   if using `sh' or `bash'

     DTK_PROGRAM=dtk-exp
     export DTK_PROGRAM

   Similarly,

     DTK_PORT=/def/ttyS0

   You can always set these variables from a running Emacs session by
executing the Emacs setenv command.



File: emacspeak.info,  Node: Starting Up,  Prev: Configuring and Installing Emacspeak,  Up: Installation

Starting Emacspeak
==================

   To use emacspeak you can do one of the following:

   *

           (load-file (expand-file-name "EMACSPEAK_DIR/emacspeak-setup.el"))

     to the start of your `.emacs' file.  This will start emacspeak
     every time you use Emacs.  (This might not be a good idea if a
     sighted person often uses your account.)

   * If you use `csh' or `tcsh':

          alias emacspeak "emacs -q -l EMACSPEAK_DIR/emacspeak-setup.el -l $HOME/.emacs"

     If you use `bash' (the default under linux):

          alias emacspeak="emacs -q -l EMACSPEAK_DIR/emacspeak-setup.el -l $HOME/.emacs"

     This could go into the system-wide initilization file
     (`/etc/profile') or in the personal initialization file (in
     `~/.bash_profile', `~/.bash_login', or `~/.profile') Note: in
     all of the above you should of course replace EMACSPEAK_DIR with
     your site-specific value

   * alias, and is created during the above installation procedure.

   Using any one of these methods will:

   *   *   *



File: emacspeak.info,  Node: Basic Usage,  Next: Compatibility,  Prev: Installation,  Up: Top

Basic Usage
***********

   All Emacs navigation and editing commands have been speech enabled.
Thus, moving to the next or previous word, line or sexp results in
the text around point being spoken.  Exactly how much text is spoken
is determined by the amount by which point moves.

   In addition, Emacspeak provides  basic reading functions that can
be invoked to listen to chunks of text without moving point.

* Menu:

* Movement::                    Moving around in an Emacs buffer
* Action::                      Taking actions in a Emacspeak buffer 
                                (reading, changing state, ... )
* Miscellaneous::               Miscellaneous keybindings



File: emacspeak.info,  Node: Movement,  Next: Action,  Prev: Basic Usage,  Up: Basic Usage

Movement
========

   All of the normal Emacs movement commands will speak the relevant
information after moving.  Here are some of the cursor movement
functions that have  been speech enabled.  Note that this list only
enumerates a few of these speech enabled commands; the purpose of
emacspeak is to speech-enable all of emacs and provide you spoken
feedback as you work.  Thus, this list is here only as a
representative example of the kind of speech-enabling extensions
Emacspeak  provides.

`C-n'
`M-x next-line'
`down'
     Speaks line moved to.

`C-p'
`M-x previous-line'
`up'
     Speaks line moved to.

`M-f'
`M-x forward-word'
     Speaks word moved to.  Places point on the first character of
     the next work, rather than on the space preceding it (This is my
     personal preference).

`M-b'
`M-x backward-word'
     Speaks word moved to.

`M-C-f'
`M-x forward-sexp'
     Speaks sexp moved to.  If the sexp spans more than a line, only
     the first line is spoken.

`M-C-b'
`M-x backward-sexp'
     Speaks sexp moved to.  If the sexp spans more than a line, only
     the first line is spoken.

`M-<'
`M-x beginning-of-buffer'
     Speaks line moved to.

`M->'
`M-x end-of-buffer'
     Speaks line moved to.

`M-m'
`M-x back-to-indentation'
     Speaks entire current line.  A useful way of hearing the current
     line.

   For a complete list of the functions that have been advised, see
file `emacspeak-advice.el'.



File: emacspeak.info,  Node: Action,  Next: Miscellaneous,  Prev: Movement,  Up: Basic Usage

Action
======

   While typing in an Emacs buffer, hitting space  speaks  the
recently typed word.  I use TMC completion all the time; so Emacspeak
will speak the completion just inserted as well as the next possible
completion.  Under Emacs19, use `load-library ret completion ret' for
loading the completion package.

   The standard Emacs I/O functions have also been advised to speak. 
All forms of completion, including minibuffer completion, provide
speech feedback.

   In addition, Emacspeak provides a number of commands for reading
portions of the current buffer, getting status information, and
modifying Emacspeak's state.

   All of the commands are documented in the subsequent sections. 
They can be classified into types:

   *  Emacspeak commands for listening to chunks of information.  
     The names of these  commands all start with the common prefix
     `emacspeak-'.   All Emacspeak commands are bound to the keymap
     EMACSPEAK-KEYMAP and are accessed with the key `Control e'()
     (*note Action-Footnotes::).   Thus, the Emacspeak command
     "emacspeak-speak-line"  is bound to `l' in keymap
     EMACSPEAK-KEYMAP and  can be accessed with the keystroke
     `Control-e l'.   If for some reason you wish to use some key
     other than `control-e' as the common keyboard prefix for all
     Emacspeak commands,  set the variable EMACSPEAK-PREFIX.

   *   The second category of commands provided by Emacspeak
     manipulate the state of the speech device.   The names of these
     commands start with the common prefix `dtk-' and are bound in
     keymap  EMACSPEAK-DTK-SUBMAP.   You can access these commands
     via the prefix `Control-e'().  Thus, the command "dtk-set-rate"
     is bound to `r'  in keymap EMACSPEAK-DTK-SUBMAP and can be
     executed by pressing `Control e d r'.

   Emacs has extensive online help; so does emacspeak.   Please use it.
This info manual is only to get you started.  You can get a summary
of Emacspeak's features by pressing `Control-h Control-e'



File: emacspeak.info,  Node: Action-Footnotes,  Up: Action

   ()    Control e is mnemonic for Emacspeak.

   ()  d is mnemonic for Dectalk.



File: emacspeak.info,  Node: Miscellaneous,  Prev: Action,  Up: Basic Usage

Miscellaneous
=============

   Reading without moving point:

   The following commands allow you to listen to information without
moving point (point is emacs terminology for the editing cursor).

   Emacspeak uses `C-e' as a prefix-key.  Note: In all of the
following, a prefix arg (conventionally C-u) will read the "rest of
the unit" and a negative prefix arg (conventionally C-u -) will read
the initial part of the unit before point.  As an example, given the
sexp `emacspeak-speak-sexp' with point on the `-' preceding the
`speak', "emacspeak-speak-speak" will say:

   *

   *  with a positive prefix-arg.

   *

   Note: I am not satisfied with the above, in fact providing a 
negative prefix is so cumbersome that I never use it.  Note: For a
better way of reading the beginning and or rest of a line etc, see
the extended Emacspeak reading commands such as
`emacspeak-speak-line-interactively'.

`C-el'
`M-x emacspeak-speak-line'
     Speaks  current line.

`C-e up'
`M-x emacspeak-read-next-line'
     Speaks previous line (without moving point).  Numeric prefix arg
     can specify offset relative to current line. (Useful in shell
     buffers to quickly look at the output. )

`C-e down'
`M-x emacspeak-read-next-line'
     Speaks next line (without moving point).  Numeric prefix arg can
     specify offset relative to current line.  (Useful in shell
     buffers to quickly look at the output.)

`C-e .'
`M-x emacspeak-speak-sentence'
     Speaks current sentence.

`C-e ''
`M-x emacspeak-speak-sexp'
     Speaks current sexp.

`C-e w'
`M-x emacspeak-speak-word'
     Speaks current word.

`C-e c'
`M-x emacspeak-speak-char'
     Speaks current char.

`C-e r'
`M-x emacspeak-speak-region'
     Speaks current region.

`C-e b'
`M-x emacspeak-speak-buffer'
     Speaks current buffer.

`C-e h'
`M-x emacspeak-speak-help'
     Speaks current help buffer if present.

`C-e C-i'
`M-x emacspeak-speak-completions'
     Speaks possible completions if any listed.

   The following commands provide miscellaneous information.

`C-e v'
`M-x emacspeak-speak-version'
     Identifies current version of Emacspeak.

`C-e t'
`M-x emacspeak-speak-time'
     Speaks date and time.

`C-e m'
`M-x emacspeak-speak-mode-line'
     Speaks concise mode-line. Only major mode information is spoken.

`C-e M'
`C-e h'
`M-x emacspeak-speak-help'
     Speaks help buffer.

`M-x emacspeak-speak-minor-mode-line'
     Speaks minor mode information.



File: emacspeak.info,  Node: Compatibility,  Next: Advanced Features,  Prev: Basic Usage,  Up: Top

Compatibility with Emacs subsystems
***********************************

   Write one node for each subsystem, e.g. vm, gnus, ...  Note:
emacspeak already works with these subsystems, writing additional
modules will customize how things get spoken.



File: emacspeak.info,  Node: Advanced Features,  Next: Future Directions,  Prev: Compatibility,  Up: Top

Advanced Features
*****************

   <To be written>

* Menu:

* Hooks::                       
* Other Variables::



File: emacspeak.info,  Node: Hooks,  Next: Other Variables,  Prev: Advanced Features,  Up: Advanced Features

Hooks
=====

   These are the various hooks you can use to customize some of
Emacspeaks behavior.  They are arranged in the order in which they
would happen.

   DTK-STARTUP-HOOK functions to run after starting the speech
system. You can set the speech-device state, e.g. speech-rate etc in
this hook.

   EMACSPEAK-STARTUP-HOOK after Emacspeak has been started up.



File: emacspeak.info,  Node: Other Variables,  Prev: Hooks,  Up: Advanced Features

Miscellaneous variables
=======================

   <to be written>   There are lots of variables that control the
real nitty-gritty of Emacspeak that the beginning user probably
shouldn't mess with.  Here they are.



File: emacspeak.info,  Node: Future Directions,  Next: Programming Interface,  Prev: Advanced Features,  Up: Top

Future Directions
*****************

   Emacspeak is being actively developed by me.  That is, I implement
features as I need them.



File: emacspeak.info,  Node: Programming Interface,  Next: Acknowledgements,  Prev: Future Directions,  Up: Top

Internals of Emacspeak
**********************

   <to be written>

* Menu:

* Global Variables::            
* Data Structures::             
* Miscellaneous Functions::



File: emacspeak.info,  Node: Global Variables,  Next: Data Structures,  Prev: Programming Interface,  Up: Programming Interface

Global variables
================

   There are also some variables that may be useful if you are
writing a program or function that interacts with Emacspeak.   <to be
written>



File: emacspeak.info,  Node: Data Structures,  Next: Miscellaneous Functions,  Prev: Global Variables,  Up: Programming Interface

Data Structures
===============

   <to be written>



File: emacspeak.info,  Node: Miscellaneous Functions,  Prev: Data Structures,  Up: Programming Interface

Miscellaneous Functions
=======================

   I have done quite a bit of work trying to make a semi-clean
interface to the internals of Emacspeak.  Here is a list of functions
that you can use to take advantage of these features.



File: emacspeak.info,  Node: Acknowledgements,  Next: Concept Index,  Prev: Programming Interface,  Up: Top

Acknowledgements
****************

   Emacspeak would not have come about without the following people:

   Dave Wecker who goaded me into writing this package.

   Hans Chalupsky  whose advice package makes Emacspeak work.



File: emacspeak.info,  Node: Concept Index,  Next: Key Index,  Prev: Acknowledgements,  Up: Top

Concept Index
*************

* Menu:

* Dectalk Express: Dectalk Express.
* Hooks: Hooks.
* Internals of Emacspeak: Programming Interface.
* Screen-Reading: Introduction.
* Using Emacspeak from your own programs: Programming Interface.




File: emacspeak.info,  Node: Key Index,  Next: Command Index,  Prev: Concept Index,  Up: Top

Key Index
*********

* Menu:

* C-e .: Miscellaneous.
* C-e down: Miscellaneous.
* C-e up: Miscellaneous.
* C-e C-i: Miscellaneous.
* C-e M: Miscellaneous.
* C-e b: Miscellaneous.
* C-e c: Miscellaneous.
* C-e h: Miscellaneous.
* C-e h: Miscellaneous.
* C-e m: Miscellaneous.
* C-e r: Miscellaneous.
* C-e t: Miscellaneous.
* C-e v: Miscellaneous.
* C-e w: Miscellaneous.
* C-e': Miscellaneous.
* C-el: Miscellaneous.
* C-n: Movement.
* C-p: Movement.
* M-<: Movement.
* M->: Movement.
* M-C-b: Movement.
* M-C-f: Movement.
* M-b: Movement.
* M-f: Movement.
* M-m: Movement.




File: emacspeak.info,  Node: Command Index,  Next: Variable Index,  Prev: Key Index,  Up: Top

Command Index
*************

* Menu:

* back-to-indentation: Movement.
* backward-sexp: Movement.
* backward-word: Movement.
* beginning-of-buffer: Movement.
* emacspeak-read-next-line: Miscellaneous.
* emacspeak-read-next-line: Miscellaneous.
* emacspeak-speak-buffer: Miscellaneous.
* emacspeak-speak-char: Miscellaneous.
* emacspeak-speak-completions: Miscellaneous.
* emacspeak-speak-help: Miscellaneous.
* emacspeak-speak-help: Miscellaneous.
* emacspeak-speak-line: Miscellaneous.
* emacspeak-speak-minor-mode-line: Miscellaneous.
* emacspeak-speak-mode-line: Miscellaneous.
* emacspeak-speak-region: Miscellaneous.
* emacspeak-speak-sentence: Miscellaneous.
* emacspeak-speak-sexp: Miscellaneous.
* emacspeak-speak-time: Miscellaneous.
* emacspeak-speak-version: Miscellaneous.
* emacspeak-speak-word: Miscellaneous.
* end-of-buffer: Movement.
* forward-sexp: Movement.
* forward-word: Movement.
* next-line: Movement.
* previous-line: Movement.




File: emacspeak.info,  Node: Variable Index,  Prev: Command Index,  Up: Top

Variable Index
**************

* Menu:

* dtk-startup-hook  specifies a list of: Hooks.
* emacspeak-startup-hook  is run: Hooks.


 
   
Tag Table:
Node: Top469
Node: Introduction2241
Node: Introduction-Footnotes6595
Node: Synthesizers Supported7051
Node: Dectalk Express7545
Node: Software Dectalk8360
Node: Dectalk MultiVoice9342
Node: Installation10176
Node: Retrieving Emacspeak10724
Node: Quick Installation11617
Node: Configuring and Installing Emacspeak12629
Node: Starting Up15894
Node: Basic Usage17044
Node: Movement17823
Node: Action19356
Node: Action-Footnotes21474
Node: Miscellaneous21619
Node: Compatibility24141
Node: Advanced Features24494
Node: Hooks24723
Node: Other Variables25203
Node: Future Directions25507
Node: Programming Interface25757
Node: Global Variables26044
Node: Data Structures26354
Node: Miscellaneous Functions26541
Node: Acknowledgements26887
Node: Concept Index27224
Node: Key Index27562
Node: Command Index28236
Node: Variable Index29289

End Tag Table
