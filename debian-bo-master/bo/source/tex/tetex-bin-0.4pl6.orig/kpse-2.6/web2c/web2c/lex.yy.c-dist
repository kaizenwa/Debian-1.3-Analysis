/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.47 93/12/11 10:56:41 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern void *yy_flex_alloc YY_PROTO(( int ));
	extern void *yy_flex_realloc YY_PROTO(( void *ptr, int size ));
	extern void yy_flex_free YY_PROTO(( void * ));
	extern int yywrap YY_PROTO(( void ));
	extern void yy_strcpy YY_PROTO(( char *s1, const char *s2 ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	/* Whether we've seen an EOF on this buffer. */
	int yy_eof_status;
#define EOF_NOT_SEEN 0
	/* "Pending" happens when the EOF has been seen but there's still
	 * some text to process.  Note that when we actually see the EOF,
	 * we switch the status back to "not seen" (via yyrestart()), so
	 * that the user can continue scanning by just pointing yyin at
	 * a new input file.
	 */
#define EOF_PENDING 1
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 72
static const short int yy_accept[265] =
    {   0,
        0,    0,   72,   70,    1,    1,    3,   70,   58,   59,
       50,   48,   65,   49,   64,   51,   45,   67,   66,   54,
       52,   55,   70,   69,   60,   61,   68,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,    2,    1,    0,    0,
       47,   63,    0,   45,    0,   62,   56,   53,   57,    0,
        0,   69,   69,   69,   69,   69,   69,   69,   69,   17,
       69,   69,   69,   69,   69,   69,   69,   25,   69,   69,
       69,   29,   30,   69,   69,   69,   69,   69,   38,   69,
       69,   69,   69,    0,    0,   46,   44,    0,   44,    0,

        0,   10,   69,   69,   69,   69,   69,   15,   69,   69,
       20,   69,   22,   69,   69,    0,    0,    0,   69,    0,
       69,   69,   27,   28,   69,   69,   69,   69,   69,   69,
       69,   69,   41,   69,    0,   47,    0,    0,    0,   69,
       69,   69,   13,   69,   69,   19,   69,   21,   69,   24,
        0,    0,    0,    0,    0,    0,    0,   69,    0,    0,
       69,   69,   69,   69,   69,   69,   69,   69,   37,   39,
       69,   69,    0,    0,   44,    0,    0,   11,   12,   16,
       14,   69,   69,   69,    0,    0,    0,    0,   35,   36,
        0,    0,    0,   69,   69,   26,   69,   69,   69,   69,

       69,   69,   40,   42,    0,    0,    9,   18,    5,   69,
        0,    0,    0,    0,   69,    4,   43,   69,   69,   69,
       33,   34,    0,    8,   69,    0,    0,   69,    1,   69,
       32,   23,    0,    0,   69,   69,    0,    0,    0,   31,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    0,    6,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,    1,   26,   27,    1,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   45,   46,   47,   48,   49,   37,
       50,   37,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[53] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        2,    1,    1,    1,    3,    3,    3,    2,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1
    } ;

static const short int yy_base[274] =
    {   0,
        0,    0,  389,  390,   51,   54,  390,  382,  390,  390,
      390,  390,  390,  390,  374,  390,   46,  365,  390,   43,
      390,  364,   35,    0,  390,  390,  390,   26,   28,   41,
       35,   34,   38,  342,  348,  349,  353,  338,  337,   43,
       51,  346,   46,  336,  348,  340,  390,   88,  346,  367,
      366,  390,   83,   88,   96,  390,  390,  390,  390,  339,
      334,    0,  338,  324,  333,  334,  320,  323,  315,  313,
      316,  329,  320,  314,  316,  310,  112,  324,  325,  322,
      306,    0,    0,  316,  320,  307,   79,  316,    0,  304,
      300,  301,  308,  313,  336,  335,  111,  117,  120,  307,

      307,    0,  310,  301,  308,  303,  289,    0,  292,  300,
      295,  298,    0,  299,  286,  137,  318,  144,  298,  273,
      292,  291,    0,    0,  290,  283,   52,  278,  287,  277,
      285,  280,    0,  276,  276,  307,  142,  276,  272,  260,
      268,  270,    0,  261,  260,    0,  272,    0,  258,    0,
      275,  293,  162,  292,  102,  272,  247,  268,  245,  168,
      263,  256,  250,  261,  260,  247,  246,  261,    0,    0,
      249,  255,  254,  145,  161,  244,  253,    0,    0,    0,
        0,  241,  275,  245,  249,  241,  241,  239,  390,  390,
      217,  192,  194,  205,  235,    0,  196,  209,  208,  208,

      204,  188,    0,    0,  201,  199,  390,    0,  390,  188,
      191,  219,  219,  188,  193,  390,    0,  214,  167,  172,
        0,    0,  206,  390,  165,  168,  167,  163,  181,  149,
        0,  188,  159,  158,  182,  150,    0,  175,  170,  164,
      148,    0,  200,  137,  205,  111,  213,  105,  218,  103,
       93,   94,  102,   80,   80,   95,   90,   66,   88,   71,
      390,   74,  390,  390,  251,  253,  257,  261,  265,  269,
      273,  276,   80
    } ;

static const short int yy_def[274] =
    {   0,
      264,    1,  264,  264,  264,  264,  264,  265,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  266,  264,  264,  264,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  264,  264,  264,  267,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  264,  267,  264,  264,  264,  264,  264,

      264,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  264,  264,  264,  266,  268,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  264,  264,  264,  264,  264,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      264,  269,  264,  264,  264,  264,  270,  266,  268,  264,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  264,  264,  264,  264,  264,  266,  266,  266,
      266,  266,  266,  266,  264,  269,  269,  271,  264,  264,
      264,  270,  264,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  264,  264,  264,  266,  264,  266,
      264,  271,  271,  264,  266,  264,  266,  266,  266,  266,
      266,  266,  264,  264,  266,  264,  264,  266,  264,  266,
      266,  266,  264,  264,  266,  266,  272,  264,  264,  266,
      272,  273,  264,  273,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,    0,  264,  264,  264,  264,  264,  264,
      264,  264,  264
    } ;

static const short int yy_nxt[443] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   24,   24,   37,   38,
       39,   40,   41,   42,   24,   43,   44,   45,   46,   24,
       47,    4,   48,   48,   48,   48,   48,   48,   53,   65,
       54,   54,   54,   57,   58,   60,   63,   61,   67,   64,
       69,   66,   71,   73,   72,   82,   70,   55,   85,   74,
       88,  165,   68,  244,   75,  166,   83,   89,   84,   48,
       48,   48,  263,   49,   86,   90,   49,   97,   97,   97,

       53,  262,   54,   54,   54,   98,  261,   98,  128,  260,
       99,   99,   99,  116,  116,  116,  189,  190,  117,   55,
      259,  129,  258,  257,  118,   97,   97,   97,  256,  255,
       49,   99,   99,   99,   99,   99,   99,  254,  116,  116,
      116,  253,  137,  117,  252,  153,  153,  153,  251,  118,
      154,  174,  248,  174,  119,  247,  175,  175,  175,  175,
      175,  175,  120,  153,  153,  153,  243,  242,  154,  116,
      116,  116,  155,  193,  117,  175,  175,  175,  160,  151,
      118,  240,   48,   48,   48,  160,  156,  120,  239,  238,
      155,  237,  236,  235,  157,  153,  153,  153,  234,  233,

      154,  245,  245,  245,  156,  232,  245,  245,  245,  229,
      151,  231,  157,  230,  249,  249,  249,  229,  120,  249,
      249,  249,  155,   49,  228,  227,  193,  213,  226,  225,
      224,  223,  246,  222,  221,  220,  156,  246,  219,  218,
      217,  216,  215,  193,  157,  250,  214,  213,  160,  187,
      250,   50,   50,   50,   50,   62,   62,   95,   95,   95,
       95,  159,  159,  159,  159,  186,  186,  186,  186,  192,
      192,  192,  192,  212,  212,  212,  212,  241,  211,  241,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  160,  194,  193,  191,

      188,  187,  185,  184,  183,  182,  181,  180,  179,  178,
      177,  176,   95,  173,  172,  171,  170,  169,  168,  167,
      164,  163,  162,  161,  160,  158,  152,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
       95,  136,  135,  134,  133,  132,  131,  130,  127,  126,
      125,  124,  123,  122,  121,  115,  114,  113,  112,  111,
      110,  109,  108,  107,  106,  105,  104,  103,  102,  101,
      100,   50,   96,   94,   93,   92,   91,   87,   81,   80,
       79,   78,   77,   76,   59,   56,   52,   51,  264,    3,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264
    } ;

static const short int yy_chk[443] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    5,    6,    6,    6,   17,   29,
       17,   17,   17,   20,   20,   23,   28,   23,   30,   28,
       31,   29,   32,   33,   32,   40,   31,   17,   41,   33,
       43,  127,   30,  273,   33,  127,   40,   43,   40,   48,
       48,   48,  262,    5,   41,   43,    6,   53,   53,   53,

       54,  260,   54,   54,   54,   55,  259,   55,   87,  258,
       55,   55,   55,   77,   77,   77,  155,  155,   77,   54,
      257,   87,  256,  255,   77,   97,   97,   97,  254,  253,
       48,   98,   98,   98,   99,   99,   99,  252,  116,  116,
      116,  251,   97,  116,  250,  118,  118,  118,  248,  116,
      118,  137,  246,  137,   77,  244,  137,  137,  137,  174,
      174,  174,   77,  153,  153,  153,  241,  240,  153,  160,
      160,  160,  118,  239,  160,  175,  175,  175,  238,  116,
      160,  236,  229,  229,  229,  235,  118,  116,  234,  233,
      153,  232,  230,  228,  118,  193,  193,  193,  227,  226,

      193,  243,  243,  243,  153,  225,  245,  245,  245,  223,
      160,  220,  153,  219,  247,  247,  247,  218,  160,  249,
      249,  249,  193,  229,  215,  214,  213,  212,  211,  210,
      206,  205,  243,  202,  201,  200,  193,  245,  199,  198,
      197,  195,  194,  192,  193,  247,  191,  188,  187,  186,
      249,  265,  265,  265,  265,  266,  266,  267,  267,  267,
      267,  268,  268,  268,  268,  269,  269,  269,  269,  270,
      270,  270,  270,  271,  271,  271,  271,  272,  185,  272,
      184,  183,  182,  177,  176,  173,  172,  171,  168,  167,
      166,  165,  164,  163,  162,  161,  159,  158,  157,  156,

      154,  152,  151,  149,  147,  145,  144,  142,  141,  140,
      139,  138,  136,  135,  134,  132,  131,  130,  129,  128,
      126,  125,  122,  121,  120,  119,  117,  115,  114,  112,
      111,  110,  109,  107,  106,  105,  104,  103,  101,  100,
       96,   95,   94,   93,   92,   91,   90,   88,   86,   85,
       84,   81,   80,   79,   78,   76,   75,   74,   73,   72,
       71,   70,   69,   68,   67,   66,   65,   64,   63,   61,
       60,   51,   50,   49,   46,   45,   44,   42,   39,   38,
       37,   36,   35,   34,   22,   18,   15,    8,    3,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
# line 1 "web2c.lex"
# line 2 "web2c.lex"
/* web2c.lex -- lexical analysis for Tangle output.  */

#include "web2c.h"
#include "y.tab.h"

/* For some reason flex wants to do a system call, so we must lose the
   definition of the Pascal read that is in `pascal.h'.  */
#undef read

char conditional[20], negbuf[2], temp[20];
extern boolean doing_statements;

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

# line 29 "web2c.lex"


	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 265 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 390 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
# line 30 "web2c.lex"
;
	YY_BREAK
case 2:
YY_USER_ACTION
# line 31 "web2c.lex"
{while (input() != '}') ;}
	YY_BREAK
case 3:
YY_USER_ACTION
# line 33 "web2c.lex"
{
		    register int c;
		    (void) putc('#', std);
		    while ((c = input()) && c != ';')
			(void) putc(c, std);
		    (void) putc('\n', std);
		}
	YY_BREAK
case 4:
YY_USER_ACTION
# line 41 "web2c.lex"
{register int c;
		 register char *cp=conditional;
		 new_line();
		 (void) input();
		 while ((c = input()) != '\'')
		    *cp++ = c;
		 *cp = '\0';
		 (void) input();
		 if (doing_statements) fputs("\t;\n", std);
		 (void) fprintf(std,
			"#ifdef %s\n", conditional);
		}
	YY_BREAK
case 5:
YY_USER_ACTION
# line 54 "web2c.lex"
{register int c;
		 new_line();
		 fputs("#endif /* ", std);
		 (void) input();
		 while ((c = input()) != '\'')
			(void) putc(c, std);
		 (void) input();
		 conditional[0] = '\0';
		 fputs(" */\n", std);
		}
	YY_BREAK
case 6:
YY_USER_ACTION
# line 65 "web2c.lex"
;
	YY_BREAK
case 7:
YY_USER_ACTION
# line 67 "web2c.lex"
;
	YY_BREAK
case 8:
YY_USER_ACTION
# line 69 "web2c.lex"
return last_tok=define_tok;
	YY_BREAK
case 9:
YY_USER_ACTION
# line 70 "web2c.lex"
return last_tok=field_tok;
	YY_BREAK
case 10:
YY_USER_ACTION
# line 71 "web2c.lex"
return last_tok=and_tok;
	YY_BREAK
case 11:
YY_USER_ACTION
# line 72 "web2c.lex"
return last_tok=array_tok;
	YY_BREAK
case 12:
YY_USER_ACTION
# line 73 "web2c.lex"
return last_tok=begin_tok;
	YY_BREAK
case 13:
YY_USER_ACTION
# line 74 "web2c.lex"
return last_tok=case_tok;
	YY_BREAK
case 14:
YY_USER_ACTION
# line 75 "web2c.lex"
return last_tok=const_tok;
	YY_BREAK
case 15:
YY_USER_ACTION
# line 76 "web2c.lex"
return last_tok=div_tok;
	YY_BREAK
case 16:
YY_USER_ACTION
# line 77 "web2c.lex"
return last_tok=break_tok;
	YY_BREAK
case 17:
YY_USER_ACTION
# line 78 "web2c.lex"
return last_tok=do_tok;
	YY_BREAK
case 18:
YY_USER_ACTION
# line 79 "web2c.lex"
return last_tok=downto_tok;
	YY_BREAK
case 19:
YY_USER_ACTION
# line 80 "web2c.lex"
return last_tok=else_tok;
	YY_BREAK
case 20:
YY_USER_ACTION
# line 81 "web2c.lex"
return last_tok=end_tok;
	YY_BREAK
case 21:
YY_USER_ACTION
# line 82 "web2c.lex"
return last_tok=file_tok;
	YY_BREAK
case 22:
YY_USER_ACTION
# line 83 "web2c.lex"
return last_tok=for_tok;
	YY_BREAK
case 23:
YY_USER_ACTION
# line 84 "web2c.lex"
return last_tok=function_tok;
	YY_BREAK
case 24:
YY_USER_ACTION
# line 85 "web2c.lex"
return last_tok=goto_tok;
	YY_BREAK
case 25:
YY_USER_ACTION
# line 86 "web2c.lex"
return last_tok=if_tok;
	YY_BREAK
case 26:
YY_USER_ACTION
# line 87 "web2c.lex"
return last_tok=label_tok;
	YY_BREAK
case 27:
YY_USER_ACTION
# line 88 "web2c.lex"
return last_tok=mod_tok;
	YY_BREAK
case 28:
YY_USER_ACTION
# line 89 "web2c.lex"
return last_tok=not_tok;
	YY_BREAK
case 29:
YY_USER_ACTION
# line 90 "web2c.lex"
return last_tok=of_tok;
	YY_BREAK
case 30:
YY_USER_ACTION
# line 91 "web2c.lex"
return last_tok=or_tok;
	YY_BREAK
case 31:
YY_USER_ACTION
# line 92 "web2c.lex"
return last_tok=procedure_tok;
	YY_BREAK
case 32:
YY_USER_ACTION
# line 93 "web2c.lex"
return last_tok=program_tok;
	YY_BREAK
case 33:
YY_USER_ACTION
# line 94 "web2c.lex"
return last_tok=record_tok;
	YY_BREAK
case 34:
YY_USER_ACTION
# line 95 "web2c.lex"
return last_tok=repeat_tok;
	YY_BREAK
case 35:
YY_USER_ACTION
# line 96 "web2c.lex"
return last_tok=hhb0_tok;
	YY_BREAK
case 36:
YY_USER_ACTION
# line 97 "web2c.lex"
return last_tok=hhb1_tok;
	YY_BREAK
case 37:
YY_USER_ACTION
# line 98 "web2c.lex"
return last_tok=then_tok;
	YY_BREAK
case 38:
YY_USER_ACTION
# line 99 "web2c.lex"
return last_tok=to_tok;
	YY_BREAK
case 39:
YY_USER_ACTION
# line 100 "web2c.lex"
return last_tok=type_tok;
	YY_BREAK
case 40:
YY_USER_ACTION
# line 101 "web2c.lex"
return last_tok=until_tok;
	YY_BREAK
case 41:
YY_USER_ACTION
# line 102 "web2c.lex"
return last_tok=var_tok;
	YY_BREAK
case 42:
YY_USER_ACTION
# line 103 "web2c.lex"
return last_tok=while_tok;
	YY_BREAK
case 43:
YY_USER_ACTION
# line 104 "web2c.lex"
return last_tok=others_tok;
	YY_BREAK
case 44:
YY_USER_ACTION
# line 106 "web2c.lex"
{		
		  (void) sprintf(temp, "%s%s", negbuf, yytext);
		  negbuf[0] = '\0';
		  return last_tok=r_num_tok;
		}
	YY_BREAK
case 45:
YY_USER_ACTION
# line 112 "web2c.lex"
{
		  (void) sprintf(temp, "%s%s", negbuf, yytext);
		  negbuf[0] = '\0';
		  return last_tok=i_num_tok;
		}
	YY_BREAK
case 46:
YY_USER_ACTION
# line 118 "web2c.lex"
return last_tok=single_char_tok;
	YY_BREAK
case 47:
YY_USER_ACTION
# line 120 "web2c.lex"
return last_tok=string_literal_tok;
	YY_BREAK
case 48:
YY_USER_ACTION
# line 122 "web2c.lex"
{ if ((last_tok>=undef_id_tok &&
		      last_tok<=field_id_tok) ||
		      last_tok==i_num_tok ||
		      last_tok==r_num_tok ||
		      last_tok==')' ||
		      last_tok==']')
		   return last_tok='+';
		else return last_tok=unary_plus_tok; }
	YY_BREAK
case 49:
YY_USER_ACTION
# line 131 "web2c.lex"
{ if ((last_tok>=undef_id_tok &&
		      last_tok<=field_id_tok) ||
		      last_tok==i_num_tok ||
		      last_tok==r_num_tok ||
		      last_tok==')' ||
		      last_tok==']')
		   return last_tok='-';
		else {
		  int c;
		  while ((c = input()) == ' ' || c == '\t')
                    ;
  		  unput(c);
		  if (c < '0' || c > '9') {
			return last_tok = unary_minus_tok;
		  }
		  negbuf[0] = '-';
		}}
	YY_BREAK
case 50:
YY_USER_ACTION
# line 149 "web2c.lex"
return last_tok='*';
	YY_BREAK
case 51:
YY_USER_ACTION
# line 150 "web2c.lex"
return last_tok='/';
	YY_BREAK
case 52:
YY_USER_ACTION
# line 151 "web2c.lex"
return last_tok='=';
	YY_BREAK
case 53:
YY_USER_ACTION
# line 152 "web2c.lex"
return last_tok=not_eq_tok;
	YY_BREAK
case 54:
YY_USER_ACTION
# line 153 "web2c.lex"
return last_tok='<';
	YY_BREAK
case 55:
YY_USER_ACTION
# line 154 "web2c.lex"
return last_tok='>';
	YY_BREAK
case 56:
YY_USER_ACTION
# line 155 "web2c.lex"
return last_tok=less_eq_tok;
	YY_BREAK
case 57:
YY_USER_ACTION
# line 156 "web2c.lex"
return last_tok=great_eq_tok;
	YY_BREAK
case 58:
YY_USER_ACTION
# line 157 "web2c.lex"
return last_tok='(';
	YY_BREAK
case 59:
YY_USER_ACTION
# line 158 "web2c.lex"
return last_tok=')';
	YY_BREAK
case 60:
YY_USER_ACTION
# line 159 "web2c.lex"
return last_tok='[';
	YY_BREAK
case 61:
YY_USER_ACTION
# line 160 "web2c.lex"
return last_tok=']';
	YY_BREAK
case 62:
YY_USER_ACTION
# line 161 "web2c.lex"
return last_tok=assign_tok;
	YY_BREAK
case 63:
YY_USER_ACTION
# line 162 "web2c.lex"
return last_tok=two_dots_tok;
	YY_BREAK
case 64:
YY_USER_ACTION
# line 163 "web2c.lex"
return last_tok='.';
	YY_BREAK
case 65:
YY_USER_ACTION
# line 164 "web2c.lex"
return last_tok=',';
	YY_BREAK
case 66:
YY_USER_ACTION
# line 165 "web2c.lex"
return last_tok=';';
	YY_BREAK
case 67:
YY_USER_ACTION
# line 166 "web2c.lex"
return last_tok=':';
	YY_BREAK
case 68:
YY_USER_ACTION
# line 167 "web2c.lex"
return last_tok='^';
	YY_BREAK
case 69:
YY_USER_ACTION
# line 169 "web2c.lex"
{ (void) strcpy (last_id, yytext);
		  l_s = search_table (last_id);
		  return
                    last_tok = (l_s == -1 ? undef_id_tok : sym_table[l_s].typ);
		}
	YY_BREAK
case 70:
YY_USER_ACTION
# line 176 "web2c.lex"
{ /* Any bizarre token will do.  */
		  return last_tok = two_dots_tok; }
	YY_BREAK
case 71:
YY_USER_ACTION
# line 178 "web2c.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_input_file != yyin )
			{
			/* This can happen if we scan a file, yywrap() returns
			 * 1, and then later the user points yyin at a new
			 * file to resume scanning.  We have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input file.
			 */
			yy_current_buffer->yy_input_file = yyin;
			yy_n_chars = yy_current_buffer->yy_n_chars;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_eof_status = EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 265 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 265 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 264);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *yy_c_buf_p;
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be true.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_eof_status = EOF_NOT_SEEN;
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )
# line 178 "web2c.lex"

