Contents:

Installation


Installation
************

  To compile and install Dvipsk:

  1. Edit the file `make/paths.make' if you want to make changes to the
     installation directories or paths that will have effect across
     different runs of `configure'.  Alternatively, override the Make
     variables on the command line when you run Make.

     Exception: to reliably change the top-level `prefix', you must give
     `configure' the option `-prefix=PREFIX', instead of changing the
     value in `paths.make'.

  2. Edit `kpathsea/texmf.cnf.in' to change the local paths to match
     your local setup.  *Note Default paths: (kpathsea)Default paths,
     for more details on changing the paths. A copy is in
     `kpathsea/INSTALL'.  See `kpathsea/HIER' for an explanation of the
     default setup.

     If the paths do not match where the files actually are, the
     programs will probably start up Very, Very, Slowly, and/or not be
     able to find the fonts or other input files.

  3. `sh configure' (in the top-level directory).  This makes
     system-dependent `#define's' in `*/c-auto.h' (from the
     corresponding `c-auto.h.in') and creates a `Makefile' (from the
     corresponding `Makefile.in', by doing `@VAR@' and `ac_include'
     substitutions).

     Perhaps the most common desire is to compile with optimization
     instead of or as well as debugging.  You can change the options
     passed to the compiler by changing `CFLAGS', either for
     `configure' or `make'.  For example:

          prompt$ env CFLAGS="-g -O" configure
          prompt$ make
     or
          prompt$ configure
          prompt$ make CFLAGS="-g -O"

     *Note Running `configure' scripts: (autoconf)Invoking configure,
     for detailed `configure' options.  (A copy is in
     `kpathsea/CONFIGURE'.)

  4. `make' (still in the top-level directory). Barring configuration
     and compiler bugs, this will compile all the programs.  *Note
     Common problems: (kpathsea)Common problems, for system-dependent
     problems (this section is also in `kpathsea/INSTALL').

     This also creates the `texmf.cnf' and `paths.h' files that define
     the default search paths.

  5. Check the paths in `MakeTeXPK', unless you do not want automatic
     font generation.  *Note Font Generation::.  The `MakeTeXPK' in the
     distribution will overwrite the installed file only if the latter
     contains the string `original MakeTeXPK --'.

     Dvipsk, unlike the original dvips, *requires* `MakeTeXPK' to echo
     the generated filename (and nothing else) to standard output
     (standard error can be used for commentary).  For more details, or
     in general if `MakeTeXPK' fails, *note Unable to Generate Fonts::..

     By default, `MakeTeXPK' installs the new PK fonts under
     `/usr/local/lib/texmf/fonts/tmp/pk'.  For the simplest
     installation, create that directory and make it publically
     writable.  *Note Font Generation::, for alternatives.

  6. Update the device parameters (available memory, resolution, etc.)
     in `config.ps'.  This file is installed as the system-wide
     configuration file.  *Note Config File Options::.  The `config.ps'
     in the distribution will overwrite the installed file only if the
     latter contains the string `original config.ps --'.

     If you need support for more than one device, create configuration
     files for each and install them in the directory named by the Make
     variable `configdir'. See the `-P' option in *Note Invoking
     dvips::.

  7. Install the programs and supporting macros, fonts, and data files
     with `make install'. If you want to install only the executables,
     do `make install-exec'; for only the data files, `make
     install-data'. And if you don't want to install the fonts (perhaps
     because your directory structure is different from the default),
     but do want everything else, set the Make variable
     `install_fonts=false'.

  8. Install additional fonts, if you want to.

     A few Type 1 fonts (Utopia, Charter, Courier, Nimbus, Antiqua, ...)
     have been contributed to the X Consortium, and thus are freely
     available. You can get TeX distributions for them from
     `ftp.cs.umb.edu' in `pub/tex', and from the CTAN hosts in
     `tex-archive/fonts'.

     If you have a commercial Unix system, it may have come with
     additional PostScript fonts.  If so, you can make them available
     to Dvips by (1) copying or linking them with the appropriate
     filenames; and (2) running `afm2tfm' (*note afm2tfm::.) to make
     TFM and VF files so the fonts will be available in the same
     encoding as the fonts distributed with Dvips. Also check
     `psfonts.map' to be sure the fonts are listed there (*note
     Non-resident Fonts::.).

     Here are the typical locations for vendor-supplied fonts:

    DEC Ultrix
          `/usr/lib/DPS/outline/decwin'

    DEC OSF/1
          `/usr/lib/X11/fonts/Type1Adobe'

    IBM AIX
          `/usr/lpp/DPS/fonts/outlines'

    NeXT
          `/NextLibrary/Fonts/outline'

    SGI IRIX
          `/usr/lib/DPS/outline/base'

    Sun Solaris
          `/usr/openwin/lib/X11/fonts/Type1/outline'

     The NeXT system supplies more fonts than the others, but the sets
     are overlapping.  See the distributed `psfonts.map' for which
     fonts each system supplies.

  9. `make distclean'.  This removes all files created by the build.


  *Note Debug Options::, for runtime debugging options that may help
track down problems.

  *Note Reporting bugs: (kpathsea)Reporting bugs, for the bug reporting
address and information. (Also at the end of `kpathsea/INSTALL'.)
