This is Info file latex, produced by Makeinfo version 1.67 from the
input file latex2e.texi.

   This file documents LaTeX2e, a document preparation system. LaTeX2e
is a macro package for TeX.

   This is edition 1.6 of the LaTeX2e documentation, and is for the
Texinfo that is distributed as part of Version 19 of GNU Emacs. It uses
version 2.134 or later of the texinfo.tex input file.

   This is translated from LATEX.HLP v1.0a in the VMS Help Library.  The
pre-translation version was written by George D. Greenwade of Sam
Houston State University.

   The LaTeX 2.09 version was written by Stephen Gilmore
<stg@dcs.ed.ac.uk>.

   The LaTeX2e version was adapted from this by Torsten Martinsen
<bullestock@dk-online.dk>.

   Copyright 1988,1994 Free Software Foundation, Inc.  Copyright
1994-1996 Torsten Martinsen.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "Distribution" and "General
Public License" may be included in a translation approved by the author
instead of in the original English.


File: latex,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

   LaTeX2e is a document preparation system implemented as a macro
package for Donald E. Knuth's TeX typesetting program.

   LaTeX was originally conceived by Leslie Lamport.

   This is edition 1.6 of the LaTeX2e documentation.

* Menu:


* Overview::                    What is LaTeX?
* Commands::                    Commands within a LaTeX document.
* Parameters::                  The command line.
* Command Index::           	An alphabetical list of LaTeX commands.
* Concept Index::		An alphabetical list of concepts.


File: latex,  Node: Overview,  Next: Commands,  Prev: Top,  Up: Top

Overview of LaTeX and Local Guide
*********************************

   The LaTeX command typesets a file of text using the TeX program and
the LaTeX Macro package for TeX.  To be more specific, it processes an
input file containing the text of a document with interspersed commands
that describe how the text should be formatted.  It produces at least
three files as output:

  1. A "Device Independent", or `.dvi' file. This contains commands that
     can be translated into commands for a variety of output devices.
     You can view the output of LaTeX by using a program such as `xdvi',
     which actually uses the `.dvi' file.

  2. A "transcript" or `.log' file that contains summary information and
     diagnostic messages for any errors discovered in the input file.

  3. An "auxiliary" or `.aux' file. This is used by LaTeX itself, for
     things such as sectioning.

   For a description of what goes on inside TeX, you should consult
`The TeXbook' by Donald E. Knuth, ISBN 0-201-13448-9, published jointly
by the American Mathematical Society and Addison-Wesley Publishing
Company.

   For a description of LaTeX, you should consult:

   `LaTeX: A Document Preparation System', by Leslie Lamport,
Addison-Wesley Publishing Company, 2nd edition, 1994.

   `The LaTeX Companion', by Michel Goossens, Frank Mittelbach, and
Alexander Samarin, Addison-Wesley, 1994.


File: latex,  Node: Commands,  Next: Parameters,  Prev: Overview,  Up: Top

Commands
********

   A LaTeX command begins with the command name, which consists of a
`\' followed by either (a) a string of letters or (b) a single
non-letter.  Arguments contained in square brackets, `[]', are optional
while arguments contained in braces, `{}', are required.

   NOTE:  LaTeX  is case sensitive.   Enter  all commands  in lower
case unless explicitly directed to do otherwise.

* Menu:

* Counters::			Internal counters used by LaTeX.
* Cross References::		Automatic referencing.
* Definitions::			Define your own commands etc.
* Document Classes::		Some of the various classes available.
* Environments::		Such as enumerate & itemize.
* Footnotes::			How to produce footnotes.
* Layout::			Controlling the page layout.
* Lengths::			The length commands.
* Letters::			The letter class.
* Line & Page Breaking::	How to insert pagebreaks etc.
* Making Paragraphs::		Paragraph commands.
* Margin Notes::                Putting remarks in the margin.
* Math Formulae::		How to create mathematical formulae.
* Modes::			Paragraph, Math or LR modes.
* Page Styles::			Various styles of page layout.
* Sectioning::			How to section properly.
* Spaces & Boxes::		All the associated commands.
* Special Characters::		Special reserved characters.
* Splitting the Input::		Dealing with big files by splitting.
* Starting & Ending::		The formal start & end layouts.
* Table of Contents::		How to create a table of contents.
* Terminal Input/Output::	User interaction.
* Typefaces::			Such as bold, italics etc.


File: latex,  Node: Counters,  Next: Cross References,  Prev: Commands,  Up: Commands

Counters
========

   Everything LaTeX numbers for you has a counter associated with it.
The name of the counter is the same as the name of the environment or
command that produces the number, except with no `\'.  (enumi - enumiv
are used for the nested enumerate environment.)  Below is a list of the
counters used in LaTeX's standard document classes to control numbering.

      part            paragraph       figure          enumi
      chapter         subparagraph    table           enumii
      section         page            footnote        enumiii
      subsection      equation        mpfootnote      enumiv
      subsubsection

* Menu:

* \addtocounter::       Add a quantity to a counter.
* \alph::               Print value of a counter using letters.
* \arabic::             Print value of a counter using numerals.
* \fnsymbol::           Print value of a counter using symbols.
* \newcounter::         Define a new counter.
* \refstepcounter::     Add to counter, resetting subsidiary counters.
* \roman::              Print value of a counter using roman numerals.
* \setcounter::         Set the value of a counter.
* \stepcounter::        Add to counter, resetting subsidiary counters.
* \usecounter::         Use a specified counter in a list environment.
* \value::              Use the value of a counter in an expression.


File: latex,  Node: \addtocounter,  Next: \alph,  Prev: Counters,  Up: Counters

\addtocounter
-------------

   `\addtocounter{counter}{value}'

   The `\addtocounter' command increments the `counter' by the amount
specified by the `value' argument.  The `value' argument can be
negative.


File: latex,  Node: \alph,  Next: \arabic,  Prev: \addtocounter,  Up: Counters

\alph
-----

   `\alph{counter}'

   This command causes the value of the `counter' to be printed in
alphabetic characters.  The `\alph' command uses lower case alphabetic
alphabetic characters, i.e., `a, b, c...' while the `\Alph' command
uses upper case alphabetic characters, i.e., `A, B, C...'.


File: latex,  Node: \arabic,  Next: \fnsymbol,  Prev: \alph,  Up: Counters

\arabic
-------

   `\arabic{counter}'

   The `\arabic' command causes the value of the `counter' to be
printed in Arabic numbers, i.e., `3'.


File: latex,  Node: \fnsymbol,  Next: \newcounter,  Prev: \arabic,  Up: Counters

\fnsymbol
---------

   `\fnsymbol{counter}'

   The `\fnsymbol' command causes the value of the `counter' to be
printed in a specific sequence of nine symbols that can be used for
numbering footnotes.

   NB. `counter' must have a value between 1 and 9 inclusive.


File: latex,  Node: \newcounter,  Next: \refstepcounter,  Prev: \fnsymbol,  Up: Counters

\newcounter
-----------

   `\newcounter{foo}[counter]'

   The `\newcounter' command defines a new counter named `foo'.  The
counter is initialized to zero.

   The optional argument `[counter]' causes the counter `foo' to be
reset whenever the counter named in the optional argument is
incremented.


File: latex,  Node: \refstepcounter,  Next: \roman,  Prev: \newcounter,  Up: Counters

\refstepcounter
---------------

   `\refstepcounter{counter}'

   The `\refstepcounter' command works like  `\stepcounter' *Note
\stepcounter::, except it also defines the current `\ref' value to be
the result of `\thecounter'.


File: latex,  Node: \roman,  Next: \stepcounter,  Prev: \refstepcounter,  Up: Counters

\roman
------

   `\roman{counter}'

   This command causes the value of the `counter' to be printed in
Roman numerals.  The `\roman' command uses lower case Roman numerals,
i.e., `i, ii, iii...', while the `\Roman' command uses upper case Roman
numerals, i.e., `I, II, III...'.


File: latex,  Node: \stepcounter,  Next: \setcounter,  Prev: \roman,  Up: Counters

\stepcounter
------------

   `\stepcounter{counter}'

   The `\stepcounter' command adds one to the `counter' and resets all
subsidiary counters.


File: latex,  Node: \setcounter,  Next: \usecounter,  Prev: \stepcounter,  Up: Counters

\setcounter
-----------

   `\setcounter{counter}{value}'

   The `\setcounter' command sets the value of the `counter' to that
specified by the `value' argument.


File: latex,  Node: \usecounter,  Next: \value,  Prev: \setcounter,  Up: Counters

\usecounter
-----------

   `\usecounter{counter}'

   The `\usecounter' command is used in the second argument of the
`list' environment to allow the counter specified to be used to number
the list items.


File: latex,  Node: \value,  Prev: \usecounter,  Up: Counters

\value
------

   `\value{counter}'

   The `\value' command produces the value of the `counter' named in
the mandatory argument.  It can be used where LaTeX expects an integer
or number, such as the second argument of a `\setcounter' or
`\addtocounter' command, or in:

             \hspace{\value{foo}\parindent}

   It is useful for doing arithmetic with counters.


File: latex,  Node: Cross References,  Next: Definitions,  Prev: Counters,  Up: Commands

Cross References
================

   One reason for numbering things like figures and equations is to
refer the reader to them, as in "See Figure 3 for more details."

* Menu:

* \label::      Assign a symbolic name to a piece of text.
* \pageref::    Refer to a page number.
* \ref::        Refer to a section, figure or similar.


File: latex,  Node: \label,  Next: \pageref,  Prev: Cross References,  Up: Cross References

\label
------

   `\label{key}'

   A `\label' command appearing in ordinary text assigns to the `key'
the number of the current sectional unit; one appearing inside a
numbered environment assigns that number to the `key'.

   A `key' can consist of any sequence of letters, digits, or
punctuation characters.  Upper and lowercase letters are different.

   To avoid accidentally creating two labels with the same name, it is
common to use labels consisting of a prefix and a suffix separated by a
colon. The prefixes conventionally used are

   * `cha' for chapters

   * `sec' for lower-level sectioning commands

   * `fig' for figures

   * `tab' for tables

   * `eq' for equations

   Thus, a label for a figure would look like `fig:bandersnatch'.


File: latex,  Node: \pageref,  Next: \ref,  Prev: \label,  Up: Cross References

\pageref
--------

   `\pageref{key}'

   The `\pageref' command produces the page number of the place in the
text where the corresponding `\label' command appears. ie. where
`\label{key}' appears.


File: latex,  Node: \ref,  Prev: \pageref,  Up: Cross References

\ref
----

   `\ref{key}'

   The `\ref' command produces the number of the sectional unit,
equation number, ... of the corresponding `\label' command.


File: latex,  Node: Definitions,  Next: Document Classes,  Prev: Cross References,  Up: Commands

Definitions
===========

* Menu:

* \newcommand::         Define a new command.
* \newenvironment::     Define a new environment.
* \newtheorem::         Define a new theorem-like environment.
* \newfont::            Define a new font name.


File: latex,  Node: \newcommand,  Next: \newenvironment,  Prev: Definitions,  Up: Definitions

\newcommand
-----------

      \newcommand{cmd}[args]{definition}
      \newcommand{cmd}[args][default]{definition}
      \renewcommand{cmd}[args]{definition}
      \renewcommand{cmd}[args][default]{definition}

   These commands define (or redefine) a command.

`cmd'
     A command name beginning with a `\'.  For `\newcommand' it must
     not be already defined and must not begin with `\end'; for
     `\renewcommand' it must already be defined.

`args'
     An integer from 1 to 9 denoting the number of arguments of the
     command being defined.  The default is for the command to have no
     arguments.

`def'
     If this optional parameter is present, it means that the command's
     first argument is optional. The default value of the optional
     argument is `def'.

`definition'
     The text to be substituted for every occurrence of `cmd'; a
     parameter of the form `#n' in `cmd' is replaced by the text of the
     nth argument when this substitution takes place.


File: latex,  Node: \newenvironment,  Next: \newtheorem,  Prev: \newcommand,  Up: Definitions

\newenvironment
---------------

      \newenvironment{nam}[args]{begdef}{enddef}
      \newenvironment{nam}[args][default]{begdef}{enddef}
      \renewenvironment{nam}[args]{begdef}{enddef}

   These commands define or redefine an environment.

`nam'
     The name of the environment.  For `\newenvironment' there must be
     no currently defined environment by that name, and the command
     `\nam' must be undefined.  For `\renewenvironment' the environment
     must already be defined.

`args'
     An integer from 1 to 9 denoting the number of arguments of the
     newly-defined environment.  The default is no arguments.

`default'
     If this is specified, the first argument is optional, and `default'
     gives the default value for that argument.

`begdef'
     The text substituted for every occurrence of `\begin{nam}'; a
     parameter of the form `#n' in `cmd' is replaced by the text of the
     nth argument when this substitution takes place.

`enddef'
     The text substituted for every occurrence of `\end{nam}'.  It may
     not contain any argument parameters.


File: latex,  Node: \newtheorem,  Next: \newfont,  Prev: \newenvironment,  Up: Definitions

\newtheorem
-----------

      \newtheorem{env_name}{caption}[within]
      \newtheorem{env_name}[numbered_like]{caption}

   This command defines a theorem-like environment.

`env_name'
     The name of the environment to be defined. A string of letters.
     It must not be the name of an existing environment or counter.

`caption'
     The text printed at the beginning of the environment, right before
     the number. This may simply say "Theorem", for example.

`within'
     The name of an already defined counter, usually of a sectional
     unit.  Provides a means of resetting the new theorem counter
     *within* the sectional unit.

`numbered_like'
     The name of an already defined theorem-like environment.

   The `\newtheorem' command may have at most one optional argument.


File: latex,  Node: \newfont,  Prev: \newtheorem,  Up: Definitions

\newfont
--------

   `\newfont{cmd}{font_name}'

   Defines the command name `cmd', which must not be currently defined,
to be a declaration that selects the font named `font_name' to be the
current font.


File: latex,  Node: Document Classes,  Next: Environments,  Prev: Definitions,  Up: Commands

Document Classes
================

   Valid LaTeX document classes include:

   * article

   * report

   * letter

   * book

   * slides

   Other document classes are often available. *Note Overview::, for
details.  They are selected with the following command:

   `\documentclass [options] {class}'

   All the standard classes (except slides) accept the following options
for selecting the typeface size (10 pt is default):

   10pt, 11pt, 12pt

   All classes accept these options for selecting the paper size
(default is letter):

   a4paper, a5paper, b5paper, letterpaper, legalpaper, executivepaper

   Miscellaneous options:

   * landscape -- selects landscape format. Default is portrait.

   * titlepage, notitlepage -- selects if there should be a separate
     title page.

   * leqno -- equation number on left side of equations. Default is
     right side.

   * fleqn -- displayed formulas flush left. Default is centred.

   * openbib -- use "open" bibliography format.

   * draft, final -- mark/do not mark overfull boxes with a rule.
     Default is final.

   These options are not available with the slides class:

   * oneside, twoside -- selects one- or twosided layout. Default is
     oneside, except for the book class.

   * openright, openany -- determines if a chapter should start on a
     right-hand page. Default is openright for book.

   * onecolumn, twocolumn -- one or two columns. Defaults to one column.

   The slides class offers the option `clock' for printing the time at
the bottom of each note.

   If you specify more than one option, they must be separated by a
comma.

   Additional packages are loaded by a

   `\usepackage[options]{pkg}'

   command. If you specify more than one package, they must be
separated by a comma.

   Any options given in the `\documentclass' command that are unknown
by the selected document class are passed on to the packages loaded with
`\usepackage'.


File: latex,  Node: Layout,  Next: Lengths,  Prev: Footnotes,  Up: Commands

Layout
======

   Miscellaneous commands for controlling the general layout of the
page.

* Menu:

* \flushbottom::        Make all text pages the same height.
* \onecolumn::          Use one-column layout.
* \raggedbottom::       Allow text pages of differing height.
* \twocolumn::          Use two-column layout.


File: latex,  Node: \flushbottom,  Next: \onecolumn,  Up: Layout

\flushbottom
------------

   The `\flushbottom' declaration makes all text pages the same height,
adding extra vertical space when necessary to fill out the page.

   This is the standard if twocolumn mode is selected.


File: latex,  Node: \onecolumn,  Next: \raggedbottom,  Prev: \flushbottom,  Up: Layout

\onecolumn
----------

   The `\onecolumn' declaration starts a new page and produces
single-column output.


File: latex,  Node: \raggedbottom,  Next: \twocolumn,  Prev: \onecolumn,  Up: Layout

\raggedbottom
-------------

   The `\raggedbottom' declaration makes all pages the height of the
text on that page.  No extra vertical space is added.


File: latex,  Node: \twocolumn,  Prev: \raggedbottom,  Up: Layout

\twocolumn
----------

   `\twocolumn[text]'

   The `\twocolumn' declaration starts a new page and produces
two-column output. If the optional `text' argument is present, it is
typeset in one-column mode.


File: latex,  Node: Environments,  Next: Footnotes,  Prev: Document Classes,  Up: Commands

Environments
============

   LaTeX provides a number of different paragraph-making environments.
Each environment begins and ends in the same manner.

             \begin{environment-name}
             .
             .
             .
             \end{environment-name}

* Menu:

* array::       Math arrays.
* center::      Centred lines.
* description:: Labelled lists.
* enumerate::   Numbered lists.
* eqnarray::    Sequences of aligned equations.
* equation::    Displayed equation.
* figure::      Floating figures.
* flushleft::   Flushed left lines.
* flushright::  Flushed right lines.
* itemize::     Bulleted lists.
* letter::      Letters.
* list::        Generic list environment.
* minipage::    Miniature page.
* picture::     Picture with text, arrows, lines and circles.
* quotation::   Indented environment with paragraph indentation.
* quote::       Indented environment with no paragraph indentation.
* tabbing::     Align text arbitrarily.
* table::       Floating tables.
* tabular::     Align text in columns.
* thebibliography::     Bibliography or reference list.
* theorem::     Theorems, lemmas, etc.
* titlepage::   For hand crafted title pages.
* verbatim::    Simulating typed input.
* verse::       For poetry and other things.


File: latex,  Node: array,  Next: center,  Prev: Environments,  Up: Environments

array
-----

     \begin{array}{col1col2...coln}
     column 1 entry & column 2 entry ... & column n entry \\
      .
      .
      .
     \end{array}

   Math arrays are produced with the array environment.  It has a single
mandatory argument describing the number of columns and the alignment
within them.  Each column, `coln', is specified by a single letter that
tells how items in that row should be formatted.

   * `c' -- for centred

   * `l' -- for flush left

   * `r' -- for flush right

   Column entries must be separated by an `&'.  Column entries may
include other LaTeX commands.  Each row of the array must be terminated
with the string `\\'.

   Note that the `array' environment can only be used in math mode, so
normally it is used inside an `equation' environment.


File: latex,  Node: center,  Next: description,  Prev: array,  Up: Environments

center
------

      \begin{center}
      Text on line 1 \\
      Text on line 2 \\
      .
      .
      .
      \end{center}

   The `center' environment allows you to create a paragraph consisting
of lines that are centred within the left and right margins on the
current page.  Each line must be terminated with the string `\\'.

* Menu:

* \centering::          The declaration form of the `center' environment.


File: latex,  Node: \centering,  Up: center

\centering
..........

   This declaration corresponds to the `center' environment.  This
declaration can be used inside an environment such as `quote' or in a
`parbox'.  The text of a figure or table can be centred on the page by
putting a `\centering' command at the beginning of the figure or table
environment.

   Unlike the `center' environment, the `\centering' command does not
start a new paragraph; it simply changes how LaTeX formats paragraph
units.  To affect a paragraph unit's format, the scope of the
declaration must contain the blank line or `\end' command (of an
environment like quote) that ends the paragraph unit.


File: latex,  Node: description,  Next: enumerate,  Prev: center,  Up: Environments

description
-----------

      \begin{description}
      \item [label] First item
      \item [label] Second item
      .
      .
      .
      \end{description}

   The `description' environment is used to make labelled lists.  The
`label' is bold face and flushed right.


File: latex,  Node: enumerate,  Next: eqnarray,  Prev: description,  Up: Environments

enumerate
---------

      \begin{enumerate}
      \item First item
      \item Second item
      .
      .
      .
      \end{enumerate}

   The `enumerate' environment produces a numbered list.  Enumerations
can be nested within one another, up to four levels deep.  They can also
be nested within other paragraph-making environments.

   Each item of an enumerated list begins with an `\item' command.
There must be at least one `\item' command within the environment.

   The `enumerate' environment uses the `enumi' through `enumiv'
counters (*note Counters::.). The type of numbering can be changed by
redefining `\theenumi' etc.


File: latex,  Node: eqnarray,  Next: equation,  Prev: enumerate,  Up: Environments

eqnarray
--------

      \begin{eqnarray}
      math formula 1 \\
      math formula 2 \\
      .
      .
      .
      \end{eqnarray}

   The `eqnarray' environment is used to display a sequence of
equations or inequalities.  It is very much like a three-column `array'
environment, with consecutive rows separated by `\\' and consecutive
items within a row separated by an `&'.

   An equation number is placed on every line unless that line has a
`\nonumber' command.

   The command `\lefteqn' is used for splitting long formulas across
lines. It typesets its argument in display style flush left in a box of
zero width.


File: latex,  Node: equation,  Next: figure,  Prev: eqnarray,  Up: Environments

equation
--------

      \begin{equation}
       math formula
      \end{equation}

   The `equation' environment centres your equation on the page and
places the equation number in the right margin.


File: latex,  Node: figure,  Next: flushleft,  Prev: equation,  Up: Environments

figure
------

      \begin{figure}[placement]
     
       body of the figure
     
      \caption{figure title}
      \end{figure}

   Figures are objects that are not part of the normal text, and are
usually "floated" to a convenient place, like the top of a page.
Figures will not be split between two pages.

   The optional argument `[placement]' determines where LaTeX will try
to place your figure.  There are four places where LaTeX can possibly
put a float:

  1. `h' (Here) - at the position in the text where the figure
     environment appears.

  2. `t' (Top) - at the top of a text page.

  3. `b' (Bottom) - at the bottom of a text page.

  4. `p' (Page of floats) - on a separate float page, which is a page
     containing no text, only floats.

   The standard report and article classes use the default placement
`tbp'.

   The body of the figure is made up of whatever text, LaTeX commands,
etc.  you wish.  The `\caption' command allows you to title your figure.


File: latex,  Node: flushleft,  Next: flushright,  Prev: figure,  Up: Environments

flushleft
---------

      \begin{flushleft}
      Text on line 1 \\
      Text on line 2 \\
      .
      .
      .
      \end{flushleft}

   The `flushleft' environment allows you to create a paragraph
consisting of lines that are flushed left, to the left-hand margin.
Each line must be terminated with the string `\\'.

* Menu:

* \raggedright::        The declaration form of the `flushleft' environment.


File: latex,  Node: \raggedright,  Up: flushleft

\raggedright
............

   This declaration corresponds to the `flushleft' environment.  This
declaration can be used inside an environment such as `quote' or in a
`parbox'.

   Unlike the `flushleft' environment, the `\raggedright' command does
not start a new paragraph; it simply changes how LaTeX formats
paragraph units.  To affect a paragraph unit's format, the scope of the
declaration must contain the blank line or `\end' command (of an
environment like quote) that ends the paragraph unit.


File: latex,  Node: flushright,  Next: itemize,  Prev: flushleft,  Up: Environments

flushright
----------

      \begin{flushright}
      Text on line 1 \\
      Text on line 2 \\
      .
      .
      .
      \end{flushright}

   The `flushright' environment allows you to create a paragraph
consisting of lines that are flushed right, to the right-hand margin.
Each line must be terminated with the string `\\'.

* Menu:

* \raggedleft:: The declaration form of the `flushright' environment.


File: latex,  Node: \raggedleft,  Up: flushright

\raggedleft
...........

   This declaration corresponds to the `flushright' environment.  This
declaration can be used inside an environment such as `quote' or in a
`parbox'.

   Unlike the `flushright' environment, the `\raggedleft' command does
not start a new paragraph; it simply changes how LaTeX formats
paragraph units.  To affect a paragraph unit's format, the scope of the
declaration must contain the blank line or `\end' command (of an
environment like quote) that ends the paragraph unit.


File: latex,  Node: itemize,  Next: letter,  Prev: flushright,  Up: Environments

itemize
-------

      \begin{itemize}
      \item First item
      \item Second item
      .
      .
      .
      \end{itemize}

   The `itemize' environment produces a "bulleted" list.  Itemizations
can be nested within one another, up to four levels deep.  They can also
be nested within other paragraph-making environments.

   Each item of an `itemized' list begins with an `\item' command.
There must be at least one `\item' command within the environment.

   The `itemize' environment uses the `itemi' through `itemiv' counters
(*note Counters::.). The type of numbering can be changed by redefining
`\theitemi' etc.


File: latex,  Node: letter,  Next: list,  Prev: itemize,  Up: Environments

letter
------

   This environment is used for creating letters. *Note Letters::.


File: latex,  Node: list,  Next: minipage,  Prev: letter,  Up: Environments

list
----

   The `list' environment is a generic environment which is used for
defining many of the more specific environments. It is seldom used in
documents, but often in macros.

      \begin{list}{label}{spacing}
      \item First item
      \item Second item
      .
      .
      .
      \end{list}

   The `{label}' argument specifies how items should be labelled.  This
argument is a piece of text that is inserted in a box to form the
label.  This argument can and usually does contain other LaTeX commands.

   The `{spacing}' argument contains commands to change the spacing
parameters for the list.  This argument will most often be null, i.e.,
`{}'.  This will select all default spacing which should suffice for
most cases.


File: latex,  Node: minipage,  Next: picture,  Prev: list,  Up: Environments

minipage
--------

      \begin{minipage}[position]{width}
       text
      \end{minipage}

   The `minipage' environment is similar to a `\parbox' command.  It
takes the same optional `position' argument and mandatory `width'
argument.  You may use other paragraph-making environments inside a
minipage.

   Footnotes in a `minipage' environment are handled in a way that is
particularly useful for putting footnotes in figures or tables.  A
`\footnote' or `\footnotetext' command puts the footnote at the bottom
of the minipage instead of at the bottom of the page, and it uses the
`mpfootnote' counter instead of the ordinary `footnote' counter *Note
Counters::.

   NOTE: Don't put one minipage inside another if you are using
footnotes; they may wind up at the bottom of the wrong minipage.


File: latex,  Node: picture,  Next: quotation,  Prev: minipage,  Up: Environments

picture
-------

      \begin{picture}(width,height)(x offset,y offset)
       .
       .
       picture commands
       .
       .
      \end{picture}

   The `picture' environment allows you to create just about any kind
of picture you want containing text, lines, arrows and circles.  You
tell LaTeX where to put things in the picture by specifying their
coordinates.  A coordinate is a number that may have a decimal point and
a minus sign -- a number like `5', `2.3' or `-3.1416'.  A coordinate
specifies a length in multiples of the unit length `\unitlength', so if
`\unitlength' has been set to `1cm', then the coordinate 2.54 specifies
a length of 2.54 centimetres.  You can change the value of
`\unitlength' anywhere you want, using the `\setlength' command, but
strange things will happen if you try changing it inside the picture
environment.

   A position is a pair of coordinates, such as `(2.4,-5)', specifying
the point with x-coordinate `2.4' and y-coordinate `-5'.  Coordinates
are specified in the usual way with respect to an origin, which is
normally at the lower-left corner of the picture.  Note that when a
position appears as an argument, it is not enclosed in braces; the
parentheses serve to delimit the argument.

   The `picture' environment has one mandatory argument, which is a
`position'.  It specifies the size of the picture.  The environment
produces a rectangular box with width and height determined by this
argument's x- and y-coordinates.

   The `picture' environment also has an optional `position' argument,
following the `size' argument, that can change the origin.  (Unlike
ordinary optional arguments, this argument is not contained in square
brackets.) The optional argument gives the coordinates of the point at
the lower-left corner of the picture (thereby determining the origin).
For example, if `\unitlength' has been set to `1mm', the command
        \begin{picture}(100,200)(10,20)
   produces a picture of width 100 millimetres and height 200
millimetres, whose lower-left corner is the point (10,20) and whose
upper-right corner is therefore the point (110,220).  When you first
draw a picture, you will omit the optional argument, leaving the origin
at the lower-left corner.  If you then want to modify your picture by
shifting everything, you just add the appropriate optional argument.

   The environment's mandatory argument determines the nominal size of
the picture.  This need bear no relation to how large the picture
really is; LaTeX will happily allow you to put things outside the
picture, or even off the page.  The picture's nominal size is used by
LaTeX in determining how much room to leave for it.

   Everything that appears in a picture is drawn by the `\put' command.
The command
        \put (11.3,-.3){...}
   puts the object specified by `...' in the picture, with its
reference point at coordinates (11.3,-.3).  The reference points for
various objects will be described below.

   The `\put' command creates an "LR box".  You can put anything in the
text argument of the `\put' command that you'd put into the argument of
an `\mbox' and related commands.  When you do this, the reference point
will be the lower left corner of the box.

   Picture commands:

* Menu:

* \circle::             Draw a circle.
* \dashbox::            Draw a dashed box.
* \frame::              Draw a frame around an object.
* \framebox (picture):: Draw a box with a frame around it.
* \line::               Draw a straight line.
* \linethickness::      Set the line thickness.
* \makebox (picture)::  Draw a box of the specified size.
* \multiput::           Draw multiple instances of an object.
* \oval::               Draw an ellipse.
* \put::                Place an object at a specified place.
* \shortstack::         Make a pile of objects.
* \vector::             Draw a line with an arrow.


File: latex,  Node: \circle,  Next: \dashbox,  Up: picture

\circle
.......

   `\circle[*]{diameter}'

   The `\circle' command produces a circle with a diameter as close to
the specified one as possible.  If the `*'-form of the command is used,
LaTeX draws a solid circle.

   Note that only circles up to 40 pt can be drawn.


File: latex,  Node: \dashbox,  Next: \frame,  Prev: \circle,  Up: picture

\dashbox
........

   Draws a box with a dashed line.

   `\dashbox{dash_length}(width,height){...}'

   The `\dashbox' has an extra argument which specifies the width of
each dash.  A dashed box looks best when the `width' and `height' are
multiples of the `dash_length'.


File: latex,  Node: \frame,  Next: \framebox (picture),  Prev: \dashbox,  Up: picture

\frame
......

   `\frame{...}'

   The `\frame' command puts a rectangular frame around the object
specified in the argument.  The reference point is the bottom left
corner of the frame.  No extra space is put between the frame and the
object.


File: latex,  Node: \framebox (picture),  Next: \line,  Prev: \frame,  Up: picture

\framebox
.........

   `\framebox(width,height)[position]{...}'

   The `\framebox' command is exactly the same as the `\makebox'
command, except that it puts a frame around the outside of the box that
it creates.

   The `framebox' command produces a rule of thickness `\fboxrule', and
leaves a space `\fboxsep' between the rule and the contents of the box.


File: latex,  Node: \line,  Next: \linethickness,  Prev: \framebox (picture),  Up: picture

\line
.....

   `\line(x slope,y slope){length}'

   The `\line' command draws a line of the specified `length' and
`slope'.

   Note that LaTeX can only draw lines with slope = x/y, where x and y
have integer values from -6 through 6.


File: latex,  Node: \linethickness,  Next: \makebox (picture),  Prev: \line,  Up: picture

\linethickness
..............

   `\linethickness{dimension}'

   Declares the thickness of horizontal and vertical lines in a picture
environment to be `dimension', which must be a positive length. It does
not affect the thickness of slanted lines and circles, or the quarter
circles drawn by `\oval' to form the corners of an oval.


File: latex,  Node: \makebox (picture),  Next: \multiput,  Prev: \linethickness,  Up: picture

\makebox
........

   `\makebox(width,height)[position]{...}'

   The `\makebox' command for the picture environment is similar to the
normal `\makebox' command except that you must specify a `width' and
`height' in multiples of `\unitlength'.

   The optional argument, `[position]', specifies the quadrant that
your text appears in.  You may select up to two of the following:

   * `t' - Moves the item to the top of the rectangle

   * `b' - Moves the item to the bottom

   * `l' - Moves the item to the left

   * `r' - Moves the item to the right

   *Note \makebox::.


File: latex,  Node: \multiput,  Next: \oval,  Prev: \makebox (picture),  Up: picture

\multiput
.........

   `\multiput(x coord,y coord)(delta x,delta y){number of
copies}{object}'

   The `\multiput' command can be used when you are putting the same
object in a regular pattern across a picture.


File: latex,  Node: \oval,  Next: \put,  Prev: \multiput,  Up: picture

\oval
.....

   `\oval(width,height)[portion]'

   The `\oval' command produces a rectangle with rounded corners.  The
optional argument, `[portion]', allows you to select part of the oval.

   * `t' - Selects the top portion

   * `b' - Selects the bottom portion

   * `r' - Selects the right portion

   * `l' - Selects the left portion

   Note that the "corners" of the oval are made with quarter circles
with a maximum radius of 20 pt, so large "ovals" will look more like
boxes with rounded corners.


File: latex,  Node: \put,  Next: \shortstack,  Prev: \oval,  Up: picture

\put
....

   `\put(x coord,y coord){ ...  }'

   The `\put' command places the item specified by the mandatory
argument at the given coordinates.


File: latex,  Node: \shortstack,  Next: \vector,  Prev: \put,  Up: picture

\shortstack
...........

   `\shortstack[position]{...  \\ ...  \\ ...}'

   The `\shortstack' command produces a stack of objects.  The valid
positions are:

   * `r' - Moves the objects to the right of the stack

   * `l' - Moves the objects to the left of the stack

   * `c' - Moves the objects to the centre of the stack (default)


File: latex,  Node: \vector,  Prev: \shortstack,  Up: picture

\vector
.......

   `\vector(x slope,y slope){length}'

   The `\vector' command draws a line with an arrow of the specified
length and slope.  The `x' and `y' values must lie between -4 and +4,
inclusive.


File: latex,  Node: quotation,  Next: quote,  Prev: picture,  Up: Environments

quotation
---------

      \begin{quotation}
       text
      \end{quotation}

   The margins of the `quotation' environment are indented on the left
and the right.  The text is justified at both margins and there is
paragraph indentation.  Leaving a blank line between text produces a new
paragraph.


File: latex,  Node: quote,  Next: tabbing,  Prev: quotation,  Up: Environments

quote
-----

      \begin{quote}
       text
      \end{quote}

   The margins of the `quote' environment are indented on the left and
the right.  The text is justified at both margins.  Leaving a blank line
between text produces a new paragraph.


File: latex,  Node: tabbing,  Next: table,  Prev: quote,  Up: Environments

tabbing
-------

      \begin{tabbing}
      text \= more text \= still more text \= last text \\
      second row \>  \> more \\
      .
      .
      .
      \end{tabbing}

   The `tabbing' environment provides a way to align text in columns.
It works by setting tab stops and tabbing to them much the way you do
with an ordinary typewriter.

   It is best suited for cases where the width of each column is
constant and known in advance.

   This environment can be broken across pages, unlike the `tabular'
environment.

   The following commands can be used inside a `tabbing' enviroment:

`\='
     Sets a tab stop at the current position.

`\>'
     Advances to the next tab stop.

`\<'
     This command allows you to put something to the left of the local
     margin without changing the margin.  Can only be used at the start
     of the line.

`\+'
     Moves the left margin of the next and all the following commands
     one tab stop to the right.

`\-'
     Moves the left margin of the next and all the following commands
     one tab stop to the left.

`\''
     Moves everything that you have typed so far in the current column,
     i.e. everything from the most recent `\>', `\<', `\'', `\\', or
     `\kill' command, to the right of the previous column, flush
     against the current column's tab stop.

`\`'
     Allows you to put text flush right against any tab stop, including
     tab stop 0.  However, it can't move text to the right of the last
     column because there's no tab stop there.  The `\`' command moves
     all the text that follows it, up to the `\\' or `\end{tabbing}'
     command that ends the line, to the right margin of the tabbing
     environment.  There must be no `\>' or `\'' command between the
     `\`' and the command that ends the line.

`\kill'
     Sets tab stops without producing text.  Works just like  `\\'
     except that it throws away the current line instead of producing
     output for it.  The effect of any `\=', `\+' or `\-' commands in
     that line remain in effect.

`\pushtabs'
     Saves all current tab stop positions. Useful for temporarily
     changing tab stop positions in the middle of a `tabbing'
     environment.

`\pushtabs'
     Restores the tab stop positions saved by the last `\pushtabs'.

`\a'
     In a `tabbing' environment, the commands `\=', `\'' and `\`' do
     not produce accents as normal. Instead, the commands `\a=', `\a''
     and `\a`' are used.

   This example typesets a Pascal function in a traditional format:

             \begin{tabbing}
             function \= fact(n : integer) : integer;\\
                      \> begin \= \+ \\
                            \> if \= n $>$ 1 then \+ \\
                                     fact := n * fact(n-1) \- \\
                               else \+ \\
                                     fact := 1; \-\- \\
                         end;\\
             \end{tabbing}


File: latex,  Node: table,  Next: tabular,  Prev: tabbing,  Up: Environments

table
-----

      \begin{table}[placement]
     
       body of the table
     
      \caption{table title}
      \end{table}

   Tables  are objects  that  are not part  of the normal  text,  and
are usually  "floated"  to a convenient  place,  like  the top  of a
page.  Tables will not be split between two pages.

   The optional argument `[placement]' determines where LaTeX will try
to place your table.  There are four places where LaTeX can possibly put
a float:

   * `h' : Here - at the position in the text where the table
     environment appears.

   * `t' : Top - at the top of a text page.

   * `b' : Bottom - at the bottom of a text page.

   * `p' : Page of floats - on a separate float page, which is a page
     containing no text, only floats.

   The standard `report' and `article' classes use the default
placement `[tbp]'.

   The body of the table is made up of whatever text, LaTeX commands,
etc., you wish.  The `\caption' command allows you to title your table.


File: latex,  Node: tabular,  Next: thebibliography,  Prev: table,  Up: Environments

tabular
-------

      \begin{tabular}[pos]{cols}
      column 1 entry & column 2 entry ... & column n entry \\
      .
      .
      .
      \end{tabular}

   or

      \begin{tabular*}{width}[pos]{cols}
      column 1 entry & column 2 entry ... & column n entry \\
      .
      .
      .
      \end{tabular*}

   These environments produce a box consisting of a sequence of rows of
items, aligned vertically in columns.  The mandatory and optional
arguments consist of:

`width'
     Specifies the width of the `tabular*' environment.  There must be
     rubber space between columns that can stretch to fill out the
     specified width.

`pos'
     Specifies the vertical position; default is alignment on the
     centre of the environment.

        * `t' - align on top row

        * `b' - align on bottom row

`cols'
     Specifies the column formatting.  It consists of a sequence of the
     following specifiers, corresponding to the sequence of columns and
     intercolumn material.

        * `l' - A column of left-aligned items.

        * `r' - A column of right-aligned items.

        * `c' - A column of centred items.

        * `|' - A vertical line the full height and depth of the
          environment.

        * `@{text}' - This inserts `text' in every row.  An @-expression
          suppresses the intercolumn space normally inserted between
          columns; any desired space between the inserted text and the
          adjacent items must be included in text.  An
          `\extracolsep{wd}' command in an @-expression causes an extra
          space of width `wd' to appear to the left of all subsequent
          columns, until countermanded by another `\extracolsep'
          command.  Unlike ordinary intercolumn space, this extra space
          is not suppressed by an @-expression.  An `\extracolsep'
          command can be used only in an @-expression in the `cols'
          argument.

        * `p{wd}' - Produces a column with each item typeset in a
          parbox of width `wd', as if it were the argument of a
          `\parbox[t]{wd}' command.  However, a `\\' may not appear in
          the item, except in the following situations:
            1. inside an environment like `minipage', `array', or
               `tabular'.

            2. inside an explicit `\parbox'.

            3. in the scope of a `\centering', `\raggedright', or
               `\raggedleft' declaration.  The latter declarations must
               appear inside braces or an environment when used in a
               `p'-column element.

        * `*{num}{cols}' - Equivalent to `num' copies of `cols', where
          `num' is any positive integer and `cols' is any list of
          column-specifiers, which may contain another `*-expression'.

   These commands can be used inside a `tabular' environment:

* Menu:

* \cline::              Draw a horizontal line spanning some columns.
* \hline::              Draw a horizontal line spanning all columns.
* \multicolumn::        Make an item spanning several columns.
* \vline::              Draw a vertical line.


File: latex,  Node: \cline,  Next: \hline,  Up: tabular

\cline
......

   `\cline{i-j}'

   The `\cline' command draws horizontal lines across the columns
specified, beginning in column `i' and ending in column `j', which are
identified in the mandatory argument.


File: latex,  Node: \hline,  Next: \multicolumn,  Prev: \cline,  Up: tabular

\hline
......

   The `\hline' command will draw a horizontal line the width of the
table.  It's most commonly used to draw a line at the top, bottom, and
between the rows of the table.


File: latex,  Node: \multicolumn,  Next: \vline,  Prev: \hline,  Up: tabular

\multicolumn
............

   `\multicolumn{cols}{pos}{text}'

   The `\multicolumn' is used to make an entry that spans several
columns.  The first mandatory argument, `cols', specifies the number of
columns to span.  The second mandatory argument, `pos', specifies the
formatting of the entry; `c' for centred, `l' for flushleft, `r' for
flushright.  The third mandatory argument, `text', specifies what text
is to make up the entry.


File: latex,  Node: \vline,  Prev: \multicolumn,  Up: tabular

\vline
......

   The `\vline' command will draw a vertical line extending the full
height and depth of its row.  An `\hfill' command can be used to move
the line to the edge of the column.  It can also be used in an
@-expression.


File: latex,  Node: thebibliography,  Next: theorem,  Prev: tabular,  Up: Environments

thebibliography
---------------

      \begin{thebibliography}{widest-label}
      \bibitem[label]{cite_key}
      .
      .
      .
      \end{thebibliography}

   The `thebibliography' environment produces a bibliography or
reference list.  In the `article' class, this reference list is
labelled "References"; in the `report' class, it is labelled
"Bibliography".

   * `widest-label': Text that, when printed, is approximately as wide
     as the widest item label produces by the `\bibitem' commands.

* Menu:

* \bibitem::            Specify a bibliography item.
* \cite::               Refer to a bibliography item.
* \nocite::             Include an item in the bibliography.
* Using BibTeX::        Automatic generation of bibliographies.


File: latex,  Node: \bibitem,  Next: \cite,  Up: thebibliography

\bibitem
........

   `\bibitem[label]{cite_key}'

   The `\bibitem' command generates an entry labelled by `label'.  If
the `label' argument is missing, a number is generated as the `label',
using the `enumi' counter.  The `cite_key' is any sequence of letters,
numbers, and punctuation symbols not containing a comma.  This command
writes an entry on the `.aux' file containing `cite_key' and the item's
`label'.  When this `.aux' file is read by the `\begin{document}'
command, the item's `label' is associated with `cite_key', causing the
reference to `cite_key' by a `\cite' command to produce the associated
`label'.


File: latex,  Node: \cite,  Next: \nocite,  Prev: \bibitem,  Up: thebibliography

\cite
.....

   `\cite[text]{key_list}'

   The `key_list' argument is a list of citation keys.  This command
generates an in-text citation to the references associated with the keys
in `key_list' by entries on the `.aux' file read by the
`\begin{document}' command.

   The optional `text' argument will appear after the citation, i.e.
`\cite[p. 2]{knuth}' might produce `[Knuth, p. 2]'.


File: latex,  Node: \nocite,  Next: Using BibTeX,  Prev: \cite,  Up: thebibliography

\nocite
.......

   `\nocite{key_list}'

   The `\nocite' command produces no text, but writes `key_list', which
is a list of one or more citation keys, on the `.aux' file.

