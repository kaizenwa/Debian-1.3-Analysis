.\" Traduzione italiana di Giuseppe De Marco <gdm@rebel.net>
.\" 4 Ottobre 1996 - Ultima modifica: 16 Marzo 1997

.\" $Revision: 1.4 $
.TH SUCK 1
.SH NOME
suck - Prende una piccola porzione di news da un server NNTP, evitando
il comando NEWNEWS.
.SH SINTASSI
.I suck
[
.BI
hostname
]
[
.BI @filename
]
[
.BI \-V
]
[
.BI \-K
]
[
.BI \-L
]
[
.BI \-H
]
[
.BI \-d[tmd]
dirname
]
[
.BI \-s\ |\ \-S
filename
]
[
.BI \-e\ |\ \-E
filename
]
[
.BI \-a
]
[
.BI \-m
]
[
.BI \-b[ir]
batchfile
]
[
.BI \-r
filesize
]
[
.BI  \-p
extension
]
[
.BI \-U
userid
]
[
.BI \-P
password
]
[
.BI \-c
]
[
.BI \-M
]
[
.BI \-N
port_number
]
[
.BI \-W
pause_time pause_nr_msgs
]
[
.BI \-w
pause_time pause_nr_msgs
]
[
.BI \-k
]
[
.BI \-l
phrase_file
]

Opzioni valide in tutti i modi

\-V

Questa opzione farà in modo che suck stampi il numero di versione ed esca.

\-s | \-S filename

Queste opzioni manderanno tutti i messaggi di stato (normalmente mostrati su
stdout) ad un file alternativo.  La versione minuscola, -s, manderà i messaggi
di stato al compiled-in default definito in suck_config.h. Il default
è /dev/null, per cui non verranno mostrati messaggi di stato.  La versione
maiuscola, -S, richiede il parametro filename.  Tutti i messaggi di stato
saranno allora mandati a tale file.

\-e | \-E filename

Queste opzioni manderanno tutti i messaggi di errore (normalmente mostrati su
stderr) ad un file alternativo.  La versione minuscola, -e, manderà i messaggi
di errore al compiled-in default definito in suck_config.h.  Il default è
suck.errlog.  La versione maiuscola, -E, richiede il parametro filename.
Tutti i messaggi di errore saranno allora mandati a tale file.

\-a

Questa opzione obbliga suck a batchare sempre gli article scaricati,
anche quando suck abortisce per una qualunque ragione.  Senza quest'opzione,
suck batcherà gli article solo se finisce con successo o se viene interrotto
da un segnale (vedere sotto).

\-N port_number

Questa opzione dice a suck di usare un numero di porta NNRP alternativo al
119 di default, quando si connette all'host.

\@filename 

Questa opzione dice a suck di leggere altre opzioni da un file, in aggiunta
alla linea di comando.

\-dt dirname

\-dm dirname

\-dd dirname

Specifica la locazione dei vari file usati da suck.

\-dt dirname = directory per i file temporanei creati da suck (suck.newrc, suck.sort, suck.restart, suck.killlog).

\-dm dirname = directory per la conservazione degli article creati nel modo Multifile o batch

\-dd dirname = directory dei file di dati usati da suck (sucknewsrc suckkillfile suckothermsgs)

\-p extension

Questa estensione viene aggiunta a tutti i file così che si possano avere più siti feed.
Per esempio, se si specifica -p .dummy, suck cerca sucknewsrc.dummy, suckkillfile.dummy,
etc, e crea i suoi file temporanei con la stessa estensione.  Questo permetterà di tenere
più file sucknewsrc, uno per ogni sito.

\-K
	Questa opzione farà saltare a suck il controllo dei killfile.

\-L
	Questa opzione dice a suck di NON loggare in suck.killlog i messaggi killati.
\-H
	Questa opzione farà saltare a suck il controllo della history.

\-U userid

\-P password

Queste due opzioni vi permettono di specificare un userid ed una password, se
il vostro NNTP server ve li richiede.

\-c

Se questa opzione viene specificata, suck farà pulizia al termine.  Ciò include:
.RS
1. Spostamento di sucknewsrc su sucknewsrc.old
.RE
.RS
2. Spostamento di suck.newrc su sucknewsrc
.RE
.RS
3. Rimozione di suck.sorted e suckothermsgs.
.RE

\-M

Questa opzione dice a suck di mandare il comando "mode reader" al server
remoto.  Se si ottiene un messaggio di comando non valido immediatamente
dopo l'annuncio di benvenuto, si provi questa opzione.

\-W pause_time pause_nr_msgs

Questa opzione dice a suck di fare una pausa tra il download dei messaggi.
Bisogna specificare per quanto tempo arrestarsi (in secondi), ed ogni
quanto farlo (ogni num. X di messaggi). Es: \-W 10 100 farebbe fermare
suck per 10 secondi ogni 100 messaggi.  Perché si dovrebbe farlo?  Suck
puó provocare caricamenti intensi su un server remoto, e questa pausa
permette al server di "riprendere fiato".

\-w pause_timer pause_nr_msgs

Questa opzione permette di rallentare suck mentre si stanno tirando i
messaggi. Se si manda a suck un segnale predefinito (per default SIGUSR1,
vedere suck_config.h), suck scambierà le opzioni di pausa di default (se
specificate tramite l'opzione -W) con i valori di questa opzione.  Per
esempio, avviando suck con -w 2 2, e mandando a suck un SIGUSR1 (usando
kill), suck si fermerà per 2 secondi per ogni messaggio, permettendo al
server di "riprendere fiato". Se si manda a suck un altro SIGUSR1, suck
rimetterà le opzioni di pausa di default.  Se non erano state specificate
opzioni di pausa sulla linea di comando (si era omesso -W), suck
ricomincerà a tirare alla massima velocita' come di default.

\-k

Questa opzione è per il server NON-standard msnews.microsoft.com, che usa
un valore di ritorno differente per il comando XHDR usato per prendere la lista
degli article da downloadare.  Lo standard è 221, ma microsoft usa 224.  Questa
opzione dice a suck di accettare il valore di ritorno 224 al posto di 221.

\-l phrase_file

Questa opzione dice a suck di caricare un file delle frasi alternativo, invece
di usare i messaggi built-in.  Questo permette di fare stampare a suck le frasi
in un'altra lingua, o permette di customizzare i messaggi senza ricompilare
suck. Vedere sotto.

.SH DESCRIZIONE

.SH MODO 1 \- modo stdout
.RS
%suck
.RE
.RS
%suck myhost.com
.RE
.PP
Suck prende le news da un server NNTP e manda gli article su
stdout. Suck accetta come argomento il nome di un NNTP server o
se non si danno argomenti prenderà la variabile d'ambiente
NNTPSERVER. Si possono redirigere gli article ad un file o comprimerli
al volo con qualcosa tipo "suck server.domain | gzip \-9 > output.gz".
Ora riguarda l'utente cosa fare con gli article.  Forse
si ha l'output già sulla propria macchina perché si è usata una linea
slip o ancora si deve trasferire l'output sulla propria macchina locale.
.SH MODO 2 \- Modo Multifile
.RS
%suck \-m
.RE
.RS
%suck myhost.com \-m
.RE
.PP
Suck prende le news da un server NNTP e conserva ogni article in un
file separato.  Vengono conservati nella directory specificata in
suck_config.h o dall'opzione di linea di comando \-dm. 
.SH MODO 3 \- Modo Batch
.RS
%suck \-b[ir] batchfile
.RE
.RS
%suck myhost.com \-b[ir] batchfile
.RE
.PP
Suck prenderà gli article delle news da un server NNTP e li conserverà
in tanti file, uno per ogni article (modo Multifile).  La locazione dei file
è basata sulle define in suck_config.h e sulla \-dm della riga di comando.  
Una volta che suck avrà finito di downloadare gli article creerà un file
batch, processabile da innxmit o da rnews.

\-bi \- crea un file batch per innxmit.  Gli article sono
lasciati intatti, ed viene creato un batchfile con la
lista del path completo di ogni article.
A tal punto innxmit può essere chiamato:

.RS
%innxmit localhost batchfile
.RE

\-br \- crea un file batch per rnews.  Gli article sono
concatenati insieme, con il separatore di article
#!rnews size.  Questo può essere dato in pasto ad rnews:

.RS
%rnews \-S localhost batchfile
.RE

\-r filesize  specifica la la massima dimensione del file batch per rnews.
Questa opzione ha senso solo quando usata con -br davanti.  Permette di
specificare la dimensione massima di un file batch da dare ad rnews. Quando
questo limite è raggiunto, un nuovo batch file viene creato DOPO che suck
finisce di scrivere l'article corrente nel vecchio batch file. Il secondo
ed i successivi batch file hanno un numero di sequenza da 1 in su attaccato
al file name specificato con il -br. Notare che siccome suck deve terminare
di scrivere l'article corrente dopo che raggiunge il limite, la dimensione
massima del file è solamente approssimata. 

.SH FILE DI ARGOMENTI PER SUCK
.PP
Se si specifica un @filename sulla command line, suck leggerà da filename e
lo scorrerà per trovare argomenti che si desidera passare a suck. In questo file
si possono specificare gli stessi argomenti che si specificherebbero sulla linea
di comando.
Gli argomenti possono essere su una linea, o sparpagliati tra più linee.
Si possono anche usare commenti. I commenti iniziano con un '#' e terminano alla
fine della riga.  Tutti gli argomenti dati dalla riga di comando overrida
gli argomenti nel file.

.RS
# File di Argomenti di esempio
.RE
.RS
-bi batch # opzione batch file
.RE
.RS
-M	# usa l'opzione mode reader
.RE

.SH SUCKNEWSRC
.PP
Suck cerca un file
.I sucknewsrc
per vedere quali article si vogliono, e
quali sono già stati ricevuti. Il formato di sucknewsrc è molto semplice.
Consiste in una linea per ogni newsgroup.  La linea contiene due o
tre campi.
Il primo campo è il nome del gruppo.  Il campo successivo è il numero di article
più alto che era nel gruppo l'ultima volta che quel gruppo è stato downloadato.
Il terzo campo, che è opzionale, limita il numero di messaggi che possono
essere downloadati alla volta.  Se ci sono più messaggi di questo numero,
solo i più recenti vengono downloadati.
I campi sono separati da uno spazio.

.RS
comp.os.linux.announce 1 [ 100 ]
.RE
.PP
Quanto suck finisce, crea il file suck.newrc contenente il
nuovo sucknewsrc con i numeri degli article aggiornati.
.PP
Per aggiungere un nuovo newsgroup, basta metterlo in sucknewsrc, con il numero
di article più alto uguale a \-1 (o un qualsiasi numero minore di 0).
Suck allora prenderà numero X messaggi più recenti per quel newsgroup.
Per esempio, un -100 farebbe scaricare a suck i 100 messaggi più
recenti di quel newsgroup.
.PP
Per dire a suck di skippare un newsgroup, mettere un # come primo carattere
di una linea.

.SH SUCKKILLFILE e GROUP KEEP/KILLFILE
Per usare le routine di killfile/keepfile, decommentare la linea
.I #define KILLFILE
in 
.I suck_config.h.
Allora, se
.I suckkillfile
esiste,  gli header di tutti gli article verranno esaminati, e gli article
downloadati o meno, in base ai parametri nei file.  Gli header di eventuali
article non downloadati verranno loggati in 
.I suck.killlog a meno che non si specifichi l'opzione -L sulla linea di comando,
nel quale caso gli header NON verranno loggati.
Quindi si può downloadare questi article mettendo i loro
Message-ID nel file suckothermsgs.
.PP
Ecco come funziona l'intero pacchetto keep/delete.  Tutti gli article sono checkati contro
il kill file principale (suckkillfile).  Se un article non è killato dal kill file principale,
allora viene letta la riga di group.  Se esiste un group file per uno dei gruppi allora
l'article è checkato contro quel group file.  Se matcha un keep file, allora è
tenuto, altrimenti è marcato per la cancellazione.  Se matcha un delete file, allora è marcato per la cancellazione, altrimenti è tenuto.  Questo viene fatto per ogni gruppo che c'è nella group line.  Un potenziale
problema è cosa succede quando un article è marcato sia per il keeping che per il deleting.  Questo
viene gestito dal "tie-breaker" definibile in suck_config.h.   Se il tiebreaker è definito, allora
l'article "tied" è tenuto.  Se non è definito, allora l'article è cancellato.
.SH
PARAMETRI
.RS
LOWLINES=#######
.RE
.RS
HILINES=#######
.RE
.RS
PATH=xxxxx,yyyyy
.RE
.RS
FROM=xxxxx,yyyyy
.RE
.RS
SUBJECT=xxxxxx,yyyy
.RE
.RS
NNTPHOST=xxxxxxx,yyyyy
.RE
.RS
QUOTE=c
.RE
.RS
GROUP=keep groupname filename  OR
GROUP=delete groupname filename
.RE
.RS
NRGRPS=########
.RE
.RS
PATH_SEP=c
.RS
.RE
SUBJECT_SEP=c
.RE
.RS
FROM_SEP=c
.RE
.RS
NNTPHOST_SEP=c
.RE
.RS
PROGRAM=pathname
.RE
.SH Parametri dei File di KILL/KEEP
.PP
.I HILINES=
Matcha ogni article più lungo del numero di linee specificato.
.PP
.I LOWLINES=
Matcha ogni article più corto del numero di linee specificato.
.PP
.I QUOTE=
Questo item specifica il carattere che definisce una stringa quotata. Il default
per questo è un ".  Se si stanno usando le regex questo item DEVE essere la prima linea nel file, sennò verrà ignorato.
.PP
.I PATH=
.I FROM=
.I SUBJECT= 
.I NNTPHOST= 
Queste linee permettono di matchare un article basandosi su di un item in
questi campi dell'header.  Si possono specificare più item su ogni linea,
purché siano separati da una virgola.  Se un item comincia con un carattere
di QUOTE (come specificato prima), allora l'item è controllato così com'è
(facendo distinzione tra maiuscole e minuscole).  Se un item non inizia con un
carattere di QUOTE, allora l'item è controllato senza guardare alle
maiuscole/minuscole.  Se suck era stato compilato con USE_REGEX (vedere
suck_config.h), allora questi item possono essere delle POSIX regular
expression.
La virgola come separatore può essere cambiata attraverso l'opzione "*_SEP" qui sotto.
.PP
.I GROUP=
Questa linea permette di specificare uno dei due parametri keep e delete su una
group by group basis.  Ci sono tre parti in questa linea.  La prima parte
è o "keep" o "delete".  Se è keep, allora solo gli article in quel
gruppo che matchano i parametri nel group file sono downloadati. Se è delete,
gli article in quel gruppo che matchano i parametri non sono downloadati.
La seconda parte, il nome del gruppo è il nome completo del gruppo degli gli
article che vanno checkati contro il group file. La terza parte specifica il
group file contenente i parametri contro i quali gli article devono essere
checkati.
.PP
.I NRGRPS=
Questa linea matcherà ogni article che ha più gruppi del numero specificato.
Tipicamente questo in un killfile è usato per evitare i messaggi spammed.
(Un messaggio si dice spammed quando è postato in moltissimi gruppi, tipo
quegli schemi diventa-ricco-velocemente, etc.)
.PP
.I PATH_SEP=
.I SUBJECT_SEP=
.I FROM_SEP=
.I NNTPHOST_SEP=
Queste linee permettono di cambiare il separatore di default (una virgola) per le
precedenti opzioni PATH, SUBJECT, FROM, e NNTPHOST.  Il cambiamento è effettivo
solo per le linee che seguono queste nel killfile.
.PP
.I PROGRAM=
Questa linea permette a suck di chiamare un programma esterno per controllare
ogni article. Su questa linea si possono specificare argomenti in aggiunta al
nome del programma. Se nel suckkillfile viene trovata questa linea, tutte le
altre linee vengono ignorate. Piuttosto, gli header sono passati al programma
esterno, ed il programma esterno determina se downloadare o meno l'article.
Ecco come funziona. Suck forkerà il programma, con stdin e stdout rediretti.
Suck darà gli header in pasto al programma attraverso stdin, ed aspetterà una
risposta indietro attraverso stdout.  Ecco il flusso di dati per ogni article:

.RS
1. suck scriverà una stringa lunga 8 byte, rappresentante la lunghezza
dell'header record, sullo stdin del programma esterno.  La lunghezza è in ascii,
allineata a destra, e termina con un newline (esempio: "1234   \\n"). 
.RE
.RS
2. suck scriverà allora l'header sullo stdin del programma esterno.
.RE
.RS
3. suck aspetterà allora un codice di risposta di 2 caratteri su stdout.
Questo codice di risposta è uno dei due "0\\n" e "1\\n" (NON ZERO O UNO BINARI,
MA ZERO O UNO ASCII). Se il codice di ritorno è zero suck downloaderà
l'article, mentre se è uno non lo farà.
.RE
.RS
4. Quando non ci sono più article, la lunghezza scritta (per il passo 1) sarà
zero (ancora in ascii "0       \\n").  Suck allora prima di continuare aspetterà
che il programma esterno termini.  Il programma esterno potrà fare eventuali
pulizie di cui necessita, quindi uscire. Nota: suck non continuerà a processare
finché il programma esterno non uscirà.
.RE
	
.PP
Tutti i parametri sono validi sia nel kill file principale e sia nei group
file, con l'eccezione delle linee GROUP e PROGRAM.  Queste sono valide solo
nel kill file principale.
.SH SUCKOTHERMSGS
Se
.I suckothermsgs
esiste, deve contenere una lista di Message-ID, uno per linea, inclusi i <>.
Questi article verranno allora downloadati, in aggiunta ad eventuali article
generati processando il file
.IR sucknewsrc .
Questo può essere usato per prendere article in altri gruppi,
o per downloadare un article che era stato killato.  Questi article
.B NON SONO
processati attraverso le routine di killing degli article.
.SH FRASI IN UNA LINGUA STRANIERA
Se l'opzione
.BI "-l phrases"
è specificata, suck caricherà un file delle frasi di una lingua alternativa, e
lo userà per tutti i messaggi di stato & di errore, invece dei default built-in.
Il file delle frasi contiene tutti i messaggi usati da suck, rpost, e testhost,
ognuno su una linea separata e racchiusa tra virgolette.  Per generare un file
di frasi di esempio, avviare
.BI "make phrases"
dalla linea di comando.  Questo creerà "phrases.engl", che è una lista delle frasi
di default.  Semplicemente si editi questo file, cambiando le frasi dall'inglese
a quelle della lingua che si desidera, assicurandosi di tenere le frasi tra virgolette.
Queste frasi possono contenere variabili per stampare item forniti dal programma, tipo
un hostname.  Le variabili sono indicate da %vN% dove N è una sequenza da uno in su
per frase.  Queste variabili possono esistere in qualsiasi ordine sulla linea della
frase, per esempio,
.RS
"Salve, %v1%, benvenuto a %v2%"         o
.RE
.RS
"Benvenuto a %v2%, %v1%"
.RE
sono entrambe frasi valide.  Le frasi possono contenere,  \\n, \\r, or \\t per stampare un
newline, carriage return, o tab, rispettivamente.

Se si modifica qualcosa del source code, e si aggiungono nuove frasi, si avrà bisogno
di rigenerare phrases.h, così che ogni cosa funzioni correttamente.  Per ricrearlo,
basta avviare
.BI "make phrases.h"
dalla linea di comando.
.SH GESTIONE DEI SEGNALI
Suck accetta due segnali, definiti in
.I suck_config.h.
Il primo segnale (SIGTERM per default) farà finire a Suck di downloadare il corrente
article, batchare qualsivoglia articoli siano stati downloadati, ed
uscire, senza alcun errore. 

Il secondo segnale (SIGUSR1 per default) farà usare a suck i valori di pausa definiti
con l'opzione -w (vedere sopra).

.SH CODICI DI USCITA
Suck uscirà con i seguenti valori di ritorno:
.RS
0 = successo
.RE
.RS
1 = non ci sono article disponibili per il download.
.RE
.RS
2 = suck ha ricevuto una risposta inaspettata ad un comando emesso al server
remoto.
.RE
.RS
3 = è stata usata l'opzione -V.
.RE
.RS
4 = suck non ha saputo compiere l'autorizzazione NNTP col server remoto.
.RE
.RS
-1 = errore generale.
.RE
.SH STORIA
.RS
Autore Originale - Tim Smith (indirizzo sconosciuto)
.RE
.RS
Manutentori - 
.RE
.RS
Marzo 1995 - Sven Goldt (goldt@math.tu-berlin.de)
.RE
.RS
Luglio 1995  - Robert A. Yetman (boby@pixi.com)
.RE
.de R$
Revisione \\$$3, \\$$4
..
.SH "VEDERE ANCHE"
testhost(1), rpost(1), lpost(1).
