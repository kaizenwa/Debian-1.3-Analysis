.\" $Revision: 1.4 $
.TH SUCK 1
.SH NAME
suck - Pull a small newsfeed from an NNTP server, avoiding the NEWNEWS command.
.SH SYNOPSIS
.I suck
[
.BI
hostname
]
[
.BI @filename
]
[
.BI \-V
]
[
.BI \-K
]
[
.BI \-L
]
[
.BI \-H
]
[
.BI \-d[tmd]
dirname
]
[
.BI \-s\ |\ \-S
filename
]
[
.BI \-e\ |\ \-E
filename
]
[
.BI \-a
]
[
.BI \-m
]
[
.BI \-b[ir]
batchfile
]
[
.BI \-r
filesize
]
[
.BI  \-p
extension
]
[
.BI \-U
userid
]
[
.BI \-P
password
]
[
.BI \-c
]
[
.BI \-M
]
[
.BI \-N
port_number
]
[
.BI \-W
pause_time pause_nr_msgs
]
[
.BI \-w
pause_time pause_nr_msgs
]
[
.BI \-k
]
[
.BI \-l
phrase_file
]

Options valid in all modes

\-V

This option will cause suck to print out the version number and then exit.

\-s | \-S filename

These options will send all status messages (normally displayed on stdout), to
an alternate file.  The lower case version, -s, will send the status messages
to the compiled-in default defined in suck_config.h.  The default is /dev/null,
so no status messages will be displayed.  The upper case version, -S, requires
the filename parameter.  All status messages will then be sent to this file.

\-e | \-E filename

These options will send all error messages (normally displayed on stderr), to 
an alternate file.  The lower case version, -e, will send the error messages
to the compiled-in default defined in suck_config.h.  The default is suck.errlog.
The upper case version, -E, requires the filename parameter.  All error messages
will then be sent to this file.

\-a

This option forces suck to always batch up any downloaded articles,
even if suck aborts for any reason.  Without this option, suck will
only batch up articles if it finishes successfully or is cancelled by
a signal (see below).

\-N port_number

This option tells suck to use an alternate NNRP port number when connecting
to the host, instead of the default, 119.

\@filename 

This option tells suck to read other options from a file in addition to the
commandline.

\-dt dirname

\-dm dirname

\-dd dirname

Specify the location of the various files used by suck.

\-dt dirname = directory of temp files created by suck (suck.newrc, suck.sort,
suck.restart, suck.killlog).

\-dm dirname = directory for storage of articles created in Multifile mode
or batch mode

\-dd dirname = directory of data files used by suck (sucknewsrc suckkillfile suckothermsgs)

\-p extension

This extension is added to all files so that you can have multiple site feeds.
For example, if you specify -p .dummy, then suck looks for sucknewsrc.dummy, suckkillfile.dummy,
etc, and creates its temp files with the same extension.  This will allow you to keep
multiple sucknewsrc files, one for each site.

\-K
	This option will cause suck to bypass checking the killfile(s).

\-L
	This option tells suck to NOT log killed messages to suck.killlog.

\-H
	This option will cause suck to bypass the history check.

\-U userid

\-P password

These two options let you specify a userid and password, if your NNTP server
requires them.

\-c

If this option is specified, suck will clean up after itself.  This includes:
.RS
1. Moving sucknewsrc to sucknewsrc.old
.RE
.RS
2. Moving suck.newrc to sucknewsrc
.RE
.RS
3. rm suck.sorted and suckothermsgs.
.RE

\-M

This option tells suck to send the "mode reader" command to the remote
server.  If you get an invalid command message from immediately
after the welcome announcement, then try this option.

\-W pause_time pause_nr_msgs

This option tells suck to pause between the download of messages.  You need
to specify how long to pause (in seconds), and how often to pause (every X nr
of messages). Ex: \-W 10 100 would cause suck to pause for 10 seconds every
100 messages.  Why would you want to do this?  Suck can cause heavy loads on 
a remote server, and this pause allows the server to "catch its breath."

\-w pause_timer pause_nr_msgs

This option allows you to slow down suck while pulling messages.  If you
send suck a predefined signal (default SIGUSR1, see suck_config.h),
suck will swap the default pause options (if specified by the -W option),
with the values from this option.  For example, you run suck with -w 2 2,
and you send suck a SIGUSR1 (using kill), suck will then pause 2 seconds
between every other message, allowing the server to "catch its breath."
If you send suck another SIGUSR1, then suck will put back the default
pause options.  If no pause options were specified on the command line
(you omitted -W), then suck will return to the default full speed pull.

\-k 

This option is for the NON-standard msnews.microsoft.com server, which uses
a different return value for the XHDR command used to get the list of
articles to download.  The standard is 221, but microsoft uses 224.  This option
tells suck to accept the 224 return value instead of 221.

\-l phrase_file

This option tells suck to load in an alternate phrase file, instead of using
the built-in messages.  This allows you to have suck print phrases in another
language, or to allow you to customize the messages without re-building suck.
See below.

.SH DESCRIPTION

.SH MODE 1 \- stdout mode
.RS
%suck
.RE
.RS
%suck myhost.com
.RE
.PP
Suck grabs news from an NNTP server and sends the articles to
stdout. Suck accepts as argument the name of an NNTP server or
if you don't give an argument it will take the environment variable
NNTPSERVER. You can redirect the articles to a file or compress them
on the fly like "suck server.domain | gzip \-9 > output.gz".
Now it's up to you what you do with the articles.  Maybe
you have the output already on your local machine because you
used a slip line or you still have to transfer the output to your
local machine.
.SH MODE 2 \- Multifile mode
.RS
%suck \-m
.RE
.RS
%suck myhost.com \-m
.RE
.PP
Suck grabs news from an NNTP server and stores each article in a
separate file.  They are stored in the directory specified in suck_config.h or
by the \-dm command line option.
.SH MODE 3 \- Batch mode
.RS
%suck \-b[ir] batchfile
.RE
.RS
%suck myhost.com \-b[ir] batchfile
.RE
.PP
Suck will grab news articles from an NNTP server and store them
into files, one for each article (Multifile mode).  The location of the files
is based on the defines in suck_config.h and the command line \-dm.  
Once suck is done downloading the articles, it will build a batch file
which can be processed by either innxmit or rnews.

\-bi \- build batch file for innxmit.  The articles are
left intact, and a batchfile is built with a
one\-up listing of the full path of each article.
Then innxmit can be called:

.RS
%innxmit localhost batchfile
.RE

\-br \- build batch file for rnews.  The articles are
concatenated together, with the #!rnews size
article separator.  This can the be fed to rnews:

.RS
%rnews \-S localhost batchfile
.RE

\-r filesize  specify maximum batch file size for rnews.  This option,
is only meaningful when used with -br above.  This option allows you
to specify the maximum size of a batch file to be fed to rnews.  When
this limit is reached, a new batch file is created AFTER I finish
writing the current article to the old batch file.  The second and
successive batch files get a 1 up sequence number attached to the
file name specified with the -br.  Note that since I have to finish
writing out the current article after reaching the limit, the
max file size is only approximate.

.SH SUCK ARGUMENT FILE
.PP
If you specify @filename on the command line, suck will read from filename and
parse it for any args that you wish to pass to suck.  You specify the
same arguments in this file as you do on the command line.  The arguments
can be on one line, or spread out among more than one line.  You may also
use comments.  Comments begin with '#' and go to the end of a line.  All
command line arguments override arguments in the file.

.RS
# Sample Argument file
.RE
.RS
-bi batch # batch file option
.RE
.RS
-M	# use mode reader option
.RE

.SH SUCKNEWSRC
.PP
Suck looks for a file
.I sucknewsrc
to see what articles you want and
which you already received. The format of sucknewsrc is very simple. It
consists of one line for each newsgroup.  The line contains two or
three fields.
The first field is the name of the group.  The next field is the highest
article number that was in the group when that group was last downloaded.
The third field, which is optional, limits the number of messages which
can be downloaded at any given time.  If there are more messages than this
number, only the newest are downloaded.
The fields are separated by a space.

.RS
comp.os.linux.announce 1 [ 100 ]
.RE
.PP
When suck is finished, it creates the file suck.newrc which contains the
new sucknewsrc with the updated article numbers.
.PP
To add a new newsgroup, just stick it in sucknewsrc, with a
highest article number of \-1 (or any number less than 0).
Suck will then get the newest X number of messages for that newsgroup.
For example, a -100 would cause suck to download the newest 100
messages for that newsgroup.
.PP
To tell suck to skip a newsgroup, put a # as the first
character of a line.

.SH SUCKKILLFILE and GROUP KEEP/KILLFILES
To use the killfile/keepfile routines, uncomment the 
.I #define KILLFILE
line in 
.I suck_config.h.
Then, if
.I suckkillfile
exists,  the headers of 
all articles will be scanned and the article downloaded or not, 
based on the parameters in the files.  Any articles not downloaded
have the headers logged to
.I suck.killlog unless you specify the -L option on the command line,
then the headers are NOT logged.
You can then download these articles by putting their
Message-IDs in the suckothermsgs file.
.PP
Here's how the whole keep/delete package works.  All articles are checked against the
master kill file (suckkillfile).  If an article is not killed by the master kill file,
then its group line is parsed.  If a group file exists for one of the groups then the
article is checked against that group file.  If it matches a keep file, then it is
kept, otherwise it is flagged for deletion.  If it matches a delete file, then it is
flagged for deletion, otherwise it is kept.  This is done for every group on the group line.  One potential
problem is what happens when an article is flagged both for keeping and deletion.  This
is handled by the "tie-breaker" defined in suck_config.h.   If the tiebreaker is defined, then
the "tied" article is kept.  If it is not defined, then the article is deleted.
.SH
PARAMETERS
.RS
LOWLINES=#######
.RE
.RS
HILINES=#######
.RE
.RS
PATH=xxxxx,yyyyy
.RE
.RS
FROM=xxxxx,yyyyy
.RE
.RS
SUBJECT=xxxxxx,yyyy
.RE
.RS
NNTPHOST=xxxxxxx,yyyyy
.RE
.RS
QUOTE=c
.RE
.RS
GROUP=keep groupname filename  OR
GROUP=delete groupname filename
.RE
.RS
NRGRPS=########
.RE
.RS
PATH_SEP=c
.RS
.RE
SUBJECT_SEP=c
.RE
.RS
FROM_SEP=c
.RE
.RS
NNTPHOST_SEP=c
.RE
.RS
PROGRAM=pathname
.RE
.SH KILL/KEEP Files Paramaters
.PP
.I HILINES=
Match any article longer than the number of lines specified.
.PP
.I LOWLINES=
Match any article shorter than the number of lines specified.
.PP
.I QUOTE=
This item specifies the character that defines a quoted string.  The default
for this is a ".  This item MUST be the first line in the file if you
are using regex, otherwise it will be ignored.
.PP
.I PATH=
.I FROM=
.I SUBJECT= 
.I NNTPHOST= 
These lines allow you to match an article based on an item in these header
fields.  You may specify multiple items on each line, as long as they
are separated by a comma.  If an item starts with a QUOTE character (as
specified above), then the item is checked as-is (case significant).  If
an item does not start with a QUOTE character, then the item is checked with
out regard to case.  If suck was compiled with USE_REGEX (see suck_config.h), 
then these items can be POSIX regular expressions.
The comma as the separator can be changed via the "*_SEP" options below.
.PP
.I GROUP=
This line allows you to specify either keep or delete parameters on a group
by group basis.  There are three parts to this line.  The first part is either
"keep" or "delete".  If it is keep, then only articles in that group which match
the parameters in the group file are downloaded.  If it is delete, articles in that
group which match the parameters are not downloaded.  The second part, the group name
is the full group name for articles to check against the group file.  The third part
specifies the group file which contains the parameters to check the articles against.
.PP
.I NRGRPS=
This line will match any article which has more groups than the number specified.
Typically this is used in a killfile to prevent spammed messages.
(A spammed message is one that is posted to many, many groups, such
as those get-rich quick schemes, etc.)
.PP
.I PATH_SEP=
.I SUBJECT_SEP=
.I FROM_SEP=
.I NNTPHOST_SEP=
These lines allow you to change the default separator (a comma) for the PATH, SUBJECT,
FROM, and NNTPHOST options above.  The change is effective only for lines that follow
these in the killfile.
.PP
.I PROGRAM=
This line allows suck to call an external program to check each article.
You may specify any arguments in addition to the program name on this line.
If this line is in your suckkillfile, all other lines are ignored.  Instead, the
headers are passed to the external program, and the external program determines
whether or not to download the article.  Here's how it works.  Suck will fork
your program, with stdin and stdout redirected.  Suck will feed the headers
to your program thru stdin, and expect a reply back thru stdout.  Here's the 
data flow for each article:

.RS
1. suck will write a 8 byte long string, which represents the length of the
header record on stdin of the external program.  Then length is in ascii,
is left-aligned, and ends in a newline (example: "1234   \\n").
.RE
.RS
2. suck will then write the header on stdin of the external program.
.RE
.RS
3. suck will wait for a 2 character response code on stdout.  This response code is
either "0\\n" or "1\\n" (NOT BINARY ZERO OR ONE, ASCII ZERO OR ONE).  If the return
code is zero, suck will download the article, if it is one, suck won't.
.RE
.RS
4. When there are no more articles, the length written down (for step 1) will be zero
(again in ascii "0       \\n").  Suck will then wait for the external program to
exit before continuing on.  The external program can do any clean up it needs,
then exit.  Note: suck will not continue processing until the external program exits.
.RE
	
.PP
All parameters are valid in both the master kill file and the group files, with the
exception of the GROUP and PROGRAM line.  These are only valid in the master kill file.
.SH SUCKOTHERMSGS
If
.I suckothermsgs
exists, It must contain a one-per-line listing
of Message-ID's, with the <> included.  These articles will then 
be downloaded, in addition to any articles generated by processing
the
.I sucknewsrc
file.  This can be used to get articles in other groups,
or to download an article that was killed.  These articles
.B ARE NOT
processed through the kill articles routines.
.SH FOREIGN LANGUAGE PHRASES
If the
.BI "-l phrases"
option is specified, suck will load an alternate language phrase file, and use it
for all status & error messages, instead of the built-in defaults.  The phrase file
contains all messages used by suck, rpost, and testhost, each on a separate line
and enclosed in quotes.  To generate a sample phrase file, run
.BI "make phrases"
from the command line.  This will create "phrases.engl", which is a list of the default
phrases.  Simply edit this file, changing the english phrases to the language of
your choosing, being sure to keep the phrases within the quotes.  These phrases may 
contain variables to print items provided by the program, such as hostname.  Variables
are designated by %vN% where N is a one-up sequence per phrase.  These variables may
exist in any order on the phrase line, for example, 
.RS
"Hello, %v1%, welcome to %v2%" 	or
.RE
.RS
"Welcome to %v2%, %v1%"	
.RE
are both valid phrases.  Phrases may contain,  \\n, \\r, or \\t to print a newline, carriage return,
or tab, respectively.

If you modify any of the source code, and add in new phrases, you will need to regenerate
phrases.h, so that everything works correctly.  To recreate, just run
.BI "make phrases.h"
from the command line.
.SH SIGNAL HANDLING
Suck accepts two signals, defined in
.I suck_config.h.
The first signal (default SIGTERM) will cause Suck to finish downloading the
current article, batch up whatever articles were downloaded, and
exit, without an error.

The second signal (default SIGUSR1) will cause suck to use the pause values defined with
the -w option (see above).

.SH EXIT CODES
Suck will exit with the following return codes:
.RS
0 = success
.RE
.RS
1 = no articles available for download.
.RE
.RS
2 = suck got an unexpected answer to a command it issued to the remote server.
.RE
.RS
3 = the -V option was used.
.RE
.RS
4 = suck was unable to perform NNTP authorization with the remote server.
.RE
.RS
-1 = general error.
.RE
.SH HISTORY
.RS
Original Author - Tim Smith (unknown address)
.RE
.RS
Maintainers - 
.RE
.RS
March 1995 - Sven Goldt (goldt@math.tu-berlin.de)
.RE
.RS
July 1995  - Robert A. Yetman (boby@pixi.com)
.RE
.de R$
Revision \\$$3, \\$$4
..
.SH "SEE ALSO"
testhost(1), rpost(1), lpost(1).
