.\" $Revision: 1.5 $
.TH RPOST 1
.SH NAME
rpost - post an article to an NNTP news server
.SH SYNOPSIS
.I rpost
[
.BI
hostname
]
[
.BI @filename
]
[
.BI -s\ |\ -S
filename
]
[
.BI -e\ |\ -E
filename
]
[
.BI -b
batchfile
]
[
.BI -p
prefix
]
[
.BI -d
]
[
.BI \-U
userid
]
[
.BI \-P
password
]
[
.BI \-M
]
[
.BI \-N
port_number
]
[
.BI \-l
phrase_file
]
[
.BI -f
filter $$o=<outfile> filter_arg1 ...
]
.SH DESCRIPTION
.I Rpost
will post one or more articles, specified by
.I hostname.
If hostname is not specified, rpost will use the environment
variable
.BI NNTPSERVER.
.SH Generic Options

.BI \-s | \-S
filename

These options will send all status messages (normally displayed on stdout), to
an alternate file.  The lower case version, -s, will send the status messages
to the compiled-in default defined in suck_config.h.  The default is /dev/null,
so no status messages will be displayed.  The upper case version, -S, requires
the filename parameter.  All status messages will then be sent to this file.

.BI \-e | \-E
filename

These options will send all error messages (normally displayed on stderr), to 
an alternate file.  The lower case version, -e, will send the error messages
to the compiled-in default defined in suck_config.h.  The default is suck.errlog.
The upper case version, -E, requires the filename parameter.  All error messages
will then be sent to this file.

.BI \-U
userid
.BI \-P
password

These two options let you specify a userid and password, if your NNTP server
requires them.

.BI \-M

This option tells rpost to send the "mode reader" command to the remote
server.  If you get an invalid command message from rpost immediately
after the welcome announcement, then try this option.

.BI \-N
port_number

This option tells rpost to use an alternate NNRP port number when connecting
to the host, instead of the default port number, 119.

.BI \@filename 

This option tells rpost to read other options from a file in addition to the
commandline.

\-l phrase_file

This option tells rpost to load in an alternate phrase file, instead of using
the built-in messages.  This allows you to have rpost print phrases in another
language, or to allow you to customize the messages without re-building.
See the "FOREIGN LANGUAGE PHRASES" in suck.1 for more details.

.SH STDIN MODE
rpost

rpost hostname

rpost reads one article from stdin and sends it to the 
NNTP server. The article must have a header of at least two lines, namely
Newsgroups: and Subject: and a body (the article). Header and body
have to be seperated by a newline.  Rpost does not change the article
in any way.

Rpost uses the POST command to post your article, just like any standard
newsreader.  This is handy when using SLIP and PPP, since most providers
do not allow any other method to post articles (such as nntpsend or innxmit).
.SH BATCH MODE
.I rpost
.BI
hostname

.BI -b
batchfile
.BI -p
prefix
.BI -d
.BI -f
filter $$o=<outfile> filter_arg1 ...

-b batchfile

A listing of the articles to be posted.  This parameter is REQUIRED.
This file contains one article per line, with
the line being the path to the file containing the article. For
example:

.RS
-b /usr/spool/news/out.going/pixi
.RE

IF there are any problems uploading a specific message, a "failed" file
will be created.  It will be called "batchfile".fail, and contain the
line from this batchfile for the message(s) that did not successfully upload.
This file can be used to re-run the failed messages through rpost.  NOTE:
duplicate messages are NOT considered an error for the fail file.

-d 

If the upload of messages is successful, this option will cause rpost to
 delete the batchfile named in the -b option.
 
-p prefix

If the batchfile does not contain a full path, but rather
a partial path, this paramater must be specified.  This is useful
when the batch file is generated by another program.
For example, Inn lists the path in the out.going file relative 
to its base directory /usr/spool/news.  In that case just use:

.RS
 -p /usr/spool/news
.RE

-f filter $$o=<outfile> filter_arg1 filter_arg2 ...

In many cases, each article must be massaged before the 
remote NNTP will accept it.  This option lets you do that.
There are three required parameters with this:

$$o=<outfile>	- <outfile> is the name of the file produced by
your filter that will get uploaded to the remote NNTP server.
THIS IS NOT passed to your filter program.  This can be specified 
anywhere on the command line AFTER the -f filter argument, either before
the filter name, or after it.

filter - name of the program to call.  Whatever follows filter, EXCEPT
for the $$o, are arguments passed to the filter.

arg1 - The first argument to your filter program/script.  It most
likely will be $$i, which rpost fills in with the name of the article
that needs to be cleaned up.

arg2 ... - any additional args needed can be specified.

.PP
Let's clarify this a bit with an example.  Some NNTP servers don't
like to receive articles with the NNTP-Posting-Host filled in.
Create a short shell script to delete this from a file:

\-myscr--------------------------------------------

#!/bin/sh

sed -e "/^NNTP-Posting-Host/d" $1 > $2

\-end myscr----------------------------------------
.PP
Then call rpost like this:
.RS
rpost -b /usr/spool/news/out.going/pixi -f myscr \\$\\$o=/tmp/FILTERED_MSG \\$\\$i /tmp/FILTERED_MSG
.RE

Then, before each article is uploaded, myscr is called like such:
.RS
myscr infilename /tmp/FILTERED_MSG
.RE

After myscr has finished, rpost uploads the cleaned up article,
stored in /tmp/FILTERED_MSG, to the remote NNTP server.
.SH NOTE:
The $$o and $$i have to be escaped, using either the backslashes
as above, or with single quotes, to prevent the shell from
trying to interpret these as variables.  Failure to escape them will result
in rpost not working!

.SH WARNING:

Be very careful with what the filter program deletes from the article.  Deleting
the wrong line can have bad effects later on.  For example, do not delete the 
MSG-ID line, as this could cause a single message to be posted many times, depending
on the configuration of both the local and remote newserver. 

.SH RPOST ARGUMENT FILE
.PP
If you specify @filename on the command line, rpost will read from filename and
parse it for any args that you wish to pass to rpost.  You specify the
same arguments in this file as you do on the command line.  The arguments
can be on one line, or spread out among more than one line.  You may also
use comments.  Comments begin with '#' and go to the end of a line.  All
command line arguments override arguments in the file.  One advantage to
using the file instead of the command line, is that you don't have to
escape any special characters, such as $.

.RS
# Sample Argument file
.RE
.RS
-b batch # batch file option
.RE
.RS
-M	# use mode reader option
.RE

.SH EXIT VALUES
Rpost returns the following exit values:

.RS
0 = success
.RE
.RS
1 = error posting a message
.RE
.RS
2 = unable to do NNTP authorization with the remote server.
.RE
.RS
3 = unexpected answer to command when doing NNTP authorization.
.RE
.RS
-1 = other fatal error.
.RE

.de R$
This is revision \\$3, \\$4.
..
.SH "SEE ALSO"
suck(1), testhost(1), lpost(1).
