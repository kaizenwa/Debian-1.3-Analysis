.\" Traducción española por Simon J Mudd <sjmudd@redestb.es>
.\" y                     Abraham Nevado <nevado@redestb.es>
.\" 1 de diciembre de 1996 - Ultima modificación: 27 de enero de 1997
.\" (Esta página man requiere bastante más trabajo para terminar con una
.\"  buena traducción).
.\" $Revision: 1.3 $
.TH SUCK 1
.SH NOMBRE
suck - Baja un pequeño número de artículos de un servidor NNTP (respecto
al número de artículos que estos servidores manejan habitualmente),
evitando el comando NEWNEWS.
.SH SINOPSIS
.I suck
[
.BI
hostname
]
[
.BI @archivo
]
[
.BI \-V
]
[
.BI \-K
]
[
.BI \-H
]
[
.BI \-d[tmd]
dirname
]
[
.BI \-s\ |\ \-S
archivo
]
[
.BI \-e\ |\ \-E
archivo
]
[
.BI \-a
]
[
.BI \-m
]
[
.BI \-b[ir]
batchfile
]
[
.BI \-r
filesize
]
[
.BI  \-p
extensión
]
[
.BI \-U
userid
]
[
.BI \-P
clave
]
[
.BI \-c
]
[
.BI \-M
]
[
.BI \-N
número_puerto
]
[
.BI \-W
tiempo_pausa pausa_número_mensajes
]
[
.BI \-k
]
[
.BI \-l
archive_de_frases
]

Opciones valídas en todos los modos

\-V

Esta opción hará que suck imprima la versión del programa y luego termine.

\-s | \-S archivo

Estas opciones enviarán todos los mensajes de estado (normalmente
escritos a stdout), a un archivo alternativo.  La opción en minúsculas,
-s, enviará los mensajes de estado al archivo compilado por defecto en
suck_config.h.  Por defecto es /dev/null, por eso no se escribirá ningún
mensaje en pantalla.  La opción en mayúsculas, -S, requiere el parámetro
de archivo.  Todos los mensajes de estado serán enviados a ese archivo.

\-e | \-E archivo

Estas opciones enviarán todos los mensajes de error (normalmente enviados
a stderr), a un archivo alternativo.  La opción en minúsculas, -e, enviará
los mensajes de error al archivo compilado por defecto en suck_config.h.
Por defecto es suck.errlog.  La opción en mayúsculas, -E, requiere el
parámetro de archivo.  Todos los mensajes de error serán enviados a
ese archivo.

\-a

Esta opción obliga a suck a "agrupar" todos los articulos bajados,
incluso si suck aborta por cualquier razón.  Al no usar esta opción,
suck sólo "agrupará" los artículos si termina con éxito o si se le
interrumpe por una señal (ver abajo).

\-N número_puerto

Esta opción indica a suck un número de puerto NNRP cuando se conecta al
host, en lugar de usar el predeterminado, 119.

\@archivo 

Esta opción le indica a suck a leer, a parte de los comandos en la línea de
comandos, las demás opciones de un archivo.

\-dt nombre_directorio

\-dm nombre_directorio

\-dd nombre_directorio

Especificar el lugar de los varios archivos utilizados por suck.

\-dt nombre_directorio = directorio para los archivos temporales creados
por suck (suck.newrc, suck.sort, suck.restart, suck.killlog).

\-dm nombre_directorio = directorio para guardar los artículos creados
en modo "Multifile" o modo "batch"

\-dd nombre_directorio = directorio para los archivos de datos utilizados
por suck (sucknewsrc suckkillfile suckothermsgs)

\-p extensión

Esta extensión será añadida a todos los archivos para que se pueda tener
feeds de multiples hosts.  Por ejemplo, si se especifica -p .dummy,
entonces suck busca sucknewsrc.dummy, suckkillfile.dummy, etc, y crea
sus archivos temporales con la misma extensión.  Esto permite el uso de
mulitples archivos sucknewsrc, uno para cada host.

\-K
	Esta opción hará que suck no compruebe el "killfile".

\-L
	Esta opción le indica a suck a NO guardar los mensajes borrados a suck.killog.

\-H
	Esta opción hará que suck no compruebe el archivo history.

\-U userid

\-P clave

Estas dos opciones permiten especificar una identificación de usuario
y una clave, si el servidor NNTP lo requiere.

\-c

Si se especifica esta opción, suck terminará "cleaning-up".  Esto incluye:
.RS
1. Mover el sucknewsrc al sucknewsrc.old
.RE
.RS
2. Mover el suck.newrc al sucknewsrc
.RE
.RS
3. Borrar suck.sorted y suckothermsgs.
.RE

\-M

Esta opción le indica a suck mandar el comando "mode reader" al servidor
remoto.  Si obtienes un mensaje de comando inválido inmediatemente
después del mensaje de bienvenida, prueba esta opción.

\-W pause_time pause_nr_msgs

Esta opción le indica a suck pausar entre la bajada de los mensajes.
Es necesario especificar la duración de la pausa (en segundos), y cada
cuantos mensajes hay que pausar.  P.Ej.: \-W 10 100 le indicará a suck
pausar cada 100 mensajes durante 10 segundos.  ¿Por qué se necesita
esta opción?  Suck puede provocar una carga importante en un servidor
remoto, y esta opción permite dejar el servidor "descansar un rato".

\-w pause_timer pause_nr_msgs

Esta opción permite lentizar suck mientras baja los mensajes.  Al mandar
a suck una señal predeterminado (por defecto SIGUSR1, ver suck_config.h),
suck cambiará las opciones de pausa por defecto (si estaban especificados
con la opción -W), con los valores de esta opción.  Por ejemplo, se puede
ejecutar suck con -w 2 2, y al mandarle a suck la señal SIGUSR1 (con kill),
suck pausará 2 segundos entre cada 2 mensajes, dejandole al servidor
"descansar".  Al mandar de nuevo una señal SIGUSR1, suck reestablecerá
los valores anteriores.

\-k

Esta opción es para el servidor NO-standard msnews.microsoft.com, que
usa un valor de retorno diferente para el comando XHDR que se usa para
conseguir la lista de artículos que se va a bajar.  El valor estandard
es 221, pero Microsoft usa 224.  Esta opción le indica a suck a aceptar
este valor en vez de 221.

\-l archivo_de_frases

Esta opción le indica a suck a cargar un archivo alternativo de frases, en
vez de usar los mensajes preestablecidos.  Esto permite el uso de suck
en otros idiomas, o el uso de mensajes especiales, sin tener la necesidad
de recompilar el programa.  Ver abajo.

.SH DESCRIPCION

.SH MODO 1 \- modo stdout
.RS
%suck
.RE
.RS
%suck myhost.com
.RE
.PP
Suck saca los artículos de noticias de un servidor NNTP y los manda a
stdout. Suck acepta como argumento el nombee de un servidor NNTP o si
no se da un argumento utilizará el variable del entorno(?) NNTPSERVER.
Se puede enviar los artículos a un archivo, o comprimirlos a la vez con
"suck server.domain | gzip \-9 > output.gz".  Ahora puedes elegir lo
que quieres hacer con los artículos.  Quizá ya tengas el archivo en tu
propia máquina, o quizá todavía has de transferir el archivo a tu
propia máquina.
.SH MODO 2 \- Modo Multifile
.RS
%suck \-m
.RE
.RS
%suck myhost.com \-m
.RE
.PP
Suck saca los artículos de un servidor NNTP y guarda cada artículo en
un archivo separado.  Se guardan estos archivos en el directorio que se
especifica en suck_config.h o con la opción \-dm.
.SH MODO 3 \- Modo Batch
.RS
%suck \-b[ir] batchfile
.RE
.RS
%suck myhost.com \-b[ir] batchfile
.RE
.PP
Suck sacará artículos de noticias de un servidor NNTP y los guardará en
archivos, uno para cada artículo (modo Multifile).  El lugar de los
archivos depende del define en suck_config.h y la opción \-dm de la
línea de comando.  Una vez terminado de bajar los artículos, suck creará
un archivo batch, que se puede procesar con innxmit o con rnews.

\-bi \- crea un archivo "batch" para innxmit.  Se guardan los artículos
sin cambios, y se crea un archivo "batch" con una lista completa del
nombre completo de cada archivo, cada uno representa un artículo.
Entonces se puede llamar a innxmit:

.RS
%innxmit localhost batchfile
.RE

\-br \- crea un archivo "batch" para rnews.  Se juntan los articulos
con el seperador de articulos #!rnews size entre cada uno.
Se puede usar este archivo para darle los articulos a rnews:

.RS
%rnews \-S localhost batchfile
.RE

\-r filesize especifica el tamaño máximo para el archivo batch para rnews.
Esta opción solo tiene sentido cuando se usa con -br arriba.  Esta opción
te permite especificar el tamaño máximo de un archivo para mandar a rnews.
Cuando se llega a este límite, se crea un nuevo archivo batch DESPUES de
escribir el artículo actual al archivo antiguo.  El segundo y sucesivo
archivos reciben un número de secuencia adicional añadido al nombre de
archivo especificado con -br.  Nota, como tiene que terminar de escribir
el actual artículo, al llegar al límite, el tamaño máximo del archivo
es sólo aproximado.

.SH FICHERO DE ARGUMENTOS DE SUCK
.PP
Si se específica un @archivo en la línea de comandos, suck leerá del
archivo y buscará más argumentos que se quieran pasar a suck.  Se debe
especificar los argumentos en el archivo de la misma manera que se puede
hacer en la línea de comandos.  Los argumentos pueden estar en una línea
o separados en en la misma línea.  También se puede usar comentarios.
Los comentarios empiezan con '#' y terminan al final de la línea.
Todos los parámetros en la línea de comandos tienen prioridad sobre los
parámetros en el archivo.

.RS
# Archivo de Argumentos sencillo
.RE
.RS
-bi batch # opción de archivo "batch"
.RE
.RS
-M	# usa la opción de "mode reader"
.RE

.SH SUCKNEWSRC
.PP
Suck busca un archivo
.I sucknewsrc
para ver cuales son los artículos que buscas y cuales ya has recibido.
El formato es muy sencillo y consiste en una línea para cada grupo
de news.  La línea contiene de 2 ó 3 campos.  El primer campo es el nombre
del grupo.  El siguiente campo consiste en el número de artículo más alto
cuando se bajaron los artículos de este grupo la última vez.  El tercer
campo, que es opcional, limita el número de articulos que se pueden bajar
en un momento dado.  Se separan los campos con un espacio.

.RS
comp.os.linux.announce 1 [ 100 ]
.RE
.PP
Cuando suck termina, crea un archivo suck.newrc que contiene el nuevo
sucknewsrc con los números de artículos actualizados.
.PP
Para añadir un nuevo grupo de news, solamente es necesario añadir
una línea en sucknewsrc, con el nombre del nuevo grupo de news, y el
número \-1 (o cualquier número menor que 0).  Suck intentará bajar los X
articulos más recientes para este grupo.  Por ejemplo, un -100 causaría
a suck a bajar los 100 artículos más actuales para este grupo.
.PP
Para decirle a suck que ignore un newsgroup, se mete un # como primer
caracter de la línea.

.SH SUCKKILLFILE e GROUP KEEP/KILLFILES
Para usar las rutinas de killfile/keepfile, dejar sin comentarios la línea
.I #define KILLFILE
en 
.I suck_config.h.
Entonces, si 
.I suckkillfile
existe,  se mirarán todos las cabaceras de los artículos y se bajarán
los artículos basado en las reglas de los parámetros en los archivos.
Todo artículo que no se baja tendrá su cabacera escrita en el archivo
.I suck.killlog
salvo que espécifiques la opción
.I -L
en la línea de comandos y entonces no se escribirán las cabeceras.
Se puede entonces bajar estas artículos si se mete su "Message-ID" en el
archivo suckothermsgs.
.PP
Aquí se explica el funcionamiento del paquete keep/delete.  Se compara cada
artículo con el archivo principal (suckkillfile).  Si no se quita el artículo
se lee la línea del grupo.  Si existe un archivo para este grupo, entonces
se comprueba el artículo para este grupo.  Si hay un "match" con el keepfile,
entonces se marca para que sea guardado, si no se lo marca para borrar.  
Si hay un "match" con el deletefile, entonces se 
marca para ser borrado, si no se guarda el artículo.  Esto se
repite para cada grupo en la línea de grupos.  Un problema potencial es cuando
se marca un artículo para guardarlo Y para borrarlo.  Se decide según el
"tie-breaker", definido en suck_config.h.  Si esta definido el "tie-breaker"
entonces se guarda el artículo, si no se borra el artículo.
.SH
PARAMETROS
.RS
LOWLINES=#######
.RE
.RS
HILINES=#######
.RE
.RS
PATH=xxxxx,yyyyy
.RE
.RS
FROM=xxxxx,yyyyy
.RE
.RS
SUBJECT=xxxxxx,yyyy
.RE
.RS
NNTPHOST=xxxxxxx,yyyyy
.RE
.RS
QUOTE=c
.RE
.RS
GROUP=keep nombredegrupo archivo O
GROUP=delete nombredegrupo archivo
.RE
.RS
NRGRPS=########
.RE
.RS
PROGRAM=pathname
.RE
.SH Parametros de los archivos KILL/KEEP
.PP
.I HILINES=
Selecciona cualquier artículo más largo que el número de líneas especificado.
.PP
.I LOWLINES=
Selecciona cualquier artículo más corto que el número de líneas especificado.
.PP
.I QUOTE=
Este especifica la cadena.  Por defecto es un ".  Debe estar en la primera
línea del archivo; de lo contrario se ignorará.
.PP
.I PATH=
.I FROM=
.I SUBJECT= 
.I NNTPHOST= 
Estas líneas permiten seleccionar un artículo basado en una de las líneas
de cabacera.  Se pueden especificar múltiples "items", separando cada uno
con una coma.  Si el argumento empieza con el carácter ", definido arriba,
entonces se compara la cadena exactamente, si no, se compara sin distinguir
entre minusculas y mayusculas.  Si se compila a suck con USE_REGEX (ver
suck_config.h), entonces estos argumentos pueden ser "expresiones regulares"
del tipo POSIX.  La coma, como separador puede ser cambiada con las otras opciones *_SEP de abajo.
.PP
.I GROUP=
Esta línea permite especificar borrar o seleccionar los parametros basados
en cada grupo.  Hay 3 partes de cada línea.  La primera es "keep" (mantener),
o "delete" (borrar).  Si es keep, entonces solamente se guardan los artículos
cuyos parámetros sean iguales a los del archivo del grupo.  Si es "delete",
no se guardarán estos artículos.  El segundo parámetro es el nombre completo
del grupo, para comprobar el fichero del grupo, y el tercer parametro
especifica el archivo que tiene los parámetros para comparar con cada
artículo.
.PP
.I NRGRPS=
Esta línea seleccionará cada artículo que tiene más del número de grupos
especificados.  Típicamente se usa en los archivos de grupos para evitar
los mensajes que estén enviados a un número elevado de grupos (spamming),
como los mensajes que prometen hacerte rico rapidamente.
.PP
.I PATH_SEP= SUBJECT_SEP= FROM_SEP= NNTPHOST_SEP=
Estos parametros permiten cambiar el separador de parametros por defecto
(una coma) para las opciones PATH, SUBJECT, FROM, y NNTPHOST de arriba.  El
cambio es válido solamente para las líneas que siguen a estos en el fichero
"kill".
.PP
.I PROGRAM=
Esta línea permite a suck llamar un programa externo para controlar cada
artículo.  Se puede especificar el número de argumentos que se estime
necesario en la línea de comandos.  Si esta línea existe en el suckkillfile
se ignorarán todas las demás.  Se pasan todas las líneas de cabacera del
artículo al programa externo, y este determina si se baja el artículo o no.
Así es como funciona.  Suck llamará al programa externo con fork(),
redireccionando stdin y stdout.  Suck pasará las líneas de cabacera a stdin,
esperando el resultado en stdout.  Aquí se muestra el flujo de datos para
cada artículo:
.PP
.RS
1. suck escribirá una cadena de 8 bytes, representando la longitud de la
cabacera, al stdin del programa externo.  La longitud esta en ASCII,
alineado a la izquierda y terminado con un "newline"
(por ejemplo: "1234    \\n").
.RE
.RS
2. entonces suck escribirá la cabacera al stdin del programa externo.
.RE
.RS
3. suck esperará una respuesta de 2 caracteres de stdout.  La respuesta es
"0\\n" o "1\\n" (NO ES CERO O UNO EN BINARIO, SINO CERO O UNO EN ASCII).
Si el código de retorno es cero suck bajará el artículo, si no no lo bajará.
.RE
.RS
4. Cuando no quedan artículos, se escribirá una longitud de cero (de nuevo
en ASCII "0      \\n").  Entonces suck esperará que el programa externo termine
antes de continuar.  El programa externo puede hacer cualquier cosa que
sea necesaria antes de terminar, y luego debe terminar.  Nota, suck no seguirá
funcionando hasta que el programa externo haya terminado.
.RE
	
.PP
Todos los parámetros son validos en el archivo principal y los archivos de
grupos, con la excepción de las líneas GROUP y PROGRAM.  Estas opciones
son válidas solamente en el archivo principal.
.SH SUCKOTHERMSGS
Si
.I suckothermsgs
existe, debe contener una lista de Message-ID, uno por línea, incluyendo los
<>.  Se procederá a bajar cada artículo en este archivo a parte de los
generados procesando el archivo
.IR sucknewsrc .
Se puede usar para bajara artículos en otros grupos, o para bajar un
artículo eliminado por las rutinas de borrar artículos.  Estos artículos
.B NO ESTAN
procesados con las rutinas de borrar artículos.
.SH FRASES EN IDIOMAS EXTRANJEROS
Si se especifica la opción
.B -l frases,
suck leerá un archivo alternativo de 
frases en otro lenguaje, y lo usará para todos sus mensajes de estado y de
error.  El archivo de frases contiene todos los mensajes usados por suck,
rpost y testhost, cada uno en una línea separada y envueltos en comillas.
Para generar un archivo sencillo de frases, ejecuta
.B make phrases
de la línea de comandos.  Esto creará "phrases.engl", que contiene una lista
de frases por defecto.  Editar este fichero para cambiar los frases de
inglés al idioma de su elección, pero asegurarse de mantener las frases
entre comillas.

Estas frases pueden contener variables para imprimir valores pasados desde
el programa, como por ejemplo el hostname.  Las variables están designadas
con %vN% donde N es una secuencia por frases.  Estas variables pueden
existir en cualquier orden dentro de la frase, por ejemplo,
.RS
"Hello, %v1%, welcome to %v2%"     o
.RE
.RS
"Welcome to %v2%, %v1%"
.RE
son frases válidos.  Los frases pueden contener,  \\n, \\r, o
\\t para imprimir newline, carriage return,  or  tab,  respectiviamente.
.PP
Si se modifica el código fuente, y se añade una frase nueva, será necesario 
regenerar phrases.h, para que todo funcione correctamente.  Para recrearlo,
ejecuta
.B make phrases.h
desde la línea de comandos.
.SH GESTION DE SEÑALES
Suck acepta dos señales, definidas en
.I suck_config.h.
La primera señal (por defecto SIGTERM) hará que suck termine de bajar el
actual artículo, metiendolo en el archivo batch, y terminará sin error.

La segunda señal (por defecto SIGUSR1) hará que suck use los valores 
definidos con la opcion -w (ver arriba).
.SH VALORES DE RETORNO
Suck terminará con los siguientes valores de retorno:
.RS
0 = éxito
.RE
.RS
1 = no había artículos disponibles para bajar del servidor.
.RE
.RS
2 = suck recibió una respuesta no esperada a un comando que envió al servidor remoto.
.RE
.RS
3 = se usó la ocpción -V.
.RE
.RS
4 = suck no ha podido hacer la autorización NNTP con el servidor remoto.
.RE
.RS
-1 = error general.
.RE
.SH HISTORIA
.RS
Autor Original - Tim Smith (dirección desconocida)
.RE
.RS
Mantenadores -
.RE
.RS
Marzo 1995 - Sven Goldt (goldt@math.tu-berlin.de)
.RE
.RS
Julio 1995  - Robert A. Yetman (boby@pixi.com)
.RE
.de R$
Revisión \\$$3, \\$$4
..
.SH "VER TAMBIEN"
testhost(1), rpost(1), lpost(1).
