This is Info file time.info, produced by Makeinfo-1.54 from the input
file /home/gd/gnu/time/time.texi.

   This file documents the the GNU `time' command for running programs
and summarizing the system resources they use.

   Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: time.info,  Node: Top,  Prev: (dir),  Up: (dir)

   This file documents the the GNU `time' command for running programs
and summarizing the system resources they use.  This is edition 1.6,
for version 1.6.

* Menu:

* time::                Introduction to measuring program resource use.
* Invoking time::	Running the `time' command, and its options.
* Output format::	Selecting the information reported by `time'.
* Examples::		Examples of using `time'.
* Accuracy::		Limitations on the accuracy of `time' output.


File: time.info,  Node: time,  Next: Invoking time,  Up: Top

Measuring program resource use
******************************

   The `time' command runs another program, then displays information
about the resources used by that program, collected by the system while
the program was running.  You can select which information is reported
and the format in which it is shown (*note Output format::.), or have
`time' save the information in a file instead of display it on the
screen (*note Invoking time::.).

   The resources that `time' can report on fall into the general
categories of time, memory, I/O, and IPC calls.  Some systems do not
provide much information about program resource use; `time' reports
unavailable information as zero values (*note Accuracy::.).

   Here is an example of using `time' to measure the time and other
resources used by running the program `doit', which is given the
arguments `foo' and `3':

     time doit foo 3

   Mail suggestions and bug reports for GNU `time' to
`bug-gnu-utils@prep.ai.mit.edu'.

* Menu:

* Invoking time::	Running the `time' command, and its options.
* Output format::	Selecting the information reported by `time'.
* Examples::		Examples of using `time'.
* Accuracy::		Limitations on the accuracy of `time' output.


File: time.info,  Node: Invoking time,  Next: Output format,  Prev: time,  Up: time

Using the `time' command
========================

   The format of the `time' command is:

     time [-apvV] [-f FORMAT] [-o FILE] [--append] [--verbose]
     [--portability] [--format=FORMAT] [--output=FILE]
     [--version] [--help] COMMAND [ARG...]

   `time' runs the program COMMAND, with any given arguments ARG....
When COMMAND finishes, `time' displays information about resources used
by COMMAND (on the standard error output, by default).  If COMMAND
exits with non-zero status, `time' displays a warning message and the
exit status.

   `time' determines which information to display about the resources
used by the COMMAND from a "format string" (*note Output format::.).
If no format is specified on the command line, but the `TIME'
environment variable is set, its value is used as the format.
Otherwise, a default format built into `time' is used (*note Output
format::.).

   Options to `time' must appear on the command line before COMMAND.
Anything on the command line after COMMAND is passed as arguments to
COMMAND.

`-o FILE'
`--output=FILE'
     Write the resource use statistics to FILE instead of to the
     standard error stream.  By default, this *overwrites* the file,
     destroying the file's previous contents.  This option is useful for
     collecting information on interactive programs and programs that
     produce output on the standard error stream.

`-a'
`--append'
     *Append* the resource use information to the output file instead
     of overwriting it.  This option is only useful with the `-o' or
     `--output' option.

`-f FORMAT'
`--format=FORMAT'
     Use FORMAT as the format string that controls the output of
     `time'.  *Note Output format::, for more information.

`--help'
     Print a summary of the command line options to `time' and exit.

`-p'
`--portability'
     Use the following format string, for conformance with POSIX
     standard 1003.2:

          real %e
          user %U
          sys %S

`-v'
`--verbose'
     Use the built-in verbose format, which displays each available
     piece of information on the program's resource use on its own
     line, with an English description of its meaning.

`-V'
`--version'
     Print the version number of `time' and exit.


File: time.info,  Node: Output format,  Next: Examples,  Prev: Invoking time,  Up: time

Formatting the output
=====================

   The "format string" controls the contents of the `time' output.  The
format string can be set using the `-f' or `--format', `-v' or
`--verbose', or `-p' or `--portability' options.  If they are not
given, but the `TIME' environment variable is set, its value is used as
the format string.  Otherwise, a built-in default format is used.  The
default format is:

     %Uuser %Ssystem %Eelapsed %PCPU (%Xtext+%Ddata %Mmax)k
     %Iinputs+%Ooutputs (%Fmajor+%Rminor)pagefaults %Wswaps

   The format string usually consists of "resource specifiers"
interspersed with plain text.  A percent sign (`%') in the format
string causes the following character to be interpreted as a resource
specifier, which is similar to the formatting characters in the C
`printf' function.

   A backslash (`\') introduces a "backslash escape", which is
translated into a single printing character upon output.  `\t' outputs
a tab character, `\n' outputs a newline, and `\\' outputs a backslash.
A backslash followed by any other character outputs a question mark
(`?') followed by a backslash, to indicate that an invalid backslash
escape was given.

   Other text in the format string is copied verbatim to the output.
`time' always prints a newline after printing the resource use
information, so normally format strings do not end with a newline
character (or `\n').

   There are many resource specifications.  Not all resources are
measured by all versions of Unix, so some of the values might be
reported as zero.  Any character following a percent sign that is not
listed in the table below causes a question mark (`?') to be output,
followed by that character, to indicate that an invalid resource
specifier was given.

The resource specifiers, which are a superset of those recognized by the
`tcsh' builtin `time' command, are:

`%'
     A literal `%'.

`C'
     Name and command line arguments of the command being timed.

`D'
     Average size of the process's unshared data area, in Kilobytes.

`E'
     Elapsed real (wall clock) time used by the process, in
     [hours:]minutes:seconds.

`F'
     Number of major, or I/O-requiring, page faults that occurred while
     the process was running.  These are faults where the page has
     actually migrated out of primary memory.

`I'
     Number of file system inputs by the process.

`K'
     Average total (data+stack+text) memory use of the process, in
     Kilobytes.

`M'
     Maximum resident set size of the process during its lifetime, in
     Kilobytes.

`O'
     Number of file system outputs by the process.

`P'
     Percentage of the CPU that this job got.  This is just user +
     system times divied by the total running time.

`R'
     Number of minor, or recoverable, page faults.  These are pages
     that are not valid (so they fault) but which have not yet been
     claimed by other virtual pages.  Thus the data in the page is
     still valid but the system tables must be updated.

`S'
     Total number of CPU-seconds used by the system on behalf of the
     process (in kernel mode), in seconds.

`U'
     Total number of CPU-seconds that the process used directly (in user
     mode), in seconds.

`W'
     Number of times the process was swapped out of main memory.

`X'
     Average amount of shared text in the process, in Kilobytes.

`Z'
     System's page size, in bytes.  This is a per-system constant, but
     varies between systems.

`c'
     Number of times the process was context-switched involuntarily
     (because the time slice expired).

`e'
     Elapsed real (wall clock) time used by the process, in seconds.

`k'
     Number of signals delivered to the process.

`p'
     Average unshared stack size of the process, in Kilobytes.

`r'
     Number of socket messages received by the process.

`s'
     Number of socket messages sent by the process.

`t'
     Average resident set size of the process, in Kilobytes.

`w'
     Number of times that the program was context-switched voluntarily,
     for instance while waiting for an I/O operation to complete.

`x'
     Exit status of the command.


File: time.info,  Node: Examples,  Next: Accuracy,  Prev: Output format,  Up: time

Examples
========

To run the command `wc /etc/hosts' and show the default information:

     time wc /etc/hosts

To run the command `ls -Fs' and show just the user, system, and total
time:

     time -f "\t%E real,\t%U user,\t%S sys" ls -Fs

To edit the file BORK and have `time' append the elapsed time and
number of signals to the file `log', reading the format string from the
environment variable `TIME':

     export TIME="\t%E,\t%k" # If using bash or ksh
     setenv TIME "\t%E,\t%k" # If using csh or tcsh
     time -a -o log emacs bork


File: time.info,  Node: Accuracy,  Prev: Examples,  Up: time

Accuracy
========

   The elapsed time is not collected atomically with the execution of
the program; as a result, in bizarre circumstances (if the `time'
command gets stopped or swapped out in between when the program being
timed exits and when `time' calculates how long it took to run), it
could be much larger than the actual execution time.

   When the running time of a command is very nearly zero, some values
(e.g., the percentage of CPU used) may be reported as either zero (which
is wrong) or a question mark.

   Most information shown by `time' is derived from the `wait3' system
call.  The numbers are only as good as those returned by `wait3'.  On
systems that do not have a `wait3' call that returns status
information, the `times' system call is used instead.  However, it
provides much less information than `wait3', so on those systems `time'
reports the majority of the resources as zero.

   The `%I' and `%O' values are allegedly only "real" input and output
and do not include those supplied by caching devices.  The meaning of
"real" I/O reported by `%I' and `%O' may be muddled for workstations,
especially diskless ones.



Tag Table:
Node: Top950
Node: time1474
Node: Invoking time2754
Node: Output format5086
Node: Examples9309
Node: Accuracy9942

End Tag Table
