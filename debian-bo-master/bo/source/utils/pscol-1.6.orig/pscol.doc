Recently, the procps package released a version of "ps" and "top" that 
supports color.  The variable format is hard to work with.  Especially if 
you have about 100 uids that you have different colors for (well maybe 
NOT 100, but too many to work with...).  I know, I help run a BBS on the 
internet and watching people (one color for people I can trust, one for 
people I can't, one for root, one for the owner's name, etc).  This 
becomes one HUGE annoyance.  I did notice, PS and TOP do not take "user" 
names instead of the UID.  Yes, the uid is direct to the point, but why 
waist my time trying to figure out WHO has what ID?

Now (you're actually this far in reading?), this utility will simplify 
this.  It will read and/or write a file for you.  When it writes the 
file, it takes the PS_COLORS/TOP_COLORS variables and dumps them to a 
file of your choosing or to stdout.  It will convert the uids to names 
(unless you don't want any conversion).  When it reads the file, it will 
write the variable that was converted from the file to stdout (currently 
I do not know of a way to change the parents environment, so you'll have 
to use the eval `<progname and params>` format to use it)

usage:  do pscol -h...

from the notes:  to actually set the env vars, you have to do the eval ``
or VAR=`` way..

ex:
eval `pscol`       this is read the file, and output is executed.
PS_COLORS=`pscol -sp`    this sets PS_COLORS to the PS part of the file

about the only time you don't use `` is when you're creating a file from
the environment.

if you do simply `pscol` without the eval, you probably won't get color,
it's not a bug in the program, it's in the shell

If you're wondering about the "converting uid to +", all this does is make
it so that it can replace the + with the current uid...  You may be
wondering why, but the reason is simple.  I had it setup on my system like
this (before this program was written):
PS_COLORS="2,$UID,01;34;40%...%...%..."
There's NO way to do anything like this in v1.0, but in 1.2+, you can do
it.  just put in the config + instead of the username.

Bugs: Yes, there's bugs...  One isn't really a bug, it's a missing 
feature...  This program, when converting a uid to a name (and the name 
is all numbers) will not make any note of it at all.  When you try to 
convert the file back to the variable, it will think the the uid is 
really a username and ignore any conversions.  Hence, PS/TOP will take it 
as an invalid user (if there is no such uid in /etc/passwd) and ignore 
it.  when converting back to the file, this program will see it the same 
way and write it back to the file.  The only way this will be fixed is if 
anyone has a person with a username completely made up of numbers and 
emails me about it...
One more: This doc file could be a lot better =)

Email: wakko@kite.preferred.com
       wakko@gwbbs.northeast.net
       wakko@tausq.ithaca.ny.us
       wakko@ally-ance.com (forwarded to kite)
       wakko@tc1.static.usit.net (my home computer, be careful, this
                                  computer isn't ALWAYS up on the net!)
       wakko@usit.net (don't bother, mail bounces <g>)

I also accept incoming ytalks if you can find my computer on the net..  
fortunatly, I'm on a static IP.  I also have the hostname 
ani.bristol.tn.us registered to my IP...  Mail doesn't work to this 
hostname tho =( <sniffle>

Config: config.h
PASSWD          location of the system passwd file (mainly for v1.0 testing)
ETC_FILE        want a diff filename than /etc/pscolor?
PERSONAL_FILE   This is for users, it looks for ~/<this file> first
NEW_FILE_HEADER this goes at the beginning of any file this program creates

PSCOLORS file:
there's 3 files.  ~/.pscolors, /etc/pscolors, and user specified.
the format is simple, for each line specifing color:
type,data,color   (where data is whatever goes with type, see below)

blank lines are ignored, everything after the first white space between #
and the ending of the line is ignored

The header that tells the program which colors are for what are [TOP] and
[PS]

the color is simple, you use either the ansi color or 4dos style
colorization:
01 = bright
04 = underscore  (not available in 4dos style)
05 = blink
07 = reverse     (not available in 4dos style)
08 = concealed   (not available in 4dos style)

           black red green yellow blue magenta cyan white
foreground  30   31    32    33    34     35    36    37
background  40   41    42    43    44     45    46    47

If using 4dos style, I only read the first 3 characters of each.
Note, to use brown, you use yellow, for yellow, use bright yellow.  This
is NOT a bug in the program, this has to do with the way the video cards
were designed.

type     data         desc
1/unk    x            Unknown
2/user   uid/name/+   colorize process owned by user (+ for cur UID)
3/state  char state   colorize process with this state
4/mem    % mem        colorize process using more than x amount of mem
5/cpu    % cpu        same as 4, but for cpu time
6/size   size         colorize process larger than size K
7/tty    tty (char 4) colorize process with controlling tty (segs ps)

if you want TOP to = PS colors use:
[TOP]
=PS

for PS to = top:
[PS]
=TOP

Note, if you have your config file with like this:
[TOP]
=PS

[PS]
=TOP

Nothing will happen...

ex:

#
# sample pscol config
#
[PS]
user,root,bri yel on bla	# show root as bright yellow
user,+,bri mag on bla		# show my processes
size,400,bri red on bla		# show a process that's 400k or more in size
mem,10,yel on bla		# show a process that's eating more than 10% mem
cpu,20,blu on bla		# show a process that's eating more than 20% cpu
state,Z,gre on bla		# show zombied processes
tty,p0,bri cya on bla		# show processes that are on ttyp0

[TOP]
=PS


HISTORY:
v1.6: Small bug fix...  state was misspelled and it was looking for stat.

v1.5: There was a small bug when creating a file with specified file.  It
      may not matter to anyone, but if you did something like:
      pscol -c -pscolors   (to write a file called -pscolors)
      the program wouldn't work...  to fix that, I changed it so that you
      use -f <filename> to specify a file..  it doesn't care if the
      filename is a - or not (careful, you may give a parameter as a file)
      The original purpose of this program was to have a file to make the
      PS/TOP_COLORS env vars from a file (and convert the uid's to names)
      It was still difficult to understand what 2, 3, and soforth meant,
      and you needed to know ansi color codes for the color values.  This
      has changed, now you can give a line like this:
      user,root,bri red on bla
      and it will convert it to: 2,0,01;31;40 and place it in the
      environment.  As with the last 2 versions, I added switches to turn
      these features off (all are on by default). 
      Made the pscol.doc a little more up todate.  Made the help in the
      program easier to read (a little).
      removed check for suid/sgid, caused problems.

v1.2: Added the "+" for the username in the pscolor file.  + is replaced by
      the users UID if setting the environment.  If creating the file, it
      will (unless told not to) convert the current uid to a + instead of
      the name.

      Cleaned out useless commented out code.  This was for testing and I
      no longer need this in my code anymore.

v1.0: First release of pscol.

TODO: Maybe set it so if you have top = ps + a few more colors, it will
      work, currently if "=PS" is the first thing under TOP, top
      automatically = ps with nothing else added.
