
inb is a quick little hack that reads an i/o port and dumps the value
in hex and binary.

I wrote this because I always find that there are times when you
just want to read an i/o port, and using dd on /dev/port is risky
to plain-insanity. (Reason: some dd binaries read over regions
even when excluded via a "skip=" specification!)

		************** WARNING: **************

	Reading i/o ports of unknown hardware devices can be risky
	in that it may cause your machine to lock up.

		**************************************

The i/o port to be read must be above 0x100, as ports below 0x100 are
typically reserved for on-motherboard hardware, and you *really* don't
want to be messing with them.

ELF and a.out binaries are in ./bin-elf and ./bin-a.out repectively.
You need to be root for the iopl() call that allows access to the
i/o ports. The source is in ./src (Whoa, what a surprise...)

The following is sample output from the program. In this case, it
is used to read the 4 byte EISA ID of an EISA card in EISA slot #1.

Paul.

---------------------- sample output ------------------------

# inb 0x1c80
Port 0x1c80 has value 0x5 (00000101).
# inb 0x1c81
Port 0x1c81 has value 0xa9 (10101001).
# inb 0x1c82
Port 0x1c82 has value 0x70 (01110000).
# inb 0x1c83
Port 0x1c83 has value 0x1 (00000001).
#
-------------------------------------------------------------

0x05a9 == 00001   01101   01001 == a m i
Hence the EISA config file used for this card is "!ami7001.cfg"

