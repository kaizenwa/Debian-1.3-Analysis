Conversion of a Debmake 2.X package to 3.X
------------------------------------------

This only affects multi-binary packages. If your package just generates a
single binary then you do not need to do anything.

Avoiding the Conversion
-----------------------
If you just want to rebuild a package that has been done using the
multi-binary support in debmake 2.X then simply change the invocation of
"debstd" in the debian/rules file to use "debstdo" instead. debstdo is the
old 2.X debstd and will generate your package as it used to. debstdo is no
longer being maintained though. At some point you need to change to the 3.X
standard.

Changes:
--------

1. The configuration files for subpackages are no longer stored in

   debian/<package>/<controlfile>

   but are stored in a flat debian directory named

   debian/<package>.<controlfile>

   Note that the slash has been replaced with a dot.

2. The binary trees for subpackages are no longer build in

   debian/<package>/tmp

   but are now built in

   debian/<package>

   as customarily done before debmake arrived.

Steps:
------

1. Move all the controlfiles out of the directories debian/<package> into the
   debian directory renaming the files. Example:

   mv debian/mgetty-doc/files debian/mgetty.files

2. Remove all the directories in debian

   rm -rf `find debian/* -type d`

3. Edit the rules file

   CLEAN Target
   ============
   You need to change the "clean" target to erase all subdirectories in
   debian. You can simply paste parts of the rm statement give above into
   the rules file. Remove the code that removes the debian/*/tmp
   directories.

   BINARY Target
   =============
   You need to change the cleaning done at the beginning of the binary
   target in the same way as done for the clean target.

   Then change all references to debian/<package>/tmp to refer to
   debian/<package>

Christoph Lameter, January 29, 1997

