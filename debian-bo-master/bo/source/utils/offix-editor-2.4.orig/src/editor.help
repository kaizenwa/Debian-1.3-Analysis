MENUS:

    File:     Open			Load a textfile
    	      Insert			Insert a textfile at current cursor position
    	      Save			Save actual textfile
    	      Save as			Save actual textfile with different name
    	      Save Selection		Save actual selected text
    	      Print			Print actual textfile
    	      Print Selection		Print actual selected text
    	      Exit			Exit editor
    	      
    Edit:     Cut			Cut current selection in Cut_Buffer0
    	      Paste			Paste Cut_Buffer0 at current cursor position
    	      Shift Selection right	Indent current selection 1 Tab
    	      Shift Selection left	UnIndent current selection 1 Tab
    	     
    Jump:     Line			Goto linenumber
    	      Begin			Goto textbeginning
    	      End			Goto textending
    	      Selection Start		Goto startposition of current selection
    	      Selection End		Goto endposition of current selection
    	     
    Search:  
    	      Find bracket		Select a textblock containing currently selected
    	     				bracket an coresponding bracket.
    	     				(Valid brackets are {,},[,],(,),/*,*/)
    	      Check brackets		Check hierachy of brackets
    	     
    Special:  Options			Set Wrapmode, Tabsize, Autoindent and Autofill	
    	      Call sed			Execute an sed command
    	      Help			Show this page
    	      About			Info about editor
    	     
    Commands: Command			Execute a Unix command 
    	      User Commands		Execute a predefined Unix command
    	      
    Pipe:     Pipe			Execute a Unix pipe command
    	      User Pipes		Execute a predefined Unix pipe command
  	     
SELECTIONS:

    Standard Textwidget selection style is used:
    
        Click left button 1 times          : Set cursor position
        Click left button 2 times          : Select word
        Click left button 3 times          : Select line
        Click left button 4 times          : Select paragraph
        Click left button 5 times          : Select all
        Press left button and drag pointer : Select area
        Click right button                 : Expand current selection
        Click middle button                : Insert Cut_Buffer0 at current cursor position
        
KEYBOARD:

    Standard Textwidget key bindings are used. These are patterned after those in the 
    EMACS text editor:

     Ctrl-a  Beginning Of Line              Meta-b  Backward Word
     Ctrl-b  Backward Character             Meta-f  Forward Word
     Ctrl-d  Delete Next Character          Meta-i  InsertFile
     Ctrl-e  End Of Line                    Meta-k  Kill To End Of Paragraph
     Ctrl-f  Forward Character              Meta-q  Form Paragraph
     Ctrl-g  Multiply Reset                 Meta-v  Previous Page
     Ctrl-h  Delete Previous Character      Meta-y  Insert Current Selection
     Ctrl-j  Newline And Indent             Meta-z  Scroll One Line Down
     Ctrl-k  Kill To End Of Line            Meta-d  Delete Next Word
     Ctrl-l  Redraw Display                 Meta-D  Kill Word
     Ctrl-m  Newline                        Meta-h  Delete Previous Word
     Ctrl-n  Next Line                      Meta-H  Backward Kill Word
     Ctrl-o  Newline And Backup             Meta-<  Beginning Of File
     Ctrl-p  Previous Line                  Meta->  End Of File
     Ctrl-r  Search/Replace Backward        Meta-]  Forward Paragraph
     Ctrl-s  Search/Replace Forward         Meta-[  Backward Paragraph
     Ctrl-t  Transpose Characters
     Ctrl-u  Multiply by 4        Meta-Delete            Delete Previous Word
     Ctrl-v  Next Page            Meta-Shift Delete      Kill Previous Word
     Ctrl-w  Kill Selection       Meta-Backspace         Delete Previous Word
     Ctrl-y  Unkill               Meta-Shift Backspace   Kill Previous Word
     Ctrl-z  Scroll One Line Up

   In addition some special keybindings are used: 
    
     Shift Cursor up      : Page up
     Shift Cursor down    : Page down
     Shift Cursor left    : Previous word
     Shift Cursor right   : Next word
     Ctrl Cursor up       : Textbeginning
     Ctrl Cursor down     : Textending
     Ctrl Cursor left     : Begin of line
     Ctrl Cursor right    : End of line
     
   There are some default keybindings for calling menus, which overwrite some of the
   above defaults in the textwindow. These may be changed by changing Resources in 
   your "~/.Xdefaults":
   
     Meta-o		  : Open file
     Meta-i		  : Insert file
     Meta-s		  : Save file
     Meta-e		  : Exit
     Meta-f		  : Find Panel
     Meta-l		  : Goto line
     Meta-m		  : Toggle between Insert and Overwrite mode   

   Esc erases the text in a popup text field like Line, Search, Sed, ...
   
USER COMMANDS AND PIPES

    UNIX commands can be execute using a user pipe or command. If there is some
    output of a user command it is displayed in another editor. Results of a pipe 
    command replace the current text selection. Before a command is executed, the 
    current selection and the current text are saved in temporary files. The 
    following variables are set and may be used in a command:
    
    $selection: Filename of the temporary file containing the current selection
    $tempfile : Filename of the temporary saved text file
    $filename : Filename of the edited file
    $stripped : Stripped Filename (without postfix and path) of the edited file
    
    The user may specify his own commands by specifying RESOURCES:
    
        Editor*commands
        Editor*pipes
    
    Each command has the format "<Menu entry><Tab><Command string>\n\". Here
    are some short examples. These examples are setup in the default resource file. You
    may change them for your own purpose in your ".Xdefaults" file:

	Editor*commands:LatexPS latex $stripped; dvips $stripped.dvi -o $stripped.ps; ghostview $stripped.ps &\n\
	LatexDVI	latex $stripped; xdvi $stripped.dvi &\n\
	Make		make\n\
	CC		cc $stripped.c -o $stripped\n\
	NewEditor	1>/dev/null 2>/dev/null editor &\n\
	Manual		mantitle=`head $selection`;man $mantitle | sed "s/.//g"
	Editor*pipes: 	Date	date

KEYBINGINS FOR CALLING MENUS

    You may define keybings for calling menus by changing the Editor.insertranslations and
    Editor.overwritetranslations resources. For calling a menu entry you can use the Action 
    "xedCallMenu". In oder to call a specific menu entry, you have to know the widget
    name of the menu entry. A complete list of the widget names can be found in the
    default resourse file (see below). For example the default keybinding for calling
    the menus are setup in the default resource file in the following manner:
    
	Meta<Key>i: xedCallMenu(filemenu.insert) \n \
	Meta<Key>o: xedCallMenu(filemenu.load) \n \
	Meta<Key>s: xedCallMenu(filemenu.save) \n \
	Meta<Key>e: xedCallMenu(filemenu.quit) \n \
	Meta<Key>l: xedCallMenu(jumpmenu.line) \n \
	Meta<Key>f: xedCallMenu(searchmenu.search) \n \
    
   If you like to see the hotkey for calling a menu entry in the menu entry name, you
   can define you own menu entry names. This is the default setting in the default
   resource file:
   
   	Editor.filemenu.load.label:	Open          o
	Editor.filemenu.insert.label:	Insert        i
	Editor.filemenu.save.label:	Save          s
	Editor.filemenu.quit.label:	Exit          e
	Editor.jumpmenu.line.label:	Line          l
	Editor.searchmenu.search.label:	Search        f 
	
   The widget name of a user command or pipe is defined by the menu entry name.
   For example the widget names of the above examples for user commands and pipes
   are:

   	Editor.commandsmenu.LatexPS
   	Editor.commandsmenu.LatexDVI
   	Editor.commandsmenu.Make
   	Editor.commandsmenu.CC
   	Editor.commandsmenu.NewEditor
   	Editor.commandsmenu.Manual
   	Editor.pipesmenu.Date
   	
   So these menu entries may be bind to some hotkeys by calling:
   
   	xedCallMenu(commandsmenu.LatexPS)
   	...
   	xedCallMenu(pipesmenu.Date)

   Be carefull when choosing the name of a menu entry for user commands or pipes.
   You may run into troubles if you use special characters or the same name for
   different menu entries.
    	
RESOURCES:

    Editor.EnableBackups         : Make backupfile before saving (Boolean)
    Editor.BackupNameSuffix      : Suffix for backupfilename (String)
    Editor.PrintCommand	         : Command for printing file (String) 
    Editor.AutoIndent            : AutoIndent (Boolean)
    Editor.Tabsize               : Tabsize (Int)
    Editor*editWindow.autoFill   : Autofill (Boolean)
    Editor*editWindow.wrap       : Wrapmode (String) (never, word, line)
    Editor.textwidth             : Width of the textwindow in number of characters (Int)
    Editor.textheight	         : Height of the textwindow in number of characters (Int)
    Editor.MaxScrollbreak        : Specifies how many cursor events with the
                                   same serial number will be ignored (Int)
    Editor.commands	         : User command strings (String)
    Editor.pipes		 : Users pipe strings (String)
    Editor.insertranslations     : Keybindings in Insert mode
    Editor.overwritetranslations : Keybindings in Overwrite mode

    You may copy it into your "~/.Xdefaults" and modify it for your own purpose.
