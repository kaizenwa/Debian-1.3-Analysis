# PAX Makefile
PKGNAME=pax
VERSION=2.1

# List of .c files to compile:
CFILES= append.c buffer.c cpio.c create.c extract.c fileio.c \
	link.c list.c mem.c namelist.c names.c \
	pass.c pathname.c pax.c port.c regexp.c replace.c tar.c \
	ttyio.c warn.c wildmat.c

# List of .o object files to generate:
OFILES=${CFILES:.c=.o}

HFILES= dbug.h dir.h func.h limits.h patchlevel.h pax.h port.h regexp.h

# Compiled executable's pathname:
PROG=pax

SHELL=/bin/sh
.SUFFIXES: .c .o

CC=@CC@
CFLAGS=@CFLAGS@
VPATH=@srcdir@
CPPFLAGS=@CPPFLAGS@

LIBS=@LIBS@
LDFLAGS=@LDFLAGS@

# Any -D definitions:
DEFS=@DEFS@

# File permissions for chmod:
MODE=755

README=./README
DOCFILES=$(README) pax.1 tar.1 cpio.1 ChangeLog README.1st
CFGFILES=config.h.in configure.in configure Makefile.in 
CFGJUNK=config.h Makefile config.cache config.status config.log

# This is everything that is copied when you make a shar or tar.
PACKAGE=$(DOCFILES) $(CFILES) $(HFILES) $(CFGFILES)

BINDIR=@prefix@/bin
MANDIR=@prefix@/man/man1
CATDIR=$(MANDIR)/../cat1

all: $(PROG)
	chmod $(MODE) $(PROG)
	@ls -l $(PROG)
	@echo 'Done.'

$(PROG): $(OFILES)
	$(CC) $(OFILES) -o $@ $(LDFLAGS) $(LIBS)

install:
	rm -f $(BINDIR)/pax
	cp pax $(BINDIR)/pax
	strip $(BINDIR)/pax
	chmod 775 $(BINDIR)/pax
	rm -f $(MANDIR)/pax.1
	cp @srcdir@/pax.1 $(MANDIR)/pax.1
	chmod 664 $(MANDIR)/pax.1
	rm -f $(CATDIR)/pax.1 

.c.o:
	$(CC) $(CFLAGS) $(DEFS) $(CPPFLAGS) $< -c

### Archiving #################################################################

TARDIR=$(PKGNAME)-$(VERSION)
TARFILE=$(TARDIR).tar
TGZFILE=$(TARDIR).tgz

shar:
	shar $(PACKAGE) | cat $(README) - > $(PROG).shar

tar: $(PACKAGE)
	-@mkdir /usr/tmp/TAR
	-@mkdir /usr/tmp/TAR/$(TARDIR)
	-@chmod ga+r $(PACKAGE)
	-@chmod 755 /usr/tmp/TAR/$(TARDIR)
	cp -pr $(PACKAGE) /usr/tmp/TAR/$(TARDIR)
	( cd /usr/tmp/TAR ; tar cf $(TARFILE) ./$(TARDIR) )
	cp /usr/tmp/TAR/$(TARFILE) .
	-@chmod 644 $(TARFILE)
	-@rm -rf /usr/tmp/TAR
	-@ls -l $(TARFILE)

gz: tar
	gzip -c $(TARFILE) > $(TGZFILE)
	-@rm $(TARFILE)
	-@chmod 644 $(TGZFILE)
	-@ls -l $(TGZFILE)

### Cleaning supplies ########################################################

clean:
	-/bin/rm -f $(OFILES) $(PROG) core

distclean:	clean
	-/bin/rm -f $(CFGJUNK)

realclean mostlyclean: clean distclean

### Junk for me ##############################################################

tarsrc:
	-@chmod ga+r $(PACKAGE)
	tar cvf - $(CFILES) $(HFILES) | gzip -f > $(TARFILE)

tarcfg:
	tar cvf - $(CFGFILES) | gzip -f > cfg.$(TARFILE)

lint:
	lint $(CFILES) $(DEFS) > $(PROG).lint

### Dependencies    

C_HEADERS = pax.h config.h regexp.h limits.h port.h func.h
append.o:	$(C_HEADERS) append.c
buffer.o:	$(C_HEADERS) buffer.c
cpio.o:		$(C_HEADERS) cpio.c
create.o:	$(C_HEADERS) create.c
extract.o:	$(C_HEADERS) extract.c
fileio.o:	$(C_HEADERS) fileio.c
link.o:		$(C_HEADERS) link.c
list.o:		$(C_HEADERS) list.c
mem.o:		$(C_HEADERS) mem.c
namelist.o:	$(C_HEADERS) namelist.c
names.o:	$(C_HEADERS) names.c
pass.o:		$(C_HEADERS) pass.c
pathname.o:	$(C_HEADERS) pathname.c
pax.o:		$(C_HEADERS) pax.c
port.o:		$(C_HEADERS) port.c
regexp.o:	$(C_HEADERS) regexp.c
replace.o:	$(C_HEADERS) replace.c
tar.o:		$(C_HEADERS) tar.c
ttyio.o:	$(C_HEADERS) ttyio.c
warn.o:		$(C_HEADERS) warn.c
wildmat.o:	$(C_HEADERS) wildmat.c
