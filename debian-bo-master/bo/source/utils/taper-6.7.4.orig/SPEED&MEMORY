Memory Usage and performance
----------------------------

Taper can be configured to use memory two ways.

One is a very fast version but uses quite a bit of memory and 
system load. The other uses less memory but is slower and requires
less system load. If you use the --memory-tight-on,
option, then the slower, memory conservative version is used.
If you use the --memory-tight-off option, then the
faster, but more memory hungry version is used.

There is not really a lot of performance difference until
you hit about 2,000 - 3,000 files, so if your backups are
generally below this, so you can use
the memory conservative version. Above that, you will find
that the memory conservative version is a bit slow. My own
opinion is that if you are backing up more than 2,000 files,
you are probably a system administrator and you can send a
message to your users saying that system performance will
be diminished for the next half hour (or whatever) while you
backup the system and taper hogs a lot of
memory. Most users will accept that.

The memory requirements of the fast version are really not
that great - it is about 600 bytes of RAM for each file -
thus, if you are backing up 3,000 files, you will need
about 2 meg of RAM, not really excessive (compared
to X!!). The memory conservative version would probably
use (depending on the length of the filenames), about 500K.

At this stage, taper is not really designed for mega-backups
(ie. >20,000 files). However, if you have the memory & system
capability, taper will cope quite nicely.

There are several compression methods available. 

External compression - type 1
  This method calls an external compression program to do the compression.
  The default is set to gzip but can be changed in the defaults.h
  file at compile time. The compression program is expected to read 
  the file from standard input and write the compressed output to
  standard output. If your compression program doesn't do this, you
  will have to modify the taper sources. This is a VERY slow method.

Fast internal compression - type 2
  This is a very good compression method - it is very fast and reasonably
  good at compression. Because of this, it is the default compression
  method. The only problem is that is uses an extra 2MB of memory
  which can degrade system performance on heavily loaded machines.

Internal gzip - type 3
  This method is basically the gzip compression method, however,
  the source has been hacked around to accommodate taper. The
  advantage of using this over the external compression method
  is that it is a bit quicker because it is internal, however,
  it is still a very slow compression method. The other disadvantage
  is that although the compression method is that of gzip, it
  doesn't produce compressed files that can be read by gzip. You
  need taper to read the archives.

In summary then:

  Memory use, type 2 > type 3 > type 1.
  Speed, type 2 > type 3 > type 1.
  Compression ratio, type 3 > type 1 > type 2

You should use compression 2 unless you have a very heavily loaded
system or less than 4MB of RAM.

If the memory tight version is still too memory hungry for
you, try the following:

  Turn off triple buffering

  In defaults.h, reduce the size of DEFAULT_TR_SIZE. This is the number
	of bytes that data is transferred to/from the tape device
	in a single read/write.

  Don't use use compress-type set at 2.
    
  Change the size of COMPRESS2_BUFFER_SIZE to 1 in the defaults.h
    file (and don't use compress-type 2)
    
  In defaults.h, add the following line:

            #define MAXNAMLEN 125

This assumes that the maximum filename length you have is 125 characters.
If this is not the case, change it to match your system.




$Id: SPEED&MEMORY,v 1.4 1996/07/27 20:42:02 yusuf Exp $	
