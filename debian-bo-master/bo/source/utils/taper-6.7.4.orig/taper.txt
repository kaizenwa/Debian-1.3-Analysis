  Taper
  Yusuf Nagree
  Version 6.7.4. 5AUG96.

  11..  DDiissccllaaiimmeerr

  Copyright (c) 1996 by Yusuf Nagree (yusuf@nagree.u-net.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation;

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



  22..  WWaarrnniinngg

  Please note that this is BETA software. This means that it is still
  under development. This program works fine on my setup (DX2-66, Jumbo
  250, Floppy controller, 32Mb RAM, 3 IDE hard drives (120mb, 120mb,
  540mb), Suprafax modem, Mitsumi Quad Speed IDE CD-ROM, serial mouse).

  However, there are hundreds (if not thousands) of different
  configurations out there. I cannot test them all (which why this
  software is beta). Before using this program for 'production' backups,
  PLEASE ensure that both the backup and restore programs work correctly
  on YOUR system. Until you have confirmed this (several times, I
  suggest), then only should you use this as your only means of backup.
  Until then, please also backup using a method you KNOW works for you.

  Having said this, from the comments I have received so far, it does
  seem to work on a fair few systems so I hope it does work on yours.
  If it doesn't, I'd like to know.



  33..  IInnttrroodduuccttiioonn

  Taper is a user friendly archive program especially designed for
  backing up to tape drives. It also supports backing up to files on a
  hard disk

  It, I hope, overcomes the lack of programs available currently for
  Linux for user friendly archiving.

  Tar/cpio, apart from having an unfriendly user interface, lack one
  essential feature that I needed - there was no information stored in
  the beginning of the archive about what files were on the archive. The
  only way to get such a list was to traverse the whole archive, getting
  cpio/tar to print out a list of files that it found. With a 250mB
  archive, this could easily take 5 min. It was a real hassle to
  maintain lists of files on all my tapes and it could take 20 min to
  locate a file if I didn't know which tape it was on - printing out
  file lists of each tape.

  I solved this by maintaining an archive information file on the hard
  disk.  This file contains all the information about files stored on
  the archive.  When files are added to the archive, the archive
  information file is updated. This archive information file can be
  reconstructed from the archive should the file get
  deleted/corrupted/lost - it just takes time. Should you wish to
  restore an archive on a different machine than one to where the backup
  was made, you have two options: 1) make a copy of the information file
  on a floppy and take this floppy with you as well as the tape, 2)
  reconstruct the archive information file on the restoring machine.
  Since reconstructing the archive information file can take a while,
  method 1 is recommended. Archive information files are not long - they
  occupy 56 bytes + length of the filename for each file - thus 10,000
  files of average filename length of 20 chars is less than 800K (or
  about 300K with compression) - easily fits on most floppies.

  Note, that as a security measure, archives created by one user cannot
  be read by another user, unless the archive information file is copied
  from the backup user's directory to the restore user's directory.
  Thus, if you want to make a backup and don't want others to be able to
  restore it, set your permissions on the archive information file as
  rw------- (which _t_a_p_e_r does by default). Note that this is not
  completely foolproof, since a restorer can run _m_k_i_n_f_o and create the
  information file and then access the archive. It is more a deterrent
  rather than secure system.

  The second problem with both tar and cpio was that using the floppy
  interface tape drive, you could not append files. The only way to
  append files was using a combination of tar and mt - a very clumsy and
  time consuming method of backing up.

  Note that the archive device doesn't have to be a tape drive - it can
  be an ordinary file on a filesystem, or a floppy, or in fact, any file
  that the Linux can write to.

  Each archive is given a unique archive ID (which is actually the
  system time that the archive was created). This is used to identify
  it.

  Development of this system has been done using gcc and based on a
  Colorado Jumbo 250 drive using the Ftape driver (v2.03). As I do not
  have access to any other tape drives, I don't know if it will work on
  other setups. If you have any problems, contact me an I'll see if I
  can help.

  The main program is called _t_a_p_e_r.

  Note that currently _t_a_p_e_r is not really designed for backing up more
  than about 30,000 files (unless you have a large amount of physical
  memory).





  44..  RReeqquuiirreemmeennttss


  +o  ncurses library >= v1.9.6 with the forms library

  +o  kernel >= v1.2.5 (I think it will work for lesser versions but I
     have not tested it) - Your kernel must have SYS_V_IPC support
     enabled if you wish to take advantage of the triple buffering
     system.

  +o  gcc >= 2.6.1



  55..  UUnnppaacckkiinngg aanndd CCoommppiilliinngg

  Unpack the source file distribution by issuing the following command:


       tar xzf taper-6.7.4.tar.gz


  Modify Makefile as required and then



       make clean
       make all





     TTRRIIPPLLEE__BBUUFFFFEERR
        Enable this option if you wish to take advantage of _t_a_p_e_r's new
        triple buffering system. You must compile your kernel with
        SYSV_IPC support. If you haven't, can't or don't want to, then
        you can't use triple buffering. If you don't enable
        TRIPLE_BUFFER, then your error counts in restore will be
        invalid.

        On slow drives, triple buffering can really improve performance
        however, on faster drives, can slow down performance. The best
        thing to do is to compile with triple buffering and look at your
        performance. If it is slow, then recompile with triple buffering
        off.

        I consider a fast drive to be one that delivers a throughput of
        more than 8mB/minute.


     TTAAPPEERR__BBIIGG__EENNDDIIAANN
        _T_a_p_e_r stores all data to the tape in little endian format.  To
        use _t_a_p_e_r on a big endian machine, define TAPER_BIG_ENDIAN.




  55..11..  FFiillee llooccaattiioonnss

  To place the binaries and the man page in the appropriate locations,


       make install


  The binaries are placed in /sbin and the man page is /usr/man/cat1
  which is in accordance with the Linux FSSTND.

  To remove the files


       make uninstall



  55..22..  MMooddiiffyyiinngg ddeeffaauullttss..hh

  For the hackers, there are a few options at the beginning of
  _d_e_f_a_u_l_t_s_._h that you can alter if you wish. They include things such as
  the environment variable names, internal defaults, and compression
  program. Don't play around unless you know what you are doing.



  66..  TTeerrmmiinnoollooggyy

  An archive refers to all the files on a tape. A volume is the files
  that are written to in one backup session. Thus, if you make one
  backup to a tape, then it will have one volume. If you then append
  files to this tape, it will have two volumes. If you append again, it
  will have three volumes.

  For all intents & purposes, volumes are transparent to the user. When
  selecting files to restore, all the files on all the volumes are
  presented in alphabetical order (not volume order).



  77..  TTaappee DDeevviicceess

  This program requires a device driver for the tape drive. For users of
  the floppy controller type (eg. Jumbo), there are now two drivers
  available. The original one is _f_t_a_p_e and is written by Bas Laarhoven
  and, at the time of writing this, is currently at version 2.03b.  It
  is is available at sunsite in /pub/Linux/kernel/tapes and all the
  usual Linux sites. A new driver, _z_f_t_a_p_e, written by Claus-Justus
  Heine, has recently become available and is found at sunsite in the
  same directory. The latest version at time of writing was 1.05.  You
  must use version 1.02 or later.

  Two devices are needed - a rewinding device - when using this device,
  the tape drive is automatically rewound when closed, and a non-
  rewinding device - when using this device, the tape drive is not
  rewound when closed but left where is. The names of these devices
  depend on whether you are using a SCSI drive, _f_t_a_p_e or _z_f_t_a_p_e.
  Alternatively, you can change the names in the global preferences
  menu, via the preference file, from the environment, or via the
  command line.

  It is important that both a rewinding and a non-rewinding device is
  given.

  When making an archive as a file on a hard disk, the filename should
  be given for both the rewinding and non-rewinding device. To make
  things easier, you can use the -b command line option or the BOTH
  preference.



  88..  TTaappee ddrriivveess


  88..11..  ffttaappee

  _f_t_a_p_e is the original floppy tape driver for Linux and now supports a
  wide variety of floppy tape drives and a few enhanced controllers. In
  the later development kernels, _f_t_a_p_e is part of the kernel source
  tree. It is still available separately for those running older
  kernels.

  Start _t_a_p_e_r with the --TT ffttaappee option.

  The device names are /dev/ftape (which should point to /dev/rft0) for
  the rewinding device, and /dev/nftape (which should point to
  /dev/nrft0) for the non-rewinding device. These are the values that
  _t_a_p_e_r uses as defaults; if your devices are different, modify the
  values using the environment variables, preferences file, or command
  line (see below).

  If you are still using _f_t_a_p_e, I would strongly suggest that you update
  to _z_f_t_a_p_e which is basically _f_t_a_p_e with quite a few enhancements which
  should drastically improve _t_a_p_e_r performance. If you have multiple
  volume backups made under _f_t_a_p_e, however, you should not upgrade
  because you will not be able to access volumes other than 1 using
  _z_f_t_a_p_e.



  88..22..  zzffttaappee

  Recently a new floppy tape driver has become available. This is
  _z_t_a_p_e_-_1_._0_5, written by Claus-Justus Heine and is based on _f_t_a_p_e with
  plenty of new features added.

  Start _t_a_p_e_r with the --TT zzffttaappee option.

  This driver supports several modes - one is the generic _f_t_a_p_e mode.
  The second is a QIC compliant mode (zftape) and the third is a
  compressed QIC compliant mode (czftape). It is possible to access
  archives made with _f_t_a_p_e using the generic mode (see below), however,
  if you make a backup using the QIC compliant mode (zftape), then you
  cannot use this if you decide to go back to _f_t_a_p_e. As this is rarely
  done, and because the QIC compliant mode is so superior to the generic
  mode, I would recommend that you use it.

  Backups made under _f_t_a_p_e will work with _z_f_t_a_p_e if you:

  1. Make sure that you use the device names _/_d_e_v_/_f_t_a_p_e and _/_d_e_v_/_n_f_t_a_p_e.
     You will have to change this manually under Global preferences

  2. You only restore files from the first volume. It is not possible to
     restore files from other volumes. This is because _z_f_t_a_p_e does not
     support the fsf ioctl for _f_t_a_p_e drives. I am currently
     corresponding with Claus to see if we can resolve this problem.

  3. Do not try and append data to an archive created with _f_t_a_p_e using
     _z_f_t_a_p_e

  4. You change the _s_e_t_-_b_l_k_s_i_z_e & _g_e_t_-_b_l_k_s_i_z_e preferences to yes and
     change the _b_l_o_c_k_-_s_i_z_e to 10K.

     If you have multiple volume backups, then you had best use _f_t_a_p_e
     until you fully migrate all your backups to _z_f_t_a_p_e.


  Do not try and make backups with the generic driver of _z_f_t_a_p_e and then
  go back to _f_t_a_p_e and hope that it will work - it won't!

  Under _t_a_p_e_r, the biggest advantage of _z_t_a_p_e is the ability to quickly
  fast forward through archives. You should notice quite a difference,
  especially when doing a _m_k_i_n_f_o and when restoring from multiple
  volumes. Although _z_f_t_a_p_e has support for compression, you are better
  off letting _t_a_p_e_r compress since _t_a_p_e_r buffers a bit better and has
  the option of using _g_z_i_p which is more efficient than the algorithm
  used by _z_f_t_a_p_e.

  The devices for this driver should be created using


       make mknod

  in the Makefile that comes with the driver. Note that the permissions
  will be set up so that only root has write access to the tape drive.
  You will have to change this manually if you want to allow other users
  access.

  The device names are /dev/qft0 for the rewinding device and /dev/nqf0
  for the non-rewinding device.



  88..33..  SSCCSSII DDrriivveess

  Start _t_a_p_e_r with the --TT ssccssii option.

  Unfortunately, I do not have a SCSI drive and therefore am unable to
  test _t_a_p_e_r code with SCSIs. I rely on SCSI users sending me
  information about how _t_a_p_e_r works for them and then I try and use that
  information to help other SCSI users who are having problems. The
  following information was sent to me by AP Harris
  (apharris@onShore.com) and I've included it to help SCSI users.

  The SCSI rewinding device is /dev/st0 (or /dev/st1 on the 2nd tape
  drive) and the non-rewinding device is /dev/nst0.  You'll probably
  have to prepare all your tapes using _m_k_t_a_p_e from the _u_t_i_l_i_e_s menu.

  If you are using a SCSI tape device, make sure you've complied the
  kernel with SCSI (CONFIG_SCSI) support, SCSI tape support
  (CONFIG_CHR_DEV_ST) and, of course, support for your SCSI host
  adapter.  If all is well, when you boot, you should see a message like
  this (your details may vary):



       Detected scsi tape st0 at scsi0, id 4, lun 0
       scsi : detected 1 SCSI tape 1 SCSI disk total.




  No additional drivers are needed (although the st-aware mt is nice).

  The block size (-x option below) should be set below the tape device
  driver buffer size (which can be changed at kernel compile time in the
  kernel and defaults at 32K).

  SCSI tapes generally do not need formatting - see below for full
  details.



  88..44..  IIDDEE ttaappee ddrriivveess

  Start _t_a_p_e_r with the --TT iiddee option.

  The default device names are /dev/ht0 and /dev/nht0. Support for IDE
  drives is in alpha stage and I would encourage users to give me
  feedback on how _t_a_p_e_r is working with their IDE drives


  88..55..  FFllooppppiieess aanndd ootthheerr rreemmoovvaabbllee mmeeddiiaa

  Start _t_a_p_e_r with the --TT rreemmoovvaabbllee  option.

  When the floppy (or whatever) is full, _t_a_p_e_r will prompt you for the
  next floppy/tape. This works in exactly the same way as multiple tape
  backups. The default device names are set to /dev/fd0 - ie. the first
  floppy drive.

  If you are using a ZIP drive, then make sure that the whole disk has
  been partitioned as a Linux native partition then start ttaappeerr:


       taper -T removable -b /dev/sda1


  Substitute /dev/sda1 with the device name of your ZIP drive.



  99..  QQuuiicckk ffaasstt ffoorrwwaarrddss

  Some tape drives are capable of doing quick fast forwards. A quick
  fast forward means that the tape drive is able to find the start of
  the next volume even when in the middle of the previous volume. Drives
  based on _f_t_a_p_e are _N_O_T capable of doing this, however, _z_f_t_a_p_e, is able
  to do quick fast forwards, as are most SCSI drives.

  With _f_t_a_p_e, therefore, the only way to find the next volume is to
  rewind the tape to the beginning, and then forward to the desired
  volume. As you can imagine, this constant rewinding and forwarding can
  take quite a while.

  By default, _t_a_p_e_r assumes that zftape, SCSIs and IDE tape drives can
  do a quick fast forward, while removable and ftape tape drives cannot.

  To test whether your drive can do quick fast forwards, go into the
  _u_t_i_l_i_e_s menu and run the _T_e_s_t _f_a_s_t _f_s_f program which will tell you if
  your drive supports quick fast forwards or not. Note that _t_a_p_e_r will
  overwrite all the data on the tape used for the test.

  If you find that your tape drive doesn't support quick fast forwards,
  you will have to change the appropriate preference.



  1100..  CCaann sseeeekk

  Some tape drives support a seek ioctl which allows positioning of the
  tape drive at a particular block. This makes restore a lot quicker,
  since _t_a_p_e_r can calculate which block a file(s) lies on an advance
  straight to that block.

  By default, _t_a_p_e_r assumes that zftape, and SCSI drives support this
  ioctl while removable,ftape and IDE don't.

  You can test if your tape drive supports seek by running the _T_e_s_t _c_a_n
  _s_e_e_k utility and changing the appropriate preference.



  1111..  FFoorrmmaattttiinngg aanndd EErraassiinngg TTaappeess

  Like floppy disks, there are two steps in the preparation of new
  tapes:

  1. low level format

  2. preparing for use with Linux/_t_a_p_e_r

  People with floppy tape drives need to do both. At present, there is
  no program available to low level format a tape, and thus, you will
  have to rely on DOS/WIN/OS-2 programs to do so. If you are planning on
  using _t_a_p_e_r, then you do not need to worry about step 2, since _t_a_p_e_r
  will take care of that for you. If you are not going to be using _t_a_p_e_r
  on that particular tape, then you will need to do a _m_t _e_r_a_s_e. Note
  that if you buy pre-formatted tapes (which I'd STRONGLY recommend
  since formatting can take 2-3 hours), then you by-pass step 1 ONLY -
  you still have to prepare the tape for Linux.

  People with SCSI drives (esp DAT) may not need to format tapes for use
  under Linux. See your tape drive documentation for details.
  Similarly, you may not need to do step 2. Those drives that do not
  require step 2 may still require some information to be written on the
  tape before they will work correctly under _t_a_p_e_r, therefore, run
  _m_k_t_a_p_e from the _u_t_i_l_t_i_e_s menu before running tape. You can use the
  _t_e_s_t _m_a_k_e _t_a_p_e option from the _u_t_i_l_i_t_i_e_s menu to see if your tape
  drive needs to have _m_k_t_a_p_e run on new tapes. It is important that you
  put a brand new tape in the tape drive when testing.

  Use the command line option _-_-_e_r_a_s_e_-_t_a_p_e_-_o_f_f to tell _t_a_p_e_r that your
  tape doesn't need erasing. This is the default behaviour if you have
  started _t_a_p_e_r with _-_-_t_a_p_e_-_t_y_p_e _s_c_s_i.



  1122..  //pprroocc FFiilleessyysstteemm

  Under Linux, it is possible to have a /proc filesystem. This directory
  doesn't contain files, but rather contains information about all the
  running processes and environment information. Its purpose is to allow
  programmers to obtain information about the current state of the
  machine (eg. the ps program).  Because it contains run-time
  information, we obviously don't want to back it up.

  _t_a_p_e_r has an option of trying to detect the /proc system and ignoring
  it when doing the backup. Normally, the /proc system is on device
  number 1. If your /proc system is on another device, then you can tell
  _t_a_p_e_r this with the -j (--proc-device) option, or preference.

  If you are not sure what device your /proc is mounted on, then run the
  program _w_h_i_c_h___d_e_v_i_c_e which is in the _u_t_i_l_i_t_i_e_s menu. Give the name
  /proc (or whatever name your /proc is) and _t_a_p_e_r will tell you the
  device your /proc is mounted on.

  Before using _t_a_p_e_r, it is a good idea to confirm that your /proc is on
  device 1 and if it isn't change the appropriate preference.



  1133..  MMeemmoorryy UUssaaggee aanndd ppeerrffoorrmmaannccee

  _T_a_p_e_r can be configured to use memory two ways.

  One is a very fast version but uses quite a bit of memory and system
  load. The other uses less memory but is slower and requires less
  system load. If you use the _-_-_m_e_m_o_r_y_-_t_i_g_h_t_-_o_n, option, then the
  slower, memory conservative version is used.  If you use the _-_-_m_e_m_o_r_y_-
  _t_i_g_h_t_-_o_f_f option, then the faster, but more memory hungry version is
  used.

  There is not really a lot of performance difference until you hit
  about 2,000 - 3,000 files, so if your backups are generally below
  this, so you can use the memory conservative version. Above that, you
  will find that the memory conservative version is a bit slow. My own
  opinion is that if you are backing up more than 2,000 files, you are
  probably a system administrator and you can send a message to your
  users saying that system performance will be diminished for the next
  half hour (or whatever) while you backup the system and _t_a_p_e_r hogs a
  lot of memory. Most users will accept that.

  The memory requirements of the fast version are really not that great
  - it is about 600 bytes of RAM for each file - thus, if you are
  backing up 3,000 files, you will need about 2 meg of RAM, not really
  excessive (compared to X!!). The memory conservative version would
  probably use (depending on the length of the filenames), about 500K.

  There are several compression methods available.


     EExxtteerrnnaall ccoommpprreessssiioonn -- ttyyppee 11
        This method calls an external compression program to do the
        compression.  The default is set to _g_z_i_p but can be changed in
        the _d_e_f_a_u_l_t_s_._h file at compile time. The compression program is
        expected to read the file from standard input and write the
        compressed output to standard output. If your compression
        program doesn't do this, you will have to modify the _t_a_p_e_r
        sources.


     IInntteerrnnaall ccoommpprreessssiioonn -- ttyyppee 22
        This is a very good compression method - it is very fast and
        reasonably good at compression. Because of this, it is the
        default compression method. The only problem is that is uses an
        extra 2MB of memory which can degrade system performance on
        heavily loaded machines.


     IInntteerrnnaall ggzziipp -- ttyyppee 33
        This method is basically the gzip compression method, however,
        the source has been hacked around to accommodate _t_a_p_e_r. The
        advantage of using this over the eexxtteerrnnaall ccoommpprreessssiioonn method is
        that it is a bit quicker because it is internal, however, it is
        still a very slow compression method. The other disadvantage is
        that although the compression method is that of _g_z_i_p, it doesn't
        produce compressed files that can be read by _g_z_i_p. You need
        _t_a_p_e_r to read the archives.



  In summary then:


  +o  Memory use, type 2 > type 3 > type 1.

  +o  Speed, type 2 > type 3 > type 1.

  +o  Compression ratio, type 3 > type 1 > type 2.

  You should use compression 2 unless you have a very heavily loaded
  system or less than 4MB of RAM.

  If the memory tight version is still too memory hungry for you, try
  the following:


  +o  Turn off triple buffering

  +o  In ddeeffaauullttss..hh, reduce the size of DEFAULT_TR_SIZE

  +o  Don't use use ccoommpprreessss--ttyyppee set at 2 because this is a very memory
     hungry compression (but also the quickest of the lot). CCoommpprreessss--
     ttyyppee set at 3 is a good alternative.


  +o  In ddeeffaauullttss..hh, change the line #define COMPRESS2_BUFFER_SIZE
     1000000 to:


       #define COMPRESS2_BUFFER_SIZE 1


  You will not be able to use ccoommpprreessss--ttyyppee 22, but if memory is a prob-
  lem, you shouldn't be using this anyway.

  +o  In ddeeffaauullttss..hh, add the following line:


       #define MAXNAMLEN 125


  This assumes that the maximum filename length you have is 125 charac-
  ters.  If this is not the case, change it to match your system.


  1144..  RRuunnnniinngg TTaappeerr

  To start _t_a_p_e_r, type _t_a_p_e_r at the command line. You will be presented
  with a menu from which you select the appropriate option. To move
  between options, press the up or down arrow (or left & right). To
  select and option, press the ENTER key.

  _t_a_p_e_r accepts the following command line options. Note that there are
  two formats for options - short (one letter) and long (GNU style).
  Either one (or a mixture of both) can be used. Alternatively, options
  can be stored in a preference file (see below for details).


  1144..11..  CCoommmmaanndd lliinnee ooppttiioonnss


     ----ttaappee--ttyyppee ((--TT))
        which tape drive you are using. There are three valid options

        ((ss))ccssii
           scsi drive

        ((ff))ttaappee
           ftape based tape drive

        ((zz))ffttaappee
           zftape based tape drive

        ((ii))ddee
           ide based tape drive

        ffii((ll))ee
           a regular file on the hard disk

        ((rr))eemmoovvaabbllee
           a device that needs mounting, eg. floppy disk

        This option mmuusstt be specified.  NB: Only the bracketed letter of
        the option is required.


     ----hheellpp ((--??))
        prints help on command line options



     ----aappppeenndd--oonn ((++aa))
        Append files to archive if it exists. DDeeffaauulltt.


     ----aappppeenndd--ooffff ((--aa))
        Overwrites existing archive if found.

        NOTE: The append options are only for unattended backups. If you
        use the main _t_a_p_e_r program, you will be prompted for whether you
        wish to append or overwrite an existing archive.


     ----aarrcchhiivvee--ddiiffff ((--AA)) aarrcchhiivvee__iidd
        Prints differences between the archive and filesystem.  If
        archive_id equals 0, then the tape that is in the tape drive is
        used, otherwise, uses archive_id.


     ----ttaappee--nnaammee ffiillee ((--ff)) ffiillee
        use file as the rewinding archive file. If not specified, will
        use the file specified in the environment variable TAPE.


     ----nnttaappee--nnaammee ffiillee ((--nn)) ffiillee
        use file as the non-rewinding archive file. If not specified,
        will use the file specified in the environment variable NTAPE.


     ----bbootthh--ddeevviicceess ffiillee ((--bb)) ffiillee
        equivalent to -n file -f file useful when not using tape drives,
        but archive files


     ----eexxcclluuddee--ffiilleess ffiillee ((--FF)) ffiillee
        a list of files not to include in the backup. Consists of a
        series of suffixes to exclude separated by spaces.  It is not
        case sensitive (ie. .o is the same as .O) For example, the
        ddeeffaauulltt setting of ".o ~" excludes all files that end in .o and
        all files that end in ~ .


     ----bbaadd--cchheecckkssuumm--oonn ((++CC))
        When doing a mkinfo or complete restore, if a file with a bad
        checksum is encountered, you will have the option of trying to
        continue, or assuming the rest of the backup is bad and fudging
        the info file to reflect this.  DDeeffaauulltt.

     ----bbaadd--cchheecckkssuumm--ooffff ((--CC))
        When doing a mkinfo or complete restore, if a file with a bad
        checksum is encountered, will try to continue without prompting.


     ----ccoommpprreessss--ttyyppee ((--cc)) nnuumm

        00  No compression

        11  Use an external compression program. The program to use is
           hard compiled and can be changed by editing _d_e_f_a_u_l_t_s_._h.  The
           ddeeffaauulltt is set to use _g_z_i_p.

        22  Use the internal compression program which is similar to
           _c_o_m_p_r_e_s_s. It doesn't provide as good a compression as _g_z_i_p
           but it is much quicker. Note that this compression uses about
           2MB of RAM extra so on heavily loaded machines, it can
           degrade performance. _D_e_f_a_u_l_t.

        33  Use the internal compression program which is similar to
           _g_z_i_p. It provides the same level of compression as _g_z_i_p and
           is much quicker than the external version.  It is not as
           quick as option 2, but much faster than 1.  In addition, it
           doesn't use anywhere near the memory or system load that _2
           requires.


     ----eexxcclluuddee--ccoommpprreessss ((--XX)) ffiillee
        Specifies which group of files to exclude from compressing.
        Comprises a string of suffixes separated by a space - eg. ``.gz
        .gif'' would exclude files ending in .gz and .gif.  It is not
        case sensitive (ie. JPG = jPg etc..)  DDeeffaauulltt is ``.gz .gif .Z
        .zip .jpg .bmp''

        _g_z_i_p is used for compression. It assumes that gzip is on your
        path. If you use another compress program, change the entry in
        _d_e_f_a_u_l_t_s_._h and recompile.


     ----pprriinntt--ddiirr ((--dd)) aarrcchhiivvee__iidd
        Prints the directory of the archive whose id is archive_id and
        exits. If archive_id equals 0, then the directory of the archive
        of the tape currently in the drive is printed.


     ----aauuttoo--ddeesscceenndd--oonn ((++DD))
        If this option is on, in restore, if there are any empty
        directories, they will automatically be skipped. For example,
        your files may be in /usr/local/src/xzy with nothing in /usr,
        /usr/local or /usr/local/src. When you select /usr from the top
        restore directory, you will automatically be placed in to
        /usr/local/src/xyz where the files are, and the empty
        directories will be skipped. DDeeffaauulltt.


     ----aauuttoo--ddeesscceenndd--ooffff ((--DD))
        Turn the above off.


     ----pprroommpptt--aarrcchhiivvee--oonn ((++ee))
        When selecting restore, prints a list of all known archives and
        the user can select which one of these to restore from. DDeeffaauulltt.


     ----pprroommpptt--aarrcchhiivvee--ooffff ((--ee))
        When selecting restore, automatically selects the archive in the
        tape drive (or regular file). User not given the option of which
        archive s/he would like to restore from


     ----ccaann--sseeeekk--oonn ((++EE))
        Tells _t_a_p_e_r that your tape drive supports a seek ioctl for
        positioning to a particular block. Default depends on tape drive
        type.


     ----ccaann--sseeeekk--ooffff ((--EE))
        You tape drive doesn't support an ioctl for positioning to a
        particular block. _T_a_p_e_r will use reads to position. Default
        depends on tape drive type.


     ----vvoolluummee--ttiittllee ((--gg)) ttiittllee
        Title of volume. DDeeffaauulltt is NULL.  Only applicable in backup.

     ----ggeett--bblloocckkssiizzee--oonn ((++GG))
        If this option is defined, then after _t_a_p_e_r opens a tape, it
        tries to get the block size using an ioctl call. This is only
        for the new _z_f_t_a_p_e driver.  DDeeffaauulltt is on for _z_f_t_a_p_e and off for
        others.

     ----ggeett--bblloocckkssiizzee--ooffff ((--GG))
        Do not try and get the block size.

     ----hhaarrdd--lliinnkkss--ooffff ((--hh))
        Store link details only and not linked file. DDeeffaauulltt.


     ----hhaarrdd--lliinnkkss--oonn ((++hh))
        Store linked file


     ----ccoommpp--hheeaadd--ssttaarrtt ((++HH)) mmiinnuutteess
        It is useful for _t_a_p_e_r to always have a full buffer of data
        available to send to the tape drive so that the tape drive never
        has to sit and wait. This can be a problem if compression is
        taking a long time. By giving the compression program a head
        start, you can try and ensure that _t_a_p_e_r always has data
        available to write. A good starting number for large backups is
        10 minutes. _D_e_f_a_u_l_t _i_s _0.


     ----iinnffoo--ffiilleess ppaatthh ((--ii)) ppaatthh
        directory where archive information files are saved. Also where
        file sets are saved. DDeeffaauulltt ~/taper_info).


     ----ccoommpprreessss--iinnffoo--oonn ((++II))
        turns on compression of info files. Automatically will compress
        &after creation and will decompress when required. DDeeffaauulltt.


     ----ccoommpprreessss--iinnffoo--ooffff ((--II))
        Don't compress info files.


     ----pprroocc--ddeevviiccee ((--jj)) nnuumm
        This specifies the device number of the /proc system.  This is
        avoid backing up of the /proc filesystem which is a runtime
        filesystem used to store the current state of the operating
        system. If this value is set to 0, then no checking is
        performed. The ddeeffaauulltt value is 1 (which is the device number of
        the /proc filesystem under Linux).


     ----mmiinn--bbeeffoorree--sseeeekk ((--JJ)) nnuumm
        When restoring, if the tape needs to be advanced by less than
        _m_i_n_-_b_e_f_o_r_e_-_s_e_e_k blocks, then a seek will not be issued, rather
        the tape will continue streaming. This is because if you have a
        lot of files close together, it's more efficient to just let the
        drive continue streaming. DDeeffaauulltt 1100.


     ----eerraassee--ttaappee--oonn ((++kk))
        When using a new tape, overwriting a tape with unrecognized
        data, or when overwriting existing _t_a_p_e_r files, if this option
        is set, _t_a_p_e_r will try and erase the tape using a standard ioctl
        call. Floppy tape drives (those based on _f_t_a_p_e and _z_f_t_a_p_e
        require this option to be set.


     ----eerraassee--ttaappee--ooffff ((--kk))
        Will not try to erase a tape before writing new data to it.
        Most SCSI drives do not require erasing, so you can use this
        option for them.


     ----lloogg--ffiillee ((--ll)) ffiillee
        name of log file. DDeeffaauulltt ~/taper_log.


     ----lloogg--lleevveell ((--mm)) nnuummbbeerr
        logging level (0 = no logging..4 = all). DDeeffaauulltt = 2.


     ----lliimmiitt--lloogg--ffiillee ((--LL)) nnuummbbeerr
        specifies how many megabytes the log file should be at a
        maximum.  If, after a _t_a_p_e_r operation, the log file is found to
        exceed this size, enough bytes are removed from the BEGINNING of
        the file to ensure the log file becomes _n_u_m_b_e_r megabytes long.
        If this is 0, then no checking is done and the log file will
        continue to grow indefinitely.  DDeeffaauulltt iiss 22.


     ----mmeemmoorryy--ttiigghhtt--oonn ((++MM))
        Make _t_a_p_e_r not to use much memory. This results in a slower
        performance but much less memory usage.


     ----mmeemmoorryy--ttiigghhtt--ooffff ((--MM))
        Normal memory usage. Much better performance but more memory
        usage. DDeeffaauulltt.


     ----oovveerrwwrriittee ((--oo)) nnuumm
        level of overwrite

        00 -- nnoo oovveerrwwrriittee..
           If the file exists on the hard disk, then it is not
           overwritten

        11 -- mmoorree rreecceenntt oovveerrwwrriittee.. DDeeffaauulltt.
           If the file exists on the hard disk, it is only overwritten
           if the file on the backup device is more recent

        22 -- uunnccoonnddiittiioonnaall oovveerrwwrriittee..
           The file on the hard disk is always overwritten



     ----ttaappee--oovveerrwwrriittee--oonn ((++OO))
        When doing unattended backups, if a tape contains unrecognized
        data, then if this option is set, then the tape is automatically
        overwritten.


     ----ttaappee--oovveerrwwrriittee--ooffff ((--OO))
        When doing unattended backups, if a tape contains unrecognized
        data, then the tape is not overwritten - the backup is aborted
        and a message is mailed to the user. DDeeffaauulltt.


     ----pprreeffeerreennccee--ffiillee ((--pp)) ffiillee
        Name of preference file



     ----ttmmpp--ddiirr ((--PP)) ddiirr
        Specifies the directory where temporary files are to be placed.
        DDeeffaauulltt is /usr/tmp.


     ----oonnllyy--vvoolluummee ((--qq)) nnuumm
        Tells restore/backup to only show only volume 'num' in its
        window. DDeeffaauulltt is 0 which means show all volumes.


     ----ffaasstt--ffssff--oonn ((++QQ))
        Quick fast forwards are enabled.  See the section of Quick fast
        forwards for more details.  DDeeffaauulltt iiss oonn ffoorr _z_f_t_a_p_e aanndd _S_C_S_I
        aanndd ooffff ffoorr _f_t_a_p_e.

     ----ffaasstt--ffssff--ooffff ((--QQ))
        Disable quick fast forwards.

     ----rreellaattiivvee--ppaatthh ((--rr)) ppaatthh
        directory to restore to. Note that the directory structure of
        the backup is preserved


     ----eexxcclluuddee--ddiirrss ((--RR)) ppaatthh
        which directories to automatically exclude from the backup
        process.  The string consists of a list of space separated
        directories. Note that the selection is recursive. For example,
        if you exclude list was "/tmp", the contents of /tmp will not be
        backed up. Also, none of the directories in /tmp (eg. /tmp/junk)
        will be backed up.  Users of netscape may also want to put their
        cache directory on the exclude list ( /.netscape/cache) since
        this is where netscape stores its list of recently visited
        locations and is a waste to backup.  DDeeffaauulltt iiss ""tmp /usr/tmp
        /var/tmp"/.



     ----ssttrriipp--nnuummbbeerr ((--ss)) nnuummbbeerr
        remove number leading pathnames. When backing up, the full
        pathname is stored in the information file (and on the tape).
        You have the option of removing number leading paths when
        restoring. For example, if the file backed up was
        /home/yusuf/taper/README, by specifying -s 2, the file will
        appear in the restore menu as taper/README. If -s1 was
        specified, the file will appear as yusuf/taper/README.

        If there are more strips than paths (eg. specifying -s 6 in the
        above example), then the filename only is used (eg. README).

        The value -s 99 is a special value and tells restore to work out
        the optimum number of strips based on common leading paths

        The ddeeffaauulltt is -s 99 (ie. auto strip).


     ----sseett--bblloocckkssiizzee--oonn ((++SS))
        If this option is defined, then before _t_a_p_e_r erase a tape, it
        tries to set the block size using an ioctl call. This is mainly
        for the new _z_f_t_a_p_e driver, but some SCSI drives need it.
        DDeeffaauulltt is on for _z_f_t_a_p_e and off for others.

     ----sseett--bblloocckkssiizzee--ooffff ((--SS))
        Do not try and set the block size before erasing a tape.

        any tape manipulation, it tries to set the block size using an
        ioctl call first. Also, before erasing a tape, it sets the block
        size.

     ----aarrcchhiivvee--ttiittllee ((--tt)) ttiittllee
        Title of archive. DDeeffaauulltt is NULL.  Only applicable when archive
        is being created for the first time. If supplied when doing an
        archive append, then it is ignored.


     ----iinnccrreemmeennttaall--oonn ((++uu))
        When doing a backup, only backup those files selected which are
        more recent than the files that are on the backup archive.
        DDeeffaauulltt.


     ----iinnccrreemmeennttaall--ooffff ((--uu))
        When doing a backup, backup all files selected.  This option can
        be overriden when selecting files for backup.


     ----uunnaatttteennddeedd--ffiillee ((--UU)) ffiillee
        Gives the name of a file/directory to be backed up in unattended
        mode. If the filename begins with a _@, then it is taken to be
        the name of a file set, otherwise, it is a file. You can use as
        many -U as you like on the command line.


     ----rreecceenntt--rreessttoorree--oonn ((++ww))
        When doing a restore, restore the most recent file with the
        given filename. For example, if /etc/hosts has been backed up
        twice in different volumes, restore the file which is newer.
        DDeeffaauulltt.


     ----rreecceenntt--rreessttoorree--ooffff ((--ww))
        When doing a restore, restore the file that was selected - for
        example, if you selected /etc/hosts in volume 1, this if the
        file that will be restored, even if there is an /etc/hosts in
        volume 2 which is more recent.  This option can be overriden
        when selected files for restoration.


     ----oolldd--aarrcchhiivvee--ooffff ((--WW))
        Using an archive created by taper version 5.6 or later. DDeeffaauulltt.


     ----oolldd--aarrcchhiivvee--oonn ((++WW))
        Using an archive created by a version less than 5.6.


     ----vveerrssiioonn ((--vv))
        prints version being used. Also prints the options _t_a_p_e_r was
        compiled with


     ----bblloocckk--ssiizzee ((--xx)) nnuumm
        The size of a block. Apart from the tape header, data is
        transferred to the tape device in blocks of 'num' size. The
        ddeeffaauulltt is 28K. If you use a SCSI, see then note above. Num is
        in bytes. Note that this value MUST NOT exceed the size of
        DOUBLE_BUFFER in ddeeffaauullttss..hh.


     ----ssoorrtt--ddiirrss--oonn ((++yy))
        Alphabetically sorts the filenames displayed in the right hand
        window. DDeeffaauulltt.

     ----ssoorrtt--ddiirrss--ooffff ((--yy))
        Files are left in the order that they were backed up in.


     ----mmiinn--ffrreeee ((--YY)) nnuumm
        Specifies the minimum amount of free disk space that must exist
        before a file is compressed. num is in kilobytes. DDeeffaauulltt iiss
        44009966KK.


     ----pprroommpptt--ddiirrss--oonn ((++zz))
        Turns on confirmation when selecting directories for backing up.
        DDeeffaauulltt.


     ----pprroommpptt--ddiirrss--ooffff ((--zz))
        Turns off confirmation when selecting directories for backing up


     ----ttaappee--ssiizzee ((--ZZ)) ssiizzee
        Tells _t_a_p_e_r the size of your tapes in megabytes. This must be
        the _u_n_c_o_m_p_r_e_s_s_e_d size. Note that you must specify the same
        number every time you start _t_a_p_e_r. See notes on multiple tape
        backups for more details. If this value is 0, then _t_a_p_e_r auto-
        detects the end of tape. DDeeffaauulltt iiss 00 ((aauuttoo--ddeetteecctt)).





  1144..22..  BBaacckkuupp MMoodduullee

  Select the backup option from the _t_a_p_e_r menu.

  Three windows are displayed:

  The top left represents the file system (hard disk) and you can move
  it using the arrow keys. To enter a directory, press ENTER when the
  highlight is on that directory. To select a file/directory for backup,
  press 's'. Selecting a directory will select all the files in the
  directory recursively. To unselect a file/directory, press 'u'. If the
  file is only selected because it's directory is selected (eg. if you
  select /usr/john, then /usr/john/prefs is indirectly selected), then
  an appropriate error message will be printed.

  The top right window shows what is currently on the archive. You can
  use the arrow keys to move the display up/down. If there is previous
  archive, you can move the arrow keys down to a file/directory and
  press 's' to select this entry.

  The bottom window shows the files that you have selected for backup.
  To unselect a file that you have selected for backing up, move the
  highlight to the file you wish to remove from the backup set and then
  press 'u'.

  Pressing TAB moves between the windows.  Pressing 'h' will display a
  help screen.  Pressing 'f' will finish selection and commence backup
  Pressing 'q' will abort backup

  You can abort a backup by pressing q or Q while the backup is being
  made. This will cleanly stop backing up.





  1144..22..11..  BBaacckkuupp mmooddeess

  There are two modes for backup - full and incremental. The default
  incremental mode (which can be changed by changing the options, the
  preference file or command line). In incremental mode, when you select
  a file for backing up, _t_a_p_e_r looks at what is on the archive already.
  If the file you have selected for backup is more recent (or doesn't
  exist on the archive) than the one on the archive, it is backed up: if
  the file you have selected for backup is the same or older than the
  one on the archive, it is not backed up. For directories, _t_a_p_e_r checks
  each file in the directory recursively. To see if a file will be
  backed up, look at it's size in the selection (bottom) window - if it
  is zero, it means that _t_a_p_e_r will not back up that file.

  In full mode, _t_a_p_e_r backups the file regardless of what's on the
  archive.

  The backup mode can be changed for each file selection. Move the
  highlight in the selection window to the file you wish to change and
  then press 's'. To the left of the filename is an 'I' if the file is
  to be saved as incremental, or 'F' if it is full.



  1144..33..  RReessttoorree

  Select the restore option from the _t_a_p_e_r menu. If you have selected
  the 'prompt archives' option (default), then _t_a_p_e_r prints a list of
  all the archives it knows about and lets you select which one you
  would like to work with. The highlight will be automatically position
  on the archive that is in the tape drive (or which the regular file
  pertains to). Press ENTER to accept the archive or use the arrow keys
  to move around to select another archive. If the prompt archive option
  is not set, you will not be presented with this screen. Note that you
  are not allowed to change directories - ie. allowed to access other
  people's archives.

  Three windows are displayed:

  The top left window shows what is currently on the archive. You can
  move around using the arrow keys. To enter a directory, press ENTER
  when the highlight is on that directory. To select a file/directory
  for restoration, press 's'. Selecting a directory will select all the
  files in the directory recursively.

  The top right window shows what is currently on the archive. You can
  use the arrow keys to move the display up/down. You can press 's' when
  you are on a file or directory to select that particular
  file/directory.

  The bottom window shows the files that you have selected for
  restoration.  To unselect a file that you have selected for
  restoration up, move the highlight to the file you wish to remove from
  the restore set and then press 'u'.

  Pressing TAB moves between the windows.  Pressing 'h' will display a
  help screen.  Pressing 'f' will finish selection and commence backup
  Pressing 'q' will abort backup

  While the restore is in progress, you can stop it by pressing q or Q.






  1144..33..11..  RReessttoorree mmooddeess


  1144..33..11..11..  FFuullll rreessttoorree

  If _t_a_p_e_r cannot find an info file for the tape in the drive, then it
  offers you the option of doing a full restore. In full restore mode,
  all files on the archive are restored in all volumes. There is no
  pathname processing, so the full path is used relative to either the
  current directory, or the --restore-path option.


  1144..33..11..22..  MMoosstt rreecceenntt vvoolluummee rreessttoorree

  This comes in useful when you have backed up the same file several
  times (eg. as it has changed) and is the default mode. When you select
  a file for restoration, _t_a_p_e_r automatically selects the file which is
  on the latest volume (eg. you may have three volumes and /etc/passwd
  is on each. Even if you select the /etc/passwd in volume 1, _t_a_p_e_r will
  automatically select the volume 3 file, not the volume 1 file). This
  is indicated by an 'M' in the volume column of the selection window.
  Note that even if you are in a restricted volume view (using --only-
  vol), most recent restore will still automatically find the latest
  volume of your file on the archive.


  1144..33..11..33..  FFiixxeedd vvoolluummee rreessttoorree

  In fixed volume mode, whichever file you select is the one that is
  restored (eg. in the example above, the /etc/passwd on volume 1 would
  be restored, despite the fact that the /etc/passwd on volume 3 is more
  recent).



  To toggle between fixed volume & most recent mode for a particular
  file selection, press 's' when on the selected file in the selection
  window.



  1144..44..  RReeccrreeaattee iinnffoo ffiillee

  Select the recreate info file option from the _t_a_p_e_r menu.

  This recreates archive information files given an archive. It also
  checks that the checksums of all the files are valid. Any errors are
  printed to the log file.

  Basically, it looks for an archive on the devices given. It prints the
  archive ID and archive title on the screen, then prints each file as
  it passes it while recreating the archive information file in the
  directory specified.  Because it has to traverse the whole archive, it
  does take some time to recreate the information file.

  As it is traversing, _m_k_i_n_f_o checks the checksums of the files on the
  archives and writes any errors to the log file. Thus, you can check
  the integrity of your archives with _m_k_i_n_f_o.

  If _t_a_p_e_r encounters a bad checksum, you have the option of trying to
  continue the _m_k_i_n_f_o or you can tell _t_a_p_e_r to assume that this is the
  end of the backup. This is useful if a backup got killed by a power
  failure or something.

  During the traverse, you can press q or Q to stop it. If you do that,
  you will corrupt your info file and you will have to re-run _m_k_i_n_f_o to
  restore your info file.

  _M_k_i_n_f_o may return errors when trying to advance to volumes that do not
  exist. Do not worry about this - just select abort and the info file
  will be correctly constructed.



  1144..55..  VVeerriiffyy aarrcchhiivvee

  This option goes through an archive and checks that what's on the
  archive matches what is on the hard disk, byte by byte. If a file is
  on the archive but not on the disk, it is ignored. Any discrepancies
  are printed to the log file. It also checks the checksums and if a bad
  checksum is encountered, like _m_k_i_n_f_o, you have the option of trying to
  continue or to assume that the rest of the backup is bad.



  1144..66..  UUttiilliittiieess


  1144..66..11..  MMaakkee ttaappee

  This prepares a tape for use by _t_a_p_e_r. This is not needed by _z_f_t_a_p_e or
  _f_t_a_p_e tape drives. Some SCSI drives need this.


  1144..66..22..  TTeesstt mmaakkee ttaappee

  This tests whether your tape drive needs to have _m_a_k_e _t_a_p_e run on new
  tapes. It is important that a BRAND NEW tape is used when running this
  test - ie. one that has never seen the inside of your (or anyone
  else's) tape drive before.



  1144..66..33..  WWhhiicchh pprroocc

  Tells you on which device your /proc filesystem is mounted. Type in
  the name of your /proc directory (usually /proc) and then _t_a_p_e_r will
  give you a device number. This is then fed to _t_a_p_e_r using the --proc-
  device (or -J) option. The default is 1.


  1144..66..44..  TTeesstt ffaasstt ffssff

  Some tape drives can quickly advance between volumes on the tape. This
  also quicker restoration of files from multiple volumes. Use this
  utility to see if your tape drive can use fast fsf.



  1144..66..55..  TTeesstt ccaann sseeeekk

  _T_a_p_e_r can use the seek ioctl to make seeking for files in restore a
  lot quicker. Basically, the block on which the file should lie is
  calculated and then a seek is issued to quickly advance the tape drive
  to this block. However, your tape drive must support the seek ioctl
  for this to happen.

  You can use this utility to check if your tape drive supports the seek
  ioctl.

  Before using _t_e_s_t _c_a_n _s_e_e_k you must ensure that you have the correct
  setting for _t_e_s_t _f_a_s_t _f_s_f.
  1144..66..66..  EErraassee vvoolluummeess

  Lets you erase that last `n' volumes on an archive. Tell _t_a_p_e_r the
  number of volumes you wish to delete. _T_a_p_e_r then deletes these
  volumes. Note that once a volume is deleted, it cannot be restored.



  1144..66..77..  LLooookk ffoorr rreeccuurrssiivvee lliinnkkss

  It is possible on some systems that you have recursive links. For
  example, you may have a soft link that points to "./". This leads to a
  recursive situation which does not matter if you do not follow links.

  If you follow links (via the hard-links option), then _t_a_p_e_r will crash
  as it encounters this link. Running this utility identifies any
  recursive links you may have so that you can either tell _t_a_p_e_r not to
  use hard links, or so you can remove the offending link.

  Just enter the starting directory you wish to test - _t_a_p_e_r will look
  for recursive links and tell you if you have any. In some situations,
  _t_a_p_e_r will seg fault at the link. This is not a problem since you will
  know where the offending link is by when it seg faults.



  1155..  UUnnaatttteennddeedd BBaacckkuupp

  It is possible to get _t_a_p_e_r to do unattended backups. This can be used
  to run _t_a_p_e_r regularly through, say, _c_r_o_n.  Two additional preferences
  become important:


     ----aappppeenndd
        If a _t_a_p_e_r archive exists on the tape, then if --append-on, the
        files will be appended to the archive. If --append-off, then the
        existing archive will be overwritten.


     ----ttaappee--eerraassee
        If unrecognized data exists on the tape, then if --tape-erase-
        on, the unrecognized data will be overwritten. If --tape-erase-
        off, the data will not be overwritten and the backup session
        will be aborted.

  It is important that these preferences are correctly set, since _t_a_p_e_r
  is running in unattended mode, you will not be prompted for any
  confirmation, rather the action will just happen.

  To specify the files/directories for backup, use the _-_U (or
  _-_-_u_n_a_t_t_e_n_d_e_d_-_f_i_l_e) command line options. If the filename begins with a
  @, then _t_a_p_e_r interprets this to mean that a filename is a fileset and
  reads in the appropriate fileset.

  The files/directories are backed up either as full backups or as
  incremental backups - it depends on what you have set via command line
  options, or preference files. If you haven't specified anything, then
  by default, incremental backups are used.

  With unattended backups, it is not possible to have multi-tape backups
  because _t_a_p_e_r can't prompt you to insert the next tape. If the end of
  the tape is encountered, _t_a_p_e_r will stop the backup and send you a
  message.

  Mail is sent to the root (can be changed in _d_e_f_a_u_l_t_s_._h) via the _m_a_i_l
  (can be changed in _d_e_f_a_u_l_t_s_._h) program about what happened during the
  backup.

  You can use _c_r_o_n to automate your backup process. A line like this:


  10 20 * * * taper -U @set



  will cause _t_a_p_e_r to run at 20:10 (8.10pm) every day, using the fileset
  named _s_e_t.



  1166..  FFiillee SSeettss

  You may have a particular set of files or directories  that you always
  wish to backup - eg. /etc/passwd, /usr/local/bin, and /usr/local/etc.
  Rather than selecting these files & directories every time you want to
  make a backup, you can select them once and then save the particular
  selection to a file set. Next time you wish to backup this particular
  set of files, you need only load in the file set and _t_a_p_e_r will
  automatically select the files for you.

  To save a file set, press B in either backup or restore. You will then
  be prompted for a name to give to your file set.

  To restore a file set, press L in either backup or restore. You will
  be presented with a list of known file sets. Select which one you want
  using the arrow keys and ENTER and _t_a_p_e_r will load in the file set.


  1166..11..  FFiillee SSeett ffoorrmmaatt

  A file set file simply is an ASCII file that contains the selected
  file terminated by a return. There is null line between each file.


  1177..  EEnnvviirroonnmmeenntt vvaarriiaabblleess

  Several _t_a_p_e_r options can be set using environment variables which can
  be set from your profile file.


     TTAAPPEE__TTYYPPEE
        specifies which type of tape drive you have. Valid values are

     +o  scsi

     +o  zftape

     +o  ftape

     +o  reg-file

     +o  ide

     TTAAPPEERR__PPRREEFFSS
        the name of your preference file

     TTAAPPEERR__LLOOGG__FFIILLEE
        the name of your log file

     TTAAPPEERR__LLOOGG__LLEEVVEELL
        the level of logging _t_a_p_e_r should do

     TTAAPPEERR__IINNFFOO__FFIILLEESS
        the directory in which your info files and set files are found

     TTAAPPEE
        the name of the rewinding tape device

     NNTTAAPPEE
        the name of the non-rewinding tape device


  1188..  PPrreeffeerreenncceess

  Rather than having to issue a whole lot of command line options every
  time you wish to run backup/restore, it is possible to store commonly
  used options in a preference file. Individual users can have their own
  preference file in their ~ directory, or there can be a global
  preference file in /usr/local/etc. Both backup & restore look for a
  preference file in the following sequence:


  1. Check if a filename is given via -p (or --preference-file) command
     line option

  2.  Check if a filename is given via environment variable TAPER_PREFS

  3.  Check if ~/taper_prefs exists. If it does, use this

  4.  Default of /usr/local/etc/taper_prefs

     If no file is given, then internal defaults (as specified above)
     are used.

  Note that command line options over-ride preference file and internal
  default settings.



  1188..11..  CChhaannggiinngg pprreeffeerreenncceess

  It is possible to change and save preferences within _t_a_p_e_r. Select the
  appropriate option from the _t_a_p_e_r menu (ie. either global options,
  backup options or restore options). To move between options, press the
  up or down arrows (or left and right). To change an option, use the
  left and right arrow keys. When you have finished, press F10 (to
  change this from F10, change the entry in _d_e_f_a_u_l_t_s_._h).


  1188..22..  SSaavviinngg pprreeffeerreenncceess

  There are two methods of saving your preferences. One is to a
  preference file  or, the second is to a command line file. To save to
  a preference file, select the appropriate option. Give the filename of
  the preference file (default is ~/taper_prefs) and then press F. Next
  time you start _t_a_p_e_r, the preferences that you have selected will be
  automatically loaded.

  The second method of saving is to a command line file. The saves the
  preferences you have selected to a shell script. Select the name of
  the shell script (default is start_taper). To invoke _t_a_p_e_r using the
  selected preferences, issue a `sh start_taper'. This is useful if you
  have temporary (or multiple) configurations and you don't want to
  overwrite your existing preference file.




  1188..33..  PPrreeffeerreennccee ffiillee ffoorrmmaatt

  The format of a preference file is a text file with one preference per
  line.  A preference is given:


       PREFERENCE=VALUE


  See the file 'pref_example' for an example of a preference file.

  Spaces are ignored - use quotes if spaces are needed

  The name of the preferences are the same as the long command line
  option name. For example, to change the log file to _m_y___l_o_g___f_i_l_e, place
  the following line in your preference file:


       log-file = my_log_file



  1188..44..  SSppeecciiaall pprreeffeerreenncceess

  The following preferences can be prefixed by a letter to indicate
  which tape drive they belong to.


  +o  set-blksize

  +o  get-blksize

  +o  erase-tape

  +o  fast-fsf

  +o  block-size

  +o  tape-name

  +o  ntape-name

  +o  can-seek

  For example, if you have the following line in your preference file,


       block-size = 12300 z-block-size = 43122 z-tape-name = /dev/qft0 z-
       ntape-name = /dev/nqft0 s-tape-name = /dev/scsi s-ntape-name =
       /dev/nscsi -z


  then the block-size is set to 43122 only if the zftape driver is
  selected, otherwise, it is set to 12300. Also, the device names are
  set to /dev/qft0 & /dev/nqft0 if the zftape driver is selected, or to
  /dev/scsi &/dev/nscsi if the scsi driver is selected.  If the
  preference given is _b_l_o_c_k_-_s_i_z_e_=_4_3_1_2_2, then the block-size will be set
  to 43122 regardless of the tape driver selected.



  1199..  SSccrreeeenn CCoolloouurrss

  It is possible to change the colours displayed. This can be done from
  the command line or from within a preference file.

  The valid colours are BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN,
  WHITE.

  For example, to change the normal screen colour to yellow text on a
  blue background:


       taper --color-normal yellow, blue


  from the command line, or


       color-normal = yellow,blue


  in a preference file.

  Below is a list of the possible colors to change


     ccoolloorr--ttiittllee
        title bar (blue on white)

     ccoolloorr--mmaaiinn
        main screen   (white on blue)

     ccoolloorr--ddiiaalloogg
        dialog boxes    (white on red)

     ccoolloorr--ssttaattuuss
        status boxes    (white on red)

     ccoolloorr--ddiirreeccttoorryy
        screen used to select files  (black on green)

     ccoolloorr--sseelleecctteedd
        screen used to show selected files (white on blue)

     ccoolloorr--bboottttoomm
        status bar at bottom of the screen (blue on white)

     ccoolloorr--hheellpp
        screen used to show help screen (black on cyan)

     ccoolloorr--oonn--vvooll
        screen used to show current volume contents (white on purple)

     ccoolloorr--ffoorrmm
        screen used to get data (eg. change preferences, enter volume
        title) (white on black).



  2200..  MMuullttiippllee TTaappee BBaacckkuuppss

  For the use of multiple tape backups, these are the following
  assumptions made.


  2200..11..  WWrriittiinngg

  End of tape is indicated by one of:

  +o  error code == -1 && errno == ENOSPC

  +o  zero bytes written

  +o  less bytes written than we asked for


  2200..22..  RReeaaddiinngg

  End of tape is indicated by one of:

  +o  error code == -1 && errno == ENOSPC

  +o  error code == -1 && errno == ENODATA

  +o  returned less bytes than we asked for

  End of volume is indicated by

  +o  zero bytes read

  +o  error code == -1 && errno == ENODATA


  This is what ftape does for floppy controller tape drives. If are
  using another sort of tape drive, then the multiple tape backup
  feature will only work if the above is true. If it is not true and you
  are able to work out what your particular tape drive does, if you send
  me details, I will try and incorporate it into future releases. I'm
  especially interested in users of SCSI drives since I have no access
  to them.

  If your tape drive doesn't support the above, you can use the ----ttaappee--
  ssiizzee option to tell _t_a_p_e_r the size of your tape drive. Tape size is
  specified in megabytes, eg. --tape-size 120 means that your tape is
  120MB, --tape-size 250 means that your tape is 250MB. Note that these
  must be _u_n_c_o_m_p_r_e_s_s_e_d sizes. You must specify the same number every
  time you start _t_a_p_e_r - you can put it in your preference file if
  necessary. If you don't specify the same number, you will get very
  spurious, unpredictable results.



  2211..  CCrroossss ppllaattffoorrmm ssuuppppoorrtt

  _T_a_p_e_r was primarily designed for linux running on an intel processor.
  With linux now becoming very multi-platform, changes have been made to
  _t_a_p_e_r to enable cross platform support. Some of the changes are:


  +o  All data is written to the tape in little endian format. If you
     define the TAPER_BIG_ENDIAN makefile option, _t_a_p_e_r will convert
     everything read from the tape to big endian so that your machine
     can use it. Even if you make a backup from a big endian machine,
     the data on the tape will be in little endian format.

  +o  The info files are also stored in little endian format so that they
     should be portable accross different architectures.

  +o  Data types are defined in _t_t_y_p_e_s_._h.  Taper uses 32 bit signed &
     unsigned data, unsigned 16 bit, and 8 bit signed & unsigned data.
     Change the appropriate types for your machine. Attributes such as
     gid_t, uid_t, dev_t, umode_t, and time_t are hard-coded to the
     intel defaults of unsigned short (unsigned 16 bit) and long (32
     bits) respectively. If your machine uses different types for these,
     then you should look at the code in _t_a_p_e_i_o_._c, specifically, the
     functions tape_read_fi and tape_write_fi and modify it to convert
     the intel types to a type applicable for your machine. If your
     machine uses longer data types than an unsigned 16 bit used by
     intel linux, then, for the time being, you are in strife.  In a
     future _t_a_p_e_r version, I intend to move away from the 16 bit format
     and use my own representation. However this will mean that existing
     archives are incompatible with the new format, so I won't be doing
     this for a while.

  +o  Since version 6.3, _t_a_p_e_r aligns all structures on addresses that
     are divisable by 4. It does this by padding out the strings so that
     they have a length divisable by 4. Then an offset is added (which
     is the number of bytes that the structure needs to make it a length
     of a multiple of 4). Versions less than 6.3 do not support this, so
     it is unlikely that these archives will work on machines that
     require aligned addresses.  However, for machines that do not
     require aligned access, there is no problem.


  2222..  LLiimmiittaattiioonnss

  Maximum length of total pathname is set by MAXNAMLEN. It is usually
  set to 255 bytes long. If you have a very long pathname, then you may
  cause _t_a_p_e_r to segfault.


  If a file grows while _t_a_p_e_r is trying to back it up, only the
  beginning part of the file is backed up (specifically, the number of
  bytes the file was when _t_a_p_e_r started to back up this file) and the
  rest is lost. This is because of inadequate mandatory file locking. I
  know that this is being worked in the kernel and hopefully, when the
  kernel code pertaining to this is stable, I can implement it in _t_a_p_e_r.



  2233..  BBuuggss

  Please report bugs to me at the address below. If the bug causes a
  segment violation or causes the program to crash in any other way, if
  you know how to use gdb, could you re-compile your source using the
  Makefile.debug makefile, and tell me what source line the program
  crashed. Also, please tell me what kernel version, gcc version, C
  library version, ncurses version you are using.

  As this is a sideline, I may not be able to respond to e-mail
  immediately.  However, if you do not receive a reply within one week,
  then repost as I may have forgotten about it!



  2244..  MMaajjoorr bbuuggss iinn eeaarrllyy vveerrssiioonnss

  There was a bug in taper-5.1.1 when creating archives. If you made an
  archive with 5.1.1, unfortunately, you will have to re-backup if you
  find that restore doesn't work since it was a pretty major bug.
  However, since taper-5.1.1 was only released a day before 5.1.2 (which
  fixed the bug) was released, hopefully, not too many people are
  affected.

  From taper-5.0 to taper-5.1.3, there was another not so serious bug.
  This caused the file counts on the archives to be incorrect in
  certain, obscure situations. You will know if you have this bug
  because you will find that you have funny files on your restore
  screen, and some files and directories will be missing altogether.
  There is no way to correct the errors on the archive other than re-
  backing up, however 5.1.4 (and later) have a `fudge factor' which will
  allow to your to use your archives normally. Just run _m_k_i_n_f_o on your
  archive and taper will recognize the buggy archive and fudge your info
  file automatically for you.

  I don't believe it - the bug crept back into 5.1.5 - it's like a virus
  that won't go away! Anyway, 5.2 corrects it.

  In versions 5.6 to 6.1 (inclusive), there was an obscure backup bug
  which causes a problem if there were two buffers queued for output
  when the tape drive was closed. Unfortunately, there is no fix for
  this, however, it is a relatively rare bug, and at most, you will lose
  the last two blocks of the backup. This bug only occurred if you used
  triple buffering.

  In versions up to 6.1.3, there was a problem with internal compression
  of files > 32K. It was a spurious bug.



  2255..  FFiinnaallllyy

  Wow!  You made it through all the 'documentation'! I'm impressed.

  I would appreciate a short message if you find the program useful and
  are using it. This will allow me to work out whether people are using
  it and whether to continue development. If you could also state what
  machine you are using, hard drive/floppy controllers, tape drive type,
  SCSI card etc.., then this will help me to maintain a compatibility
  list.



  Happy backing up,

  Yusuf Nagree
  yusuf@nagree.u-net.com
  5AUG96































