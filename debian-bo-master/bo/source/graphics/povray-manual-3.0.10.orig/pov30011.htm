<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 485 pri 0"><a name="ref 486 pri 0"><center><h3><a name="section 4.9.9">
Section 4.9.9<br>Limitations Of Special Textures</h3></center>
There are a couple limitations to all of the special textures we have seen (from textures, pigment and normal maps through material maps). First, if we have used the default directive to set the default texture for all items in our scene, it will not accept any of the special textures discussed here. This is really quite minor, since we can always declare such a texture and apply it individually to all objects. It doesn't actually prevent us from doing anything we couldn't otherwise do.<p>
The other is more limiting, but as we will shortly see, can be worked around quite easily. If we have worked with layered textures, we have already seen how we can pile multiple texture patterns on top of one another (as long as one texture has transparency in it). This very useful technique has a problem incorporating the special textures we have just seen as a layer. But there is an answer!<p>
For example, say we have a layered texture called <strong>Speckled_Metal</strong>, which produces a silver metallic surface, and then puts tiny specks of rust all over it. Then we decide, for a really rusty look, we want to create patches of concentrated rust, randomly over the surface. The <strong>obvious</strong> approach is to create a special texture pattern, with transparency to use as the top layer. But of course, as we have seen, we wouldn't be able to use that texture pattern as a layer. We would just generate an error message. The solution is to turn the problem inside out, and make our layered texture part of the texture pattern instead, like this<p>
<listing>
  // This part declares a pigment for use
  // in the rust patch texture pattern
  #declare Rusty = pigment {
    granite
    color_map {
      [ 0 rgb &lt;0.2, 0, 0&gt; ]
      [ 1 Brown ]
    }
    frequency 20
  }

  // And this part applies it
  // Notice that our original layered texture
  // &quot;Speckled_Metal&quot; is now part of the map
  #declare Rust_Patches = texture {
    bozo
    texture_map {
      [ 0.0  pigment {Rusty} ]
      [ 0.75 Speckled_Metal ]
      [ 1.0  Speckled_Metal ]
    }
  }
</listing>
<p>
And the ultimate effect is the same as if we had layered the rust patches on to the speckled metal anyway.<p>
With the full array of patterns, pigments, normals, finishes, layered and special textures, there is now practically nothing we cannot create in the way of amazing textures. An almost infinite number of new possibilities are just waiting to be created!<hr>
<a name="ref 487 pri 0"><a name="ref 488 pri 0"><center><h3><a name="section 4.10">
Section 4.10<br>Using Atmospheric Effects</h3></center>
POV-Ray offers a variety of atmospheric effects, i. e. features that affect the background of the scene or the air by which everything is surrounded.<p>
It is easy to assign a simple color or a complex color pattern to a virtual sky sphere. You can create anything from a cloud free, blue summer sky to a stormy, heavy clouded sky. Even starfields can easily be created.<p>
You can use different kinds of fog to create foggy scenes. Multiple fog layers of different colors can add an eerie touch to your scene.<p>
A much more realistic effect can be created by using an atmosphere, a constant fog that interacts with the light coming from light sources. Beams of light become visible and objects will cast shadows into the fog.<p>
Last but not least you can add a rainbow to your scene.<hr>
<a name="ref 489 pri 0"><a name="ref 490 pri 0"><a name="ref 491 pri 1"><center><h3><a name="section 4.10.1">
Section 4.10.1<br>The Background</h3></center>
The background feature is used to assign a color to all rays that don't hit any object. This is done in the following way.<p>
<listing>
  camera {
    location &lt;0, 0, -10&gt;
    look_at &lt;0, 0, 0&gt;
  }

  background { color rgb &lt;0.2, 0.2, 0.3&gt; }

  sphere { 0, 1
    pigment { color rgb &lt;0.8, 0.5, 0.2&gt; }
  }
</listing>
<p>
The background color will be visible if a sky sphere is used and if some translucency remains after all sky sphere pigment layers are processed.<hr>
<a name="ref 492 pri 0"><a name="ref 493 pri 0"><a name="ref 494 pri 1"><a name="ref 495 pri 2"><center><h3><a name="section 4.10.2">
Section 4.10.2<br>The Sky Sphere</h3></center>
The sky sphere can be used to easily create a cloud covered sky, a nightly star sky or whatever sky you have in mind.<p>
In the following examples we'll start with a very simple sky sphere that will get more and more complex as we add new features to it.<hr>
<a name="ref 496 pri 0"><a name="ref 497 pri 0"><center><h3><a name="section 4.10.2.1">
Section 4.10.2.1<br>Creating a Sky with a Color Gradient</h3></center>
Beside the single color sky sphere that is covered with the background feature the simplest sky sphere is a color gradient.<p>
You may have noticed that the color of the sky varies with the angle to the earth's surface normal. If you look straight up the sky normally has a much deeper blue than it has at the horizon.<p>
We want to model this effect using the sky sphere as shown in the scene below (<b>skysph1.pov</b>).<p>
<listing>
  #include &quot;colors.inc&quot;

  camera {
    location &lt;0, 1, -4&gt;
    look_at &lt;0, 2, 0&gt;
    angle 80
  }

  light_source { &lt;10, 10, -10&gt; White }

  sphere { 2*y, 1
    pigment { color rgb &lt;1, 1, 1&gt; }
    finish { ambient 0.2 diffuse 0 reflection 0.6 }
  }

  sky_sphere {
    pigment {
      gradient y
      color_map {
        [0 color Red]
        [1 color Blue]
      }
      scale 2
      translate -1
    }
  }
</listing>
<p>
The interesting part is the sky sphere statement. It contains a pigment that describe the look of the sky sphere. We want to create a color gradient along the viewing angle measured against the earth's surface normal. Since the ray direction vector is used to calculate the pigment colors we have to use the y-gradient.<p>
The scale and translate transformation are used to map the points derived from the direction vector to the right range. Without those transformations the pattern would be repeated twice on the sky sphere. The <a name="ref 215 pri 7"><strong>scale</strong> statement is used to avoid the repetition and the <strong>translate -1</strong> statement moves the color at index zero to the bottom of the sky sphere (that's the point of the sky sphere you'll see if you look straight down).<p>
After this transformation the color entry at position 0 will be at the bottom of the sky sphere, i. e. below us, and the color at position 1 will be at the top, i. e. above us.<p>
The colors for all other positions are interpolated between those two colors as you can see in the resulting image.<p>
<center><img src="pov3002a.gif" border=0 width=320 height=240><br><cite>A simple gradient sky sphere.</cite></center><br> <p>
If you want to start one of the colors at a specific angle you'll first have to convert the angle to a color map index. This is done by using the formula<p>
<pre>
  color_map_index = (1 - cos(angle)) / 2
</pre>
<p>
where the angle is measured against the negated earth's surface normal. This is the surface normal pointing towards the center of the earth. An angle of 0 degrees describes the point below us while an angle of 180 degrees represents the zenith.<p>
In POV-Ray you first have to convert the degree value to radian values as it is shown in the following example.<p>
<listing>
  sky_sphere {
    pigment {
      gradient y
      color_map {
        [(1-cos(radians( 30)))/2 color Red]
        [(1-cos(radians(120)))/2 color Blue]
      }
      scale 2
      translate -1
    }
  }
</listing>
<p>
This scene uses a color gradient that starts with a red color at 30 degrees and blends into the blue color at 120 degrees. Below 30 degrees everything is red while above 120 degrees all is blue.<hr>
<a name="ref 498 pri 0"><a name="ref 499 pri 0"><center><h3><a name="section 4.10.2.2">
Section 4.10.2.2<br>Adding the Sun</h3></center>
In the following example we will create a sky with a red sun surrounded by a red color halo that blends into the dark blue night sky. We'll do this using only the sky sphere feature.<p>
The sky sphere we use is shown below. A ground plane is also added for greater realism (<b>skysph2.pov</b>).<p>
<listing>
  sky_sphere {
    pigment {
      gradient y
      color_map {
        [0.000 0.002 color rgb &lt;1.0, 0.2, 0.0&gt;
                     color rgb &lt;1.0, 0.2, 0.0&gt;]
        [0.002 0.200 color rgb &lt;0.8, 0.1, 0.0&gt;
                     color rgb &lt;0.2, 0.2, 0.3&gt;]
      }
      scale 2
      translate -1
    }
    rotate -135*x
  }

  plane { y, 0
    pigment { color Green }
    finish { ambient .3 diffuse .7 }
  }
</listing>
<p>
The gradient pattern and the transformation inside the pigment are the same as in the example in the previous section.<p>
The color map consists of three colors. A bright, slightly yellowish red that is used for the sun, a darker red for the halo and a dark blue for the night sky. The sun's color covers only a very small portion of the sky sphere because we don't want the sun to become too big. The color is used at the color map values 0.000 and 0.002 to get a sharp contrast at value 0.002 (we don't want the sun to blend into the sky). The darker red color used for the halo blends into the dark blue sky color from value 0.002 to 0.200. All values above 0.200 will reveal the dark blue sky.<p>
The <strong>rotate -135*x</strong> statement is used to rotate the sun and the complete sky sphere to its final position. Without this rotation the sun would be at 0 degrees, i.e. right below us.<p>
<center><img src="pov3002b.gif" border=0 width=320 height=240><br><cite>A red sun descends into the night.</cite></center><br> <p>
Looking at the resulting image you'll see what impressive effects you can achieve with the sky sphere.<hr>
<a name="ref 500 pri 0"><a name="ref 501 pri 0"><center><h3><a name="section 4.10.2.3">
Section 4.10.2.3<br>Adding Some Clouds</h3></center>
To further improve our image we want to add some clouds by adding a second pigment. This new pigment uses the bozo pattern to create some nice clouds. Since it lays on top of the other pigment it needs some translucent colors in the color map (look at entries 0.5 to 1.0).<p>
<listing>
  sky_sphere {
    pigment {
      gradient y
      color_map {
        [0.000 0.002 color rgb &lt;1.0, 0.2, 0.0&gt;
                     color rgb &lt;1.0, 0.2, 0.0&gt;]
        [0.002 0.200 color rgb &lt;0.8, 0.1, 0.0&gt;
                     color rgb &lt;0.2, 0.2, 0.3&gt;]
      }
      scale 2
      translate -1
    }
    pigment {
      bozo
      turbulence 0.65
      octaves 6
      omega 0.7
      lambda 2
      color_map {
          [0.0 0.1 color rgb &lt;0.85, 0.85, 0.85&gt;
                   color rgb &lt;0.75, 0.75, 0.75&gt;]
          [0.1 0.5 color rgb &lt;0.75, 0.75, 0.75&gt;
                   color rgbt &lt;1, 1, 1, 1&gt;]
          [0.5 1.0 color rgbt &lt;1, 1, 1, 1&gt;
                   color rgbt &lt;1, 1, 1, 1&gt;]
      }
      scale &lt;0.2, 0.5, 0.2&gt;
    }
    rotate -135*x
  }
</listing>
<p>
<center><img src="pov3002c.gif" border=0 width=320 height=240><br><cite>A cloudy sky with a setting sun.</cite></center><br> <p>
The sky sphere has one drawback as you might notice when looking at the final image (<b>skysph3.pov</b>). The sun doesn't emit any light and the clouds will not cast any shadows. If you want to have clouds that cast shadows you'll have to use a real, large sphere with an appropriate texture and a light source somewhere outside the sphere.<hr>
<a name="ref 502 pri 0"><a name="ref 503 pri 0"><a name="ref 504 pri 3"><center><h3><a name="section 4.10.3">
Section 4.10.3<br>The Fog</h3></center>
You can use the fog feature to add fog of two different types to your scene: constant fog and ground fog. The constant fog has a constant density everywhere while the ground fog's density decreases as you move upwards.<p>
The usage of both fog types will be described in the next sections in detail.<hr>
<a name="ref 505 pri 0"><a name="ref 506 pri 0"><center><h3><a name="section 4.10.3.1">
Section 4.10.3.1<br>A Constant Fog</h3></center>
The simplest fog type is the constant fog that has a constant density in all locations. It is specified by a <a name="ref 269 pri 1"><strong>distance</strong> keyword which actually describes the fog's density and a fog <a name="ref 113 pri 2"><strong>color</strong>.<p>
The distance value determines the distance at which 36.8% of the background are still visible (for a more detailed explanation of how the fog is calculated read the reference section <a href="pov3002d.htm#ref 504 pri 2">&quot;Fog&quot;</a>).<p>
The fog color can be used to create anything from a pure white to a red, blood-colored fog. You can also use a black fog to simulate the effect of a limited range of vision.<p>
The following example will show you how to add fog to a simple scene (<b>fog1.pov</b>).<p>
<listing>
  #include &quot;colors.inc&quot;

  camera {
    location  &lt;0, 20, -100&gt;
  }

  background { colour SkyBlue }

  plane { y, -10
    pigment {
      checker colour Yellow colour Green
      scale 20
    }
  }

  sphere { &lt;0, 25, 0&gt;, 40
    pigment { Red }
    finish { phong 1.0 phong_size 20 }
  }

  sphere { &lt;-100, 150, 200&gt;,  20
    pigment { Green }
    finish { phong 1.0 phong_size 20 }
  }

  sphere { &lt;100, 25, 100&gt;, 30
    pigment { Blue }
    finish { phong 1.0 phong_size 20 }
  }

  light_source { &lt;100, 120, 40&gt; colour White}

  fog {
    distance 150
    colour rgb&lt;0.3, 0.5, 0.2&gt;
  }
</listing>
<p>
<center><img src="pov3002d.gif" border=0 width=320 height=240><br><cite>A foggy scene.</cite></center><br> <p>
According to their distance the spheres in this scene more or less vanish in the greenish fog we used, as does the checkerboard plane.<hr>
<a name="ref 507 pri 0"><a name="ref 508 pri 0"><center><h3><a name="section 4.10.3.2">
Section 4.10.3.2<br>Setting a Minimum Translucency</h3></center>
If you want to make sure that the background does not completely vanish in the fog you can set the transmittance channel of the fog's color to the amount of background you always want to be visible.<p>
Using as transmittance value of 0.2 as in<p>
<listing>
  fog {
    distance 150
    colour rgbt&lt;0.3, 0.5, 0.2, 0.2&gt;
  }
</listing>
<p>
the fog's translucency never drops below 20% as you can see in the resulting image (<b>fog2.pov</b>).<p>
<center><img src="pov3002e.gif" border=0 width=320 height=240><br><cite>Adding a translucency threshold you make sure that the background does not vanish.</cite></center><br> <hr>
<a name="ref 509 pri 0"><a name="ref 510 pri 0"><center><h3><a name="section 4.10.3.3">
Section 4.10.3.3<br>Creating a Filtering Fog</h3></center>
The greenish fog we have used so far doesn't filter the light passing through it. All it does is to diminish the light's intensity. We can change this by using a non-zero filter channel in the fog's color (<b>fog3.pov</b>).<p>
<listing>
  fog {
    distance 150
    colour rgbf&lt;0.3, 0.5, 0.2, 1.0&gt;
  }
</listing>
<p>
The filter value determines the amount of light that is filtered by the fog. In our example 100% of the light passing through the fog will be filtered by the fog. If we had used a value of 0.7 only 70% of the light would have been filtered. The remaining 30% would have passed unfiltered.<p>
<center><img src="pov3002f.gif" border=0 width=320 height=240><br><cite>A filtering fog.</cite></center><br> <p>
You'll notice that the intensity of the objects in the fog is not only diminished due to the fog's color but that the colors are actually influenced by the fog. The red and especially the blue sphere got a green hue.<hr>
<a name="ref 511 pri 0"><a name="ref 512 pri 0"><center><h3><a name="section 4.10.3.4">
Section 4.10.3.4<br>Adding Some Turbulence to the Fog</h3></center>
In order to make our somewhat boring fog a little bit more interesting we can add some turbulence, making it look like it had a non-constant density (<b>fog4.pov</b>).<p>
<listing>
  fog {
    distance 150
    colour rgbf&lt;0.3, 0.5, 0.2, 1.0&gt;
    turbulence 0.2
    turb_depth 0.3
  }
</listing>
<p>
<center><img src="pov30030.gif" border=0 width=320 height=240><br><cite>Adding some turbulence makes the fog more interesting.</cite></center><br> <p>
The <a name="ref 283 pri 8"><strong>turbulence</strong> keyword is used to specify the amount of turbulence used while the <a name="ref 513 pri 8"><strong>turb_depth</strong> value is used to move the point at which the turbulence value is calculated along the viewing ray. Values near zero move the point to the viewer while values near one move it to the intersection point (the default value is 0.5). This parameter can be used to avoid noise that may appear in the fog due to the turbulence (this normally happens at very far away intersection points, especially if no intersection occurs, i. e. the background is hit). If this happens just lower the <a name="ref 513 pri 9"><strong>turb_depth</strong> value until the noise vanishes.<p>
You should keep in mind that the actual density of the fog does not change. Only the distance-based attenuation value of the fog is modified by the turbulence value at a point along the viewing ray.<hr>
<a name="ref 514 pri 0"><a name="ref 515 pri 0"><center><h3><a name="section 4.10.3.5">
Section 4.10.3.5<br>Using Ground Fog</h3></center>
The much more interesting and flexible fog type is the ground fog, which is selected with the <a name="ref 516 pri 0"><strong>fog_type</strong> statement. It's appearance is described with the <a name="ref 517 pri 1"><strong>fog_offset</strong> and <a name="ref 518 pri 2"><strong>fog_alt</strong> keywords. The <a name="ref 517 pri 4"><strong>fog_offset</strong> specifies the height, i. e. y value, below which the fog has a constant density of one. The <a name="ref 518 pri 6"><strong>fog_alt</strong> keyword determines how fast the density of the fog will approach zero as one moves along the y axis. At a height of fog_offset+fog_alt the fog will have a density of 25%.<p>
The following example (<b>fog5.pov</b>) uses a ground fog which has a constant density below y=25 (the center of the red sphere) and quickly falls off for increasing altitudes.<p>
<listing>
  fog {
    distance 150
    colour rgbf&lt;0.3, 0.5, 0.2, 1.0&gt;
    fog_type 2
    fog_offset 25
    fog_alt 1
  }
</listing>
<p>
<center><img src="pov30031.gif" border=0 width=320 height=240><br><cite>The ground fog only covers the lower parts of the world.</cite></center><br> <hr>
<a name="ref 519 pri 0"><a name="ref 520 pri 0"><center><h3><a name="section 4.10.3.6">
Section 4.10.3.6<br>Using Multiple Layers of Fog</h3></center>
It is possible to use several layers of fog by using more than one fog statement in your scene file. This is quite useful if you want to get nice effects using turbulent ground fogs. You could add up several, differently colored fogs to create an eerie scene for example.<p>
Just try the following example (<b>fog6.pov</b>).<p>
<listing>
  fog {
    distance 150
    colour rgb&lt;0.3, 0.5, 0.2&gt;
    fog_type 2
    fog_offset 25
    fog_alt 1
    turbulence 0.1
    turb_depth 0.2
  }

  fog {
    distance 150
    colour rgb&lt;0.5, 0.1, 0.1&gt;
    fog_type 2
    fog_offset 15
    fog_alt 4
    turbulence 0.2
    turb_depth 0.2
  }

  fog {
    distance 150
    colour rgb&lt;0.1, 0.1, 0.6&gt;
    fog_type 2
    fog_offset 10
    fog_alt 2
  }
</listing>
<p>
<center><img src="pov30032.gif" border=0 width=320 height=240><br><cite>Quite nice results can be achieved using multiple layers of fog.</cite></center><br> <p>
You can combine constant density fogs, ground fogs, filtering fogs, non-filtering fogs, fogs with a translucency threshold, etc.<hr>

<center>
<a href="pov30012.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
