<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1243 pri 0"><a name="ref 523 pri 1"><center><h3><a name="section 7.5.5.3">
Section 7.5.5.3<br>Inverse</h3></center>
When using CSG it is often useful to invert an object so that it'll be inside-out. The appearance of the object is not changed, just the way that POV-Ray perceives it. When the <a name="ref 523 pri 1"><strong>inverse</strong> keyword is used the <strong>inside</strong> of the shape is flipped to become the <strong>outside</strong> and vice versa.<p>
Note that the difference operation is performed by intersecting the first object with the negation of the second object.<hr>
<a name="ref 1244 pri 0"><a name="ref 211 pri 1"><center><h3><a name="section 7.5.5.4">
Section 7.5.5.4<br>Union</h3></center>
 <center><img src="pov30045.gif" border=0 width=320 height=240><br><cite>The union of two objects.</cite></center><br> <p>
<a name="ref 211 pri 1">Unions are simply <strong>glue</strong> used to bind two or more shapes into a single entity that can be manipulated as a single object. The image above shows the union of A and B. The new object created by the union operation can be scaled, translated and rotated as a single shape. The entire union can share a single texture but each object contained in the union may also have its own texture, which will override any matching texture statements in the parent object.<p>
You should be aware that the surfaces inside the union will not be removed. As you can see from the figure this may be a problem for transparent unions. If you want those surfaces to be removed you'll have to use the merge operations explained in a later section.<p>
The following union will contain a box and a sphere.<p>
<listing>
  union {
    box { &lt;-1.5, -1, -1&gt;, &lt;0.5, 1, 1&gt; }
    cylinder { &lt;0.5, 0, -1&gt;, &lt;0.5, 0, 1&gt;, 1 }
  }
</listing>
<p>
Earlier versions of POV-Ray placed restrictions on unions so you often had to combine objects with <a name="ref 932 pri 1"><strong>composite</strong> statements. Those earlier restrictions have been lifted so composite is no longer needed. Composite is still supported for backwards compatibility but it is recommended that union is now used in it's place since future support for the composite keyword is not guaranteed.<hr>
<a name="ref 1245 pri 0"><a name="ref 214 pri 1"><a name="ref 214 pri 1"><center><h3><a name="section 7.5.5.5">
Section 7.5.5.5<br>Intersection</h3></center>
A point is inside an intersection if it is inside both objects, A and B, as show in the figure below.<p>
 <center><img src="pov30046.gif" border=0 width=320 height=240><br><cite>The intersection of two objects.</cite></center><br> <p>
For example:<p>
<listing>
  intersection {
    box { &lt;-1.5, -1, -1&gt;, &lt;0.5, 1, 1&gt; }
    cylinder { &lt;0.5, 0, -1&gt;, &lt;0.5, 0, 1&gt;, 1 }
  }
</listing>
<hr>
<a name="ref 1246 pri 0"><a name="ref 219 pri 1"><a name="ref 219 pri 1"><center><h3><a name="section 7.5.5.6">
Section 7.5.5.6<br>Difference</h3></center>
The CSG difference operation takes the intersection between the first object and the negation of the second object. Thus only points inside object A and outside object B belong to the difference of both objects.<p>
The results is a <strong>subtraction</strong> of the 2nd shape from the first shape as shown in the figure below.<p>
 <center><img src="pov30047.gif" border=0 width=320 height=240><br><cite>The difference between two objects.</cite></center><br> <p>
For example:<p>
<listing>
  difference {
    box { &lt;-1.5, -1, -1&gt;, &lt;0.5, 1, 1&gt; }
    cylinder { &lt;0.5, 0, -1&gt;, &lt;0.5, 0, 1&gt;, 1 }
  }
</listing>
<hr>
<a name="ref 1247 pri 0"><a name="ref 222 pri 1"><a name="ref 222 pri 1"><center><h3><a name="section 7.5.5.7">
Section 7.5.5.7<br>Merge</h3></center>
The union operation just glues objects together, it does not remove the objects' surfaces inside the union. If a transparent union is used those surface will get visible.<p>
The merge operations can be used to avoid this problem. It works just like union but it eliminates the inner surfaces like shown in the figure below.<p>
 <center><img src="pov30048.gif" border=0 width=320 height=240><br><cite>Merge removes inner surfaces.</cite></center><br> <hr>
<a name="ref 1248 pri 0"><a name="ref 1249 pri 0"><a name="ref 121 pri 0"><center><h3><a name="section 7.5.6">
Section 7.5.6<br>Light Sources</h3></center>
The last object covered is the <a name="ref 120 pri 0"><strong>light source</strong>. Light sources have no visible shape of their own. They are just points or areas which emit light. Their full syntax is:<p>
<listing>
  light_source {
    &lt;LOCATION&gt;
    color &lt;COLOUR&gt;
    [ spotlight ]
    [ point_at &lt;POINT_AT&gt; ]
    [ radius RADIUS ]
    [ falloff FALLOFF ]
    [ tightness TIGHTNESS ]
    [ area_light &lt;AXIS1&gt;, &lt;AXIS2&gt;, SIZE1, SIZE2 ]
    [ adaptive ADAPTIVE ]
    [ jitter JITTER ]
    [ looks_like { OBJECT } ]
    [ fade_distance FADE_DISTANCE ]
    [ fade_power FADE_POWER ]
    [ atmospheric_attenuation BOOL ]
  }
</listing>
<p>
The different types of light sources and the optional modifiers are described in the following sections.<hr>
<a name="ref 1250 pri 0"><a name="ref 1251 pri 0"><center><h3><a name="section 7.5.6.1">
Section 7.5.6.1<br>Point Lights</h3></center>
A point light source sends light of the specified color uniformly in all directions. Its location is described by the <a name="ref 881 pri 2"><strong>location</strong> keyword and its color is given by the <a name="ref 113 pri 6"><strong>color</strong> keyword. The complete syntax is:<p>
<listing>
  light_source {
    &lt;LOCATION&gt;
    color &lt;COLOUR&gt;
    [ looks_like { OBJECT } ]
    [ fade_distance FADE_DISTANCE ]
    [ fade_power FADE_POWER ]
    [ atmospheric_attenuation BOOL ]
  }
</listing>
<p>
The other keywords will be explained later.<hr>
<a name="ref 1252 pri 0"><a name="ref 1253 pri 0"><a name="ref 239 pri 0"><center><h3><a name="section 7.5.6.2">
Section 7.5.6.2<br>Spotlights</h3></center>
A <a name="ref 239 pri 1"><strong>spotlight</strong> is a point light source where the rays of light are constrained by a cone. The light is bright in the center of this cone and falls off or darkens at the edges of the cone. The syntax is:<p>
<listing>
  light_source {
    &lt;LOCATION&gt;
    color &lt;COLOUR&gt;
    spotlight
    point_at &lt;POINT_AT&gt;
    radius RADIUS
    falloff FALLOFF
    tightness TIGHTNESS
    [ looks_like { OBJECT } ]
    [ fade_distance FADE_DISTANCE ]
    [ fade_power FADE_POWER ]
    [ atmospheric_attenuation BOOL ]
  }
</listing>
<p>
The spotlight is identified by the <a name="ref 239 pri 6"><strong>spotlight</strong> keyword. It is located at LOCATION and points at POINT_AT. The following illustration will be helpful in understanding how these values relate to each other.<p>
 <center><img src="pov30049.gif" border=0 width=320 height=240><br><cite>The geometry of a spotlight.</cite></center><br> <p>
<a name="ref 240 pri 15">The spotlight's other parameters are <a name="ref 240 pri 25"><strong>radius</strong>, <a name="ref 241 pri 26"><strong>falloff</strong> and <a name="ref 242 pri 27"><strong>tightness</strong>.<p>
Think of a spotlight as two nested cones as shown in the figure. The inner cone is specified by the radius parameter and is fully lit. The outer cone is the falloff cone beyond which there is no light. The values for these two parameters are half the opening angles of the corresponding cones, both angles have to be smaller than 90 degrees. The light smoothly falls off between the radius and the falloff angle like shown in the figures below (as long as the radius angle is not negative).<p>
<center><img src="pov3004a.gif" border=0 width=320 height=240><br><cite>Intensity multiplier curve with a fixed falloff angle of 45 degrees.</cite></center><br> <p>
<center><img src="pov3004b.gif" border=0 width=320 height=240><br><cite>Intensity multiplier curve with a fixed radius angle of 45 degrees.</cite></center><br> <p>
<a name="ref 242 pri 29">The tightness value specifies how quickly the light dims, or falls off, from the spotlight's center line to the falloff cone (full darkness outside). The default value for tightness is 10. Lower tightness values will make the spotlight brighter, making the spot <strong>wider</strong> and the edges sharper. Higher values will dim the spotlight, making the spot <strong>tighter</strong> and the edges softer. Values from 1 to 100 are acceptable.<p>
<center><img src="pov3004c.gif" border=0 width=320 height=240><br><cite>Intensity multiplier curve with fixed angle and falloff angles of 30 and 60 degrees respectively and different tightness values.</cite></center><br> <p>
You should note from the figures that the radius and falloff angles interact with the tightness parameter. Only negative radius angles will give the tightness value full control over the spotlight's appearance as you can see from the figure below. In that case the falloff angle has no effect and the lit area is only determined by the tightness parameter.<p>
<center><img src="pov3004d.gif" border=0 width=320 height=240><br><cite>Intensity multiplier curve with a negative radius angle and different tightness values.</cite></center><br> <p>
Spotlights may be used anyplace that a normal light source is used. Like any light sources, they are invisible. They are treated as shapes and may be included in CSG shapes. They may also be used in conjunction with area lights.<hr>
<a name="ref 1254 pri 0"><a name="ref 1255 pri 0"><a name="ref 138 pri 8"><center><h3><a name="section 7.5.6.3">
Section 7.5.6.3<br>Cylindrical Lights</h3></center>
Cylindrical light sources work pretty much like spotlights except that the light rays are constraint by a cylinder and not a cone. The syntax is:<p>
<listing>
  light_source {
    &lt;LOCATION&gt;
    color &lt;COLOUR&gt;
    cylinder
    point_at &lt;POINT_AT&gt;
    radius RADIUS
    falloff FALLOFF
    tightness TIGHTNESS
    [ looks_like { OBJECT } ]
    [ fade_distance FADE_DISTANCE ]
    [ fade_power FADE_POWER ]
    [ atmospheric_attenuation BOOL ]
  }
</listing>
<p>
The <a name="ref 240 pri 19"><strong>radius</strong>, <a name="ref 241 pri 21"><strong>falloff</strong> and <a name="ref 242 pri 24"><strong>tightness</strong> keywords control the same features as with the spotlight.<p>
You should keep in mind that the cylindrical light source is still a point light source. The rays are emitted from one point and are only constraint by a cylinder. The light rays are not parallel.<hr>
<a name="ref 1256 pri 0"><a name="ref 1257 pri 0"><center><h3><a name="section 7.5.6.4">
Section 7.5.6.4<br>Area Lights</h3></center>
Area light sources occupy a finite, one- or two-dimensional area of space. They can cast soft shadows because they can partially block light.<p>
The area lights used in POV-Ray are rectangular in shape, sort of like a flat panel light. Rather than performing the complex calculations that would be required to model a true area light, it is approximated as an array of point light sources spread out over the area occupied by the light. The intensity of each individual point light in the array is dimmed so that the total amount of light emitted by the light is equal to the light color specified in the declaration. The syntax is:<p>
<listing>
  light_source {
    &lt;LOCATION&gt;
    color &lt;COLOUR&gt;
    area_light &lt;AXIS1&gt;, &lt;AXIS2&gt;, SIZE1, SIZE2
    adaptive ADAPTIVE
    jitter JITTER
    [ spotlight ]
    [ point_at &lt;POINT_AT&gt; ]
    [ radius RADIUS ]
    [ falloff FALLOFF ]
    [ tightness TIGHTNESS ]
    [ looks_like { OBJECT } ]
    [ fade_distance FADE_DISTANCE ]
    [ fade_power FADE_POWER ]
    [ atmosphere BOOL ]
    [ atmospheric_attenuation BOOL ]
  }
</listing>
<p>
The light's location and color are specified in the same way as a for a regular light source.<p>
The <a name="ref 842 pri 0"><strong>area_light</strong> command defines the size and orientation of the area light as well as the number of lights in the light source array. The vectors AXIS1 and AXIS2 specify the lengths and directions of the edges of the light. Since the area lights are rectangular in shape these vectors should be perpendicular to each other. The larger the size of the light the thicker the soft part of shadows will be. The numbers SIZE1 and SIZE2 specify the dimensions of the array of point lights. The more lights you use the smoother your shadows will be but the longer they will take to render.<p>
The <a name="ref 251 pri 7"><strong>jitter</strong> command is optional. When used it causes the positions of the point lights in the array to be randomly jittered to eliminate any shadow banding that may occur. The jittering is completely random from render to render and should not be used when generating animations.<p>
Note that it is possible to specify spotlight parameters along with the area light parameters to create <strong>area spotlights</strong>. Using area spotlights is a good way to speed up scenes that use area lights since you can confine the lengthy soft shadow calculations to only the parts of your scene that need them.<p>
An interesting effect can be created using a linear light source. Rather than having a rectangular shape, a linear light stretches along a line sort of like a thin fluorescent tube. To create a linear light just create an area light with one of the array dimensions set to 1.<p>
The <a name="ref 250 pri 7"><strong>adaptive</strong> command is used to enable adaptive sampling of the light source. By default POV-Ray calculates the amount of light that reaches a surface from an area light by shooting a test ray at every point light within the array. As you can imagine this is very slow. Adaptive sampling on the other hand attempts to approximate the same calculation by using a minimum number of test rays. The number specified after the keyword controls how much adaptive sampling is used. The higher the number the more accurate your shadows will be but the longer they will take to render. If you're not sure what value to use a good starting point is <strong>adaptive 1</strong>. The <strong>adaptive</strong> keyword only accepts integer values and cannot be set lower than 0.<p>
When performing adaptive sampling POV-Ray starts by shooting a test ray at each of the four corners of the area light. If the amount of light received from all four corners is approximately the same then the area light is assumed to be either fully in view or fully blocked. The light intensity is then calculated as the average intensity of the light received from the four corners. However, if the light intensity from the four corners differs significantly then the area light is partially blocked. The area light is split into four quarters and each section is sampled as described above. This allows POV-Ray to rapidly approximate how much of the area light is in view without having to shoot a test ray at every light in the array. Visually the sampling goes like shown below.<p>
 <center><img src="pov3004e.gif" border=0 width=320 height=240><br><cite>Area light adaptive samples.</cite></center><br> <p>
While the adaptive sampling method is fast (relatively speaking) it can sometimes produces inaccurate shadows. The solution is to reduce the amount of adaptive sampling without completely turning it off. The number after the adaptive keyword adjusts the number of times that the area light will be split before the adaptive phase begins. For example if you use <strong>adaptive 0</strong> a minimum of 4 rays will be shot at the light. If you use <strong>adaptive 1</strong> a minimum of 9 rays will be shot (<strong>adaptive 2</strong> gives 25 rays, <strong>adaptive 3</strong> gives 81 rays, etc). Obviously the more shadow rays you shoot the slower the rendering will be so you should use the lowest value that gives acceptable results.<p>
The number of rays never exceeds the values you specify for rows and columns of points. For example <strong>area_light x,y,4,4</strong> specifies a 4 by 4 array of lights. If you specify <strong>adaptive 3</strong> it would mean that you should start with a 9 by 9 array. In this case no adaptive sampling is done. The 4 by 4 array is used.<hr>
<a name="ref 1258 pri 0"><a name="ref 1259 pri 0"><center><h3><a name="section 7.5.6.5">
Section 7.5.6.5<br>Shadowless Lights</h3></center>
Using the <a name="ref 261 pri 0"><strong>shadowless</strong> keyword you can stop a light source from casting shadows.<hr>
<a name="ref 1260 pri 0"><a name="ref 254 pri 0"><center><h3><a name="section 7.5.6.6">
Section 7.5.6.6<br>Looks_like</h3></center>
Normally the light source itself has no visible shape. The light simply radiates from an invisible point or area. You may give a light source any shape by adding a <strong>looks_like { OBJECT </strong>} statement.<p>
There is an implied <a name="ref 255 pri 2"><strong>no_shadow</strong> attached to the <a name="ref 254 pri 5"><strong>looks_like</strong> object so that light is not blocked by the object. Without the automatic <a name="ref 255 pri 8"><strong>no_shadow</strong> the light inside the object would not escape. The object would, in effect, cast a shadow over everything.<p>
If you want the attached object to block light then you should attach it with a union and not a <a name="ref 254 pri 12"><strong>looks_like</strong> as follows:<p>
<listing>
  union {
    light_source { &lt;100, 200, -300&gt; color White }
    object { My_Lamp_Shape }
  }
</listing>
<p>
Presumably parts of the lamp shade are translucent to let some light out.<hr>
<a name="ref 1261 pri 0"><a name="ref 1262 pri 0"><center><h3><a name="section 7.5.6.7">
Section 7.5.6.7<br>Light Fading</h3></center>
By default POV-Ray does not diminish light from any light source as it travels through space. In order to get a more realistic effect <a name="ref 264 pri 0"><strong>fade_distance</strong> and <a name="ref 265 pri 0"><strong>fade_power</strong> can be used to model the distance based falloff in light intensity.<p>
The <a name="ref 264 pri 3"><strong>fade_distance</strong> keyword is used to specify the distance at which the full light intensity arrives, i. e. the intensity which was given by the <a name="ref 113 pri 8"><strong>color</strong> keyword. The actual attenuation is described by the <a name="ref 265 pri 11"><strong>fade_power</strong> keyword, which determines the falloff rate. E. g. linear or quadratic falloff can be used by setting FADE_POWER to 1 or 2 respectively. The complete formula to calculate the factor by which the light is attenuated is<p>
<pre>
                                 2
  attenuation = --------------------------------------
                 1 + (d / FADE_DISTANCE) ^ FADE_POWER
</pre>
<p>
with d being the distance the light has traveled.<p>
<center><img src="pov3004f.gif" border=0 width=320 height=240><br><cite>Light fading functions for different fading powers.</cite></center><br> <p>
You should note two important facts: First, for FADE_DISTANCEs larger than one the light intensity at distances smaller than FADE_DISTANCE actually increases. This is necessary to get the light source color if the distance traveled equals the FADE_DISTANCE. Second, only light coming directly from light sources is attenuated. Reflected or refracted light is not attenuated by distance.<hr>

<center>
<a href="pov30024.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
