<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 579 pri 0"><a name="ref 567 pri 0"><center><h3><a name="section 4.10.6.5">
Section 4.10.6.5<br>INI File Settings</h3></center>
Okay, so we have a grasp of how to code our file for animation. We know about the clock variable, user declared clock-relative variables, and the phase keyword. We know not to jitter or crand when we render a scene, and we're all set build some animations. Alright, let's have at it.<p>
The first concept we'll need to know is the INI file settings, <a name="ref 580 pri 0"><strong>Initial_Frame</strong> and <a name="ref 581 pri 0"><strong>Final_Frame</strong>. These are very handy settings that will allow us to render a particular number of frames and each with its own unique frame number, in a completely hands free way. It is of course, so blindingly simple that it barely needs explanation, but here's an example anyway. We just add the following lines to our favorite INI file settings<p>
<listing>
  Initial_Frame = 1
  Final_Frame = 20
</listing>
<p>
and we'll initiate an automated loop that will generate 20 unique frames. The settings themselves will automatically append a frame number onto the end of whatever we have set the output file name for, thus giving each frame an unique file number without having to think about it. Secondly, by default, it will cycle the clock variable up from 0 to 1 in increments proportional to the number of frames. This is very convenient, since, no matter whether we are making a five frame animated GIF or a 300 frame MPEG sequence, we will have a clock value which smoothly cylces from exactly the same start to exactly the same finish.<p>
Next, about that clock. In our example with the rolling ball code, we saw that sometimes we want the clock to cycle through values other than the default of 0.0 to 1.0. Well, when that's the case, there are setting for that too. The format is also quite simple. To make the clock run, as in our example, from 0.0 to 2.0, we would just add to your INI file the lines<p>
<listing>
  Initial_Clock = 0.0
  Final_Clock = 2.0
</listing>
<p>
Now, suppose we were developing a sequence of 100 frames, and we detected a visual glitch somewhere in frames, say 51 to 75. We go back over our code and we think we've fixed it. We'd like to render just those 25 frames instead of redoing the whole sequence from the beginning. What do we change?<p>
If we said make <a name="ref 580 pri 1"><strong>Initial_Frame</strong> = 51, and <a name="ref 581 pri 2"><strong>Final_Frame</strong> = 75, we're wrong. Even though this would re-render files named with numbers 51 through 75, they will not properly fit into our sequence, because the clock will begin at its initial value starting with frame 51, and cycle to final value ending with frame 75. The only time <a name="ref 580 pri 4"><strong>Initial_Frame</strong> and <a name="ref 581 pri 6"><strong>Final_Frame</strong> should change is if we are doing an essentially new sequence that will be appended onto existing material.<p>
If we wanted to look at just 51 through 75 of the original animation, we need two new INI settings<p>
<listing>
  Subset_Start_Frame = 51
  Subset_End_Frame = 75
</listing>
<p>
Added to settings from before, the clock will still cycle through its values proportioned from frames 1 to 100, but we will only be rendering that part of the sequence from the 51st to the 75th frames.<p>
This should give us a basic idea of how to use animation. Although, this introductory tutorial doesn't cover all the angles. For example, the last two settings we just saw, subset animation, can take fractional values, like 0.5 to 0.75, so that the number of actual frames will not change what portion of the animation is being rendered. There is also support for efficient odd-even field rendering as would be useful for animations prepared for display in interlaced playback such as television (see the reference section for full details).<p>
With POV-Ray 3 now fully supporting a complete host of animation options, a whole fourth dimension is added to the raytracing experience. Whether we are making a FLIC, AVI, MPEG, or simply an animated GIF for our web site, animation support takes a lot of the tedium out of the process. And don't forget that phase and clock can be used to explore the range of numerous texture elements, as well as some of the more difficult to master objects (hint: the julia fractal for example). So even if we are completely content with making still scenes, adding animation to our repetoire can greatly enhance our understanding of what POV-Ray is capable of. Adventure awaits!<hr>
<a name="ref 582 pri 0"><a name="ref 5 pri 0"><center><h3><a name="section 5">
Section 5<br>POV-Ray Reference</h3></center>
The reference section describes all command line switches and INI file keywords that are used to set the options of POV-Ray, the scene description language and all other features that are part of POV-Ray. It is supposed to be used as a reference for looking up things. It does not contain detailed explanations on how scenes are written or how POV-Ray is used. It just explains all features, their syntax, applications, limits, drawbacks, etc.<hr>
<a name="ref 583 pri 0"><a name="ref 6 pri 0"><center><h3><a name="section 6">
Section 6<br>POV-Ray Options</h3></center>
POV-Ray was originally created as a command-line program for operating systems without graphical interfaces, dialog boxes and pull-down menus. Most versions of POV-Ray still use command-line switches to tell it what to do. This documentation assumes you are using the command-line version. If you are using Macintosh, MS-Windows or other GUI versions, there will be dialog boxes or menus which do the same thing. There is system-specific documentation for each system describing the specific commands.<hr>
<a name="ref 584 pri 0"><a name="ref 585 pri 0"><center><h3><a name="section 6.1">
Section 6.1<br>Setting POV-Ray Options</h3></center>
There are two distinct ways of setting POV-Ray options: command line switches and INI file keywords. Both are explained in detail in the following sections.<hr>
<a name="ref 586 pri 0"><a name="ref 587 pri 0"><center><h3><a name="section 6.1.1">
Section 6.1.1<br>Command Line Switches</h3></center>
Command line switches consist of a <a name="ref 588 pri 0"><strong>+</strong> (plus) or <a name="ref 589 pri 0"><strong>-</strong> (minus) sign, followed by one or more alphabetic characters and possibly a numeric value. Here is a typical command line with switches.<p>
<listing>
  POVRAY +Isimple.pov +V +W80 +H60
</listing>
<p>
<b>povray</b> is the name of the program and it is followed by several switches. Each switch begins with a plus or minus sign. The <a name="ref 68 pri 3"><strong>+I</strong> switch with the filename tells POV-Ray what scene file it should use as input and <a name="ref 91 pri 4"><strong>+V</strong> tells the program to output its status to the text screen as it's working. The <a name="ref 590 pri 4"><strong>+W</strong> and <a name="ref 591 pri 4"><strong>+H</strong> switches set the width and height of the image in pixels. This image will be 80 pixels wide by 60 pixels high.<p>
In switches which toggle a feature, the plus turns it on and minus turns it off. For example <a name="ref 592 pri 4"><strong>+P</strong> turns on the <strong>pause for keypress  when finished</strong> option while <a name="ref 593 pri 4"><strong>-P</strong> turns it off. Other switches are used to specify values and do not toggle a feature. Either plus or minus may be used in that instance. For example <a name="ref 590 pri 5"><strong>+W</strong>320 sets the width to 320 pixels. You could also use <a name="ref 594 pri 5"><strong>-W</strong>320 and get the same results.<p>
Switches may be specified in upper or lower case. They are read left to right but in general may be specified in any order. If you specify a switch more than once, the previous value is generally overwritten with the last specification. The only exception is the <a name="ref 82 pri 10"><strong>+L</strong> switch for setting library paths. Up to ten unique paths may be specified.<p>
Almost all <a name="ref 588 pri 11"><strong>+</strong>/<a name="ref 589 pri 12"><strong>-</strong> switches have an equivalent option which can be used in an INI file which is described in the next section. A detailed description of each switch is given in the option reference section.<hr>
<a name="ref 595 pri 0"><a name="ref 72 pri 0"><a name="ref 71 pri 1"><center><h3><a name="section 6.1.2">
Section 6.1.2<br>Using INI Files</h3></center>
Because it is difficult to set more than a few options on a command line, you have the ability to put multiple options in one or more text files. These <strong>initialization files</strong> or <strong>INI files</strong> have <b>.ini</b> as their default extension. Previous versions of POV-Ray called them <strong>default files</strong> or <strong>DEF files</strong>. You may still use existing DEF files with this version of POV-Ray.<p>
The majority of options you use will be stored in INI files. The command line switches are recommended for options which you will turn off or on frequently as you perform test renderings of a scene you are developing. The file <b>povray.ini</b> is automatically read if present. You may specify additional INI files on the command-line by simply typing the file name on the command line. For example:<p>
<listing>
  POVRAY MYOPTS.INI
</listing>
<p>
If no extension is given, then <b>.ini</b> is assumed. POV-Ray knows this is not a switch because it is not preceded by a plus or minus. In fact a common error among new users is that they forget to put the <a name="ref 68 pri 5"><strong>+I</strong> switch before the input file name. Without the switch, POV-Ray thinks that the scene file <b>simple.pov</b> is an INI file. Don't forget! If no plus or minus precedes a command line switch, it is assumed to be an INI file name.<p>
You may have multiple INI files on the command line along with switches. For example:<p>
<listing>
  POVRAY MYOPTS +V OTHER
</listing>
<p>
This reads options from <b>myopts.ini</b>, then sets the <a name="ref 91 pri 7"><strong>+V</strong> switch, then reads options from <b>other.ini</b>.<p>
An INI file is a plain ASCII text file with options of the form...<p>
<listing>
  Option_keyword=VALUE ; Text after semicolon is a comment
</listing>
<p>
For example the INI equivalent of the switch <a name="ref 68 pri 12"><strong>+I</strong><b>simple.pov</b> is...<p>
<listing>
  Input_File_Name=simple.pov
</listing>
<p>
Options are read top to bottom in the file but in general may be specified in any order. If you specify an option more than once, the previous values are generally overwritten with the last specification. The only exception is the <a name="ref 104 pri 13"><strong>Library_Path</strong>=<b>path</b> options. Up to ten unique paths may be specified.<p>
Almost all INI-style options have equivalent <a name="ref 588 pri 15"><strong>+</strong>/<a name="ref 589 pri 17"><strong>-</strong> switches. The option reference section gives a detailed description of all POV-Ray options. It includes both the INI-style settings and the <a name="ref 588 pri 20"><strong>+</strong>/<a name="ref 589 pri 23"><strong>-</strong> switches.<p>
The INI keywords are not case sensitive. Only one INI option is permitted per line of text. You may also include switches in your INI file if they are easier for you. You may have multiple switches per line but you should not mix switches and INI options on the same line. You may nest INI files by simply putting the file name on a line by itself with no equals sign after it. Nesting may occur up to ten levels deep.<p>
For example:<p>
<listing>
  ; This is a sample INI file. This entire line is a comment.
  ; Blank lines are permitted.

  Input_File_Name=simple.pov ;This sets the input file name

  +W80 +H60 ; Traditional +/- switches are permitted too

  MOREOPT   ; Read MOREOPT.INI and continue with next line

  +V        ; Another switch

  ; That's all folks!
</listing>
<p>
INI files may have labeled sections so that more than one set of options may be stored in a single file. Each section begins with a label in [] brackets. For example:<p>
<listing>
  ; RES.INI
  ; This sample INI file is used to set resolution.

  +W120 +H100  ; This section has no label.
               ; Select it with &quot;RES&quot;

  [Low]
  +W80 +H60    ; This section has a label.
               ; Select it with &quot;RES[Low]&quot;

  [Med]
  +W320 +H200  ; This section has a label.
               ; Select it with &quot;RES[Med]&quot;

  [High]
  +W640 +H480  ; Labels are not case sensitive.
               ; &quot;RES[high]&quot; works

  [Really High]
  +W800 +H600  ; Labels may contain blanks
</listing>
<p>
When you specify the INI file you should follow it with the section label in brackets. For example...<p>
<listing>
  POVRAY RES[Med] +Imyfile.pov
</listing>
<p>
POV-Ray reads <b>res.ini</b> and skips all options until it finds the label <strong>Med</strong>. It processes options after that label until it finds another label and then it skips. If no label is specified on the command line then only the unlabeled area at the top of the file is read. If a label is specified, the unlabeled area is ignored.<hr>
<a name="ref 596 pri 0"><a name="ref 597 pri 0"><center><h3><a name="section 6.1.3">
Section 6.1.3<br>Using the POVINI Environment Variable</h3></center>
The environment variable POVINI is used to specify the location and name of a default INI file that is read every time POV-Ray is executed. If POVINI is not specified a default INI file may be read depending on the platform used. If the specified file does not exist a warning message is printed.<p>
To set the environment variable under MS-DOS you might put the following line in your <b>autoexec.bat</b> file...<p>
<listing>
  set POVINI=c:\povray3\default.ini
</listing>
<p>
On most operating systems the sequence of reading options is as follows:<p>
<center><table border><tr><td valign=top>1.</td><td valign=top>Read options from default INI file specified by the POVINI environment variable or platform specific INI file.</td></tr>
<tr><td valign=top>2.</td><td valign=top>Read switches from command line (this includes reading any specified INI/DEF files).</td></tr>

</td></tr></table></center>

<p>
The POVRAYOPT environment variable supported by previous POV-Ray versions is no longer available.<hr>
<a name="ref 598 pri 0"><a name="ref 599 pri 0"><center><h3><a name="section 6.2">
Section 6.2<br>Options Reference</h3></center>
As explained in the previous section, options may be specified by switches or INI-style options. Almost all INI-style options have equivalent <a name="ref 588 pri 4"><strong>+</strong>/<a name="ref 589 pri 8"><strong>-</strong> switches and most switches have equivalent INI-style option. The following sections give a detailed description of each POV-Ray option. It includes both the INI-style settings and the <a name="ref 588 pri 13"><strong>+</strong>/<a name="ref 589 pri 18"><strong>-</strong> switches.<p>
The notation and terminology used is described in the tables below.<p>
<center><table border><tr><td valign=top>Keyword=bool</td><td valign=top>turn <strong>Keyword</strong> on if <strong>bool</strong> equals <strong>true,</strong> <strong>yes,</strong> <strong>on</strong> or <strong>1</strong> and turn it off if it is any other value.</td></tr>
<tr><td valign=top>Keyword=true</td><td valign=top>do this option if <strong>true,</strong> <strong>yes,</strong> <strong>on</strong> or <strong>1</strong> is specified.</td></tr>
<tr><td valign=top>Keyword=false</td><td valign=top>do this option if <strong>false,</strong> <strong>no,</strong> <strong>off</strong> or <strong>0</strong> is specified.</td></tr>
<tr><td valign=top>Keyword=file</td><td valign=top>any valid file name. Note: some options prohibit the use of any of the above <strong>true</strong> or <strong>false</strong> values as a file name. They are noted in later sections.</td></tr>

</td></tr></table></center>

<p>
<center><table border><tr><td valign=top>n</td><td valign=top>any integer such as in +W320</td></tr>
<tr><td valign=top>n.n</td><td valign=top>any float such as in Clock=3.45</td></tr>
<tr><td valign=top>0.n</td><td valign=top>any float &lt; 1.0 even if it has no leading 0</td></tr>
<tr><td valign=top>s</td><td valign=top>any string of text</td></tr>
<tr><td valign=top>x or y</td><td valign=top>any single character</td></tr>
<tr><td valign=top>path</td><td valign=top>any directory name, drive optional, no final path separator (&quot;\&quot; or &quot;/&quot;, depending on the operating system)</td></tr>

</td></tr></table></center>

<p>
Unless otherwise specifically noted, you may assume that either a plus or minus sign before a switch will produce the same results.<hr>
<a name="ref 600 pri 0"><a name="ref 601 pri 0"><center><h3><a name="section 6.2.1">
Section 6.2.1<br>Animation Options</h3></center>
POV-Ray 3.0 greatly improved its animation capability with the addition of an internal animation loop, automatic output file name numbering and the ability to shell out to the operating system to external utilities which can assemble individual frames into an animation. The internal animation loop is simple yet flexible. You may still use external programs or batch files to create animations without the internal loop as you may have done in POV-Ray 2.<hr>
<a name="ref 602 pri 0"><a name="ref 603 pri 0"><center><h3><a name="section 6.2.1.1">
Section 6.2.1.1<br>External Animation Loop</h3></center>
<center><table border><tr><td valign=top>Clock=n.n</td><td valign=top>Sets &quot;clock&quot; float identifier to n.n</td></tr>
<tr><td valign=top>+Kn.n</td><td valign=top>Same as Clock=n.n</td></tr>

</td></tr></table></center>

<p>
The <a name="ref 570 pri 2"><strong>Clock</strong>=n.n option or the <a name="ref 571 pri 3"><strong>+K</strong>n.n switch may be used to pass a single float value to the program for basic animation. The value is stored in the float identifier <strong>clock</strong>. If an object had a rotate &lt;0,clock,0&gt; attached then you could rotate the object by different amounts over different frames by setting <a name="ref 571 pri 5"><strong>+K</strong>10.0, <a name="ref 571 pri 8"><strong>+K</strong>20.0... etc. on successive renderings. It is up to the user to repeatedly invoke POV-Ray with a different <a name="ref 570 pri 11"><strong>Clock</strong> value and a different <a name="ref 604 pri 11"><strong>Output_File_Name</strong> for each frame.<hr>
<a name="ref 605 pri 0"><a name="ref 606 pri 0"><center><h3><a name="section 6.2.1.2">
Section 6.2.1.2<br>Internal Animation Loop</h3></center>
<center><table border><tr><td valign=top>Initial_Frame=n</td><td valign=top>Sets initial frame number to n</td></tr>
<tr><td valign=top>Final_Frame=n</td><td valign=top>Sets final frame number</td></tr>
<tr><td valign=top>Initial_Clock=n.n</td><td valign=top>Sets initial clock value</td></tr>
<tr><td valign=top>Final_Clock=n.n</td><td valign=top>Sets final clock value</td></tr>
<tr><td valign=top>+KFIn</td><td valign=top>Same as Initial_Frame=n</td></tr>
<tr><td valign=top>+KFFn</td><td valign=top>Same as Final_Frame=n</td></tr>
<tr><td valign=top>+KIn.n</td><td valign=top>Same as Initial_Clock=n.n</td></tr>
<tr><td valign=top>+KFn.n</td><td valign=top>Same as Final_Clock=n.n</td></tr>

</td></tr></table></center>

<p>
The internal animation loop new to POV-Ray 3.0 relieves the user of the task of generating complicated sets of batch files to invoke POV-Ray multiple times with different settings. While the multitude of options may look intimidating, the clever set of default values means that you will probably only need to specify the <a name="ref 581 pri 3"><strong>Final_Frame</strong>=n or the <a name="ref 607 pri 3"><strong>+KFF</strong>n option to specify the number of frames. All other values may remain at their defaults.<p>
Any <a name="ref 581 pri 7"><strong>Final_Frame</strong> setting other than -1 will trigger POV-Ray's internal animation loop. For example <a name="ref 581 pri 12"><strong>Final_Frame</strong>=10 or <a name="ref 607 pri 13"><strong>+KFF</strong>10 causes POV-Ray to render your scene 10 times. If you specified <a name="ref 604 pri 14"><strong>Output_File_Name</strong>=<b>file.tga</b> then each frame would be output as <b>file01.tga</b>, <b>file02.tga</b>, <b>file03.tga</b> etc. The number of zero-padded digits in the file name depends upon the final frame number. For example <a name="ref 607 pri 16"><strong>+KFF</strong>100 would generate <b>file001.tga</b> through <b>file100.tga</b>. The frame number may encroach upon the file name. On MS-DOS with an eight character limit, <b>myscene.pov</b> would render to <b>mysce001.tga</b> through <b>mysce100.tga</b>.<p>
The default <a name="ref 580 pri 19"><strong>Initial_Frame</strong>=1 will probably never have to be changed. You would only change it if you were assembling a long animation sequence in pieces. One scene might run from frame 1 to 50 and the next from 51 to 100. The <a name="ref 580 pri 23"><strong>Initial_Frame</strong>=n or <a name="ref 608 pri 23"><strong>+KFI</strong>n option is for this purpose.<p>
Note that if you wish to render a subset of frames such as 30 through 40 out of a 1 to 100 animation, you should not change <a name="ref 609 pri 23"><strong>Frame_Initial</strong> or <a name="ref 610 pri 23"><strong>Frame_Final</strong>. Instead you should use the subset commands described in section <a href="pov30015.htm#ref 611 pri 0">&quot;Subsets of Animation Frames&quot;</a>.<p>
Unlike some animation packages, the action in POV-Ray animated scenes does not depend upon the integer frame numbers. Rather you should design your scenes based upon the float identifier <a name="ref 570 pri 27"><strong>clock</strong>. By default, the clock value is 0.0 for the initial frame and 1.0 for the final frame. All other frames are interpolated between these values. For example if your object is supposed to rotate one full turn over the course of the animation, you could specify <strong>rotate  360*clock*y</strong>. Then as clock runs from 0.0 to 1.0, the object rotates about the y-axis from 0 to 360 degrees.<p>
The major advantage of this system is that you can render a 10 frame animation or a 100 frame or 500 frame or 329 frame animation yet you still get one full 360 degree rotation. Test renders of a few frames work exactly like final renders of many frames.<p>
In effect you define the motion over a continuous float valued parameter (the clock) and you take discrete samples at some fixed intervals (the frames). If you take a movie or video tape of a real scene it works the same way. An object's actual motion depends only on time. It does not depend on the frame rate of your camera.<p>
Many users have already created scenes for POV-Ray 2 that expect clock values over a range other than the default 0.0 to 1.0. For this reason we provide the <a name="ref 612 pri 27"><strong>Initial_Clock</strong>=n.n or <a name="ref 613 pri 27"><strong>+KI</strong>n.n and <a name="ref 614 pri 27"><strong>Final_Clock</strong>=n.n or <a name="ref 615 pri 27"><strong>+KF</strong>n.n options. For example to run the clock from 25.0 to 75.0 you would specify <a name="ref 612 pri 28"><strong>Initial_Clock</strong>=25.0 and <a name="ref 614 pri 29"><strong>Final_Clock</strong>=75.0. Then the clock would be set to 25.0 for the initial frame and 75.0 for the final frame. In-between frames would have clock values interpolated from 25.0 through 75.0 proportionally.<p>
Users who are accustomed to using frame numbers rather than clock values could specify <a name="ref 612 pri 31"><strong>Initial_Clock</strong>=1.0 and <a name="ref 614 pri 33"><strong>Final_Clock</strong>=10.0 and <a name="ref 610 pri 34"><strong>Frame_Final</strong>=10 for a 10 frame animation.<p>
For new scenes, we recommend you do not change the <a name="ref 612 pri 37"><strong>Initial_Clock</strong> or <a name="ref 614 pri 40"><strong>Final_Clock</strong> from their default 0.0 to 1.0 values. If you want the clock to vary over a different range than the default 0.0 to 1.0, we recommend you handle this inside your scene file as follows...<p>
<listing>
  #declare Start    = 25.0
  #declare End      = 75.0
  #declare My_Clock = Start+(End-Start)*clock
</listing>
<p>
Then use <a name="ref 616 pri 40"><strong>My_Clock</strong> in the scene description. This keeps the critical values 25.0 and 75.0 in your <b>.pov</b> file.<p>
Note that more details concerning the inner workings of the animation loop are in the section on shell-out operating system commands in section <a href="pov30017.htm#ref 617 pri 0">&quot;Shell-out to Operating System&quot;</a>.<hr>

<center>
<a href="pov30015.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
