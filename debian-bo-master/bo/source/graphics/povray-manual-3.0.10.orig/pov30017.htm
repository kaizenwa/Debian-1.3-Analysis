<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 723 pri 0"><a name="ref 724 pri 0"><center><h3><a name="section 6.2.3.3">
Section 6.2.3.3<br>Language Version</h3></center>
<center><table border><tr><td valign=top>Version=n.n</td><td valign=top>Set initial language compatibility to version n.n</td></tr>
<tr><td valign=top>+MVn.n</td><td valign=top>Same as Version=n.n</td></tr>

</td></tr></table></center>

<p>
<a name="ref 725 pri 2">While many language changes have been made for POV-Ray 3.0, all of version 2.0 syntax and most of version 1.0 syntax still works. Whenever possible we try to maintain backwards compatibility. One feature introduced in 2.0 that was incompatible with any 1.0 scene files is the parsing of float expressions. Setting <a name="ref 726 pri 2"><strong>Version</strong>=1.0 or using <a name="ref 727 pri 2"><strong>+MV</strong>1.0 turns off expression parsing as well as many warning messages so that nearly all 1.0 files will still work. The changes between 2.0 and 3.0 are not as extensive. Setting <a name="ref 726 pri 3"><strong>Version</strong>=2.0 is only necessary to eliminate some warning messages. Naturally the default setting for this option is <a name="ref 726 pri 5"><strong>Version</strong>=3.0.<p>
The <a name="ref 725 pri 8"><strong>#version</strong> language directive can also be used to change modes several times within scene files. The above options affect only the initial setting. See section <a href="pov3001c.htm#ref 728 pri 0">&quot;Version Directive&quot;</a> for more details about the language version directive.<hr>
<a name="ref 729 pri 0"><a name="ref 730 pri 0"><center><h3><a name="section 6.2.3.4">
Section 6.2.3.4<br>Removing User Bounding</h3></center>
<center><table border><tr><td valign=top>Remove_Bounds=bool</td><td valign=top>Turn unnecessary bounds removal on/off</td></tr>
<tr><td valign=top>+UR</td><td valign=top>Turn unnecessary bounds removal on</td></tr>
<tr><td valign=top>-UR</td><td valign=top>Turn unnecessary bounds removal off</td></tr>
<tr><td valign=top>Split_Unions=bool</td><td valign=top>Turn split bounded unions on/off</td></tr>
<tr><td valign=top>+SU</td><td valign=top>Turn split bounded unions on</td></tr>
<tr><td valign=top>-SU</td><td valign=top>Turn split bounded unions off</td></tr>

</td></tr></table></center>

<p>
Early versions of POV-Ray had no system of automatic bounding or spatial sub-division to speed up ray-object intersection tests. Users had to manually create bounding boxes to speed up the rendering. POV-Ray 3.0 has more sophisticated automatic bounding than any previous version. In many cases the manual bounding on older scenes is slower than the new automatic systems. Therefore POV-Ray removes manual bounding when it knows it will help. In rare instances you may want to keep manual bounding. Some older scenes incorrectly used bounding when they should have used clipping. If POV-Ray removes the bounds in these scenes the image will not look right. To turn off the automatic removal of manual bounds you should specify <a name="ref 731 pri 0"><strong>Remove_Bounds</strong>=off or use <a name="ref 732 pri 0"><strong>-UR</strong>. The default is <a name="ref 731 pri 1"><strong>Remove_Bounds</strong>=on.<p>
One area where the jury is still out is the splitting of manually bounded unions. Unbounded unions are always split into their component parts so that automatic bounding works better. Most users do not bound unions because they know that doing so is usually slower. If you do manually bound a union we presume you really want it bound. For safety sake we do not presume to remove such bounds. If you want to remove manual bounds from unions you should specify <a name="ref 733 pri 1"><strong>Split_Unions</strong>=on or use <a name="ref 734 pri 1"><strong>+SU</strong>. The default is <a name="ref 733 pri 2"><strong>Split_Unions</strong>=off.<hr>
<a name="ref 735 pri 0"><a name="ref 617 pri 0"><center><h3><a name="section 6.2.4">
Section 6.2.4<br>Shell-out to Operating System</h3></center>
<center><table border><tr><td valign=top>Pre_Scene_Command=s</td><td valign=top>Set command before entire scene</td></tr>
<tr><td valign=top>Pre_Frame_Command=s</td><td valign=top>Set command before each frame</td></tr>
<tr><td valign=top>Post_Scene_Command=s</td><td valign=top>Set command after entire scene</td></tr>
<tr><td valign=top>Post_Frame_Command=s</td><td valign=top>Set command after each frame</td></tr>
<tr><td valign=top>User_Abort_Command=s</td><td valign=top>Set command when user aborts POV-Ray</td></tr>
<tr><td valign=top>Fatal_Error_Command=s</td><td valign=top>Set command when POV-Ray has fatal error</td></tr>

</td></tr></table></center>

<p>
Note that no <a name="ref 588 pri 6"><strong>+</strong>/<a name="ref 589 pri 12"><strong>-</strong> switches are available for these options. They cannot be used from the command line. They may only be used from INI files.<p>
POV-Ray offers you the opportunity to shell-out to the operating system at several key points to execute another program or batch file. Usually this is used to manage files created by the internal animation loop however the shell commands are available for any scene. The CMD is a single line of text which is passed to the operating system to execute a program. For example<p>
<listing>
  Post_Scene_Command=tga2gif -d -m myfile
</listing>
<p>
would use the utility <b>tga2gif</b> with the <a name="ref 70 pri 16"><strong>-D</strong> and <a name="ref 736 pri 16"><strong>-M</strong> parameters to convert <b>myfile.tga</b> to <b>myfile.gif</b> after the scene had finished rendering.<hr>
<a name="ref 737 pri 0"><a name="ref 738 pri 0"><center><h3><a name="section 6.2.4.1">
Section 6.2.4.1<br>String Substitution in Shell Commands</h3></center>
It could get cumbersome to change the <a name="ref 739 pri 0"><strong>Post_Scene_Command</strong> every time you changed scene names. POV-Ray can substitute various values into a CMD string for you. For example:<p>
<listing>
  Post_Scene_Command=tga2gif -d -m %s
</listing>
<p>
POV-Ray will substitute the <strong>%s</strong> with the scene name in the command. The <strong>scene name</strong> is the <a name="ref 740 pri 0"><strong>Input_File_Name</strong> or <a name="ref 68 pri 6"><strong>+I</strong> setting with any drive, directory or extension removed. For example:<p>
<listing>
  Input_File_Name=c:\povray3\scenes\waycool.pov
</listing>
<p>
is stripped down to the scene name <b>waycool</b> which results in...<p>
<listing>
  Post_Scene_Command=tga2gif -d -m waycool
</listing>
<p>
In an animation it may be necessary to have the exact output file name with the frame number included. The string <strong>%o</strong> will substitute the output file name. Suppose you want to save your output files in a zip archive using <b>pkzip</b>. You could do...<p>
<listing>
  Post_Frame_Command=pkzip -m %s %o
</listing>
<p>
After rendering frame 12 of <b>myscene.pov</b> POV-Ray would shell to the operating system with &quot;<b>pkzip</b> -m <b>myscene</b> <b>mysce012.tga</b>&quot;. The <a name="ref 736 pri 7"><strong>-M</strong> switch in <b>pkzip</b> moves <b>mysce012.tga</b> to <b>myscene.zip</b> and removes it from the directory. Note that <strong>%o</strong> includes frame numbers only when in an animation loop. During the <a name="ref 741 pri 7"><strong>Pre_Scene_Command</strong> and <a name="ref 739 pri 8"><strong>Post_Scene_Command</strong> there is no frame number so the original, unnumbered <a name="ref 604 pri 11"><strong>Output_File_Name</strong> is used. Any <a name="ref 742 pri 11"><strong>User_Abort_Command</strong> or <a name="ref 743 pri 11"><strong>Fatal_Error_Command</strong> not inside the loop will similarly give an unnumbered <strong>%o</strong> substitution.<p>
Here is the complete list of substitutions available for a common string.<p>
<center><table border><tr><td valign=top>%o</td><td valign=top>Output file name with extension and embedded frame number if any</td></tr>
<tr><td valign=top>%s</td><td valign=top>Scene name derived by stripping path and ext from input name</td></tr>
<tr><td valign=top>%n</td><td valign=top>Frame number of this frame</td></tr>
<tr><td valign=top>%k</td><td valign=top>Clock value of this frame</td></tr>
<tr><td valign=top>%h</td><td valign=top>Height of image in pixels</td></tr>
<tr><td valign=top>%w</td><td valign=top>Width of image in pixels</td></tr>
<tr><td valign=top>%%</td><td valign=top>A single % sign.</td></tr>

</td></tr></table></center>
<hr>
<a name="ref 744 pri 0"><a name="ref 745 pri 0"><center><h3><a name="section 6.2.4.2">
Section 6.2.4.2<br>Shell Command Sequencing</h3></center>
Here is the sequence of events in an animation loop. Non-animated scenes work the exact same way except there is no loop.<p>
<pre>
  1)  Process all INI file keywords and command line switches just once.
  2)  Open any text output streams and do Create_INI if any.
  3)  Execute Pre_Scene_Command if any.
  4)  Loop through frames (or just do once on non-animation).
      a)  Execute Pre_Frame_Command if any.
      b)  Parse entire scene file, open output file and read settings,
          turn on display, render the frame, destroy all objects,
          textures etc., close output file, close display.
      c)  Execute Post_Frame_Command if any.
      d)  Go back to 4 a until all frames are done.
  5)  Execute Post_Scene_Command if any.
  6)  Exit POV-Ray.
</pre>
<p>
If the user interrupts processing the <a name="ref 742 pri 1"><strong>User_Abort_Command</strong>, if any, is executed. User aborts can only occur during the parsing and rendering parts of step 4 a above.<p>
If a fatal error occurs that POV-Ray notices the <a name="ref 743 pri 2"><strong>Fatal_Error_Command</strong>, if any, is executed. Sometimes an unforeseen bug or memory error could cause a total crash of the program in which case there is no chance to shell out. Fatal errors can occur just about anywhere including during the processing of switches or INI files. If a fatal error occurs before POV-Ray has read the <a name="ref 743 pri 4"><strong>Fatal_Error_Command</strong> string then obviously no shell can occur.<p>
Note that the entire scene is re-parsed for every frame. Future versions of POV-Ray may allow you to hold over parts of a scene from one frame to the next but for now it starts from scratch every time. Note also that the <a name="ref 746 pri 4"><strong>Pre_Frame_Command</strong> occurs before the scene is parsed. You might use this to call some custom scene generation utility before each frame. This utility could rewrite your <b>.pov</b> or <b>.inc</b> files if needed. Perhaps you will want to generate new <b>.gif</b> or <b>.tga</b> files for image maps or height fields on each frame.<hr>
<a name="ref 747 pri 0"><a name="ref 748 pri 0"><center><h3><a name="section 6.2.4.3">
Section 6.2.4.3<br>Shell Command Return Actions</h3></center>
<center><table border><tr><td valign=top>Pre_Scene_Return=s</td><td valign=top>Set pre scene return actions</td></tr>
<tr><td valign=top>Pre_Frame_Return=s</td><td valign=top>Set pre frame return actions</td></tr>
<tr><td valign=top>Post_Scene_Return=s</td><td valign=top>Set post scene return actions</td></tr>
<tr><td valign=top>Post_Frame_Return=s</td><td valign=top>Set post frame return actions</td></tr>
<tr><td valign=top>User_Abort_Return=s</td><td valign=top>Set user abort return actions</td></tr>
<tr><td valign=top>Fatal_Error_Return=s</td><td valign=top>Set fatal return actions</td></tr>

</td></tr></table></center>

<p>
Note that no <a name="ref 588 pri 7"><strong>+</strong>/<a name="ref 589 pri 14"><strong>-</strong> switches are available for these options. They cannot be used from the command line. They may only be used from INI files.<p>
Most operating systems allow application programs to return an error code if something goes wrong. When POV-Ray executes a shell command it can make use of this error code returned from the shell process and take some appropriate action if the code is zero or non-zero. POV-Ray itself returns such codes. It returns 0 for success, 1 for fatal error and 2 for user abort.<p>
The actions are designated by a single letter in the different <a name="ref 749 pri 14"><strong>..._Return</strong>=s options. The possible actions are:<p>
<center><table border><tr><td valign=top>I</td><td valign=top>ignore the code</td></tr>
<tr><td valign=top>S</td><td valign=top>skip one step</td></tr>
<tr><td valign=top>A</td><td valign=top>all steps skipped</td></tr>
<tr><td valign=top>Q</td><td valign=top>quit POV-Ray immediately</td></tr>
<tr><td valign=top>U</td><td valign=top>generate a user abort in POV-Ray</td></tr>
<tr><td valign=top>F</td><td valign=top>generate a fatal error in POV-Ray</td></tr>

</td></tr></table></center>

<p>
For example if your <a name="ref 746 pri 15"><strong>Pre_Frame_Command</strong> calls a program which generates your height field data and that utility fails then it will return a non-zero code. We would probably want POV-Ray to abort as well. The option <a name="ref 750 pri 15"><strong>Pre_Frame_Return</strong>=F will cause POV-Ray to do a fatal abort if the <a name="ref 746 pri 17"><strong>Pre_Frame_Command</strong> returns a non-zero code.<p>
Sometimes a non-zero code from the external process is a good thing. Suppose you want to test if a frame has already been rendered. You could use the <strong>S</strong> action to skip this frame if the file is already rendered. Most utilities report an error if the file is not found. For example the command <b>pkzip</b> <a name="ref 677 pri 18"><strong>-V</strong> <b>myscene</b> <b>mysce012.tga</b> tells pkzip you want to view the catalog of <b>myscene.zip</b> for the file <b>mysce012.tga</b>. If the file isn't in the archive <b>pkzip</b> returns a non-zero code.<p>
However we want to skip if the file is found. Therefore we need to reverse the action so it skips on zero and doesn't skip on non-zero. To reverse the zero vs. non-zero triggering of an action precede it with a &quot;-&quot; sign (note a &quot;!&quot; will also work since it is used in many programming languages as a negate operator).<p>
<a name="ref 751 pri 18"><strong>Pre_Frame_Return=</strong>S will skip if the code shows error (non-zero) and will proceed normally on no error (zero). <a name="ref 750 pri 19"><strong>Pre_Frame_Return</strong>=-S will skip if there is no error (zero) and will proceed normally if there is an error (non-zero).<p>
The default for all shells is <strong>I</strong> which means that the return action is ignored no matter what. POV-Ray simply proceeds with whatever it was doing before the shell command. The other actions depend upon the context. You may want to refer back to the animation loop sequence chart in the previous section. The action for each shell is as follows.<p>
On return from any <a name="ref 742 pri 21"><strong>User_Abort_Command</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>F</td><td valign=top>then turn this user abort into a fatal error. Do the Fatal_Error_Command, if any. Exit POV-Ray with error code 1.</td></tr>
<tr><td valign=top>S, A, Q, or U</td><td valign=top>then proceed with the user abort. Exit POV-Ray with error code 2.</td></tr>

</td></tr></table></center>

<p>
On return from any <a name="ref 743 pri 24"><strong>Fatal_Error_Command</strong> proceed with the fatal error no matter what. Exit POV-Ray with error code 1. On return from any <a name="ref 741 pri 25"><strong>Pre_Scene_Command</strong>, <a name="ref 746 pri 28"><strong>Pre_Frame_Command</strong>, <a name="ref 752 pri 28"><strong>Post_Frame_Command</strong> or <a name="ref 753 pri 28"><strong>Post_Scene_Commands</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>F</td><td valign=top>then generate a fatal error. Do the Fatal_Error_Command, if any. Exit POV-Ray with an error code 1.</td></tr>
<tr><td valign=top>U</td><td valign=top>then generate a user abort. Do the User_Abort_Command, if any. Exit POV-Ray with an error code 2.</td></tr>
<tr><td valign=top>Q</td><td valign=top>then quit POV-Ray immediately. Acts as though POV-Ray never really ran. Do no further shells, (not even Post_Scene_Command) and exit POV-Ray with an error code 0.</td></tr>

</td></tr></table></center>

<p>
On return from a <a name="ref 741 pri 30"><strong>Pre_Scene_Command</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>S</td><td valign=top>then skip rendering all frames. Acts as though the scene completed all frames normally. Do not do any Pre_Frame_Command or Post_Frame_Commands. Do the Post_Scene_Command, if any. Exit POV-Ray with error code 0. On the earlier chart this means skip step #4.</td></tr>
<tr><td valign=top>A</td><td valign=top>then skip all scene activity. Works exactly like Q quit. On the earlier chart this means skip to step #6.</td></tr>

</td></tr></table></center>

<p>
On return from a <a name="ref 746 pri 34"><strong>Pre_Frame_Command</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>S</td><td valign=top>then skip only this frame. Acts as though this frame never existed. Do not do the Post_Frame_Command. Proceed with the next frame. On the earlier chart this means skip steps #4b and #4c but loop back as needed in #4d.</td></tr>
<tr><td valign=top>A</td><td valign=top>then skip rendering this frame and all remaining frames. Acts as though the scene completed all frames normally. Do not do any further Post_Frame_Commands. Do the Post_Scene_Command, if any. Exit POV-Ray with error code 0. On the earlier chart this means skip the rest of step #4 and proceed at step #5.</td></tr>

</td></tr></table></center>

<p>
On return from a <a name="ref 752 pri 35"><strong>Post_Frame_Command</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>S</td><td valign=top>then skip rendering all remaining frames. Acts as though the scene completed all frames normally. Do the Post_Scene_Command, if any. Exit POV-Ray with error code 0. On the earlier chart this means skip the rest of step #4 and proceed at step #5.</td></tr>
<tr><td valign=top>A</td><td valign=top>same as S for this shell command.</td></tr>

</td></tr></table></center>

<p>
On return from any <a name="ref 739 pri 37"><strong>Post_Scene_Command</strong> if there is an action triggered and you have specified...<p>
<center><table border><tr><td valign=top>S or A</td><td valign=top>same as I for this shell command.</td></tr>

</td></tr></table></center>
<hr>
<a name="ref 754 pri 0"><a name="ref 755 pri 0"><center><h3><a name="section 6.2.5">
Section 6.2.5<br>Text Output </h3></center>
Text output is an important way that POV-Ray keeps you informed about what it is going to do, what it is doing and what it did. New to POV-Ray 3.0, the program splits its text messages into 7 separate streams. Some versions of POV-Ray color codes the various types of text. Some versions allow you to scroll back several pages of messages. All versions allow you to turn some of these text streams off/on or to direct a copy of the text output to one or several files. This section details the options which give you control over text output.<hr>
<a name="ref 756 pri 0"><a name="ref 757 pri 0"><center><h3><a name="section 6.2.5.1">
Section 6.2.5.1<br>Text Streams</h3></center>
There are seven distinct text streams that POV-Ray uses for output. On some versions each stream is designated by a particular color. Text from these streams are displayed whenever it is appropriate so there is often an intermixing of the text. The distinction is only important if you choose to turn some of the streams off or to direct some of the streams to text files. On some systems you may be able to review the streams separately in their own scroll-back buffer.<p>
Here is a description of each stream.<p>
<b>BANNER:</b> <a name="ref 758 pri 0">This stream displays the program's sign-on banner, copyright, contributor's list, and some help screens. It cannot be turned off or directed to a file because most of this text is displayed before any options or switches are read. Therefore you cannot use an option or switch to control it. There are switches which display the help screens. They are covered in section <a href="pov30018.htm#ref 759 pri 0">&quot;Help Screen Switches&quot;</a>.<p>
<b>DEBUG:</b> <a name="ref 760 pri 0">This stream displays debugging messages. It was primarily designed for developers but this and other streams may also be used by the user to display messages from within their scene files. See section <a href="pov3001c.htm#ref 761 pri 0">&quot;Text Message Streams&quot;</a> for details on this feature. This stream may be turned off and/or directed to a text file.<p>
<b>FATAL:</b> <a name="ref 762 pri 0">This stream displays fatal error messages. After displaying this text, POV-Ray will terminate. When the error is a scene parsing error, you may be shown several lines of scene text that leads up to the error. This stream may be turned off and/or directed to a text file.<p>
<b>RENDER:</b> <a name="ref 763 pri 0">This stream displays information about what options you have specified to render the scene. It includes feedback on all of the major options such as scene name, resolution, animation settings, anti-aliasing and others. This stream may be turned off and/or directed to a text file.<p>
<b>STATISTICS:</b> <a name="ref 764 pri 0">This stream displays statistics after a frame is rendered. It includes information about the number of rays traced, the length of time of the processing and other information. This stream may be turned off and/or directed to a text file.<p>
<b>STATUS:</b> <a name="ref 765 pri 0">This stream displays one-line status messages that explain what POV-Ray is doing at the moment. On some systems this stream is displayed on a status line at the bottom of the screen. This stream cannot be directed to a file because there is generally no need to. The text displayed by the <a name="ref 676 pri 1"><strong>Verbose</strong> option or <a name="ref 91 pri 5"><strong>+V</strong> switch is output to this stream so that part of the status stream may be turned off.<p>
<b>WARNING:</b> <a name="ref 766 pri 5">This stream displays warning messages during the parsing of scene files and other warnings. Despite the warning, POV-Ray can continue to render the scene. You will be informed if POV-Ray has made any assumptions about your scene so that it can proceed. In general any time you see a warning, you should also assume that this means that future versions of POV-Ray will not allow the warned action. Therefore you should attempt to eliminate warning messages so your scene will be able to run in future versions of POV-Ray. This stream may be turned off and/or directed to a text file.<hr>

<center>
<a href="pov30018.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
