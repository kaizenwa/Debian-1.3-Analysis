<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1306 pri 0"><a name="ref 1307 pri 0"><a name="ref 937 pri 0"><a name="ref 1308 pri 0"><center><h3><a name="section 7.6.2.2">
Section 7.6.2.2<br>Normal Maps</h3></center>
Most of the time you will apply single normal pattern to an entire surface but you may also create a pattern or blend of normals using a <strong>normal map</strong>. The syntax for a normal map is identical to a pigment map except you specify a normal in each map entry.<p>
A normal map is specified by...<p>
<listing>
  normal{
    PATTERN_TYPE
    normal_map {
      [ NUM_1 NORMAL_BODY_1]
      [ NUM_2 NORMAL_BODY_2]
      [ NUM_3 NORMAL_BODY_3]
       ...
    }
    NORMAL_MODIFIERS...
  }
</listing>
<p>
Where NUM_1, NUM_2, ... are float values between 0.0 and 1.0 inclusive. A NORMAL_BODY is anything that would normally appear inside a <strong>normal</strong> statement but the normal keyword and {} braces are not needed. Note that the <a name="ref 1282 pri 3"><strong>[]</strong> brackets are part of the actual statement. They are not notational symbols denoting optional parts. The brackets surround each entry in the map. There may be from 2 to 256 entries in the map.<p>
For example<p>
<listing>
  normal {
    gradient x       //this is the PATTERN_TYPE
    normal_map {
      [0.3  bumps scale 2]
      [0.3  dents]
      [0.6  dents]
      [0.9  marble turbulence 1]
    }
  }
</listing>
<p>
When the <strong>gradient x</strong> function returns values from 0.0 to 0.3 then the scaled bumps normal is used. From 0.3 to 0.6 dents are From 0.6 up to 0.9 a blend of dents and a turbulent marble is used. From 0.9 on up only the turbulent marble is used.<p>
Normal maps may be nested to any level of complexity you desire. The normals in a map may have slope maps or normal maps or any type of normal you want.<p>
A normal map is also used with the <a name="ref 864 pri 7"><strong>average</strong> normal type. See <a href="pov30029.htm#ref 864 pri 2">&quot;Average&quot;</a> for details.<p>
Entire normals may also be used with the block patterns such as checker, hexagon and brick. For example...<p>
<listing>
  normal {
    checker
      normal { gradient x scale .2 }
      normal { gradient y scale .2 }
    }
  }
</listing>
<p>
Note that in the case of block patterns the <strong>normal</strong> wrapping is required around the normal information.<p>
You may not use <a name="ref 937 pri 10"><strong>normal_map</strong> or individual normals with a <a name="ref 900 pri 16"><strong>bump_map</strong>. See section <a href="pov30028.htm#ref 1286 pri 0">&quot;Texture Maps&quot;</a> for an alternative way to do this.<hr>
<a name="ref 1309 pri 0"><a name="ref 1310 pri 0"><a name="ref 900 pri 0"><a name="ref 1311 pri 0"><center><h3><a name="section 7.6.2.3">
Section 7.6.2.3<br>Bump Maps</h3></center>
When all else fails and none of the above normal pattern types meets your needs you can use a bump map to wrap a 2-D bit-mapped bump pattern around your 3-D objects.<p>
<a name="ref 852 pri 6">Instead of placing the color of the image on the shape like an image map a <strong>bump map</strong> perturbs the surface normal based on the color of the image at that point. The result looks like the image has been embossed into the surface. By default, a bump map uses the brightness of the actual color of the pixel. Colors are converted to gray scale internally before calculating height. Black is a low spot, white is a high spot. The image's index values may be used instead (see section <a href="pov30026.htm#ref 1312 pri 0">&quot;Use_Index and Use_Color&quot;</a> below).<hr>
<a name="ref 1313 pri 0"><a name="ref 1314 pri 0"><center><h3><a name="section 7.6.2.3.1">
Section 7.6.2.3.1<br>Specifying a Bump Map</h3></center>
The syntax for <a name="ref 900 pri 1"><strong>bump_map</strong> is...<p>
<listing>
  normal {
    bump_map {
      FILE_TYPE &quot;filename&quot;
      BITMAP_MODIFIERS...
    }
    NORMAL_MODIFIERS...
  }
</listing>
<p>
<a name="ref 850 pri 3"><a name="ref 936 pri 6"><a name="ref 824 pri 9"><a name="ref 1004 pri 12"><a name="ref 978 pri 14"><a name="ref 991 pri 17"><a name="ref 914 pri 20">Where FILE_TYPE is one of the following keywords <a name="ref 824 pri 24"><strong>gif</strong>, <a name="ref 936 pri 28"><strong>tga</strong>, <a name="ref 850 pri 31"><strong>iff</strong>, <a name="ref 1004 pri 35"><strong>ppm</strong>, <a name="ref 978 pri 38"><strong>pgm</strong>, <a name="ref 991 pri 42"><strong>png</strong> or <a name="ref 914 pri 46"><strong>sys</strong>. This is followed by the name of the file using any valid string expression. Several optional modifiers may follow the file specification. The modifiers are described below. Note that earlier versions of POV-Ray allowed some modifiers before the FILE_TYPE but that syntax is being phased out in favor of the syntax described here.<p>
Filenames specified in the <a name="ref 900 pri 53"><strong>bump_map</strong> statement will be searched for in the home (current) directory first and, if not found, will then be searched for in directories specified by any <a name="ref 82 pri 59"><strong>+L</strong> switches or <a name="ref 104 pri 62"><strong>Library_Path</strong> options. This would facilitate keeping all your bump maps files in a separate subdirectory, and specifying a library path to them. Note that any operating system default paths are not searched unless you also specify them as a <a name="ref 104 pri 66"><strong>Library_Path</strong>.<p>
By default, the bump pattern is mapped onto the x-y-plane. The bumps are <strong>projected</strong> onto the object as though there were a slide projector somewhere in the -z-direction. The bump pattern exactly fills the square area from (x,y) coordinates (0,0) to (1,1) regardless of the bitmap's original size in pixels. If you would like to change this default, you may translate, rotate or scale the normal or texture to map it onto the object's surface as desired.<p>
The file name is optionally followed by one or more BITMAP_MODIFIERS. The <a name="ref 903 pri 68"><strong>bump_size</strong>, <a name="ref 979 pri 69"><strong>use_color</strong> and <a name="ref 982 pri 70"><strong>use_index</strong> modifiers are specific to bump maps and are discussed in the following sections. See section <a href="pov3002c.htm#ref 1315 pri 0">&quot;Bitmap Modifiers&quot;</a> for other general bitmap modifiers.<p>
After a <a name="ref 900 pri 78"><strong>bump_map</strong> statement but still inside the normal statement you may apply any legal normal modifiers except <a name="ref 865 pri 82"><strong>slope_map</strong> and pattern wave forms.<hr>
<a name="ref 1316 pri 0"><a name="ref 903 pri 0"><center><h3><a name="section 7.6.2.3.2">
Section 7.6.2.3.2<br>Bump_Size</h3></center>
The relative bump size can be scaled using the <a name="ref 903 pri 3"><strong>bump_size</strong> modifier. The bump size number can be any number other than 0 but typical values are from about 0.1 to as high as 4.0 or 5.0.<p>
<listing>
  normal {
    bump_map {
      gif &quot;stuff.gif&quot;
      bump_size 5.0
    }
  }
</listing>
<p>
Originally <a name="ref 903 pri 7"><strong>bump_size</strong> could only be used inside a bump map but it can now be used with any normal. Typically it is used to override a previously defined size. For example:<p>
<listing>
  normal {
    My_Normal   //this is a previously defined normal identifier
    bump_size 2.0
  }
</listing>
<hr>
<a name="ref 1317 pri 0"><a name="ref 1312 pri 0"><center><h3><a name="section 7.6.2.3.3">
Section 7.6.2.3.3<br>Use_Index and Use_Color</h3></center>
Usually the bump map converts the color of the pixel in the map to a gray scale intensity value in the range 0.0 to 1.0 and calculates the bumps based on that value. If you specify <a name="ref 982 pri 0"><strong>use_index</strong>, the bump map uses the color's palette number to compute as the height of the bump at that point. So, color number 0 would be low and color number 255 would be high (if the image has 256 palette entries). The actual color of the pixels doesn't matter when using the index. This option is only available on palette based formats. The <a name="ref 979 pri 0"><strong>use_color</strong> keyword may be specified to explicitly note that the color methods should be used instead. The alternate spelling <a name="ref 980 pri 0"><strong>use_colour</strong> is also valid. These modifiers may only be used inside the <a name="ref 900 pri 9"><strong>bump_map</strong> statement.<hr>
<a name="ref 1318 pri 0"><a name="ref 274 pri 0"><center><h3><a name="section 7.6.3">
Section 7.6.3<br>Finish</h3></center>
The finish properties of a surface can greatly affect its appearance. How does light reflect? What happens when light passes through? What kind of highlights are visible. To answer these questions you need a finish statement.<p>
The <strong>finish</strong> statement is the part of a texture which defines the various finish properties to be applied to an object. Like the pigment or normal statement you can omit the surrounding texture block to save typing. Do not forget however that there is a texture implied. For example...<p>
<listing>
  this...                            can be shortened to this...

  object {                           object {
    My_Object                          My_Object
    texture {                          pigment {color Purple}
      pigment {color Purple}           finish {phong 0.3}
      finish {phong 0.3}             }
    }
  }
</listing>
<p>
The most complete form for defining a finish is as follows:<p>
<listing>
  finish {
    FINISH_IDENTIFIER
    [ ambient COLOR ]
    [ diffuse FLOAT ]
    [ brilliance FLOAT ]
    [ phong FLOAT ]
    [ phong_size FLOAT ]
    [ specular FLOAT ]
    [ roughness FLOAT ]
    [ metallic [ FLOAT ] ]
    [ reflection COLOR ]
    [ refraction FLOAT ]
    [ ior FLOAT ]
    [ caustics FLOAT ]
    [ fade_distance FLOAT ]
    [ fade_power FLOAT ]
    [ irid { thickness FLOAT turbulence VECTOR } ]
    [ crand FLOAT ]
  }
</listing>
<p>
The FINISH_IDENTIFIER is optional but should proceed all other items. Any items after the FINISH_IDENTIFIER modify or override settings given in the IDENTIFIER. If no identifier is specified then the items modify the finish values in the current default texture. Note that transformations are not allowed inside a finish because finish items cover the entire surface uniformly.<hr>
<a name="ref 1319 pri 0"><a name="ref 232 pri 1"><a name="ref 232 pri 1"><center><h3><a name="section 7.6.3.1">
Section 7.6.3.1<br>Ambient</h3></center>
The light you see in dark shadowed areas comes from diffuse reflection off of other objects. This light cannot be directly modeled using ray-tracing. However we can use a trick called <strong>ambient lighting</strong> to simulate the light inside a shadowed area.<p>
Ambient light is light that is scattered everywhere in the room. It bounces all over the place and manages to light objects up a bit even where no light is directly shining. Computing real ambient light would take far too much time, so we simulate ambient light by adding a small amount of white light to each texture whether or not a light is actually shining on that texture.<p>
This means that the portions of a shape that are completely in shadow will still have a little bit of their surface color. It's almost as if the texture glows, though the ambient light in a texture only affects the shape it is used on.<p>
Usually a single float value is specified even though the syntax calls for a color. For example a float value of 0.3 gets promoted to the full color vector &lt;0.3,0.3,0.3,0.3,0.3&gt; which is acceptable because only the red, green and blue parts are used.<p>
The default value is very little ambient light (0.1). The value can range from 0.0 to 1.0. Ambient light affects both shadowed and non-shadowed areas so if you turn up the ambient value you may want to turn down the diffuse value.<p>
Note that this method doesn't account for the color of surrounding objects. If you walk into a room that has red walls, floor and ceiling then your white clothing will look pink from the reflected light. POV-Ray's ambient shortcut doesn't account for this. There is also no way to model specular reflected indirect illumination such as the flashlight shining in a mirror.<p>
You may color the ambient light using one of two methods. You may specify a color rather than a float after the ambient keyword in each finish statement. For example<p>
<listing>
   finish { ambient rgb &lt;0.3,0.1,0.1&gt; } //a pink ambient
</listing>
<p>
You may also specify the overall ambient light source used when calculating the ambient lighting of an object using the global <a name="ref 839 pri 2"><strong>ambient_light</strong> setting. The formula is given by<p>
<listing>
   AMBIENT = FINISH_AMBIENT * GLOBAL_AMBIENT_LIGHT_SOURCE
</listing>
<p>
See section <a href="pov3002d.htm#ref 233 pri 0">&quot;Ambient Light&quot;</a> for details.<hr>
<a name="ref 1320 pri 0"><a name="ref 1321 pri 0"><center><h3><a name="section 7.6.3.2">
Section 7.6.3.2<br>Diffuse Reflection Items</h3></center>
When light reflects off of a surface the laws of physics say that it should leave the surface at the exact same angle it came in. This is similar to the way a billiard ball bounces off a bumper of a pool table. <a name="ref 336 pri 3">This perfect reflection is called <strong>specular</strong> reflection. However only very smooth polished surfaces reflect light in this way. Most of the time, light reflects and is scattered in all directions by the <a name="ref 349 pri 5"><strong>roughness</strong> of the surface. This scattering is called <strong>diffuse reflection</strong> because the light diffuses or spreads in a variety of directions. It accounts for the majority of the reflected light we see.<p>
POV-Ray and most other ray-tracers can only simulate directly one of these three types of illumination. That is the light which comes directly from actual light sources. Light coming from other objects such as mirrors via specular reflection (shine a flashlight onto a mirror for example). And last not least light coming from other objects via diffuse reflections (look at some dark area under a desk or in a corner: even though a lamp may not directly illuminate that spot you can still see a little bit because light comes from diffuse reflection off of nearby objects).<hr>
<a name="ref 1322 pri 0"><a name="ref 334 pri 0"><center><h3><a name="section 7.6.3.2.1">
Section 7.6.3.2.1<br>Diffuse</h3></center>
The keyword <a name="ref 334 pri 7"><strong>diffuse</strong> is used in a <a name="ref 274 pri 10"><strong>finish</strong> statement to control how much of the light coming directly from any light sources is reflected via diffuse reflection. For example<p>
<listing>
  finish {diffuse 0.7}
</listing>
<p>
means that 70% of the light seen comes from direct illumination from light sources. The default value is diffuse 0.6.<hr>
<a name="ref 1323 pri 0"><a name="ref 335 pri 1"><center><h3><a name="section 7.6.3.2.2">
Section 7.6.3.2.2<br>Brilliance</h3></center>
The amount of direct light that diffuses from an object depends upon the angle at which it hits the surface. When light hits at a shallow angle it illuminates less. When it is directly above a surface it illuminates more. The <a name="ref 335 pri 1"><strong>brilliance</strong> keyword can be used in a <a name="ref 274 pri 5"><strong>finish</strong> statement to vary the way light falls off depending upon the angle of incidence. This controls the tightness of the basic diffuse illumination on objects and slightly adjusts the appearance of surface shininess. Objects may appear more metallic by increasing their brilliance. The default value is 1.0. Higher values from to about 10.0 cause the light to fall off less at medium to low angles. There are no limits to the brilliance value. Experiment to see what works best for a particular situation. This is best used in concert with highlighting.<hr>
<a name="ref 1324 pri 0"><a name="ref 1325 pri 0"><center><h3><a name="section 7.6.3.2.3">
Section 7.6.3.2.3<br>Crand Graininess</h3></center>
Very rough surfaces, such as concrete or sand, exhibit a dark graininess in their apparent color. This is caused by the shadows of the pits or holes in the surface. The <a name="ref 342 pri 0"><strong>crand</strong> keyword can be added to cause a minor random darkening in the diffuse reflection of direct illumination. Typical values range from <strong>crand 0.01</strong> to <strong>crand 0.5</strong> or higher. The default value is 0. For example:<p>
<listing>
  finish { crand 0.05 }
</listing>
<p>
The grain or noise introduced by this feature is applied on a pixel-by-pixel basis. This means that it will look the same on far away objects as on close objects. The effect also looks different depending upon the resolution you are using for the rendering. For these reasons it is not a very accurate way to model the rough surface effect but some objects still look better with a little crand thrown in.<p>
Note that this should not be used when rendering animations. This is the one of a few truly random features in POV-Ray and will produce an annoying flicker of flying pixels on any textures animated with a <a name="ref 342 pri 3"><strong>crand</strong> value.<hr>
<a name="ref 1326 pri 0"><a name="ref 1327 pri 0"><center><h3><a name="section 7.6.3.3">
Section 7.6.3.3<br>Highlights</h3></center>
Highlights are the bright spots that appear when a light source reflects off of a smooth object. They are a blend of specular reflection and diffuse reflection. They are specular-like because they depend upon viewing angle and illumination angle. However they are diffuse-like because some scattering occurs. In order to exactly model a highlight you would have to calculate specular reflection off of thousands of microscopic bumps called micro facets. The more that micro facets are facing the viewer the shinier the object appears and the tighter the highlights become. POV-Ray uses two different models to simulate highlights without calculating micro facets. They are the <strong>specular</strong> and <strong>Phong</strong> models.<p>
Note that specular and Phong highlights are <b>not</b> mutually exclusive. It is possible to specify both and they will both take effect. Normally, however, you will only specify one or the other.<hr>
<a name="ref 1328 pri 0"><a name="ref 1329 pri 0"><center><h3><a name="section 7.6.3.3.1">
Section 7.6.3.3.1<br>Phong Highlights</h3></center>
The <a name="ref 275 pri 0"><strong>phong</strong> keyword controls the amount of Phong highlighting on the object. It causes bright shiny spots on the object that are the color of the light source being reflected.<p>
The Phong method measures the average of the facets facing in the mirror direction from the light sources to the viewer.<p>
Phong's value is typically from 0.0 to 1.0, where 1.0 causes complete saturation to the light source's color at the brightest area (center) of the highlight. The default phong 0.0 gives no highlight.<p>
The size of the highlight spot is defined by the <a name="ref 348 pri 0"><strong>phong_size</strong> value. The larger the phong size the tighter, or smaller, the highlight and the shinier the appearance. The smaller the phong size the looser, or larger, the highlight and the less glossy the appearance.<p>
Typical values range from 1.0 (very dull) to 250 (highly polished) though any values may be used. Default phong size is 40 (plastic) if <a name="ref 348 pri 7"><strong>phong_size</strong> is not specified. For example:<p>
<listing>
  finish { phong 0.9 phong_size 60 }
</listing>
<p>
If <a name="ref 275 pri 13"><strong>phong</strong> is not specified <a name="ref 348 pri 21"><strong>phong_size</strong> has no effect.<hr>

<center>
<a href="pov30027.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
