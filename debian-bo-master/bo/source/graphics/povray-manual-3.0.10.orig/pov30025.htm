<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1283 pri 0"><a name="ref 1284 pri 0"><a name="ref 319 pri 0"><a name="ref 1285 pri 0"><center><h3><a name="section 7.6.1.4">
Section 7.6.1.4<br>Pigment Maps</h3></center>
In addition to specifying blended colors with a color map you may create a blend of pigments using a <strong>pigment map</strong>. The syntax for a pigment map is identical to a color map except you specify a pigment in each map entry (and not a color).<p>
A pigment map is specified by...<p>
<listing>
  pigment{
    PATTERN_TYPE
    pigment_map {
      [ NUM_1 PIGMENT_BODY_1]
      [ NUM_2 PIGMENT_BODY_2]
      [ NUM_3 PIGMENT_BODY_3]
       ...
    }
    PIGMENT_MODIFIERS...
  }
</listing>
<p>
Where NUM_1, NUM_2, ... are float values between 0.0 and 1.0 inclusive. A PIGMENT_BODY is anything that would normally appear inside a <strong>pigment</strong> statement but the <a name="ref 294 pri 5"><strong>pigment</strong> keyword and {} braces are not needed. Note that the <a name="ref 1282 pri 6"><strong>[]</strong> brackets are part of the actual statement. They are not notational symbols denoting optional parts. The brackets surround each entry in the map. There may be from 2 to 256 entries in the map.<p>
For example<p>
<listing>
  sphere {
    &lt;0,1,2&gt;, 2
    pigment {
      gradient x       //this is the PATTERN_TYPE
      pigment_map {
        [0.3 wood scale 0.2]
        [0.3 Jade]    //this is a pigment identifier
        [0.6 Jade]
        [0.9 marble turbulence 1]
      }
    }
  }
</listing>
<p>
When the <strong>gradient x</strong> function returns values from 0.0 to 0.3 the scaled wood pigment is used. From 0.3 to 0.6 the pigment identifier Jade is used. From 0.6 up to 0.9 a blend of Jade and a turbulent marble is used. From 0.9 on up only the turbulent marble is used.<p>
Pigment maps may be nested to any level of complexity you desire. The pigments in a map may have color maps or pigment maps or any type of pigment you want. Any entry of a pigment map may be a solid color however if all entries are solid colors you should use a color map which will render slightly faster.<p>
Entire pigments may also be used with the block patterns such as checker, hexagon and brick. For example...<p>
<listing>
  pigment {
    checker
    pigment { Jade scale .8 }
    pigment { White_Marble scale .5 }
  }
</listing>
<p>
Note that in the case of block patterns the <strong>pigment</strong> wrapping is required around the pigment information.<p>
A pigment map is also used with the <a name="ref 864 pri 9"><strong>average</strong> pigment type. See <a href="pov30029.htm#ref 864 pri 2">&quot;Average&quot;</a> for details.<p>
You may not use <a name="ref 319 pri 12"><strong>pigment_map</strong> or individual pigments with an <a name="ref 852 pri 15"><strong>image_map</strong>. See section <a href="pov30028.htm#ref 1286 pri 0">&quot;Texture Maps&quot;</a> for an alternative way to do this.<hr>
<a name="ref 1287 pri 0"><a name="ref 1288 pri 0"><a name="ref 852 pri 0"><a name="ref 1289 pri 0"><center><h3><a name="section 7.6.1.5">
Section 7.6.1.5<br>Image Maps</h3></center>
When all else fails and none of the above pigment pattern types meets your needs you can use an image map to wrap a 2-D bit-mapped image around your 3-D objects.<hr>
<a name="ref 1290 pri 0"><a name="ref 1291 pri 0"><center><h3><a name="section 7.6.1.5.1">
Section 7.6.1.5.1<br>Specifying an Image Map</h3></center>
The syntax for an <strong>image map</strong> is...<p>
<listing>
  pigment {
    image_map {
      FILE_TYPE &quot;filename&quot;
      MODIFIERS...
    }
  }
</listing>
<p>
<a name="ref 850 pri 0"><a name="ref 936 pri 1"><a name="ref 824 pri 2"><a name="ref 914 pri 3"><a name="ref 1004 pri 4"><a name="ref 991 pri 5">Where FILE_TYPE is one of the following keywords <a name="ref 824 pri 7"><strong>gif</strong>, <a name="ref 936 pri 9"><strong>tga</strong>, <a name="ref 850 pri 10"><strong>iff</strong>, <a name="ref 1004 pri 12"><strong>ppm</strong>, <a name="ref 978 pri 13"><strong>pgm</strong>, <a name="ref 991 pri 15"><strong>png</strong> or <a name="ref 914 pri 17"><strong>sys</strong>. This is followed by the name of the file in quotes. Several optional modifiers may follow the file specification. The modifiers are described below. Note that earlier versions of POV-Ray allowed some modifiers before the FILE_TYPE but that syntax is being phased out in favor of the syntax described here.<p>
<a name="ref 852 pri 21">Filenames specified in the <a name="ref 852 pri 26"><strong>image_map</strong> statements will be searched for in the home (current) directory first and, if not found, will then be searched for in directories specified by any <a name="ref 1292 pri 26"><strong>-L</strong> (library path) options active. This would facilitate keeping all your image maps files in a separate subdirectory and giving an <a name="ref 1292 pri 27"><strong>-L</strong> option on the command line to where your library of image maps are.<p>
By default, the image is mapped onto the x-y-plane. The image is <strong>projected</strong> onto the object as though there were a slide projector somewhere in the -z-direction. The image exactly fills the square area from (x,y) coordinates (0,0) to (1,1) regardless of the image's original size in pixels. If you would like to change this default you may translate, rotate or scale the pigment or texture to map it onto the object's surface as desired.<p>
In section <a href="pov30029.htm#ref 915 pri 1">&quot;Checker&quot;</a> the checker pigment pattern is explained. The checks are described as solid cubes of colored clay from which objects are carved. With image maps you should imagine that each pixel is a long, thin, square, colored rod that extends parallel to the z-axis. The image is made from rows and columns of these rods bundled together and the object is then carved from the bundle.<p>
If you would like to change this default orientation you may translate, rotate or scale the pigment or texture to map it onto the object's surface as desired.<hr>
<a name="ref 1293 pri 0"><a name="ref 1294 pri 0"><center><h3><a name="section 7.6.1.5.2">
Section 7.6.1.5.2<br>The map_type Option</h3></center>
The default projection of the image onto the x-y-plane is called a <strong>planar map type</strong>. This option may be changed by adding the <a name="ref 896 pri 1"><strong>map_type</strong> keyword followed by a number specifying the way to wrap the image around the object.<p>
A <strong>map_type 0</strong> gives the default planar mapping already described.<p>
A <strong>map_type 1</strong> gives a spherical mapping. It assumes that the object is a sphere of any size sitting at the origin. The y-axis is the north/south pole of the spherical mapping. The top and bottom edges of the image just touch the pole regardless of any scaling. The left edge of the image begins at the positive x-axis and wraps the image around the sphere from <strong>west</strong> to <strong>east</strong> in a -y-rotation. The image covers the sphere exactly once. The <a name="ref 956 pri 2"><strong>once</strong> keyword has no meaning for this mapping type.<p>
With <strong>map_type 2</strong> you get a cylindrical mapping. It assumes that a cylinder of any diameter lies along the y-axis. The image wraps around the cylinder just like the spherical map but the image remains one unit tall from y=0 to y=1. This band of color is repeated at all heights unless the <a name="ref 956 pri 4"><strong>once</strong> keyword is applied.<p>
<a name="ref 240 pri 16">Finally <strong>map_type 5</strong> is a torus or donut shaped mapping. It assumes that a torus of major radius one sits at the origin in the x-z-plane. The image is wrapped around similar to spherical or cylindrical maps. However the top and bottom edges of the map wrap over and under the torus where they meet each other on the inner rim.<p>
Types 3 and 4 are still under development.<p>
Note that the <a name="ref 896 pri 18"><strong>map_type</strong> option may also be applied to <a name="ref 900 pri 20"><strong>bump_map</strong> and <a name="ref 901 pri 22"><strong>material_map</strong> statements.<hr>
<a name="ref 1295 pri 0"><a name="ref 1296 pri 0"><a name="ref 315 pri 4"><a name="ref 316 pri 7"><center><h3><a name="section 7.6.1.5.3">
Section 7.6.1.5.3<br>The Filter and Transmit Bitmap Modifiers</h3></center>
To make all or part of an image map transparent you can specify filter and/or transmit values for the color palette/registers of PNG, GIF or IFF pictures (at least for the modes that use palettes). You can do this by adding the keyword <a name="ref 315 pri 12"><strong>filter</strong> or <a name="ref 316 pri 16"><strong>transmit</strong> following the filename. The keyword is followed by two numbers. The first number is the palette number value and the second is the amount of transparency. The values should be separated by a comma. For example:<p>
<listing>
  image_map {
    gif &quot;mypic.gif&quot;
    filter   0, 0.5 // Make color 0 50% filtered transparent
    filter   5, 1.0 // Make color 5 100% filtered transparent
    transmit 8, 0.3 // Make color 8 30% non-filtered transparent
  }
</listing>
<p>
<a name="ref 835 pri 16">You can give the entire image a <a name="ref 315 pri 22"><strong>filter</strong> or <a name="ref 316 pri 27"><strong>transmit</strong> value using <strong>filter all VALUE</strong> or <strong>transmit all VALUE</strong>. For example:<p>
<listing>
  image_map {
    gif &quot;stnglass.gif&quot;
    filter all 0.9
  }
</listing>
<p>
Note that early versions of POV-Ray used the keyword <a name="ref 837 pri 29"><strong>alpha</strong> to specify filtered transparency however that word is often used to describe non-filtered transparency. For this reason <a name="ref 837 pri 32"><strong>alpha</strong> is no longer used.<p>
See section <a href="pov3001a.htm#ref 117 pri 0">&quot;Specifying Colors&quot;</a> for details on the differences between filtered and non-filtered transparency.<hr>
<a name="ref 1297 pri 0"><a name="ref 699 pri 0"><a name="ref 1298 pri 0"><center><h3><a name="section 7.6.1.5.4">
Section 7.6.1.5.4<br>Using the Alpha Channel</h3></center>
Another way to specify non-filtered transmit transparency in an image map is by using the <strong>alpha channel</strong>.<p>
PNG allows you to store a different transparency for each color index in the PNG file, if desired. If your paint programs support this feature of PNG you can do the transparency editing within your paint program rather than specifying transmit values for each color in the POV file. Since PNG and TGA image formats can also store full alpha channel (transparency) information you can generate image maps that have transparency which isn't dependent on the color of a pixel but rather its location in the image.<p>
Although POV uses transmit 0.0 to specify no transparency and 1.0 to specify full transparency, the alpha data ranges from 0 to 255 in the opposite direction. Alpha data 0 means the same as transmit 1.0 and alpha data 255 produces transmit 0.0.<hr>
<a name="ref 1299 pri 0"><a name="ref 1300 pri 0"><center><h3><a name="section 7.6.1.6">
Section 7.6.1.6<br>Quick Color</h3></center>
When developing POV-Ray scenes its often useful to do low quality test runs that render faster. The <a name="ref 785 pri 1"><strong>+Q</strong> command line switch can be used to turn off some time consuming color pattern and lighting calculations to speed things up. However all settings of <a name="ref 1301 pri 1"><strong>+Q5</strong> or lower turns off pigment calculations and creates gray objects.<p>
By adding a <a name="ref 1024 pri 1"><strong>quick_color</strong> to a pigment you tell POV-Ray what solid color to use for quick renders instead of a patterned pigment. For example:<p>
<a name="ref 1024 pri 3"><a name="ref 1026 pri 3"><listing>
  pigment {
    gradient x
    color_map{
      [0.0 color Yellow]
      [0.3 color Cyan]
      [0.6 color Magenta]
      [1.0 color Cyan]
    }
    turbulence 0.5
    lambda 1.5
    omega 0.75
    octaves 8
    quick_color Neon_Pink
  }
</listing>
<p>
This tells POV-Ray to use solid <strong>Neon_Pink</strong> for test runs at quality <a name="ref 785 pri 5"><strong>+Q</strong>5 or lower but to use the turbulent gradient pattern for rendering at <a name="ref 785 pri 8"><strong>+Q</strong>6 and higher.<p>
Note that solid color pigments such as<p>
<listing>
  pigment {color Magenta}
</listing>
<p>
automatically set the <a name="ref 1024 pri 11"><strong>quick_color</strong> to that value. You may override this if you want. Suppose you have 10 spheres on the screen and all are yellow. If you want to identify them individually you could give each a different <a name="ref 1024 pri 15"><strong>quick_color</strong> like this:<p>
<listing>
  sphere {
    &lt;1,2,3&gt;,4
    pigment { color Yellow  quick_color Red }
  }

  sphere {
    &lt;-1,-2,-3&gt;,4
    pigment { color Yellow  quick_color Blue }
  }
</listing>
<p>
and so on. At <a name="ref 785 pri 19"><strong>+Q</strong>6 or higher they will all be yellow but at <a name="ref 785 pri 24"><strong>+Q</strong>5 or lower each would be different colors so you could identify them.<hr>
<a name="ref 1302 pri 0"><a name="ref 324 pri 1"><center><h3><a name="section 7.6.2">
Section 7.6.2<br>Normal</h3></center>
Ray-tracing is known for the dramatic way it depicts reflection, refraction and lighting effects. Much of our perception depends on the reflective properties of an object. Ray tracing can exploit this by playing tricks on our perception to make us see complex details that aren't really there.<p>
Suppose you wanted a very bumpy surface on the object. It would be very difficult to mathematically model lots of bumps. We can however simulate the way bumps look by altering the way light reflects off of the surface. Reflection calculations depend on a vector called a <strong>surface normal</strong> vector. This is a vector which points away from the surface and is perpendicular to it. By artificially modifying (or perturbing) this normal vector you can simulate bumps.<p>
The <a name="ref 324 pri 1"><strong>normal</strong> statement is the part of a texture which defines the pattern of normal perturbations to be applied to an object. Like the pigment statement, you can omit the surrounding texture block to save typing. Do not forget however that there is a texture implied. For example...<p>
<listing>
  //this...                    //can be shortened to this...

  object {                     object {
    My_Object                    My_Object
    texture {                    pigment {color Purple}
      pigment {color Purple}     normal {bumps 0.3}
      normal {bumps 0.3}       }
    }
  }
</listing>
<p>
Note that attaching a normal pattern does not really modify the surface. It only affects the way light reflects or refracts at the surface so that it looks bumpy.<p>
The most complete form for defining a normal is as follows:<p>
<listing>
  normal {
    NORMAL_IDENTIFIER
    PATTERN_TYPE FloatValue
    NORMAL_MODIFIERS
    TRANSFORMATIONS...
  }
</listing>
<p>
Each of the items in a normal are optional but if they are present they should be in the order shown above to insure that the results are as expected. Any items after the NORMAL_IDENTIFIER modify or override settings given in the identifier. If no identifier is specified then the items modify the normal values in the current default texture. The PATTERN_TYPE may optionally be followed by a float value that controls the apparent depth of the bumps. Typical values range from 0.0 to 1.0 but any value may be used. Negative values invert the pattern. The default value if none is specified is 0.5.<p>
Valid NORMAL_MODIFIERS are <a name="ref 865 pri 2"><strong>slope_map</strong>, <a name="ref 937 pri 3"><strong>normal_map</strong>, <a name="ref 900 pri 6"><strong>bump_map</strong> and <a name="ref 903 pri 7"><strong>bump_size</strong> statements as well as any of the generic PATTERN_MODIFIERS such as translate, rotate, scale, turbulence, wave shape and warp statements. Such modifiers apply only to the normal and not to other parts of the texture. Modifiers should be specified last.<p>
There are three basic types of NORMAL_PATTERN_TYPEs. They are pattern normals, specialized normals and bump maps. They differ in the types of modifiers you may use with them. Originally POV-Ray had some patterns which were exclusively used for pigments while others were exclusively used for normals. Since POV-Ray 3.0 you can use any pattern for either pigments or normals. For example it is now valid to use <a name="ref 328 pri 10"><strong>ripples</strong> as a pigment or <a name="ref 281 pri 14"><strong>wood</strong> as a normal type. The patterns <a name="ref 325 pri 17"><strong>bumps</strong>, <a name="ref 326 pri 20"><strong>dents</strong>, <a name="ref 328 pri 24"><strong>ripples</strong>, <a name="ref 329 pri 27"><strong>waves</strong>, <a name="ref 327 pri 30"><strong>wrinkles</strong> and <a name="ref 900 pri 34"><strong>bump_map</strong> were once exclusively normal patterns which could not be used as pigments. Because these six types use specialized normal modification calculations they cannot have <a name="ref 865 pri 36"><strong>slope_map</strong>, <a name="ref 937 pri 38"><strong>normal_map</strong> or wave shape modifiers. All other normal pattern types may use them.<hr>
<a name="ref 1303 pri 0"><a name="ref 1304 pri 0"><a name="ref 865 pri 0"><a name="ref 1305 pri 0"><center><h3><a name="section 7.6.2.1">
Section 7.6.2.1<br>Slope Maps</h3></center>
A <strong>slope map</strong> is a normal pattern modifier which gives the user a great deal of control over the exact shape of the bumpy features. It is best illustrated with a gradient normal pattern. Suppose you have...<p>
<listing>
  plane{ z, 0
    pigment{ White }
    normal { gradient x }
  }
</listing>
<p>
This gives a ramp wave pattern that looks like small linear ramps that climb from the points at x=0 to x=1 and then abruptly drops to 0 again to repeat the ramp from x=1 to x=2. A slope map turns this simple linear ramp into almost any wave shape you want. The syntax is as follows...<p>
<listing>
  normal{
    PATTERN_TYPE Value
    slope_map {
      [ NUM_1 POINT_SLOPE_1]
      [ NUM_2 POINT_SLOPE_2]
      [ NUM_3 POINT_SLOPE_3]
       ...
    }
    NORMAL_MODIFIERS...
  }
</listing>
<p>
Note that the <a name="ref 1282 pri 2"><strong>[]</strong> brackets are part of the actual statement. They are not notational symbols denoting optional parts. The brackets surround each entry in the slope map. There may be from 2 to 256 entries in the map.<p>
The NUM_1, NUM_2, ... are float values between 0.0 and 1.0 inclusive. POINT_SLOPE_1, POINT_SLOPE_2, ... are 2 component vectors such as &lt;0,1&gt; where the first value represents the apparent height of the wave and the second value represents the slope of the wave at that point. The height should range between 0.0 and 1.0 but any value could be used.<p>
The slope value is the change in height per unit of distance. For example a slope of zero means flat, a slope of 1.0 means slope upwards at a 45 degree angle and a slope of -1 means slope down at 45 degrees. Theoretically a slope straight up would have infinite slope. In practice, slope values should be kept in the range -3.0 to +3.0. Keep in mind that this is only the visually apparent slope. A normal does not actually change the surface.<p>
For example here is how to make the ramp slope up for the first half and back down on the second half creating a triangle wave with a sharp peak in the center.<p>
<listing>
  normal {
    gradient x       // this is the PATTERN_TYPE
    slope_map {
      [0   &lt;0, 1&gt;]   // start at bottom and slope up
      [0.5 &lt;1, 1&gt;]   // halfway through reach top still climbing
      [0.5 &lt;1,-1&gt;]   // abruptly slope down
      [1   &lt;0,-1&gt;]   // finish on down slope at bottom
    }
  }
</listing>
<p>
The pattern function is evaluated and the result is a value from 0.0 to 1.0. The first entry says that at x=0 the apparent height is 0 and the slope is 1. At x=0.5 we are at height 1 and slope is still up at 1. The third entry also specifies that at x=0.5 (actually at some tiny fraction above 0.5) we have height 1 but slope -1 which is downwards. Finally at x=1 we are at height 0 again and still sloping down with slope -1.<p>
Although this example connects the points using straight lines the shape is actually a cubic spline. This example creates a smooth sine wave.<p>
<listing>
  normal {
    gradient x          // this is the PATTERN_TYPE
    slope_map {
      [0    &lt;0.5, 1&gt;]   // start in middle and slope up
      [0.25 &lt;1.0, 0&gt;]   // flat slope at top of wave
      [0.5  &lt;0.5,-1&gt;]   // slope down at mid point
      [0.75 &lt;0.0, 0&gt;]   // flat slope at bottom
      [1    &lt;0.5, 1&gt;]   // finish in middle and slope up
    }
  }
</listing>
<p>
This example starts at height 0.5 sloping up at slope 1. At a fourth of the way through we are at the top of the curve at height 1 with slope 0 which is flat. The space between these two is a gentle curve because the start and end slopes are different. At half way we are at half height sloping down to bottom out at 3/4ths. By the end we are climbing at slope 1 again to complete the cycle. There are more examples in <b>slopemap.pov</b> in the sample scenes.<p>
A <a name="ref 865 pri 5"><strong>slope_map</strong> may be used with any pattern except <a name="ref 297 pri 11"><strong>brick</strong>, <a name="ref 915 pri 15"><strong>checker</strong>, <a name="ref 298 pri 21"><strong>hexagon</strong>, <a name="ref 325 pri 25"><strong>bumps</strong>, <a name="ref 326 pri 29"><strong>dents</strong>, <a name="ref 328 pri 34"><strong>ripples</strong>, <a name="ref 329 pri 38"><strong>waves</strong>, <a name="ref 327 pri 42"><strong>wrinkles</strong> and <a name="ref 900 pri 47"><strong>bump_map</strong>.<p>
You may declare and use slope map identifiers. For example:<p>
<listing>
  #declare Fancy_Wave =
    slope_map {       // Now let's get fancy
      [0.0  &lt;0, 1&gt;]   // Do tiny triangle here
      [0.2  &lt;1, 1&gt;]   //  down
      [0.2  &lt;1,-1&gt;]   //     to
      [0.4  &lt;0,-1&gt;]   //       here.
      [0.4  &lt;0, 0&gt;]   // Flat area
      [0.5  &lt;0, 0&gt;]   //   through here.
      [0.5  &lt;1, 0&gt;]   // Square wave leading edge
      [0.6  &lt;1, 0&gt;]   //   trailing edge
      [0.6  &lt;0, 0&gt;]   // Flat again
      [0.7  &lt;0, 0&gt;]   //   through here.
      [0.7  &lt;0, 3&gt;]   // Start scallop
      [0.8  &lt;1, 0&gt;]   //   flat on top
      [0.9  &lt;0,-3&gt;]   //     finish here.
      [0.9  &lt;0, 0&gt;]   // Flat remaining through 1.0
    }

  object{ My_Object
    pigment { White }
    normal {
      wood
      slope_map { Fancy_Wave }
    }
  }
</listing>
<hr>

<center>
<a href="pov30026.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
