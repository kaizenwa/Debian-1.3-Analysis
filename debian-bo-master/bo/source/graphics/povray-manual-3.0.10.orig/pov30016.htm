<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 682 pri 0"><a name="ref 683 pri 0"><center><h3><a name="section 6.2.2.2.3">
Section 6.2.2.2.3<br>Mosaic Preview</h3></center>
<center><table border><tr><td valign=top>Preview_Start_Size=n</td><td valign=top>Set mosaic preview start size to n</td></tr>
<tr><td valign=top>+SPn</td><td valign=top>Same as Preview_Start_Size=n</td></tr>
<tr><td valign=top>Preview_End_Size=n</td><td valign=top>Set mosaic preview end size to n</td></tr>
<tr><td valign=top>+EPn</td><td valign=top>Same as Preview_End_Size=n</td></tr>

</td></tr></table></center>

<p>
Typically, while you are developing a scene, you will do many low resolution test renders to see if objects are placed properly. Often this low resolution version doesn't give you sufficient detail and you have to render the scene again at a higher resolution. A feature called <strong>mosaic preview</strong> solves this problem by automatically rendering your image in several passes.<p>
The early passes paint a rough overview of the entire image using large blocks of pixels that look like mosaic tiles. The image is then refined using higher resolutions on subsequent passes. This display method very quickly displays the entire image at a low resolution, letting you look for any major problems with the scene. As it refines the image, you can concentrate on more details, like shadows and textures. You don't have to wait for a full resolution render to find problems, since you can interrupt the rendering early and fix the scene, or if things look good, you can let it continue and render the scene at high quality and resolution.<p>
To use this feature you should first select a <strong>width</strong> and <strong>height</strong> value that is the highest resolution you will need. Mosaic preview is enabled by specifying how big the mosaic blocks will be on the first pass using <a name="ref 684 pri 0"><strong>Preview_Start_Size</strong>=n or <a name="ref 685 pri 0"><strong>+SP</strong>n. The value n should be a number greater than zero that is a power of two (1, 2, 4, 8, 16, 32, etc.) If it is not a power of two, the nearest power of two less than n is substituted. This sets the size of the squares, measured in pixels. A value of 16 will draw every 16th pixel as a 16*16 pixel square on the first pass. Subsequent passes will use half the previous value (such as 8*8, 4*4 and so on.)<p>
The process continues until it reaches 1*1 pixels or until it reaches the size you set with <a name="ref 686 pri 0"><strong>Preview_End_Size</strong>=n or <a name="ref 687 pri 0"><strong>+EP</strong>n. Again the value n should be a number greater than zero that is a power of two and less than or equal to <a name="ref 684 pri 1"><strong>Preview_Start_Size</strong>. If it is not a power of two, the nearest power of two less than n is substituted. The default ending value is 1. If you set <a name="ref 686 pri 2"><strong>Preview_End_Size</strong> to a value greater than 1 the mosaic passes will end before reaching 1*1, but POV-Ray will always finish with a 1*1. For example, if you want a single 8*8 mosaic pass before rendering the final image, set <a name="ref 684 pri 4"><strong>Preview_Start_Size</strong>=8 and <a name="ref 686 pri 6"><strong>Preview_End_Size</strong>=8.<p>
No file output is performed until the final 1*1 pass is reached. Although the preliminary passes render only as many pixels as needed, the 1*1 pass re-renders every pixel so that anti-aliasing and file output streams work properly. This makes the scene take up to 25% longer than the regular 1*1 pass to render, so it is suggested that mosaic preview not be used for final rendering. Also, the lack of file output until the final pass means that renderings which are interrupted before the 1*1 pass can not be resumed without starting over from the beginning.<p>
Future versions of POV-Ray will include some system of temporary files or buffers which will eliminate these inefficiencies and limitations. Mosaic preview is still a very useful feature for test renderings.<hr>
<a name="ref 688 pri 0"><a name="ref 689 pri 0"><center><h3><a name="section 6.2.2.3">
Section 6.2.2.3<br>File Output Options</h3></center>
<center><table border><tr><td valign=top>Output_to_File=bool</td><td valign=top>Sets file output on/off</td></tr>
<tr><td valign=top>+F</td><td valign=top>Sets file output on (use default type)</td></tr>
<tr><td valign=top>-F</td><td valign=top>Sets file output off</td></tr>

</td></tr></table></center>

<p>
By default, POV-Ray writes an image file to disk. When you are developing a scene and doing test renders, the graphic preview may be sufficient. To save time and disk activity you may turn file output off with <a name="ref 659 pri 1"><strong>Output_to_File</strong>=off or <a name="ref 660 pri 2"><strong>-F</strong>.<hr>
<a name="ref 690 pri 0"><a name="ref 691 pri 0"><center><h3><a name="section 6.2.2.3.1">
Section 6.2.2.3.1<br>Output File Type</h3></center>
<center><table border><tr><td valign=top>Output_File_Type=x</td><td valign=top>Sets file output format to 'x'</td></tr>
<tr><td valign=top>+Fxn</td><td valign=top>Sets file output on; sets format 'x', depth 'n'</td></tr>
<tr><td valign=top>-Fxn</td><td valign=top>Sets file output off; but in future use format 'x', depth 'n'</td></tr>
<tr><td valign=top>Output_Alpha=bool</td><td valign=top>Sets alpha output on/off</td></tr>
<tr><td valign=top>+UA</td><td valign=top>Sets alpha output on</td></tr>
<tr><td valign=top>-UA</td><td valign=top>Sets alpha output off</td></tr>
<tr><td valign=top>Bits_Per_Color=n</td><td valign=top>Sets file output bits/color to 'n'</td></tr>

</td></tr></table></center>

<p>
The default type of image file depends on which platform you are using. MS-DOS and most others default to 24-bit uncompressed Targa. See your platform-specific documentation to see what your default file type is. You may select one of several different file types using <a name="ref 692 pri 0"><strong>Output_File_Type</strong>=x or <a name="ref 693 pri 0"><strong>+F</strong>x where x is one of the following...<p>
<center><table border><tr><td valign=top>+FC</td><td valign=top>Compressed Targa-24 format (RLE, run length encoded)</td></tr>
<tr><td valign=top>+FN</td><td valign=top>New PNG (portable network graphics) format</td></tr>
<tr><td valign=top>+FP</td><td valign=top>Unix PPM format</td></tr>
<tr><td valign=top>+FS</td><td valign=top>System-specific such as Mac Pict or Windows BMP</td></tr>
<tr><td valign=top>+FT</td><td valign=top>Uncompressed Targa-24 format</td></tr>

</td></tr></table></center>

<p>
Note that the obsolete <a name="ref 694 pri 0"><strong>+FD</strong> dump format and <a name="ref 695 pri 0"><strong>+FR</strong> raw format have been dropped from POV-Ray 3.0 because they were rarely used and no longer necessary. PPM, PNG, and system specific formats have been added. PPM format images are uncompressed, and have a simple text header, which makes it a widely portable image format. PNG is a new image format designed not only to replace GIF, but to improve on its shortcomings. PNG offers the highest compression available without loss for high quality applications, such as ray-tracing. The system specific format depends on the platform used and is covered in the appropriate system specific documentation.<p>
Most of these formats output 24 bits per pixel with 8 bits for each of red, green and blue data. PNG allows you to optionally specify the output bit depth from 5 to 16 bits for each of the red, green, and blue colors, giving from 15 to 48 bits of color information per pixel. The default output depth for all formats is 8 bits/color (16 million possible colors), but this may be changed for PNG format files by setting <a name="ref 696 pri 0"><strong>Bits_Per_Color</strong>=n or by specifying <a name="ref 78 pri 2"><strong>+FN</strong>n, where n is the desired bit depth.<p>
Specifying a smaller color depth like 5 bits/color (32768 colors) may be enough for people with 8- or 16-bit (256 or 65536 color) displays, and will improve compression of the PNG file. Higher bit depths like 10 or 12 may be useful for video or publishing applications, and 16 bits/color is good for grayscale height field output (See section <a href="pov3001f.htm#ref 163 pri 1">&quot;Height Field&quot;</a> for details on height fields).<p>
Targa format also allows 8 bits of alpha transparency data to be output, while PNG format allows 5 to 16 bits of alpha transparency data, depending on the color bit depth as specified above. You may turn this option on with <a name="ref 697 pri 2"><strong>Output_Alpha</strong>=on or <a name="ref 661 pri 3"><strong>+UA</strong>. The default is off or <a name="ref 698 pri 3"><strong>-UA</strong>. See section <a href="pov30025.htm#ref 699 pri 0">&quot;Using the Alpha Channel&quot;</a> for further details on transparency.<p>
In addition to support for variable bit-depths, alpha channel, and grayscale formats, PNG files also store the <a name="ref 671 pri 13"><strong>Display_Gamma</strong> value so the image displays properly on all systems (see section <a href="pov30015.htm#ref 666 pri 0">&quot;Display Hardware Settings&quot;</a>). The <a name="ref 164 pri 16"><strong>hf_gray_16</strong> global setting, as described in section <a href="pov3002e.htm#ref 164 pri 1">&quot;HF_Gray_16&quot;</a> will also affect the type of data written to the output file.<hr>
<a name="ref 700 pri 0"><a name="ref 701 pri 0"><center><h3><a name="section 6.2.2.3.2">
Section 6.2.2.3.2<br>Output File Name</h3></center>
<center><table border><tr><td valign=top>Output_File_Name=file</td><td valign=top>Sets output file to file</td></tr>
<tr><td valign=top>+Ofile</td><td valign=top>Same as Output_File_Name=file</td></tr>

</td></tr></table></center>

<p>
The default output filename is created from the scene name and need not be specified. The scene name is the input name with all drive, path, and extension information stripped. For example if the input file name is <b>c:\povray3\mystuff\myfile.pov</b> the scene name is <b>myfile</b>. The proper extension is appended to the scene name based on the file type. For example <b>myfile.tga</b> or <b>myfile.png</b> might be used.<p>
You may override the default output name using <a name="ref 604 pri 2"><strong>Output_File_Name</strong>=<b>file</b> or <a name="ref 702 pri 2"><strong>+O</strong><b>file</b>. For example:<p>
<listing>
  Input_File_Name=myinput.pov
  Output_File_Name=myoutput.tga
</listing>
<p>
If an output file name of &quot;-&quot; is specified (a single minus sign), then the image will be written to standard output, usually the screen. The output can then be piped into another program or to a GUI if desired.<hr>
<a name="ref 703 pri 0"><a name="ref 704 pri 0"><center><h3><a name="section 6.2.2.3.3">
Section 6.2.2.3.3<br>Output File Buffer</h3></center>
<center><table border><tr><td valign=top>Buffer_Output=bool</td><td valign=top>Turn output buffering on/off</td></tr>
<tr><td valign=top>+B</td><td valign=top>Turn output buffering on</td></tr>
<tr><td valign=top>-B</td><td valign=top>Turn output buffering off</td></tr>
<tr><td valign=top>Buffer_Size=n</td><td valign=top>Set output buffer size to 'n' kilobytes. If n is zero, no buffering. If n &lt; system default, the system default is used.</td></tr>
<tr><td valign=top>+Bn</td><td valign=top>Turn buffer on, set size n</td></tr>
<tr><td valign=top>-Bn</td><td valign=top>Turn buffer off, but for future set size n</td></tr>

</td></tr></table></center>

<p>
The <a name="ref 705 pri 0"><strong>Buffer_Output</strong> and <a name="ref 706 pri 0"><strong>Buffer_Size</strong> options and the <a name="ref 707 pri 0"><strong>+B</strong> switch allows you to assign large buffers to the output file. This reduces the amount of time spent writing to the disk. If this parameter is not specified, then as each row of pixels is finished, the line is written to the file and the file is flushed. On most systems, this operation ensures that the file is written to the disk so that in the event of a system crash or other catastrophic event, at least a part of the picture has been stored properly and retrievable on disk. The default is not to use any buffer.<hr>
<a name="ref 708 pri 0"><a name="ref 709 pri 0"><center><h3><a name="section 6.2.2.4">
Section 6.2.2.4<br>CPU Utilization Histogram</h3></center>
The CPU utilization histogram is a way of finding out where POV-Ray is spending its rendering time, as well as an interesting way of generating heightfields. The histogram splits up the screen into a rectangular grid of blocks. As POV-Ray renders the image, it calculates the amount of time it spends rendering each pixel and then adds this time to the total rendering time for each grid block. When the rendering is complete, the histogram is a file which represents how much time was spent computing the pixels in each grid block.<p>
Not all versions of POV-Ray allow the creation of histograms. The histogram output is dependent on the file type and the system that POV-Ray is being run on.<hr>
<a name="ref 710 pri 0"><a name="ref 711 pri 0"><center><h3><a name="section 6.2.2.4.1">
Section 6.2.2.4.1<br>File Type</h3></center>
<center><table border><tr><td valign=top>Histogram_Type=x</td><td valign=top>Set histogram type to x (turn off if type is 'X')</td></tr>
<tr><td valign=top>+HTx</td><td valign=top>Same as Histogram_Type=x</td></tr>

</td></tr></table></center>

<p>
The histogram output file type is nearly the same as that used for the image output file types in <a href="pov30016.htm#ref 691 pri 0">&quot;Output File Type&quot;</a>. The available histogram file types are as follows.<p>
<center><table border><tr><td valign=top>+HTC</td><td valign=top>Comma separated values (CSV) often used in spreadsheets</td></tr>
<tr><td valign=top>+HTN</td><td valign=top>New PNG (portable network graphics) format grayscale</td></tr>
<tr><td valign=top>+HTP</td><td valign=top>Unix PPM format</td></tr>
<tr><td valign=top>+HTS</td><td valign=top>System-specific such as Mac Pict or Windows BMP</td></tr>
<tr><td valign=top>+HTT</td><td valign=top>Uncompressed Targa-24 format (TGA)</td></tr>
<tr><td valign=top>+HTX</td><td valign=top>No histogram file output is generated</td></tr>

</td></tr></table></center>

<p>
Note that <a name="ref 712 pri 0"><strong>+HTC</strong> does not generate a compressed Targa-24 format output file but rather a text file with a comma-separated list of the time spent in each grid block, in left-to-right and top-to bottom order. The units of time output to the CSV file are system dependent. See the system specific documentation for further details on the time units in CSV files.<p>
The Targa and PPM format files are in the POV heightfield format (see <a href="pov3001f.htm#ref 163 pri 1">&quot;Height Field&quot;</a>), so the histogram information is stored in both the red and green parts of the image, which makes it unsuitable for viewing. When used as a height field, lower values indicate less time spent calculating the pixels in that block, while higher indicate more time spent in that block.<p>
PNG format images are stored as grayscale images and are useful for both viewing the histogram data as well as for use as a heightfield. In PNG files, the darker (lower) areas indicate less time spent in that grid block, while the brighter (higher) areas indicate more time spent in that grid block.<hr>
<a name="ref 713 pri 0"><a name="ref 714 pri 0"><center><h3><a name="section 6.2.2.4.2">
Section 6.2.2.4.2<br>File Name</h3></center>
<center><table border><tr><td valign=top>Histogram_Name=file</td><td valign=top>Set histogram name to file</td></tr>
<tr><td valign=top>+HNfile</td><td valign=top>Same as Histogram_Name=file</td></tr>

</td></tr></table></center>

<p>
The histogram file name is the name of the file in which to write the histogram data. If the file name is not specified it will default to <b>histgram.ext</b>, where ext is based on the file type specified previously. Note that if the histogram name is specified the file name extension should match the file type.<hr>
<a name="ref 715 pri 0"><a name="ref 716 pri 0"><center><h3><a name="section 6.2.2.4.3">
Section 6.2.2.4.3<br>Grid Size</h3></center>
<center><table border><tr><td valign=top>Histogram_Grid_Size=xx.yy</td><td valign=top>Set histogram grid to xx by yy</td></tr>
<tr><td valign=top>+HSxx.yy</td><td valign=top>Same as Histogram_Grid_Size=xx.yy</td></tr>

</td></tr></table></center>

<p>
The histogram grid size gives the number of times the image is split up in both the horizontal and vertical directions. For example<p>
<listing>
  povray +Isample +W640 +H480 +HTN +HS160.120 +HNhistogrm.png
</listing>
<p>
will split the image into 160*120 grid blocks, each of size 4*4 pixels, and output a PNG file, suitable for viewing or for use as a heightfield. Smaller numbers for the grid size mean more pixels are put into the same grid block. With CSV output, the number of values output is the same as the number of grid blocks specified. For the other formats the image size is identical to the rendered image rather than the specified grid size, to allow easy comparison between the histogram and the rendered image. If the histogram grid size is not specified, it will default to the same size as the image, so there will be one grid block per pixel.<p>
Note that on systems that do task-switching or multi-tasking the histogram may not exactly represent the amount of time POV-Ray spent in a given grid block since the histogram is based on real time rather than CPU time. As a result, time may be spent for operating system overhead or on other tasks running at the same time. This will cause the histogram to have speckling, noise or large spikes. This can be reduced by decreasing the grid size so that more pixels are averaged into a given grid block.<hr>
<a name="ref 717 pri 0"><a name="ref 718 pri 0"><center><h3><a name="section 6.2.3">
Section 6.2.3<br>Scene Parsing Options</h3></center>
POV-Ray reads in your scene file and processes it to create an internal model of your scene. The process is called <strong>parsing</strong>. As your file is parsed other files may be read along the way. This section covers options concerning what to parse, where to find it and what version specific assumptions it should make while parsing it.<hr>
<a name="ref 719 pri 0"><a name="ref 720 pri 0"><center><h3><a name="section 6.2.3.1">
Section 6.2.3.1<br>Input File Name</h3></center>
<center><table border><tr><td valign=top>Input_File_Name=file</td><td valign=top>Sets input file name to file</td></tr>
<tr><td valign=top>+Ifile</td><td valign=top>Same as Input_File_Name=file</td></tr>

</td></tr></table></center>

<p>
You will probably always set this option but if you do not the default input filename is <b>object.pov</b>. If you do not have an extension then <b>.pov</b> is assumed. On case-sensitive operating systems both <b>.pov</b> and <b>.POV</b> are tried. A full path specification may be used (on MS-DOS systems <b>+Ic:\povray3\mystuff\myfile.pov</b> is allowed for example). In addition to specifying the input file name this also establishes the <strong>scene name</strong>.<p>
The scene name is the input name with drive, path and extension stripped. In the above example the scene name is <b>myfile</b>. This name is used to create a default output file name and it is referenced other places.<p>
If you use &quot;-&quot; as the input file name the input will be read from standard input. Thus you can pipe a scene created by a program to POV-Ray and render it without having a scene file.<p>
Under MS-DOS you can try this feature by typing.<p>
<listing>
  type ANYSCENE.POV | povray +I-
</listing>
<hr>
<a name="ref 721 pri 0"><a name="ref 722 pri 0"><center><h3><a name="section 6.2.3.2">
Section 6.2.3.2<br>Library Paths</h3></center>
<center><table border><tr><td valign=top>Library_Path=path</td><td valign=top>Add path to list of library paths</td></tr>
<tr><td valign=top>+Lpath</td><td valign=top>Same as Library_Path=path</td></tr>

</td></tr></table></center>

<p>
POV-Ray looks for files in the current directory. If it does not find a file it needs it looks in various other library directories which you specify. POV-Ray does not search your operating system path. It only searches the current directory and directories which you specify with this option. For example the standard include files are usually kept in one special directory. You tell POV-Ray to look there with...<p>
<listing>
  Library_Path=c:\povray3\include
</listing>
<p>
You must not specify any final path separators (&quot;\&quot; or &quot;/&quot;) at the end.<p>
Multiple uses of this option switch do not override previous settings. Up to ten unique paths may be specified. If you specify the exact same path twice it is only counts once. The current directory will be searched first followed by the indicated library directories in the order in which you specified them.<hr>

<center>
<a href="pov30017.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
