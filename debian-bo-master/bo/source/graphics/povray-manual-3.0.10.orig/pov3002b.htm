<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1458 pri 0"><a name="ref 327 pri 1"><a name="ref 1459 pri 1"><center><h3><a name="section 7.6.7.24">
Section 7.6.7.24<br>Wrinkles</h3></center>
The <a name="ref 327 pri 1"><strong>wrinkles</strong> pattern was originally designed only to be used as a normal pattern. It uses a 1/f noise pattern similar to granite but the features in wrinkles are sharper. The pattern can be used to simulate wrinkled cellophane or foil. It also makes an excellent stucco texture.<p>
When used as a normal pattern it uses a specialized normal perturbation function. This means that the wrinkles pattern cannot be used with normal map, slope map or wave type modifiers in a normal statement.<p>
When used as a pigment pattern or texture pattern, the <a name="ref 327 pri 6"><strong>wrinkles</strong> pattern is similar to normal wrinkles but is not identical as are most normals when compared to pigments. When used in pigment or texture statements the <a name="ref 327 pri 12"><strong>wrinkles</strong> pattern uses the <a name="ref 1037 pri 27"><strong>ramp_wave</strong> wave type by default but may use any wave type. The pattern may be used with <a name="ref 282 pri 50"><strong>color_map</strong>, <a name="ref 319 pri 72"><strong>pigment_map</strong> and <a name="ref 934 pri 93"><strong>texture_map</strong>.<hr>
<a name="ref 1460 pri 0"><a name="ref 1461 pri 0"><center><h3><a name="section 7.6.8">
Section 7.6.8<br>Pattern Modifiers</h3></center>
Pattern modifiers are statements or parameters which modify how a pattern is evaluated or tells what to do with the pattern. The modifiers <a name="ref 282 pri 24"><strong>color_map</strong> and <a name="ref 319 pri 47"><strong>pigment_map</strong> apply only to pigments. See section <a href="pov30024.htm#ref 294 pri 1">&quot;Pigment&quot;</a>. The modifiers <a name="ref 903 pri 52"><strong>bump_size</strong>, <a name="ref 865 pri 70"><strong>slope_map</strong> and <a name="ref 937 pri 87"><strong>normal_map</strong> apply only to normals. See section <a href="pov30025.htm#ref 324 pri 1">&quot;Normal&quot;</a>. The <a name="ref 934 pri 109"><strong>texture_map</strong> modifier can only be used with textures. See section <a href="pov30028.htm#ref 1286 pri 0">&quot;Texture Maps&quot;</a>.<p>
The pattern modifiers in the following section can be used with pigment, normal or texture patterns.<hr>
<a name="ref 1462 pri 0"><a name="ref 1463 pri 0"><center><h3><a name="section 7.6.8.1">
Section 7.6.8.1<br>Transforming Patterns</h3></center>
The most common pattern modifiers are the transformation modifiers <a name="ref 954 pri 9"><strong>translate</strong>, <a name="ref 216 pri 21"><strong>rotate</strong>, <a name="ref 215 pri 38"><strong>scale</strong> and <a name="ref 904 pri 43"><strong>matrix</strong>. For details on these commands see section <a href="pov3001d.htm#ref 1155 pri 0">&quot;Transformations&quot;</a>.<p>
These modifiers may be placed inside pigment, normal and texture statements to change the position, size and orientation of the patterns.<p>
In general the order of transformations relative to other pattern modifiers such as <a name="ref 283 pri 55"><strong>turbulence</strong>, <a name="ref 282 pri 80"><strong>color_map</strong> and other maps is not important. For example scaling before or after turbulence makes no difference. The turbulence is done first, then the scaling regardless of which is specified first. However the order in which transformations are performed relative to <a name="ref 1020 pri 81"><strong>warp</strong> statements is important. See <a href="pov3002b.htm#ref 1464 pri 0">&quot;Warps&quot;</a> for details.<hr>
<a name="ref 1465 pri 0"><a name="ref 1466 pri 0"><a name="ref 309 pri 7"><a name="ref 576 pri 12"><center><h3><a name="section 7.6.8.2">
Section 7.6.8.2<br>Frequency and Phase</h3></center>
The <a name="ref 309 pri 20"><strong>frequency</strong> and <a name="ref 576 pri 26"><strong>phase</strong> modifiers act as a type of scale and translate modifiers for <a name="ref 282 pri 52"><strong>color_map</strong>, <a name="ref 319 pri 76"><strong>pigment_map</strong>, <a name="ref 937 pri 94"><strong>normal_map</strong>, <a name="ref 865 pri 113"><strong>slope_map</strong> and <a name="ref 934 pri 136"><strong>texture_map</strong>. This discussion uses a color map as an example but the same principles apply to pigment maps, normal maps, slope maps and texture maps.<p>
The <a name="ref 309 pri 145"><strong>frequency</strong> keyword adjusts the number of times that a color map repeats over one cycle of a pattern. For example <a name="ref 829 pri 147"><strong>gradient</strong> covers color map values 0 to 1 over the range from x=0 to x=1. By adding <strong>frequency 2.0</strong> the color map repeats twice over that same range. The same effect can be achieved using <strong>scale 0.5*x</strong> so the frequency keyword isn't that useful for patterns like gradient.<p>
However the radial pattern wraps the color map around the +y-axis once. If you wanted two copies of the map (or 3 or 10 or 100) you'd have to build a bigger map. Adding <strong>frequency 2.0</strong> causes the color map to be used twice per revolution. Try this:<p>
<listing>
  pigment {
    radial
    color_map{[0.5 color Red][0.5 color White]}
    frequency 6
  }
</listing>
<p>
The result is six sets of red and white radial stripes evenly spaced around the object.<p>
The float after <a name="ref 309 pri 157"><strong>frequency</strong> can be any value. Values greater than 1.0 causes more than one copy of the map to be used. Values from 0.0 to 1.0 cause a fraction of the map to be used. Negative values reverses the map.<p>
The <a name="ref 576 pri 164"><strong>phase</strong> value causes the map entries to be shifted so that the map starts and ends at a different place. In the example above if you render successive frames at phase 0 then phase 0.1, phase 0.2 etc you could create an animation that rotates the stripes. The same effect can be easily achieved by rotating the radial pigment using <strong>rotate  y*Angle</strong> but there are other uses where phase can be handy.<p>
Sometimes you create a great looking gradient or wood color map but you want the grain slightly adjusted in or out. You could re-order the color map entries but that's a pain. A phase adjustment will shift everything but keep the same scale. Try animating a mandel pigment for a color palette rotation effect.<p>
Frequency and phase have no effect on block patterns checker, brick and hexagon nor do they effect image maps, bump maps or material maps. They also have no effect in normal statements when used with bumps, dents, quilted or wrinkles because these normal patterns cannot use <a name="ref 937 pri 183"><strong>normal_map</strong> or <a name="ref 865 pri 203"><strong>slope_map</strong>.<p>
They can be used with normal patterns ripples and waves even though these two patterns cannot use <a name="ref 937 pri 223"><strong>normal_map</strong> or <a name="ref 865 pri 244"><strong>slope_map</strong> either. When used with ripples or waves, frequency adjusts the space between features and phase can be adjusted from 0.0 to 1.0 to cause the ripple or waves to move relative to their center for animating the features.<p>
These values work by applying the following formula<p>
<listing>
  NEW_VALUE = fmod ( OLD_VALUE * FREQUENCY + PHASE, 1.0 ).
</listing>
<hr>
<a name="ref 1467 pri 0"><a name="ref 1468 pri 0"><a name="ref 1037 pri 16"><a name="ref 857 pri 16"><a name="ref 960 pri 20"><a name="ref 846 pri 20"><center><h3><a name="section 7.6.8.3">
Section 7.6.8.3<br>Waveform</h3></center>
Most patterns that take <a name="ref 282 pri 47"><strong>color_map</strong>, <a name="ref 319 pri 72"><strong>pigment_map</strong>, <a name="ref 865 pri 94"><strong>slope_map</strong>, <a name="ref 937 pri 115"><strong>normal_map</strong> or <a name="ref 934 pri 139"><strong>texture_map</strong> use the entries in the map in order from 0.0 to 1.0. The wood and marble patterns use the map from 0.0 to 1.0 and then reverses it and runs it from 1.0 to 0.0. The difference can easily be seen when these patterns are used as normal patterns with no maps.<p>
Patterns such as gradient or onion generate a grove or slot that looks like a ramp that drops off sharply. This is called a <a name="ref 1037 pri 156"><strong>ramp_wave</strong> wave type. However wood and marble slope upwards to a peak, then slope down again in a <a name="ref 960 pri 161"><strong>triangle_wave</strong>. In previous versions of POV-Ray there was no way to change the wave types. You could simulate a triangle wave on a ramp wave pattern by duplicating the map entries in reverse, however there was no way to use a ramp wave on wood or marble.<p>
Now any pattern that takes a map can have the default wave type overridden. For example:<p>
<listing>
  pigment { wood color_map { MyMap } ramp_wave }
</listing>
<p>
Also available are <a name="ref 857 pri 162"><strong>sine_wave</strong> and <a name="ref 846 pri 163"><strong>scallop_wave</strong> types. These types are of most use in normal patterns as a type of built-in slope map. The <a name="ref 857 pri 165"><strong>sine_wave</strong> takes the zig-zag of a ramp wave and turns it into a gentle rolling wave with smooth transitions. The <a name="ref 846 pri 167"><strong>scallop_wave</strong> uses the absolute value of the sine wave which looks like corduroy when scaled small or like a stack of cylinders when scaled larger.<p>
Although any of these wave types can be used for pigments, normals or textures, the <a name="ref 857 pri 170"><strong>sine_wave</strong> and <a name="ref 846 pri 173"><strong>scallop_wave</strong> types are not as noticeable on pigments or textures as they are for normals.<p>
Wave types have no effect on block patterns checker, brick and hexagon nor do they effect image maps, bump maps or material maps. They also have no effect in normal statements when used with bumps, dents, quilted or wrinkles because these normal patterns cannot use <a name="ref 937 pri 195"><strong>normal_map</strong> or <a name="ref 865 pri 218"><strong>slope_map</strong>.<hr>
<a name="ref 1469 pri 0"><a name="ref 283 pri 1"><center><h3><a name="section 7.6.8.4">
Section 7.6.8.4<br>Turbulence</h3></center>
The keyword <a name="ref 283 pri 1"><strong>turbulence</strong> followed by a float or vector may be used to stir up any pigment, normal, texture, irid or halo. A number of optional parameters may be used with turbulence to control how it is computed. For example:<p>
<listing>
  pigment  {
    wood color_map { MyMap }
    turbulence TURB_VECTOR
    octaves FLOAT
    omega FLOAT
    lambda FLOAT
  }
</listing>
<p>
Typical turbulence values range from the default 0.0, which is no turbulence, to 1.0 or more, which is very turbulent. If a vector is specified different amounts of turbulence are applied in the x-, y- and z-direction. For example<p>
<listing>
  turbulence &lt;1.0, 0.6, 0.1&gt;
</listing>
<p>
has much turbulence in the x-direction, a moderate amount in the y-direction and a small amount in the z-direction.<p>
Turbulence uses a random noise function called <strong>DNoise</strong>. This is similar to the noise used in the bozo pattern except that instead of giving a single value it gives a direction. You can think of it as the direction that the wind is blowing at that spot. Points close together generate almost the same value but points far apart are randomly different.<p>
In general the order of turbulence parameters relative to other pattern modifiers such as transformations, color maps and other maps is not important. For example scaling before or after turbulence makes no difference. The turbulence is done first, then the scaling regardless of which is specified first. See section <a href="pov3002b.htm#ref 1464 pri 0">&quot;Warps&quot;</a> for a way to work around this behavior.<p>
Turbulence uses DNoise to push a point around in several steps called <a name="ref 312 pri 5"><strong>octaves</strong>. We locate the point we want to evaluate, then push it around a bit using turbulence to get to a different point then look up the color or pattern of the new point.<p>
It says in effect <strong>Don't give me the color at this spot... take a  few random steps in different directions and give me that color</strong>. Each step is typically half as long as the one before. For example:<p>
 <center><img src="pov3005a.gif" border=0 width=320 height=240><br><cite>Turbulence random walk.</cite></center><br> <p>
The magnitude of these steps is controlled by the turbulence value. There are three additional parameters which control how turbulence is computed. They are <a name="ref 312 pri 10"><strong>octaves</strong>, <a name="ref 311 pri 14"><strong>lambda</strong> and <a name="ref 310 pri 18"><strong>omega</strong>. Each is optional. Each is followed by a single float value. Each has no effect when there is no turbulence.<hr>
<a name="ref 1470 pri 0"><a name="ref 312 pri 1"><center><h3><a name="section 7.6.8.5">
Section 7.6.8.5<br>Octaves</h3></center>
The <a name="ref 312 pri 1"><strong>octaves</strong> value controls the number of steps of turbulence that are computed. Legal values range from 1 to 10. The default value of 6 is a fairly high value; you won't see much change by setting it to a higher value because the extra steps are too small. Float values are truncated to integer. Smaller numbers of octaves give a gentler, wavy turbulence and computes faster. Higher octaves create more jagged or fuzzy turbulence and takes longer to compute.<hr>
<a name="ref 1471 pri 0"><a name="ref 311 pri 1"><center><h3><a name="section 7.6.8.6">
Section 7.6.8.6<br>Lambda</h3></center>
The <a name="ref 311 pri 1"><strong>lambda</strong> parameter controls how statistically different the random move of an octave is compared to its previous octave. The default value is 2.0 which is quite random. Values close to lambda 1.0 will straighten out the randomness of the path in the diagram above. The zig-zag steps in the calculation are in nearly the same direction. Higher values can look more <strong>swirly</strong> under some circumstances.<hr>
<a name="ref 1472 pri 0"><a name="ref 310 pri 1"><center><h3><a name="section 7.6.8.7">
Section 7.6.8.7<br>Omega</h3></center>
The <a name="ref 310 pri 1"><strong>omega</strong> value controls how large each successive octave step is compared to the previous value. Each successive octave of turbulence is multiplied by the omega value. The default <strong>omega 0.5</strong> means that each octave is 1/2 the size of the previous one. Higher omega values mean that 2nd, 3rd, 4th and up octaves contribute more turbulence giving a sharper, <strong>crinkly</strong> look while smaller omegas give a fuzzy kind of turbulence that gets blurry in places.<hr>
<a name="ref 1473 pri 0"><a name="ref 1464 pri 0"><center><h3><a name="section 7.6.8.8">
Section 7.6.8.8<br>Warps</h3></center>
The <a name="ref 1020 pri 0"><strong>warp</strong> statement is a pattern modifier that is similar to turbulence. Turbulence works by taking the pattern evaluation point and pushing it about in a series of random steps. However warps push the point in very well-defined, non-random, geometric ways. The warp statement also overcomes some limitations of traditional turbulence and transformations by giving the user more control over the order in which turbulence, transformation and warp modifiers are applied to the pattern.<p>
Currently there are three types of warps but the syntax was designed to allow future expansion. The first two, the <a name="ref 830 pri 1"><strong>repeat</strong> warp and the <a name="ref 869 pri 2"><strong>black_hole</strong> warp are new features for POV-Ray that modify the pattern in geometric ways. The other warp provides an alternative way to specify turbulence.<p>
The syntax for using a <a name="ref 1020 pri 4"><strong>warp</strong> statement in a pigment is<p>
<listing>
  pigment {
    PATTERN_TYPE
    PIGMENT_MODIFIERS...
    warp { WARP_ITEMS...}
    OTHER_PIGMENT_MODIFIERS...
  }
</listing>
<p>
Similarly warps may be used in normals and textures. You may have as many separate warp statements as you like in each pattern. The placement of warp statements relative to other modifiers such as <a name="ref 282 pri 32"><strong>color_map</strong> or <a name="ref 283 pri 45"><strong>turbulence</strong> is not important. However placement of warp statements relative to each other and to transformations is significant. Multiple warps and transformations are evaluated in the order in which you specify them. For example if you translate, then warp or warp, then translate, the results can be different.<hr>
<a name="ref 1474 pri 0"><a name="ref 1475 pri 0"><a name="ref 869 pri 0"><center><h3><a name="section 7.6.8.8.1">
Section 7.6.8.8.1<br>Black Hole Warp</h3></center>
A <a name="ref 1476 pri 0"><strong>black hole</strong> is so named because of its similarity to real black holes. Just like the real thing, you cannot actually see a black hole. The only way to detect its presence is by the effect it has on things that surround it. Unlike the real thing, however, it won't swallow you up and compress your entire body to a volume of, say, 2.0 10-10 microns in diameter if you get too close (We're working on that part).<p>
Take, for example, a woodgrain. Using POV-Ray's normal turbulence and other texture modifier functions, you can get a nice, random appearance to the grain. But in its randomness it is regular - it is regularly random! Adding a black hole allows you to create a localised disturbance in a woodgrain in either one or multiple locations. The black hole can have the effect of either <strong>sucking</strong> the surrounding texture into itself (like the real thing) or <strong>pushing</strong> it away. In the latter case, applied to a woodgrain, it would look to the viewer as if there were a knothole in the wood. In this text we use a woodgrain regularly as an example, because it is ideally suitable to explaining black holes. However, black holes may in fact be used with any texture.<p>
The effect that the black hole has on the texture can be specified. By default, it <strong>sucks</strong> with the strength calculated exponentially (inverse-square). You can change this if you like.<p>
Black holes may be used anywhere a Warp is permitted. The syntax is:<p>
<listing>
  warp
  {
    black_hole &lt;CENTER&gt;, RADIUS
    [falloff VALUE]
    [strength VALUE]
    [repeat &lt;VECTOR&gt;]
    [turbulence &lt;VECTOR&gt;]
    [inverse]
  }
</listing>
<p>
Some examples are given by<p>
<listing>
  warp
  {
    black_hole &lt;0, 0, 0&gt;, 0.5
  }

  warp
  {
    black_hole &lt;0.15, 0.125, 0&gt;, 0.5
    falloff 7
    strength 1.0
    repeat &lt;1.25, 1.25, 0&gt;
    turbulence &lt;0.25, 0.25, 0&gt;
    inverse
  }

  warp
  {
    black_hole &lt;0, 0, 0&gt;, 1.0
    falloff 2
    strength 2
    inverse
  }
</listing>
<p>
In order to fully understand how a black hole works, it is important to know the theory behind it. A black hole (or any warp) works by taking a point and <strong>perturbing</strong> it to another location. The amount of perturbation depends on the strength of the black hole at the original point passed in to it. The amount of perturbation directly relates to the amount of visual movement that you can see occur in a texture. The stronger the black hole at the input co-ordinate the more that original co-ordinate is moved to another location (either closer to or further away from the center of the black hole.)<p>
Movement always occurs on the vector that exists between the input point and the center of the black hole.<p>
Black holes are considered to be spheres. For a point to be affected by a black hole, it must be within the sphere's volume.<p>
Suppose you have a black hole at &lt;1,1,1&gt; and a point at &lt;1,2,1&gt;. If this point is perturbed by a total amount of +1 units its new location is &lt;1,3,1&gt;, which is on a direct line extrapolated from the vector between &lt;1,1,1&gt; and &lt;1,2,1&gt;. In this case the point is <strong>pushed</strong> away from the black hole, which is not <strong>normal</strong> behaviour but is good for demonstration purposes.<p>
The internal properties of a black hole are as follows.<p>
<center><table border><tr><td valign=top>Center</td><td valign=top>The center of the black hole.</td></tr>
<tr><td valign=top>Radius</td><td valign=top>Its radius.</td></tr>
<tr><td valign=top>Falloff</td><td valign=top>The power of two by which the effect falls off (default 2.)</td></tr>
<tr><td valign=top>Strength</td><td valign=top>The magnitude of the transformation effect (see below.)</td></tr>
<tr><td valign=top>Inverted</td><td valign=top>If set, 'push' points away instead of 'pulling' them in.</td></tr>
<tr><td valign=top>Repeat</td><td valign=top>If set, we have many black holes instead of one.</td></tr>
<tr><td valign=top>Turbulence</td><td valign=top>If set, each new repeated black hole's position is uncertain.</td></tr>
<tr><td valign=top>Repeat_Vector</td><td valign=top>The &lt;x,y,z&gt; factor to repeat by.</td></tr>
<tr><td valign=top>Turbulence_Vector</td><td valign=top>The maximum &lt;x,y,z&gt; factor for turbulence randomness.</td></tr>

</td></tr></table></center>

<p>
Each of these are discussed below.<p>
<b>Center</b>: A vector defining the center of the sphere that represents the black hole. If the black hole has <strong>Repeat</strong> set it is the offset within each block.<p>
<b>Radius</b>: A number giving the length, in units, of the radius of the sphere that represents the black hole.<p>
If a point is not within radius units of &lt;center&gt; it cannot be affected by the black hole and will not be perturbed.<p>
<b>Falloff</b>: The power by which the effect of the black hole falls off. The default is two. The force of the black hole at any given point, before applying the <strong>Strength</strong> modifier, is as follows.<p>
First, convert the distance from the point to the center to a proportion (0 to 1) that the point is from the edge of the black hole. A point on the perimeter of the black hole will be 0.0; a point at the centre will be 1.0; a point exactly halfway will be 0.5, and so forth.<p>
Mentally you can consider this to be a <strong>closeness</strong> factor. A closeness of 1.0 is as close as you can get to the center (i. e. <strong>at</strong> the center), a closeness of 0.0 is as far away as you can get from the center and still be inside the black hole and a closeness of 0.5 means the point is exactly halfway between the two.<p>
Call this value c. Raise c to the power specified in <strong>Falloff</strong>. By default Falloff is 2, so this is c^2 or c squared. The resulting value is the force of the black hole at that exact location and is used, after applying the <strong>Strength</strong> scaling factor as described below, to determine how much the point is perturbed in space.<p>
For example, if c is 0.5 the force is 0.5^2 or 0.25. If c is 0.25 the force is 0.125. But if c is exactly 1.0 the force is 1.0.<p>
Recall that as c gets smaller the point is farther from the center of the black hole. Using the default power of 2, you can see that as c reduces, the force reduces exponentially in an inverse-square relationship. Put in plain english, it means that the force is much stronger (by a power of two) towards the center than it is at the outside.<p>
By increasing <strong>Falloff</strong>, you can increase the magnitude of the falloff. A large value will mean points towards the perimeter will hardly be affected at all and points towards the center will be affected strongly.<p>
A value of 1.0 for <strong>Falloff</strong> will mean that the effect is linear. A point that is exactly halfway to the center of the black hole will be affected by a force of exactly 0.5.<p>
A value of <strong>Falloff</strong> of less than one but greater than zero means that as you get closer to the outside, the force increases rather than decreases. This can have some uses but there is a side effect. Recall that the effect of a black hole ceases outside its perimeter. This means that points just within the permiter will be affected strongly and those just outside not at all. This would lead to a visible border, shaped as a sphere.<p>
A value for <strong>Falloff</strong> of 0 would mean that the force would be 1.0 for all points within the black hole, since any number larger 0 raised to the power of 0 is 1.0.<p>
The magnitude of the movement of the point is determined basically by the value of force after scaling. We'll consider scaling later. Lets take an example.<p>
Suppose we have a black hole of radius 2.0 and a point that is exactly 1.0 units from the center. That means it is exactly half-way to the center and that c would be 0.5. If we use the default falloff of 2 the force at that point is 0.5^2 or 0.25. What this means is that we must move the point by 0.25 of its distance from the center. In this case it is 1.0 units from the center, so we move it by 1.0*0.25 or 0.25 units. This gives a final distance of 1.0-(1.0*0.25) or 0.75 units from the center, on a direct line in 3D space between the original position and the center.<p>
If the point were part of, say, a wood grain, the wood grain would appear to bend towards the (invisible) center of the black hole. If the <strong>Inverse</strong> flag were set, however, it would be <strong>pushed</strong> away, meaning its final position would be 1.0+(1.0*0.25) or 1.25 units from the center.<p>
<b>Strength</b>: The <strong>Strength</strong> gives you a bit more control over how much a point is perturbed by the black hole. Basically, the force of the black hole (as determined above) is multiplied by the value of <strong>Strength</strong>, which defaults to 1.0. If you set Strength to 0.5, for example, all points within the black hole will be moved by only half as much as they would have been. If you set it to 2.0 they will be moved twice as much.<p>
There is a rider to the latter example, though - the movement is clipped to a maximum of the original distance from the center. That is to say, a point that is 0.75 units from the center may only be moved by a maximum of 0.75 units either towards the center or away from it, regardless of the value of <strong>Strength</strong>. The result of this clipping is that you will have an <strong>exclusion</strong> area near the centre of the black hole where all points whose final force value exceeded or equaled 1.0 were moved by a fixed amount.<p>
<b>Inverted</b>: If <strong>Inverted</strong> is set points are <strong>pushed</strong> away from the center instead of being pulled in.<p>
<b>Repeat</b>: <strong>Repeat</strong> allows you to simulate the effect of many black holes without having to explicitly declare them. Repeat is a vector that tells POV-Ray to use this black hole at multiple locations.<p>
If you're not interested in the theory behind all this, just skip the following text and use the values given in the summary below.<p>
Using <strong>Repeat</strong> logically divides your scene up into cubes, the first being located at &lt;0,0,0&gt; and going to &lt; repeat&gt;. Suppose your repeat vector was &lt;1,5,2&gt;. The first cube would be from &lt;0,0,0&gt; to &lt; 1,5,2&gt;. This cube repeats, so there would be one at &lt; -1,-5,-2&gt;, &lt;1,5,2&gt;, &lt;2,10,4&gt; and so forth in all directions, ad infinitum.<p>
When you use <strong>Repeat</strong>, the center of the black hole does not specify an absolute location in your scene but an offset into each block. It is only possible to use positive offsets. Negative values will produce undefined results.<p>
Suppose your center was &lt;0.5,1,0.25&gt; and the repeat vector is &lt;2,2,2&gt;. This gives us a block at &lt; 0,0,0&gt; and &lt;2,2,2&gt;, etc. The centers of the black hole's for these blocks would be &lt;0,0,0&gt; + &lt; 0.5,1.0,0.25&gt;, i. e. &lt;0.5,1.0,0.25&gt;, and &lt; 2,2,2&gt; + &lt;0.5,1.0,0.25&gt;, i. e. &lt; 2,5,3.0,2.25&gt;.<p>
Due to the way repeats are calculated internally, there is a restriction on the values you specify for the repeat vector. Basically, each black hole must be totally enclosed within each block (or cube), with no part crossing into a neighbouring one. This means that, for each of the x, y and z dimensions, the offset of the center may not be less than the radius, and the repeat value for that dimension must be &gt;=the center plus the radius since any other values would allow the black hole to cross a boundary. Put another way, for each of x, y and z<p>
<pre>
radius &lt;= offset or center &lt;= repeat - radius.
</pre>
<p>
If the repeat vector in any dimension is too small to fit this criteria, it will be increased and a warning message issued. If the center is less than the radius it will also be moved but no message will be issued.<p>
Note that none of the above should be read to mean that you can't overlap black holes. You most certainly can and in fact this can produce some most useful effects. The restriction only applies to elements of the <b>same</b> black hole which is repeating. You can declare a second black hole that also repeats and its elements can quite happily overlap the first and causing the appropriate interactions.<p>
It is legal for the repeat value for any dimension to be 0, meaning that POV-Ray will not repeat the black hole in that direction.<p>
<b>Turbulence</b>: <strong>Turbulence</strong> can only be used with <strong>Repeat</strong>. It allows an element of randomness to be inserted into the way the black holes repeat, to cause a more <strong>natural</strong> look. A good example would be an array of knotholes in wood - it would look rather artificial if each knothole were an exact distance from the previous.<p>
The <strong>turbulence vector</strong> is a measurement that is added to each individual back hole in an array, after each axis of the vector is multiplied by a different random amount ranging from 0 to 1.<p>
For example, suppose you have a repeating element of a black hole that is supposed to be at &lt;2,2,2&gt;. You have specified a turbulence vector of &lt;4,5,3&gt;, meaning you want the position to be able to vary by no more than 1.0 units in the X direction, 3.0 units in the Y direction and 2.0 in Z. This means that the valid ranges of the new position are as follows<p>
<pre>
X can be from 2 to 6.
Y can be from 2 to 7.
Z can be from 2 to 5.
</pre>
<p>
The resulting actual position of the black hole's center for that particular repeat element is random (but consistent, so renders will be repeatable) and somewhere within the above co-ordinates.<p>
There is a rider on the use of turbulence, which basically is the same as that of the repeat vector. You can't specify a value which would cause a black hole to potentially cross outside of its particular block.<p>
Since POV-Ray doesn't know in advance how much a position will be changed due to the random nature of the changes, it enforces a rule that is similar to the one for <strong>Repeat</strong>, except it adds the maximum possible variation for each axis to the center. For example, suppose you had a black hole with a center of &lt;1.0, 1.0, 1.0&gt;, radius of 0.5 and a turbulence of &lt;0.5, 0.25, 0&gt; - normally, the minimum repeat would be &lt;1.5, 1.5, 1.5&gt;. However, now we take into account the turbulence, meaning the minimum repeat vector is actually &lt;2.0, 1.75, 1.5&gt;.<p>
<strong>Repeat summarized</strong>: For each of x, y and z the offset of the center must be &gt;=radius and the value of the repeat must be \ge center + radius + turbulence. The exception being that repeat may be 0 for any dimension, which means do not repeat in that direction.<hr>

<center>
<a href="pov3002c.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
