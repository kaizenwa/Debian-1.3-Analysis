<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1500 pri 0"><a name="ref 1501 pri 0"><center><h3><a name="section 7.8.3.2">
Section 7.8.3.2<br>Image File Gamma</h3></center>
Since most PC and UNIX applications and image file formats don't understand display gamma, they don't do anything to correct for it. As a result, users creating images on these systems adjust the image in such a way that it has the correct brightness when displayed. This means that the data values stored in the files are made brighter to compensate for the darkening effect of the monitor. In essence, the 0.45 gamma correction is built in to the image files created and stored on these systems. When these files are displayed on a Macintosh system, the gamma correction built in to the file, in addition to gamma correction built into MacOS, means that the image will be too bright. Similarly, files that look correct on Macintosh or SGI systems because of the built-in gamma correction will be too dark when displayed on a PC.<p>
The new PNG format files generated by POV-Ray 3.0 overcome the problem of too much or not enough gamma correction by storing the image file gamma (which is 1.0/display_gamma) inside the PNG file when it is generated by POV-Ray. When the PNG file is later displayed by a program that has been set up correctly, it uses this gamma value as well as the current display gamma to correct for the potentially different display gamma used when originally creating the image.<p>
Unfortunately, of all the image file formats POV-Ray supports, PNG is the only one that has any gamma correction features and is therefore preferred for images that will be displayed on a wide variety of platforms.<hr>
<a name="ref 1502 pri 0"><a name="ref 1503 pri 0"><center><h3><a name="section 7.8.3.3">
Section 7.8.3.3<br>Scene File Gamma</h3></center>
The image file gamma problem itself is just a result of how scenes themselves are generated in POV-Ray. When you start out with a new scene and are placing light sources and adjusting surface textures and colors, you generally make several attempts before the lighting is how you like it. How you choose these settings depends upon the preview image or the image file stored to disk, which in turn is dependent upon the overall gamma of the display hardware being used.<p>
This means that as the artist you are doing gamma correction in the POV-Ray scene file for your particular hardware. This scene file will generate an image file that is also gamma corrected for your hardware and will display correctly on systems similar to your own. However, when this scene is rendered on another platform, it may be too bright or too dim, regardless of the output file format used. Rather than have you change all the scene files to have a single fixed gamma value (heaven forbid!), POV-Ray 3.0 allows you to specify in the scene file the display gamma of the system that the scene was created on.<p>
The <a name="ref 672 pri 8"><strong>assumed_gamma</strong> global setting, in conjunction with the <a name="ref 671 pri 20"><strong>Display_Gamma</strong> INI setting lets POV-Ray know how to do gamma correction on a given scene so that the preview and output image files will appear the correct brightness on any system. Since the gamma correction is done internally to POV-Ray, it will produce output image files that are the correct brightness for the current display, regardless of what output format is used. As well, since the gamma correction is performed in the high-precision data format that POV-Ray uses internally, it produces better results than gamma correction done after the file is written to disk.<p>
Although you may not notice any difference in the output on your system with and without an <a name="ref 672 pri 29"><strong>assumed_gamma</strong> setting, the assumed gamma is important if the scene is ever rendered on another platform.<hr>
<a name="ref 1504 pri 0"><a name="ref 164 pri 1"><center><h3><a name="section 7.8.4">
Section 7.8.4<br>HF_Gray_16</h3></center>
The <a name="ref 164 pri 1"><strong>hf_gray_16</strong> setting is useful when using POV-Ray to generate heightfields for use in other POV-Ray scenes. The syntax is...<p>
<listing>
  global_settings { hf_gray_16 BOOLEAN }
</listing>
<p>
The boolean value turns the option on or off. If the keyword is specified without the boolean value then the option is turned on. If <a name="ref 164 pri 5"><strong>hf_gray_16</strong> is not specified in any <a name="ref 826 pri 10"><strong>global_settings</strong> statement in the entire scene then the default is off.<p>
When <a name="ref 164 pri 15"><strong>hf_gray_16</strong> is on, the output file will be in the form of a heightfield, with the height at any point being dependent on the brightness of the pixel. The brightness of a pixel is calculated in the same way that color images are converted to grayscale images:<p>
<pre>
  height = 0.3 * red + 0.59 * green + 0.11 * blue
</pre>
<p>
Setting the <a name="ref 164 pri 21"><strong>hf_gray_16</strong> option will cause the preview display, if used, to be grayscale rather than color. This is to allow you to see how the heightfield will look because some file formats store heightfields in a way that is difficult to understand afterwards. See section <a href="pov3001f.htm#ref 163 pri 1">&quot;Height Field&quot;</a> for a description of how POV-Ray heightfields are stored for each file type.<hr>
<a name="ref 1505 pri 0"><a name="ref 867 pri 1"><center><h3><a name="section 7.8.5">
Section 7.8.5<br>Irid_Wavelength</h3></center>
Iridescence calculations depend upon the dominant wavelengths of the primary colors of red, green and blue light. You may adjust the values using the global setting <a name="ref 867 pri 1"><strong>irid_wavelength</strong> as follows... <listing>
  global_settings { irid_wavelength COLOR }
</listing>
<p>
The default value is <strong>rgb &lt;0.25,0.18,0.14&gt;</strong> and any filter or transmit values are ignored. These values are proportional to the wavelength of light but they represent no real world units.<p>
In general, the default values should prove adequate but we provide this option as a means to experiment with other values.<hr>
<a name="ref 1506 pri 0"><a name="ref 913 pri 1"><center><h3><a name="section 7.8.6">
Section 7.8.6<br>Max_Trace_Level</h3></center>
In scenes with many reflective and transparent surfaces POV-Ray can get bogged down tracing multiple reflections and refractions that contribute very little to the color of a particular pixel. The global setting <a name="ref 913 pri 1"><strong>max_trace_level</strong> defines the maximum number of recursive levels that POV-Ray will trace a ray.<p>
<listing>
  global_settings { max_trace_level INTEGER }
</listing>
<p>
This is used when a ray is reflected or is passing through a transparent object and when shadow rays are cast. When a ray hits a reflective surface, it spawns another ray to see what that point reflects. That is trace level one. If it hits another reflective surface another ray is spawned and it goes to trace level two. The maximum level by default is five.<p>
One speed enhancement added to POV-Ray in version 3.0 is <strong>Adaptive  Depth Control</strong> (ADC). Each time a new ray is spawned as a result of reflection or refraction its contribution to the overall color of the pixel is reduced by the amount of reflection or the filter value of the refractive surface. At some point this contribution can be considered to be insignificant and there is no point in tracing any more rays. Adaptive depth control is what tracks this contribution and makes the decision of when to bail out. On scenes that use a lot of partially reflective or refractive surfaces this can result in a considerable reduction in the number of rays fired and makes it <strong>safer</strong> to use much higher <a name="ref 913 pri 5"><strong>max_trace_level</strong> values.<p>
This reduction in color contribution is a result of scaling by the reflection amount and/or the filter values of each surface, so a perfect mirror or perfectly clear surface will not be optimizable by ADC. You can see the results of ADC by watching the <strong>Rays Saved</strong> and <strong>Highest Trace Level</strong> displays on the statistics screen.<p>
<a name="ref 828 pri 8">The point at which a ray's contribution is considered insignificant is controlled by the <a name="ref 828 pri 12"><strong>adc_bailout</strong> value. The default is 1/255 or approximately 0.0039 since a change smaller than that could not be visible in a 24 bit image. Generally this setting is perfectly adequate and should be left alone. Setting <a name="ref 828 pri 17"><strong>adc_bailout</strong> to 0 will disable ADC, relying completely on <a name="ref 913 pri 22"><strong>max_trace_level</strong> to set an upper limit on the number of rays spawned.<p>
If <a name="ref 913 pri 28"><strong>max_trace_level</strong> is reached before a non-reflecting surface is found and if ADC hasn't allowed an early exit from the ray tree the color is returned as black. Raise <a name="ref 913 pri 35"><strong>max_trace_level</strong> if you see black areas in a reflective surface where there should be a color.<p>
The other symptom you could see is with transparent objects. For instance, try making a union of concentric spheres with a clear texture on them. Make ten of them in the union with radius's from 1 to 10 and render the scene. The image will show the first few spheres correctly, then black. This is because a new level is used every time you pass through a transparent surface. Raise <a name="ref 913 pri 43"><strong>max_trace_level</strong> to fix this problem.<p>
Note that raising <a name="ref 913 pri 52"><strong>max_trace_level</strong> will use more memory and time and it could cause the program to crash with a stack overflow error, although ADC will alleviate this to a large extent. Values for <a name="ref 913 pri 62"><strong>max_trace_level</strong> are not restricted, so it can be set to any number as long as you have the time and memory. However, increasing its setting does not necessarily equate to increased image quality unless such depths are really needed by the scene.<hr>
<a name="ref 1507 pri 0"><a name="ref 909 pri 0"><a name="ref 1119 pri 0"><center><h3><a name="section 7.8.7">
Section 7.8.7<br>Max_Intersections</h3></center>
POV-Ray uses a set of internal stacks to collect ray/object intersection points. The usual maximum number of entries in these <strong>I-Stacks</strong> is 64. Complex scenes may cause these stacks to overflow. POV-Ray doesn't stop but it may incorrectly render your scene. When POV-Ray finishes rendering, a number of statistics are displayed. If you see <strong>I-Stack Overflows</strong> reported in the statistics you should increase the stack size. Add a global setting to your scene as follows:<p>
<listing>
  global_settings { max_intersections INTEGER }
</listing>
<p>
If the <strong>I-Stack Overflows</strong> remain increase this value until they stop.<hr>
<a name="ref 1508 pri 0"><a name="ref 941 pri 1"><center><h3><a name="section 7.8.8">
Section 7.8.8<br>Number_Of_Waves</h3></center>
The wave and ripples pattern are generated by summing a series of waves, each with a slightly different center and size. By default, ten waves are summed but this amount can be globally controlled by changing the <a name="ref 941 pri 1"><strong>number_of_waves</strong> setting.<p>
<listing>
  global_settings { number_of_waves INTEGER }
</listing>
<p>
Changing this value affects both waves and ripples alike on all patterns in the scene.<hr>
<a name="ref 1509 pri 0"><a name="ref 788 pri 1"><center><h3><a name="section 7.8.9">
Section 7.8.9<br>Radiosity</h3></center>
<b>Important notice</b>: The radiosity feature in POV-Ray 3.0 are somewhat experimental. There is a high probability that the design and implementation of these features will be changed in future versions. We cannot guarantee that scenes using these features in 3.0 will render identically in future releases or that full backwards compatibility of language syntax can be maintained.<p>
<a name="ref 788 pri 1">Radiosity is an extra calculation that more realistically computes the diffuse interreflection of light. This diffuse interreflection can be seen if you place a white chair in a room full of blue carpet, blue walls and blue curtains. The chair will pick up a blue tint from light reflecting off of other parts of the room. Also notice that the shadowed areas of your surroundings are not totally dark even if no light source shines directly on the surface. Diffuse light reflecting off of other objects fills in the shadows. Typically ray-tracing uses a trick called <strong>ambient</strong> light to simulate such effects but it is not very accurate.<p>
Radiosity is more accurate than simplistic ambient light but it takes much longer to compute. For this reason, POV-Ray does not use radiosity by default. Radiosity is turned on using the <a name="ref 788 pri 4"><strong>Radiosity</strong> INI file option or the <a name="ref 1510 pri 4"><strong>+QR</strong> command line switch.<p>
The following sections describes how radiosity works, how to control it with various global settings and tips on trading quality vs. speed.<hr>
<a name="ref 1511 pri 0"><a name="ref 1512 pri 0"><center><h3><a name="section 7.8.9.1">
Section 7.8.9.1<br>How Radiosity Works</h3></center>
The problem of ray-tracing is to figure out what the light level is at each point that you can see in a scene. Traditionally, in ray tracing, this is broken into the sum of these components:<p>
<center><table border><tr><td valign=top>-</td><td valign=top>Diffuse, the effect that makes the side of things facing the light brighter;</td></tr>
<tr><td valign=top>-</td><td valign=top>Specular, the effect that makes shiny things have dings or sparkles on them;</td></tr>
<tr><td valign=top>-</td><td valign=top>Reflection, the effect that mirrors give; and</td></tr>
<tr><td valign=top>-</td><td valign=top>Ambient, the general all-over light level that any scene has, which keeps things in shadow from being pure black.</td></tr>

</td></tr></table></center>

<p>
POV's radiosity system, based on a method by Greg Ward, provides a way to replace the last term - the constant ambient light value - with a light level which is based on what surfaces are nearby and how bright in turn they are.<p>
The first thing you might notice about this definition is that it is circular: the light of everything is dependent on everything else and vice versa. This is true in real life but in the world of ray-tracing, we can make an approximation. The approximation that is used is: the objects you are looking at have their <strong>ambient</strong> values calculated for you by checking the other objects nearby. When those objects are checked during this process, however, a traditional constant ambient term is used.<p>
How does POV-Ray calculate the ambient term for each point? By sending out more rays, in many different directions, and averaging the results. A typical point might use 200 or more rays to calculate its ambient light level correctly.<p>
Now this sounds like it would make the ray-tracer 200 times slower. This is true, except that the software takes advantage of the fact that ambient light levels change quite slowly (remember, shadows are calculated separately, so sharp shadow edges are not a problem). Therefore, these extra rays are sent out only <strong>once in a while</strong> (about 1 time in 50), then these calculated values are saved and reused for nearby pixels in the image when possible.<p>
This process of saving and reusing values is what causes the need for a variety of tuning parameters, so you can get the scene to look just the way you want.<hr>
<a name="ref 1513 pri 0"><a name="ref 1514 pri 0"><center><h3><a name="section 7.8.9.2">
Section 7.8.9.2<br>Adjusting Radiosity</h3></center>
As described earlier, radiosity is turned on by using the <a name="ref 788 pri 4"><strong>Radiosity</strong> INI file option or the <a name="ref 1510 pri 5"><strong>+QR</strong> command line switch. However radiosity has many parameters that are specified in a <strong>radiosity</strong> statement inside a <strong>global_settings</strong> statement as follows:<p>
<listing>
   global_settings {
     radiosity {
       brightness FLOAT
       count INTEGER
       distance_maximum FLOAT
       error_bound FLOAT
       gray_threshold FLOAT
       low_error_factor FLOAT
       minimum_reuse FLOAT
       nearest_count INTEGER
       recursion_limit INTEGER
     }
   }
</listing>
<p>
Each item is optional and may appear in and order. If an item is specified more than once the last setting overrides previous values. Details on each item is given in the following sections.<hr>
<a name="ref 1515 pri 0"><a name="ref 886 pri 0"><a name="ref 1516 pri 0"><center><h3><a name="section 7.8.9.2.1">
Section 7.8.9.2.1<br>brightness</h3></center>
This is the degree to which ambient values are brightened before being returned upwards to the rest of the system. If an object is red &lt; 1, 0, 0&gt;, with an ambient value of 0.3, in normal situations a red component of 0.3 will be added in. With radiosity on, assume it was surrounded by an object of gra color &lt;0.6, 0.6, 0.6&gt;. The average color returned by the gathering process will be the same. This will be multiplied by the texture's ambient weight value of 0.3, returning &lt;0.18, 0.18, 0.18&gt;. This is much darker than the 0.3 which would be added in normally. Therefore, all returned values are brightened by the inverse of the average of the calculated values, so the average ambient added in does not change. Some will be higher than specified (higher than 0.3 in this example) and some will be lower but the overall scene brightness will be unchanged.<p>
The default value is 3.3.<hr>
<a name="ref 1517 pri 0"><a name="ref 952 pri 0"><a name="ref 1518 pri 0"><center><h3><a name="section 7.8.9.2.2">
Section 7.8.9.2.2<br>count</h3></center>
The number of rays that are sent out whenever a new radiosity value has to be calculated is given by <a name="ref 952 pri 1"><strong>count</strong>. Values of 100 to 150 make most scenes look good. Higher values might be needed for scenes with high contrast between light levels or small patches of light causing the illumination. This would be used only for a final rendering on an image because it is very compute intensive. Since most scenes calculate the ambient value at 1% to 2% of pixels, as a rough estimate, your rendering will take 1% to 2% of this number times as long. If you set it to 300 your rendering might take 3 to 6 times as long to complete (1% to 2% times 300).<p>
When this value is too low, the light level will tend to look a little bit blotchy, as if the surfaces you're looking at were slightly warped. If this is not important to your scene (as in the case that you have a bump map or if you have a strong texture) then by all means use a lower number.<p>
The default value is 100.<hr>

<center>
<a href="pov3002f.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
