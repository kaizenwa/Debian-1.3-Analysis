<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1402 pri 0"><a name="ref 945 pri 1"><a name="ref 945 pri 1"><a name="ref 943 pri 1"><center><h3><a name="section 7.6.5.2">
Section 7.6.5.2<br>Tiles</h3></center>
Earlier versions of POV-Ray had a special texture called <strong>tiles texture</strong> that created a checkered pattern of textures. Although it is still supported for backwards computability you should use a checker block texture pattern described in section <a href="pov30028.htm#ref 1286 pri 0">&quot;Texture Maps&quot;</a> rather than tiles textures.<hr>
<a name="ref 1403 pri 0"><a name="ref 1404 pri 0"><a name="ref 901 pri 0"><a name="ref 1405 pri 0"><a name="ref 852 pri 7"><a name="ref 1289 pri 8"><center><h3><a name="section 7.6.5.3">
Section 7.6.5.3<br>Material Maps</h3></center>
The <strong>material map</strong> special texture extends the concept of image maps to apply to entire textures rather than solid colors. A material map allows you to wrap a 2-D bit-mapped texture pattern around your 3-D objects.<p>
Instead of placing a solid color of the image on the shape like an image map, an entire texture is specified based on the index or color of the image at that point. You must specify a list of textures to be used like a <strong>texture palette</strong> rather than the usual color palette.<p>
When used with mapped file types such as GIF, and some PNG and TGA images, the index of the pixel is used as an index into the list of textures you supply. For unmapped file types such as some PNG and TGA images the 8 bit value of the red component in the range 0-255 is used as an index.<p>
If the index of a pixel is greater than the number of textures in your list then the index is taken modulo N where N is the length of your list of textures.<hr>
<a name="ref 1406 pri 0"><a name="ref 1407 pri 0"><center><h3><a name="section 7.6.5.3.1">
Section 7.6.5.3.1<br>Specifying a Material Map</h3></center>
The syntax of a material map is...<p>
<listing>
  texture {
    material_map {
      FILE_TYPE &quot;filename&quot;
      BITMAP_MODIFIERS...
      texture {...} // First used for index 0
      texture {...} // Second texture used for index 1
      texture {...} // Third texture used for index 2
      texture {...} // Fourth texture used for index 3
                    // and so on for however many used.
    }
    TRANSFORMATION...
  }
</listing>
<p>
<a name="ref 850 pri 4"><a name="ref 824 pri 9"><a name="ref 936 pri 14"><a name="ref 1004 pri 19"><a name="ref 978 pri 23"><a name="ref 991 pri 28"><a name="ref 914 pri 33">Where FILE_TYPE is one of the following keywords <a name="ref 824 pri 39"><strong>gif</strong>, <a name="ref 936 pri 45"><strong>tga</strong>, <a name="ref 850 pri 50"><strong>iff</strong>, <a name="ref 1004 pri 56"><strong>ppm</strong>, <a name="ref 978 pri 61"><strong>pgm</strong>, <a name="ref 991 pri 67"><strong>png</strong> or <a name="ref 914 pri 73"><strong>sys</strong>. This is followed by the name of the file using any valid string expression. Several optional modifiers may follow the file specification. The modifiers are described below. Note that earlier versions of POV-Ray allowed some modifiers before the FILE_TYPE but that syntax is being phased out in favor of the syntax described here.<p>
Filenames specified in the <a name="ref 901 pri 77"><strong>material_map</strong> statements will be searched for in the home (current) directory first and, if not found, will then be searched for in directories specified by any <a name="ref 82 pri 84"><strong>+L</strong> switches or <a name="ref 104 pri 89"><strong>Library_Path</strong> options. This would facilitate keeping all your material map files in a separate subdirectory and specifying a library path to them. Note that any operating system default paths are not searched unless you also specify them as a <a name="ref 104 pri 95"><strong>Library_Path</strong>.<p>
By default, the material is mapped onto the x-y-plane. The material is <strong>projected</strong> onto the object as though there were a slide projector somewhere in the -z-direction. The material exactly fills the square area from (x,y) coordinates (0,0) to (1,1) regardless of the bitmap's original size in pixels. If you would like to change this default you may translate, rotate or scale the texture to map it onto the object's surface as desired.<p>
The file name is optionally followed by one or more BITMAP_MODIFIERS. See section <a href="pov3002c.htm#ref 1315 pri 0">&quot;Bitmap Modifiers&quot;</a> for other details.<p>
After a <a name="ref 901 pri 100"><strong>material_map</strong> statement but still inside the texture statement you may apply any legal texture modifiers. Note that no other pigment, normal, finish or halo statements may be added to the texture outside the material map. The following is illegal:<p>
<listing>
  texture {
    material_map {
      gif &quot;matmap.gif&quot;
      texture {T1}
      texture {T2}
      texture {T3}
    }
    finish {phong 1.0}
  }
</listing>
<p>
The finish must be individually added to each texture.<p>
Note that earlier versions of POV-Ray allowed such specifications but they were ignored. The above restrictions on syntax were necessary for various bug fixes. This means some POV-Ray 1.0 scenes using material maps many need minor modifications that cannot be done automatically with the version compatibility mode.<p>
If particular index values are not used in an image then it may be necessary to supply dummy textures. It may be necessary to use a paint program or other utility to examine the map file's palette to determine how to arrange the texture list.<p>
The textures within a material map texture may be layered but material map textures do not work as part of a layered texture. To use a layered texture inside a material map you must declare it as a texture identifier and invoke it in the texture list.<hr>
<a name="ref 1408 pri 0"><a name="ref 1409 pri 0"><a name="ref 1410 pri 0"><center><h3><a name="section 7.6.6">
Section 7.6.6<br>Layered Textures</h3></center>
It is possible to create a variety of special effects using layered textures. A layered texture consists of several textures that are partially transparent and are laid one on top of the other to create a more complex texture. The different texture layers show through the transparent portions to create the appearance of one texture that is a combination of several textures.<p>
You create layered textures by listing two or more textures one right after the other. The last texture listed will be the top layer, the first one listed will be the bottom layer. All textures in a layered texture other than the bottom layer should have some transparency. For example:<p>
<listing>
  object {
    My_Object
    texture {T1}  // the bottom layer
    texture {T2}  // a semi-transparent layer
    texture {T3}  // the top semi-transparent layer
  }
</listing>
<p>
In this example T2 shows only where T3 is transparent and T1 shows only where T2 and T3 are transparent.<p>
The color of underlying layers is filtered by upper layers but the results do not look exactly like a series of transparent surfaces. If you had a stack of surfaces with the textures applied to each, the light would be filtered twice: once on the way in as the lower layers are illuminated by filtered light and once on the way out. Layered textures do not filter the illumination on the way in. Other parts of the lighting calculations work differently as well. The results look great and allow for fantastic looking textures but they are simply different from multiple surfaces. See <b>stones.inc</b> in the standard include files directory for some magnificent layered textures.<p>
Note layered textures must use the <strong>texture</strong> wrapped around any pigment, normal or finish statements. Do not use multiple pigment, normal or finish statements without putting them inside the texture statement.<p>
Layered textures may be declared. For example<p>
<listing>
  #declare Layered_Examp =
    texture {T1}
    texture {T2}
    texture {T3}
</listing>
<p>
may be invoked as follows:<p>
<listing>
  object {
    My_Object
    texture {
      Layer_Examp
      // Any pigment, normal or finish here
      // modifies the bottom layer only.
    }
  }
</listing>
<p>
If you wish to use a layered texture in a block pattern, such as checker, hexagon, or brick, or in a material map, you must declare it first and then reference it inside a single texture statement. A special texture cannot be used as a layer in a layered texture however you may use layered textures as any of the textures contained within a special texture.<hr>
<a name="ref 1411 pri 0"><a name="ref 291 pri 0"><center><h3><a name="section 7.6.7">
Section 7.6.7<br>Patterns</h3></center>
POV-Ray uses a method called <strong>three-dimensional solid texturing</strong> to define the color, bumpiness and other properties of a surface. You specify the way that the texture varies over a surface by specifying a <strong>pattern</strong>. Patterns are used in pigments, normals and texture maps.<p>
All patterns in POV-Ray are three dimensional. For every point in space, each pattern has a unique value. Patterns do not wrap around a surface like putting wallpaper on an object. The patterns exist in 3d and the objects are carved from them like carving an object from a solid block of wood or stone.<p>
Consider a block of wood. It contains light and dark bands that are concentric cylinders being the growth rings of the wood. On the end of the block you see these concentric circles. Along its length you see lines that are the veins. However the pattern exists throughout the entire block. If you cut or carve the wood it reveals the pattern inside. Similarly an onion consists of concentric spheres that are visible only when you slice it. Marble stone consists of wavy layers of colored sediments that harden into rock.<p>
These solid patterns can be simulated using mathematical functions. Other random patterns such as granite or bumps and dents can be generated using a random number system and a noise function.<p>
In each case, the x, y, z coordinate of a point on a surface is used to compute some mathematical function that returns a float value. When used with color maps or pigment maps, that value looks up the color of the pigment to be used. In normal statements the pattern function result modifies or perturbs the surface normal vector to give a bumpy appearance. Used with a texture map, the function result determines which combinations of entire textures to be used.<p>
The following sections describe each pattern. See the sections <a href="pov30024.htm#ref 294 pri 1">&quot;Pigment&quot;</a> and <a href="pov30025.htm#ref 324 pri 1">&quot;Normal&quot;</a> for more details on how to use patterns.<hr>
<a name="ref 1412 pri 0"><a name="ref 303 pri 1"><a name="ref 1413 pri 1"><center><h3><a name="section 7.6.7.1">
Section 7.6.7.1<br>Agate</h3></center>
The <a name="ref 303 pri 1"><strong>agate</strong> pattern is a banded pattern similar to marble but it uses a specialized built-in turbulence function that is different from the traditional turbulence. The traditional turbulence can be used as well but it is generally not necessary because agate is already very turbulent. You may control the amount of the built-in turbulence by adding the <a name="ref 832 pri 1"><strong>agate_turb</strong> keyword followed by a float value. For example: <listing>
  pigment {
    agate
    agate_turb 0.5
    color_map {
      ...
    }
  }
</listing>
<p>
The agate pattern uses the <a name="ref 1037 pri 1"><strong>ramp_wave</strong> wave type by default but may use any wave type. The pattern may be used with <a name="ref 282 pri 6"><strong>color_map</strong>, <a name="ref 319 pri 10"><strong>pigment_map</strong>, <a name="ref 937 pri 14"><strong>normal_map</strong>, <a name="ref 865 pri 19"><strong>slope_map</strong> and <a name="ref 934 pri 22"><strong>texture_map</strong>.<hr>
<a name="ref 1414 pri 0"><a name="ref 864 pri 2"><a name="ref 1415 pri 2"><center><h3><a name="section 7.6.7.2">
Section 7.6.7.2<br>Average</h3></center>
Technically <a name="ref 864 pri 2"><strong>average</strong> is not a pattern type but it is listed here because the syntax is similar to other patterns. Typically a pattern type specifies how colors or normals are chosen from a pigment map or normal map, however <a name="ref 864 pri 3"><strong>average</strong> tells POV-Ray to average together all of the patterns you specify. Average was originally designed to be used in a normal statement with a normal map as a method of specifying more than one normal pattern on the same surface. However average may be used in a pigment statement with a pigment map or in a texture statement with a texture map to average colors too.<p>
When used with pigments, the syntax is:<p>
<listing>
  pigment {
    average
    pigment_map
    {
      [WEIGHT_1 PIGMENT_BODY_1]
      [WEIGHT_2 PIGMENT_BODY_2]
      ...
      [WEIGHT_n PIGMENT_BODY_n]
    }
    PIGMENT_MODIFIER
  }
</listing>
<p>
Similarly you may use a texture map in a texture statement. All textures are fully computed. The resulting colors are then weighted and averaged.<p>
When used with a normal map in a normal statement, multiple copies of the original surface normal are created and are perturbed by each pattern. The perturbed normals are then weighted, added and normalized.<p>
See the sections <a href="pov30025.htm#ref 1284 pri 0">&quot;Pigment Maps&quot;</a>, <a href="pov30026.htm#ref 1307 pri 0">&quot;Normal Maps&quot;</a> and <a href="pov30028.htm#ref 1286 pri 0">&quot;Texture Maps&quot;</a> for more information.<hr>
<a name="ref 1416 pri 0"><a name="ref 301 pri 1"><a name="ref 1417 pri 1"><center><h3><a name="section 7.6.7.3">
Section 7.6.7.3<br>Bozo</h3></center>
The <a name="ref 301 pri 1"><strong>bozo</strong> pattern is a very smooth, random noise function that is traditionally used with some turbulence to create clouds. The spotted pattern is identical to bozo but in early versions of POV-Ray spotted did not allow turbulence to be added. Turbulence can now be added to any pattern so these are redundant but both are retained for backwards compatibility. The bumps pattern is also identical to bozo when used anywhere except in a normal statement. When used as a normal, bumps uses a slightly different method to perturb the normal with a similar noise function.<p>
The bozo noise function has the following properties:<p>
<center><table border><tr><td valign=top>1.</td><td valign=top>It's defined over 3D space i.e., it takes x, y, and z and returns the noise value there.</td></tr>
<tr><td valign=top>2.</td><td valign=top>If two points are far apart, the noise values at those points are relatively random.</td></tr>
<tr><td valign=top>3.</td><td valign=top>If two points are close together, the noise values at those points are close to each other.</td></tr>

</td></tr></table></center>

<p>
You can visualize this as having a large room and a thermometer that ranges from 0.0 to 1.0. Each point in the room has a temperature. Points that are far apart have relatively random temperatures. Points that are close together have close temperatures. The temperature changes smoothly but randomly as we move through the room.<p>
Now let's place an object into this room along with an artist. The artist measures the temperature at each point on the object and paints that point a different color depending on the temperature. What do we get? A POV-Ray bozo texture!<p>
The <a name="ref 301 pri 5"><strong>bozo</strong> pattern uses the <a name="ref 1037 pri 6"><strong>ramp_wave</strong> wave type by default but may use any wave type. The pattern may be used with <a name="ref 282 pri 12"><strong>color_map</strong>, <a name="ref 319 pri 17"><strong>pigment_map</strong>, <a name="ref 937 pri 22"><strong>normal_map</strong>, <a name="ref 865 pri 28"><strong>slope_map</strong> and <a name="ref 934 pri 32"><strong>texture_map</strong>.<hr>
<a name="ref 1418 pri 0"><a name="ref 297 pri 1"><a name="ref 1419 pri 1"><center><h3><a name="section 7.6.7.4">
Section 7.6.7.4<br>Brick</h3></center>
The <a name="ref 297 pri 1"><strong>brick</strong> pattern generates a pattern of bricks. The bricks are offset by half a brick length on every other row in the x- and z-directions. A layer of mortar surrounds each brick. The syntax is given by<p>
<listing>
  pigment {
    brick COLOR_1, COLOR_2
    brick_size VECTOR
    mortar FLOAT
  }
</listing>
<p>
where COLOR_1 is the color of the mortar and COLOR_2 is the color of the brick itself. If no colors are specified a default deep red and dark gray are used. The default size of the brick and mortar together is &lt;8, 3, 4.5&gt; units. The default thickness of the mortar is 0.5 units. These values may be changed using the optional <a name="ref 883 pri 1"><strong>brick_size</strong> and <a name="ref 929 pri 1"><strong>mortar</strong> pattern modifiers. You may also use pigment statements in place of the colors. For example:<p>
<listing>
  pigment {
    brick pigment{Jade}, pigment{Black_Marble}
  }
</listing>
<p>
When used with normals, the syntax is <listing>
  normal {
    brick BUMP_FLOAT
  }
</listing>
<p>
Where BUMP_FLOAT is an optional bump size float value. You may also use full normal statements. For example:<p>
<listing>
  normal {
    brick normal{bumps 0.2}, normal{granite 0.3}
  }
</listing>
<p>
When used with textures, the syntax is<p>
<listing>
  texture {
    brick texture{T_Gold_1A}, texture{Stone12}
  }
</listing>
<p>
This is a block pattern which cannot use wave types, color map, or slope map modifiers.<hr>
<a name="ref 1420 pri 0"><a name="ref 325 pri 1"><a name="ref 1421 pri 1"><center><h3><a name="section 7.6.7.5">
Section 7.6.7.5<br>Bumps</h3></center>
The <a name="ref 325 pri 1"><strong>bumps</strong> pattern was originally designed only to be used as a normal pattern. It uses a very smooth, random noise function that creates the look of rolling hills when scaled large or a bumpy orange peal when scaled small. Usually the bumps are about 1 unit apart.<p>
When used as a normal, <a name="ref 325 pri 6"><strong>bumps</strong> uses a specialized normal perturbation function. This means that the <a name="ref 325 pri 12"><strong>bumps</strong> pattern cannot be used with normal map, slope map or wave type modifiers in a normal statement.<p>
When used as a pigment pattern or texture pattern, the bumps pattern is identical to bozo or spotted and is similar to normal bumps but is not identical as are most normals when compared to pigments. When used as pigment or texture statements the bumps pattern uses the <a name="ref 1037 pri 14"><strong>ramp_wave</strong> wave type by default but may use any wave type. The pattern may be used with <a name="ref 282 pri 21"><strong>color_map</strong>, <a name="ref 319 pri 27"><strong>pigment_map</strong>, and <a name="ref 934 pri 32"><strong>texture_map</strong>.<hr>
<a name="ref 1422 pri 0"><a name="ref 915 pri 1"><a name="ref 1423 pri 1"><center><h3><a name="section 7.6.7.6">
Section 7.6.7.6<br>Checker</h3></center>
The <a name="ref 915 pri 1"><strong>checker</strong> pattern produces a checkered pattern consisting of alternating squares of COLOR_1 and COLOR_2. If no colors are specified then default blue and green colors are used.<p>
<listing>
  pigment { checker COLOR_1, COLOR_2 }
</listing>
<p>
The checker pattern is actually a series of cubes that are one unit in size. Imagine a bunch of 1 inch cubes made from two different colors of modeling clay. Now imagine arranging the cubes in an alternating check pattern and stacking them in layer after layer so that the colors still alternate in every direction. Eventually you would have a larger cube. The pattern of checks on each side is what the POV-Ray checker pattern produces when applied to a box object. Finally imagine cutting away at the cube until it is carved into a smooth sphere or any other shape. This is what the checker pattern would look like on an object of any kind.<p>
You may also use pigment statements in place of the colors. For example:<p>
<listing>
  pigment { checker pigment{Jade}, pigment{Black_Marble} }
</listing>
<p>
When used with normals, the syntax is<p>
<listing>
  normal { checker BUMP_FLOAT }
</listing>
<p>
Where BUMP_FLOAT is an optional bump size float value. You may also use full normal statements. For example:<p>
<listing>
  normal {
    checker normal{gradient x scale .2},
            normal{gradient y scale .2}
  }
</listing>
<p>
When used with textures, the syntax is...<p>
<listing>
  texture { checker texture{T_Wood_3A},texture{Stone12} }
</listing>
<p>
This use of checker as a texture pattern replaces the special tiles texture in previous versions of POV-Ray. You may still use <a name="ref 945 pri 4"><strong>tiles</strong> but it may be phased out in future versions so checker textures are best.<p>
This is a block pattern which cannot use wave types, color map, or slope map modifiers.<hr>

<center>
<a href="pov3002a.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
