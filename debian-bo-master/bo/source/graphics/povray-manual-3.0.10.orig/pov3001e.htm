<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1174 pri 0"><a name="ref 126 pri 0"><center><h3><a name="section 7.4.2">
Section 7.4.2<br>Focal Blur</h3></center>
Simulates focal depth-of-field by shooting a number of sample rays from jittered points within each pixel and averaging the results.<p>
The <a name="ref 840 pri 0"><strong>aperture</strong> keyword determines the depth of the sharpness zone. Large apertures give a lot of blurring, while narrow apertures will give a wide zone of sharpness. Note that, while this behaves as a real camera does, the values for aperture are purely arbitrary and are not related to f-stops.<p>
The center of the <strong>zone of sharpness</strong> is the <a name="ref 1036 pri 0"><strong>focal_point</strong> vector (the default <a name="ref 1036 pri 1"><strong>focal_point</strong> is &lt;0,0,0&gt;).<p>
The <a name="ref 872 pri 1"><strong>blur_samples</strong> value controls the maximum number of rays to use for each pixel. More rays give a smoother appearance but is slower, although this is controlled somewhat by an adaptive mechanism that stops shooting rays when a certain degree of confidence has been reached that shooting more rays would not result in a significant change.<p>
The <a name="ref 938 pri 1"><strong>confidence</strong> and <a name="ref 990 pri 1"><strong>variance</strong> keywords control the adaptive function. The confidence value is used to determine when the samples seem to be <strong>close enough</strong> to the correct color. The variance value specifies an acceptable tolerance on the variance of the samples taken so far. In other words, the process of shooting sample rays is terminated when the estimated color value is very likely (as controlled by the confidence probability) near the real color value.<p>
Since the confidence is a probability its values can range from 0 to 1 (the default is 0.9, i. e. 90%). The value for the variance should be in the range of the smallest displayable color difference (the default is 1/128).<p>
Larger confidence values will lead to more samples, slower traces and better images. The same holds for smaller variance thresholds.<p>
By default no focal blur is used, i. e. the default aperture is 0 and the default number of samples is 0.<hr>
<a name="ref 1175 pri 0"><a name="ref 1176 pri 0"><center><h3><a name="section 7.4.3">
Section 7.4.3<br>Camera Ray Perturbation</h3></center>
The optional keyword <a name="ref 324 pri 6"><strong>normal</strong> may be used to assign a normal pattern to the camera. All camera rays will be perturbed using this pattern. This lets you create special effects. See the animated scene <b>camera2.pov</b> for an example.<hr>
<a name="ref 1177 pri 0"><a name="ref 1178 pri 0"><center><h3><a name="section 7.4.4">
Section 7.4.4<br>Placing the Camera</h3></center>
In the following sections the placing of the camera will be further explained.<hr>
<a name="ref 1179 pri 0"><a name="ref 1180 pri 0"><center><h3><a name="section 7.4.4.1">
Section 7.4.4.1<br>Location and Look_At</h3></center>
Under many circumstances just two vectors in the camera statement are all you need to position the camera: <a name="ref 881 pri 0"><strong>location</strong> and <a name="ref 888 pri 0"><strong>look_at</strong>. For example:<p>
<listing>
  camera {
    location &lt;3,5,-10&gt;
    look_at  &lt;0,2,1&gt;
  }
</listing>
<p>
The location is simply the x, y, z coordinates of the camera. The camera can be located anywhere in the ray-tracing universe. The default location is &lt;0, 0, 0&gt;. The <a name="ref 888 pri 2"><strong>look_at</strong> vector tells POV-Ray to pan and tilt the camera until it is looking at the specified x, y, z coordinates. By default the camera looks at a point one unit in the z-direction from the location.<p>
The <a name="ref 888 pri 5"><strong>look_at</strong> specification should almost always be the last item in the camera statement. If other camera items are placed after the <a name="ref 888 pri 9"><strong>look_at</strong> vector then the camera may not continue to look at the specified point.<hr>
<a name="ref 1181 pri 0"><a name="ref 1182 pri 0"><center><h3><a name="section 7.4.4.2">
Section 7.4.4.2<br>The Sky Vector</h3></center>
Normally POV-Ray pans left or right by rotating about the y-axis until it lines up with the <a name="ref 888 pri 5"><strong>look_at</strong> point and then tilts straight up or down until the point is met exactly. However you may want to slant the camera sideways like an airplane making a banked turn. You may change the tilt of the camera using the <a name="ref 862 pri 5"><strong>sky</strong> vector. For example:<p>
<listing>
  camera {
    location &lt;3,5,-10&gt;
    sky      &lt;1,1,0&gt;
    look_at  &lt;0,2,1&gt;
  }
</listing>
<p>
This tells POV-Ray to roll the camera until the top of the camera is in line with the sky vector. Imagine that the sky vector is an antenna pointing out of the top of the camera. Then it uses the <a name="ref 862 pri 7"><strong>sky</strong> vector as the axis of rotation left or right and then to tilt up or down in line with the <a name="ref 862 pri 10"><strong>sky</strong> vector. In effect you're telling POV-Ray to assume that the sky isn't straight up. Note that the sky vector must appear before the <a name="ref 888 pri 16"><strong>look_at</strong> vector.<p>
The <a name="ref 862 pri 20"><strong>sky</strong> vector does nothing on its own. It only modifies the way the <a name="ref 888 pri 27"><strong>look_at</strong> vector turns the camera. The default value for sky is &lt;0, 1, 0&gt;.<hr>
<a name="ref 1183 pri 0"><a name="ref 1184 pri 0"><center><h3><a name="section 7.4.4.3">
Section 7.4.4.3<br>The Direction Vector</h3></center>
The <a name="ref 557 pri 0"><strong>direction</strong> vector tells POV-Ray the initial direction to point the camera before moving it with <a name="ref 888 pri 8"><strong>look_at</strong> or <a name="ref 216 pri 16"><strong>rotate</strong> vectors (the default is <strong>direction &lt;0, 0, 1&gt;</strong>). It may also be used to control the (horizontal) field of view with some types of projection. This should be done using the easier to use <a name="ref 555 pri 20"><strong>angle</strong> keyword though.<p>
If you are using the ultra wide angle, panoramic or cylindrical projection you should use a unit length direction vector to avoid strange results.<p>
The length of the direction vector doesn't matter if one of the following projection types is used: orthographic, fisheye or omnimax.<hr>
<a name="ref 1185 pri 0"><a name="ref 555 pri 1"><center><h3><a name="section 7.4.4.4">
Section 7.4.4.4<br>Angle</h3></center>
The <a name="ref 555 pri 6"><strong>angle</strong> keyword specifies the (horizontal) viewing angle in degrees of the camera used. Even though it is possible to use the direction vector to determine the viewing angle for the perspective camera it is much easier to use the angle keyword.<p>
The necessary calculations to convert from one method to the other are described below. These calculations are used to determine the length of the direction vector whenever the <a name="ref 555 pri 12"><strong>angle</strong> keyword is encountered.<p>
The viewing angle is converted to a direction vector length and vice versa using the formula The viewing angle is given by the formula<p>
<pre>
  angle = 2 * arctan(0.5 * right_length / direction_length)
</pre>
<p>
where right_length and direction_length are the lengths of the right and direction vector respectively and arctan is the inverse tangens function.<p>
From this the length of the direction vector can be calculated for a given viewing angle and right vector.<p>
From this the length of the direction vector can be calculated for a given viewing angle and right vector.<p>
<pre>
  direction_length = 0.5 * right_length / tan(angle / 2)
</pre>
<hr>
<a name="ref 1186 pri 0"><a name="ref 1187 pri 0"><center><h3><a name="section 7.4.4.5">
Section 7.4.4.5<br>Up and Right Vectors</h3></center>
The direction of the <a name="ref 564 pri 0"><strong>up</strong> and <a name="ref 99 pri 0"><strong>right</strong> vectors (together with the direction vector) determine the orientation of the camera in the scene. They are set implicitly by their default values of<p>
<listing>
  right 4/3*x
  up y
</listing>
<p>
or the <a name="ref 888 pri 9"><strong>look_at</strong> parameter (in combination with <a name="ref 1188 pri 9"><strong>location)</strong>. The directions of an explicitly specified right and up vector will be overridden by any following <a name="ref 888 pri 19"><strong>look_at</strong> parameter.<p>
While some camera types ignore the length of these vectors others use it to extract valuable information about the camera settings. The following list will explain the meaning of the right and up vector for each camera type. Since the direction the vectors is always used to describe the orientation of the camera it will not be explained again.<p>
<a name="ref 975 pri 20"><strong>Perspective projection:</strong> The lengths of the up and right vectors are used to set the size of the viewing window and the aspect ratio as described in detail in section <a href="pov3001e.htm#ref 1172 pri 0">&quot;Aspect Ratio&quot;</a>. Since the field of view depends on the length of the direction vector (implicitly set by the <strong>angle</strong> keyword or explicitly set by the <strong>direction</strong> keyword) and the lengths of the right and up vectors you should carefully choose them in order to get the desired results.<p>
<a name="ref 964 pri 21"><strong>Orthographic projection:</strong> The lengths of the right and up vector set the size of the viewing window regardless of the direction vector length, which is not used by the orthographic camera. Again the relation of the lengths is used to set the aspect ratio.<p>
<a name="ref 1030 pri 22"><strong>Fisheye projection:</strong> The right and up vectors are used to set the aspect ratio.<p>
<a name="ref 976 pri 23"><strong>Ultra wide angle projection:</strong> The up and right vectors work in a similar way as for the perspective camera.<p>
<a name="ref 953 pri 24"><strong>Omnimax projection:</strong> The omnimax projection is a 180 degrees fisheye that has a reduced viewing angle in the vertical direction. In reality this projection is used to make movies that can be viewed in the dome-like Omnimax theaters. The image will look somewhat elliptical. The <strong>angle</strong> keyword isn't used with this projection.<p>
<a name="ref 966 pri 25"><strong>Panoramic projection:</strong> The up and right vectors work in a similar way as for the perspective camera.<p>
<a name="ref 1173 pri 26"><strong>Cylindrical projection:</strong> In cylinder type 1 and 3 the axis of the cylinder lies along the <strong>up</strong> vector and the width is determined by the length of <strong>right</strong> vector or it may be overridden with the <strong>angle</strong> vector. In type 3 the <strong>up</strong> vector determines how many units high the image is. For example if you have <strong>up 4*y</strong> on a camera at the origin. Only points from y=2 to y=-2 are visible. All viewing rays are perpendicular to the y-axis. For type 2 and 4, the cylinder lies along the <strong>right</strong> vector. Viewing rays for type 4 are perpendicular to the <strong>right</strong> vector.<p>
Note that the up, right and direction vectors should always remain perpendicular to each other or the image will be distorted. If this is not the case a warning message will be printed. The vista buffer will not work for non-perpendicular camera vectors.<hr>
<a name="ref 1189 pri 0"><a name="ref 1172 pri 0"><center><h3><a name="section 7.4.4.5.1">
Section 7.4.4.5.1<br>Aspect Ratio</h3></center>
Together the right and up vectors define the <strong>aspect ratio</strong> (height to width ratio) of the resulting image. The default values <strong>up  &lt;0, 1, 0&gt;</strong> and <strong>right &lt;1.33, 0,  0&gt;</strong> result in an aspect ratio of 4 to 3. This is the aspect ratio of a typical computer monitor. If you wanted a tall skinny image or a short wide panoramic image or a perfectly square image you should adjust the up and right vectors to the appropriate proportions.<p>
Most computer video modes and graphics printers use perfectly square pixels. For example Macintosh displays and IBM SVGA modes 640x480, 800x600 and 1024x768 all use square pixels. When your intended viewing method uses square pixels then the width and height you set with the <a name="ref 590 pri 2"><strong>+W</strong> and <a name="ref 591 pri 5"><strong>+H</strong> switches should also have the same ratio as the right and up vectors. Note that 640/480 = 4/3 so the ratio is proper for this square pixel mode.<p>
Not all display modes use square pixels however. For example IBM VGA mode 320x200 and Amiga 320x400 modes do not use square pixels. These two modes still produce a 4/3 aspect ratio image. Therefore images intended to be viewed on such hardware should still use 4/3 ratio on their up and right vectors but the <a name="ref 590 pri 8"><strong>+W</strong> and <a name="ref 591 pri 12"><strong>+H</strong> settings will not be 4/3.<p>
For example:<p>
<listing>
  camera {
    location &lt;3,5,-10&gt;
    up       &lt;0,1,0&gt;
    right    &lt;1,0,0&gt;
    look_at  &lt;0,2,1&gt;
  }
</listing>
<p>
This specifies a perfectly square image. On a square pixel display like SVGA you would use <a name="ref 590 pri 16"><strong>+W</strong> and <a name="ref 591 pri 21"><strong>+H</strong> settings such as <a name="ref 590 pri 26"><strong>+W</strong>480 <a name="ref 591 pri 32"><strong>+H</strong>480 or <a name="ref 590 pri 38"><strong>+W</strong>600 <a name="ref 591 pri 45"><strong>+H</strong>600. However on the non-square pixel Amiga 320x400 mode you would want to use values of <a name="ref 590 pri 52"><strong>+W</strong>240 <a name="ref 591 pri 60"><strong>+H</strong>400 to render a square image.<hr>
<a name="ref 1190 pri 0"><a name="ref 100 pri 0"><center><h3><a name="section 7.4.4.5.2">
Section 7.4.4.5.2<br>Handedness</h3></center>
The <a name="ref 99 pri 3"><strong>right</strong> vector also describes the direction to the right of the camera. It tells POV-Ray where the right side of your screen is. The sign of the right vector can be used to determine the handedness of the coordinate system in use. The default right statement is:<p>
<listing>
  right &lt;1.33, 0, 0&gt;
</listing>
<p>
This means that the +x-direction is to the right. It is called a <strong>left-handed</strong> system because you can use your left hand to keep track of the axes. Hold out your left hand with your palm facing to your right. Stick your thumb up. Point straight ahead with your index finger. Point your other fingers to the right. Your bent fingers are pointing to the +x-direction. Your thumb now points into +y-direction. Your index finger points into the +z-direction.<p>
To use a right-handed coordinate system, as is popular in some CAD programs and other ray-tracers, make the same shape using your right hand. Your thumb still points up in the +y-direction and your index finger still points forward in the +z-direction but your other fingers now say the +x-direction is to the left. That means that the <a name="ref 99 pri 7"><strong>right</strong> side of your screen is now in the -x-direction. To tell POV-Ray to act like this you can use a negative x value in the <a name="ref 99 pri 12"><strong>right</strong> vector like this:<p>
<listing>
  right &lt;-1.33, 0, 0&gt;
</listing>
<p>
Since x increasing to the left doesn't make much sense on a 2D screen you now rotate the whole thing 180 degrees around by using a positive z value in your camera's location. You end up with something like this.<p>
<listing>
  camera {
    location &lt;0,0,10&gt;
    up       &lt;0,1,0&gt;
    right    &lt;-1.33,0,0&gt;
    look_at  &lt;0,0,0&gt;
  }
</listing>
<p>
Now when you do your ray-tracer's aerobics, as explained in the section <a href="pov30003.htm#ref 98 pri 0">&quot;Understanding POV-Ray's Coordinate System&quot;</a>, you use your right hand to determine the direction of rotations.<p>
In a two dimensional grid, x is always to the right and y is up. The two versions of handedness arise from the question of whether z points into the screen or out of it and which axis in your computer model relates to up in the real world.<p>
Architectural CAD systems, like AutoCAD, tend to use the <strong>God's  Eye</strong> orientation that the z-axis is the elevation and is the model's up direction. This approach makes sense if you're an architect looking at a building blueprint on a computer screen. z means up, and it increases towards you, with x and y still across and up the screen. This is the basic right handed system.<p>
Stand alone rendering systems, like POV-Ray, tend to consider you as a participant. You're looking at the screen as if you were a photographer standing in the scene. Up in the model is now y, the same as up in the real world and x is still to the right, so z must be depth, which increases away from you into the screen. This is the basic left handed system.<hr>
<a name="ref 1191 pri 0"><a name="ref 1192 pri 0"><center><h3><a name="section 7.4.4.6">
Section 7.4.4.6<br>Transforming the Camera</h3></center>
The <a name="ref 954 pri 7"><strong>translate</strong> and <a name="ref 216 pri 16"><strong>rotate</strong> commands can re-position the camera once you've defined it. For example:<p>
<listing>
  camera {
    location  &lt; 0,  0,  0&gt;
    direction &lt; 0,  0,  1&gt;
    up        &lt; 0,  1,  0&gt;
    right     &lt; 1,  0,  0&gt;
    rotate    &lt;30, 60, 30&gt;
    translate &lt; 5,  3,  4&gt;
  }
</listing>
<p>
In this example, the camera is created, then rotated by 30 degrees about the x-axis, 60 degrees about the y-axis and 30 degrees about the z-axis, then translated to another point in space.<hr>
<a name="ref 1193 pri 0"><a name="ref 1194 pri 0"><center><h3><a name="section 7.4.5">
Section 7.4.5<br>Camera Identifiers</h3></center>
You may declare several camera identifiers if you wish. This makes it easy to quickly change cameras. For example:<p>
<listing>
  #declare Long_Lens =
    camera {
      location -z*100
      angle 3
    }

  #declare Short_Lens =
    camera {
      location -z*50
      angle 15
    }

  camera {
    Long_Lens    // edit this line to change lenses
    look_at Here
  }
</listing>
<hr>
<a name="ref 1195 pri 0"><a name="ref 813 pri 0"><a name="ref 942 pri 0"><center><h3><a name="section 7.5">
Section 7.5<br>Objects</h3></center>
Objects are the building blocks of your scene. There are a lot of different types of objects supported by POV-Ray: finite solid primitives, finite patch primitives, infinite solid polynomial primitives and light sources. Constructive Solid Geometry (CSG) is also supported.<p>
The basic syntax of an object is a keyword describing its type, some floats, vectors or other parameters which further define its location and/or shape and some optional object modifiers such as texture, pigment, normal, finish, bounding, clipping or transformations.<p>
<a name="ref 112 pri 5">The texture describes what the object looks like, i. e. its material. Textures are combinations of pigments, normals, finishes and halos. Pigment is the color or pattern of colors inherent in the material. Normal is a method of simulating various patterns of bumps, dents, ripples or waves by modifying the surface normal vector. Finish describes the reflective and refractive properties of a material. The halo is used to describe the interior of the object.<p>
Bounding shapes are finite, invisible shapes which wrap around complex, slow rendering shapes in order to speed up rendering time. Clipping shapes are used to cut away parts of shapes to expose a hollow interior. Transformations tell the ray-tracer how to move, size or rotate the shape and/or the texture in the scene.<hr>

<center>
<a href="pov3001f.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
