<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1054 pri 0"><a name="ref 1055 pri 0"><center><h3><a name="section 7.1.4">
Section 7.1.4<br>Vector Expressions</h3></center>
POV-Ray often requires you to specify a <strong>vector</strong>. A vector is a set of related float values. Vectors may be specified using literals, identifiers or functions which return vector values. You may also create very complex vector expressions from combinations of any of these using various familiar operators.<p>
POV-Ray vectors may have from two to five components but the vast majority of vectors have three components. Unless specified otherwise, you should assume that the word <strong>vector</strong> means a three component vector. POV-Ray operates in a 3D x, y, z coordinate system and you will use three component vectors to specify x, y and z values. In some places POV-Ray needs only two coordinates. These are often specified by a 2D vector called an <strong>UV vector</strong>. Fractal objects use 4D vectors. Color expressions use 5D vectors but allow you to specify 3, 4 or 5 components and use default values for the unspecified components. Unless otherwise noted, all 2, 4 or 5 component vectors work just like 3D vectors but they have a different number of components.<hr>
<a name="ref 1056 pri 0"><a name="ref 1057 pri 0"><center><h3><a name="section 7.1.4.1">
Section 7.1.4.1<br>Vector Literals</h3></center>
Vectors consist of two to five float expressions that are bracketed by angle brackets <a name="ref 1058 pri 0"><strong>&lt;</strong> and <a name="ref 1059 pri 0"><strong>&gt;</strong>. The terms are separated by commas. For example here is a typical three component vector:<p>
<listing>
  &lt; 1.0, 3.2, -5.4578 &gt;
</listing>
<p>
The commas between components are necessary to keep the program from thinking that the 2nd term is the single float expression 3.2-5.4578 and that there is no 3rd term. If you see an error message such as <strong>Float expected but '&gt;' found instead</strong> you probably have missed a comma.<p>
Sometimes POV-Ray requires you to specify floats and vectors side-by-side. The rules for vector expressions allow for mixing of vectors with vectors or vectors with floats so commas are required separators whenever an ambiguity might arise. For example &lt; 1,2,3&gt;-4 evaluates as a mixed float and vector expression where 4 is subtracted from each component resulting in &lt; -3,-2,-1&gt;. However the comma in &lt;1,2,3&gt;,-4 means this is a vector followed by a float.<p>
Each component may be a full float expression. For example &lt; This+3,That/3,5*Other_Thing&gt; is a valid vector.<hr>
<a name="ref 1060 pri 0"><a name="ref 1061 pri 0"><a name="ref 1050 pri 2"><center><h3><a name="section 7.1.4.2">
Section 7.1.4.2<br>Vector Identifiers</h3></center>
Vector identifiers may be declared to make scene files more readable and to parameterize scenes so that changing a single declaration changes many values. An identifier is declared as follows...<p>
<listing>
  #declare IDENTIFIER = EXPRESSION
</listing>
<p>
Where IDENTIFIER is the name of the identifier up to 40 characters long and EXPRESSION is any valid expression which evaluates to a vector value. Here are some examples...<p>
<listing>
  #declare Here = &lt;1,2,3&gt;
  #declare There = &lt;3,4,5&gt;
  #declare Jump = &lt;Foo*2,Bar-1,Bob/3&gt;
  #declare Route = There-Here
  #declare Jump = Jump+&lt;1,2,3&gt;
</listing>
<p>
Note that you invoke a vector identifier by using its name without any angle brackets. As the last example shows, you can re-declare a vector identifier and may use previously declared values in that re-declaration. There are several built-in identifiers which POV-Ray declares for you. See section <a href="pov3001b.htm#ref 1051 pri 0">&quot;Built-in Identifiers&quot;</a> for details.<hr>
<a name="ref 1062 pri 0"><a name="ref 1063 pri 0"><center><h3><a name="section 7.1.4.3">
Section 7.1.4.3<br>Vector Operators</h3></center>
Vector literals, identifiers and functions may also be combined in expressions the same as float values. Operations are performed on a component-by-component basis. For example &lt;1,2,3&gt; + &lt;4,5,6&gt; evaluates the same as &lt; 1+4,2+5,3+6&gt; or &lt;5,7,9&gt;. Other operations are done on a similar component-by-component basis. For example (&lt; 1,2,3&gt; = &lt;3,2,1&gt;) evaluates to &lt; 0,1,0&gt; because the middle components are equal but the others are not. Admittedly this isn't very useful but its consistent with other vector operations.<p>
Conditional expressions such as <strong>(C ? A : B)</strong> require that C is a float expression but A and B may be vector expressions. The result is that the entire conditional evaluates as a valid vector. For example if <strong>Foo</strong> and <strong>Bar</strong> are floats then<p>
<listing>
  Foo &lt; Bar ? &lt;1,2,3&gt; : &lt;5,6,7&gt;
</listing>
 evaluates as the vector &lt;1,2,3&gt; if Foo is less than Bar and evaluates as &lt;5,6,7&gt; otherwise.<p>
You may use the dot operator to extract a single component from a vector. Suppose the identifier <a name="ref 1064 pri 0"><strong>Spot</strong> was previously defined as a vector. Then <strong>Spot.x</strong> is a float value that is the first component of this x, y, z vector. Similarly <strong>Spot.y</strong> and <strong>Spot.z</strong> reference the 2nd and 3rd components. If <strong>Spot</strong> was a two component UV vector you could use <strong>Spot.u</strong> and <strong>Spot.v</strong> to extract the first and second component. For a 4D vector use <a name="ref 1065 pri 0"><strong>.x</strong>, <a name="ref 1066 pri 0"><strong>.y</strong>, <a name="ref 1067 pri 0"><strong>.z</strong> and <a name="ref 1068 pri 0"><strong>.t</strong> to extract each float component. The dot operator is also used in color expressions which are covered later.<hr>
<a name="ref 1069 pri 0"><a name="ref 1070 pri 0"><center><h3><a name="section 7.1.4.4">
Section 7.1.4.4<br>Operator Promotion</h3></center>
You may use a lone float expression to define a vector whose components are all the same. POV-Ray knows when it needs a vector of a particular type and will promote a float into a vector if need be. For example the POV-Ray <a name="ref 215 pri 8"><strong>scale</strong> statement requires a three component vector. If you specify scale 5 then POV-Ray interprets this as scale &lt;5,5,5&gt; which means you want to scale by 5 in every direction.<p>
Versions of POV-Ray prior to 3.0 only allowed such use of a float as a vector in various limited places such as <a name="ref 215 pri 17"><strong>scale</strong> and <a name="ref 283 pri 26"><strong>turbulence</strong>. However you may now use this trick anywhere. For example...<p>
<listing>
  box{0,1}    // Same as box{&lt;0,0,0&gt;,&lt;1,1,1&gt;}
  sphere{0,1} // Same as sphere{&lt;0,0,0&gt;,1}
</listing>
<p>
When promoting a float into a vector of 2, 3, 4 or 5 components, all components are set to the float value, however when promoting a vector of a lower number of components into a higher order vector, all remaining components are set to zero. For example if POV-Ray expects a 4D vector and you specify 9 the result is &lt;9,9,9,9&gt; but if you specify &lt;7,6&gt; the result is &lt; 7,6,0,0&gt;.<hr>
<a name="ref 1071 pri 0"><a name="ref 117 pri 0"><center><h3><a name="section 7.1.5">
Section 7.1.5<br>Specifying Colors</h3></center>
POV-Ray often requires you to specify a color. Colors consist of five values or color components. The first three are called <a name="ref 114 pri 1"><strong>red</strong>, <a name="ref 115 pri 2"><strong>green</strong> and <a name="ref 116 pri 3"><strong>blue</strong>. They specify the intensity of the primary colors red, green and blue using an additive color system like the one used by the red, green and blue color phosphors on a color monitor.<p>
The 4th component, called <a name="ref 315 pri 5"><strong>filter</strong>, specifies the amount of filtered transparency of a substance. Some real-world examples of filtered transparency are stained glass windows or tinted cellophane. The light passing through such objects is tinted by the appropriate color as the material selectively absorbs some frequencies of light while allowing others to pass through. The color of the object is subtracted from the light passing through so this is called subtractive transparency.<p>
The 5th component, called <a name="ref 316 pri 6"><strong>transmit</strong>, specifies the amount of non-filtered light that is transmitted through a surface. Some real-world examples of non-filtered transparency are thin see-through cloth, fine mesh netting and dust on a surface. In these examples, all frequencies of light are allowed to pass through tiny holes in the surface. Although the amount of light passing through is diminished, the color of the light passing through is unchanged. The color of the object is added to the light passing through so this is called additive transparency.<p>
Note that early versions of POV-Ray used the keyword <a name="ref 837 pri 6"><strong>alpha</strong> to specify filtered transparency. However that word is often used to describe non-filtered transparency. For this reason <a name="ref 837 pri 7"><strong>alpha</strong> is no longer used.<p>
Each of the five components of a color are float values which are normally in the range between 0.0 and 1.0. However any values, even negatives may be used.<p>
Colors may be specified using vectors, keywords with floats or identifiers. You may also create very complex color expressions from combinations of any of these using various familiar operators. The syntax for specifying a color has evolved since POV-Ray was first released. We have maintained the original keyword-based syntax and added a short-cut vector notation. Either the old or new syntax is acceptable however the vector syntax is easier to use when creating color expressions.<hr>
<a name="ref 1072 pri 0"><a name="ref 1073 pri 0"><center><h3><a name="section 7.1.5.1">
Section 7.1.5.1<br>Color Vectors</h3></center>
The syntax for a color vector is any of the following...<p>
<a name="ref 831 pri 0"><listing>
  color rgb VECTOR3
  color rgbf VECTOR4
  color rgbt VECTOR4
  color rgbft VECTOR5
</listing>
<p>
where VECTOR3, VECTOR4 or VECTOR5 are any valid vector expressions of 3, 4 or 5 components. For example<p>
<listing>
  color rgb &lt;1.0, 0.5, 0.2&gt;
</listing>
<p>
This specifies a color whose red component is 1.0 or 100% of full intensity. The green component is 0.5 or 50% of full intensity and the blue component is 0.2 or 20% of full intensity. Although the filter and transmit components are not explicitly specified, they exist and are set to their default values of 0 or no transparency.<p>
The <a name="ref 834 pri 0"><strong>rgbf</strong> keyword requires a four component vector. The 4th component is the filter component and the transmit component defaults to zero. Similarly the <a name="ref 838 pri 0"><strong>rgbt</strong> keyword requires four components where the 4th value is moved to the 5th component which is transmit and then the filter component is set to zero.<p>
The <a name="ref 836 pri 0"><strong>rgbft</strong> keyword allows you to specify all five components. Internally in expressions all five are always used.<p>
Under most circumstances the keyword <a name="ref 113 pri 2"><strong>color</strong> is optional and may be omitted. We also support the British or Canadian spelling <a name="ref 926 pri 2"><strong>colour</strong>. Under some circumstances, if the vector expression is a 5 component expression or there is a color identifier in the expression then the <a name="ref 1074 pri 2"><strong>rgbtf</strong> keyword is optional.<hr>
<a name="ref 1075 pri 0"><a name="ref 1076 pri 0"><center><h3><a name="section 7.1.5.2">
Section 7.1.5.2<br>Color Keywords</h3></center>
The older keyword method of specifying a color is still useful and many users prefer it. Like a color vector, you begin with the optional keyword <a name="ref 113 pri 3"><strong>color</strong>. This is followed by any of five additional keywords <a name="ref 114 pri 5"><strong>red</strong>, <a name="ref 115 pri 7"><strong>green</strong>, <a name="ref 116 pri 9"><strong>blue</strong>, <a name="ref 315 pri 12"><strong>filter</strong> or <a name="ref 316 pri 14"><strong>transmit</strong>. Each of these component keywords is followed by a float expression. For example<p>
<listing>
  color red 1.0 green 0.5
</listing>
<p>
This specifies a color whose red component is 1.0 or 100% of full intensity and the green component is 0.5 or 50% of full intensity. Although the blue, filter and transmit components are not explicitly specified, they exist and are set to their default values of 0. The component keywords may be given in any order and if any component is unspecified its value defaults to zero.<hr>
<a name="ref 1077 pri 0"><a name="ref 1078 pri 0"><a name="ref 1050 pri 3"><center><h3><a name="section 7.1.5.3">
Section 7.1.5.3<br>Color Identifiers</h3></center>
Color identifiers may be declared to make scene files more readable and to parameterize scenes so that changing a single declaration changes many values. A color identifier is declared as either of the following...<p>
<listing>
  #declare IDENTIFIER = COLOR_VECTOR
  #declare IDENTIFIER = COLOR_KEYWORDS...
</listing>
<p>
Where IDENTIFIER is the name of the identifier up to 40 characters long and COLOR_VECTOR or COLOR_KEYWORDS are any valid color specifications as described in the two previous sections of this document. Here are some examples...<p>
<listing>
  #declare White = rgb &lt;1,1,1&gt;
  #declare Cyan = color blue 1.0  green 1.0
  #declare Weird = rgb &lt;Foo*2,Bar-1,Bob/3&gt;
  #declare LightGray = White*0.8
  #declare LightCyan = Cyan red 0.6
</listing>
<p>
As the <strong>LightGray</strong> example shows you do not need any color keywords when creating color expressions based on previously declared colors. The last example shows you may use a color identifier with the keyword style syntax. Make sure that the identifier comes first before any other component keywords.<p>
Like floats and vectors, you may re-define colors throughout a scene but the need to do so is rare.<hr>
<a name="ref 1079 pri 0"><a name="ref 1080 pri 0"><center><h3><a name="section 7.1.5.4">
Section 7.1.5.4<br>Color Operators</h3></center>
Color vectors may be combined in expressions the same as float or vector values. Operations are performed on a component-by-component basis. For example <strong>rgb &lt;1.0, 0.5 0.2&gt; * 0.9</strong> evaluates the same as <strong>rgb &lt;1.0, 0.5 0.2&gt; *  &lt;0.9, 0.9, 0.9&gt;</strong> or <strong>rgb &lt;0.9, 0.45,  0.18&gt;</strong>. Other operations are done on a similar component-by-component basis.<p>
You may use the dot operator to extract a single component from a color. Suppose the identifier <a name="ref 1081 pri 0"><strong>Shade</strong> was previously defined as a color. Then <strong>Shade.red</strong> is the float value of the red component of <strong>Shade</strong>. Similarly <strong>Shade.green</strong>, <strong>Shade.blue</strong>, <strong>Shade.filter</strong> and <strong>Shade.transmit</strong> extract the float value of the other color components.<hr>
<a name="ref 1082 pri 0"><a name="ref 1083 pri 0"><center><h3><a name="section 7.1.5.5">
Section 7.1.5.5<br>Common Color Pitfalls</h3></center>
The variety and complexity of color specification methods can lead to some common mistakes. Here are some things to consider when specifying a color.<p>
When using filter transparency, the colors which come through are multiplied by the primary color components. For example if gray light such as <strong>rgb &lt;0.9,0.9,0.9&gt;</strong> passes through a filter such as <strong>rgbf &lt;1.0,0.5,0.0,1.0&gt;</strong> the result is <strong>rgb &lt;0.9,0.45,0.0&gt;</strong> with the red let through 100%, the green cut in half from 0.9 to 0.45 and the blue totally blocked. Often users mistakenly specify a clear object by<p>
<listing>
  color filter 1.0
</listing>
<p>
but this has implied red, green and blue values of zero. You've just specified a totally black filter so no light passes through. The correct way is either<p>
<listing>
  color red 1.0   green 1.0   blue 1.0   filter 1.0
</listing>
<p>
or<p>
<listing>
  color transmit 1.0
</listing>
<p>
In the 2nd example it doesn't matter what the rgb values are. All of the light passes through untouched.<p>
Another pitfall is the use of color identifiers and expressions with color keywords. For example...<p>
<listing>
  color My_Color red 0.5
</listing>
<p>
this substitutes whatever was the red component of <strong>My_Color</strong> with a red component of 0.5 however...<p>
<listing>
  color My_Color + red 0.5
</listing>
<p>
adds 0.5 to the red component of My_Color and even less obvious...<p>
<listing>
  color My_Color * red 0.5
</listing>
<p>
that cuts the red component in half as you would expect but it also multiplies the green, blue, filter and transmit components by zero! The part of the expression after the multiply operator evaluates to <strong>rgbft &lt;0.5,0,0,0,0&gt;</strong> as a full 5 component color.<p>
The following example results in no change to <a name="ref 1084 pri 0"><strong>My_Color</strong>.<p>
<listing>
  color red 0.5 My_Color
</listing>
<p>
This is because the identifier fully overwrites the previous value. When using identifiers with color keywords, the identifier should be first.<p>
One final issue, some POV-Ray syntax allows full color specifications but only uses the rgb part. In these cases it is legal to use a float where a color is needed. For example:<p>
<listing>
  finish { ambient 1 }
</listing>
<p>
The ambient keyword expects a color so the value 1 is promoted to &lt;1,1,1,1,1&gt; which is no problem. However<p>
<listing>
  pigment { color 0.4 }
</listing>
<p>
is legal but it may or may not be what you intended. The 0.4 is promoted to &lt;0.4,0.4,0.4,0.4,0.&gt; with the filter and transmit set to 0.4 as well. It is more likely you wanted...<p>
<listing>
  pigment { color rgb 0.4 }
</listing>
<p>
in which case a 3 component vector is expected. Therefore the 0.4 is promoted to &lt;0.4,0.4,0.4,0.0,0.0&gt; with default zero for filter and transmit.<hr>
<a name="ref 1085 pri 0"><a name="ref 1086 pri 0"><center><h3><a name="section 7.1.6">
Section 7.1.6<br>Strings</h3></center>
The POV-Ray language requires you to specify a string of characters to be used as a file name, text for messages or text for a text object. Strings may be specified using literals, identifiers or functions which return string values. Although you cannot build string expressions from symbolic operators such as are used with floats, vectors or colors, you may perform various string operations using string functions. Some applications of strings in POV-Ray allow for non-printing formatting characters such as newline or form-feed.<hr>
<a name="ref 1087 pri 0"><a name="ref 1088 pri 0"><center><h3><a name="section 7.1.6.1">
Section 7.1.6.1<br>String Literals</h3></center>
String literals begin with a double quote mark '&quot;' which is followed by up to 256 printable ASCII characters and are terminated by another double quote mark. The following are all valid string literals:<p>
<pre>
  &quot;Here&quot;   &quot;There&quot;    &quot;myfile.gif&quot;    &quot;textures.inc&quot;
</pre>
<p>
Note if you need to specify a quote mark in a string literal you must preceed it with a backslash. For example<p>
<pre>
  &quot;Joe said \&quot;Hello\&quot; as he walked in.&quot;
</pre>
<p>
is converted to<p>
<pre>
  Joe said &quot;Hello&quot; as he walked in.
</pre>
<p>
If you need to specify a backslash, most of the time you need do nothing special. However if the string ends in a backslash, you will have to specify two. For example:<p>
<pre>
  &quot;This is a backslash  and so is this&quot;
</pre>
<p>
Is converted to:<p>
<pre>
  This is a backslash  and so is this\
</pre>
<p>
The<p>
regardless usage however other formating codes such as \n for new line are supported in user message streams. See <a href="pov3001d.htm#ref 1089 pri 0">&quot;Text Formatting&quot;</a> for details.<hr>

<center>
<a href="pov3001b.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
