<html>
<body text="#000000" bgcolor="#C0C0C0" background="backgrnd.gif">
<a name="ref 1090 pri 0"><a name="ref 1091 pri 0"><a name="ref 1050 pri 4"><center><h3><a name="section 7.1.6.2">
Section 7.1.6.2<br>String Identifiers</h3></center>
String identifiers may be declared to make scene files more readable and to parameterize scenes so that changing a single declaration changes many values. An identifier is declared as follows...<p>
<listing>
  #declare IDENTIFIER = STRING
</listing>
<p>
Where IDENTIFIER is the name of the identifier up to 40 characters long and STRING is a string literal, string identifier or function which returns a string value. Here are some examples...<p>
<listing>
  #declare Font_Name = &quot;ariel.ttf&quot;
  #declare Inc_File = &quot;myfile.inc&quot;
  #declare Name = &quot;John&quot;
  #declare Name = concat(Name,&quot; Doe&quot;)
</listing>
<p>
As the last example shows, you can re-declare a string identifier and may use previously declared values in that re-declaration.<hr>
<a name="ref 1092 pri 0"><a name="ref 1051 pri 0"><center><h3><a name="section 7.1.7">
Section 7.1.7<br>Built-in Identifiers</h3></center>
There are several built-in float and vector identifiers. You can use them to specify values or to create expressions but you cannot re-declare them to change their values.<hr>
<a name="ref 1093 pri 0"><a name="ref 1094 pri 0"><a name="ref 1050 pri 5"><center><h3><a name="section 7.1.7.1">
Section 7.1.7.1<br>Constant Built-in Identifiers</h3></center>
Most built-in identifiers never change value. They are defined as though the following lines were at the start of every scene.<p>
<listing>
  #declare pi = 3.1415926535897932384626
  #declare true = 1
  #declare yes = 1
  #declare on = 1
  #declare false = 0
  #declare no = 0
  #declare off = 0
  #declare u = &lt;1,0&gt;
  #declare v = &lt;0,1&gt;
  #declare x = &lt;1,0,0&gt;
  #declare y = &lt;0,1,0&gt;
  #declare z = &lt;0,0,1&gt;
  #declare t = &lt;0,0,0,1&gt;
</listing>
<p>
<a name="ref 981 pri 5">The built-in float identifier <a name="ref 981 pri 6"><strong>pi</strong> is obviously useful in math expressions involving circles.<p>
<a name="ref 1035 pri 6"><a name="ref 933 pri 6"><a name="ref 355 pri 7"><a name="ref 356 pri 8"><a name="ref 962 pri 8"><a name="ref 1023 pri 8">The built-in float identifiers <a name="ref 355 pri 10"><strong>on</strong>,<a name="ref 356 pri 12"><strong>off</strong>, <a name="ref 1035 pri 13"><strong>yes</strong>, <a name="ref 933 pri 14"><strong>no</strong>, <a name="ref 962 pri 15"><strong>true</strong> and <a name="ref 1023 pri 16"><strong>false</strong> are designed for use as boolean constants.<p>
<a name="ref 142 pri 17"><a name="ref 143 pri 18"><a name="ref 144 pri 19">The built-in vector identifiers <a name="ref 142 pri 21"><strong>x</strong>, <a name="ref 143 pri 23"><strong>y</strong> and <a name="ref 144 pri 25"><strong>z</strong> provide much greater readability for your scene files when used in vector expressions. For example....<p>
<listing>
  plane { y, 1}        // The normal vector is obviously &quot;y&quot;.
  plane { &lt;0,1,0&gt;, 1}  // This is harder to read.

  translate 5*x        // Move 5 units in the &quot;x&quot; direction.
  translate &lt;5,0,0&gt;    // This is less obvious.
</listing>
<p>
An expression like <strong>5*x</strong> evaluates to 5 &lt;1,0,0&gt; or &lt;5,0,0&gt;.<p>
<a name="ref 973 pri 25"><a name="ref 985 pri 25"><a name="ref 916 pri 25">Similarly <a name="ref 973 pri 26"><strong>u</strong> and <a name="ref 985 pri 27"><strong>v</strong> may be used in 2D vectors. When using 4D vectors you should use <a name="ref 142 pri 30"><strong>x</strong>, <a name="ref 143 pri 33"><strong>y</strong>, <a name="ref 144 pri 36"><strong>z</strong>, and <a name="ref 916 pri 37"><strong>t</strong> and POV-Ray will promote <a name="ref 142 pri 41"><strong>x</strong>, <a name="ref 143 pri 45"><strong>y</strong> and <a name="ref 144 pri 49"><strong>z</strong> to 4D when used where 4D is required.<hr>
<a name="ref 1095 pri 0"><a name="ref 1096 pri 0"><center><h3><a name="section 7.1.7.2">
Section 7.1.7.2<br>Built-in Identifier 'clock'</h3></center>
The built-in float identifier <a name="ref 570 pri 0"><strong>clock</strong> is used to control animations in POV-Ray. Unlike some animation packages, the action in POV-Ray animated scenes does not depend upon the integer frame numbers. Rather you should design your scenes based upon the float identifier <a name="ref 570 pri 5"><strong>clock</strong>. For non-animated scenes its default value is 0 but you can set it to any float value using the INI file option <a name="ref 570 pri 11"><strong>Clock</strong>=n.n or the command-line switch <a name="ref 571 pri 15"><strong>+K</strong>n.n to pass a single float value your scene file.<p>
Other INI options and switches may be used to animate scenes by automatically looping through the rendering of frames using various values for <a name="ref 570 pri 22"><strong>clock</strong>. By default, the clock value is 0 for the initial frame and 1 for the final frame. All other frames are interpolated between these values. For example if your object is supposed to rotate one full turn over the course of the animation you could specify <strong>rotate 360*clock*y</strong>. Then as clock runs from 0 to 1, the object rotates about the y-axis from 0 to 360 degrees.<p>
Although the value of <a name="ref 570 pri 30"><strong>clock</strong> will change from frame-to-frame, it will never change throughout the parsing of a scene.<p>
See section <a href="pov30014.htm#ref 601 pri 0">&quot;Animation Options&quot;</a> for more details.<hr>
<a name="ref 1097 pri 0"><a name="ref 1098 pri 0"><center><h3><a name="section 7.1.7.3">
Section 7.1.7.3<br>Built-in Identifier 'version'</h3></center>
The built-in float identifier <a name="ref 726 pri 3"><strong>version</strong> contains the current setting of the version compatibility option. Although this value defaults to 3 which is the current POV-Ray version number, the initial value of <a name="ref 726 pri 7"><strong>version</strong> may be set by the INI file option <a name="ref 726 pri 12"><strong>Version</strong>=n.n or by the <a name="ref 727 pri 13"><strong>+MV</strong>n.n command-line switch. This tells POV-Ray to parse the scene file using syntax from an earlier version of POV-Ray.<p>
<a name="ref 1050 pri 19">The INI option or switch only affects the initial setting. Unlike other built-in identifiers, you may change the value of <a name="ref 726 pri 25"><strong>version</strong> throughout a scene file. You do not use <a name="ref 1050 pri 32"><strong>#declare</strong> to change it though. The <a name="ref 725 pri 36"><strong>#version</strong> language directive is used to change modes. Such changes may occur several times within scene files.<p>
Together with the built-in <a name="ref 726 pri 43"><strong>version</strong> identifier the <a name="ref 725 pri 48"><strong>#version</strong> directive allows you to save and restore the previous values of this compatibility setting. For example suppose <b>mystuff.inc</b> is in version 1 format. At the top of the file you could put:<p>
<listing>
  #declare Temp_Vers = version    // Save previous value
  #version 1.0                    // Change to 1.0 mode

  ... // Version 1.0 stuff goes here...

  #version Temp_Vers              // Restore previous version
</listing>
<hr>
<a name="ref 1099 pri 0"><a name="ref 1100 pri 0"><center><h3><a name="section 7.1.8">
Section 7.1.8<br>Functions</h3></center>
POV-Ray defines a variety of built-in functions for manipulating floats, vectors and strings. The functions are listed grouped according to their usage and not by the type of value they return. For example <a name="ref 996 pri 1"><strong>vdot</strong> computes the dot product of two vectors and is listed as a vector function even though it returns a single float value.<p>
Function calls consist of a keyword which specifies the name of the function followed by a parameter list enclosed in parentheses. Parameters are separated by commas. For example:<p>
<listing>
  keyword(param1,param2)
</listing>
<p>
Functions evaluate to values that are floats, vectors or strings and may be used in expressions or statements anywhere that literals or identifiers of that type may be used.<hr>
<a name="ref 1101 pri 0"><a name="ref 1102 pri 0"><center><h3><a name="section 7.1.8.1">
Section 7.1.8.1<br>Float Functions</h3></center>
The following are the functions which take one or more float parameters and return float values. Assume that A and B are any valid expression that evaluates to a float. See section <a href="pov3001b.htm#ref 1103 pri 0">&quot;Vector Functions&quot;</a> and section <a href="pov3001b.htm#ref 1104 pri 0">&quot;String Functions&quot;</a> for other functions which return float values but whose primary purpose is more closely related to vectors and strings.<p>
<a name="ref 822 pri 0"><strong>abs(A):</strong> Absolute value of A. If A is negative, returns -A otherwise returns A.<p>
<a name="ref 823 pri 0"><strong>acos(A):</strong> Arc-cosine of A. Returns the angle, measured in radians, whose cosine is A.<p>
<a name="ref 847 pri 0"><strong>asin(A):</strong> Arc-sine of A. Returns the angle, measured in radians, whose sine is A.<p>
<a name="ref 856 pri 0"><strong>atan2(A,B):</strong> Arc-tangent of (A/B). Returns the angle, measured in radians, whose tangent is (A/B). Returns appropriate value even if B is zero. Use atan2(A,1) to compute usual <a name="ref 853 pri 0">atan(A) function.<p>
<a name="ref 912 pri 0"><strong>ceil(A)</strong>: Ceiling of A. Returns the smallest integer greater than A. Rounds up to the next higher integer.<p>
<a name="ref 947 pri 0"><strong>cos(A):</strong> Cosine of A. Returns the cosine of the angle A, where A is measured in radians.<p>
<a name="ref 977 pri 0"><strong>degrees(A):</strong> Convert radians to degrees. Returns the angle measured in degrees whose value in radians is A. Formula is degrees=A/pi*180.0.<p>
<a name="ref 989 pri 0"><strong>div(A,B):</strong> Integer division. The integer part of (A/B).<p>
<a name="ref 1009 pri 0"><strong>exp(A):</strong> Exponential of A. Returns the value of e raised to the power A where e is the base of the natural logarithm, i.e. the non-repeating value approximately equal to 2.71828182846.<p>
<a name="ref 1034 pri 0"><strong>floor(A):</strong> Floor of A. Returns the largest integer less than A. Rounds down to the next lower integer.<p>
<a name="ref 859 pri 0"><strong>int(A):</strong> Integer part of A. Returns the truncated integer part of A. Rounds towards zero.<p>
<a name="ref 884 pri 0"><strong>log(A):</strong> Natural logarithm of A. Returns the natural logarithm base e of the value A.<p>
<a name="ref 906 pri 0"><strong>max(A,B):</strong> Maximum of A and B. Returns A if A larger than B. Otherwise returns B.<p>
<a name="ref 922 pri 0"><strong>min(A,B):</strong> Minimum of A and B. Returns A if A smaller than B. Otherwise returns B.<p>
<a name="ref 927 pri 0"><strong>mod(A,B):</strong> Value of A modulo B. Returns the remainder after the integer division of A/B. Formula is mod=((A/B)-int(A/B))*B.<p>
<a name="ref 1001 pri 0"><strong>pow(A,B):</strong> Exponentiation. Returns the value of A raised to the power B.<p>
<a name="ref 1031 pri 0"><strong>radians(A):</strong> Convert degrees to radians. Returns the angle measured in radians whose value in degrees is A. Formula is radians=A*pi/180.0.<p>
<a name="ref 1038 pri 0"><strong>rand(A):</strong> Returns the next pseudo-random number from the stream specified by the positive integer A. You must call seed() to initialize a random stream before calling rand(). The numbers are uniformly distributed, and have values between 0.0 and 1.0, inclusively. The numbers generated by separate streams are independent random variables.<p>
<a name="ref 851 pri 0"><strong>seed(A):</strong> Initializes a new pseudo-random stream with the initial seed value A. The number corresponding to this random stream is returned. Any number of pseudo-random streams may be used as shown in the example below:<p>
<listing>
  #declare R1 = seed(0)
  #declare R2 = seed(12345)

  #sphere { &lt;rand(R1), rand(R1), rand(R1)&gt;, rand(R2) }
</listing>
<p>
Multiple random generators are very useful in situations where you use rand() to place a group of objects, and then decide to use rand() in another location earlier in the file to set some colors or place another group of objects. Without separate rand() streams, all of your objects would move when you added more calls to rand(). This is very annoying.<p>
<a name="ref 855 pri 0"><strong>sin(A):</strong> Sine of A. Returns the sine of the angle A, where A is measured in radians.<p>
<a name="ref 885 pri 0"><strong>sqrt(A):</strong> Square root of A. Returns the value whose square is A.<p>
<a name="ref 918 pri 0"><strong>tan(A):</strong> Tangent of A. Returns the tangent of the angle A, where A is measured in radians.<hr>
<a name="ref 1105 pri 0"><a name="ref 1103 pri 0"><center><h3><a name="section 7.1.8.2">
Section 7.1.8.2<br>Vector Functions</h3></center>
The following are the functions which take one or more vector and float parameters and return vector or float values. All of these functions support only three component vectors. Assume that A and B are any valid expression that evaluates to a three component vector and that F is any valid expression that evaluates to a float.<p>
<a name="ref 992 pri 0"><strong>vaxis_rotate(A,B,F):</strong> Rotate A about B by F. Given the x,y,z coordinates of a point in space designated by the vector A, rotate that point about an arbitrary axis defined by the vector B. Rotate it through an angle specified in degrees by the float value F. The result is a vector containing the new x,y,z coordinates of the point.<p>
<a name="ref 993 pri 0"><strong>vcross(A,B):</strong> Cross product of A and B. Returns a vector that is the vector cross product of the two vectors. The resulting vector is perpendicular to the two original vectors and its length is proportional to the angle between them. See the animated demo scene VECT2.POV for an illustration.<p>
<a name="ref 996 pri 0"><strong>vdot(A,B):</strong> Dot product of A and B. Returns a float value that is the dot product (sometimes called scaler product of A with B. Formula is vdot=A.x*B.x + A.y*B.y + A.z*B.z. See the animated demo scene VECT2.POV for an illustration.<p>
<a name="ref 999 pri 0"><strong>vlength(A):</strong> Length of A. Returns a float value that is the length of vector A. Can be used to compute the distance between two points. Dist=vlength(B-A). Formula is vlength=sqrt(vdot(A,A)).<p>
<a name="ref 1002 pri 0"><strong>vnormalize(A):</strong> Normalize vector A. Returns a unit length vector that is the same direction as A. Formula is vnormalize=A/vlength(A).<p>
<a name="ref 1014 pri 0"><strong>vrotate(A,B):</strong> Rotate A about origin by B. Given the x,y,z coordinates of a point in space designated by the vector A, rotate that point about the origin by an amount specified by the vector B. Rotate it about the x-axis by an angle specified in degrees by the float value B.x. Similarly B.y and B.z specify the amount to rotate in degrees about the y-axis and z-axis. The result is a vector containing the new x,y,z coordinates of the point.<hr>
<a name="ref 1106 pri 0"><a name="ref 1104 pri 0"><center><h3><a name="section 7.1.8.3">
Section 7.1.8.3<br>String Functions</h3></center>
The following are the functions which take one or more string and float parameters and return string or float values. Assume that S1 and S2 are any valid strings and that A, L and P are any valid expressions that evaluate to floats.<p>
<a name="ref 844 pri 0"><strong>asc(S1):</strong> ASCII value of S1. Returns an integer value in the range 0 to 255 that is the ASCII value of the first character of S1. For example <strong>asc(&quot;ABC&quot;)</strong> is 65 because that is the value of the character &quot;A&quot;.<p>
<a name="ref 917 pri 0"><strong>chr(A):</strong> Character whose ASCII value is A. Returns a single character string. The ASCII value of the character is specified by an integer A which must be in the range 0 to 255. For example <strong>chr(70)</strong> is the string &quot;F&quot;. When rendering text objects you should be aware that the characters rendered for values of A &gt; 127 are dependent on the (TTF) font being used. Many (TTF) fonts use the Latin-1 (ISO 8859-1) character set, but not all do.<p>
<a name="ref 935 pri 0"><strong>concat(S1,S2,[S3...]):</strong> Concatenate strings S1 and S2. Returns a string that is the concatenation of all parameter strings. Must have at least 2 parameters but may have more. For example:<p>
<listing>
  concat(&quot;Value is &quot;, str(A,3,1), &quot; inches&quot;)
</listing>
<p>
If the float value A was 12.34 the result is &quot;Value is 12.3 inches&quot; which is a string.<p>
<a name="ref 1025 pri 0"><strong>file_exists(S1):</strong> Search for file specified by S1. Attempts to open the file whose name is specified by the string S1. The current directory and all directories specified in any <strong>Library_Path</strong> INI options or <strong>+L</strong> command line switches are searched. File is immediately closed. Returns a boolean value 1 on success and 0 on failure.<p>
<a name="ref 889 pri 0"><strong>str(A,L,P):</strong> Convert float A to a formatted string. Returns a formatted string representation of float value A. The float parameter L specifies the minimum length of the string and the type of left padding used if the string's representation is shorter than the minimum. If L is positive then the padding is with blanks. If L is negative then the padding is with zeros. The overall minimum length of the formatted string is abs(L). If the string needs to be longer, it will be made as long as necessary to represent the value.<p>
The float parameter P specifies the number of digits after the decimal point. If P is negative then a compiler-specific default precision is use. Here are some examples:<p>
<pre>
  str(123.456,0,3)   &quot;123.456&quot;
  str(123.456,4,3)   &quot;123.456&quot;
  str(123.456,9,3)   &quot;  123.456&quot;
  str(123.456,-9,3)  &quot;00123.456&quot;
  str(123.456,0,2)   &quot;123.46&quot;
  str(123.456,0,0)   &quot;123&quot;
  str(123.456,5,0)   &quot;  123&quot;
  str(123.000,7,2)   &quot; 123.00&quot;
  str(123.456,0,-1)  &quot;123.456000&quot; (platform specific)
</pre>
<p>
<a name="ref 891 pri 0"><strong>strcmp(S1,S2):</strong> Compare string S1 to S2. Returns a float value zero if the strings are equal, a positive number if S1 comes after S2 in the ASCII collating sequence, else a negative number.<p>
<a name="ref 897 pri 0"><strong>strlen(S1):</strong> Length of S1. Returns an integer value that is the number of characters in the string S1.<p>
<a name="ref 899 pri 0"><strong>strlwr(S1):</strong> Lower case of S1. Returns a new string in which all upper case letters in the string S1 are converted to lower case. The original string is not affected. For example <strong>strlwr(&quot;Hello There!&quot;)</strong> results in &quot;hello there!&quot;.<p>
<a name="ref 907 pri 0"><strong>substr(S1,P,L):</strong> Sub-string from S1. Returns a string that is a subset of the characters in parameter S1 starting at the position specified by the integer value P for a length specified by the integer value L. For example <strong>substr(&quot;ABCDEFGHI&quot;,4,2)</strong> evaluates to the string &quot;EF&quot;. If P+L&gt;strlen(S1) an error occurs.<p>
<a name="ref 902 pri 0"><strong>strupr(S1):</strong> Upper case of S1. Returns a new string in which all lower case letters in the string S1 are converted to upper case. The original string is not affected. For example <strong>strupr(&quot;Hello There!&quot;)</strong> results in &quot;HELLO THERE!&quot;.<p>
<a name="ref 988 pri 0"><strong>val(S1):</strong> Convert string S1 to float. Returns a float value that is represented by the text in S1. For example <strong>val(&quot;123.45&quot;)</strong> is 123.45 as a float.<hr>
<a name="ref 1107 pri 0"><a name="ref 812 pri 0"><center><h3><a name="section 7.2">
Section 7.2<br>Language Directives</h3></center>
The POV Scene Language contains several statements called <strong>language  directives</strong> which tell the file parser how to do its job. These directives can appear in almost any place in the scene file - even in the middle of some other statements. They are used to include other text files in the stream of commands, to declare identifiers, to define conditional or looped parsing and to control other important aspects of scene file processing.<p>
Each directive begins with the hash character <a name="ref 1108 pri 0"><strong>#</strong> (often called a number sign or pound sign). It is followed by a keyword and optionally other parameters.<p>
In versions of POV-Ray prior to 3.0, the use of this <a name="ref 1108 pri 1"><strong>#</strong> character was optional. Language directives could only be used between objects, camera or light_source statements and could not appear within those statements. The exception was the <a name="ref 103 pri 4"><strong>#include</strong> which could appear anywhere. Now that all language directives can be used almost anywhere, the <a name="ref 1108 pri 6"><strong>#</strong> character is mandatory.<p>
The following keywords introduce language directives.<p>
<pre>

<a href="pov3001c.htm#ref 1109 pri 8">#break</a>              <a href="pov3001c.htm#ref 1110 pri 0">#default</a>            <a href="pov3001c.htm#ref 1111 pri 4">#statistics</a>
<a href="pov3001c.htm#ref 1112 pri 7">#case</a>               <a href="pov3001c.htm#ref 1113 pri 0">#else</a>               <a href="pov3001c.htm#ref 1114 pri 0">#switch</a>
<a href="pov3001c.htm#ref 1115 pri 1">#debug</a>              <a href="pov3001c.htm#ref 1116 pri 0">#end</a>                <a href="pov3001c.htm#ref 725 pri 0">#version</a>
<a href="pov3001c.htm#ref 1050 pri 0">#declare</a>            <a href="pov3001c.htm#ref 1117 pri 3">#render</a>             <a href="pov3001c.htm#ref 1118 pri 5">#warning</a>


Earlier versions of POV-Ray considered the keyword
<a name="ref 1119 pri 7"><strong>#max_intersections</strong> and the keyword <a name="ref 1120 pri 7"><strong>#max_trace_level</strong> to
be language directives but they have been moved to the
<a name="ref 826 pri 8"><strong>global_settings</strong> statement. Their use as a directive still works
but it generates a warning and may be discontinued in the future.

</pre>
<hr>

<center>
<a href="pov3001c.htm">Next Section</a><br>
<a href="povray.htm#Table of Contents">Table Of Contents</a><br>
</center>
</body>
</html>
