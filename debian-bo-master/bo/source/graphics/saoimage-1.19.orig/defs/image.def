#ifndef lint
static char SccsImdefId[] = "%W%  %G%";
#endif

/* Module:	Image.def
 * Purpose:	Declare and initialize imaging parameters
 * Modified:	{0} Michael VanHilst	initial version		  19 May 1989
 *		{n} <who> -- <does what> -- <when>
 */

struct imageRec img = {
  NULL,		/* char *filename;	name of image file */
  -1,		/* int fd;		open handle of image file */
  0,		/* int headersize;	bytes at top used for header */
  NULL,		/* char *header;	stored header */
  SOP_Logo,	/* int file_type;	type of file (array,fits,iraf,etc) */
  ARR_None,	/* int storage_type;	file storage (short, real, etc) */
  0,		/* int bytepix;		number of bytes for pixel of data */
  1,		/* int nimage;		number of image if several in file */
  0,		/* int keep_data;	flag to keep file data in memory */
  0,		/* int byte_swap;	byte swap data after reading file */
  1,		/* int row_order;	row one as top or bottom */
  1,		/* int index_base;	0 or 1 based index */
  0,		/* int rotate_code;	rotation to apply */
  SOP_ZoomNone,	/* int block_type;	type of blocked file reading */
  0,		/* int filecols;	dimensions of image file */
  0,		/* int filerows; */
  0, 0,		/* int fiX1, fiX2;	file subsection selection */
  0, 0,		/* int fiY1, fiY2; */
  0.0,		/* double ficenX;	center of subsection used */
  0.0,		/* double ficenY; */
  1,		/* int fiblock;		base file to image blocking select */
  0,		/* int dispcols;	initial display window size */
  0,		/* int disprows; */
  0,		/* int dispfix;		display size was specified */
  1,		/* int keepfilebuf;	flag to keep file format data */
  0,		/* int fdblock;		file to disp blocking */
  0.0,		/* double fdcenX;	display center in file coord */
  0.0,		/* double fdcenY; */
  1024,		/* int bufmax;		limit of buffer size (square) */
  1,		/* int buffix;		flag to prevent its being readjusted */
  512,		/* int dispxmax;	limits of display window size */
  512,		/* int dispymax */
  128,		/* int dispmin;		(2 max's but symmetric min) */
  -1,		/* int energy;		xray image energy filter (bitwise) */
  SOP_Linear,	/* int scaling;		initial scaling selection */
  0,		/* int fscaled;		scale & bias used when file written */
  1.0,		/* double fscale;	scale given with file data */
  0.0,		/* double fbias;	offset given with file data */
  1.0, -1.0,	/* double fimin, fimax;	limits to clip image values (if a<b) */
  1.0,		/* double fiscale;	scale to fit data into short buffer */
  0.0,		/* double fibias;	offset to fit scaled data in buffer */
  0,		/* int fiscaled;	scale and offset used in file read */
  0, 0,		/* int pmax, pmin;	image value limits for scaling */
  0,		/* int pfix;		use limits as given or calculate */
  0,		/* int imtoolWZT;	imtool scaling type */
		/* double imtoolwcs[6];	iraf imtool WCS coordinates */
  1.0, 0.0, 0.0, 1.0, 0.0, 0.0,
   /* fX=((imgX+adj)*A+(imgY+adj)*C)+E,fY=((imgX+adj)*B+(imgY+adj)*D)+F */
  0.0,		/* double img_adj;	imtool to ximage coord offset */
  0.0, 0.0,	/* double imtoolWZ[2];	imtool greyscale Z values */
  0,		/* int fbconfig;	imtool frame configuration number */
  0,		/* int frame_number;	imtool frame number */
  0,		/* int imtool_200;	current image is from imtool */
  SOP_ZoomMax,	/* int panbox_zoomtype;	type of zoom from image to panbox */
  0.0		/* double zoom;		zoom factor */
};
