#ifndef lint
static char SccsGraphboxId[] = "%W%  %G%";
#endif

/* Module:	Graphbox.def
 * Purpose:	Declare and initialize color graph window parameters
 * Modified:	{0} Michael VanHilst	initial version		  19 May 1989
 *		{n} <who> -- <does what> -- <when>
 */

struct windowRec graphbox = {
 0,		/* Window ID;			window's nom de plume (ptr) */
 NULL,		/* Display *display;		display server handle */
 0,		/* int screen;			display screen number */
 0,		/* Window parent;		parent of this window */
 0,		/* unsigned int depth;		window depth */
 0,		/* int active;			flag to say window is there */
 0, 0,		/* int x, y;			upper left screen coords */
 0, 0,		/* unsigned int width, height;	window width (-1 border) */
 2,		/* unsigned int bdrwidth;	width of the border */
 4,		/* int bdrtotal;		width added by both borders */
 0, 0,		/* int rightx, lowery;		useful screen coordinates */
 1, 2,		/* int xzero, yzero;		u-l corner of drawing area */
 0, 0,		/* int xwidth, yheight;		size of drawing area */
 1,		/* int moored;			move window with disp box */
 0,		/* int data_size;		byte size of image data buf */
 {		/* XImage image;		for XPutImage */
   0, 0,	/*  int width, height;			0, 0 */
   0,		/*  int xoffset;			0 */
   0,		/*  int format;				XYBitmap, XY/ZPixmap */
   NULL,	/*  char *data;				NULL */
   LSBFirst,	/*  int byte_order;			LSBFirst */
   8,		/*  int bitmap_unit;			8 */
   LSBFirst,	/*  int bitmap_bit_order;		LSBFirst */
   8,		/*  int bitmap_pad;			8 */
   0,		/*  int depth;				1 or runtime set */
   0,		/*  int bytes_per_line;			0 */
   8,		/*  int bits_per_pixel;			1 or 8 */
   0, 0, 0,	/*  unsigned long red_mask, green_mask, blue_mask; runtime */
   NULL,	/*  char *obdata;			NULL */
   { 0 } },	/*  { struct func f };			{ NULL } */
 NULL,		/* Visual *visual;		visual type */
		/* unsigned long valuemask;	mask to set attributes */
 CWBackPixel | CWBorderPixel | CWColormap | CWCursor | CWEventMask,
 {		/* XSetWindowAttributes attrs;	for XCreateWindow */
   0,		/*  Pixmap background_pixmap;		CWBackPixmap */
   0,		/*  unsigned long background_pixel;	CWBackPixel */
   0,		/*  Pixmap border_pixmap;		CWBorderPixmap */
   0,		/*  unsigned long border_pixel		CWBorderPixel */
   0,		/*  int bit_gravity;			CWBitGravity */
   0,		/*  int win_gravity;			CWWinGravity */
   0,		/*  backing_store;			CWBackingStore */
   0,		/*  unsigned long backing_planes;	CWBackingPlanes */
   0,		/*  unsigned long backing_pixel;	CWBackingPixel */
   0,		/*  Bool save_under;			CWSaveUnder */
		/*  long event_mask;			CWEventMask */
   ButtonPressMask | ButtonReleaseMask | ExposureMask | KeyPressMask |
   ButtonMotionMask | StructureNotifyMask,
   0,		/*  long do_not_propogate_mask;		CWDontPropagate */
   0,		/*  Bool override_redirect;		CWOverrideRedirect */
   0,		/*  Colormap colormap;			CWColormap */
   0 },		/*  Cursor cursor;			CWCursor */
 {	 	/* XSizeHints hints;		for XSetNormalHints */
   		/*  long flags;				defined fields */
   USPosition | USSize | PMinSize,
   0, 0,	/*  int x, y;				USPosition PPosition */
#ifdef HGRAPH
   /* basic size for horizontal graph (width and height are fit to font) */
   516, 84,	/*  int width, height;			USSize PSize */
   404, 69,	/*  int min_width, min_height;		PMinSize */
#else
   /* vertical graph is chosen if height > width, else horizontal is use */
   /* basic size for vertical color graph (width is fit to font at runtime) */
   143, 550,	/*  int width, height;			USSize PSize */
   123, 300,	/*  int min_width, min_height;		PMinSize */
#endif

   0, 0,	/*  int max_width, max_height;		PMaxSize */
   0, 0,	/*  int width_inc, height_inc;		PResizeInc */
   { 0 },	/*  { int min_aspect.x, min_aspect.y }	PAspect */
   { 0 } }	/*  { int max_aspect.x, max_aspect.y }	 x/y=ratio */
};
