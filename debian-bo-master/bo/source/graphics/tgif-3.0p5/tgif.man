.\"@(#)$Header: /n/opus/u/guest/william/src/tgif/v3/RCS/tgif.man,v 3.0 1996/05/06 16:12:23 william Exp $
.TH TGIF n "Version 2.16 Patchlevel 11 and Above" "Tgif"
.\"
.SH NAME
.\"
\fItgif\fR \- Xlib based interactive 2-D drawing facility under X11.
Supports hierarchical construction of drawings and easy navigation between
sets of drawings.  It can also be used to launch applications.  It's also
a hyper-graphics (or hyper-structured-graphics) browser on the World-Wide-Web.
.\"
.SH SYNOPSIS
.\"
.B tgif
[\fB-display\fR displayname]
[\fB-fg\fR <color>]
[\fB-bg\fR <color>]
[\fB-bd\fR <color>]
[\fB-rv\fR]
[\fB-nv\fR]
[\fB-bw\fR]
[\fB-cwo\fR]
[\fB-hyper\fR]
[\fB-geometry\fR <geom>]
[\fB=<geom>\fR]
[\fI<file>\fR[.\fIobj\fR]]
.PP
or
.PP
.B tgif
\fB-print\fR
[\fB-eps\fR]
[\fB-p\fR]
[\fB-ps\fR]
[\fB-f\fR]
[\fB-text\fR]
[\fB-gray\fR]
[\fB-adobe\fR | -adobe=<number>/<number>]
[\fB-page <number>\fR]
[\fB-print_cmd "<command>"\fR]
[\fB-one_file_per_page\fR]
[\fB-pepsc\fR]
[\fB-bop_hook "<string>"\fR]
[\fB-eop_hook "<string>"\fR]
[\fB-o\fRdir]
[\fIfile1\fR \fIfile2\fR ...]
.\"
.SH DESCRIPTION
.\"
\fITgif\fR is an interactive drawing tool that allows the user to draw and
manipulate objects in the X Window System.  Tgif runs interactively in
the first form.  In the second form, tgif just prints files without
opening windows or fonts, and it is compatible with
the obsoleted \fIprtgif\fR.
.PP
In the first form, the command line arguments
\fI-fg\fR, \fI-bg\fR, and \fI-bd\fR specify
the foreground, background, and border colors, respectively.
The command line argument \fIfile\fR
specifies a file or an URL (only Uniform Resource Locator that specifies
a file on a HTTP or FTP server are supported) of
objects to be initially edited by tgif.
(For a more detailed description of URL, the reader is referred to the
World-Wide-Web page, titled "A Beginner's Guild to HTML", located at
<URL:http://www.ncsa.uiuc.edu/General/Internet/WWW/HTMLPrimer.html>.)
If \fI-rv\fR (or \fI-nv\fR) is specified, tgif will come up
in reverse-video (or normal-video) mode.
If \fI-bw\fR is specified, tgif will come up in the black and white mode.
If \fI-cwo\fR is specified, only the canvas window (see TGIF SUBWINDOWS
section below) will be displayed.
If \fI-hyper\fR is specified tgif will be started in the \fIhyperspace\fR mode
(see HYPERSPACE section below).
This has the same effect as setting the Tgif*CanvasWindowOnly X default to true.
The default is false.
Tgif is purely based on \fIXlib\fR.
It is tested under X11R6, and
it requires a 3 button mouse.
.PP
In the second form, tgif prints \fIfile1.obj\fR, \fIfile2.obj\fR,
etc.  (generated by \fItgif\fR)
into PostScript(TM) page description files
and pipes them to \fIlpr\fR if none of the
\fB-eps\fR, \fB-p\fR, \fB-ps\fR, \fB-f\fR, or \fB-text\fR options
are not specified;
in this case, any other command line options are sent to \fIlpr\fR.
A symbol file (see descriptions below) can also be printed by
specifying the \fI.sym\fR extension explicitly.
Only non-color printing is supported.
.PP
In the second form,
if the \fB-eps\fR or the \fB-p\fR option is specified,
tgif generates an Encapsulated PostScript file in \fIfile.eps\fR;
this file is supposed to be included in a LaTeX file through the
\\psfig, \\epsf, or \\psfile construct (see the LATEX FIGURE FORMATS section
below).
If the \fB-ps\fR or the \fB-f\fR option is specified,
it generates a PostScript file in \fIfile.ps\fR;
this file can be printed to a PostScript printer with lpr.
If the \fB-text\fR option is specified,
it generates a text file in \fIfile.txt\fR;
the text file contains all visible text and can be fed to a spell checker.
(Note that if any of the \fB-eps\fR, \fB-p\fR, \fB-ps\fR,
\fB-f\fR, or \fB-ftext\fR options are specified,
any other command line options are ignored.)
Using the \fI-gray\fR option has the same effect as setting the
Tgif*UseGrayScale X default to true (see the X DEFAULTS section below).
Using the \fI-adobe\fR or the \fI-adobe=<number>/<number>\fR
option has the same effect as specifying the
Tgif*UsePsAdobeString X default.
Using the \fI-page\fR option causes a specified page to be printed.
Using the \fI-print_cmd\fR option has the same effect as specifying the
Tgif*PrintCommand X default.
Using the \fI-one_file_per_page\fR option causes each page to be
printed into a separate file.
Using the \fI-pepsc\fR (PreserveEPSComment) option has the same effect as
setting the Tgif*StripEPSComment X default to false.
Using the \fI-bop_hook\fR and -fI-eop_hook\fR options have the same effect
as specifying the Tgif*PSBopHook and Tgif*PSEpsHook X defaults.
If the \fI-o\fR option is not specified, the output file (eps, ps, or txt)
goes into the same directory as the input file.  If \fI-o\fRdir
is specified, the output file goes into the directory specified
by \fIdir\fR.
.PP
Please note that only running tgif interactively can generate X11 bitmap,
X11 pixmap, GIF, or color PostScript files.
.\"
.SH BASIC FUNCTIONALITIES
.\"
Primitive objects supported by tgif
are rectangles, ovals, rounded-corner rectangles, arcs,
polylines, polygons, open-splines, closed-splines, text, X11 bitmaps,
some specific forms of X11 pixmaps, and Encapsulated PostScript(TM).
Objects can be grouped together to form a \fIgrouped\fR object.
A primitive or a grouped object can be made into an \fIicon\fR object or a
\fIsymbol\fR object through user commands.
.PP
Tgif objects are stored in two types of files.  A file with a
.I \.obj
extension (referred to as an \fIobject\fR file)
is a file of objects, and a file with a
.I \.sym
extension (referred to as a \fIsymbol\fR file)
specifies a ``building-block'' object.
A \fIteleport\fR mechanism is provided to \fItravel\fR among the .obj files.
A building-block object consists of the
\fIrepresentation\fR part and the \fIdefinition\fR
part (which can be empty) of the object.
Tgif supports the ``bottom-up'' construction of hierarchical
drawings by providing the capability to ``instantiate'' a
building-block object in a drawing.  Tgif also supports the ``top-down''
specification of drawings by allowing the user to make any
object a \fIrepresentation\fR
of an un-specified subsystem.
Both types of files are stored in the
form of Prolog facts.  Prolog code can be written to interpret
the drawings!  (It is left to the user to produce the code.
See the PROLOG/C TESTDRIVE section for more details.)
Prolog engines will be referred to as
\fIdrivers\fR in the sections to follow.  (Other types of drivers
are also allowed, e.g., written in C.)
.PP
Text based \fIattributes\fR can be attached to any non-text object.
Attributes specified in the representation part of a
building-block object are non-detachable when such an object is instantiated.
See ATTRIBUTES section for details.
.PP
Tgif can generate output in four different formats.
By default, the output is in the PostScript(TM) format (color PostScript
is supported), and it is generated into a file named
/tmp/Tgifa* (produced by mktemp() calls) where * is a number;
this file is piped to lpr.  This takes place when the
laser-printer icon is displayed in the Choice Window (see below
for the naming of tgif windows).
This output can be redirected to a file with a
.I \.ps
extension.  This takes place when the \fIPS\fR icon is displayed.
When the \fILaTeX\fR (or \fIEPSI\fR) icon is displayed, the output
is generated into a file with a
.I \.eps
extension.  This file is in the Encapsulated PostScript (or Encapsulated
PostScript Interchange) format;
it can be included in a LaTeX document with the
\fI\\psfig\fR or the \fI\\epsf\fR construct; this will be discussed later.
The only difference between the EPS and EPSI formats is that an EPSI
file contains a preview bitmap.  However, it takes time to generate the
preview bitmap.  If the EPS/EPSI file is to be incorporated into some
tool that does not know how to use the preview bitmap, time can be saved
by not using the EPSI format.
When the \fIT\fR icon is displayed, the output generated into a file with a
.I \.txt
extension.  This is a text file containing all visible text;
it can be fed to a spell checker.
When the \fIx11bm\fR (X11 bitmap) icon is displayed in the
Choice Window and color output is \fInot\fR selected,
tgif generates the output with the
.I \.xbm
extension; the output is in the X11 bitmap format.
However, if the x11bm icon is displayed in the
Choice Window and color output \fIis\fR selected (through the ^#k
keyboard command -- ^ denotes the <Control> and # denotes the <Meta> key),
then tgif generates the output with the
.I \.xpm
extension, and the output is in the X11 pixmap format
(the version of this XPM format depends on the settings of the
XPmOutputVersion X default).
X11 bitmap files, certain forms of X11 pixmap files
(such as the one generated by tgif; see the section on X11 PIXMAP
for details), GIF files, and Encapsulated PostScript (EPS) files
can be \fIimported\fR into tgif and be represented
as tgif primitive objects.
.PP
Tgif drawings are supposed to be printed on letter size paper (8.5in by 11in).
Both landscape and portrait page styles are supported by tgif.
Reduction (or magnification) can be controlled by the #% keyboard
command to set the reduction/magnification.  If the compiler
flag -DA4PAPER is defined (in Imakefile or Makefile.noimake),
then the output is supposed to be printed on A4 papers (which
has approximate dimensions of 8.25in by 11.7in).
.\"
.SH GRAPHICAL OBJECTS
.\"
An object in an \fIobject\fR (\fI.obj\fR) file can be a primitive object,
a grouped object, or an \fIicon\fR object.
A \fIsymbol\fR (\fI.sym\fR) file can have any number of objects allowed in an
object file and exactly one \fIsymbol\fR object.
(Recall that a symbol file specifies a building-block
object.)  The symbol object in a symbol file is the representation
part of the building-block object, and the rest of the
symbol file is the definition
part of the building-block object.  The symbol object is highlighted
with a dashed outline to distinguish it from the rest of
the objects.  When a building-block object is instantiated,
the symbol part of the file is copied into the graphics editor, and it
becomes the icon for the building-block object.
.PP
All objects in tgif can be moved, duplicated, deleted, rotated, 
and flipped.  (However, flipping text objects horizontally will
cause the text justification to change, and flipping text objects
vertically will usually cause the text object to move.)
All objects, except text and rigid icon objects, can be stretched
(scaled).  (See the TGIF SUBWINDOWS section for the definition of rigid
icon objects.)
.PP
Tgif supports 32 fill patterns, 32 pen patterns, 7 default line widths, 4 line
styles (plain, head arrow, tail arrow, double arrows) for
polylines and open-splines, 9 dash patterns,
3 types of text justifications, 4 text
styles (roman, italic, bold, bold-italic), 11 text sizes
(8, 10, 12, 14, 18, and 24 for the 75dpi fonts and
11, 14, 17, 20, 25, and 34 for the 100dpi fonts), 5 fonts (Times, Courier,
Helvetica, New-Century-Schoolbook, Symbol), and 11 default colors (magenta,
red, green, blue, yellow, pink, cyan, cadet-blue, white, black,
dark-slate-gray).
Only right-angle rotations are supported.
.PP
Most commands in tgif can either be activated by a
popup menu or by typing an appropriate
non-alphanumeric key.  All operations that change any object can be undone
and the redone.  Commands such as zoom, scroll, change fonts while no
text objects are selected, etc. are not undoable.  The undo/redo
history buffer size can be set using the Tgif*HistoryDepth X default.
.\"
.SH TGIF SUBWINDOWS
.\"
The tgif windows are described below.
.TP
.I Top Window
Displays the current domain and the
name of the file tgif is looking at.  Mouse clicks
and key presses have no effect.
.TP
.I Menubar Window
This window is right under the Top Window.
Pull-down menus can be activated from it with any mouse buttons.
Key presses have no effect.  If HideMenubar() is selected from the Layout Menu,
this window becomes invisible.  If ShowMenubar() is selected from the
Layout Menu (which can be activated from the Canvas Window below), this
window becomes visible.
.PP
.RS
The View, Text, and Graphics pull-down menus are cascading menus and can
not be \fIpinned\fR (see the \fIPopup Menus\fR subsection below for a
description).
.RE
.TP
.I Message Window
This is right under the Menubar Window on the left.
It displays tgif messages.
Clicking the left mouse button
in this window scrolls
the messages towards the bottom, clicking the right mouse
button scrolls towards
the top, and clicking or dragging the middle mouse button scrolls
to the location in the
message history depending on where the mouse is clicked.
If the <Shift> (or <Control>) key is held down when clicking the
left/right mouse button, it scrolls right/left.
.TP
.I Panel (Choice) Window
This is the window to the right of the Message Window, and it
contains a collection of icons (not to be confused with the tgif icon objects)
reflecting the current state of tgif.
In top/bottom, left/right order, it
displays the current drawing mode, the
page style (portrait/landscape), edit (see below),
print mode, zoom factor, constrained/unconstrained move (and stretch) mode,
radius for rounded-corner rectangles,
text rotation, page number or row/column, page layout mode
(stacked or tiled), horizontal alignment (L C R S -),
vertical alignment (T M B S -),
font, text size, vertical spacing between lines of text within
the same text object, text justification, dash pattern,
line style, polyline or spline, line width, fill pattern, pen pattern,
color, and special (see below).
Key presses have no effect in this window.
.PP
.RS
In addition to displaying the current state of tgif, the icons in the
Choice Window can also be used to change the current state.
Each icon is associated with a particular state variable of tgif.
Clicking the left mouse button on top of an icon cycles the
state variable associated with the icon forward; clicking the right mouse
button cycles the state variable backwards.  Dragging the middle mouse button
on top of an icon usually generates a popup menu which corresponds to
an entry in the Main Menu for the Canvas Window below.
(The ``edit'' and ``special'' icons mentioned above are dummy icons
that allow the ``edit'' and ``special'' menus to be
accessed in the Choice Window.  They do not respond to left and right
mouse clicks.)
The response to the dragging of the middle mouse button is different for
the zoom, radius, and vertical spacing icons.  Dragging the mouse
left or up increases the zoom or decreases the radius or vertical spacing;
dragging the mouse right or down has the opposite effect.
.RE
.PP
.RS
If there are objects selected in the
canvas window, then the action of the mouse will cause the selected
objects to change to the newly selected mode; note that in this
case, the current choice won't change if the middle mouse button
is used.
.RE
.PP
.RS
The settings of the horizontal and vertical
alignments determine how objects (or vertices) align with
each other when the ^l keyboard command is issued,
how each individual object (or vertex) aligns with the grids
when the ^t keyboard command is issued,
how objects or vertices distribute spatially with respect to each other when
the #l keyboard command is issued,
and how each icon replaces the old icon when the ^#u
keyboard command is issued.  The horizontal
alignments are left (L), center (C), right (R), space (S), and ignore (-).
The vertical alignments are top (T), middle (M), bottom (B), space (S), and
ignore (-).  In aligning operations, the space (S) and the ignore (-)
settings have the same effect.  The space settings are used to distribute
objects such that the gaps between any two neighboring objects are equal.
In vertex mode, any non-ignore setting will cause the selected vertices
to be spaced out evenly.
The best way to understand them is to try them out.
.RE
.PP
.RS
The text vertical spacing determines the vertical distance to advance
when a carriage return is pressed during text editing.  If the user
tries to set the
value too negative, such that the next line is exactly at
the same position as the current line, such a setting will not be
allowed (this distance depends on the current font and font size).
.RE
.TP
.I Canvas Window
This is the drawing area.  The effects of the actions of the mouse is
determined by the current drawing mode.  Normally, dragging the right mouse
button will generate the Mode Menu.  The drawing modes are (in order,
as they appear in the Mode Menu) select, text, rectangle,
oval, polyline (open-spline), polygon (closed-spline),
arc, rounded-corner rectangle, freehand polyline (open-spline),
and select vertices.  When drawing a rectangle, an oval, or a rounded-corner
rectangle, if the <Shift>
key is held down, a square, a circle, or a rounded-corner square is drawn.
Dragging the middle mouse button will generate the Main Menu.
.PP
.RS
In the select mode, left mouse button selects, moves, stretches,
and reshapes objects (double-click will ``de-select'' all selected objects
in vertex mode).  When an object is selected, it is highlighted by
little squares at the corners/vertices (using the Tgif*HandleSize X default,
the sizes of the handles can be customized).  Dragging one of the little squares
stretches/reshapes the selected object.  If one wants to move the selected
object, one should not drag the little squares.  Instead, one should
drag other parts of the object.  For example, if the object is a
hollow rectangle (the fill is NONE and the pen is not NONE), in order to select
the rectangle, one would need to click on the outline of the rectangle
with the left mouse button.  If one would like to move the rectangle, one
would need to drag the outline of the rectangle with the left mouse button.
If the object is a filled rectangle (fill is not NONE), the one can
click inside the rectangle to select it and
drag anywhere inside the rectangle to move it.
.RE
.PP
.RS
Holding down the <Shift> key and clicking the left mouse
on an object which is not currently selected will add the
object to the list of already selected objects.  The same
action applied to an object which is already selected will cause
it to be de-selected.
When stretching objects (not reshaping poly-type objects),
holding down the <Shift> key \fIafter\fR stretching is initiated results in
proportional stretching being activated (basically, a scale operation
is being performed).
Text and rigid icon objects can not be stretched or scaled.
(Rigid icon objects are icons that do not have an inherited
attribute whose name is empty and whose value is the string "not_rigid".
Rigid icon objects inside a non-rigid icon object are considered non-rigid.)
Clicking the middle mouse button
while the <Shift> key is held down will activate
the \fIteleport\fR (or \fItravel\fR), the \fIlaunch\fR,
or the \fIexecute internal command\fR mechanism.  See the sections on
TELEPORT, LAUNCH APPLICATIONS, and INTERNAL COMMANDS for details.
Teleporting has precedence over launching, which has precedence over
executing an internal command.
The arrow keys can also be used to move selected objects.  However,
if no objects
are selected, using the arrow keys will scroll the drawing area by a small
amount, and using the arrow keys when <Control> key is held down will
scroll a screen full.
.RE
.PP
.RS
In the select vertices mode, left mouse button selects and moves
vertices.  Only the top-level polyline/open-spline and polygon/closed-spline
objects which are selected when the vertex mode is activated
are eligible for vertex operations.  In this mode, all
eligible objects have their vertices highlighted with squares.
When a vertex is selected (using similar mechanism as selecting
objects described above), it is doubly highlighted with a '+' sign.
Operations available to these doubly highlighted vertices are move, delete,
align (with each other), distribute (space them equally), and align to grid.
The arrow keys can also be used to move selected vertices.
.RE
.PP
.RS
Objects can be locked (through the #< command).  Locked object are shown
with gray handles, and they can not be moved, stretched, flipped,
or rotated.  When objects are grouped, the resulting grouped object
will also be locked if any one of it's constituents is locked.
Locked objects can have their properties, such as color, font, pen, etc.,
changed; furthermore, they can be deleted.
.RE
.PP
.RS
If the current move/stretch mode is of the constrained type (activated
and deactivated by the #@ command), top-level polylines will have the
following behavior.  In a move operation, if both endpoints of a
polyline lie inside the objects being moved, then the whole polyline
is moved; otherwise, if only one endpoint falls inside the objects
being moved, then that endpoint is moved.  The vertex that is the
neighbor of the moved endpoint may also be moved either horizontally
or vertically.  If the last line segment is horizontal or vertical,
then the neighbor vertex may be moved so that the direction of the last
line segment is maintained.
In a stretch (not reshape)
operation, if an endpoint of a polyline lies inside the objects being moved,
that endpoint will be moved.  The vertex that is the neighbor of
the moved endpoint will also be moved in the same manner as described above.
.RE
.PP
.RS
When the drawing mode is set to
text (a vertical-bar cursor is shown),
clicking the left mouse button causes selected text to go into edit mode.
Clicking the left mouse button while the <Shift> key is held down highlights
substrings of the text.  Double-clicking causes a word to be selected.
In edit mode,
key presses are treated as text strings being
inputed, and arrow keys are used to move the current input
position.  If a key press is preceded by an <ESC> key,
then the character's bit 7 is turned on.  This allows
non-ASCII (international) characters to be entered.  One can use xfd(1) to
see what the corresponding international character is for an ASCII character.
For the Symbol font, symbols such as the integral, partial derivative, and
copyright symbols can all be found in this range.
There are some characters
that are supported by X11 but not by PostScript; these characters
are not accepted by tgif.
If the text being edited is an attribute of a object, <Meta><Tab>
will move the cursor to the next visible attribute and <Shift><Tab> will
move the cursor to the previous visible attribute.
.RE
.PP
.RS
If the drawing mode is set to draw polygons (not closed-splines) and
if the <Shift> key is held down, the rubber-banded polygon will be self-closing.
.RE
.PP
.RS
The freehand drawing mode can be used to draw polylines and open splines.
All intermediate points are specified by moving the mouse (as opposed to
clicking the mouse buttons as in the polyline mode).  The
second end point is specified by releasing the mouse button.
.RE
.PP
.RS
In all drawing modes (other than the text mode), pressing the <ESC>
key cancels the drawing of the current object.
.RE
.PP
.RS
Middle mouse button always generates the main
tgif popup menu.  Holding down the <Shift> key and clicking the right
mouse button will change the drawing mode to \fIselect\fR.
Key presses with the <Control> or <Meta> key held down
(referred to as \fInon-alphanumeric\fR key presses since
they can also generate control characters)
are treated as commands, and their
bindings are summarized in the next section.  Users can also
define single key commands to emulate the functions of the
non-alphanumeric key commands.
The SHORTCUTS section will describe the details.
.RE
.TP
.I Scrollbars
Clicking the left mouse button in the vertical/horizontal scrollbar causes the
canvas window to scroll down/right by a small distance; clicking the
right mouse button has the reverse effect.  (The scrollbars in the popup
windows for selecting file names and domain names behave similarly.)
Clicking with the <Shift> key held down will scroll a window full.
Clicking or dragging the middle button will cause the page to scroll
to the location which corresponds to the gray area in the scrollbars.
(Tgif insists that the left top corner of the Canvas Window is at
a distance that is a nonnegative multiple of some internal units
from the left top corner of the actual page.)
.TP
.I Rulers
.br
They track the mouse location.
Mouse clicks and key presses have no effect.
When the page reduction/magnification is set at 100%,
the markings in the rulers correspond to centimeters when the metric
grid system is used, and they correspond to inches when the English
grid system is used.  When the page reduction/magnification is not
set at 100%, the markings do not correspond to the above mentioned
units any more.
.TP
.I Interrupt/Hyperspace Window
.br
This window is right below the Message Window and to the left of the
horizontal ruler.  When the Tgif*IntrCheckInterval X default has a
positive value, an interrupt icon is visible when the Canvas Window
is being redrawn.  If the user clicks on this window when the
interrupt icon is visible, tgif aborts the repainting of the objects.
If this is done when a file is being opened (either through Open()
or Push()), the drawing of objects is stopped, but the reading of
the file continues (reading of the file is not aborted).
.PP
.RS
If tgif is currently in the \fIhyperspace\fR mode (please see the HYPERSPACE
section below for more details), a space ship icon will be displayed when
the interrupt icon is not being displayed.  Clicking any button in this
window will switch tgif in and out of the hyperspace mode.
.RE
.TP
.I Status Window
This window is below the horizontal scrollbar.  It shows what action
will be taken if a mouse button is depressed.  When a menu is pulled down
or poped up, this window shows what action will be taken if a menu item
is selected.  It also displays miscellaneous status information.
Mouse clicks and key presses have no effect.
If HideStatus() is selected from the Layout Menu,
this window becomes invisible.  If ShowStatus() is selected from the
Layout Menu, this window becomes visible.
.PP
.RS
By default, when this window is displaying mouse button status,
right-handed mouse is assumed.  Setting the Tgif*ReverseMouseStatusButtons
X default to true will reverse the status (as if a left-handed mouse is used).
.RE
.TP
.I Popup Menus
.br
When a menu is poped up by a mouse drag, the menu can be \fIpinned\fR
if it is dragged far enough horizontally
(the distance is determined by the
setting of the Tgif*MainMenuPinDistance X default).
Clicking the right mouse
button in a pinned menu will cause it to disappear.  Dragging
the left mouse button in a pinned menu will reposition the menu.
Clicking the middle mouse button in it will activate the clicked item.
.\"
.SH NON-ALPHANUMERIC KEY BINDINGS
.\"
Most operations that can be performed in tgif can be activated
through non-alphanumeric keys (a few operations can only be
activated through popup menus or shortcut keys).
This section summarizes the operations that can be activated
by a key stroke with the <Control> and/or the <Meta> key held down.
``^'' denotes the <Control> key and ``#'' denotes the <Meta> key
in the following description.  (The ``\fIkeys.obj\fR'' file, distributed
with tgif, also summarizes the same information, but it is organized
differently.  This file can be viewed with tgif, and if installed properly,
it can be found in the same directory as the ``tgificon.obj'' file,
mentioned in the FILES section of this document.)
.PP
  ^a	select all
  ^b	send selected objects to the back
  ^c	change domain
  ^d	duplicate selected objects
  ^e	save/restore drawing mode
  ^f	send selected objects to the front
  ^g	group selected objects (the grouped object will be brought to the front)
  ^i	instantiate a building-block object
  ^k	pop back to (or return to) a higher level and close the symbol file
(reverse of ^v)
  ^l	align selected objects according to the current alignment settings
  ^n	open a new un-named object file
  ^o	open an object file to edit
  ^p	print the current page (or export in xbm, xpm, eps, or ps formats)
  ^q	quit tgif
  ^r	redraw the page
  ^s	save the current object/symbol file
  ^t	align selected objects to the grid according to the current alignment
  ^u	ungroup selected objects
  ^v	push into (or edit) the definition part of a building-block (icon)
object
  ^w	change the drawing mode to text
  ^x	delete all selected objects
  ^y	copy selected objects into the cut buffer
  ^z	escape to driver
  ^,	scroll left
  ^.	scroll right
  ^-	print the current page with a specified command

  #a	attach selected text objects to a selected non-text object as attributes
  #b	escape to driver
  #c	rotate selected objects counter-clockwise
  #d	decrement the grid size
  #e	send a token on a selected polyline
  #f	flash a selected polyline
  #g	show/un-show grid points
  #h	flip the selected objects horizontally
  #i	increment the grid size
  #j	hide the attribute names of the selected objects
  #k	change the drawing mode to select
  #l	distribute selected objects according to the current alignment
  #m	move/justify an attribute of a selected object
  #n	show all the attribute names of the selected objects
  #o	zoom out
  #p	import a .obj or a .sym file into the current file
  #q	change the drawing mode to polyline/open-spline
  #r	change the drawing mode to rectangle
  #s	escape to driver
  #t	detach all the attributes of the selected objects
  #u	undo
  #v	flip the selected objects vertically
  #w	rotate the selected objects clockwise
  #x	escape to driver
  #y	escape to driver
  #z	zoom in
  #9	create a user-specified arc (12 o'clock position is 0 degree)
  #0	update the selected objects according to current settings
  #,	scroll up
  #.	scroll down
  #-	show all the attributes of the selected objects
  #[	align the left sides of objects
  #=	align the horizontal centers of objects
  #]	align the right sides of objects
  #{	align the top sides of objects
  #+	align the vertical centers of objects
  #}	align the bottom sides of objects
  #"	make the selected polygon regular (fit the original bounding box)
  #%	set the percent print reduction (if < 100%) or magnification (if > 100%)
  #:	go to default zoom
  #`	zoom out all the way so that the whole page is visible
  #~	saved selected objects in a new file
  #;	cut and/or magnify a selected bitmap/pixmap object
  #_	abut selected objects horizontally
  #|	abut selected objects vertically
  ##	break up text objects into single character text objects
  #^	scroll to the origin set by SaveOrigin()
  #@	toggle between constrained and unconstrained move (stretch) modes
  #$	change the drawing mode to select vertices
  #&	align selected objects to the paper according to the current alignment
  #*	redo
  #(	import an Encapsulated PostScript file
  #)	scale selected objects by specifying X and Y scaling factors
  #<	lock the selected objects (can't be moved, stretched, flipped, or
rotated)
  #>	unlock the selected objects

 ^#a	add points to the selected poly or spline
 ^#b	change the text style to bold
 ^#c	change to center justified text
 ^#d	delete points from the selected poly or spline
 ^#e	change the drawing mode to rounded-corner rectangles
 ^#f	reverse-video the selected bitmap objects
 ^#g	toggle snapping to the grid points
 ^#h	hide all attributes of the selected objects
 ^#i	make the selected object iconic
 ^#j	make the selected icon object a grouped object
 ^#k	select color or black-and-white output
 ^#l	change to left justified text
 ^#m	make the selected object symbolic
 ^#n	make the selected symbol object a grouped object
 ^#o	change the text style to roman
 ^#p	change the text style to bold-italic
 ^#q	change the drawing mode to polygon/closed-spline
 ^#r	change to right justified text
 ^#s	save the file under a new name
 ^#t	change the text style to italic
 ^#u	update iconic representations of selected objects
 ^#v	change the drawing mode to oval
 ^#w	toggle between poly and spline
 ^#x	cycle among the various output file formats
 ^#y	paste from the cut buffer
 ^#z	change the drawing mode to arcs
 ^#.	import an X11 bitmap file
 ^#,	import an X11 pixmap file
 ^#-	toggle between English and Metric grid systems
.br
.\"
.SH SHORTCUTS
.\"
The user can define single character \fIshortcut\fR keys to emulate
the function of
the non-alphanumeric key presses to activate commands.
This is done through the use of the Tgif*ShortCuts X default.
(Please note that these shortcut keys are only active when
the drawing mode is \fInot\fR set to the text mode.)
The Tgif*ShortCuts consists of a list of items, each of which
specifies the bindings between
a key (may be case sensitive) and a command.  The items are
separated by blanks, and each item is interpreted as
follows.  It consists of two parts, KEY and COMMAND, which
are concatenated together with a ':' character.
The format of the KEY part is one of
\fI:<Key>x\fR, \fI!<Key>x\fR, or \fI<Key>x\fR (here the
character 'x' is used as an example; furthermore, the substring
\fI<Key>\fR must be spelled exactly the way it appears here).
The first 2 formats are
equivalent, they specify the \fIlower case\fR x; the 3rd
format specifies both the characters 'x' and 'X'.
The COMMAND part is a string that matches strings in tgif's popup menus
(exceptions are noted below).  This is illustrated by
the following example.  In the Edit menu, two of the entries are,
.PP
   "Delete	^x"
.br
   "SelectAll	^a"
.PP
which means that <Control>x activates and Delete() command,
and <Control>a activates the SelectAll() command.
Therefore, both Delete() and SelectAll() are valid names for the COMMAND part of
a shortcut specification.  To complete the example,
the following line can be used to bind the lower case 'x' to
Delete() and 'a' or 'A' to SelectAll():
.PP
   Tgif*ShortCuts:	!<Key>x:Delete() \\n\\
.br
   			<Key>a:SelectAll()
.PP
For more examples, please
see the sample X defaults file, tgif.Xdefaults, included in the tgif
distribution.
.PP
Here is a list of exceptions where the COMMAND does not match
a command name in a menu entry.  The left entry is a proper
COMMAND name, and the right is a list of strings that's shown
in popup menus which the COMMAND would correspond to.
.PP
   CyclePrintFormat()	Printer, LaTeXFig, RawPSFile, XBitmap, TextFile, EPSI, GIF/ISMAP
   ToggleBW/ColorPS()	BlkWhtPS, ColorPS
   ToggleGridSystem()	EnglishGrid, MetricGrid
   ToggleMapShown()	ShowBit/Pixmap, HideBit/Pixmap
   ToggleUseGrayScale()	UseGrayScale, NoGrayScale
   ToggleMoveMode()	ConstMove, UnConstMove
   ToggleShowMeasurement()	ShowMeasurement, HideMeasurement

   ToggleLineType()	(advances between different curved shapes)
   ScrollPageUp()	(scroll up a window full)
   ScrollPageDown()	(scroll down a window full)
   ScrollPageLeft()	(scroll left a window full)
   ScrollPageRight()	(scroll right a window full)
   FreeHandMode()	(change the drawing mode to freehand poly/open-spline)
   CenterAnEndPoint()	(move an endpoint of a polyline object to the center
of another object)
   ToggleNamedAttrShown(<x>=)	(toggle name shown for the attribute <x>)
   ToggleSmoothHinge()	(convert smooth to hinge and hinge to smooth points)
   ToggleShowMenubar()	ShowMenubar, HideMenubar
   ToggleShowStatus()	ShowStatus, HideStatus
   ToggleOneMotionSelMove()	OneMotionSelMove, ClickSelClickMove
   ToggleHyperSpace()	GoHyperSpace, LeaveHyperSpace
.br
.PP
In addition to the above list, the following are
also valid COMMAND names (having the obvious meaning):
ScrollLeft(), ScrollRight(), ScrollUp(), ScrollDown(),
SelectMode(), DrawText(), DrawBox(), DrawOval(), DrawPoly(),
DrawPolygon(), DrawRCBox(), DrawArc(), and SelectVertexMode().
.\"
.SH OBJECT NAMES
.\"
If an object contains an attribute (please see the ATTRIBUTES sections
below for details) whose name is the string \fI"name"\fR (case-sensitive),
the value part
of the attribute is the \fIname\fR of the object.  Subobject of a
composite object can be named using a \fIpath\fR, e.g.,
\fI<t>!<s1>!<s2>\fR, where \fI<t>\fR is the name of a top-level object
which directly contains \fI<s1>\fR which directly contains \fI<s2>\fR.
.PP
The following is \fInot fully\fR support, yet (only the \fI#<page>\fR
form is supported at this time).
Every object in a tgif file can be uniquely named using the notation
\fI#<page>!<path>\fR, where \fI<page>\fR can be a string that specifies the
name of a page or \fI#<number>\fR which specifies a page number.  The
\fI<path>\fR is described in the previous paragraph.  If an object \fIo1\fR
is referenced by another object \fIo2\fR within the same file 
(no file name or URL is specified before \fI#\fR) and \fI<page>\fR is
omitted, then \fIo1\fR must be on the same page as \fIo2\fR.
If a file name or URL is specified before \fI#\fR and \fI<page>\fR is
omitted, then \fIo1\fR must be on the first page.
.\"
.SH ATTRIBUTES
.\"
Attributes are text strings of the form \fIname=value\fR or \fIvalue\fR
which are attached to either the current drawing or any non-text objects.
An attribute attached to the current drawing is called a \fIfile attribute\fR;
otherwise, it is a \fIregular attribute\fR.
Attributes can be attached and detached from these objects
except in the following case:
.IP
Attributes appearing in the symbol object
in a building-block object file can not
be detached when the building-block object is instantiated.
These attributes are considered to be the ``inherited'' attributes
of the icon object.  (If it is really necessary to detach inherited
attributes of an icon object, the icon object
can be ``de-iconified'' by using UnMakeIconic() in the Special Menu
to make it a grouped object; then the attributes can be detached.)
.PP
A file attribute is always invisible.
For a regular attribute,
the user has control over which part of the attribute is displayed.
An entire attribute can be made invisible, or only its name
can be made invisible (accomplished through the commands under the
special menu, such as #m, #n, #j, #-, and ^#h).
.\"
.SH TELEPORT
.\"
Tgif provides the mechanism to travel between .obj and .sym files.
If the middle mouse button is clicked on an object with the
<Shift> key held down, tgif looks for an attribute named
\fIwarp_to\fR (by default) or \fIhref\fR of that object.
The only difference between \fIwarp_to\fR and \fIhref\fR is that
".obj" is automatically appended to the value of a \fIwarp_to\fR
attribute while the value of a \fIhref\fR attribute is taken as is.
(Please note that \fIwarp_to\fR is obsolete now.  It is still
supported for the sake of compatibility.)
If such an attribute is found, the value part of
the attribute is interpreted as the name of a .obj file to
\fItravel\fR to.
(If tgif is in the \fIhyperspace\fR mode, then clicking
the left mouse button has the same effect.)
If there are multiple \fIhref\fR attributes on the object,
but are in different colors, tgif will use the one that has
the same color as the current color appearing in the Choice Window.
If the current file is modified, the user
is prompted to save the file before traveling to the next file.
If there are multiple \fIhref\fR attributes on the object,
but are in different colors, tgif will use the one that has
the same color as the color appearing in the Choice Window.
If the value part of the \fIhref\fR attribute starts with the '/'
character, the value is treated as an absolute file name;
otherwise, it is treated as a relative file name.
.\"
.SH HYPERSPACE
.\"
Tgif provides a \fIhyperspace\fR mode to facilitate traveling
between .obj files.  The hyperspace mode is entered when
GoHyperSpace() is selected from the Navigate Menu.  When in
hyperspace, the little window below the Message Window will show
a little space ship.  The hyperspace mode is also automatically
entered when a remote URL is opened (unless the Tgif*AutoHyperSpaceOnRemote
X default is set to false).
.PP
In the hyperspace mode, certain objects are considered \fIhot-links\fR.
When the cursor is placed on top of these object, it will change from
a pointer to a hand to indicate that clicking on the left mouse button
will invoke some actions.
An object is a hot-link if it contains an attribute described in either
the TELEPORT, LAUNCH APPLICATIONS, or INTERNAL COMMANDS section.
.PP
The hyperspace mode is exited when the drawing mode is changes.
.\"
.SH LAUNCH APPLICATIONS
.\"
Tgif provides the mechanism to launch applications.
If the middle mouse button is clicked on an object with the
<Shift> key held down, tgif
looks for an attribute named \fIlaunch\fR (by default) of
that object.  If such an attribute is found, the value part of
the attribute is interpreted as a sh(1) command to execute.
Same color rule applies as described in the TELEPORT section above.
If the command ends with the '&' character, tgif forks itself (what
actual happens depends on whether the _BACKGROUND_DONT_FORK
compiler flag is defined or not at compile time) and
the command is executed by the child process; otherwise, popen()
is used to execute the command (in this case, if the command hangs,
there is no way provided to terminate the command, and
tgif will not be able to recover from it).
Within the command, values of other attributes of the same object can
be used.  The syntax is:  \fI$(attr)\fR, where \fIattr\fR is the name
of another attribute.

For example, if one wants to perform a man(1) function, one can draw
a box; enter a line of text "title=tgif"; enter another line of text
"launch=xterm -rw -e man $(title)"; select all three objects using ^a
keyboard command; attach the text strings to the box using #a keyboard
command; and launch the man(1) command by clicking the middle mouse button
on the box (or the text strings) withe the <Shift> key held down.
If one wants to be more fancy, the box can be replaced by an X11 pixmap
object; the 'launch' attribute can be made invisible; and the 'title'
attribute can be center justified and with its name hidden using the #m
keyboard command.

By default, launching of an application is disabled in \fIhyperspace\fR mode.
However, this can be overridden by the Tgif*AllowLaunchInHyperSpace X default
setting.
.\"
.SH INTERNAL COMMANDS
.\"
Tgif provides the mechanism to execute internal commands.
If the middle mouse button
is clicked on an object with the <Shift> key held down, tgif looks for an
attribute named \fIexec\fR (by default) of that object.  If such an
attribute is found, the value part of the attribute is interpreted as
a list of internal commands (separated by semicolor) to execute.
Same color rule applies as described in the TELEPORT section above.
A command usually takes the form:
.PP
.RS
<cmd_name> ( <arg1>, <arg2>, ..., <argN> )
.br
.RE
.br
.PP
An argument of a command can be a string argument or a numeric argument.
A string argument must be enclosed in double-quotes.  A numeric argument
can be a numerical value or a string of the form "$(\fIx\fR)", where \fIx\fR
is the name of another attribute (this form is referred as the
substitution form).  A string argument can also contain substitution form.
Please note that only one-level substitution are performed (the
collection of internal commands should be viewed as a simple
scripting language and \fInot\fR a declaration language).

When an attribute is referenced in an internal command, the attribute
name can be in the form, \fI<obj_name>.<string>\fR, where \fI<obj_name>\fR
must be in the form specified in the OBJECT NAMES section above
and \fI<string>\fR contains only alphanumeric characters and
the underscore ('_') character.

The following internal commands are supported:
.TP
.I launch(<attr_name>)
The value of the attribute specified by <attr_name> is interpreted as a
sh(1) command to execute.  Please see the LAUNCH APPLICATIONS section
above for more details.
.TP
.I exec(<attr_name>)
The value of the attribute specified by <attr_name> is interpreted as an
internal command to execute.  This is similar to a subroutine call.
Please note that the internal command is executed in the context of the
top-level which contain the attribute.
.TP
.I mktemp(<str>,<attr_name>)
This command makes a unique file name.
The <str> argument is a template string, e.g., "/tmp/TgifXXXXXX".
The result of mktemp is stored as the value of the attribute specified
by <attr_name>.
Please see the man pages of the C library function on mktemp for more details.
.TP
.I create_file_using_simple_template(<template>,<output>,<str>,<attr_name>)
The file specified by <template> is scanned for a line that matches <str>.
When such a line is found, that line is replaced by the value of the
attribute specified by <attr_name>.  The result is put into the file
specified as <output>.
.TP
.I update_eps_child(<eps_file_name>)
This only works if the object being executed is a composite object.
If the object has a component which is an imported EPS (Encapsulated
PostScript) object, it is replaced by the EPS file specified by
<eps_file_name>.  If the object does not contain an EPS subobject,
an EPS subobject is created.
.TP
.I update_xbm_child(<xbm_file_name>)
This only works if the object being executed is a composite object.
If the object has a component which is an imported XBM (X11 bitmap) object,
it is replaced by the XBM file specified by <xbm_file_name>.
If the object does not contain an XBM subobject, an XBM subobject is created.
.TP
.I update_xpm_child(<xpm_file_name>)
This only works if the object being executed is a composite object.
If the object has a component which is an imported XPM (X11 pixmap) object,
it is replaced by the XPM file specified by <xpm_file_name>.
If the object does not contain an XPM subobject, an XPM subobject is created.
.TP
.I flip_deck(<times>,<frames_per_second>,<style>)
This only works if the object being executed is a composite object
and all subobjects of the composite object are X11 bitmap or X11 pixmap
objects and have identical positions and sizes.
The <times> argument specifies the number of times the deck is flipped.
It can be a number or the string "infinite".
The <frames_per_second> argument must be a number between 1 and 60.
The <style> argument can be either "linear" or "ping_pong".
When this command is being executed, any mouse button click or key click
aborts command execution.
.TP
.I read_file_into_attr(<file_name>,<attr_name>)
This command reads a file into an attribute.
The <file_name> argument names a file, e.g., "/tmp/foo".
The content of the file is read as the value of the attribute specified
by <attr_name>.  If the file can not be opened for read, the attribute's
value is set to an empty string.
.TP
.I write_attr_into_file(<attr_name>,<file_name>)
This command writes the value of an attribute into a file.
The <file_name> argument names a file, e.g., "/tmp/foo".
The value of the attribute specified by <attr_name> is
written into <file_name>.
.TP
.I append_attr_into_file(<attr_name>,<file_name>)
This command appends the value of an attribute into a file.
The <file_name> argument names a file, e.g., "/tmp/foo".
The value of the attribute specified by <attr_name> is
appended into <file_name>.
.TP
.I select_obj_by_name(<obj_name>)
This command silently (no highlighting handles) selects an
object named <obj_name>.  Please see the OBJECT NAMES section
above for the specification of object names.
.TP
.I unselect_all_obj()
This command de-selects all selected objects.  If the select_obj_by_name()
command is used, this command must be used eventually.
.TP
.I move_selected_obj_relative(<dx>,<dy>)
This command moves the selected object by <dx> absolute units in the
x direction and <dy> absolute units in the y direction.
.TP
.I repeat(<cmd_attr_name>,<times>)
This command executes the internal command in the <cmd_attr_name> attribute
<times> times.
.TP
.I hyperjump(<attr_name>)
This command teleports to the file name or URL name found in the
<attr_name> attribute.
.TP
.I make_cgi_query(<dest_attr_name>,<url_name>,<list_attr_name>)
This command constructs an URL in the Common Gateway Interface (CGI)
format in the <dest_attr_name> attribute.
<url_name> names the CGI server script and <list_attr_name> names an attribute
whose value are comma-separated attribute names.  For example, if an
object has the following attributes:
.PP
.RS
.RS
attr_list=last_name,first_name
.br
last_name=Cheng
.br
first_name=Bill
.br
final_url=
.br
exec=make_cgi_query(final_url,
.br
    http://bourbon.cs.ucla.edu:8001/cgi-bin/test-cgi,
.br
    attr_list)
.RE
.PP
Executing this object will construct the following string in final_url:
.PP
.RS
http://bourbon:8001/cgi-bin/test-cgi?last_name=Cheng&first_name=Bill
.RE
.PP
An subsequent hyperjump(final_url) command can be invoked to execute the
corresponding
"test-cgi" CGI server script with the last_name and first_name arguments.
.PP
For a detailed description of CGI scripts, the reader is referred to the
World-Wide-Web page <URL:http://hoohoo.ncsa.uiuc.edu/cgi/overview.html>,
titled "The Common Gateway Interface".
.RE
.TP
.I wait_click(<cursor_name>,<grab>,<attr_name>)
This command displays the <cursor_name> cursor and waits for the user to
click a mouse button.
If <cursor_name> is the string \fINULL\fR (case-sensitive),
the cursor will not change.
If <Btn1> is clicked, the command terminates and
1 is placed in <attr_name>.  If <Btn2> is clicked, 2 is placed in <attr_name>,
etc.  If <grab> set to \fITRUE\fR (case-sensitive), then the mouse is
grabbed by tgif.  Valid
<cursor_name> can be found in <X11/cursorfont.h> (without the XC_ prefix).
.TP
.I sleep(<cursor_name>,<ms_interval>)
This command displays the <cursor_name> cursor and waits for <ms_interval>
milliseconds to elapse.
If <cursor_name> is the string \fINULL\fR (case-sensitive),
the cursor will not change.
This command can be interrupted (and aborted)
by any mouse clicks or key strokes.
Valid <cursor_name> can be found in <X11/cursorfont.h>
(without the XC_ prefix).
.TP
.I begin_animate()
This command is used to start an animation sequence.  By default, tgif
prepares for undo/redo.  For a long animation sequence, the undo/redo
records may take up a lot of memory.  In this case, disable_undo() (described
below) should be used before this command.
.TP
.I end_animate()
This command is used to terminate an animation sequence.
.TP
.I set_redraw(<true_or_false>)
This command is used to temporarily disable redraw if <true_or_false>
is \fIFALSE\fR (case-sensitive).  If a shuffle_obj_to_top() command is
used before a move command, set_redraw(FALSE) and set_redraw(TRUE)
should be used immediately before and immediately after, respectively, the
shuffle_obj_to_top() command.
.TP
.I set_selected_obj_color(<color_str>)
This command changes the color of the selected object to <color_str>.
.TP
.I set_selected_obj_fill(<fill_index>)
This command changes the fill pattern of the selected object to
<fill_index>, which must be between 0 (for
no fill) and 31.
.TP
.I set_selected_obj_pen(<pen_index>)
This command changes the pen of the selected object to <pen_index>,
which must be between 0 (for no pen) and 31.
.TP
.I set_selected_obj_line_width(<width>,<arrow_w>,<arrow_h>)
This command changes the line width, arrow width, and arrow_h of the
selected object to <width>, <arrow_w>, and <arrow_h>,
respectively.  If <arrow_w> or <arrow_h> is -1, the
arrow width or arrow height, respectively, is not changed.
.TP
.I set_selected_obj_spline(<spline_type>)
This command changes the spline type of the selected object to
<spline_type>, which can be \fIstraight\fR, \fIspline\fR, or
\fIinterpolated\fR.
.TP
.I set_selected_obj_arrow(<arrow_type>)
This command changes the arrow type of the selected object to
<arrow_type>, which can be \fInone\fR, \fIright\fR, \fIleft\fR, or
\fIdouble\fR.
.TP
.I set_selected_obj_dash(<dash_index>)
This command changes the dash type of the selected object to
<dash_index>, which must be between 0 (solid) and 8.
.TP
.I inc(<attr_name>,<expr>)
This command increment <attr_name> by the expression
<expr>.  Both the value of <attr_name> and <expr> must be integers.
Please see the ARITHMETIC EXPRESSIONS section below for details about
expressions.
.TP
.I dec(<attr_name>,<expr>)
This command decrement <attr_name> by
<expr>.  Both the value of <attr_name> and
<expr> must be integers.
.TP
.I shuffle_obj_to_top(<obj_name>)
This command move <obj_name> to the top.  If <obj_name>
is a subobject, it is raised to the top, relative to its siblings.
This command is useful in animation where a selected frame (subobject)
can be raised to the top.
.TP
.I disable_undo()
This command cleans up the undo/redo records and disable undo (and
stop recording undo/redo information).  The original history depth
is saved away.
This command should be used before a long animation sequence.
.TP
.I enable_undo()
This command restores the history depth saved away by the disable_undo()
command and enables undo/redo.
This command should be eventually used after disable_undo() is called.
.TP
.I get_drawing_area(<ltx_attr>,<lty_attr>,<rbx_attr>,<rby_attr>)
This command stores the absolute coordinate of the current drawing
area in the specified attributes.
<ltx_attr> stores the left-top X coordinate,
<lty_attr> stores the left-top Y coordinate,
<rbx_attr> stores the right-bottom X coordinate, and
<rby_attr> stores the right-bottom Y coordinate.
.TP
.I get_selected_obj_bbox(<ltx_attr>,<lty_attr>,<rbx_attr>,<rby_attr>)
This command stores the absolute coordinate of the bounding box
of the selected object in the specified attributes.
<ltx_attr> stores the left-top X coordinate,
<lty_attr> stores the left-top Y coordinate,
<rbx_attr> stores the right-bottom X coordinate, and
<rby_attr> stores the right-bottom Y coordinate.
The bounding box is computed assuming that all lines are of width 0.
.TP
.I move_selected_obj_absolute(<ltx>,<lty>)
This command moves left-top corner of the selected object to (<ltx>,<lty>).
.TP
.I assign(<attr_name>,<expr>)
This command assigns <expr> to <attr_name>.
<expr> must be evaluated to a numeric value.
.TP
.I strcpy(<attr_name>,<string>)
This command copies <string> into <attr_name>.
.TP
.I while(<expr>,<cmd_attr_name>)
This command keeps executing the internal command in
<cmd_attr_name> until <expr> evaluates to 0.
.TP
.I if(<expr>,<then_cmd_attr_name>,<else_cmd_attr_name>)
If <expr> evaluates to 0, the internal command in
<else_cmd_attr_name> is executed; otherwise, the
internal command in <then_cmd_attr_name> is executed.
<then_cmd_attr_name> or <else_cmd_attr_name> can be
the string \fINULL\fR (case-sensitive);
in this case, no corresponding action is taken.
.TP
.I get_current_file(<attr_name>)
This command stores the full path name of the current file in <attr_name>.
.TP
.I getenv(<attr_name>,<env_var_name>)
This command stores the environment variable named <env_var_name>
in <attr_name>.
.TP
.I strlen(<attr_name>,<string>)
This command assigns the number of characters in <string> to <attr_name>.
.TP
.I substr(<attr_name>,<string>,<start_index>,<length>)
This command copies <length> characters, starting from the character index
<start_index>, of <string> into <attr_name>.
.TP
.I strstr(<attr_name>,<string>,<sub_string>)
This command finds the first occurrence of <sub_string> in <string> and
copies <sub_string> and the rest of the string into <attr_name>.
.TP
.I strrstr(<attr_name>,<string>,<sub_string>)
This command finds the last occurrence of <sub_string> in <string> and
copies <sub_string> and the rest of the string into <attr_name>.
.TP
.I unmake_selected_obj_iconic()
This command has the same effect as selecting UnMakeIconic() from the
Special Menu except that at least one object must be selected already.
.TP
.I hyperjump_then_exec(<attr_name>,<attr_name_to_exec>)
This command teleports to the file name or URL name found in the
<attr_name> attribute then executes the internal command specified by the
<attr_name_to_exec> attribute in the new file.
.\"
.SH ARITHMETIC EXPRESSIONS
.\"
Certain internal commands allow arithmetic expressions as arguments.
Infix notation is used.  Supported operators (and their precedences)
are listed below.
.PP
 ?   1	if-then-else, e.g. <rel> ? <iftrue> : <else>
 :   2	if-then-else, e.g. <rel> ? <iftrue> : <else>
 ||  3	logical OR
 &&  4	logical AND
 |   5	bit-wise OR
 ^   5	bit-wise XOR
 &   5	bit-wise AND
 ==  6	equal
 !=  6	not-equal
 >   7	greater than
 <   7	less than
 >=  7	greater than or equal to
 <=  7	less than or equal to
 <<  8	shift left
 >>  8	shift right
 +   9	add
 -   9	subtract
 *  10 	multiple
 /  10 	divide
 // 10 	integer divide
 %  10 	mod
 !  11 	logical NOT
 ~  11 	bit-wise invert/NOT
 )  12 	closed parenthesis
 (  13 	open parenthesis
.TP
.I show_attr(<attr_name>)
This command makes the <attr_name> attribute visible.
.TP
.I hide_attr(<attr_name>)
This command makes the <attr_name> attribute invisible.
.TP
.I show_attr_name(<attr_name>)
This command makes the name part of the <attr_name> attribute visible.
.TP
.I hide_attr_name(<attr_name>)
This command makes the name part of the <attr_name> attribute invisible.
.TP
.I get_attr_bbox(<ltx_attr>,<lty_attr>,<rbx_attr>,<rby_attr>,<attr_name>)
This command stores the absolute coordinate of the bounding box
of the <attr_name> attribute in the specified attributes.
<ltx_attr> stores the left-top X coordinate,
<lty_attr> stores the left-top Y coordinate,
<rbx_attr> stores the right-bottom X coordinate, and
<rby_attr> stores the right-bottom Y coordinate.
The bounding box is computed assuming that all lines are of width 0.
.TP
.I size_selected_obj_absolute(<abs_w>,<abs_h>)
This command stretches the right bottom corner of the selected object
so that its width becomes <abs_w> and height becomes <abs_h>.
.TP
.I message_box(<attr_name>,<msg>,<title>,<style>)
This command displays a messagebox with <title> as the title and <msg>
as the message.  <style> can be the string "info", "ync", "yn", or "stop".
The messagebox display an OK button for the "info" or "stop" styles,
YES/NO/CANCEL buttons for the "ync" style, YES/NO buttons for the "yn" style.
When the user click a button in the messagebox, the name of the button
will be placed in <attr_name>.  If the user cancels the messagebox by
typing the <ESC> key, <attr_name> will be set to the string "CANCEL".
If <attr_name> is the string \fINULL\fR (case-sensitive), the information
about which button is clicked is not written anywhere.  If <title> is
the string \fINULL\fR, \fITgif\fR will be the title for the messagebox.
.TP
.I get_user_input(<attr_name>,<msg1>,<msg2>)
This command displays a dialogbox with <msg1> in the first line and
<msg2> in the second line.  If <msg2> is the string "USE_CURRENT_DIR",
the second line displays the current directory.  The user can type in
a line in the dialogbox which get placed in <attr_name>.  If the user
cancels the dialog by typing the <ESC> key, <attr_name> will be set to
the empty string.
.TP
.I add_attr_to_selected_obj(<attr_name>,<attr_value>,<abs_x>,<abs_y>)
This command adds <attr_name>=<attr_value> to a selected object and
place the attribute at (<abs_x>,<abs_y>).  If <attr_name> is the string
\fINULL\fR (case-sensitive), the attribute's name will be the empty
string.  If <abs_x> and <abs_y> are both \fINULL\fR (case-sensitive),
the attribute will be placed below the lower left corner or the object.
.TP
.I user_end_an_edge(<attr_name>,<abs_x>,<abs_y>)
This command starts a polyline/open-spline at (<abs_x>,<abs_y>),
switches the drawing mode to the draw polyline/open-spline, and
lets the user finishes the polyline/open-spline.  If the endpoint
falls in an object having an attribute \fItype=port\fR, that object's
name will be placed in <attr_name>, if <attr_name> is not the string
\fINULL\fR (case-sensitive).
.TP
.I user_draw_an_edge(<start_attr_name>,<end_attr_name>)
This command switches the drawing mode to the draw polyline/open-spline and
lets the user draw a polyline/open-spline.
If the first endpoint falls in an object having an attribute
\fItype=port\fR, that object's name will be placed in <start_attr_name>,
if <attr_name> is not the string \fINULL\fR (case-sensitive).
If the last endpoint falls in an object having an attribute
\fItype=port\fR, that object's name will be placed in <end_attr_name>,
if <attr_name> is not the string \fINULL\fR (case-sensitive).
.TP
.I get_a_poly_vertex_absolute(<x_attr_name>,<y_attr_name>,<obj_name>,<index>)
This command stores the absolute coordinate of the <index>\fIth\fR vertex
of <obj_name> in attributes specified by <x_attr_name> and <y_attr_name>.
The object specified by <obj_name> must be either a poly/open-spline or a
polygon/closed-spline object.
.TP
.I move_a_poly_vertex_absolute(<obj_name>,<index>,<abs_x>,<abs_y>)
This command moves the <index>\fIth\fR vertex
of <obj_name> to the absolute coordinate (<abs_x>,<abs_y>).
The object specified by <obj_name> must be either a poly/open-spline or a
polygon/closed-spline object.
.TP
.I post_attr_and_get_cgi_result(<url_attr>,<query_attr>,<result_attr>)
This command makes a HTTP request using the \fIPOST\fR method.
<url_attr> names the attribute that contains the URL (which usually names
a CGI server script).  <query_attr> names
the attribute whose value is the data to be posted.  <result_attr> names
the attribute for receiving the results.
For example, if an object has the following attributes:
.PP
.RS
.RS
url=http://bourbon.cs.ucla.edu:8001/cgi-bin/echo-post
.br
query=Hello World!
.br
result=
.br
exec=post_attr_and_get_cgi_result(url,query,result)
.RE
.PP
Executing this object will post "Hello World!" to the specified
CGI script.  In this case, the result of executing the script just
echoes "Hello World!" back (along with some other bookkeeping information).
.TP
.I navigate_back()
This command performs the same operation as if the NavigateBack() is
selected from the Navigate Menu.
.TP
.I stop()
This command stops the execution of all internal commands.
.TP
.I sqrt(<attr_name>,<expr>)
This command assigns the square-root of <expr> to <attr_name>.
<expr> must be evaluated to a non-negative numeric value.
.TP
.I random(<attr_name>)
This command assigns a random integer to <attr_name> using the C
library function \fIrand()\fR.
.TP
.I round(<attr_name>,<expr>)
This command assigns the round of <expr> to <attr_name>.
.TP
.I redraw_obj(<obj_name>)
This command redraws the area occupied by <obj_name>.
.TP
.I redraw_drawing_area()
This command redraws the whole drawing area (visible through
the Canvas Window).
.TP
.I itox(<attr_name>,<digits>,<expr>)
This command assigns <attr_name> to be the hex value of <expr>.
<digits> (which must be between 1 and 8, inclusive) is the final
width of the hex value (zeroes are added on the left).
.TP
.I for_i(<attr_name>,<min_val>,<max_val>,<increment>,<cmd_attr_name>)
This command is the same as the following sequence of commands:
.PP
.RS
.RS
assign(<attr_name>,<min_val>);
.br
while($(<attr_name>) <= <max_val>,\fIloop\fR)
.RE
.PP
where \fIloop\fR has the following value:
.PP
.RS
exec(<cmd_attr_name>);
.br
inc(<attr_name>,<increment>)
.RE
.PP
Please note that <min_val>, <max_val>, and <increment> are
only evaluated once prior the execution of this command.
.\"
.SH GENERATING NCSA IMAGEMAP AND CERN CLICKABLE IMAGE FILES
.\"
This section describes how to generate NCSA imagemap and CERN
clickable image files.
The Tgif*ImageMapFileFormat X default decides whether to generate
a NCSA imagemap or a CERN clickable image file.
Since the two formats are very similar, we will
only discuss how to generate NCSA imagemap files.
For more information about NCSA imagemap, please see
<URL:http://hoohoo.ncsa.uiuc.edu/docs/setup/admin/Imagemap.html>.
For more information about CERN clickable image, please see
<URL:http://www.w3.org/hypertext/WWW/Daemon/User/CGI/HTImageDoc.html>.
.PP
The Tgif*GenerateImageMap X default should be set to ``true''
to enable the imagemap generation.
When printing in the GIF format (see the BASIC FUNCTIONALITIES
section about printing), an XPM file (which will be removed at the end
of this process) is generated first.
(The value specified by the Tgif*InitExportPixelTrim X default is
used to trim extra pixels.  Using these values forms an escape
mechanism to fix an idiosyncrasy that tgif can not figure out exactly
how big the whole image is.)
.PP
The XPM version is specified by
the Tgif*XPmOutputVersion X default unless the Tgif*UseXPmVersion1ForImageMap
X default is set to ``true'', which forces the XPM1 format.  Then the command
specified by the Tgif*XpmToGif X default is executed to convert the
XPM file into a GIF (Generic Interchange Format) file which can be used by
software such as NCSA's Mosaic(1).  The file extension for the GIF file is
specified by the Tgif*GifFileExtension X default.  Together with the
GIF file, an imagemap file with file extension specified by the
Tgif*ImageMapFileExtension X default is generated.  The content of the
imagemap is generated as follows.
.PP
Tgif first looks for a \fIfile attribute\fR with attribute name \fIhref\fR.
The value of the attribute is written as the \fIdefault URL\fR.
If such a file attribute can not be found, imagemap generation is aborted.
If it is found, then all objects in the file are scanned.
For an object having an
attribute named \fIhref\fR, the value of the attribute is written
as the \fIURL\fR for a \fImethod\fR line in the imagemap.
If the object is neither a circle nor a poly/polygon, the \fIrectangle\fR
method is used.
.\"
.SH GENERATING EPSI FILE FOR SOME MICROSOFT WINDOWS APPLICATIONS
.\"
Some Microsoft Windows (TM) applications do not understand standard
PostScript %%BeginPreview, %%EndImage, and %%EndPreview comments.
This section describes how to generate an EPSI file which is understood
by them.  If the Tgif*TiffEPSI X default is set to ``true'' and one
prints in the EPSI format, this feature will be invoked.  In this case,
the generated EPSI file will contain 30 bytes of binary information in
the beginning of the file and a TIFF image (also binary) at the end of
the file.  This file also will not contain the
%%BeginPreview, %%EndImage, and %%EndPreview comments.
A file in this format is normally not considered to be a
PostScript file except under Windows.
.PP
When this feature is enabled, tgif generates
a normal EPSI file first, then dump the current content of the file
into an X11 bitmap file.  The command specified in Tgif*XbmToTiff is
executed to generate a TIFF image which is then append at the end of
the EPSI file.
.\"
.SH LOCKING OBJECTS
.\"
Objects can be locked and unlocked using #< and #> keyboard commands.
When a selected object is locked, it is shown with gray handles.
A locked object can be moved, stretched, flipped, or rotated;
however, its properties, such as fill pattern, width, etc., can
be changed.  Locked objects can also be deleted.  When a locked
object is grouped with other objects, the resulting grouped object
is also locked.  A locked object can be used as an anchor to
align other objects; however, DistributeObjs() command will fail
if any objects are locked.  Locked objects do not participate
in any operations in the select vertex mode.
.\"
.SH UNDO/REDO
.\"
Most operations can be undone and redone.  The Tgif*HistoryDepth
X default controls the size of the undo buffer.  If it is set
to -1, then the undo buffer's size is infinite.  The undo buffer
is flushed when the New() or Open() commands are executed (from
the File Menu), when the FlushUndoBuffer() command is executed
from the Edit Menu, or when Pop() is executed from a .sym file.
If a private colormap is used (automatically done when new colors
can not be allocated from the default colormap), executing FlushUndoBuffer()
will attempt to reset the colormap (if the -DDONT_FREE_COLORMAP
compile option is not used).
.\"
.SH DOMAINS
.\"
A \fIdomain\fR is a collection of library symbols suitable for
instantiations.  A library is implemented as a directory of .sym files,
and therefore, a domain is implemented as a search path.
If there are symbols with the same file name which reside
in different directories specified in the search path, then
the one closer to the front of the search path will be made
available for the user to instantiate.
.PP
The number of domains is specified by the MaxDomains X default,
and the names of the domains are specified by the DomainPath# X default.
The library search paths are specified by csh environment variables.
See the section on X DEFAULTS for more details.
.\"
.SH SELECTING A NAME FROM A POPUP WINDOW
.\"
When selecting a file name, a symbol name, or a domain name,
tgif pops up a window with appropriate names for the user to
choose from.  The user can use mouse clicks to select an entry.
Key strokes can also be used to specify the desired name; however,
tgif attempts to match the key strokes with names in the selection
on the fly.  If a match can not be found, the key strokes are
ignored.  ^n, ^j, or the DownArrow key advances the selection
down by 1 entry; ^p, ^k, or the UpArrow key
advances the selection up by 1 entry.  ^f, ^d, or the DownArrow
key with <Control> key held down advances the
selection down by 10 entries; ^b, ^u, or the UpArrow
key with <Control> key held down advances the selection up by
10 entries.  '$' will select the last entry, while '^' will
select the first entry.  ^w or ^y un-select the selected entry.
If the selected entry is a directory, hitting <CR> will change
directory; if not, hitting <CR> finishes the selection process
and the selected entry is returned.
.PP
In selecting file names to open or import,
typing '/' is interpreted as going to the root directory or
specifying an URL.
At this point, the automatic matching of key strokes is
temporarily disabled until either a <TAB> or a <CR> is pressed.
Also, clicking the middle mouse button in the file name area
pastes from the clipboard.
.PP
The automatic appending of \fIindex.obj\fR or \fI.obj\fR (introduced
in version 2.16) is obsoleted and an URL is never modified.
.PP
The current selection is displayed near the top of the popup
window.  Back-space should be used with caution because it might
change the current directory to the parent directory.
.\"
.SH IMPORTING EPS FILES
.\"
Encapsulated PostScript (EPS) files can be imported using the #(
keyboard command.  If the EPS file has a preview bitmap
(can be generated using the \fIpstoepsi\fR tool), tgif will
display it (HideBit/Pixmap() from the Layout Menu can be used to
disable the displaying of bitmap/pixmaps).  When the EPS object
is saved in a .obj or .sym file, neither the preview bitmap, nor
the PostScript content of the EPS file is saved.  Therefore,
when printing such a file (either from tgif or using prtgif),
the EPS file must be present at the same place from which it was
originally imported.
.\"
.SH ADDITIONAL FONTS
.\"
In addition to the Times, Courier, Helvetica, NewCentury, and Symbol fonts,
additional fonts can be specified using the Tgif*AdditionalFonts X default.
(The default screen fonts can also be replaced, please see
Tgif*HasAlternateDefaultFonts in the X DEFAULTS section for more details.)
Each additional font requires \fI4\fR parts, one for each font style
(in the order of Roman, Bold, Italic, and BoldItalic).
Each part contains \fI3\fR strings.  The first string specifies the
family, weight, slant, and width of the font (please see the man pages
for xfontsel(1) for more details; also there is a second form which
is described below).  The second string specifies the
registry and encoding of the font (see xfontsel(1) again).  (One can use
xlsfonts(1) to see what fonts are available and pick out the just mentioned
two strings from the output.)  The third string specifies the PostScript
font name.
.PP
For example, if one wants to use the X Lucida font to represent the
PostScript ZapfChancery-MediumItalic font, one can set Tgif*AdditionalFonts
as follows:
.PP
Tgif*AdditionalFonts: \\n\\
.br
        lucida-medium-r-normal \\n\\
.br
        iso8859-1 \\n\\
.br
        ZapfChancery-MediumItalic \\n\\
.br
        \\n\\
.br
        lucida-demibold-r-normal \\n\\
.br
        iso8859-1 \\n\\
.br
        ZapfChancery-MediumItalic \\n\\
.br
        \\n\\
.br
        lucida-medium-i-normal \\n\\
.br
        iso8859-1 \\n\\
.br
        ZapfChancery-MediumItalic \\n\\
.br
        \\n\\
.br
        lucida-demibold-i-normal \\n\\
.br
        iso8859-1 \\n\\
.br
        ZapfChancery-MediumItalic
.br
.PP
The above maps all four font styles of the Lucida font to the
ZapfChancery-MediumItalic font (similar to how Symbol font is handled).

The first string can also be specified in a second form which is
identified by having "%d" as part of the string.  For example, one
can use "lucidasans-%d" as the first string.  In this case, the
actual X font used will be the specified string with "%d" replaced by
the font size.  The encoding string (second string) is ignored (but
must be present).  The font name prefix (please see Tgif*FontNamePrefix
entry in the X DEFAULTS section) is also ignored.
.\"
.SH MULTIPAGE DRAWING
.\"
An object file can contain multiple pages.  Two layout modes,
\fIstacked\fR and \fItiled\fR, for a multipage drawing are supported.
In \fIstacked\fR layout mode, pages are considered to be stacked on
top of each other, and therefore, an object can only appear on one page.
In \fItiled\fR layout mode, pages are tiled to form a large logical page;
in this case, an object can exist on several physical pages simultaneously.
Swiching between the two modes are considered rare events and can not be undone.
Tgif does not allow switching from the tiled layout mode to the stacked
mode when there exists an object that spans physical page boundaries because
it can not decide which physical page the object belongs.

Page numbers are supported through the use of page numbering objects.  A page
number objecting is an object that contains an attribute whose name is
\fI!PAGE_NUM\fR (the name is case-sensitive) and the name part of that
attribute is not shown (hiding an attribute name can be achieved by using
the Move/JustifyAttr() command under the Special Menu).
The value of the attribute determines how the page number is printed.
If the value of the attribute contains a \fI!(STACKED_PAGE_NUM)\fR substring,
that part of the substring will be replaced by the page number if the
page layout mode is \fIstacked\fR.  If the page layout mode is tiled, the string
will be printed out as is.  If the value of the attribute contains a
\fI!(TILED_PAGE_ROW)\fR or \fI!(TILED_PAGE_COL)\fR substring, that part of
the substring will be replaced by the row number or the column number of
the physical page if the page layout mode is \fItiled\fR.
.\"
.SH SPECIAL ATTRIBUTES
.\"
There are a few special attributes that tgif recognized.  There are described
in this section.  They are all case-sensitive.
.IP !PAGE_NUM=<page_number>
This specifies the page numbers in a multipage drawing.  Please see the
MULTIPAGE DRAWING section for details.
.IP not_rigid
If an attribute's name is empty and the value is \fInot_rigid\fR, then
the object (referred to as the owner object) to which that attribute belongs
is stretchable.  By default,
all objects are stretchable, except icon objects; therefore, this attribute
is only useful if the owner object is an icon object.
(Rigid icon objects inside a non-rigid icon object are considered non-rigid.)
.IP auto_center_attr
If an attribute's name is empty and the value is \fIauto_center_attr\fR, then
all the visible attributes of the owner object will automatically be centered
relative to the bounding box of the owner object.  It doesn't really make
sense to have multiple visible attributes because they will overlap.  This
attribute is useful for making simple flowchart elements.
.IP unmakeiconic_on_instantiate
If an symbol object's attribute has an empty attribute name and
the value is \fIunmakeiconic_on_instantiate\fR,
then when the symbol is instantiated, the following commands are
performed on the just-instantiated icon object: 1) UnMakeIconic() command
from the Special Menu, 2) UnGroup() command from the Arrange Menu, and 3) the
"unmakeiconic_on_instantiate" text object is removed.  This attribute is
useful for making simple flowchart segments.
.IP retracted_arrows
If an attribute's name is empty and the value is \fIretracted_arrows\fR
for a polyline or open-spline object with more than 2 vertices,
then the arrows of the spline object is retracted by one vertex.
.IP auto_retracted_arrows
This is very similar to the \fIretracted_arrows\fR above except that the
object must be an interpolated open-spline with only one arrow head.
The spline object is
forced to have 3 vertices and the middle vertex of the spline object
is automatically adjusted when an endpoint is moved.
.IP auto_exec=<internal command>
If such a file attribute exists, the value is executed when the file
is opened (unless the file is opened as a result of executing the
hyperjump_then_exec() internal command).
.\"
.SH EXPORT TO TABLE
.\"
When the ExportToTable() command is selected from the Special Menu, certain
attributes of selected objects are written into a user-specified output file
in a format which can be easily imported by a spreadsheet program or to be
used by the MergeWithTable() command described in the next section.  An output
file contains columns of strings.  Two columns are separated by a single
<TAB> character.  The first row of a output file contains the column names
and all other rows contain values.
.PP
The names of the attributes to be written are specified by the
\fIfile attribute\fR named \fITABLE_ATTRS\fR (which is denoted by
\fI!.TABLE_ATTRS\fR here).  The value of the TABLE_ATTRS
file attribute is a list of comma-separated attribute names.  When
ExportToTable() command is executed, the attribute names specified by
!.TABLE_ATTRS are written to the output file first.  Then,
for each selected object, every one of its attribute which appears in the
list specified by !.TABLE_ATTRS are written to the output file in one line.
If an object has no attributes that match the specification, no
corresponding line is generated.
.\"
.SH MERGE WITH TABLE
.\"
When the MergeWithTable() command is selected from the Special Menu, a
selected object is \fImerged\fR (also known as \fImail-merged\fR on PCs)
with a table (data) file (in the same format as the output file described
in the previous section) to generate a new multipage drawing having the
\fIstacked\fR page layout mode.
.PP
The selected object contains formating informat, and it is also used as
a template to be replicated for each
data row in the table file.  If an attribute of the replica matches the
column name of the table, the attribute value is set to the value in the
table file.  The replicas are tiled horizontally first.
.PP
Eight attributes must be specified in the template object.  They are all
case-sensitive.  The ones that measure distances can be specified in
inches ("in"), centi-meters ("cm"), or pixels (if no units are specified).
.RS
.TP
.I PAPER_WIDTH
This specifies the width of the paper.
.TP
.I PAPER_HEIGHT
This specifies the height of the paper.
.TP
.I LEFT_MARGIN
This specifies the distance to the left edge of the paper.
.TP
.I TOP_MARGIN
This specifies the distance to the top edge of the paper.
.TP
.I H_PITCH
This specifies the distance between the left edges of the replicas.
.TP
.I V_PITCH
This specifies the distance between the top edges of the replicas.
.TP
.I NUM_COLS
This specifies the number of replicas to tile horizontally before
moving down to the next row.
.TP
.I NUM_ROWS
This specifies the number of replicas to tile vertically before
moving to the next page.
.RE
.PP
After each replica is generated, filled with the data from the
table file, and placed, its attribute named \fIexec\fR is
executed (unless an attribute named \fIEXEC_AFTER_MERGE\fR is
specified, in which case, the attribute named by the \fIEXEC_AFTER_MERGE\fR
attribute is executed instead).  If there is no attribute named by the
\fIEXEC_AFTER_MERGE\fR attribute, nothing is executed.
(Please see the INTERNAL COMMANDS section for details on command execution.)
One can use the \fIexec\fR command to construct other attributes
from the attributes associated with the data table.
.PP
If an attribute whose name is empty and whose value is the string
\fIUSER_PLACEMENT\fR, the user will be asked to place the replica
(object name will be displayed in the Status Window when the object
is being placed).
In this case, the 8 placement related attributes are ignored.
.PP
If an attribute whose name is empty and whose value is the string
\fISTRIP_DOUBLE_QUOTES\fR, data fields surrounded by double-quotes are
stripped.
.\"
.SH MIME TYPES AND MAILCAPS
.\"
When an URL names an HTTP server, the HTTP server sends the \fIContent-type\fR
of the URL along with the remote file referenced by the URL to tgif.
The \fIContent-type\fR contains information such as the type/subtype of the
file plus some optional fields.  If the
file is not a tgif file, the following mechanism is used to view the file.
.PP
First, the X defaults are looked up to see if there is an external
viewer specified for the file.  Please see Tgif*@@@Viewer in the X DEFAULTS
section below for details.  If there's no match, the type/subtype is
matched against entries in the MIME-types file.
The default MIME-types file is \fI.mime.types\fR in user's home directory.
Please see Tgif*MimeTypesFile in the X DEFAULTS section on how to override
the default MIME-types file.  The first field in each line of the MIME-types
file specifies type/subtype information.
If there is a type/subtype match in the MIME-types files,
the MailCap files are consulted as follows.
.PP
A line in a MailCap file consists of fields separated by semi-colons.
The first field specifies the type/subtype and the second field specifies
a \fIview command\fR for viewing a file that matches the type/subtype.
For tgif, the view command must contains a single \fI%s\fR substring
to be replaced by local copy of the URL.  Only the \fI%t\fR and the \fI%{}\fR
optional fields are supported by tgif.  The \fImultipart\fR MIME-type is
not supported.  The type/subtype information of the remote file is matches
against the MailCap files.  If a match is found, the corresponding view command
is executed.  If no match is found, but the type of the remote file is either
\fIapplication\fR, \fIaudio\fR, \fIimage\fR, or \fIvideo\fR, the file is
saved and no external viewer is launched.  Otherwise, the remote file is
assumed to be pure text and tgif will create a text object to view the text.
.PP
The MailCap files are the (colon-separated) files specified by the
MAILCAP environment variable (if defined).
If MAILCAP is not defined, the \fI.mailcap\fR file in
the user's home directory is used.
.PP
MIME is the Multipurpose Internet Mail Extensions specified in RFC1521,
and MAILCAP is specified in RFC1524.
.\"
.SH HOW TO MAKE A BUILDING-BLOCK OBJECT (SYMBOL FILE)
.\"
Here are the steps for defining a building-block object, to be used
in a hierarchical design.
.IP 1)
Draw the representation part of the building-block object.  Group everything
together.  Select this grouped object.
.IP 2)
Popup the main menu with the middle mouse button; select ``Special''.
Select ``MakeSymbolic'' from the next popup menu.
The selected object becomes a symbol and gets a dashed boundary.
.IP 3)
Type in attributes as individual text strings.  Select the
symbol object and all the
text strings to be attached to the symbol.  Type #a (for \fIAttach\fR)
to attach attributes to the symbol.
.IP 4)
(This step is optional.)  Build
the definition part of the building-block object.  Look at the
``flip-flop.sym'' file for an example.  To look at that file, first,
instantiate a ``flip-flop'' by typing ^i (for \fIInstantiate\fR).
Select the flip-flop from
the popup window; place the flip-flop; select the flip-flop and
type ^v (for \fIPush\fR) to see the symbol file.
.IP 5)
Save and name the file.  If the current library path contains the
current directory (or '.'), the symbol just built should be
instantiatable by typing ^i.
.\"
.SH X11 PIXMAP (XPM) FORMATS
.\"
Tgif can only import X11 pixmaps that satisfy the constraints
described here.  The format of the X11 pixmap must be either 1 (XPM1)
or 3 (XPM3).  Only a subset of the XPM3 format is supported, namely,
the \fIkey\fR field for the color specification must be 'c' (for
color visuals).
Tools that generate XPM1 format files are
(they might have been upgraded to support XPM3), \fIpbmplus\fR, which is
a set of bitmap and pixmap conversion freeware (together with
\fIxv\fR, the colors for pixmap objects can be manipulated),
and \fIxgrabsc\fR, another freeware; also, \fIxloadimage\fR
can display XPM1 files.
Tools that can generate XPM3 format files are, for example,
\fIxsnap\fR and \fIsxpm\fR.
For each color specified in the color string, a color cell
is allocated.  If the allocation fails,
the current color will be used for that color string.
If the first color character is a back-quote (`) or a space, then
the corresponding color is substituted with the \fIbackground\fR
color of the tgif window if the Tgif*GuessXPmBgColor X default is
set to ``true''.  (This design choice is made because the pixmap will then
look ``right'' on both regular and reverse video.)
The following is an example of a very small pixmap file (in XPM1
format).
.PP
.RS
#define arrow_format 1
.br
#define arrow_width 5
.br
#define arrow_height 3
.br
#define arrow_ncolors 3
.br
#define arrow_chars_per_pixel 1
.br
static char *arrow_colors[] = {
.br
   "`", "Black",
   "a", "red",
   "b", "yellow"
.br
};
.br
static char *arrow_pixels[] = {
.br
"`a```",
.br
"aabbb",
.br
"`a```"
.br
};
.br
.RE
.\"
.SH LATEX FIGURE FORMATS
.\"
Here we show how to make a figure for a LaTeX file, first with
the \fI\\psfig\fR (or \fI\\epsf\fR) special construct, then with the
\fIpsfile\fR special construct.  (The author does not recommend
the \fIpsfile\fR construct.)  An example of both can be found
in ``example.tex'' which is included with the tgif distribution.
.PP
To print a tgif file to be included in a LaTeX document with
the \fI\\psfig\fR or \fI\\epsf\fR special construct
(files generated will be in the
\fIEncapsulated PostScript\fR format), first
select LaTeX format in the panel window (click the left mouse
button on the laser printer icon), then type ^p to generate
the Encapsulated PostScript file.
If the file name is ``an-sr-flip-flop.obj'',
then the LaTeX figure file generated will be named
``an-sr-flip-flop.eps''.  This file can be included in a LaTeX
document as follows,
.PP
.RS
\\input{psfig}
.br
\\begin{figure*}[htb]
.br
\\centerline{\\psfig{figure=an-sr-flip-flop.eps}}
.br
\\caption{An SR flip-flop.  \\label{fig:an-sr-flip-flop}}
.br
\\end{figure*}
.br
.RE
.br
.PP
An alternative way is to use the \fI\\epsf\fR construct as follows,
.PP
.RS
\\input{epsf}
.br
\\begin{figure*}[htb]
.br
\\centerline{\\epsffile{an-sr-flip-flop.eps}}
.br
\\caption{An SR flip-flop.  \\label{fig:an-sr-flip-flop}}
.br
\\end{figure*}
.br
.RE
.br
.PP
The \\centerline command above centers the picture.
If one has multiple tgif figures in one's LaTeX document,
one only have to include the psfig macro (\\input{psfig} or \\input{epsf})
once, right after the \\begin{document} statement.
.PP
If Encapsulated PostScript is not available, the \fIpsfile\fR
special construct can be used as described here.
In this case, since LaTeX doesn't not know where the bounding
box of the drawing is, it takes some practice to get this just right.
Here is something that seems to work.
First, center the picture
on the page (e.g., the width of a portrait style page is 8.5 inch, so the
center of the page is at the 4.25 inch mark),
and make the top object in the picture about 1/4 inch away from
the top of the page.
Select the LaTeX format in the panel window,
then print in the LaTeX format.
As with the \fIpsfig\fR construct, a file with the \fI.eps\fR
extension will be generated.
This file can be included in a LaTeX document as follows,
.PP
.RS
\\begin{figure*}[htb]
.br
\\special{psfile="an-sr-flip-flop.eps" hoffset=-40}
.br
\\rule{0in}{1.1in}
.br
\\caption{An SR flip-flop.  \\label{fig:an-sr-flip-flop}}
.br
\\end{figure*}
.br
.RE
.br
.PP
The \\rule{0in}{1.1in} above specifies an invisible box of 1.1 inches
high, which is the total height of the picture in an-sr-flip-flop.
.\"
.SH X DEFAULTS
.\"
.TP
.I Tgif*Geometry: WIDTHxHEIGHT+X+Y
.TP
.I Tgif*IconGeometry: +X+Y
.TP
.I Tgif*Foreground: COLORSTRING
The default foreground color is Black.
.TP
.I Tgif*Background: COLORSTRING
The default background color is White.
.TP
.I Tgif*BorderColor: COLORSTRING
If not specified, the foreground color will be used.
.TP
.I Tgif*ReverseVideo: [on,off]
For black and white terminal, reverse video ``on'' means the background
is black.  For color terminal, reverse video ``on'' means the background
is specified by the Tgif*Foreground color.
The default is off.
.TP
.I Tgif*InitialFont: [Times,Courier,Helvetica,NewCentury,Symbol]
This specifies the initial font.
The default is Courier.
.TP
.I Tgif*InitialFontStyle: [Roman,Bold,Italic,BoldItalic]
This specifies the initial font style.
The default is Roman.
.TP
.I Tgif*InitialFontJust: [Left,Center,Right]
This specifies the initial font justification.
The default is Left.
.TP
.I Tgif*InitialFontDPI: [75,100]
\fIObsoleted\fR.
.TP
.I Tgif*InitialFontSizeIndex: [0,1,2,3,4,5]
\fIObsoleted\fR.
.TP
.I Tgif*InitialFontSize: NUMBER
This specifies the size of the start-up font.  The default is 17.
.TP
.I Tgif*MsgFontSizeIndex: [0,1,2,3,4,5]
\fIObsoleted\fR.
.TP
.I Tgif*MsgFontSize: NUMBER
This specifies the size of the font used for messages, menues,
and popup windows.  The default is 17.
.TP
.I Tgif*RulerFontSize: NUMBER
This specifies the size of the font used for ruler windows.
The default is 10.
.TP
.I Tgif*DefaultFontSize: NUMBER
This specifies the size of the font to be used when a requested for a font size
can not satisfied.  This size \fImust\fR exist for \fIall\fR fonts used in
tgif.  The default is 14.
.TP
.I Tgif*FontSizes: NUMBER1 NUMBER2, ...
This specified the font sizes.
The default is \fI8 10 11 12 14 17 18 20 24 25 34\fR.
.TP
.I Tgif*AdditionalFonts: FONT_SPEC1 FONT_SPEC2 ...
In addition to the Times, Courier, Helvetica, NewCentury, and Symbol fonts,
additional fonts can be specified here.  Please see the ADDITIONAL FONTS
section for details.
.TP
.I Tgif*FontNamePrefix: [\fI-*\fR, \fI*\fR]
This specified the prefix to be used when tgif makes a request to the X server.
The default is \fI-*\fR.  Certain fonts have obscure font names (e.g., does
not start with the \fI-\fR character).  In order to use these fonts, this
X default can be set to \fI*\fR.
.TP
.I Tgif*HasAlternateDefaultFonts: [true,false]
The default value of this X default is false.
If it set to ``false'', tgif uses the iso8859 registry
with ASN1 encoded screen fonts,
and it look for "times", "courier", "helvetica", "new century schoolbook",
and "symbol" as part of the screen font names.  Some X servers do not support
these fonts.  In this case, this X default can be used to make tgif use
user specified fonts.  (Please note that the PostScript output will not be
affected.)  If this X default is set to ``true'', tgif will look for additional
X defaults of the form \fITgif*<ps_font_name>\fR, where \fI<ps_font_name>\fR
can be one of the following strings:
.PP
.RS
.RS
Times-Roman
.br
Times-Bold
.br
Times-Italic
.br
Times-BoldItalic
.br
Courier-Roman
.br
Courier-Bold
.br
Courier-Oblique
.br
Courier-BoldOblique
.br
Helvetica-Roman
.br
Helvetica-Bold
.br
Helvetica-Oblique
.br
Helvetica-BoldOblique
.br
NewCenturySchlbk-Roman
.br
NewCenturySchlbk-Bold
.br
NewCenturySchlbk-Italic
.br
NewCenturySchlbk-BoldItalic
.br
Symbol
.br
.RE
.RE
.br
.PP
.RS
The corresponding value of the X default must contain "%d" as part of
the string, and the "%d" string will be replaced by the font size when
the font is requested.  For example, The following lines will use the
Times New Roman screen font instead of the Times screen font, if
Tgif*HasAlternateDefaultFonts is ``true'':
.RE
.PP
.RS
Tgif*Times-Roman: *-times new roman-medium-r-*--%d-*
.br
Tgif*Times-Bold: *-times new roman-bold-r-*--%d-*
.br
Tgif*Times-Italic: *-times new roman-medium-i-*--%d-*
.br
Tgif*Times-BoldItalic: *-times new roman-bold-i-*--%d-*
.br
.RE
.br
.PP
.RS
Please note that certain X servers require the right-hand-side
font specifications to have all the dashes in place.
.RE
.TP
.I Tgif*DefaultCursor: [x_cursor,arrow,...]
This specifies the select cursor.  Entries in <X11/cursorfont.h>
(without the XC_ prefix) are valid names of the cursor.
The default is arrow.
.TP
.I Tgif*DrawCursor: [x_cursor,arrow,...]
This specifies the cursor used when drawing objects.
Entries in <X11/cursorfont.h>
(without the XC_ prefix) are valid names of the cursor.
The default is the same as Tgif*DefaultCursor.
.TP
.I Tgif*DragCursor: [x_cursor,arrow,...]
This specifies the cursor used when dragging.
Entries in <X11/cursorfont.h>
(without the XC_ prefix) are valid names of the cursor.
The default is hand2.
.TP
.I Tgif*VertexCursor: [x_cursor,arrow,...]
This specifies the cursor used in the select vertices mode.
Entries in <X11/cursorfont.h>
(without the XC_ prefix) are valid names of the cursor.
The default is plus.
.TP
.I Tgif*RubberBandColor: COLORSTRING
This specifies color used for rubber-banding (XORing).
The default color is the same as the foreground color.
.TP
.I Tgif*PrintCommand: COMMAND
This specifies the print command used for printing the PostScript file.
The default is \fIlpr\fR.  An example would be
\fIlpr -h -Pprintername\fR.
If COMMAND contains a \fI%s\fR substring, the \fI%s\fR will be replaced
by the full path name of the PostScript file which is normally send to
the print command.  Therefore, COMMAND without a \fI%s\fR substring behaves
identically to \fICOMMAND %s\fR.  Please note that this only works
when running tgif without the -print command line option.
This can be used to send a font
file to the printer before the tgif PostScript file is sent as in the
following example:
.PP
.RS
.RS
cat /somewhere/sansfex.pfa %s | lpr -Pmyprinter
.RE
.RE
.PP
.TP
.I Tgif*WhereToPrint: [Printer,EPS,PS,Bitmap,Text,EPSI,GIF]
This specifies the initial print destination/format.
The default is EPS.
.TP
.I Tgif*PrintDirectory: PATH
This specifies the print directory when the output destination
is not the printer.
The default is a null string, which means that the output goes
into the directory in which the current file resides.
.TP
.I Tgif*NoTgifIcon: [true,false]
If set to ``true'', tgif will not use its own icon window.  In this case,
one should also set Tgif*UseWMIconPixmap described below to true.
The default is false.
.TP
.I Tgif*UseWMIconPixmap: [true,false]
If set to ``true'', tgif will use the standard icon pixmap.  Also,
Tgif*NoTgifIcon will be forced to be true.
The default is false.
.TP
.I Tgif*DontShowVersion: [true,false]
If set to ``true'', the tgif version will not be displayed on top of the
tgif window.
The default is false.
.TP
.I Tgif*XBmReverseVideo: [true,false]
If set to ``true'', an invert bitmap operation will be performed
when importing an X Bitmap file.
The default is false.
.TP
.I Tgif*AskForXBmSpec: [true,false]
If set to ``true'', the user will be asked to specify
magnification and geometry for an X Bitmap file being imported.
Format of the specification is \fIMAG=WxH+X+Y\fR, where
MAG is the magnification, W and H specifies the width and height,
and the location specification can be +X+Y, +X-Y, -X+Y, and -X-Y.
The '=' is mandatory if any of the geometry information is
specified.
The default is false.
.TP
.I Tgif*AskForXPmSpec: [true,false]
If set to ``true'', the user will be asked to specify
magnification and geometry for an X Pixmap file being imported.
The format of the specification is the same as for AskForXBmSpec.
The default is false.
.TP
.I Tgif*StripEPSComments: [true,false]
If set to ``true'', lines that start with '%' in an Encapsulated
PostScript file will be stripped when the file is imported (except
the first line of the file).
The default is true.
.TP
.I Tgif*GuessXPmBgColor: [true,false]
If set to ``true'', then when tgif imports an X Pixmap file
with the first color string being ' ' (the space character) or '`'
(the back quote character), it will treat the first color
as a \fIbackground\fR color.  This means that
the specified color in the X Pixmap file will be changed to
the current background color.
The default is false.  (Please note that this default was \fItrue\fR
before patch 2 of tgif-2.7.  This X default is there for compatibility
reasons; it should be considered obsolete.)
.TP
.I Tgif*XPmOutputVersion: NUMBER
This specifies the XPM version number when outputting in the X11 pixmap
format.  NUMBER can take on values 1 or 3.  The default is 1.
.TP
.I Tgif*XPmInXGrabSCFormat: [true,false]
If Tgif*XpmOutputVersion is set to 1, setting this to ``true'' will
force the X11 pixmap output to resemble what xgrabsc generates.
The default is false.
.TP
.I Tgif*UseGrayScale: [true,false]
If set to ``true'', gray scales will be used for tiling patterns
to speed up printing.
The default is false.
.TP
.I Tgif*AutoPanInEditText: [true,false]
If set to ``true'', auto panning will be used such that the text cursor
is always visible in text edit mode (except when the cursor is to the
left or on top of the paper).
This should probably be turned off on slow servers.
The default is true.
.TP
.I Tgif*PercentPrintReduction: NUMBER
The specifies the initial percent print reduction/magnification.
The default is 100.
.TP
.I Tgif*ConstrainedMove: [true,false]
This specifies the initial move mode.
When set to ``true'', moving or stretching an object will cause the
endpoints of all
polylines or open-splines, whose endpoints fall within the object,
and may be the neighboring vertices, to be moved.  Please see the
IDIOSYNCRASIES section for more details.
The default value is false.
.TP
.I Tgif*DoubleQuoteDoubleQuote: [true,false]
When set to ``true'', output of the double-quote character will be preceded
by a double-quote character; when set to false, output of the double-quote
character will be preceded by a back-slash character.
The default value is false.
.TP
.I Tgif*GridSystem: [English,Metric]
This sets the initial grid system.  The default is English.
.TP
.I Tgif*InitialGrid: NUMBER
This specifies the initial grid size.
For the English grid system, NUMBER can be -2, -1, 0, +1, or +2 for grid
sizes of 1/32, 1/16, 1/8, 1/4, and 1/2 inch.
For the Metric grid system, NUMBER can be -1, 0, +1, or +2 for grid
sizes of 1mm, 2mm, 5mm, and 1cm.
The default value is 0.
.TP
.I Tgif*DropObsIconAttrWhenUpdate: [true,false]
If set to ``true'', obsolete icon attributes will be dropped without
confirmation when the UpdateSymbols command is executed.  If set to ``false'',
a popup window will prompt the user to specify what to do
with the obsoleted icon attributes.
The default is false.
.TP
.I Tgif*UseRecentDupDistance: [true,false]
If set to ``true'', the most recent change in position produced by a combination
of a duplicate and a move command will be used for the new duplicate command.
Otherwise, some default distance will be used to position the duplicate.
The default is true.
.TP
.I Tgif*SplineTolerance: NUMBER
This specifies the tolerance of spline drawing.
The smaller the number, the smoother the spline.
The default is 9 (min is 3 and max is 13).
.TP
.I Tgif*SplineRubberband: [true,false]
If set to ``true'', spline rubber-bands will be used
in drawing, moving, and stretching open and closed splines.
(This might not be desirable if the spline contains too many vertices.)
The default is true.
.TP
.I Tgif*Synchronize: [on,off]
XSynchronize is called if this default is set to ``on''.  The default is off.
.TP
.I Tgif*DoubleClickUnIconify: [true,false]
If set to ``true'', double mouse clicks are used to de-iconify
the icon window (in this mode, the icon window ignores single
mouse clicks and drags).
The default is false.
.TP
.I Tgif*MainMenuPinDistance: NUMBER
This specifies the horizontal distance (in pixels) the user needs to
drag a popup menu before the popup menu is to be pinned down.
The default is 80.  (If pinned popup menus are not desired, then this should
be set to a value greater than the screen width.)
Dragging the left mouse button can be used to move the pinned popup menu;
clicking the right button in the popup menu will remove it.
.TP
.I Tgif*DoubleClickInterval: NUMBER
This specifies the maximum interval (in milliseconds)
between two mouse clicked to be recognized as one double-click.
The default is 300.
.TP
.I Tgif*HandleSize: NUMBER
This specifies (half) the size of the handle used to highlight objects.
Its allowable value is between 2 and 6.
The default is 3.
.TP
.I Tgif*HistoryDepth: NUMBER
This specifies the size of the undo/redo buffer; negative values
mean that the buffer is unbounded.
The default is -1.
.TP
.I Tgif*SaveTmpOnReturn: [true,false]
If set to ``true'', a tmpmodel file will be saved automatically before
returning to the driver.  Otherwise, no files will be
saved automatically.
The default is true.
.TP
.I Tgif*ImportFromLibrary: [true,false]
If set to ``true'', the library directories specified by the
current domain are searched for .obj, .sym, xbitmap/xpixmap, and EPS files to
import.  Otherwise, the current directory will be used as the starting point.
The default is false.
.TP
.I Tgif*WarpToWinCenter: [true,false]
If set to ``true'', the mouse is warped to the center of popup
windows.  Otherwise, the mouse is not warped.
The default is true.
.TP
.I Tgif*SaveCommentsInSaveNew: [true,false]
If set to ``true'', "%%" type comments in the file will be stored in the
newly created file.
The default is true.
.TP
.I Tgif*CanvasWindowOnly: [true,false]
If set to ``true'', only the canvas window will be displayed (this is
kind of the ``demo'' mode).
The default is false.
.TP
.I Tgif*UsePsAdobeString: [true,false,NUMBER_1/NUMBER_2]
If set to ``true'', the first line in the PS or EPS file will be
"%!PS-Adobe-2.0 EPSF-1.2".  If set to ``false'', it is just "%!".
If the third form is used,, the first line will be
"%!PS-Adobe-NUMBER_1 EPSF-NUMBER_2".
The default is false.  The PS-Adobe string might confuse Transcript,
but it is needed to work with groff.
.TP
.I Tgif*HalfToneBitmap: [true,false]
If set to ``true'', the Floyd-Steinberg half-tone method will be used
when printing in X11 bitmap format.  This is useful when the drawing
contains X11 pixmap objects.
The default is false.
.TP
.I Tgif*ThresholdBitmap: [true,false]
If set to ``true'', a simple thresholding method will be used to decide whether
a bit is turned on or off when printing in X11 bitmap format.
If Tgif*HalfToneBitmap is set to true, this X default is ignored.
The default is false.
.TP
.I Tgif*BitmapThreshold: NUMBER
This specifies the threshold value used in either the Floyd-Steinberg half-tone
algorithm or the simple thresholding algorithm.  NUMBER must be between 0 and 1.
This X default is only active
when either the Tgif*HalfToneBitmap or the Tgif*ThresholdBitmap
X default is set to true.
The default value is 0.5 if Tgif*HalfToneBitmap is true, and is 1.0
if Tgif*ThresholdBitmap is true
(basically, anything that is not white will be black).
.TP
.I Tgif*GroupedTextEditable: [true,false]
If set to ``false'', only top level text objects and attributes of top
level objects can be edited when the drawing mode is set to the text mode.
If set to ``true'', text objects and attributes everywhere can be edited.
The default is false.
.TP
.I Tgif*DefaultEPSScaling: NUMBER
This specifies the scaling factor applied to an imported PS or EPS image.
As mentioned in the IDIOSYNCRASIES section below, tgif treats 128 pixels
as an inch and PostScript treats 72 points as an inch.  In order to have
real-size PostScript images, this parameter should be set to 1.7778
(which is 128/72).
The default value is 1.
.TP
.I Tgif*IntrCheckInterval: NUMBER
This specifies the number of objects drawn before tgif checks for
interrupts.  If this is set to be 0 or less, interrupt is not allowed.
The default value is 10.
.TP
.I Tgif*TiledPageScaling: NUMBER
This specifies the scaling value used when a multipage drawing in
tiled page mode is printed.  Since most PostScript printers do not
use the full page as the drawing area, setting this number to 1
may get truncated output.
The default value is 0.9.
.TP
.I Tgif*TGIFPATH: STRING
This specifies the directory where the files, mentioned in the FILES
section below, can be found.  The TGIFPATH environment variable may
override this option.
The default value is specified by the compiler option TGIF_PATH.
.TP
.I Tgif*TGIFICON: STRING
This specifies the name of the object file to be displayed when tgif
is iconified.  If it starts with a / character, absolute path is used;
otherwise, the actual path of the icon file is $TGIFPATH/STRING where
TGIFPATH is either defined using the X defaults or an environment variable.
The default value is ``tgificon.obj''.
.TP
.I Tgif*MaxColors: NUMBER
This specifies the maximum number of colors.  Color0 through ColorMax,
where Max is NUMBER-1, in X defaults are queried.  If NUMBER is greater
than the default of 11, Color11 through ColorMax \fImust\fR all exist
in X defaults.  Please see the GRAPHICAL OBJECTS section for a list of
the default colors.
.TP
.I Tgif*Color#: COLORSTRING
This specifies the correspondence between a color number and a color.
.TP
.I Tgif*DefaultColorIndex: NUMBER
This specifies the default color index if a certain color can not be found.
The default is 0.
.TP
.I Tgif*ShortCuts: ITEM1 ITEM2 ...
The ITEM specifies the correspondence between a key (may be case
sensitive) and a non-alphanumeric key command.  Please see
the SHORTCUTS section for details.
.TP
.I Tgif*MaxLineWidths: NUMBER
This specifies the maximum number of line widths.  LineWidth0 through
LineWidthMax, ArrowWidth0 through ArrowWidthMax, and ArrowHeight0
through ArrowHeightMax, where Max is NUMBER-1, in X defaults are
queried.  If NUMBER is greater than the default value of 7,
LineWidth7 through LineWidthMax, ArrowWidth7 through ArrowWidthMax,
and ArrowHeight7 through ArrowHeightMax
\fImust\fR all exist in X defaults.
Some default values will be used for those that are
not specified in the X defaults.
.TP
.I Tgif*DefaultLineWidth: NUMBER
This specifies the initial line width \fIindex\fR.
The default is 0.
.TP
.I Tgif*LineWidth#: NUMBER
This specifies a line width.
The default line widths are 1, 2, 3, 4, 5, 6, and 7.
.TP
.I Tgif*ArrowWidth#: NUMBER
This specifies the width (when the arrow is pointing horizontally)
of the arrow head for arc and open-spline objects.
The default arrow widths are 8, 10, 12, 14, 18, 20, and 22.
.TP
.I Tgif*ArrowHeight#: NUMBER
This specifies \fIhalf\fR the height (when the arrow is also pointing
horizontally) of the arrow head for arc and open-spline objects.
The default arrow heights are 3, 4, 5, 6, 7, 8, and 9.
.TP
.I Tgif*MaxDomains: NUMBER
This specifies the maximum number of domains.  DomainPath0 through
DomainPathMax, where Max is NUMBER-1, all must exist in X defaults.
.TP
.I Tgif*DomainPath#: DOMAINSTRING
This specifies the correspondence between a domain number, a domain name,
and the path associated with a domain.  DOMAINSTRING contains strings which are
separated by the ':' symbol.  The first string is the name of the domain.
Each of the rest of the strings specifies a directory where symbol files are to
be searched when the Instantiate command is executed (please see the
HOW TO MAKE A BUILDING-BLOCK OBJECT section for details).  Another way to
look at the DOMAINSTRING specification is that removing the first
string (which specifies the domain name) and the first ':' symbol, a
DOMAINSTRING has the form of the \fIPATH\fR csh(1) environment variable.
For example, to specify the symbol path for domain \fIDEFAULT\fR
to look for symbol files, first in the library directory /tmp/tgif/symbols,
then in the current directory,
DOMAINSTRING should be set to the following value:
.PP
.RS
.RS
DEFAULT:/tmp/tgif/symbols:.
.br
.RE
.RE
.br
.TP
.I Tgif*DefaultDomain: NUMBER
This specifies the default domain when tgif starts up.
The default is 0.
.TP
.I Tgif*StickyMenuSelection: [true,false]
If set to ``true'', when patterns/linewidths/linestyles/... of objects are
changed using a menu action, the corresponding
pattern/linewidth/linestyle/... becomes the current selection.
The default is false.
.TP
.I Tgif*PSBopHook: STRING
If specified, the following PostScript line is added at the beginning of
each page when printing to the printer or to a PS file,
.PP
.RS
.RS
userdict /STRING known { STRING } if
.br
.RE
.RE
.PP
.RS
This option should only be used if one is very familiar with PostScript.
(Setting STRING to "tgif-bop-hook" is recommanded since it would not have
a name conflict with existing software, such as dvips(1).)
.RE
.TP
.I Tgif*PSEopHook: STRING
If specified, the following PostScript line is added at the end of
each page when printing to the printer or to a PS file,
.PP
.RS
.RS
userdict /STRING known { STRING } if
.br
.RE
.RE
.PP
.RS
This option should only be used if one is very familiar with PostScript.
(Setting STRING to "tgif-eop-hook" is recommanded since it would not have
a name conflict with existing software, such as dvips(1).)
.RE
.TP
.I Tgif*ShowMeasurement: [true,false]
If set to 'true', the location of the cursor and the width and height
of the object begin drawn/dragged/stretched will be shown.
The default is false.
.TP
.I Tgif*MinimalEPS: [true,false]
If set to 'false', comments such as %%Pages, %%DocumentFonts, %%EndComments,
%%BeginProlog, %%EndProlog, %%Page, %%Trailer, and %%EOF will be generated
in an EPS output.  These comments may confuse certain ``document managers''.
Therefore, the default is true.
.TP
.I Tgif*InitialPrintInColor: [true,false]
If set to 'true', color output (printing) mode is enabled on startup.
The default is false.
.TP
.I Tgif*InitialShowGrid: [true,false]
If set to 'false', showing grid is disabled on startup.
The default is true.
.TP
.I Tgif*InitialSnapOn: [true,false]
If set to 'false', snapping to the grid points is disabled on startup.
The default is true.
.TP
.I Tgif*NoMenubar: [true,false]
If set to 'true', no menubar will be shown initially.
The default is false.
.TP
.I Tgif*NoStatusWindow: [true,false]
If set to 'true', no status window will be shown initially.
The default is false.
.TP
.I Tgif*ReverseMouseStatusButtons: [true,false]
If set to 'true', the left mouse status and the right mouse status are
swapped.  This should be used when a ``left-handed mouse'' is used.
The default is false.
.TP
.I Tgif*MinimalMenubar: [true,false]
If set to 'false', the menu items in the Menubar Window will be the
same as the main popup menu.  This would take up much more space.
If set to 'true', the Page, PageLayout, HoriAlign, VertAlign, and MoveMode
menus are collapsed into the View cascading menu; the Font, TextStyle, and
TextSize menus are collapsed into the Text cascading menu; and the LineDash,
LineStyle, LineType, LineWidth, Fill, and Pen menus are collapsed into the
Graphics cascading menu.
The default is true.
.TP
.I Tgif*ColorBgInPrintingColorPS: [true,false]
If set to 'true', the window background color is used as the background
color when generating color PostScript output.  If set to 'false',
no background color is used.
The default is false.
.TP
.I Tgif*ScrollBarWidth: NUMBER
This specifies the width of a scroll bar.
NUMBER must be between 2 and 16.  The default is 16.
.TP
.I Tgif*InitialPaperSize: STRING
The STRING specifies the initial width and height of the paper.
STRING is in the "<width> x <height>" form.  <width> and <height> is a
numeric value immediately followed by either "in" (inch) or "cm" (centi-meter).
The " x " that separate the <width> and <height> is mandatory.
If A4PAPER is defined in the Makefile, the default value is "21cm x 29.7cm".
If A4PAPER is not defined in the Makefile, the default value is "8.5in x 11in".
.TP
.I Tgif*UpdateChildUsingAlignment: [true,false,no_overlap]
If set to 'true' or 'no_overlap', when update_eps_child(), update_xbm_child(),
or update_xpm_child() internal command is executed, the current
horizontal and vertical alignments are used to place the EPS/XBM/XPM
subobject.  If the horizontal alignment is L, C, R, S, or -, the subobject
is aligned to the left, center, right, center, or left, respectively,
to the parent object.
If the vertical alignment is T, M, B, S, or -,
the subobject is placed above, middle, below, middle, or below the
parent object if this X default is set to 'no_overlap'; the
subobject is aligned to the top, middle, bottom, middle, or below the
parent object if this X default is set to 'true'.
If this X default is set to 'false', the subobject
is placed left aligned and below the parent object.
The default is false.
.TP
.I Tgif*GenerateImageMap: [true,false]
If set to 'true', NCSA \fIimagemap\fR or CERN \fIClickable Image\fR
files will be generated when print in GIF format.  In this case,
Tgif*XpmToGif, Tgif*ImageMapFileExtension, Tgif*GifFileExtension,
Tgif*ImageMapFileFormat, and Tgif*UseXPmVersion1ForImageMap X defaults,
described below, will be interpreted; otherwise, they are ignored.
Please see the section on
GENERATING NCSA IMAGEMAP AND CERN CLICKABLE IMAGE FILES for details.
The default is false.
.TP
.I Tgif*XpmToGif: STRING
The STRING specifies a command used to convert an XPM file to a GIF file.
The STRING \fImust\fR contain a \fI%s\fR substring to be replaced by the
full path name of the XPM file.
The default is "xpmtoppm %s | ppmtogif".
.TP
.I Tgif*ImageMapFileExtension: STRING
The STRING specifies the file extension for a imagemap file.
The default is "map".
.TP
.I Tgif*GifFileExtension: STRING
The STRING specifies the file extension for a gif file.
The default is "gif" (lower case).
.TP
.I Tgif*ImageMapFileFormat: [NCSA,CERN]
The STRING specifies either the NCSA imagemap or the CERN clickable image
format.
The default is NCSA for the NCSA imagemap format.
.TP
.I Tgif*UseXPmVersion1ForImageMap: [true,false]
The setting of this X default should depend on the setting of the
Tgif*XpmToGif X default above.
If set to 'true', XPM1 file is generated disregarding the setting of the
Tgif*XPmOutputVersion X default.
The default is true.
.TP
.I Tgif*UsePaperSizeStoredInFile: [true,false]
If set to ``true'', the paper size information stored in a just opened file
is used.
The default is false.
.TP
.I Tgif*OneMotionSelMove: [true,false]
If set to ``true'', one can select and move an object in one motion.
The default is false.
.TP
.I Tgif*TiffEPSI: [true,false]
If set to ``true'', a TIFF image will be appended to a generated EPSI file.
Please see the GENERATING EPSI FILE FOR SOME MICROSOFT WINDOWS APPLICATIONS
section for details.
The default is false.
.TP
.I Tgif*XbmToTiff: STRING
The STRING specifies a command used to convert an XBM file to a TIFF file.
The STRING \fImust\fR contain either one of two \fI%s\fR substring.  The
first \fI%s\fR substring is to be replaced by the full path name of the
XBM file.  The optional second \fI%s\fR substring is to be replaced by
the full path name of the generated TIFF image.
The default is "xbmtopbm %s | pnmtotiff -none > %s".
.TP
.I Tgif*EPSIExportExtension: STRING
STRING specifies the file extension used for exporting \fIEPSI\fR files.
The default is "eps".
.TP
.I Tgif*HotListFileName: STRING
STRING specifies a full path name of a file used to store the hot file list.
By default, this file is .Tgif_hotlist in the user's home directory.
.TP
.I Tgif*@@@Viewer: STRING
STRING specifies an external viewer for an remote URL with a file
extension of @@@.  STRING can be in 3 forms.  It can be the string "NONE"
to indicate that when such a remote file is encountered, tgif should retrieve
the file into a user specified directory.  For example, if one wishes to
retrieve .gz files, one can use:
.PP
.RS
.RS
Tgif*gzViewer: NONE
.br
.RE
.RE
.PP
.RS
STRING can also contain the string %S (S is capitalized), this indicates
that %S is to be replaced by the URL.  For example, if one wishes to
view .html files using xmosaic, one can use:
.RE
.PP
.RS
.RS
Tgif*htmlViewer: xmosaic %S
.br
.RE
.RE
.PP
.RS
Another form of STRING contains the string %s (S is lower-case),
this indicates that the remote file is
to be retrieved into a user specified directory
and view by a tool.  For example, if one wishes to
view .gif files using xv, one can use:
.RE
.PP
.RS
.RS
Tgif*gifViewer: xv %s
.br
.RE
.RE
.PP
.RS
Please note that this mechanism has precedence over the mechanism described
in the MIME TYPES AND MAILCAPS section above.
.RE
.TP
.I Tgif*AutoHyperSpaceOnRemote: [true,false]
If set to ``false'', tgif will not go into the \fIhyperspace\fR mode
when a remote URL is visited.
The default is true.
.TP
.I Tgif*AllowLaunchInHyperSpace: [true,false]
If set to ``true'', launching of applications is enabled in the
\fIhyperspace\fR mode when a remote URL is visited.  This is
potentially very dangerous because the application may do
catastrophic damages.  Therefore, it is strongly recommanded that it is
set to false.
The default is false.
.TP
.I Tgif*CanChangeAttrColor: [true,false]
If set to ``true'', color of an attribute can be changed when it is
attached to an object.
The default is false.
.TP
.I Tgif*MimeTypesFile: STRING
STRING specifies a full path name of the MIME-types file.  Tgif only
uses the type/subtype field in the MIME-types file and ignores all other
fields.
The default MIME-types file is \fI.mime.types\fR in user's home directory.
.TP
.I Tgif*LocalRGBTxt: STRING
If one would like to override certain system colors, one can use STRING
to specify a full path name of a file to be consulted first before
looking up the color in the server.  The file must be in the same format
as the \fIrgb.txt\fR file.  Namely, each line contains 4 fields, the
first 3 fields correspond to the red, green, and blue components of the
color, and the 4th field is the name of the color.  A color component
must have a value between 0 and 255 (inclusive).
.TP
.I Tgif*PrintUsingRequestedColor: [true,false]
If set to ``true'', the color PostScript file being printed will use the
\fIrequested\fR color instead of the color returned by the X server.
The default is false.
.TP
.I Tgif*ShowMeasurementUnit: [pixel,inch,cm]
The STRING specifies the unit used to display the measurement cursor.
The default is pixel.
.TP
.I Tgif*PageStyleLandscape: [true,false]
If set to ``true'', tgif comes up in landscape mode.
The default is false.
.TP
.I Tgif*QueryZoomInPoint: [true,false] or [always,no_select,no_query,never]
If set to ``true'' (or ``always''), the user will be asked to select a
center point when zooming in.  If set to ``no_select'', the user will
be asked to select a center point when zooming in if no objects are
selected.  If set to ``no_query'', the position of the mouse is the zoom-in
point.  In this case, it is not desirable to zooms in using a menu selection.
The default is false (or never).
.TP
.I Tgif*GUnZipCmd: STRING
The STRING specifies a command used to unzip a zipped \fIremote\fR tgif file
(with extension .obj.gz or .sym.gz) into a tgif file.  The command \fImust\fR
produce output into its stdout.  If the command contains a \fI%s\fR
substring, the \fI%s\fR will be replace by the full path name of a
temporary copy of the zipped file.
The default is "gunzip -c".
.TP
.I Tgif*HttpProxy: STRING
The STRING specifies a host name and a port number of a HTTP proxy server.
Format of the specification is \fI<host>:<port>\fR.  If \fI:<port>\fR is
omitted, 80 is used as the default port number.  The environment variable
\fIhttp_proxy\fR has precedence over this X default.
The default is not to use a HTTP proxy server.
.TP
.I Tgif*FtpProxy: STRING
The STRING specifies a host name and a port number of a FTP proxy server.
Format of the specification is \fI<host>:<port>\fR.  If \fI:<port>\fR is
omitted, 21 is used as the default port number.  The environment variable
\fIftp_proxy\fR has precedence over this X default.
The default is not to use a FTP proxy server.
.TP
.I Tgif*InitialArrowStyle: [NONE,RIGHT,LEFT,DOUBLE]
This specifies the initial arrow style for polyline/open-splines/arcs.
The default is RIGHT.
.TP
.I Tgif*ShowPageInEPS: [true,false]
If set to ``true'', a \fIshowpage\fR PostScript command will be generated
for an EPS or EPSI file.
The default is false.
.TP
.I Tgif*MaxNavigateCacheBuffers: NUMBER
This specifies the number of cache buffers allocated to cache remote files
(to minimize communication).
NUMBER must be non-negative.  The default is 40.
.TP
.I Tgif*NumberFileInPrintOnePage: [true,false]
If set to ``true'', when PrintOnePage from the Print Menu
is selected for a stacked multipage drawing (e.g., file.obj), file_\fIN\fR
with the proper file extension will be generated, where \fIN\fR corresponds
to the selected page number.
The default is false.
.TP
.I Tgif*OneMotionTimeout: NUMBER
When Tgif*OneMotionSelMove is set to true, moving an object is considered to
be making a selection if the elapse time between mouse-down and mouse-up is
smaller than the timeout value specified by this X default (in milliseconds).
The default is 200.
.TP
.I Tgif*MinMoveInterval: NUMBER
When Tgif*OneMotionSelMove is set to false, moving an object is considered to
be making a selection if the elapse time between mouse-down and mouse-up is
smaller than the interval specified by this X default (in milliseconds).
The default is 0.
.TP
.I Tgif*GifToXpm: STRING
The STRING specifies a command used to convert a GIF file to an XPM file.
The STRING \fImust\fR contain a \fI%s\fR substring to be replaced by the
full path name of the GIF file.
The default is "giftopnm %s | ppmtoxpm".
.TP
.I Tgif*InitExportPixelTrim: LEFT_NUMBER,TOP_NUMBER,RIGHT_NUMBER,BOTTOM_NUMBER
The numbers specify the number of pixels to trim when printing or exporting in
the XBM, XPM, or GIF format.  The use of these values forms an escape
mechanism to fix an idiosyncrasy that tgif can not figure out exactly
how big the whole image is.
The default values are all 0's.
.\"
.SH ENVIRONMENT VARIABLE
.\"
.TP
.I TGIFPATH
This environment variable should be set such that the files, mentioned in the
FILES section below, can be found.
.TP
.I TGIFICON
This environment variable should be set to the name of the object
file to be displayed when tgif is iconified.  By default, it is
set to ``tgificon''.
If it starts with a / character, absolute path is used; otherwise,
the icon file is assumed to be $TGIFPATH/$TGIFICON.
.TP
.I TGIF_[Domain]
\fIObsoleted\fR.
.\"
.SH FILES
.\"
$TGIFPATH/tgificon.obj contains the default tgif icon.
.br
.PP
$TGIFPATH/keys.obj contains a summary of the non-alphanumeric key
bindings.
.br
.\"
.SH PROLOG/C TESTDRIVE
.\"
In the tgif distribution, there are three Prolog files which illustrate
a simple Prolog driver.  \fItgif.pl\fR contains predicates for parsing
tgif files (both .obj and .sym).  \fIfrontend.pl\fR contains predicates
for talking to Prolog engines, such as that of Quintus and SISCtus,
through the foreign function interface.  To use frontend.pl,
\fIfrontend11.o\fR needs to be built (which requires the
\fIfrontend11.o\fR entry to be uncommented from the makefiles).
Finally, \fItestdrive.pl\fR contains a program which will print
out the ID files of all objects in the current drawing, if tgif
is escaped with the Solve() (or #s) command.  This is also
a good way of finding out the structure of a tgif file (especially
because the structure is not documented due to the complexity
introduced to keep tgif compatible with files created by older versions).
.PP
A very simple C driver, \fItestdrive.c\fR, is also provided with
the tgif distribution which
perform the same function as the Prolog driver.  The extra code present
in this file (and not present in tgif.c) is used to illustrate how
the in-memory objects and attributes can be traversed.
.\"
.SH SEE ALSO
.\"
\fBlatex\fR(1L), \fBlpr\fR(1), \fBenv\fR(1), \fBX\fR(1),
\fBdvips\fR(1), \fBcsh\fR(1), \fBpbmplus\fR(1), \fBbitmap\fR(1), \fBXPM\fR(1),
\fBxfontsel\fR(1), \fBxlsfonts\fR(1), \fBxgrabsc\fR(1), \fBxloadimage\fR(1),
\fBxsnap\fR(1), \fBsxpm\fR(1), \fBxv\fR(1), \fBpstoepsi\fR(1),
\fBMosaic\fR(1), \fBrand\fR(3C)
.\"
.SH IDIOSYNCRASIES
.\"
When any of the ``escape to driver'' commands are (accidentally)
executed, the current content of the drawing is saved into
``tmpmodel.obj'' if the drawing indicates that it is a .obj file;
then tgif escapes to the driver and returns right away.
If the drawing indicates that it is a .sym file, then the content
is saved into ``tmpmodel.sym'', but tgif does not return to the driver.
.PP
The paste operation works on a cut buffer generated by tgif or by non-tgif
tools (such as \fIxterm\fR).
If the cut buffer is \fInot\fR generated by tgif, its content is treated as
a collection of
ASCII character strings, which is inserted into the current drawing
as a text object (current settings for text objects are used
to create the text object).
If the cut buffer \fIis\fR generated by tgif, then all the current
settings are ignored.
.PP
The font sizes are the \fIscreen\fR font sizes (which correspond to
the X fonts that are used to draw the text on the screen).
They appear smaller on the printout.
When a 24 point text is printed, it would correspond to about a 13.5 point
PostScript text.  This is because tgif treats 128 pixels as an inch, and
PostScript treats 72 points as an inch.
.PP
Because characters supported by X11 and PostScript are different,
not all the characters, especially in the range 128 to 255 (or \\200 to \\377),
which are supported by X11, but are not accepted
by tgif.  Furthermore, in order to print the supported subset
or these characters, character codes must be re-encoded.
Therefore, if one would like to hack tgif to support other personalized fonts,
one should be careful about the re-encoding mechanism.
.PP
The grids are not absolute; they are specified as screen
pixels, and they scale with the current zoom.  For example,
if the grid is set at 16 pixels at maximum zoom, and if the
user zooms out once, objects can be drawn, moved, or stretched
at 16 screen pixel increments, but this corresponds to 32 pixels in the real
coordinate system.
.PP
If the vertical text spacing is set to negative values, highlighted
text will look a little strange due to XOR operations.
If the vertical text spacing is set to be greater than 100 or less
than -100, the panel window will not be cleared properly; to clear
the panel window, the user may have to close the tgif window and then
open it again.
.PP
As described in the TGIF SUBWINDOWS section,
in constrained move mode, if both endpoints of a not-selected polyline
lie inside the object being moved, then the whole polyline is moved.
This may look strange sometimes because,
for example, if one starts with a line segment pointing to an object,
just moving the object will caused the line segment to be ``stretched'';
however, if one eventually moves the object so that the other endpoint
is also inside the object, any future movement of the object will cause
the whole line segment to move (instead of just moving the original
endpoint).  The moving of the vertex which is the neighbor of
a moved endpoint may also look strange at times.
At this point, one should switch to the unconstrained move mode.
.PP
Another idiosyncrasy with respect to the
constrained move is that right after duplicating
an object, the constrained move is disabled temporarily because it is
assumed that at this point the user would want to move the
new object to a desirable position, and only after this new object is
``settled down'', the constrained move will be re-enabled.  Settling
down is signified by doing something other than moving the new
object.
.PP
Locked objects can be deleted.
.PP
Under the Edit Menu, PasteFromFile() reads a file into the drawing.
Pasting from a file is different from the normal pasting operation
where copying is performed in something like xterm because tabs are
automatically converted to spaces.  Tabs are ignored when pasting from a file.
.PP
When printing a multipage drawing, all pages (even the ones that contains
no objects) will be printed.  Using the PrintOnePage() command under the
Page Menu one can print the selected page (in \fIstacked\fR page layout mode,
this is the current page; in \fItiled\fR page layout mode, the user is
prompted to select a visible page).
.PP
Since tgif is using its own icon window, it may confuse certain
window managers.  If the effect is undesirable, one can set both the
Tgif*NoTgifIcon and the Tgif*UseWMIconPixmap X defaults to true.
.\"
.SH BUGS
.\"
There seems to be a problem with printing Courier fonts with
a non-solid pen on the Apple LaserWriter.  (Printing single
character does seem to work fine.)
As pointed out by the PostScript reference
manual, Courier is a ``stroked font'', and it is usually ``difficult'' to
construct character paths for such types of fonts.
However, Courier fonts work fine with ghostscript and dxpsview.
It's not clear how this problem can be fixed.  The author
recommends avoiding Courier fonts when printing in color
if a non-solid pen is desired.
.PP
Arcs with arrow tips don't look very sharp (the tip is not pointed
as in open-splines with arrow tips).
.PP
At high magnifications, \fIstretching\fR arcs may cause anomalous
behavior due to round off errors.
.PP
Copying/pasting large objects might not work because tgif does
not use the ``selection'' mechanism (yet).
.PP
If and when tgif crashes, it will try to save the
current content of the drawing in a file called
``EmergencySave.obj'' (or ``EmergencySave.sym'' if the current
drawing specifies a symbol object).
Often, the drawing can be restored by loading the ``EmergencySave.obj'' file.
Nevertheless, if the cause of
the crash is that some objects are corrupted (due to programming
bugs), then the ``EmergencySave.obj'' file may also be corrupted.
.PP
When launching an application, if the command does not end with the '&'
character and the command does not terminate, tgif also hangs.  In this
case, kill(1) should be used to send HUP signal to the tgif process if
one wants to save the content of tgif in ``EmergencySave.obj''.
.PP
The file \fIexec.c\fR may not compile properly on AIX machines.  You might
have to add -D_BSD to the DEFINES in either the Imakefile or Makefile.noimake.
.\"
.SH COPYRIGHT
.\"
Please see the ``Copyright'' file for details on the copyrights.
.PP
\fIPostScript\fR is a trademark of Adobe Systems Incorporated.
.\"
.SH STATUS
.\"
The current status of tgif can be obtained from tgif's
World-Wide-Web home page at <URL:http://bourbon.cs.ucla.edu:8001/tgif/>.
.\"
.SH AUTHOR
.\"
William Chia-Wei Cheng (william@cs.UCLA.edu)
.br
<URL:http://bourbon.cs.ucla.edu:8001/william/>
