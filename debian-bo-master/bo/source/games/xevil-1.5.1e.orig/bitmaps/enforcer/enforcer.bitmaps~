// Only included by actual.cc
#include "../../utils.h"
#include "../../coord.h"
#include "../../physical.h"
  
#include "enforcer_0"
#include "enforcer_0b"
#include "enforcer_1"
#include "enforcer_1b"
#include "enforcer_5"
#include "enforcer_dead"
  
#include "enforcer_mask_0"
#include "enforcer_mask_0b"
#include "enforcer_mask_1"
#include "enforcer_mask_1b"
#include "enforcer_mask_5"
#include "enforcer_mask_dead"


// Defines
#define ENFORCER_DAMAGE 25


Size Enforcer::get_size_max() 
{
  Size ret;
  ret.width = 30;
  ret.height = 30;
  return ret;
}



PhysicalP Enforcer::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new Enforcer(w,l,pos);
  assert(ret);
  return ret;
}



CreatureXdata Enforcer::creatureXdata;
GroundedXdata Enforcer::groundedXdata;
SuicideXdata Enforcer::suicideXdata;


const CreatureContext Enforcer::creatureContext = 
{ /** CreatureContext **/
  0, /* crawlSpeed */
  5, /* centerSpeed */
  12, /* airSpeed */
  0, /* climbSpeed */
  0,  /* jump */
  2,  /* acceleration */ 
  300, /* corpseHealth */

  False, /* biological */
  
  {30,15}, /* deadSize */
  {0,15}, /* deadOffset */
  (char *)enforcer_dead_bits, /* deadPixmapBits */
  (char *)enforcer_mask_dead_bits, /* deadMaskBits */
  
  {/** MovingContext **/
    "black",False,
    "red",True, 
    
    /* animMax */
    {2,2,1,1,1,1,
       0,
       0,0,
       0,
       0,0,
       0,
       0,0,
       0,
       0,0,
       0,
       0,0,
       1,1,
     },
    
    /* sizes */
    {{16,30},{16,30},{23,30},{23,30},{23,30},{23,30},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},          /* Must be    */
       {0,0},{0,0},  /* same size. */
       {23,30},{23,30},	
     },
    
    /* offsets */
    {{7,0},{7,0},{3,0},{3,0},{3,0},{3,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {0,0},
       {0,0},{0,0},
       {3,0},{3,0},
     },
    
    /* pixmapBits */
    {{(char *)enforcer_0_bits,(char *)enforcer_0b_bits},
       {(char *)enforcer_1_bits,(char *)enforcer_1b_bits},
       {(char *)enforcer_5_bits},{(char *)enforcer_5_bits},
       {(char *)enforcer_5_bits},{(char *)enforcer_5_bits},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {(char *)enforcer_5_bits},{(char *)enforcer_5_bits},
     },
    
    /* maskBits */
    {{(char *)enforcer_mask_0_bits,(char *)enforcer_mask_0b_bits},
       {(char *)enforcer_mask_1_bits,(char *)enforcer_mask_1b_bits},
       {(char *)enforcer_mask_5_bits},{(char *)enforcer_mask_5_bits},
       {(char *)enforcer_mask_5_bits},{(char *)enforcer_mask_5_bits},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {0},
       {0},{0},
       {(char *)enforcer_mask_5_bits},{(char *)enforcer_mask_5_bits},
     },
    {/** PhysicalContext **/
      400, /* health */
      500, /* mass */
      A_Enforcer, /* classId */
      "enforcer", /* clas */

      False, /* transmogifyTarget */
      True, /* doppelUser */
      False, /* potentialHuman */
      True, /* potentialEnemy */
      1, /* enemyWeight */
      False, /* potentialWeapon */
      False, /* potentialOtherItem */
      0, /* objectWorldPercent */
      Enforcer::get_size_max, /* get_size_max */
      Enforcer::create, /* create */
    },
  },
};



const GroundedContext Enforcer::groundedContext =
{ /** GroundedContext **/
  0, /* dummy */
};



const SuicideContext Enforcer::suicideContext =
{ /** SuicideContext **/
  0, /* dummy */
};
