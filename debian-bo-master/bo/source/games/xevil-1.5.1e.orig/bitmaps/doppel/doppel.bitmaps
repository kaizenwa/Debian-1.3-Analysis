#include "../../utils.h"
#include "../../physical.h"
#include "doppel"
#include "doppel_mask"


Size Doppel::get_size_max() 
{
  return context.itemContext.fallingContext.movingContext.sizes[CO_air];
}


PhysicalP Doppel::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new Doppel(w,l,pos);
  assert(ret);
  return ret;
}



AutoUseXdata Doppel::xdata;

const AutoUseContext Doppel::context = 
{ /** AutoUseContext **/
  True, /* humansOnly */
  
  { /** ItemContext **/
    True, /* persists */
    900, /* coolness */

    { /** FallingContext **/
      {/** MovingContext **/
	"purple",False,
	"cyan",True,
	
	/* animMax */
	{0,0,0,0,2},
      
	/* sizes */
	{{0,0},{0,0},{0,0},{0,0},{11,12},},
	
	/* offsets */
	{{0,0},{0,0},{0,0},{0,0},{0,0},},
	
	/* pixmapBits */
	{{0},{0},{0},{0},{(char *)doppel_bits,
			  (char *)doppel_mask_bits},},
	
	/* maskBits */
	{{0},{0},{0},{0},{(char *)doppel_mask_bits,
			  (char *)doppel_mask_bits}},
	
	{ /** PhysicalContext **/
	  10, /* health */
	  10, /* mass */
	  A_Doppel, /* classId */
	  "doppelganger", /* clas */

	  False, /* transmogifyTarget */
	  False, /* doppelUser */
	  False, /* potentialHuman */
	  False, /* potentialEnemy */
	  0, /* enemyWeight */
	  False, /* potentialWeapon */
	  True, /* potentialOtherItem */
	  .00002, /* objectWorldPercent */
	  Doppel::get_size_max, /* get_size_max */
	  Doppel::create, /* create */
	  False, /* statsCreations */
	  True, /* statsUses */
	  False, /* statsDeaths */
	  Doppel::get_stats, /* get_stats */
	},
      },
    },
  },
};
  
