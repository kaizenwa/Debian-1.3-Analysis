#include "../../utils.h"
#include "../../physical.h"

#include "weight"
#include "weight_mask"


Size Weight::get_size_max() 
{
  return context.fallingContext.movingContext.sizes[CO_air];
}


PhysicalP Weight::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new Weight(w,l,pos);
  assert(ret);
  return ret;
}



HeavyXdata Weight::xdata;


const HeavyContext Weight::context = 
{/** HeavyContext **/
  225, /* damage */
  
  {/** FallingContext **/
    {/** MovingContext **/
      "black",False,
      "azure",True,
      
      /* animMax */
      {0,0,0,0,1},
      
      /* sizes */
      {{0,0},{0,0},{0,0},{0,0},{14,16},},
      
      /* offsets */
      {{0,0},{0,0},{0,0},{0,0},{0,0},},
      
      /* pixmapBits */
      {{0},{0},{0},{0},{(char *)weight_bits},},
      
      /* maskBits */
      {{0},{0},{0},{0},{(char *)weight_mask_bits},},
      
      { /** PhysicalContext **/
	300, /* health */
	500, /* mass */
	A_Weight, /* classId */
	"weight", /* clas */

	False, /* transmogifyTarget */
	False, /* doppelUser */
	False, /* potentialHuman */
	False, /* potentialEnemy */
	0, /* enemyWeight */
	False, /* potentialWeapon */
	False, /* potentialOtherItem */
	0, /* objectWorldPercent */
	Weight::get_size_max, /* get_size_max */
	Weight::create, /* create */
	False, /* statsCreations */
	False, /* statsUses */
	False, /* statsDeaths */
	NULL, /* get_stats */
},
    },
  },
};
