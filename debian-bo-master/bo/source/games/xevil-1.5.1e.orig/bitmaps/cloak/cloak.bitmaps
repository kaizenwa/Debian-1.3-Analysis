#include "../../utils.h"
#include "../../physical.h"
#include "cloak"
#include "cloak_mask"


Size Cloak::get_size_max() 
{
  return context.itemContext.fallingContext.movingContext.sizes[CO_air];

}

PhysicalP Cloak::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new Cloak(w,l,pos);
  assert(ret);
  return ret;
}



AutoUseXdata Cloak::xdata;

const AutoUseContext Cloak::context = 
{ /** AutoUseContext **/
  True, /* humansOnly */
  
  { /** ItemContext **/
    True, /* persists */
    800, /* coolness */
    
    { /** FallingContext **/
      {/** MovingContext **/
	"black",False,
	"brown",True,
	
	/* animMax */
	{0,0,0,0,1},
	
	/* sizes */
	{{0,0},{0,0},{0,0},{0,0},{15,15},},
	
	/* offsets */
	{{0,0},{0,0},{0,0},{0,0},{0,0},},
	
	/* pixmapBits */
	{{0},{0},{0},{0},{(char *)cloak_bits},},
	
	/* maskBits */
	{{0},{0},{0},{0},{(char *)cloak_mask_bits},},
	
	{ /** PhysicalContext **/
	  10, /* health */
	  10, /* mass */
	  A_Cloak, /* classId */
	  "cloak", /* clas */

	  False, /* transmogifyTarget */
	  False, /* doppelUser */
	  False, /* potentialHuman */
	  False, /* potentialEnemy */
	  0, /* enemyWeight */
	  False, /* potentialWeapon */
	  True, /* potentialOtherItem */
	  .00002, /* objectWorldPercent */
	  Cloak::get_size_max, /* get_size_max */
	  Cloak::create, /* create */
	  False, /* statsCreations */
	  True, /* statsUses */
	  False, /* statsDeaths */
	  Cloak::get_stats, /* get_stats */
	},
      },
    },
  },
};

