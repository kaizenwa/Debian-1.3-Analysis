#include "../../utils.h"
#include "../../physical.h"
#include "f_thrower"
#include "f_thrower_mask"


#define F_THROWER_FIRE_TIME 7


Size FThrower::get_size_max() 
{
  return context.weaponContext.itemContext.fallingContext.movingContext.sizes[CO_air];
}


PhysicalP FThrower::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new FThrower(w,l,pos);
  assert(ret);
  return ret;
}



GunXdata FThrower::xdata;


const GunContext FThrower::context = 
{ /** GunContext **/
  1, /* shotTime */
  80, /* ammoInitial */
  150, /* ammoMax */

  { /** WeaponContext **/
    { /** ItemContext **/
      True, /* persists */
      900, /* coolness */

      { /** FallingContext **/
	{/** MovingContext **/
	  "black",False,
	  "blue2",True,
	  
	  /* animMax */
	  {0,0,0,0,1},
	  
	  /* sizes */
	  {{0,0},{0,0},{0,0},{0,0},{14,13},},
	  
	  /* offsets */
	  {{0,0},{0,0},{0,0},{0,0},{0,0},},
	  
	  /* pixmapBits */
	  {{0},{0},{0},{0},{(char *)f_thrower_bits},},
	  
	  /* maskBits */
	  {{0},{0},{0},{0},{(char *)f_thrower_mask_bits},},
	  
	  { /** PhysicalContext **/
	    5, /* health */
	    25, /* mass */
	    A_FThrower, /* classId */
	    "flame-thrower", /* clas */

	    False, /* transmogifyTarget */
	    False, /* doppelUser */
	    False, /* potentialHuman */
	    False, /* potentialEnemy */
	    0, /* enemyWeight */
	    True, /* potentialWeapon */
	    False, /* potentialOtherItem */
	    .0002, /* objectWorldPercent */
	    FThrower::get_size_max, /* get_size_max */
	    FThrower::create, /* create */
	    False, /* statsCreations */
	    False, /* statsUses */
	    False, /* statsDeaths */
	    NULL, /* get_stats */
	  },
	},
      },
    },
  },
};
