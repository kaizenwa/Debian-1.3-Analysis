#include "../../utils.h"
#include "../../physical.h"
#include "transmogifier"
#include "transmogifier_mask"


Size Transmogifier::get_size_max() 
{
  return context.itemContext.fallingContext.movingContext.sizes[CO_air];
}



PhysicalP Transmogifier::create(WorldP w,LocatorP l,const Pos &pos)
{
  PhysicalP ret = new Transmogifier(w,l,pos);
  assert(ret);
  return ret;
}



AutoUseXdata Transmogifier::xdata;

const AutoUseContext Transmogifier::context = 
{ /** AutoUseContext **/
  False, /* humansOnly */

  { /** ItemContext **/
    True, /* persists */
      
      { /** FallingContext **/
	{/** MovingContext **/
	  "black",True,
	    "brown2",False,
	    
	    /* animMax */
	    {0,0,0,0,1},
	    
	    /* sizes */
	    {{0,0},{0,0},{0,0},{0,0},{28,18},},
	    
	    /* offsets */
	    {{0,0},{0,0},{0,0},{0,0},{0,0},},
	    
	    /* pixmapBits */
	    {{0},{0},{0},{0},{(char *)transmogifier_bits},},
	    
	    /* maskBits */
	    {{0},{0},{0},{0},{(char *)transmogifier_mask_bits},},
	    
	    { /** PhysicalContext **/
	      5, /* health */
		2, /* mass */
		A_Transmogifier, /* classId */
		"transmogifier", /* clas */

	      False, /* transmogifyTarget */
	      False, /* doppelUser */
	      False, /* potentialHuman */
	      False, /* potentialEnemy */
	      0, /* enemyWeight */
	      False, /* potentialWeapon */
	      True, /* potentialOtherItem */
	      .00002, /* objectWorldPercent */
	      Transmogifier::get_size_max, /* get_size_max */
	      Transmogifier::create, /* create */
	      False, /* statsCreations */
	      True, /* statsUses */
	      False, /* statsDeaths */
	      Transmogifier::get_stats, /* get_stats */
	      },
	  },
	},
    },
};
