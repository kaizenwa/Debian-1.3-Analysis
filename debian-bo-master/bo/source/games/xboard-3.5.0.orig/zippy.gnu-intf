XBoard/GNU Chess Communication Protocol
Last modified on Mon Dec 16 13:26:15 PST 1996 by mann
==============================================================================

This document is a set of rough notes on the protocol that xboard uses to
communicate with gnuchessx.  These notes may be useful if you want to connect
a different chess program to xboard.

There are two reasons I can imagine someone wanting to do this: (1) You have,
or are developing, a Unix chess program but you don't want to write your own
graphical interface.  (2) You have, or are developing, a Unix chess program,
and you want to interface it to the Internet Chess Server.  

In case (2) you will need to configure the "Zippy" code into xboard.  See the
file zippy.README in the xboard distribution for more information.

The notes are very rough and are incomplete.  I have not had time to write up
anything better, because I have cut back my work on chess in order to leave
more time for other things in my life.  If you find yourself writing up better
documentation in the process of doing your work, I would appreciate it if you
would donate it back to the GNU project.

* * *

Basically, xboard is just trying to talk to the existing command-line
interface of gnuchess, designed for people to type commands to.  So the
communication protocol is very ad-hoc.  (The reason why there is a gnuchessx
that's different from gnuchessr is buried in the mists of time, before I
started working on xboard, but I think it was due to someone working around a
stupid bug in xboard by changing gnuchess instead of fixing the bug.  The
differences are tiny.)  It's now tough to change the interface, because xboard
and gnuchess are separate programs, and I don't want to force people to
upgrade them together to versions that match.

- At the beginning of each game, xboard sends an initialization string.  This
is currently always "new\nbeep\nrandom\neasy\n" unless you change it with the
-initString option.  Note \n is a newline character.

- After the initString, xboard expects your program to be ready to play Black.
If your program is to play White instead, xboard will send "white\ngo\n" to
request the program's first move.  This string can be changed with
-whiteString.

- Before sending each move, xboard may send an interrupt signal (SIGINT).
This is because GNU Chess thinks on its opponent's time.  The signal gets GNU
Chess to stop thinking and accept the move.  You can either catch the signal
in your program and use it the same way, or have your program ignore it.
Usually you can do the latter by calling signal(SIGINT, SIG_IGN) in your
program.

- When xboard sends your program a move, it always sends coordinate algebraic
notation, like this:

normal moves:    e2e4
pawn promotion:  e7e8q
castling:        e1g1

If your program can't handle this kind of output, change the routine
SendMoveToProgram in backend.c as needed.  In particular, the code below
causes standard abbreviated algebratic to be sent if GAZEBO is defined to 1.
(For example: e4, Nf3, exd5.)

void SendMoveToProgram(moveType, fromX, fromY, toX, toY, programPR, sendTime)
     ChessMove moveType;
     int fromX, fromY, toX, toY;
     ProcRef programPR;
     int sendTime;
{
    char user_move[MSG_SIZ];
    char promoChar = ToLower(PieceToChar(PromoPiece(moveType)));

#if GAZEBO
    (void) CoordsToAlgebraic(boards[forwardMostMove - 1],
			     FakeFlags(forwardMostMove - 1), EP_UNKNOWN,
			     fromY, fromX, toY, toX, promoChar, user_move);
#else
    if (promoChar == '.')
      sprintf(user_move, "%c%c%c%c\n",
              'a' + fromX, '1' + fromY, 'a' + toX, '1' + toY);
    else
      sprintf(user_move, "%c%c%c%c%c\n",
              'a' + fromX, '1' + fromY, 'a' + toX, '1' + toY,
              promoChar);
#endif /*!GAZEBO*/
    
    if (sendTime)
      SendTimeRemaining(programPR);
    SendToProgram(user_move, programPR);
    strcpy(moveList[forwardMostMove - 1], user_move);  /* note side-effect */
}

- When your program sends out a move, xboard looks for a format like this: 

1. ... e2e4

xboard requires the "..." even if your program is playing White.  This seems
illogical, but unfortunately it is an ingrained feature of the xboard/gnuchess
interface now.

For the actual move text from your chess program (in place of e2e4 above),
xboard will accept any kind of unambiguous algebraic format.  You don't have
to send the pure coordinate notation that xboard sends to your program.  (It
uses its general move parser, which was built to extract human-typed game
scores from netnews messages.)  For example, the following should all work:

    e2e4
    e4
    Nf3
    ed
    exd
    exd5
    Nxd5
    Nfd3
    e8q
    e8Q
    e8=q
    e8(Q)
    e7e8q
    o-o
    O-O
    0-0

and many more.

- xboard sends "time nnn" and "otim nnn" commands to set the chess program's
clocks, where "nnn" is the amount of time remaining in 1/100's of a second.
If you can't handle these commands, you can ignore them; or better, send back
"Illegal move: time" the first time you see "time", and xboard will realize
you don't implement the command.

- When the game is over, your program can output a string like "White mates",
"Black mates", or "Draw" so that xboard knows the game is ended.

- There are other commands xboard may send if you use the menu options in
xboard.  "force" is sent when xboard goes into EditGame mode; it causes GNU
Chess to accept moves for both sides and make no moves of its own.
"black\ngo\n" is sent to get GNU Chess to play Black when it was previously in
force mode or playing White. "white\ngo\n" is sent to get GNU Chess to play
White when it was previously in force mode.  There is an "edit" command used
for setting up the board when an EditPosition is complete, etc.

- xboard usually starts a new game by killing off the chess program and
starting a fresh copy.  It does this by sending the command "quit\n", then
sending the chess program a SIGTERM signal.  Sometimes it might just send the
initString (starting with a "new\n" command) and reuse the same instance of
the chess program.  I wanted to change it to always do the latter, but didn't
find the time.

- To diagnose problems, use the -debug flag to xboard to see the 
messages that are being exchanged. 

- You could also look at the file doc/CHESSTOOL in the gnuchess distribution, 
but it is so sketchy and out of date as to be pretty useless.

- Information about ICS time control:

Every ICS game has two parameters: (base, inc).  At the start of the game,
each player's clock is set to base minutes.  Immediately after a player makes
a move, inc seconds are added to his clock.  A player's clock counts down
while it is his turn.  Your flag can be called whenever your clock is zero or
negative.  (Your clock can go negative and then become positive again because
of the increment.)  A special rule: if you ask for a game with base=0, the
clocks really start at 10 seconds instead of 0.

ICS also has time odds games.  With time odds, each player has his own (base,
inc) pair, but otherwise things work the same as in normal games.  The Zippy
xboard accepts time odds games but ignores the fact that the opponent's
parameters are different; this is perhaps not quite the right thing to do, but
gnuchess doesn't understand time odds.  Time odds games are always unrated.

See the various help files on ICS for more details about what all the ICS
commands do, etc.  (See especially "help programmer" and "help style12".)

The Zippy xboard obtains the time control parameters from ICS when a new game
starts and passes them on to gnuchess using the "level" command.  gnuchess
understands ICS-style time controls.  They are specified with a command like:

    level 0 2 12

Here the 0 means "play the whole game in this time control period", the 2
means "base=2 minutes", and the 12 means "inc=12 seconds".

xboard also uses the gnuchess time and otim commands to keep the clocks more
closely synchronized.  They specify the computer's and opponent's current
clock time in units of 1/100 second.  For example,

    time 12345
    otim 23456

sets gnuchess's clock to 123.45 seconds and its opponent's clock to 234.56
seconds.

xboard always gives time and otim commands just before passing in a move from
the user.  This is done because giving any command to gnuchess makes it stop
its search.

- If you turn on -autoflag in xboard, xboard will automatically issue an ICS
"flag" command whenever it thinks your opponent's flag is down but yours is
not.  Due to netlag, xboard can be wrong about this.  (If both flags are down,
calling them would result in a draw, so xboard plays on instead.)

- xboard obtains the name of its opponent from ICS when a game starts and
stores it in the gameInfo struct.  (It's either gameInfo.white or
gameInfo.black depending on which color the opponent is playing.)  Zippy now
passes the name on to the chess program with the name command; for example,

    name mann

- xboard now obtains the ICS opponent's rating from the "Creating:" message
that appears before each game.  At this writing, only the ICC (chessclub.com)
generates this message, but it will appear on fics.onenet.net very soon, and on
other FICS sites whenever their administrators get around to picking up the
code change.  Zippy sends the ratings to the chess program using the "rating"
command.  The chess program's own rating comes first, and if either opponent is
not rated, his rating is given as 0.  For example,

    rating 2600 1500

- Zippy blindly issues an accept command for every challenge it gets, without
remembering anything about the challenge afterwards. This means that often it
will get several challenges very close together and try to accept them all!
ICS gives an error message for every accept command after the one that actually
starts a match, but xboard just happily ignores the message.  Zippy doesn't
actually start the chess program playing until the first board image comes in
from ICS.
