@ifinfo

This file documents version @value{VERSION} of @value{NAME}. 
@value{NAME} 
is a graphical chessboard that can serve as a
user interface to the GNU Chess and Crafty chess programs, the
Internet Chess Servers,
electronic mail correspondence chess, or your own collection of saved games.

Copyright (C) 1991 Digital Equipment Corporation, Maynard, Massachusetts.

All Rights Reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

Digital disclaims all warranties with regard to this software, including
all implied warranties of merchantability and fitness.  In no event shall
Digital be liable for any special, indirect or consequential damages or
any damages whatsoever resulting from loss of use, data or profits,
whether in an action of contract, negligence or other tortious action,
arising out of or in connection with the use or performance of this
software.

Enhancements copyright (C) 1992-96 Free Software Foundation, Inc.

Published by the Free Software Foundation
59 Temple Place - Suite 330
Boston, MA 02111-1307 USA

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License,''
is included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU General Public License,''
and this permission notice, may be included in translations approved by
the Free Software Foundation instead of in the original English.
@end ifinfo

@titlepage
@title @value{NAME}
@author Tim Mann
@author Jochen Wiedmann

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1991 Digital Equipment Corporation, Maynard, Massachusetts.

All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

Digital disclaims all warranties with regard to this software, including
all implied warranties of merchantability and fitness.  In no event shall
Digital be liable for any special, indirect or consequential damages or
any damages whatsoever resulting from loss of use, data or profits,
whether in an action of contract, negligence or other tortious action,
arising out of or in connection with the use or performance of this
software.

Enhancements copyright @copyright{} 1995 Free Software Foundation, Inc.

@format
Published by the Free Software Foundation
59 Temple Place - Suite 330
Boston, MA 02111-1307 USA
@end format

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU General Public License,'' is
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU General Public License,''
and this permission notice, may be included in
translations approved by the Free Software Foundation instead of in the
original English.

@end titlepage




@node Top
@top Introduction
@cindex introduction

This manual documents version @value{VERSION} of @value{NAME}.
@value{NAME}
is a graphical chessboard that can serve as a
user interface to the GNU Chess and Crafty chess programs, the
Internet Chess Servers,
electronic mail correspondence chess, or your own collection of saved games.

When this manual refers to "GNU Chess Mode", the information relates
to both the GNU Chess and Crafty chess programs.

@ifclear AMYBOARD
@menu
* Installation::    How to configure, compile and install @value{NAME}.
* Programs::        Other programs you can use with @value{NAME}.
* Invocation::      Command options supported by @value{NAME}.
* Menus::           Menus, Buttons and Keys.
* ICS::             Using @value{NAME} with an Internet Chess Server (ICS).
* Firewalls::       Connecting to the ICS through a firewall.
* CMail::           Using @value{NAME} for electronic correspondence chess.
* Environment::     Environment variables.
* Limitations::     Known limitations and/or bugs.
* Problems::        How and where to report any problems you run into.
* Contributors::    People who have helped developing @value{NAME}.
* Copying::         The GNU General Public License.

* Index::           Index of concepts and symbol names.
@end menu
@end ifclear
@ifset AMYBOARD
@menu
* Installation::    How to configure, compile and install @value{NAME}.
* Invocation::      Command options supported by @value{NAME}.
* Menus::           Menus, Buttons and Keys.
* ICS::             Using @value{NAME} with an Internet Chess Server (ICS).
* Limitations::     Known limitations and/or bugs.
* Problems::        How and where to report any problems you run into.
* Contributors::    People who have helped developing @value{NAME}.
* Copying::         The GNU General Public License.

* Index::           Index of concepts and symbol names.
@end menu
@end ifset

@ifset html
@node What is it?
@chapter What is it?
@cindex What is it?
@value{NAME}
is a graphical chessboard that can serve as a
user interface to the GNU Chess and Crafty chess programs, the
Internet Chess Servers,
electronic mail correspondence chess, or your own collection of saved games.
These Web pages document version @value{VERSION} of @value{NAME}.
@end ifset

@node Programs
@chapter Other programs you can use with @value{NAME}
@cindex Programs

Here are some other programs you can use with @value{NAME}

@menu
* GNU Chess::        The GNU Chess program
* Crafty::           The Crafty chess program
* zic2xpm::          The program used to import chess sets from ZIICS
@end menu

@node GNU Chess
@section GNU Chess

The GNU Chess program is available from:

ftp://prep.ai.mit.edu/pub/gnu/gnuchess*

(The version number changes fairly often, so I left it out. Just
get whatever the latest version is.)

You can use XBoard to play a game against GNU Chess, or to
interface GNU Chess to an ICS.

@node Crafty
@section Crafty

Crafty is a chess program written by Bob Hyatt (hyatt@@cis.uab.edu).
You can use XBoard to play a game against Crafty, hook Crafty up
to an ICS, or use Crafty to interactively analyze games and positions
for you.

To use Crafty with XBoard, give the -fcp option like this:

@example
     xboard -fcp "crafty xboard"   ... (other options) ...
@end example

Crafty is a rapidly evolving program, which is good for its development,
but sometimes bad for backwards compatibility. To make life simpler for
everyone, an "XBoard-supported" version of Crafty is being provided. This
version is guaranteed to work with XBoard. For details, see:

@example
     http://fly.hiwaay.net/~frankm/crafty.html
@end example

Or, if you only have FTP access, look in the directory:

@example
     ftp://gw2.maf.mobile.al.us/frankm/crafty
@end example

The "supported" version of Crafty includes some important changes
that make it work better with XBoard. You can of course always grab the
latest official version from:

@example
     ftp://ftp.cis.uab.edu/hyatt/crafty.tar.gz
@end example

But please be aware of the caveats described on the Web page
before reporting "bugs" to the XBoard developers.

@node zic2xpm
@section zic2xpm

The ``zic2xpm'' program is used to import chess sets from the ZIICS(*)
program into XBoard. ``zic2xpm'' is part of the XBoard distribution.
ZIICS is available from:

ftp://ftp.onenet.net/pub/chess/DOS/ziics131.exe


To import ZIICS pieces, do this:

@table @asis
@item 1. Unzip ziics131.exe into a directory:

@example
unzip -L ziics131.exe -d ~/ziics
@end example

@item 2. Use zic2xpm to convert a set of pieces to XBoard format.

For example, let's say you want to use the
FRITZ4 set. These files are named ``fritz4.*'' in the ZIICS distribution.

@example
mkdir ~/fritz4
cd ~/fritz4
zic2xpm ~/ziics/fritz4.*
@end example

@item 3. Now, either give XBoard the ``-xpm'' option when starting up, e.g.:

@example
xboard -xpm ~/fritz4    (... other options ...)
@end example

Or, add this line to your .Xdefaults file:

@example
xboard*xpmDirectory: ~/fritz4
@end example
@end table

(*) ZIICS is a separate Copyrighted work of Andy McFarland (Zek on ICS).
The ``ZIICS pieces'' are copyrighted works of their respective
creators. Files produced by ``zic2xpm'' are for PERSONAL USE ONLY
and may NOT be redistributed without explicit permission from
the original creator(s) of the pieces.

@node Installation
@chapter How to configure, compile and install @value{NAME}
@cindex Installation

@ifclear AMYBOARD
@value{NAME} is normally distributed as source, in a file with a name like
@file{xboard-*.tar.gz}.  You need to unpack this file and compile the results
with a C compiler.  

First, decide where you want to install the xboard executable program and
documentation.  The default is to put them under the @file{/usr/local}
directory tree.  If you want to put them somewhere else, such as under your
home directory, change the value in the @samp{--prefix} option below.

Use the following commands:

@example
gzip -cd xboard-*.tar.gz | tar -xvf -
cd xboard-*/
configure --prefix=/usr/local
make
make install
@end example

If you have any problems with these steps,
see the file @file{INSTALL} in the @value{NAME} distribution for
detailed instructions on options you can give to @code{configure},
and see the file @file{FAQ} for answers to frequently asked questions.

If everything works, you can delete the whole @file{xboard-*} directory after
@samp{make install} is done.
@end ifclear

@ifset AMYBOARD
@cindex AmyBoard.prefs
@cindex Preferences
@value{NAME} requires OS 2.04, 1 MB of RAM and MUI 2.0 or later.
To play against the Amiga you need GNU Chess installed. (Aminet,
@file{game/think} directory) To play on the ICS you need a telnet
program (AmiTCP/IP, AS225 or whatever else) reading from stdin and
writing to stdout or a modem and a terminal program using
stdin/stdout as well.

After unpacking the binary archive to @file{RAM:}, you should run the
installation script by doubleclicking the icon @file{Install}. This
icon assumes that you have the Commodore @file{Installer} in your
workbench path. If you still don't have the @file{Installer}, you can
get it from @code{Aminet}, @file{util/misc} directory.

Installation will be done in one directory, say @file{WORK:},
a subdirectory @file{AmyBoard} will be created. The binary
and some icons will be in @file{WORK:AmyBoard},
config files in @file{WORK:AmyBoard/lib}.
@footnote{This has the advantage that deinstalling AmyBoard is rather
easy: Just delete the @file{AmyBoard} drawer.
However, you won't do this, won't you? ;-)}
If you have a recent version of AmyBoard in the same directory, the
old config files and icons will be copied to
@file{WORK:AmyBoard/obsolete}, so that you can reuse
them.

Once the installation script is done, you should start AmyBoard with
the @file{Work:AmyBoard/AmyBoard} icon and the
@code{MUI} prefs. Change the colors and size of the board, the
location of the window until you like it, then save these settings
with the MUI prefs.

The installation script will create a preferences file
@file{AmyBoard.prefs} for you.
This file is assumed preliminary (though perfectly usable), it is a
good idea to edit and
modify it using your favorite text editor. Things you might wish
to change are:
@itemize
@item The colors; this is done by changing the pen numbers
@code{whitePiecePen}, @code{blackPiecePen}, @code{lightSquarePen}
and @code{darkSquarePen}. Registered MUI users should keep the
values -1 which indicate to use the default MUI colors
@code{Shinepen}, @code{Shadowpen}, @code{Halfshinepen} and
@code{Halfshadowpen}, respectively, and use the MUI prefs to change
the colors.
@item Path and memory requirements of the GNU Chess binary: More memory
improves the strength of GNU Chess. (The installation script already
did this for you.) The memory requirements are changed
with the arguments @code{-C} and @code{-T}:
@table @samp
@item -C 1001 -T 4001
about 1 MByte
@item -C 3001 -T 20001
about 2 MByte
@item -C 4001 -T 30001
about 2.5 MByte
@item -C 6001 -T 40001
@end table
@noindent
To tell @value{NAME} that the GNU Chess binary is in
@file{Fun:gnuchess-4.0.pl74} and you want it to allocate about
1 MByte RAM you would enter

@example
firstChessProgram=Fun:gnuchess-4.0.pl74/gnuchessx -C 1001 -T 4001
secondChessProgram=Fun:gnuchess-4.0.pl74/gnuchessx -C 1001 -T 4001
@end example

It is important to use the complete path here, as the AmigaDOS
function @code{LoadSeg} ignores your path settings.
@xref{GNU Chess options}.
@item The default time settings of GNU Chess: Variables
@code{movesPerSesssion} and @code{timeControl}.
@xref{GNU Chess options}.
@item Your favorite ICS host (@code{icsHost}) and port number
(@code{icsPort}). (You probably won't need to change the defaults,
as the installation script can create ICS icons for different
hosts, which override these settings.)
@xref{ICS options}.
@item The name of your telnet or terminal program. (Note, that this
@strong{must} use stdin and stdout!) The installation script
lets you select one. (Again, note that you have to use
the complete path.) @xref{ICS options}.
@xref{Serial ICS connection}.
@end itemize
@noindent
For the full set of @value{NAME}'s options see @ref{Invocation}.

Be sure, that the programs stack is no less than 10000 bytes. This
is especially important, when running the program from Toolmanager,
as the default value of Toolmanagers @code{Exec Objects} are
4096 bytes only.


If you would like to recompile @value{NAME}, you
currently need either @code{Dice} or @code{gcc}. Edit the
@file{Makefile}, remove the comments from your compilers switches
and comment the others in. @samp{DMake} or @samp{Make}, respectively,
 will do the compilation for you.

It shouldn't be a serious problem to use @code{SAS/C}, as I tried to
keep the code compatible. However, I cannot test it, as I don't have
this compiler. (Gifts welcome. :-) By using a Unix compatible front
end like @file{dev/c/cc.lha} from Aminet, you should even be able
to use the same @file{Makefile}.
@end ifset


@node Invocation
@chapter Command options supported by @value{NAME}
@cindex Invocation
@cindex Options
@ifset AMYBOARD
On Unix it is usual behavior to implement command options with names
like @samp{-v} (verbose) or @samp{-h} help. If a program like
@value{NAME} has lots of possible options, it makes sense to drop these
short option names and instead use option names like @samp{-verbose} or
@samp{-help}. This is almost like on the Amiga where one would use
@samp{verbose} or @samp{help}.

To be both compatible to XBoard and have a real Amiga program I decided
to allow both: With @value{NAME} you may use either @samp{-debug} or
@samp{debug}, whatever you want. Thus in the following words beginning
with a hyphen (@samp{-}) are option names, but you may omit the hyphen.
@end ifset

@value{NAME} always runs in one of 4 possible modes:
@table @asis
@item @value{LCNAME} [options]
starts @value{NAME} as a GNU chess interface. As an interface to GNU
Chess, @value{NAME} lets you play a game against the machine, set up
arbitrary positions, force variations, or watch a game between two
machines.
@item @value{LCNAME} -ics [options]
lets @value{NAME} act as an interface to the Internet Chess Server
(ICS). You can play against other ICS users, observe games they are
playing, or review games that have recently finished. @xref{ICS}
All the ``wild'' chess variants on ICS are supported, including bughouse.
@item @value{LCNAME} -ncp [options]
lets you use @value{NAME} as a simple chessboard to play through
games. It will read and write game files and allow you to play
through variations manually. You can use it to browse games off the
net or review GNU Chess, ICS, and correspondence games you have saved.
These features are available at all times, even if you do not have
access to GNU Chess or the ICS.
@ifclear AMYBOARD
If you want to pipe games into @value{NAME}, use the supplied
shell script @file{pxboard}.  For example, from the news reader @file{xrn},
find a message with one or more games in it,
click the Save button, and type @samp{|pxboard} as the file name.
@end ifclear
@item cmail
will use @value{NAME} as an interface to electronic mail
correspondence chess.
@ifclear AMYBOARD
@xref{CMail}.
@end ifclear
@ifset AMYBOARD
(This possibility is currently not given on the Amiga: @file{cmail}
is a @file{Perl} script which assumes a full mail setup, both
usually not given on the Amiga. Probably someone would be interested
in converting @file{cmail} into an @code{ARexx} script?
@end ifset
@end table

@ifclear AMYBOARD
Most of the @value{NAME} options have both a long name and a short
name. To turn a boolean option on or off from the command line,
either give its long name followed by the value @code{true} or
@code{false} (@samp{-longOptionName true}), or give just the short
name to turn the option on (@samp{-opt}), or the short name
preceded by @samp{x} to turn the option off (@samp{-xopt}). For
options that take strings or numbers as values, you can use the
long or short option names interchangeably.

Each option corresponds to an X resource with the same name, so
you can set options in your @samp{.Xdefaults} file if you like.
For options that have two names, the longer one is the name of
the corresponding X resource; the short name is not recognized
in @file{.Xdefaults}. To turn a boolean option on or off in your
@file{.Xdefaults} file, give its long name followed by the value
@code{true} or @code{false}:

@example
XBoard*longOptionName: true
@end example
@end ifclear

@ifset AMYBOARD
Most of the @value{NAME} options have both a long name and a short
name. You have three possibilities to set the options:
@enumerate
@item By editing the preferences file @file{PROGDIR:lib/AmyBoard.prefs},
where @file{PROGDIR:} indicates the directory of the @value{NAME}
binary. The lines of the file are interpreted as if they were
toolkit options, empty lines or lines beginning with a semicolon are
treated as comments.
@item By editing an icons toolkit options.
@item By supplying arguments with the CLI command line.
@end enumerate
@noindent
Of course toolkit options or CLI arguments override settings of the
prefs file.

The argument parsing behaves in general much like ReadArgs(), except for
boolean arguments which are a mixture of the /S and /T switches: In
general, they behave like /S arguments in the CLI, but like /T in the
toolkit options or in the prefs file. To be precise, you may use
something like

@example
amyboard ncp
@end example
@noindent
in the CLI (indicating that the value of ncp should be toggled), but not
as a toolkit option or as a prefs file entry: In that case you have to
explicitly state something like

@example
NCP true
@end example
@noindent
(For obvious reasons this version conflicts with the above.) However,
you may always write

@example
NCP=false
@end example
@noindent
As usual, option names are case-insensitive.
@end ifset

@menu
* GNU Chess options::           Controlling the chess program.
* ICS options::                 Connecting to and using ICS.
* I/O options::                 Load and Save options.
* User interface options::      Look and Feel options.
* Other options::               Miscellaneous.
@end menu


@node GNU Chess options
@section Controlling the chess program
@cindex options, Chess program
@cindex Chess program options
These options apply to both the GNU Chess and Crafty programs.
@table @asis
@item -tc or -timeControl minutes[:seconds]
@cindex tc, option
@cindex timeControl, option
Each player begins with his clock set to the @code{timeControl} period.
Default: 5 minutes.
The additional options @code{movesPerSession} and @code{timeIncrement}
are mutually exclusive.  

@item -mps or -movesPerSession moves
@cindex mps, option
@cindex movesPerSession, option
When both players have made @code{movesPerSession} moves, a
new @code{timeControl} period is added to both clocks.  Default: 40 moves.

@item -inc or -timeIncrement seconds
@cindex inc, option
@cindex timeIncrement, option
If this option is specified, @code{movesPerSession} is ignored.
Instead, after each player's move, @code{timeIncrement} seconds are
added to his clock.  
Use @samp{-inc 0} if you want to require the entire
game to be played in one @code{timeControl} period, with no increment.
Default: -1, which specifies @code{movesPerSession} mode.

@ifclear AMYBOARD
@item -clock or -clockMode
@cindex clock, option
@cindex clockMode, option
Determines whether or not to display the chess clocks. If clockMode is
@samp{false}, the clocks are not shown, but the side that is to play next
is still highlighted. Also, unless @code{searchTime} or @code{searchDepth}
is set, the chess program still keeps track of the clock time and uses it to
determine how fast to make its moves.
@end ifclear

@item -st or -searchTime minutes[:seconds]
@cindex st, option
@cindex searchTime, option
Tells the chess program to spend at most the given amount of time
searching for each of its moves. Without this option, the chess program
chooses its search time based on the number of moves and amount
of time remaining until the next time control.
@ifclear AMYBOARD
Setting this option also sets @code{clockMode} to false.
@end ifclear

@item -sd or -searchDepth number
@cindex sd, option
@cindex searchDepth, option
Tells the chess program to look ahead at most the given number of moves
when searching for a move to make. Without this option, the chess
program chooses its search depth based on the number of moves and
amount of time remaining until the next time control.
@ifclear AMYBOARD
Setting this option also sets @code{clockMode} to false.
@end ifclear

@item -thinking or -showThinking
@cindex thinking, option
@cindex showThinking, option
If this option is set, the chess program's notion of the score and best
line of play from the current position is displayed as it is
thinking. The score indicates how many pawns ahead (or if negative,
behind) the chess program thinks it is. In matches between two
machines, the score is prefixed by @samp{W} or @samp{B} to indicate
whether it is showing White's thinking or Black's.

@item -mm or -matchMode
@cindex mm, option
@cindex matchMode, option
Automatically runs a game between two chess programs.  If the
@code{loadGameFile} or @code{loadPositionFile} option is set,
@value{NAME} starts
the game with the given opening moves or the given position;
otherwise, the game starts with the standard initial chess position.
If the @code{saveGameFile} option is set, a move record for the
match is appended to the specified file. If the @code{savePositionFile}
option is set, the final position reached in the match is appended
to the specified file. When the match is over, @value{NAME}
exits. Default: false.

@item -fcp or -firstChessProgram program
@cindex fcp, option
@cindex firstChessProgram, option
Name of first chess program.  In matches between two machines,
this program plays Black. Default: @file{gnuchessx}.

@item -scp or -secondChessProgram program
@cindex scp, option
@cindex secondChessProgram, option
Name of second chess program, if needed. In matches between two
machines, this program plays White; otherwise it is not started.
Default: @file{gnuchessx}.

@ifclear AMYBOARD
@item -fh or -firstHost host
@itemx -sh or -secondHost host
@cindex fh, option
@cindex firstHost, option
@cindex sh, option
@cindex secondHost, option
Hosts on which the chess programs are to run. The default for
each is @file{localhost}. If you specify another host, @value{NAME}
uses @file{rsh} (1) to run the chess program there. (You can substitute a
different remote shell program for rsh using the @code{remoteShell}
option described below.)
@end ifclear

@item -initString string
@cindex initString, option
The string that is sent to initialize the chess program.
Default:

@example
new
beep
random
easy
@end example
@noindent
Setting this option from the command line is tricky, because you must
type in real newline characters, including one at the very end.
In most shells you can do this by
entering a @samp{\} character followed by a newline. It is easier to set
the option from your @file{.Xdefaults} file; in that case you can
include the character sequence @samp{\n} in the string, and it will
be converted to a newline.

If you change this option, don't remove the @samp{new} and @samp{beep}
commands. You can remove the @samp{random} command if you like;
including it causes GNU Chess to randomize its move selection
slightly so that it doesn't play the same moves in every game.
(Even without @samp{random}, GNU Chess randomizes its choice of moves
from its opening book.) You can also remove @samp{easy} if you like;
including it toggles easy mode off, causing GNU Chess to think
on your time. That is, if @samp{easy} is included in the initString,
GNU Chess thinks on your time; if not, it does not. (Yes, this
does seem backwards, doesn't it!) You can also try adding other
commands to the initString; see the GNU Chess documentation for
details.

@item -whiteString string
@itemx -blackString string
@cindex whiteString, option
@cindex blackString, option
These options control what is sent when the Machine White and
Machine Black buttons are selected. This is mostly for compatibility
with obsolete versions of GNU Chess.

@ifset AMYBOARD
@item -childPriority
@itemx -childStack
@cindex childPriority, option
@cindex childStack, option
set the respective settings of the process to be created for GNU Chess.
Note, that the GNU Chess task requires a relatively big stack, compared
to true Amiga programs: Do not use less than 50000 bytes. By increasing
GNU Chess's memory requirements you probably increase it's stack
requirements too: Thus you might need to change the default of 100000
bytes.@footnote{It would have been possible to compile GNU Chess with
dynamic stack checking. However, this would give overhead with
@strong{every} function call and result in a drastical loss of playing
strength, so I decided not to use this feature.}
@end ifset
@end table


@node ICS options
@section Connecting to and using ICS
@cindex ICS options
@cindex Options, ICS
@table @asis
@item -ics or -internetChessServerMode
@cindex ics, option
@cindex internetChessServerMode, option
Connect with an Internet Chess Server to play chess against its
other users, observe games they are playing, or review games
that have recently finished. Default: false.
To use @value{NAME} in ICS mode, run it in the foreground, and use the
terminal you started it from to type commands and receive text
responses from the chess server.
@xref{ICS}. @xref{File Menu}. @xref{Step Menu}.
@xref{Mode Menu}.

@item -icslogon or -internetChessServerLogonScript file-name
@cindex icslogon, option
@cindex internetChessServerLogonScript, option
@cindex .icsrc
Whenever @value{NAME} connects to the Internet Chess Server,
if it finds a file with the name given in this option, it feeds the
file's contents to the ICS as commands. The default file name
is
@ifclear AMYBOARD
@file{.icsrc}.
@end ifclear
@ifset AMYBOARD
@file{PROGDIR:lib/.icsrc}.
@end ifset
Usually the first two lines of the file should be
your ICS user name and password.
@ifclear AMYBOARD
The file can be either in $CHESSDIR, in @value{NAME}'s working
directory if CHESSDIR is not set, or in your home directory.
@end ifclear
@ifset AMYBOARD
The file name can be either absolute or relative to @file{PROGDIR:} or
@file{ENV:}. Due to a problem which I did not figure out yet, it may
be needed to add a empty line at the top of @file{.icsrc}.
@end ifset

@item -msLoginDelay delay
@cindex msLoginDelay, option
If you experience trouble logging on to an ICS when using the
@code{-icslogon} option, inserting some delay between characters
of the logon script may help. This option adds @code{delay}
milliseconds of delay between characters. Good values to try
are 100 and 250.

@item -icsinput or -internetChessServerInputBox
@cindex icsinput, option
@cindex internetChessServerInputBox, option
If this option is True in ICS mode,
@value{NAME}
creates an extra window that you can use for typing in ICS commands.
The input box is especially useful if you want to type in something long or do
some editing on your input, because output from ICS doesn't get mixed
in with your typing as it would in the main terminal window.

@item -autocomm or -autoComment
@cindex autocomm, option
@cindex autoComment, option
If @code{autoComment} is True, any remarks made on ICS while you are observing or
playing a game are recorded as a comment on the current move.  This includes
remarks made with the ICS commands @kbd{say}, @kbd{tell}, @kbd{whisper},
and @kbd{kibitz}.
Limitation: remarks that you type yourself are not recognized;
@value{NAME} scans only the output from ICS, not the input you type to it.
Default: False.

@item -autoflag or -autoCallFlag
@cindex autoflag, option
@cindex autoCallFlag, option
If @code{autoCallFlag} is true and your opponent runs out of time
before you do, @value{NAME} will automatically call his flag, claiming
a win on time (or a draw if you do not have mating material).
Default: false.

@item -autobs or -autoObserve
@cindex autobs, option
@cindex autoObserve, option
If @code{autoObserve} is true and you add a player to your @code{gnotify}
list on ICS, @value{NAME} will automatically observe all of that
player's games, unless you are doing something else (such as
observing or playing a game of your own) when one starts.
The games are displayed 
from the point of view of the player on your gnotify list; that is, his
pawns move from the bottom of the window towards the top.
Exceptions:  If both players in a game are on your gnotify list, if
your ICS 
@code{highlight}
variable is set to 0, or if the ICS you are using does not 
properly support observing from Black's point of view,
you will see the game from White's point of view.
Default: false.

@item -moves or -getMoveList
@cindex moves, option
@cindex getMoveList, option
If getMoveList is True, whenever @value{NAME}
receives the first board of a new game (or a different game from
the one it is currently displaying), it
retrieves the list of past moves from the ICS.
You can then review the moves with the @samp{Forward} and @samp{Backward}
commands
or save them with @samp{Save Game}.  Default: true.  You might want to
turn off this option if you are observing several blitz games at once,
to keep from wasting time and network bandwidth fetching the move lists over
and over.

@item -quiet or -quietPlay
@cindex quiet, option
@cindex quietPlay, option
If this option is true, @value{NAME} will automatically issue an ICS

@example
set shout 0
@end example
@noindent
command whenever you start a game and a

@example
set shout 1
@end example
@noindent
command whenever you finish one.  Thus, you will not be distracted
by shouts from other ICS users while playing. Default: false.

@item -icshost or -internetChessServerHost host
@cindex icshost, option
@cindex internetChessServerHost, option
The Internet host name or address of the chess server to connect
to when in ICS mode. Default: @code{chessclub.com}. See the file
@file{ics-addresses} in the @value{NAME}
@ifclear AMYBOARD
source
@end ifclear
distribution for a list of other addresses to try. See also the
output of the command

@example
finger chess@@ics.onenet.net
@end example
@noindent
If your site doesn't have a working Internet name server, try
specifying the host address in numeric form. The address of
@code{chessclub.com} is @samp{192.231.221.16}; that of
@code{ics.onenet.net} is 164.58.253.10.

@item -icsport or -internetChessServerPort port-number
@cindex icsport, option
@cindex internetChessServerPort, option
The port number to use when connecting to a chess server in ICS
mode. Default: 5000.

@ifclear AMYBOARD
@item -gateway host-name
@cindex gateway, option
If this option is set to a host name, @value{NAME} uses @file{rsh} (1) to run
the @file{telnet} (1) program on the given host to communicate with the
Internet Chess Server instead of using its own internal implementation
of the telnet protocol. You can substitute a different remote shell
program for @file{rsh} using the @code{remoteShell} option described below.
@xref{Firewalls}.
@end ifclear

@ifclear AMYBOARD
@item -telnet or -useTelnet
@cindex telnet, option
@cindex useTelnet, option
If this option is set to true, @value{NAME} runs the @file{telnet} (1)
program to communicate with the Internet Chess Server. If the option is
false (the default), @value{NAME} opens a TCP socket and uses its own
internal implementation of the telnet protocol to communicate with the
ICS. @xref{Firewalls}.
@end ifclear

@item -telnetProgram prog-name
@cindex telnetProgram, option
This option gives the name of the telnet program to be used with
the gateway and @code{useTelnet} options.  The default is
@file{telnet}. The telnet program is invoked with the value of
@code{internetChessServerHost} as its first argument and the value
of @code{internetChessServerPort} as its second argument.
@ifclear AMYBOARD
@xref{Firewalls}.
@end ifclear

@ifset AMYBOARD
Of course you are not forced to use a certain telnet program, in fact
the only requirement is, that the program reads input from stdin and
writes to stdout. For example, you might wish to use a terminal
program, if you don't have a @code{SLIP} or @code{PPP} connection.
@xref{Serial ICS connection}.
@end ifset

@ifclear AMYBOARD
@item -internetChessServerCommPort or -icscomm dev-name
@cindex internetChessServerCommPort, option
@cindex icscomm, option
If this option is set, @value{NAME} communicates with the ICS through
the given character I/O device instead of opening a TCP connection.
Use this option if your system does not have any kind of
Internet connection itself (not even a SLIP or PPP connection),
but you do have dialup access (or a hardwired terminal line) to
an Internet service provider from which you can telnet to the
ICS.

The support for this option in @value{NAME} is minimal. You need to
set all communication parameters and tty modes before you enter
@value{NAME}.

Use a script something like this:

@example
stty raw -echo 9600 > /dev/tty00
@value{LCNAME} -ics -icscomm /dev/tty00
@end example

Here replace @samp{/dev/tty00} with the name of the device that your
modem is connected to. You might have to add several more
options to these stty commands. See the man pages for @file{stty} (1)
and @code{tty} (4) if you run into problems. Also, on many systems stty
works on its standard input instead of standard output, so you
have to use @samp{<} instead of @samp{>}.

If you are using linux, try starting with the script below.
Change it as necessary for your installation.

@example
####################################################
#!/bin/sh -f
# configure modem and fire up @value{NAME}

# configure modem
(
  stty 2400 ; stty raw ; stty hupcl ; stty -clocal
  stty ignbrk ; stty ignpar ; stty ixon ; stty ixoff
  stty -iexten ; stty -echo
) < /dev/modem
@value{LCNAME} -ics -icscomm /dev/modem
####################################################
@end example
@noindent
After you start @value{NAME} in this way, type whatever commands are
necessary to dial out to your Internet provider and log in.
Then telnet to ICS, using a command like

@example
telnet chessclub.com 5000
@end example
@noindent
Important: See the paragraph below about extra echoes, 
in @ref{Limitations}.
@end ifclear

@ifset AMYBOARD
@item -icsWindow
@cindex icsWindow, option
is a specification of a window to open for ICS input/output. This is
especially useful, if you start @value{NAME} from Workbench: The CLI
window is used otherwise. Note that setting this option @strong{forces}
a separate window, even if you start the program from the CLI. However,
@value{NAME} does not detach from the CLI (except when using
@kbd{Run >nil: <nil:}), thus you better set this option in the icon
toolkits only.
@end ifset
@end table


@node I/O options
@section Load and Save options
@cindex Options, I/O
@cindex I/O options
@table @asis
@item -lgf or -loadGameFile file
@itemx -lgi or -loadGameIndex index
@cindex lgf, option
@cindex loadGameFile, option
@cindex lgi, option
@cindex loadGameIndex, option
If the @code{loadGameFile} option is set, @value{NAME} loads the specified
game file at startup. The file name @file{-} specifies the standard
input. If there is more than one game in the file, @value{NAME}
pops up a menu of the available games, with entries based on their PGN tags.
If the @code{loadGameIndex} option is set to @samp{N}, the menu is suppressed
and the N th game found in the file is loaded immediately.
The menu is also suppressed if @code{matchMode} is enabled or if the game file
is a pipe; in these cases the first game in the file is loaded immediately.
@ifset XBOARD
Use the @file{pxboard} shell script provided with @value{NAME} if you
want to pipe in files containing multiple games and still see the menu.
@end ifset

@item -td or -timeDelay seconds
@cindex td, option
@cindex timeDelay, option
Time delay between moves during @samp{Load Game}. Fractional seconds
are allowed; try @samp{-td 0.4}. A time delay value of -1 tells
@value{NAME} not to step through game files automatically. Default: 1
second.

@item -sgf or -saveGameFile file
@cindex sgf, option
@cindex saveGameFile, option
If this option is set, @value{NAME} appends a record of every game
played to the specified file. The file name @file{-} specifies the
standard output.

@item -autosave or -autoSaveGames
@cindex autosave, option
@cindex autoSaveGames, option
If this option is true, at the end of every game @value{NAME} prompts
you for a file name and appends a record of the game to the file
you specify. Ignored if @code{saveGameFile} is set. Default: false.

@item -lpf or -loadPositionFile file
@itemx -lpi or -loadPositionIndex index
@cindex lpf, option
@cindex loadPositionFile, option
@cindex lpi, option
@cindex loadPositionIndex, option
If the @code{loadPositionFile} option is set, @value{NAME} loads the
specified position file at startup. The file name @file{-} specifies the
standard input. If the @code{loadPositionIndex} option is set to N,
the Nth position found in the file is loaded; otherwise the
first position is loaded.

@item -spf or -savePositionFile file
@cindex spf, option
@cindex savePositionFile, option
If this option is set, @value{NAME} appends the final position reached
in every game played to the specified file. The file name @file{-}
specifies the standard output.

@item -oldsave or -oldSaveStyle
@cindex oldsave, option
@cindex oldSaveStyle, option
If this option is false (the default), @value{NAME} saves games in PGN
(portable game notation) and positions in FEN (Forsythe-Edwards
notation).  If the option is true, a save style that is compatible
with older versions of @value{NAME} is used instead.
@end table


@node User interface options
@section Look and Feel options
@cindex User interface options
@cindex Options, User interface
@table @asis
@ifclear AMYBOARD
@item -display
@itemx -geometry
@itemx -iconic
@cindex display, option
@cindex geometry, option
@cindex iconic, option
These are just the standard Xt options accepted by @value{NAME}.
@end ifclear

@item -bell or -ringBellAfterMoves
@cindex bell, option
@cindex ringBellAfterMoves, option
If this option is true, @value{NAME} alerts you by ringing the
terminal bell after each of your opponent's moves (or after every
move if you are observing a game on the Internet Chess Server).
The bell is not rung after moves you make or moves read from a
saved game file. Default: false.

If you turn on this option when using @value{NAME} with the Internet
Chess Server, you will probably want to give the

@example
set bell 0
@end example
@noindent
command to the ICS, since otherwise the ICS will ring the bell
itself after every move (not just yours). (The @file{.icsrc} file
is a good place for this, @pxref{ICS options})

@item -queen or -alwaysPromoteToQueen
@cindex queen, option
@cindex alwaysPromoteToQueen, option
If this option is false (the default), @value{NAME} brings up a dialog
box whenever you move a pawn to the last rank, asking what piece
you want to promote it to. If the option is true, your pawns are
always promoted to queens. (Your opponent can still underpromote,
however.)

@item -legal or -checkLegality
@cindex legal, option
@cindex checkLegality, option
If this option is true (the default), 
@value{NAME}
checks whether moves you try to make with the mouse are legal, and
refuses to let you make an illegal move.  If the option is false,
you can make any move.  If GNU Chess, Crafty, or the ICS is active,
they will still reject illegal moves.  Turning off this option is
useful if you are playing a chess variant with rules that 
@value{NAME}
does not understand.

@ifclear AMYBOARD
@item -size or -boardSize (Large | Medium | Small | Tiny | n1,n2,n3,n4,n5,n6)
@cindex size, option
@cindex boardSize, option
@cindex board size
Determines how large the board will be.
The Large board uses 80x80 pieces, Medium 64x64, Small 40x40, and Tiny 21x21.
Piece bitmaps of all these sizes are built into @value{NAME}.
The default depends on the size of your screen; it is approximately the
largest size that will fit without clipping.

You can select other sizes or vary other layout parameters by providing
a list of comma-separated values (with no spaces) as the argument.
The @code{n1} value gives the piece size, 
@code{n2} the width of the black border
between squares, @code{n3} the preferred pixel size for the 
clockFont, @code{n4} the preferred pixel size for the coordFont,
@code{n5} the smallLayout flag (0 or 1), 
and @code{n6} the tinyLayout flag (0 or 1).  
If smallLayout is 1 and @code{titleInWindow} is True, 
the window layout is rearranged to make more room for the title.
If tinyLayout is 1, the labels on the menu bar are abbreviated
to one character each, the buttons in the button bar are made narrower,
and a smaller default font is used.
You do not need to provide all the values; for any you omit from the
end of the list, defaults are taken from the nearest built-in size.
@end ifclear
@ifset AMYBOARD
@item -size or -boardSize (Huge | Large | Medium | Small | Tiny)
@cindex size, option
@cindex boardSize, option
@cindex board size
Determines how large the board will be and what built-in piece
bitmaps will be used. On a huge board (the default), pieces
are 80x80 pixels, on a large board 64x64 pixels, and on a medium
board 40x40 pixels. Small (44x22) and tiny (44x19) boards are for
PAL and NTSC HighRes displays, respectively.

Note, that you better adjust this by simply resizing the window
and using the MUI prefs to fix a certain window size. That way you can
determine the windows size and position and not only the chessboards
resolution.
@end ifset

@item -coords or -showCoords
@cindex coords, option
@cindex showCoords, option
If this option is true, @value{NAME} displays algebraic coordinates
along the board's left and bottom edges. The default is false.
@ifclear AMYBOARD
The @code{coordFont} option specifies what font to use.
@end ifclear
@ifset AMYBOARD
MUI's tiny font, which you can select with the MUI prefs, will be used.
@end ifset

@item -flip or -flipView
@cindex flip, option
@cindex flipView, option
If you are playing a game on the ICS, the board is always
oriented at the start of the game so that your pawns move from
the bottom of the window towards the top. 
Otherwise, the starting orientation is
determined by the flipView option; if it is false (the default),
White's pawns move from bottom to top at the start of each game;
if it is true, Black's pawns move from bottom to top.

@ifclear AMYBOARD
@item -title or -titleInWindow
@cindex title, option
@cindex titleInWindow, option
If this option is true, @value{NAME} displays player names (for ICS
games) and game file names (for @samp{Load Game}) inside its main
window. If the option is false (the default), this information is
displayed only in the window banner. You probably won't want to
set this option unless the information is not showing up in the
banner, as happens with a few X window managers.
@end ifclear

@ifclear AMYBOARD
@item -mono or -monoMode
@cindex mono, option
@cindex monoMode, option
Determines whether @value{NAME} displays its pieces and squares with
two colors (true) or four (false). You shouldn't have to
specify @code{monoMode}; @value{NAME} will determine if it is necessary.
@end ifclear

@ifclear AMYBOARD
@item -borderXoffset
@itemx -borderYoffset
@cindex borderXoffset, option
@cindex borderYoffset, option
These options are part of a kludge that helps position the Comment
and Edit Comment windows in the same place on the screen when they
are closed and reopened. They should be set equal to
the width and height of the borders that your X window manager
adds to windows when it displays them. The defaults are correct
for @file{tvtwm} (1).
@end ifclear

@ifclear AMYBOARD
@item -flashCount count
@item -flashRate rate
@cindex flashCount, option
@cindex flashRate, rate
These options control whether pieces flash after landing on their
destination square. For example, to have pieces flash 3 times at
a rate of 5 flashes/second, you would say:

@example
      xboard -flashCount 3 -flashRate 5  ... (other options) ...
@end example

Or, just put them in your .Xdefaults file so you don't have to
give the command line options every time:

@example
      xboard*flashCount: 3
      xboard*flashRate: 5
@end example
@end ifclear

@ifclear AMYBOARD
@item -clickClick
@cindex clickClick, option
When "Click-Click" mode is enabled (-clickClick True), you move pieces
by first clicking on the piece, then clicking on the destination square.
When "Click-Click" mode is disabled (the default) you move pieces by
clicking on the piece, "dragging" it to the destination square, and
releasing the mouse button to drop it.
@end ifclear

@ifclear AMYBOARD
@item -clockFont
@cindex clockFont, option
@cindex Font, clock
The font used for the clocks. If the option value is a pattern
that does not specify the font size, @value{NAME} tries to choose an
appropriate font for the board size being used.
Default: -*-helvetica-bold-r-normal--*-*-*-*-*-*-*-*.
@end ifclear

@ifclear AMYBOARD
@item -coordFont
@cindex coordFont, option
@cindex Font, coordinates
The font used for rank and file coordinate labels if @code{showCoords}
is true. If the option value is a pattern that does not specify
the font size, @value{NAME} tries to choose an appropriate font for
the board size being used.
Default: -*-helvetica-bold-r-normal--*-*-*-*-*-*-*-*.
@end ifclear

@ifclear AMYBOARD
@item -font
@cindex font, option
@cindex Font
The font used for popup dialogs, menus, comments, etc.
If tinyLayout is true (e.g., if "-size Tiny" is specified), the default is
-*-helvetica-medium-r-normal--11-*-*-*-*-*-*-*.  Otherwise, the default is
-*-helvetica-medium-r-normal--14-*-*-*-*-*-*-*.
@end ifclear

@item -bm or -bitmapDirectory
@cindex bm, option
@cindex bitmapDirectory, option
By default, @value{NAME} uses a set of compiled-in bitmaps for its
pieces, icons, and menu checkmark.
If the @code{bitmapDirectory} option is set at runtime,
bitmaps are taken from files in the specified directory.
If any bitmap file is missing or unusable, @value{NAME}
looks for a built-in bitmap of the required type and size instead.

Files in the @code{bitmapDirectory} must be named as follows:
The first character of a piece bitmap name gives the piece it 
represents (@samp{p}, @samp{n}, @samp{b}, @samp{r}, @samp{q}, or @samp{k}),
the next characters give the size in pixels, the
following character indicates whether the piece is
solid or outline (@samp{s} or @samp{o}),
and the extension is @samp{.bm}.
For example, a solid 80x80 knight would be named @file{n80s.bm}.
The outline bitmaps are used only in monochrome mode.
The icons are named @file{icon_white.bm} and @file{icon_black.bm}, and the
menu checkmark is named @file{checkmark.bm}.

Two sets of bitmaps are distributed with @value{NAME}. Those in the
directory @file{bitmaps} are normally compiled in as the default.
Those in the @file{bitmaps.xchess} directory can be selected at runtime
with the @code{bitmapDirectory} option. If you want to compile in the
latter set as the default, rename the @file{bitmaps} directory to
@file{bitmaps.fselch} and the @file{bitmaps.xchess} directory to
@file{bitmaps}; then recompile @value{NAME}.
If you want to add another compiled-in size, edit the @file{bitmaps.h} file
in the bitmaps directory, and
optionally edit @file{xboard.h} to associate a name and default layout
parameters with your new size.

@ifclear AMYBOARD
@item -xpm directory
@cindex xpm, option
Instead of bitmaps, @value{NAME} can use X pixmaps as its piece images.
If the xpmDirectory option is set, pixmaps are taken from files in
the specified directory.  The directory may contain multiple sizes
of pieces. @value{NAME} will choose the closest based either on screen
size or on the size option.

You can also specify this option in your .Xdefaults file like this:

@example
     xboard*xpmDirectory: ~/pieces
@end example

For more information about XPM pieces, see @ref{zic2xpm}
@end ifclear

@ifclear AMYBOARD
@item -colorizeMessages or -colorize
@cindex Colors
@cindex colorize, option
Setting colorizeMessages
to True tells XBoard to colorize the messages received from
the ICS.  Colorization works only if your xterm 
supports ISO 6429 escape sequences for changing text colors.

@item -colorShout foreground,background,bold
@item -colorSShout foreground,background,bold
@item -colorChannel1 foreground,background,bold
@item -colorChannel foreground,background,bold
@item -colorKibitz foreground,background,bold
@item -colorTell foreground,background,bold
@item -colorChallege foreground,background,bold
@item -colorNormal foreground,background,bold
@cindex Colors
@cindex colorShout, option
@cindex colorSShout, option
@cindex colorChannel1, option
@cindex colorChannel, option
@cindex colorKibitz, option
@cindex colorTell, option
@cindex colorChallenge, option
@cindex colorNormal, option
These options set the colors used when colorizing ICS messages.
All ICS messages are grouped into one of these categories:
shout, sshout, channel 1, other channel, kibitz, tell, challenge, normal.

Each foreground or background argument can be one of the following:
black, red, green, yellow, blue, magenta, cyan, white, or default.
Here ``default'' means the default foreground or background color of
your xterm.  Bold can be 1 or 0.  If background is omitted, ``default''
is assumed; if bold is omitted, 0 is assumed.

Here is an example of how to set the colors in your @file{.Xdefaults} file.
The colors shown here are the default values; you will get
them if you turn @code{-colorize} on without specifying your own colors.
@example
    xboard*colorizeMessages: true	
    xboard*colorShout: green
    xboard*colorSShout: green, black, 1
    xboard*colorChannel1: cyan
    xboard*colorChannel: cyan, black, 1
    xboard*colorKibitz: magenta, black, 1
    xboard*colorTell: yellow, black, 1
    xboard*colorChallenge: red, black, 1
    xboard*colorNormal: default
@end example
@end ifclear

@ifclear AMYBOARD
@item -whitePieceColor
@item -blackPieceColor
@item -lightSquareColor
@item -darkSquareColor
@cindex Colors
@cindex whitePieceColor, option
@cindex blackPieceColor, option
@cindex lightSquareColor, option
@cindex darkSquareColor, option
Colors to use for the pieces and squares.
Defaults:
@example
-whitePieceColor    #FFFFCC
-blackPieceColor    #202020
-lightSquareColor   #C8C365
-darkSquareColor    #77A26D
@end example

On a grayscale monitor you might prefer:
@example
-whitePieceColor    gray100
-blackPieceColor    gray0
-lightSquareColor   gray80
-darkSquareColor    gray60
@end example
@end ifclear

@ifset AMYBOARD
@item -wpp or -whitePiecePen
@item -bpp or -blackPiecePen
@item -lsp or -lightSquareColor
@item -dsp or -darkSquareColor
@cindex Colors
@cindex Pens
@cindex wpp, option
@cindex whitePiecePen, option
@cindex bpp, option
@cindex blackPiecePen, option
@cindex lsp, option
@cindex lightSquarePen, option
@cindex dsp, option
@cindex darkSquarePen, option
Pen specifications, defaults are -1, in which case MUI's @code{Shine-},
@code{Shadow-}, @code{Halfshine-} and @code{Halfshadowpen},
respectively, will be used. Thus you'd better use the MUI prefs to fix
these settings.
@end ifset
@end table


@node Other options
@section Miscellaneous
@cindex Options, miscellaneous
@table @asis

@item -ncp or -noChessProgram
@cindex ncp, option
@cindex noChessProgram, option
If this option is true, @value{NAME} acts as a passive chessboard; it
does not start a chess program at all. Turning on this option
also turns off clockMode. Default: false.

@item -debug or -debugMode
@cindex debug, option
@cindex debugMode, option
Turns on debugging printout.

@ifclear AMYBOARD
@item -rsh or -remoteShell shell-name
@cindex rsh, option
@cindex remoteShell, option
Name of the command used to run programs remotely. The default
is @file{rsh} or @file{remsh}, determined when @value{NAME} is
configured and compiled.
@end ifclear

@ifclear AMYBOARD
@item -ruser or -remoteUser user-name
@cindex ruser, option
@cindex remoteUser, option
User name on the remote system when running programs with the
@code{remoteShell}. The default is your local user name.
@end ifclear
@end table


@node Menus
@chapter Menus, buttons and keys
@cindex Menus
To move a piece, drag it with the left mouse button.
To drop a new piece on a
square (when applicable), press the 
@ifclear AMYBOARD
middle or right mouse button over the square
@end ifclear
@ifset AMYBOARD
left mouse button over the square while holding down the @key{Shift} key,
@end ifset
and select from the popup menu.

All other @value{NAME} commands are available from the menu bar. The most
frequently used commands also have shortcut keys or on-screen buttons.

@ifclear AMYBOARD
@menu
* File Menu::       Accessing external games and positions.
* Mode Menu::       Selecting @value{NAME}'s mode.
* Action Menu::     Talking to the chess program or ICS opponents.
* Step Menu::       Controlling the game.
* Options Menu::    User preferences.
* Help Menu::       Getting help.
* Keys::            Other shortcut keys.
@end menu
@end ifclear

@ifset AMYBOARD
@menu
* File Menu::       Accessing external games and positions.
* Mode Menu::       Selecting @value{NAME}'s mode.
* Action Menu::     Talking to GNU Chess or ICS opponents.
* Step Menu::       Controlling the game.
* Options Menu::    User preferences
* Help Menu::       Getting help.
@end menu
@end ifset


@node File Menu
@section Accessing external games and positions
@cindex File Menu
@cindex Menu, File
@table @asis
@item Reset
@cindex Reset, Menuitem
Resets @value{NAME} and the chess program to the beginning of a new chess
game. The @samp{r} key is a keyboard equivalent. In Internet Chess
Server mode, clears the current state of @value{NAME}, then
resynchronizes with ICS by sending a refresh command. If you want to
stop playing, observing, or examining a game on ICS, use an
appropriate command from the Action menu, not @samp{Reset}. @xref{Action
Menu}.

@item Load Game
@cindex Load Game, Menuitem
Plays a game from a record file. The @samp{g} key is a keyboard equivalent.
@ifclear AMYBOARD
A popup dialog prompts you for the file name. If the file contains more
than one game, a second popup dialog
@end ifclear
@ifset AMYBOARD
An ASL requester prompts you for the file name. If the file contains more
than one game, a window
@end ifset
displays a list of games (with information drawn from their PGN tags, if
any), and you can select the one you want. Alternatively, you can load the
Nth game in the file directly, by typing the number @samp{N} after the
file name, separated by
@ifclear AMYBOARD
a space.
@end ifclear
@ifset AMYBOARD
the @samp{,} character.
@end ifset

The game file parser will accept PGN (portable game notation),
or in fact almost any file that contains moves in algebraic
notation. 
Notation of the form @samp{P@@f7}
is accepted for piece-drops in bughouse games;
this is a nonstandard extension to PGN.
If the file includes a PGN position (FEN tag), or an
@value{NAME} position diagram bracketed by @samp{[--} and @samp{--]}
before the first move, the game starts from that position. Text
enclosed in parentheses, square brackets, or curly braces is assumed to
be commentary and is displayed in a pop-up window. Any other
text in the file is ignored. PGN variations (enclosed in
parentheses) are treated as comments; @value{NAME} is not able to walk
variation trees.

@item Load Next Game
@cindex Load Next Game, Menuitem
Loads the next game from the last game record file you loaded.
The shifted @samp{N} key is a keyboard equivalent.
Not available if the last game was loaded from a pipe.

@item Load Previous Game
@cindex Load Previous Game, Menuitem
Loads the previous game from the last game record file you
loaded.  The shifted @samp{P} key is a keyboard equivalent.
Not available if the last game was loaded from a pipe.

@item Reload Same Game
@cindex Reload Same Game, Menuitem
Reloads the last game you loaded.

@item Load Position
@cindex Load Position, Menuitem
Sets up a position from a position file.  A popup dialog prompts
you for the file name. If the file contains more than one saved
position, and you want to load the Nth one, type the number N
after the file name, separated by a space. Position files must
be in FEN (Forsythe-Edwards notation), or in the format that the
Save Position command writes when oldSaveStyle is turned on.

@item Save Game
@cindex Save Game, Menuitem
Appends a record of the current game to a file.
@ifclear AMYBOARD
A popup dialog
@end ifclear
@ifset AMYBOARD
An ASL requester
@end ifset
prompts you for the file name. If the game did not begin with
the standard starting position, the game file includes the
starting position used. Games are saved in the PGN (portable
game notation) format, unless the oldSaveStyle option is true,
in which case they are saved in an older format that is specific
to @value{NAME}. Both formats are human-readable, and both can be
read back by the @samp{Load Game} command.
Notation of the form @samp{P@@f7}
is accepted for piece-drops in bughouse games;
this is a nonstandard extension to PGN.

@item Save Position
@cindex Save Game, Menuitem
Appends a diagram of the current position to a file.
@ifclear AMYBOARD
A popup dialog
@end ifclear
@ifset AMYBOARD
An ASL requester
@end ifset
prompts you for the file name. Positions are saved in
FEN (Forsythe-Edwards notation) format unless the @code{oldSaveStyle}
option is true, in which case they are saved in an older,
human-readable format that is specific to @value{NAME}. Both formats
can be read back by the @samp{Load Position} command.

@item Mail Move
@item Reload CMail Message
@cindex Mail Move, Menuitem
@cindex Reload CMail Message, Menuitem
See @ref{CMail}.

@ifset AMYBOARD
@item About
@cindex About, Menuitem
Shows the current @value{NAME} version number.
@end ifset

@item Exit
@cindex Exit, Menuitem
Exits from @value{NAME}. The shifted @samp{Q} key is a keyboard equivalent.
@end table


@node Mode Menu
@section Selecting @value{NAME}'s mode
@cindex Menu, Mode
@cindex Mode Menu
@table @asis
@item Machine White
@cindex Machine White, Menuitem
Forces the chess program to play White.

@item Machine Black
@cindex Machine Black, Menuitem
Forces the chess program to play Black.

@item Two Machines
@cindex Two Machines, Menuitem
Plays a game between two computer programs.

@ifclear AMYBOARD
@item Analysis Mode
@cindex Analysis Mode, Menuitem
XBoard with Crafty only.
For information on getting Crafty, see @ref{Crafty}.

XBoard tells Crafty to start analyzing the current game/position
and shows you the analysis as you move pieces around.

To setup a position to analyze, you do the following:

1. Select Edit Position from the Mode Menu

2. Setup the position (use the right and middle buttons to
bring up the Black/White piece menus).

3. When you are finished, click on either the Black or White
clock to tell XBoard which side moves first.

4. Select Analysis Mode from the Mode Menu to start the analysis.

@item Analyze File
@cindex Analyze File, Menuitem
XBoard with Crafty only.
For information on getting Crafty, see @ref{Crafty}.

This option lets you load a game from a file (PGN, XBoard format, etc.)
and analyze it. When you select this menu item, a popup window appears
and asks for a filename to load.
If the file contains multiple games, another popup appears that lets
you select which game you wish to analyze.
After a game is loaded, use the XBoard arrow buttons to step
forwards/backwards through the game and watch Crafty's analysis.
@end ifclear

@item ICS Client
@cindex ICS Client, Menuitem
ICS mode only. Takes @value{NAME} out of the Edit Game or
Edit Position state.

While you are examining a game on the ICS, you can issue the ICS
position-editing commands with the mouse. Do this with @samp{ICS
Client} selected on the Mode menu, not @samp{Edit Position}; the latter
edits only your local copy of the position.

@ifclear AMYBOARD
To drop a new piece on a square, press mouse button 2 or 3 over
the square. This brings up a menu of white pieces (button 2) or
black pieces (button 3).
@end ifclear
@ifset AMYBOARD
To drop a new piece on a square, press the left mouse button on the
square while holding down the @key{Shift} key. This brings up a menu
of white and black pieces.
@end ifset
Additional menu choices let you empty the square or clear the board.
You cannot set the side to play or drag pieces to arbitrary squares
while examining on ICS, however; the ICS permits only legal moves
in this mode.

If you are playing a bughouse game on the ICS, you can drop an offboard piece
@ifclear AMYBOARD
by pressing mouse button 2 or 3 over an empty square to bring up a piece menu.
It makes no difference which button you use.  
@end ifclear
@ifset AMYBOARD
by pressing the left mouse button over an empty square while holding
down the @key{Shift} key.  This brings up a menu of droppable pieces.
@end ifset
A list of the offboard pieces
each player has available is shown in the window title after the player's name.

@item Edit Game
@cindex Edit Game, Menuitem
Allows you to make moves for both Black and White, and to change
moves after backing up with the @samp{Backward} command. The clocks do
not run.

In GNU Chess mode, the chess program continues to check moves for legality
but does not participate in the game. You can bring the chess program
into the game by selecting @samp{Machine White}, @samp{Machine Black},
or @samp{Two Machines}.

In ICS mode, the moves are not sent to the ICS: @samp{Edit Game} takes
@value{NAME} out of ICS Client mode and lets you edit games locally.
If you want to edit games on ICS in a way that other ICS users
can see, use the ICS examine command or start an ICS match
against yourself.

@item Edit Position
@cindex Edit Position, Menuitem
Lets you set up an arbitrary board position.
@ifclear AMYBOARD
Use mouse button 1 to drag pieces to new squares, or to delete a piece
by dragging it off the board or dragging an empty square on top of it.
To drop a new piece on a square, press mouse button 2 or 3 over the
square. This brings up a menu of white pieces (button 2) or
black pieces (button 3). Additional menu choices let you empty the
square or clear the board. You can set the side to play next by
clicking on the White or Black indicator at the top of the screen.
@end ifclear
@ifset AMYBOARD
Use the left mouse button to drag pieces to new squares, or to delete a
piece by dragging it off the board or dragging an empty square on top of
it. To drop a new piece on a square, press the left mouse button while
holding down the shift key. This brings up a menu of white and black
pieces. Additional menu choices let you empty the square, clear the
board or set the side to play next.
@end ifset
Selecting @samp{Edit Position} causes @value{NAME} to discard
all remembered moves in the current game.

In ICS mode, changes made to the position by @samp{Edit Position} are
not sent to the ICS: @samp{Edit Position} takes @value{NAME} out of
@samp{ICS Client} mode and lets you edit positions locally. If you want to
edit positions on ICS in a way that other ICS users can see, use
the @samp{ICS examine} command, or start an ICS match against yourself.
(See also the ICS Client topic above.)

@item Show Game List
@cindex Show Game List, Menuitem
Shows or hides the list of games generated by the last @samp{Load Game}
command.

@item Edit Tags
@cindex Edit Tags, Menuitem
Lets you edit the PGN (portable game notation)
tags for the current game. After editing, the tags must still conform to
the PGN tag syntax:

@example
<tag-section> ::= <tag-pair> <tag-section>
                        <empty>
<tag-pair> ::= [ <tag-name> <tag-value> ]
<tag-name> ::= <identifier>
<tag-value> ::= <string>
@end example
@noindent
See the PGN Standard for full details. Here is an example:

@example
[Event "Portoroz Interzonal"]
[Site "Portoroz, Yugoslavia"]
[Date "1958.08.16"]
[Round "8"]
[White "Robert J. Fischer"]
[Black "Bent Larsen"]
[Result "1-0"]
@end example
@noindent
Any characters that do not match this syntax are silently ignored. Note that
the PGN standard requires all games to have at least the seven tags shown
above. Any that you omit will be filled in by @value{NAME}
with @samp{?} (unknown value), or @samp{-} (inapplicable value).

@item Edit Comment
@cindex Edit Comment, Menuitem
Adds or modifies a comment on the current position. Comments are
saved by @samp{Save Game} and are displayed by @samp{Load Game},
@samp{Forward}, and @samp{Backward}.

@item ICS Input Box
@cindex ICS Input Box, Menuitem
Shows or hides the ICS input box.  
See the internetChessServerInputBox option.  ICS mode only.

@item Pause
@cindex Pause, Menuitem
Pauses updates to the board, and if you are playing against a chess program,
also pauses your clock. To continue, select @samp{Pause} again, and the
display will automatically update to the latest position.
The @samp{P} button and keyboard @samp{p} key are equivalents.

If you select Pause when you are playing against a chess program and
it is not your move, the chess program's clock
will continue to run and it will eventually make a move, at which point
both clocks will stop. Since board updates are paused, however,
you will not see the move until you exit from Pause mode (or select Forward).
This behavior is meant to simulate adjournment with a sealed move.

If you select Pause while you are in
@code{examine} mode on ICS, you can step backward and forward in the
current history of the examined game without affecting the other observers
and examiners. Select Pause again to reconnect yourself to the current state
of the game on ICS.

If you select @samp{Pause} while you are loading a game, the game stops
loading. You can load more moves manually by selecting @samp{Forward}, or
resume automatic loading by selecting @samp{Pause} again.
@end table


@node Action Menu
@section Talking to GNU chess or ICS opponents
@cindex Menu, Action
@cindex Action, Menu
@table @asis
@item Accept
@cindex Accept, Menuitem
Accepts a pending match offer. If there is more than one offer
pending, you will have to type in a more specific command
instead of using this menu choice. ICS mode only.

@item Decline
@cindex Decline, Menuitem
Declines a pending offer (match, draw, adjourn, etc.). If there
is more than one offer pending, you will have to type in a more
specific command instead of using this menu choice. ICS mode only.

@item Call Flag
@cindex Call Flag, Menuitem
Calls your opponent's flag, claiming a win on time, or claiming
a draw if you are both out of time. You can also call your
opponent's flag by clicking on his clock or by pressing the
keyboard @samp{t} key.

@item Draw
@cindex Draw, Menuitem
Offers a draw to your opponent, accepts a pending draw offer
from your opponent, or claims a draw by repetition or the 50-move
rule, as appropriate. The @samp{d} key is a keyboard equivalent.
Not available in GNU Chess mode.

@item Adjourn
@cindex Adjourn, Menuitem
Asks your opponent to agree to adjourning the current game, or
agrees to a pending adjournment offer from your opponent. ICS
mode only.

@item Abort
@cindex Abort, Menuitem
Asks your opponent to agree to aborting the current game, or
agrees to a pending abort offer from your opponent. An aborted
game ends immediately without affecting either player's rating.

@item Resign
@cindex Resign, Menuitem
Resigns the game to your opponent. The shifted @samp{R} key is a
keyboard equivalent.

@item Stop Observing
@cindex Stop Observing, Menuitem
Ends your participation in observing a game, by issuing the ICS
observe command with no arguments. ICS mode only.

@item Stop Examining
@cindex Stop Examining, Menuitem
Ends your participation in examining a game, by issuing the ICS
unexamine command. ICS mode only.
@end table


@node Step Menu
@section Controlling the game
@cindex Step Menu
@cindex Menu, Step
@table @asis
@item Backward
@cindex Backward, Menuitem
@cindex <, Button
Steps backward through a series of remembered moves.
The @samp{[<]} button and the @samp{b} key are equivalents.
In addition, pressing the Control key steps back one move, and releasing
it steps forward again.

In most modes, @samp{Backward} only lets you look back at old positions;
it does not retract moves. This is the case if you are playing against
a chess program, playing or observing a game on the ICS, or loading a game.
If you select @samp{Backward} in any of these situations, you will not
be allowed to make a different move. Use @samp{Retract Move} or
@samp{Edit Game} if you want to change past moves.

If you are examining a game on ICS, the behavior of @samp{Backward}
depends on whether @value{NAME} is in Pause mode. If Pause mode is
off, @samp{Backward} issues the ICS backward command, which backs up
everyone's view of the game and allows you to make a different
move. If Pause mode is on, @samp{Backward} only backs up your local
view.

@item Forward
@cindex Forward, Menuitem
@cindex >, Button
Steps forward through a series of remembered moves (undoing the
effect of @samp{Backward}) or forward through a game file. The
@samp{[>]} button and the @samp{f} key are equivalents.

If you are examining a game on ICS, the behavior of Forward
depends on whether @value{NAME} is in Pause mode. If Pause mode is
off, @samp{Forward} issues the ICS forward command, which moves
everyone's view of the game forward along the current line. If
Pause mode is on, @samp{Forward} only moves your local view forward,
and it will not go past the position that the game was in when
you paused.

@item Back to Start
@cindex Back to Start, Menuitem
@cindex <<, Button
Jumps backward to the first remembered position in the game.
The @samp{[<<]} button and the shifted @samp{B} key are equivalents.

In most modes, Back to Start only lets you look back at old
positions; it does not retract moves. This is the case if you
are playing against GNU chess, playing or observing a game on
the ICS, or loading a game. If you select @samp{Back to Start} in any
of these situations, you will not be allowed to make different
moves. Use @samp{Retract Move} or @samp{Edit Game} if you want to change past
moves; or use Reset to start a new game.

If you are examining a game on ICS, the behavior of @samp{Back to
Start} depends on whether @value{NAME} is in Pause mode. If Pause mode
is off, @samp{Back to Start} issues the ICS @samp{backward 999999}
command, which backs up everyone's view of the game to the start and
allows you to make different moves. If Pause mode is on, @samp{Back
to Start} only backs up your local view.

@item Forward to End
@cindex Forward to End, Menuitem
@cindex >>, Button
Jumps forward to the last remembered position in the game. The
@samp{[>>]} button and the shifted @samp{F} key are equivalents.

If you are examining a game on ICS, the behavior of @samp{Forward to
End} depends on whether @value{NAME} is in Pause mode. If Pause mode
is off, @samp{Forward to End} issues the ICS @samp{forward 999999}
command, which moves everyone's view of the game forward to the end of
the current line. If Pause mode is on, @samp{Forward to End} only moves
your local view forward, and it will not go past the position
that the game was in when you paused.

@item Revert
@cindex Revert, Menuitem
If you are examining a game on ICS and Pause mode is off, issues
the ICS command @samp{revert}.

@item Truncate Game
@cindex Truncate Game, Menuitem
Discards all remembered moves of the game beyond the current
position. Puts @value{NAME} into @samp{Edit Game} mode if it was not there
already.

@item Move Now
@cindex Move Now, Menuitem
Forces the chess program to move immediately. GNU Chess mode only.

@item Retract Move
@cindex Retract Move, Menuitem
Retracts your last move. In GNU Chess mode, you can do this only
after the chess program has replied to your move; if the chess program is still
thinking, use @samp{Move Now} first. In ICS mode, @samp{Retract Move}
issues the command @samp{takeback 1} or @samp{takeback 2}
depending on whether it is your opponent's move or yours.
@end table


@node Options Menu
@section User Preferences
@cindex Menu, Options
@cindex Options Menu
@table @asis
@item Always Queen
@cindex Always Queen, Menuitem
Toggles the @code{alwaysPromoteToQueen} option.
@xref{User interface options}.
@item Auto Comment
@cindex Auto Comment, Menuitem
Toggles the autoComment option.
@xref{ICS options}.
@item Auto Flag
@cindex Auto Flag, Menuitem
Toggles the @code{autoCallFlag} option: @value{NAME} will automatically
claim a win for you, if your opponents flag falls on ICS.
@xref{ICS options}.
@item Auto Observe
@cindex Auto Observe, Menuitem
Toggles the @code{autoObserve} option. @xref{ICS options}.
@item Auto Save
@cindex Auto Save, Menuitem
Toggles the @code{autoSaveGames} option. Disabled if the @code{saveGameFile}
option is set, as in that case all games are saved to the specified file.
@xref{I/O options}.
@item Bell
@cindex Bell, Menuitem
Toggles the @code{ringBellAfterMoves} option. @xref{User interface options}.
@item Flip View
@cindex Flip View, Menuitem
Inverts your view of the chess board for the duration of the
current game. Starting a new game returns the board to normal.

If you are playing a game on the ICS, the board is always
oriented at the start of the game so that your pawns move from
the bottom of the window towards the top. Otherwise, the starting
orientation is determined by the @code{flipView} command line option;
if it is false (the default), White's pawns move from bottom to top
at the start of each game; if it is true, Black's pawns move from
bottom to top. @xref{User interface options}.
@item Get Move List
@cindex Get Move List, Menuitem
Toggles the @code{getMoveList} option.  @xref{ICS options}.
When you turn this option on from the menu, @value{NAME}
immediately fetches the move list of the current game (if any).
@item Old Save Style
@cindex Old Save Style, Menuitem
Toggles the @code{oldSaveStyle} option. @xref{I/O options}.
@item Periodic Updates
@cindex Periodic Updates, Menuitem
If you are using the "XBoard-supported" version of Crafty (see
@xref{Crafty}) then you can decide whether you want the Analysis Window
to be updated periodically or not. If this option is unchecked (or if
you are not using the "XBoard-supported" Crafty), the the analysis window
will only be updated when the analysis changes. If this option is
checked, the Analysis Window will be updated every two seconds.
@item Quiet Play
@cindex Quiet Play, Menuitem
Toggles the @code{quietPlay} option. @xref{ICS options}.
@item Show Coords
@cindex Show Coords, Menuitem
Toggles the @code{showCoords} option. @xref{User interface options}.
@item Show Thinking
@cindex Show Thinking, Menuitem
Toggles the @code{showThinking} option. @xref{GNU Chess options}.
@end table


@node Help Menu
@section Getting help
@cindex Menu, Help
@cindex Help Menu
@table @asis
@item Info @value{NAME}
@cindex Info @value{NAME}, Menuitem
Displays this info file in a new window.  For this feature to work,
you must have the GNU info program installed on your system,
and the file @file{xboard.info} must either be present in the current 
working directory, or have been installed by 
the @samp{make install} command when you built @value{NAME}.
@item Man @value{NAME}
@cindex Man @value{NAME}, Menuitem
Displays the @value{NAME} man page in a new window.  For this feature to work,
the file @file{xboard.6} must have been installed by 
the @samp{make install} command when you built @value{NAME}, and the
directory it was placed in must be on the search path for your system's
@samp{man} command.
@item Hint
@cindex Hint, Menuitem
Displays a move hint from GNU Chess. GNU Chess mode only.
@item Book
@cindex Book, Menuitem
Displays a list of possible moves from GNU Chess's opening book.
The first column gives moves, the second column gives one possible
response for each move, and the third column shows the
number of lines in the book that include the move from the first
column. If you select this option and nothing happens, GNU
Chess is out of its book.  GNU Chess mode only.

@ifset AMYBOARD
@item About Game
@cindex About Game, Menuitem
Displays information about the current game, in the form of PGN
(portable game notation) tags.
@end ifset

@ifclear AMYBOARD
@item About @value{NAME}
@cindex About @value{NAME}, Menuitem
Shows the current @value{NAME} version number.
@end ifclear
@end table


@ifclear AMYBOARD
@node Keys
@section Other shortcut keys
@cindex Keys
@cindex Shortcut keys
@table @asis
@item Iconize
Pressing the @samp{i} or @samp{c} key iconizes @value{NAME}. The graphical
icon displays a white knight if it is white's move, or a black knight,
if it is Black's move. If your X window manager displays only text icons,
not graphical ones, check its documentation; there is probably a way to
enable graphical icons. If you are running the Motif window manager
@file{mwm} (1), add these lines to your @file{.Xdefaults} file and
restart mwm:

@example
Mwm*iconDecoration: activelabel label image
Mwm*@value{NAME}*iconImageBackground: White
Mwm*@value{NAME}*iconImageForeground: Black
@end example
@noindent
The first line above enables graphical icons in mwm; you don't need it
if you already have them. The next two lines force the white knights to
come out white and the black knights black. Unfortunately these resources
can't be set from inside @value{NAME}; you have to set them in your
@file{.Xdefaults} file.
@end table

You can add or remove shortcut keys using the X resources
@code{form.translations}. Here is an example of what would go in your
@file{.Xdefaults} file:

@example
@value{NAME}*form.translations: Shift<Key>?: AboutGameProc() \n\
<Key>y: AcceptProc() \n\
<Key>n: DeclineProc() \n\
<Key>i: NothingProc()
@end example
@noindent
Binding a key to @code{NothingProc} makes it do nothing, thus removing
it as a shortcut key. The @value{NAME} commands that can be bound to keys
are:

@example
AbortProc, AboutGameProc, AboutProc, AcceptProc, AdjournProc,
AlwaysQueenProc, AnalyzeGameProc, AnalyzeModeProc, AutobsProc,
AutoflagProc, AutosaveProc, BackwardProc, BellProc, BookProc,
CallFlagProc, DebugProc, DeclineProc, DrawProc, EditCommentProc,
EditGameProc, EditPositionProc, EditTagsProc, FlipViewProc, ForwardProc,
GetMovesProc, HintProc, Iconify, IcsClientProc, InfoProc, LoadGameProc,
LoadNextGameProc, LoadPositionProc, LoadPrevGameProc, MachineBlackProc,
MachineWhiteProc, MailMoveProc, ManProc, MoveNowProc, NothingProc,
OldSaveStyleProc, PauseProc, PeriodicUpdatesProc, QuietPlayProc,
QuitProc, ReloadCmailMsgProc, ReloadGameProc, ResetProc, ResignProc,
RetractMoveProc, RevertProc, SaveGameProc, SavePositionProc,
ShowCoordsProc, ShowGameListProc, ShowThinkingProc, StopExaminingProc,
StopObservingProc, ToEndProc, ToStartProc, TruncateGameProc,
TwoMachinesProc.
@end example
@end ifclear


@node ICS
@chapter Using @value{NAME} with an Internet Chess Server (ICS)
@cindex ICS
@cindex ICS, addresses
@cindex Internet Chess Server
An @dfn{Internet Chess Server}, or @dfn{ICS}, is a place on the 
Internet where people can get together to play chess,
watch other people's games, or just chat.
You can use either @code{telnet} or
a client program like @value{NAME} to connect to the server.
ICS is getting more and more important for chess players: 
There are thousands of registered users on the different
ICS hosts, and it is not unusual to meet 200 on both ICC and FICS.
The number is increasing rapidly.

Most people can just type

@example
@value{LCNAME} -ics
@end example
@noindent
to start @value{NAME} as
an ICS client.  Invoking @value{NAME} in this way connects you to
the Internet Chess Club (ICC), a commercial ICS.  You can log in there as
a guest even if you do not have a paid account.  To connect to
the largest Free ICS (FICS), use the command

@example
@value{LCNAME} -ics -icshost ics.onenet.net
@end example
@noindent
instead, or substitute a different host name to connect to your
favorite ICS.
The @file{ics-addresses} in the 
@value{NAME} distribution includes a list of ICS hosts, and the
file @file{ics-info} is a longer introduction to ICS.
For a full description of command-line options that control 
the connection to ICS and change the default values of ICS options, see
@ref{ICS options}.  

@ifset AMYBOARD
@cindex SLIP
@cindex PPP
Usually you are using @file{telnet} (1) to connect to the chess server.
(@value{NAME} does this for you.)
However, @file{telnet} assumes a @code{SLIP} or @code{PPP} connection
or something similar to the Internet. @value{NAME} is not bound to this,
however: You can replace @file{telnet} by any program reading from stdin
and writing to stdout, for example a simple terminal program.

@menu
* Serial ICS connection::   Using a terminal program to connect to ICS.
@end menu
@end ifset

While you are running @value{NAME} as an ICS client,
you use the terminal window that you started @value{NAME} from
as a place to type in commands and read information that is
not available on the chessboard.

The first time you need to use the terminal is to enter your login name
and password, if you are a registered player. (You don't need to do
this manually; the @code{icsLogon} option can do it for you.
@pxref{ICS options})  If you are not registered, enter any name.
If someone has already registered under that name, you'll be
asked for a password; just hit return and try again.
Or on ICC, you can enter @samp{g} as your name, and ICC will pick a
unique (but boring) name for you.

Some useful ICS commands
include
@table @kbd
@item help <topic>
@cindex help, ICS command
to get help on the given <topic>. To get a list of possible topics type
@dfn{help} without topic.  Try the help command before you ask other
people on the server for help.

For example @kbd{help register} tells you how to become a registered
ICS player.
@item who <flags>
@cindex who, ICS command
to see a list of people who are logged on.  Administrators
(people you should talk to if you have a problem) are marked
with the character @samp{*}, an asterisk. The <flags> allow you to
display only selected players: For example, @kbd{who of} shows a
list of players who are interested in playing but do not have
an opponent.
@item games
@cindex games, ICS command
to see what games are being played
@item match <player> [<mins>] [<inc>]
to challenge another player to a game. Both opponents get <mins> minutes
for the game, and <inc> seconds will be added after each move.
If another player challenges you, the server asks if you want to
accept the challenge; use the @kbd{accept} or @kbd{decline} commands
to answer.
@item accept
@itemx decline
@cindex accept, ICS command
@cindex decline, ICS command
to accept or decline another player's offer. 
The offer may be to start a new game, or to agree to a 
@kbd{draw}, @kbd{adjourn} or @kbd{abort} the current game. @xref{Action Menu}.

If you have more than one pending offer (for example, if more than one player
is challenging you, or if your opponent offers both a draw and to adjourn the
game), you have to supply additional information, by typing something
like @kbd{accept <player>}, @kbd{accept draw}, or @kbd{draw}.

@item draw
@itemx adjourn
@itemx abort
@cindex draw, ICS command
@cindex adjourn, ICS command
@cindex abort, ICS command
asks your opponent to terminate a game by mutual agreement. Adjourned
games can be continued later. 
Your opponent can either @kbd{decline} your offer or accept it (by typing the
same command or typing @kbd{accept}).  In some cases these commands work
immediately, without asking your opponent to agree.  For example, you can
abort the game unilaterally if your opponent is out of time, and you can claim
a draw by repetition or the 50-move rule if available simply by typing 
@kbd{draw}.
@item finger <player>
@cindex finger, ICS command
to get informations about the given <player>. (Default: yourself.)
@item vars
@cindex vars, ICS command
to get a list of personal settings
@item set <var> <value>
@cindex set, ICS command
to modify these settings
@item observe <player>
@cindex observe, ICS command
to observe an ongoing game of the given <player>.
@item examine
@itemx oldmoves
@cindex examine, ICS command
@cindex oldmoves, ICS command
to review a recently completed game
@end table

Some special @value{NAME} features are activated when you are
in examine mode on ICS.  See the descriptions of the menu commands
@samp{Forward}, @samp{Backward}, @samp{Pause}, @samp{ICS Client}, 
and @samp{Stop Examining} on the @ref{Step Menu}, @ref{Mode Menu}, and
@ref{Options Menu}.

@ifset AMYBOARD
@node Serial ICS connection,,,ICS
@subsection Using a terminal program to connect to ICS.
@cindex Serial ICS connection
@cindex ICS, Serial connection
@cindex IPDial
@cindex Terminal program
As already mentioned, you may connect to the ICS with any terminal
program, provided that it can read from stdin and write to stdout.
An example (which is well supported by the installation script)
is @code{IPDial}, which you find in the @file{comm/tcp} directory
on Aminet. However, you need to connect to a host with Internet
access which will act as a gateway to the ICS server.

Usually you do the following:
@itemize
@item Create a login script for your terminal program that allows
to login to your remote host. Probably you add a line like

@example
SEND "telnet chessclub.com 5000"
@end example
@noindent
to the login script: This would make the remote host to create
a connection to the ICS server chessclub.com (ICC) as the very first
command to execute. The installation script can create such a
login script for you, to be used by @code{IPDial}
(@file{PROGDIR:lib/IcsLogin.IPDial}, where @file{PROGDIR:} is the
directory of the AmyBoard binary). However, you
need to edit it manually, insert your remote hosts phone number,
your login name and password, for example.
@item Create an icon that calls your terminal program like it would
do with telnet; the installation script can do this for you.
@end itemize
@end ifset


@ifclear AMYBOARD
@node Firewalls
@chapter Connecting to the ICS through a firewall
By default, @value{NAME} communicates with an Internet Chess Server
by opening a TCP socket directly from the machine it is running on
to the ICS. If there is a firewall between your machine and the ICS,
this won't work. Here are some recipes for getting around common
kinds of firewalls using special options to @value{NAME}.
Important: See the paragraph in the below about extra echoes, in
@ref{Limitations}.

Suppose that you can't telnet directly to ICS, but you can telnet
to a firewall host, log in, and then telnet from there to ICS.
Let's say the firewall is called @samp{fire.wall.com}. Set
command-line options as follows:

@example
xboard -ics -icshost fire.wall.com -icsport 23
@end example
@noindent
Or in your @file{.Xdefaults} file:

@example
XBoard*internetChessServerHost: fire.wall.com
XBoard*internetChessServerPort: 23
@end example
@noindent
Then when you run @value{NAME} in ICS mode, you will be prompted
to log in to the firewall host. (This works because port 23 is the
standard telnet login service.) Do so, then telnet to ICS, using a
command like @samp{telnet chessclub.com 5000}, or whatever command
the firewall provides for telnetting to port 5000.

If your firewall lets you telnet (or rlogin) to remote hosts, but
doesn't let you telnet to port 5000, you will have to find some
other host outside the firewall that does let you do this, and
hop through it. For instance, suppose you have an account at
@samp{foo.edu}. Follow the recipe above, but instead of typing
@samp{telnet chessclub.com 5000} to the firewall, type
@samp{telnet foo.edu} (or @samp{rlogin foo.edu}), log in there, and
then type @samp{telnet chessclub.com 5000}.

Exception: chessclub.com itself lets you connect to the chess server on the
default telnet port (23), which is what you get if you don't specify a port
to the telnet program. But the other chess servers don't allow this.

Suppose that you can't telnet directly to ICS, but you can use rsh
to run programs on a firewall host, and that host can telnet to ICS.
Let's say the firewall is called @samp{rsh.wall.com}. Set
command-line options as follows:

@example
xboard -ics -gateway rsh.wall.com -icshost chessclub.com
@end example
@noindent
Or in your @file{.Xdefaults} file:

@example
XBoard*gateway: rsh.wall.com
XBoard*internetChessServerHost: chessclub.com
@end example
Then when you run @value{NAME} in ICS mode, it will connect to
the ICS by using @file{rsh} to run the command @samp{telnet
chessclub.com 5000} on host @samp{rsh.wall.com}.

Suppose that you can telnet anywhere you want, but you have to
run a special program called @file{ptelnet} to do so.

First, we'll consider the easy case, in which
@samp{ptelnet chessclub.com 5000} gets you to the chess server.
In this case set command line options as follows:

@example
xboard -ics -telnet -telnetProgram ptelnet
@end example
@noindent
Or in your @file{.Xdefaults} file:

@example
XBoard*useTelnet: true
XBoard*telnetProgram: ptelnet
@end example
@noindent
Then when you run @value{NAME} in ICS mode, it will issue the
command @samp{ptelnet chessclub.com 5000} to connect to the ICS.

Next, suppose that @samp{ptelnet chessclub.com 5000} doesn't work;
that is, your @file{ptelnet} program doesn't let you connect to
alternative ports. In this case, you will have to find some other
host outside the firewall that does let you do this, and hop
through it. For instance, suppose you have an account at
@samp{foo.edu}. Set command line options as follows:

@example
xboard -ics -telnet -telnetProgram ptelnet -icshost foo.edu -icsport ""
@end example
@noindent
Or in your @file{.Xdefaults} file:

@example
XBoard*useTelnet: true
XBoard*telnetProgram: ptelnet
XBoard*internetChessServerHost: foo.edu
XBoard*internetChessServerPort:
@end example
@noindent
Then when you run @value{NAME} in ICS mode, it will issue the
command @samp{ptelnet foo.edu} to connect to your account at
@samp{foo.edu}. Log in there, then type @samp{telnet chessclub.com 5000}.
@end ifclear


@ifclear AMYBOARD
@node CMail
@chapter Using @value{NAME} for electronic correspondence chess
@cindex cmail
The @file{cmail} program will help you play chess by email with opponents of
your choice using @value{NAME} as an interface.

You will usually run @file{cmail} without giving any options.

@menu
* CMail options::  Invoking CMail.
* CMail game::     Starting a CMail game.
* CMail answer::   Answering a move.
* CMail trouble::  Known CMail problems.
@end menu


@node CMail options
@section Invoking CMail.
@table @asis
@item -h
Displays @file{cmail} usage information.
@item -c
Shows the conditions of the GNU General Public License.
@xref{Copying}.
@item -w
Shows the warranty notice of the GNU General Public License.
@xref{Copying}.
@item -v
@itemx -xv
Provides or inhibits verbose output from @file{cmail} and @value{NAME},
useful for debugging. The
@code{-xv}
form also inhibits the cmail introduction message.
@item -mail
@itemx -xmail
Invokes or inhibits the sending of a mail message containing the move.
@item -xboard
@itemx -xxboard
Invokes or inhibits the running of @value{NAME} on the game file.
@item -reuse
@item -xreuse
Invokes or inhibits the reuse of an existing @value{NAME} to display the
current game.
@item -remail
Resends the last mail message for that game. This inhibits running
@value{NAME}.
@item -game <name>
The name of the game to be processed.
@item -wgames <number>
@itemx -bgames <number>
@itemx -games <number>
Number of games to start as White, as Black or in total. Default is 1 as
white and none as black. If only one color is specified then none of the
other color is assumed. If no color is specified then equal numbers of
White and Black games are started, with the extra game being as White if an
odd number of total games is specified.
@item -me <short name>
@itemx -opp <short name>
A one-word alias for yourself or your opponent.
@item -wname <full name>
@itemx -bname <full name>
@itemx -name <full name>
@itemx -oppname <full name>
The full name of White, Black, yourself or your opponent.
@item -wna <net address>
@itemx -bna <net address>
@itemx -na <net address>
@itemx -oppna <net address>
The email address of White, Black, yourself or your opponent.
@item -dir <directory>
The directory in which @file{cmail} keeps its files. This defaults to the
environment variable @code{$CMAIL_DIR} or failing that, @code{$CHESSDIR},
@file{$HOME/Chess} or @file{~/Chess}. It will be created if it does not exist.
@item -arcdir <directory>
The directory in which @file{cmail} archives completed games. Defaults to
the environment variable @code{$CMAIL_ARCDIR} or, in its absence, the same
directory as cmail keeps its working files (above).
@item -mailprog <mail program>
The program used by cmail to send email messages. This defaults to the
environment variable @code{$CMAIL_MAILPROG} or failing that
@file{/usr/ucb/Mail}, @file{/usr/ucb/mail} or @file{Mail}. You will need
to set this variable if none of the above paths fit your system.
@item -gamesFile <file>
@cindex .cmailgames
A file containing a list of games with email addresses. This defaults to
the environment variable @code{$CMAIL_GAMES} or failing that
@file{.cmailgames}.
@item -aliasesFile <file>
@cindex .cmailaliases
A file containing one or more aliases for a set of email addresses. This
defaults to the environment variable @code{$CMAIL_ALIASES} or failing
that @file{.cmailaliases}.
@item -logFile <file>
A file in which to dump verbose debugging messages that are invoked with
the @samp{-v}
option.
@item -event <event>
The PGN Event tag (default @samp{Email correspondence game}).
@item -site <site>
The PGN Site tag (default @samp{NET}).
@item -round <round>
The PGN Round tag (default @samp{-}, not applicable).
@item -mode <mode>
The PGN Mode tag (default @samp{EM}, Electronic Mail).
@item OTHER OPTIONS
Any unrecognized flags will be passed to @value{NAME}.
Those most relevant for use with Icmail\fP are
@samp{-timeDelay}, @samp{-noChessProgram}, @samp{-searchTime},
@samp{-searchDepth}, @samp{-saveGameFile}, @samp{-autosave},
@samp{-savePositionFile} and @samp{-boardSize}. @xref{Invocation}.
@end table


@node CMail game
@section Starting a CMail game.
Type @file{cmail} from a shell to start a game as white. After an opening
message, you will be prompted for a game name, which is optional -- if you
simply press return, the game name will take the form
@samp{you-VS-opponent}. You will next be prompted for the short name
of your opponent. If you haven't played this person before, you will also
be prompted for his/her email address. @file{cmail} will then invoke
@value{NAME} in the background. Make your first move and select
@samp{Mail Move} from the @samp{File} menu. @xref{File Menu}. If all is well,
@file{cmail} will mail a copy of the move to your opponent. If you select
@samp{Exit} without having selected @samp{Mail Move} then no move will be
made.


@node CMail answer
@section Answering a move.
When you receive a message from an opponent containing a move in one of
your games, simply pipe the message through @file{cmail}. In some mailers
this is as simple as typing @kbd{| cmail} when viewing the message, while in
others you may have to save the message to a file and do @kbd{cmail < file}
at the command line. In either case @file{cmail} will display the game using
@value{NAME}. If you didn't exit @value{NAME} when you made your first move
then @file{cmail} will do its best to use the existing @value{NAME} instead
of starting a new one. As before, simply make a move and select
@samp{Mail Move} from the @samp{File} menu. @xref{File Menu}. @file{cmail}
will try to use the
@value{NAME} that was most recently used to display the current game. This
means that many games can be in progress simultaneously, each with its own
active @value{NAME}.

If you want to look at the history or explore a variation, go ahead, but
you must return to the current position before @value{NAME} will allow you
to mail a move. If you edit the game's history you must select
@samp{Reload Same Game} from the @samp{File} menu to get back to the original
position, then make the move you want and select @samp{Mail Move}.
As before, if you decide you aren't ready to make a move just yet you can
either select @samp{Exit} without sending a move or just leave
@value{NAME} running until you are ready.

Because @value{NAME} can now detect checkmate and stalemate, @file{cmail}
now handles game termination sensibly. As well as resignation, the
@samp{Action} menu now allows draws to be offered and accepted for
@file{cmail} games.

For multi-game messages, only unfinished and just-finished games will be
included in email messages. When all the games are finished, they are
archived in the user's archive directory, and similarly in the opponent's
when he or she pipes the final message through @file{cmail}. The archive
file name includes the date the game was started.

It's possible to have a @file{cmail} message carry more than one game.
This feature was implemented to handle IECG (International Email Chess
Group) matches, where a match consists of 1 game as white and 1 as black,
with moves transmitted simultaneously. In case there are more general uses,
@file{cmail} itself places no limit on the number of black/white games
contained in a message; however, @value{NAME} does.


@node CMail trouble
@section Known CMail problems.
It's possible that a strange conjunction of conditions may occasionally
mean that @file{cmail} has trouble reactivating an existing
@value{NAME}. If this should happen, simply trying it again should work.
If not, remove the file that stores the @value{NAME}'s PID
(@file{game.pid}) or use the @samp{-xreuse} option to force
@file{cmail} to start a new @value{NAME}.

Versions of @file{cmail} after 2.16 no longer understand the old file format
that @value{NAME} used to use and so cannot be used to correspond with
anyone using an older version.

Versions of @file{cmail} older than 2.11 do not handle multi-game messages,
so multi-game correspondence is not possible with opponents using an older
version.
@end ifclear

@ifclear AMYBOARD
@node Environment
@chapter Environment variables
@cindex Environment variables
@cindex CHESSDIR
Game and position files are found in a directory named by the
@code{CHESSDIR} environment variable. If this variable is not set, the
current working directory is used. If @code{CHESSDIR} is set,
@value{NAME} actually changes its working directory to
@code{$CHESSDIR}, so GNU Chess listing files will also be stored there
as well.
@end ifclear

@node Limitations
@chapter Known limitations and bugs
@cindex Limitations
@cindex Bugs
There is no way for two people running copies of @value{NAME} to play
each other without going through the @code{Internet Chess Server}.

Under some circumstances, your ICS password may be echoed when you log on.

If you are connecting to the ICS by running telnet on an Internet provider
or firewall host, you may find that each line you type is echoed back an extra
time after you hit Return. If your Internet provider is a Unix system, you can
probably turn its echo off by typing

@example
stty -echo
@end example
@noindent
after you log in, and/or typing @key{^E-Return} (@key{control-E} followed by
the @key{Return} key) to the telnet program after you have logged into ICS.
It is a good idea to do this if you can, because the extra echo can
occasionally confuse @value{NAME}'s parsing routines.

The game parser recognizes only algebraic notation.

The internal move legality tester does not look at the game history,
so in some cases it misses illegal castling or en passant captures.
It permits castling with the king on the d file because this is possible in
some "wild 1" games on ICS.  It does not check
piece drops in bughouse to see if you actually
hold the piece you are trying to drop.
However, if you attempt an illegal move when using
GNU Chess (or the ICS), @value{NAME} will accept the error message
that comes back, undo the move, and let you try another.

FEN positions saved by @value{NAME} do not include
correct information about whether castling or en passant are legal.

The mate detector does not understand that non-contact mate is not really mate
in bughouse.  The only problem this causes while playing is minor: a
@samp{#} (mate indicator) character will show up after a 
non-contact mating move in
the move list.  @value{NAME} will not assume the game is over at that point.

@samp{Edit Game} mode always uses non-bughouse rules.  Although you can load
and edit games that contain piece drops, the piece menus are not active, so
you cannot insert piece drops.  Also, @value{NAME}
thinks an edited game is over when a mating move is inserted, even if the mate
is non-contact.

@ifset AMYBOARD
Due to a problem which I did not figure out yet, it might be needed to add
an empty line to the top of the @file{.icsrc} file.
@end ifset

Some @value{NAME} functions may not work with versions of GNU Chess earlier
than 4.0, patchlevel 73,
or with versions of Crafty other than the "xboard-supported"
version; see GETTING CRAFTY above.
A few functions work with GNU Chess but not Crafty, or vice versa.

@ifclear AMYBOARD
The menus may not work if your keyboard is in Caps Lock mode.
This seems to be a problem with the Athena menu widget.

@value{NAME} depends on the Xt Intrinsics and Athena Widget
Set of X11R4 or later. In particular, X11R3 just won't do.
@end ifclear

@ifset AMYBOARD
@cindex Color settings
@cindex Stack
@cindex Toolmanager
@itemize
@item The most common problem is, that people don't see the pieces, after
they have started @value{NAME} the first time. The reason is simple: Their
color settings in the MUI prefs don't fit @value{NAME}'s requirements.
To fix this problem you have two possibilities
@enumerate
@item Use the MUI prefs to fix appropriate colors for @value{NAME}; the
program uses MUI's @code{Shinepen}, @code{Shadowpen}, @code{Halfshinepen} and
@code{Halfshadowpen}. Be sure, that these are all different.
@item Enter pen settings in the prefs file of @value{NAME} (usually
@file{PROGDIR:lib/AmyBoard.prefs}) manually.
@end enumerate
@item Another common problem are strange crashes, especially in ICS mode.
This can happen, if your stack is too low: A value of 10000 should be
sufficient, but the CLI default value of 4096 definitely isn't. Note,
that Toolmanager uses the same value by default: You must increase it in
the @code{Exec object}, if you want to start @value{NAME} from
Toolmanager.
@end itemize
@end ifset

@node Problems
@chapter Reporting problems
@cindex Bugs
@cindex Bug reports
@cindex Reporting bugs
@cindex Problems
@cindex Reporting problems

@ifclear AMYBOARD
Report bugs and problems with @value{NAME} to
@example
bug-gnu-chess@@prep.ai.mit.edu.
@end example

Please use the @file{script} program to start a typescript, run 
@value{NAME} with the @samp{-debug} option, and include the typescript
output in your message.
Also tell us what kind of machine and what operating system version
you are using.  The command @samp{uname -a} will often tell you this.
Here is a sample of approximately what you should type:

@example
script
uname -a
./configure
make
./xboard -debug
exit
mail bug-gnu-chess@@prep.ai.mit.edu
Subject: problem with foobaz command in XBoard
Description of the problem
~r typescript
.
@end example

If you improve @value{NAME}, please send a message about your changes to
bug-gnu-chess, and we will get in touch with you about merging them in
to the main line of development.

Send CMail bug reports/suggestions to
@example
evan@@quadstone.co.uk
@end example
@end ifclear

@ifset AMYBOARD
Report bugs and problems with @value{NAME} or GNU Chess to
@example
bug-gnu-chess@@prep.ai.mit.edu
@end example

Please run AmyBoard from the CLI with the @samp{debug} option and include
the output in your message. Also tell us what machine and what version
of both AmigaOS and MUI you are using.
@end ifset

@node Contributors
@chapter Authors and contributors to @value{NAME}
@cindex Authors
@cindex Contributors
@table @asis
@item Tim Mann (mann@@pa.dec.com)
has been responsible for XBoard versions 1.3 through 3.5 and for
WinBoard, a port of XBoard to Microsoft Win32 (Windows NT and
Windows 95)

@item Jochen Wiedmann (wiedmann@@neckar-alb.de)
ported XBoard to the Amiga, creating AmyBoard, and converted the
documentation to texinfo.  He was responsible for AmyBoard versions through
330.5 (based on xboard 3.3.pl0).

@item Frank McIngvale (frankm@@hiwaay.net)
added "Click-Click" mode, the Analysis modes,
piece flashing, ZIICS import, and ICS text colorization.

@item Chris Sears and Dan Sears
wrote the original XBoard.  They were responsible for versions 1.0
through 1.2.

@item Elmar Bartel
contributed the new piece bitmaps introduced in version 3.2.

@item Evan Welsh (evan@@quadstone.co.uk)
wrote @code{CMail}.

@item Patrick Surry
helped with design, testing and documenting CMail.

@item John Chanak
contributed the initial implementation of ICS mode.

@item Wayne Christopher
created @code{XChess}; the color scheme and the old 80x80 piece bitmaps
were taken from it.
@end table


@node Copying
@unnumbered GNU GENERAL PUBLIC LICENSE
@include gpl.texinfo

@node Index
@unnumbered Index


@printindex cp
@contents
@bye
