@c The basic generic command list.
@c @set FULL
@c @clear FULL

You may specify a command in two ways; by typing the single letter for
the command, or by using the 'o' command and typing in a long command
name followed by any additional data, as appropriate to the command.

You may also specify a numerical prefix argument by entering a sequence
of digits 0-9 before entering the command.  The interpretation of the
prefix argument depends on the command; typically it will be a
repetition or size.  Negative prefix arguments are not possible.

@i{Xconq} uses the ``standard'' letters to specify directions.
@ifset FULL
While the positions of ``yubn'' are all analogous to their respective
directions from ``h'' on a normal keyboard, the rationale for ``hjkl''
is lost in the mists of time; but those of you who are already
programmed from years of vi, rogue, nethack, etc will appreciate the
compatibility!
@end ifset
@example
                       y  k  u
                        \ | / 
                       h- . -l
                        / | \ 
                       b  j  n
@end example
As commands, lower-case letters @code{[yubnhjkl]} indicate that the
unit(s) should move one cell in that direction.  Upper-case letters
@code{[YUBNHJKL]} tell the unit(s) to move repeatedly in that direction,
either forever, or to a distance specified by the prefix.  Control-case
letters are reserved for future definition.

The following list is generally in alphabetical order.

@table @code

@item @code{' '}
(@code{reserve}) Reserve unit.
@ifset FULL
Put selected unit(s) into reserve for the remainder of this turn.
Units that are in reserve may still be selected and moved by direct
order, but will not insist on being moved before the turn can end.
@end ifset

@item @code{ ! }
(@code{detonate}) Detonate.
@ifset FULL
The selected unit will detonate at its current location.
@c need a way to select loc
@end ifset

@item @code{ ? }
(@code{help}) Display help info.

@item @code{ # }
(@code{distance}) Display distance to selected place.

@item @code{ . }
(@code{recenter}) Center around the current point.
@ifset FULL
For interfaces that can zoom, this command also focusses on the current
point, so that it will still be in the middle as you zoom in.
@end ifset

@item @code{ @@ }
(@code{angle}) Change view angle.
@ifset FULL
If the interface supports it, this command will cause the map to display
at an angle.  This is useful for seeing elevations more realistically.
The command cycles through angles of 90 degrees (overhead), 30 degrees,
and 15 degrees; the prefix argument sets the vertical exaggeration.
@end ifset

@item @code{ a }
(@code{attack}) Attack.

@item @code{ A }
(@code{add-terrain}) Add terrain.
@ifset FULL
If you supply no prefix argument, and the selected unit(s) can add any
one of several types of terrain, then you will be asked to choose the
terrain type.  Then you will be asked for the cell or edge to modify.
@end ifset

@item @code{C-A}
(@code{auto}) Set AI control of unit.
@ifset FULL
If you supply a prefix of 1, then the unit(s) will become AI-controlled.
If you supply a prefix of 0, then the unit(s) become manually controlled.
If you supply no prefix, then the AI control will toggle.
@end ifset

@item @code{ b }
(@code{southwest}) Move southwest.

@item @code{ B }
(@code{southwest-multiple}) Move southwest multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit(s) will move as far as possible.
@end ifset

@item @code{ C }
(@code{clear-plan}) Clear unit plans.

@item @code{ d }
(@code{delay}) Delay unit.
@ifset FULL
Postpone doing anything with the selected unit(s) until after all
others have moved in this turn.
@end ifset

@item @code{ D }
(@code{disband}) Disband unit.
@ifset FULL
Make the selected unit(s) do one disband action.
@end ifset

@item @code{C-D}
(@code{detach}
Detach a unit from the selected multi-part unit.
@ifset FULL
The prefix argument gives the number of parts of detach;
by default, the unit will be divided in half.
@end ifset

@item @code{ e }
(@code{embark}) Embark on transport.

@item @code{ f }
(@code{fire}) Fire unit.

@item @code{ F }
(@code{formation}) Set formation.
@ifset FULL
You will be asked to designate a unit to lead the formation.
Then the selected unit(s) will get a goal to maintain the
same relative position to the leader that existed at the
time the command was entered.  The prefix argument says
by how many cells the following unit may vary from its
designated position; for instance, if the value is 1,
then the unit is in formation if it is in any cell adjacent
to its nominal location.  The variation defaults to 1.
@end ifset

@item @code{C-F}
(@code{fire-into}) Fire into a location.
@ifset FULL
Fire indiscriminately into a designated location,
whether any target units are visible.
@end ifset

@item @code{ g }
(@code{give}) Give supplies.
@ifset FULL
Transfer non-essential supply from the selected unit(s)
to occupants and others in same and adjacent cells.
@end ifset

@item @code{ G }
(@code{give-unit}) Give unit to side.

@item @code{ h }
(@code{west}) Move west.

@item @code{ H }
(@code{west-multiple}) Move west multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ i }
(@code{in}) Cycle through cell's interior.
@ifset FULL
Use this command to cycle through all the units at the
location(s) of the selected unit(s).  Successive
commands eventually go down through all occupants
and through each unit stacked in the cell.
@end ifset

@item @code{ j }
(@code{south}) Move south.

@item @code{ J }
(@code{south-multiple}) Move south multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ k }
(@code{north}) Move north.

@item @code{ K }
(@code{north-multiple}) Move north multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ l }
(@code{east}) Move east.

@item @code{ L }
(@code{east-multiple}) Move east multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ m }
(@code{move-to}) Move to a place.
@ifset FULL
You will be asked to specify a location to move to.
The prefix argument specifies how closely will be
satisfactory; the default is 0, meaning that the
unit must actually be in the chosen destination cell.
@end ifset

@item @code{ M }
(@code{message}) Send a message to another side or sides.
@ifset FULL
The default is to broadcast to all sides; if you wish
to send a message to only one side, prefix the command
with the side's number (1 for the first side in the list
of sides, and so forth).

The message @code{%reveal} is special; if you send this,
then the receiving sides will receive information
on the positions of your units.  This is obviously
useful for allies; it is useful for enemies, if you
want to convince them to resign.  (Of course, if they're
stronger than you think and don't resign, then you just
gave away your secrets!)
@end ifset

@item @code{C-M}
(@code{end-turn}) End activity for this turn.
(This is the ``return'' key.)
@ifset FULL
This command indicates that you are done with your moves,
and that the game may proceed to the next turn.  If sides
are moving sequentially one-at-a-time, then the next side
will become the only one actually moving, and you will not
be able to have any of your units do anything more (although
you may set orders to be executed during the next turn).
If sides are moving simultaneously, then you may still
do actions, but you will have to select the units manually.
@end ifset

@item @code{ n }
(@code{southeast}) Move southeast.

@item @code{ N }
(@code{southeast-multiple}) Move southeast multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ o }
(@code{other}) Do other commands.
@ifset FULL
This command brings up a dialog or prompt that lets you enter
a long-name command and additional data for it, all as text.
When you indicate that you are done composing (either by typing
return or by clicking OK, as appropriate), @i{Xconq}) will
attempt to interpret and then execute the command.
@end ifset

@item @code{ p }
(@code{produce}) Set material production.

@item @code{ P }
(@code{produce-unit}) Set up unit construction.
@ifset FULL
@i{Xconq} will ask you for a unit type to construct, then
sets up a construction task to produce one or more of that
type.  You can use the prefix argument to request the number
to build; the default comes from the side's doctrine,
and is usually 99.
@end ifset

@item @code{ Q }
(@code{quit}) Quit the game.
@ifset FULL
If the game is still in progress, then you will be asked
if you wish to draw or resign.  If no other players are
willing to declare a draw, then you must resign in order
to get out.
@end ifset

@item @code{ r }
(@code{return}) Return to a resupply point.
@ifset FULL
The unit will search for the closest unit which has supplies
of the types that it needs, and attempt to move there.
If it cannot find such a unit within the radius that it
expects to survive without resupplying, the command will
fail and the unit will do nothing.
@end ifset

@item @code{ R }
(@code{remove-terrain}) Remove terrain.

@item @code{C-R}
(@code{refresh}) Redraw display.
@ifset FULL
For various reasons, an @i{Xconq}) display might become incorrect.
This command will erase all windows and redraw them.
@end ifset

@item @code{ s }
(@code{sleep}) Sleep.
@ifset FULL
Put selected unit(s) to sleep.  A sleeping unit will not ask to move
again until it wakes up.  Units may be woken explicitly, or may wake
up if an unfriendly unit gets too close.
@end ifset

@item @code{ S }
(@code{save}) Save the game.
@ifset FULL
@i{Xconq}) will save the complete state of the game into a file.
You may or may not get a choice of file name, depending on
the interface you're using.
@end ifset

@item @code{ t }
(@code{take}) Take supplies.
@ifset FULL
Transfer materials from a ``nearby'' unit into the selected one(s).
First choice of donor unit is the transport if there is one,
then units stacked in the same cell, then occupants.
@end ifset

@item @code{ T }
(@code{take-unit}) Take unit from another side.

@item @code{ u }
(@code{northeast}) Move northeast.

@item @code{ U }
(@code{northeast-multiple}) Move northeast multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ w }
(@code{wake}) Wake up.
@ifset FULL
Selected units that are asleep or in reserve will be woken up.
The prefix argument specifies a radius of effect around each
unit, in which all units not in transports will also be awakened.
@end ifset

@item @code{ W }
(@code{wakeall}) Wake up all.
@ifset FULL
Similar to ``wake'', but all occupants will be affected also.
@end ifset

@item @code{ y }
(@code{northwest}) Move northwest.

@item @code{ Y }
(@code{northwest-multiple}) Move northwest multiple.
@ifset FULL
If supplied, the prefix argument specifies how many cells
to move by; otherwise, the unit will move as far as possible.
@end ifset

@item @code{ z }
(@code{survey}) Switch between survey and move modes.
@ifset FULL
@end ifset

@end table

The following commands are not guaranteed to be available except
by using their long names, but some interfaces may have shortcuts
for some of these.

Some of these commands may take arguments.  Whitespace (spaces and
tabs) spearates the arguments from the command name, and from each
other.  If any argument, such as the name of a unit, must include
a space or tab, you may enclose the argument in double quotes.

@table @code

@item @code{add-player}
Add a player into the game.
@ifset FULL
If supplied, the command argument is a specification of the player,
with the same syntax as used to specify players when starting a game.
If no command argument is supplied, the new player will be an AI of
the default type.  The new player's side will have a set of starting units
comparable to those of other sides, and will be placed according
to the same rules as applied to the existing sides.
@end ifset

@item @code{ai}
Toggle the AI.

@item @code{copying}
Display the copying rules.

@item @code{distrust}
Distrust the given side.

@item @code{draw}
Declare a willingness to draw.
@ifset FULL
If all players are willing to draw, then the game simply ends,
without any losers or winners being declared.
@end ifset

@item @code{follow-action}
Follow the action.
@ifset FULL
When set,
the map or view will automatically scroll to any place where combat actions are happening.
@end ifset

@item @code{if} condition task
Set up a standing order.
@ifset FULL
A unit will execute a standing order if it has done all of its pending
tasks, and the order's condition applies, by adding the specified
task to its agenda.  The condition has the form
``@var{type} at/in/near/within @var{location}/@var{unit-name}'',
where @var{type} is the name of a unit type, @var{location} is
of the form @var{x},@var{y}, and @var{unit-name} is the name of
some unit.  The @var{task} has the form
``@var{task-type} @var{arguments}'', where the arguments are determined
by the task's type.

Note that units consider standing orders only when it has nothing
else to do.  For instance, if a unit is moving to some location, and
on the way happens to pass through a cell that has a standing order,
it will NOT be affected by that order.  The unit must actually stop
in that cell.
@end ifset

@item @code{name}
Set the name of a unit.

@item @code{print}
Print the current view of the world.

@item @code{rate} slow fast
Set AI play rate.
@ifset FULL
The command's data must be of the form "<slow> <fast>",
where <slow> and <fast> are plan executions per minute.
The slow rate is for when human players are still
actively moving, while the fast rate is for when only
AIs are doing anything.
@end ifset

@item @code{replan}
Make the AI replan.

@item @code{resign}
Resign.
@ifset FULL
This causes the side to lose, but leaves the game running.
@end ifset

@item @code{surrender-to}
Be controlled by the given side.
@ifset FULL
This causes the side to become controlled by the side being
surrendered to, but the side still remains in the game.
@end ifset

@item @code{trust}
Trust the given side.
@ifset FULL
This is a unilateral declaration of trust, which means that the
trusted side will see what your side sees, its units may use
your units, and so forth.  (Obviously this is quite risky if
the other side does not also trust you!)
@end ifset

@item @code{version}
Display the version and copyright.

@item @code{warranty}
Display the lack of warranty.

@end table

The following commands are intended for game designers,
and are only available if designing has been compiled into @i{Xconq}.
See the chapters on game design and GDL for more information.

@table @code

@item @code{design}
Toggle design mode.

@item @code{gdl}
Evaluate a GDL expression.
@ifset FULL
Note that some values derived from GDL forms are precomputed
and cached, and it is not guaranteed that they will all be
recalculated.
@end ifset

@end table

@ifset FULL
The following commands are intended for debugging,
and are only available if debugging support has been
compiled into @i{Xconq}.

They act as toggles, and are independent of each other,
so you can control what kind of information is output.  The transcript
will go to standard output or to a file, depending on the interface and
system.  These commands are really only of use to @i{Xconq} hackers and
sometimes to game designers.

@table @code

@item @code{D}
Toggle general debugging.

@item @code{DG}
Toggle graphics debugging.

@item @code{DM}
Toggle AI debugging.

@end table
@end ifset

@ifset FULL
The current set of commands is somewhat different from that of @i{Xconq}
5.x.  The most common ones have generally been retained, but others have
been renamed or dropped.
@end ifset
